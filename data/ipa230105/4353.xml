<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004354A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004354</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940654</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>57</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>063</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>57</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0604</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0659</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0673</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>063</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">ELEMENTS FOR IN-MEMORY COMPUTE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16890870</doc-number><date>20200602</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11474788</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17940654</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62859642</doc-number><date>20190610</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>STMICROELECTRONICS S.R.L.</orgname><address><city>Agrate Brianza</city><country>IT</country></address></addressbook><residence><country>IT</country></residence></us-applicant><us-applicant sequence="01" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>STMICROELECTRONICS INTERNATIONAL N.V.</orgname><address><city>Geneva</city><country>CH</country></address></addressbook><residence><country>CH</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>CHAWLA</last-name><first-name>Nitin</first-name><address><city>Noida</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>ROY</last-name><first-name>Tanmoy</first-name><address><city>Greater Noida</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>GROVER</last-name><first-name>Anuj</first-name><address><city>New Delhi</city><country>IN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>DESOLI</last-name><first-name>Giuseppe</first-name><address><city>San Fermo Della Battaglia</city><country>IT</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>STMICROELECTRONICS S.R.L.</orgname><role>03</role><address><city>Agrate Brianza</city><country>IT</country></address></addressbook></assignee><assignee><addressbook><orgname>STMICROELECTRONICS INTERNATIONAL N.V.</orgname><role>03</role><address><city>Geneva</city><country>CH</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A memory array arranged in multiple columns and rows. Computation circuits that each calculate a computation value from cell values in a corresponding column. A column multiplexer cycles through multiple data lines that each corresponds to a computation circuit. Cluster cycle management circuitry determines a number of multiplexer cycles based on a number of columns storing data of a compute cluster. A sensing circuit obtains the computation values from the computation circuits via the column multiplexer as the column multiplexer cycles through the data lines. The sensing circuit combines the obtained computation values over the determined number of multiplexer cycles. A first clock may initiate the multiplexer to cycle through its data lines for the determined number of multiplexer cycles, and a second clock may initiate each individual cycle. The multiplexer or additional circuitry may be utilized to modify the order in which data is written to the columns.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="109.22mm" wi="158.75mm" file="US20230004354A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="217.59mm" wi="166.29mm" orientation="landscape" file="US20230004354A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="235.20mm" wi="170.86mm" file="US20230004354A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="232.83mm" wi="169.59mm" file="US20230004354A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="234.78mm" wi="169.50mm" file="US20230004354A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="212.34mm" wi="156.21mm" file="US20230004354A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="213.87mm" wi="152.40mm" file="US20230004354A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="231.48mm" wi="171.70mm" file="US20230004354A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="234.02mm" wi="170.77mm" file="US20230004354A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="237.74mm" wi="161.46mm" file="US20230004354A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="235.46mm" wi="153.84mm" file="US20230004354A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="229.62mm" wi="166.96mm" file="US20230004354A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="235.46mm" wi="152.23mm" file="US20230004354A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">Technical Field</heading><p id="p-0002" num="0001">The present disclosure generally relates to a memory array, such as a memory array used in a learning/inference machine (e.g., an artificial neural network (ANN)).</p><heading id="h-0003" level="1">Description of the Related Art</heading><p id="p-0003" num="0002">It is known that various computer vision, speech recognition, and signal processing applications benefit from the use of learning/inference machines. Learning/inference machines, as discussed in this disclosure, may fall under the technological titles of machine learning, artificial intelligence, neural networks, probabilistic inference engines, accelerators, and the like. Such machines are arranged to quickly perform hundreds, thousands, and millions of concurrent operations. Conventional learning/inference machines can deliver hundreds of teraflops (i.e., one million millions (<b>10</b><sup>12</sup>) floating-point operations per second) of computing power.</p><p id="p-0004" num="0003">Known computer vision, speech recognition, and signal processing applications benefit from the use of learning/inference machines, such as deep convolutional neural networks (DCNN). A DCNN is a computer-based tool that processes large quantities of data and adaptively &#x201c;learns&#x201d; by conflating proximally related features within the data, making broad predictions about the data, and refining the predictions based on reliable conclusions and new conflations. The DCNN is arranged in a plurality of &#x201c;layers,&#x201d; and different types of predictions are made at each layer.</p><p id="p-0005" num="0004">For example, if a plurality of two-dimensional pictures of faces is provided as input to a DCNN, the DCNN will learn a variety of characteristics of faces such as edges, curves, angles, dots, color contrasts, bright spots, dark spots, etc. These one or more features are learned at one or more first layers of the DCNN. Then, in one or more second layers, the DCNN will learn a variety of recognizable features of faces such as eyes, eyebrows, foreheads, hair, noses, mouths, cheeks, etc.; each of which is distinguishable from all of the other features. That is, the DCNN learns to recognize and distinguish an eye from an eyebrow or any other facial feature. In one or more third and then subsequent layers, the DCNN learns entire faces and higher order characteristics such as race, gender, age, emotional state, etc. The DCNN is even taught in some cases to recognize the specific identity of a person. For example, a random image can be identified as a face, and the face can be recognized as Person_A, Person_B, or some other identity.</p><p id="p-0006" num="0005">In other examples, a DCNN can be provided with a plurality of pictures of animals, and the DCNN can be taught to identify lions, tigers, and bears; a DCNN can be provided with a plurality of pictures of automobiles, and the DCNN can be taught to identify and distinguish different types of vehicles; and many other DCNNs can also be formed. DCNNs can be used to learn word patterns in sentences, to identify music, to analyze individual shopping patterns, to play video games, to create traffic routes, and DCNNs can be used for many other learning-based tasks too.</p><heading id="h-0004" level="1">BRIEF SUMMARY</heading><p id="p-0007" num="0006">A system may be summarized as including a memory array having a first plurality of cells arranged as a plurality of rows of cells intersecting a plurality of columns of cells; a plurality of first computation circuits where each first computation circuit, in operation, calculates a computation value from cell values in a corresponding column of cells in the first plurality of cells; a first column multiplexer, which, in operation, cycles through a plurality of data lines that each corresponds to a first computation circuit of the plurality of first computation circuits; a first sensing circuit, which, in operation, obtains the computation values from the plurality of first computation circuits via the first column multiplexer as the first column multiplexer cycles through the plurality of data lines and combines the obtained computation values over a determined number of multiplexer cycles; and cluster cycle management circuitry, which, in operation, determines the determined number of multiplexer cycles based on a number of columns storing data of a compute cluster. The determined number of multiplexer cycles may be less than a plurality of physical data lines of the first column multiplexer.</p><p id="p-0008" num="0007">A computation value may be a partial sum of cell values in a corresponding column and the first sensing circuit, in operation, calculates a first sum from the obtained partial sums via a first set of the plurality of data lines during a first set of cycles of the first column multiplexer and calculates a second sum from the obtained partial sums via a second set of the plurality of data lines during a second set of cycles of the first column multiplexer, wherein the first and second sets of cycles have the determined number of multiplexer cycles. The first column multiplexer, in operation, may cycle through a second plurality of data lines that each corresponds to a respective second computation circuit of a plurality of second computation circuits, where each second computation circuit calculates a partial sum from cell values in a corresponding column of cells in a second plurality of cells. The second plurality of data lines for the first column multiplexer may be provided by a second column multiplexer.</p><p id="p-0009" num="0008">The system may include a plurality of second computation circuits where each second computation circuit, in operation, calculates a computation value from cell values in a corresponding column of cells in a second plurality of cells of the memory array; a second column multiplexer, which, in operation, cycles through a plurality of data lines that each corresponds to a second computation circuit of the plurality of second computation circuits; and a second sensing circuit, which, in operation, obtains the computation values from the plurality of second computation circuits via the second column multiplexer as the second column multiplexer cycles through the plurality of data lines and combines the obtained computation values over the determined number of multiplexer cycles.</p><p id="p-0010" num="0009">The cluster cycle management circuitry, which, in operation, may generate a plurality of control signals in response to a clock signal and may provide the plurality of control signals to the first sensing circuit and to the first column multiplexer to cycle through the plurality of data lines for the determined number of multiplexer cycles for the first sensing circuit to obtain the computation values from the corresponding first computation circuits. The first column multiplexer, in operation, may modify an address of each of the plurality of data lines of the first column multiplexer to write consecutive pluralities of data to the first plurality of cells. The system may include data-line-selection circuitry, which, in operation, selects different cycle orders through the plurality of data lines of the first column multiplexer to write consecutive pluralities of data to the first plurality of cells.</p><p id="p-0011" num="0010">A method may be summarized as including storing data in a plurality of memory cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells; computing a plurality of compute values from cell values from the plurality of columns of cells, wherein each respective compute value is computed from cells values from a respective column of cells; determining a number of columns in the plurality of columns of cells storing data for a data compute cluster; selecting a number of multiplexer cycles based on the determined number of columns; generating a result of the data compute cluster by employing a column multiplexer to cycle through a first subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a sensing engine to combine the respective compute values from the first subset of compute values;</p><p id="p-0012" num="0011">and outputting the result of the data compute cluster.</p><p id="p-0013" num="0012">The method may include generating a second result of the data compute cluster by employing a second column multiplexer to cycle through a second subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a second sensing engine to combine the respective compute values from the second subset of compute values; and outputting the second result of the data compute cluster. The method may include generating a second result of the data compute cluster by employing the column multiplexer to cycle through a second subset of the plurality of compute values for the selected number of multiplexer cycles and by employing the sensing engine to combine the respective compute values from the second subset of compute values; and outputting the second result of the data compute cluster.</p><p id="p-0014" num="0013">The method may include modifying a number of data lines utilized by the column multiplexer based on the selected number of multiplexer cycles for the data compute cluster. The method may include initiating the column multiplexer to cycle through the first subset of compute values for the selected number of multiplexer cycles in response to a non-memory clock signal; and initiating each cycle for each data line of the column multiplexer for the selected number of multiplexer cycles to obtain the first subset of compute values in response to memory clock signals. The method may include modifying an address of each of a plurality of data lines of the column multiplexer for writing consecutive pluralities of data to the first plurality of cells. The method may include selecting different cycle orders for the column multiplexer to cycle through the plurality of columns of cells for writing consecutive pluralities of data to the plurality of cells.</p><p id="p-0015" num="0014">A computing device may be summarized as including means for storing data in a plurality of cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells; means for computing respective computation values from cell values from each respective column of the plurality of columns of cells; means for determining a compute-cluster-cycle size based on a number of columns in the plurality of columns of cells storing data for a data compute cluster; means for cycling through respective computation values for the determined compute-cluster-cycle size; and means for combining the respective computation values to generate a result of the data compute cluster for the determined compute-cluster-cycle size.</p><p id="p-0016" num="0015">The computing device may include means for initiating the cycling through the respective computation values for the determined compute-cluster-cycle size; and means for initiating each cycle for each respective computation value for the determined compute-cluster-cycle size. The computing device may include means for modifying an order in which data is stored in the plurality of columns of cells for writing consecutive pluralities of data to the plurality of cells.</p><p id="p-0017" num="0016">A non-transitory computer-readable medium having contents which cause cluster cycle management circuitry to perform actions, the actions may be summarized as including storing data in a plurality of memory cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells; determining a number of columns in the plurality of columns of cells that store data for a compute operation; selecting a number of multiplexer cycles based on the determined number of columns; generating a result of the compute operation by employing a column multiplexer to cycle through a first subset of the plurality of columns of cells for the selected number of multiplexer cycles and by employing a sensing engine to combine the values from the first subset of columns of cells; and outputting the result of the compute operation.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading><p id="p-0018" num="0017">Non-limiting and non-exhaustive embodiments are described with reference to the following drawings, wherein like labels refer to like parts throughout the various views unless otherwise specified. The sizes and relative positions of elements in the drawings are not necessarily drawn to scale. For example, the shapes of various elements are selected, enlarged, and positioned to improve drawing legibility. The particular shapes of the elements as drawn have been selected for ease of recognition in the drawings. Moreover, some elements known to those of skill in the art have not been illustrated in the drawings for ease of illustration. One or more embodiments are described hereinafter with reference to the accompanying drawings in which:</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a functional block diagram of an embodiment of an electronic device or system having a processing core and a memory according to an embodiment;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref> illustrate use-case context diagrams of a memory array with configurable multiplexers and sensing circuits;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref> illustrate use-case context diagrams of the use of a self-shifting multiplexer for consecutive writes of a plurality of data to a memory array;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref> illustrate use-case context diagrams of the use of pre-decoding shifting for consecutive writes of a plurality of data to a memory array;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a logical flow diagram generally showing one embodiment of a process for reading data from a memory array using a configurable multiplexer and sensing circuit as illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a logical flow diagram generally showing one embodiment of a process for employing a multiplexer that modifies data line addresses for consecutive writes of a plurality of data to a memory array as illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a logical flow diagram generally showing one embodiment of a process for employing pre-decoding shifting for consecutive writes of a plurality of data to a memory array as illustrated in <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref>; and</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a logical flow diagram generally showing one embodiment of a process for utilizing a first clock to initiate multiplexer reads and writes to a memory array and utilizing a second clock to initiate each cycle of the multiplexer read and write.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0027" num="0026">The following description, along with the accompanying drawings, sets forth certain specific details in order to provide a thorough understanding of various disclosed embodiments. However, one skilled in the relevant art will recognize that the disclosed embodiments may be practiced in various combinations, without one or more of these specific details, or with other methods, components, devices, materials, etc. In other instances, well-known structures or components that are associated with the environment of the present disclosure, including but not limited to interfaces, power supplies, physical component layout, etc. in an in-compute memory environment, have not been shown or described in order to avoid unnecessarily obscuring descriptions of the embodiments. Additionally, the various embodiments may be methods, systems, or devices.</p><p id="p-0028" num="0027">Throughout the specification, claims, and drawings, the following terms take the meaning explicitly associated herein, unless the context clearly dictates otherwise. The term &#x201c;herein&#x201d; refers to the specification, claims, and drawings associated with the current application. The phrases &#x201c;in one embodiment,&#x201d; &#x201c;in another embodiment,&#x201d; &#x201c;in various embodiments,&#x201d; &#x201c;in some embodiments,&#x201d; &#x201c;in other embodiments,&#x201d; and other variations thereof refer to one or more features, structures, functions, limitations, or characteristics of the present disclosure, and are not limited to the same or different embodiments unless the context clearly dictates otherwise. As used herein, the term &#x201c;or&#x201d; is an inclusive &#x201c;or&#x201d; operator, and is equivalent to the phrases &#x201c;A or B, or both&#x201d; or &#x201c;A or B or C, or any combination thereof,&#x201d; and lists with additional elements are similarly treated. The term &#x201c;based on&#x201d; is not exclusive and allows for being based on additional features, functions, aspects, or limitations not described, unless the context clearly dictates otherwise. In addition, throughout the specification, the meaning of &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; include singular and plural references.</p><p id="p-0029" num="0028">The computations performed by a DCNN, or by other neural networks, often include repetitive computations over large amounts of data. For example, many learning/inference machines compare known information, or kernels, with unknown data, or feature vectors, such as comparing known pixel groupings with a portion of an image. One type of common comparisons are dot products between the kernels and the feature vectors. However, kernel size, feature size, and depth tend to vary across different layers of the neural network. In some instances, dedicated computation units may be used to enable these operations over varying data sets. However, memory utilization may not be fully optimized due to the varying data sets. For example, small swing computations may be enabled by selecting all elements connected to one compute line, whereas large compute clusters may utilize a large number of elements on multiple compute lines, which can lead to bad aspect ratio utilization of the memory. Also, such variations can result in a loss of accuracy due to limited voltage head-room.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a functional block diagram of an embodiment of an electronic device or system <b>100</b> of the type to which the embodiments, which will be described, may apply. The system <b>100</b> comprises one or more processing cores or circuits <b>102</b>. The processing cores <b>102</b> may comprise, for example, one or more processors, a state machine, a microprocessor, a programmable logic circuit, discrete circuitry, logic gates, registers, etc., and various combinations thereof. The processing cores may control overall operation of the system <b>100</b>, execution of application programs by the system <b>100</b>, etc.</p><p id="p-0031" num="0030">The system <b>100</b> includes one or more memories, such as one or more volatile and/or non-volatile memories which may store, for example, all or part of instructions and data related to control of the system <b>100</b>, applications and operations performed by the system <b>100</b>, etc. As illustrated, the system <b>100</b> includes one or more cache memories <b>104</b>, one or more primary memories <b>106</b>, and one or more secondary memories <b>108</b>. One or more of the memories <b>104</b>, <b>106</b>, <b>108</b> includes a memory array (see, e.g., memory array <b>202</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>, memory array <b>302</b> in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>, or memory array <b>402</b> in <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref>), which, in operation, is shared by one or more processes executed by the system <b>100</b>.</p><p id="p-0032" num="0031">The system <b>100</b> may include one or more sensors <b>120</b> (e.g., image sensors, audio sensors, accelerometers, pressure sensors, temperature sensors, etc.), one or more interfaces <b>130</b> (e.g., wireless communication interfaces, wired communication interfaces, etc.), one or more BIST circuits <b>140</b>, and other circuits <b>150</b>, which may include antennas, power supplies, etc., and a main bus system <b>170</b>. The main bus system <b>170</b> may include one or more data, address, power and/or control buses coupled to the various components of the system <b>100</b>. The system <b>100</b> also may include additional bus systems such as bus system <b>162</b>, which communicatively couples the cache memory <b>104</b> and the processing core <b>102</b>, bus system <b>164</b>, which communicatively couples the cache memory <b>104</b> and the primary memory <b>106</b>, bus system <b>166</b>, which communicatively couples the primary memory <b>106</b> and the processing core <b>102</b>, and bus system <b>168</b>, which communicatively couples the primary memory <b>106</b> and the secondary memory <b>108</b>.</p><p id="p-0033" num="0032">The system <b>100</b> also includes cluster cycle management circuitry <b>160</b>, which, in operation, employs one or more memory management routines to utilize configurable multiplexers and sensing circuits to read data from a memory <b>104</b>, <b>106</b>, or <b>108</b> (see, e.g., <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>) or to dynamically write data to the memory of shared memory arrays (see, e.g., <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D and <b>4</b>A-<b>4</b>D</figref>). The memory management circuitry <b>160</b> may, alone or in combination with other processing (e.g., by processing cores <b>102</b>), execute routines and functionality described herein, including processes <b>500</b>-<b>800</b> in <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref>, respectively. The cluster cycle management circuitry <b>160</b> may be one or more processors, a state machine, a microprocessor, a programmable logic circuit, discrete circuitry, logic gates, registers, etc., and various combinations thereof.</p><p id="p-0034" num="0033">The primary memory or memories <b>106</b> are typically the working memory of the system <b>100</b> (e.g., the memory or memories upon which the processing cores <b>102</b> work), and may typically be a volatile memory of a limited size storing code and data related to processes executed by the system <b>100</b>. For convenience, reference herein to data stored in a memory may also refer to code stored in a memory. The secondary memory <b>108</b> may typically be a non-volatile memory, which stores instructions and data, which may be retrieved and stored in the primary memory <b>106</b> when needed by the system <b>100</b>. The cache memory <b>104</b> may be a relatively fast memory compared to the secondary memory <b>108</b> and typically has a limited size, which may be larger than a size of the primary memory <b>106</b>.</p><p id="p-0035" num="0034">The cache memory <b>104</b> temporarily stores code and data for later use by the system <b>100</b>. Instead of retrieving needed code or data from the secondary memory <b>108</b> for storage in the primary memory <b>106</b>, the system <b>100</b> may check the cache memory <b>104</b> first to see if the data or code is already stored in the cache memory <b>104</b>. A cache memory <b>104</b> may significantly improve performance of a system, such as the system <b>100</b>, by reducing the time and other resources needed to retrieve data and code for use by the system <b>100</b>. When code and data are retrieved (e.g., from the secondary memory <b>108</b>) for use by the system <b>100</b>, or when data or code are written (e.g., to the primary memory <b>106</b> or to the secondary memory <b>108</b>), a copy of the data or code may be stored in the cache memory <b>104</b> for later use by the system <b>100</b>. Various cache management routines may be employed to control the data stored in the cache memory or memories <b>104</b>.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref> illustrate use-case context diagrams of a memory array with configurable multiplexers and sensing circuits for reading data from the memory array. System <b>200</b>A in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> includes a memory array <b>202</b>, a plurality of computational circuits, as illustrated partial sum circuits <b>206</b>, one or more column multiplexers <b>208</b><i>a</i>-<b>208</b><i>b</i>, and one or more sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b. </i></p><p id="p-0037" num="0036">As illustrated, memory <b>202</b> includes a plurality of cells <b>230</b> configured in a column-row arrangement with a plurality of rows of cells intersecting a plurality of columns of cells. Each cell may be addressable via a particular column and a particular row. The number of cells <b>230</b> illustrated in memory array <b>202</b> are for illustrative purposes only and systems employing embodiments described herein may include more or fewer cells in more or fewer columns and more or fewer rows. Details of the functionality and components for accessing particular memory cells are known to those skilled in the art and not described herein for conciseness.</p><p id="p-0038" num="0037">Each column <b>204</b><i>a</i>-<b>204</b><i>h </i>of the memory array <b>202</b> is in electrical communication with a corresponding partial sum circuit <b>206</b>. Each partial sum circuit <b>206</b> includes circuitry configured to, in operation, calculate or determine the sum of the cell values from each cell <b>230</b> in that corresponding column. For example, partial sum PS<sub>1 </sub>is the sum of the cells <b>230</b> in column <b>204</b><i>a</i>, the partial sum PS<sub>2 </sub>is the sum of the cells <b>230</b> in column <b>204</b><i>b</i>, and so on. In one embodiment, the partial sum circuits <b>206</b> may be sample and hold circuits.</p><p id="p-0039" num="0038">Because embodiments described herein can be used for neural network computations, data may be processed in compute clusters. A compute cluster is a plurality of computations performed on a set of data. For example, a compute cluster may include the comparison between kernel data and feature vector data, such as over a preselected number of pixels. In the illustrated embodiment, data is added to the memory <b>202</b> such that all the data for a single compute cluster is associated with a same sensing circuit <b>210</b><i>a</i>-<b>210</b><i>b</i>. For example, the data labeled k1 [a1], k1 [a2], . . . , k1[n1], k1 [n2], . . . , k1[p1], k1 [p2], . . . , k1[x1], and k1 [x2] are for a first compute cluster and are stored in the cells <b>230</b> in columns <b>204</b><i>a</i>-<b>204</b><i>d</i>. Conversely, data labeled k2[a1], k2[a2], . . . , k2[n1], k2[n2], . . . , k2[p1], k2[p2], . . . , k2[x1], and k2[x2] are for a second, separate compute cluster and are stored in the cells <b>230</b> in columns <b>204</b><i>e</i>-<b>204</b><i>h</i>. In this way, the result obtained by sensing circuit <b>210</b><i>a </i>is for one compute cluster and the result obtained by sensing circuit <b>210</b><i>b </i>is for another compute cluster.</p><p id="p-0040" num="0039">Each multiplexer <b>208</b><i>a</i>-<b>208</b><i>b </i>includes a plurality of data lines <b>216</b> and an output <b>218</b><i>a</i>-<b>218</b><i>b</i>. In the illustrated embodiment, each multiplexer <b>208</b><i>a</i>-<b>208</b><i>b </i>includes four physical data lines <b>216</b>. Thus, multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>are considered to have a physical multiplexer cycle of four. The data lines <b>216</b> are illustrated with reference to C<sub>1</sub>, C<sub>2</sub>, C<sub>3</sub>, and C<sub>4</sub>. These references are not an indication of the values passed along the data lines <b>216</b>&#x2014;rather, they refer to a particular clock cycle in which the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>select particular data lines to pass a value from the corresponding partial sum <b>206</b> to the respective output <b>218</b><i>a</i>-<b>218</b><i>b</i>. In other embodiments and configurations, the multiplexers may have two physical data lines, eight physical data lines, or other numbers of physical data lines. Moreover, multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>are illustrated as read-only multiplexers and configured for reading data from the memory <b>202</b>. In some embodiments, however, multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>may be read/write multiplexers and configured for writing data to the memory <b>202</b> and for reading data from the memory <b>202</b>.</p><p id="p-0041" num="0040">Multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>are configured to cycle through the data lines <b>216</b> based on a selected number of cycles in a complete compute-cluster cycle. A compute-cluster cycle corresponds to the columns associated with a particular compute cluster. The number of data lines <b>216</b> that a multiplexer <b>208</b><i>a</i>-<b>208</b><i>b </i>cycles through for a given compute-cluster cycle is determined based on the compute-cluster-cycle size, which is the number of columns <b>204</b> in the memory <b>202</b> in which data is stored for a given compute cluster. The cluster-cycle size is independent of the number of physical data line cycles available for each multiplexer. As described above and illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the data for a first compute cluster is stored in four columns, columns <b>204</b><i>a</i>-<b>204</b><i>d</i>, and the data for a second compute cluster is stored in four separate columns, columns <b>204</b><i>e</i>-<b>204</b><i>h</i>. In this example, the compute-cluster size is four cycles.</p><p id="p-0042" num="0041">In various embodiments, each multiplexer <b>208</b><i>a</i>-<b>208</b><i>b </i>receives control signals indicating when to initiate cycling through the data lines <b>216</b> or when to cycle to each individual data line <b>216</b>, or a combination thereof. In the illustrated embodiment, the control signals received by multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>include, for example, various clock signals. For example, each multiplexer <b>208</b><i>a</i>-<b>208</b><i>b </i>includes a first clock input <b>228</b>. The first clock input <b>228</b> receives one or more clock signals from first clock <b>212</b> to cycle through the data lines <b>216</b> during a read operation for a given compute-cluster cycle. The first clock <b>212</b> may be external or internal to the memory. In some embodiments, the first clock <b>212</b> is a system clock.</p><p id="p-0043" num="0042">In some embodiments, the signals received via the first clock input <b>228</b> from first clock <b>212</b> initialize the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>to cycle through the data lines <b>216</b>, but each individual data line cycle is triggered by signals received from a second clock <b>214</b> via a second clock input <b>226</b>. In this way, each separate compute-cluster cycle is triggered by a clock signal from the first clock <b>212</b>. In this illustrated example, the clock signals received from the first clock <b>212</b> are examples of cluster control signals that initiate the cycling of a multiplexer and the clock signals received from the second clock <b>214</b> are examples of multiplexer cycle control signals that initiate each individual cycle of the multiplexer.</p><p id="p-0044" num="0043">For example, when multiplexer <b>208</b><i>a </i>receives clock signal CLK from first clock <b>212</b>, multiplexer <b>208</b><i>a </i>initiates a compute-cluster cycle, which triggers the multiplexer <b>208</b><i>a </i>to utilize a next clock signal from the second clock <b>214</b> to cycle to a first data line <b>216</b>. So, when clock signal C<sub>1 </sub>is received from second clock <b>214</b>, multiplexer <b>208</b><i>a </i>cycles to the data line corresponding to partial sum PS<sub>1 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>a</i>. When clock signal C<sub>2 </sub>is received from second clock <b>214</b>, multiplexer <b>208</b><i>a </i>cycles to the next data line corresponding to partial sum PS<sub>2 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>a </i>and combined with its previously held value. Multiplexer <b>208</b><i>a </i>continues to operate in a similar manner for clock signals C<sub>3 </sub>and C<sub>4 </sub>received from second clock <b>214</b> for the sensing circuit <b>210</b><i>a </i>to obtain the values from PS<sub>3 </sub>and PS<sub>4 </sub>and combine the values from PS<sub>3 </sub>and PS<sub>4 </sub>with the values from PS<sub>1 </sub>and PS<sub>2</sub>.</p><p id="p-0045" num="0044">Likewise, when multiplexer <b>208</b><i>b </i>receives clock signal CLK from first clock <b>212</b>, multiplexer <b>208</b><i>b </i>initiates a compute-cluster cycle, which triggers the multiplexer <b>208</b><i>b </i>to utilize a next clock signal from the second clock <b>214</b> to cycle to a first data line <b>216</b>. When clock signal C<sub>1 </sub>is received from second clock <b>214</b>, multiplexer <b>208</b><i>b </i>cycles to the data line corresponding to the partial sum PS<sub>5 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>b</i>. In this example, the clock signal CLK that initiates multiplexer <b>208</b><i>b </i>is the same clock signal that initiates multiplexer <b>208</b><i>a</i>. In this way, a single clock signal initiates both multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>to begin cycling through the corresponding data lines <b>216</b>. Multiplexer <b>208</b><i>b </i>cycles through the data lines corresponding to the partial sums PS<sub>6</sub>, PS<sub>7</sub>, and PS<sub>8 </sub>in response to receipt of clock signals C<sub>2</sub>, C<sub>3</sub>, and C<sub>4 </sub>from second clock <b>214</b>, so that the partial sum values are obtained and combined by sensing circuit <b>210</b><i>b</i>, similar to multiplexer <b>208</b><i>a </i>and sensing circuit <b>210</b><i>b. </i></p><p id="p-0046" num="0045">Once the maximum number of multiplexer cycles is reached for a given compute-cluster cycle (e.g., four in the illustrated example in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>), the sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>output their obtained values and multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>wait for the next first clock signal from first clock <b>212</b> to initiate the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>to again cycle through the data lines <b>216</b> for a next set of compute-cluster cycles. As a result, system <b>200</b>A obtains two results for two compute clusters, one by sensing circuit <b>210</b><i>a </i>for columns <b>204</b><i>a</i>-<b>204</b><i>d </i>and a second by sensing circuit <b>210</b><i>b </i>for columns <b>204</b><i>e</i>-<b>204</b><i>h</i>. And because the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>utilize the same clock signals (first clock signals or a combination of first clock signals and second clock signals) to cycle through their respective data lines <b>216</b>, the two results for the two compute clusters are obtained during a single compute-cluster cycle.</p><p id="p-0047" num="0046">As illustrated, the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>utilize one clock signal from first clock <b>212</b> and four clock signals from second clock <b>214</b> to access their corresponding four data lines <b>216</b>. Embodiments, however, are not so limited. Rather, in other embodiments, receipt of a clock signal from the first clock <b>212</b> may instruct the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>to cycle to a first data line <b>216</b> and then to a second data line <b>216</b> at a next clock signal received from second clock <b>214</b>. In this way, the second clock <b>214</b> is utilized to cycle through each corresponding data line for a given compute-cluster cycle after the first cycle, which, in this illustrated example, the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>would utilize one clock signal from first clock <b>212</b> and three clock signals from second clock <b>214</b> to access their corresponding four data lines <b>216</b>.</p><p id="p-0048" num="0047">In at least one embodiment, the second clock <b>214</b> may be a memory clock utilized to refresh the data in the memory array <b>202</b>. In other embodiments, the second clock <b>214</b> may be a clock dedicated to the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>or some other clock. The second clock <b>214</b> may be external or internal to the memory. In general, the second clock <b>214</b> is physically closer to the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>and utilizes less power than the first clock <b>212</b> to cycle through the multiplexer data lines. In various embodiments, the second clock signals may be referred to a cycle control signals.</p><p id="p-0049" num="0048">In other embodiments, each signal received via the first clock input <b>228</b> from first clock <b>212</b> (or some other clock) triggers an individual data line cycle. For example, when multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>receive a first clock signal from first clock <b>212</b>, multiplexer <b>208</b><i>a </i>cycles to the data line corresponding to partial sum PS<sub>1 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>a </i>and multiplexer <b>208</b><i>b </i>cycles to the data line corresponding to partial sum PS<sub>5 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>b</i>. But when multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>receive a second clock signal from first clock <b>212</b>, multiplexer <b>208</b><i>a </i>cycles to the data line corresponding to partial sum PS<sub>2 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>a </i>and multiplexer <b>208</b><i>b </i>cycles to the data line corresponding to partial sum PS<sub>6 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>b</i>. Multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>continue to operate in a similar manner for additional clock signals received from first clock <b>212</b>. Once the maximum number of multiplexer cycles is reached for a compute-cluster cycle (e.g., four in the illustrated example in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), then the multiplexer <b>208</b><i>a </i>cycles back to the first data line on the next clock signal. In such an embodiment, the second clock <b>214</b> is optional and is not utilized.</p><p id="p-0050" num="0049">In some embodiments, the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>may have other input/output interfaces (not illustrated), such as for selecting between read and write operations, selecting particular data lines <b>216</b>, selecting a compute-cluster-cycle size, etc.</p><p id="p-0051" num="0050">For example, as illustrated, the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>utilize the clock signals directly to cycle through the data lines <b>216</b>. In other embodiments, however, each multiplexer <b>208</b><i>a</i>-<b>208</b><i>b </i>may also include one or more data-selection lines (not illustrated). The data-selection lines are configured to receive an address from selection circuitry to cycle to a particular data line <b>216</b>. In at least one such embodiment, the selection circuitry utilizes the first clock signals from the first clock <b>212</b> or the second clock signals from the second clock <b>214</b>, or some combination thereof, to cycle through the different data lines <b>216</b>, as described herein. One example of how such selection circuitry is utilized is illustrated in <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref>. Although the data-line-selection circuitry illustrated in <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref> is for instructing a multiplexer to cycle through multiple data lines to write data to the memory, similar circuitry could also be used to instruct a multiplexer to cycle through multiple data lines to read data from the memory.</p><p id="p-0052" num="0051">As another example of other input/output interfaces, the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>may include one or more compute-cluster-cycle-size input lines (not illustrated). The compute-cluster-cycle-size input lines may be utilized to identify how many columns <b>204</b> or data lines <b>216</b> the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>and sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>are to utilize to obtain results from the memory <b>202</b> for a single compute cluster. For example, in the illustrated example in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>utilize four data lines to obtain results from the partial sums for four columns for a single compute cluster. In this example, each multiplexer <b>208</b> could have one or more compute-cluster-cycle-size input lines that instruct the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>to operate as a compute-cluster cycle as being four multiplexer cycles or four data lines.</p><p id="p-0053" num="0052">The sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>may also receive clock signals from first clock <b>212</b> and second clock <b>214</b>, similar to multiplexers <b>208</b><i>a</i>-<b>208</b><i>b</i>. These clock signals are used to trigger the sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>on when to obtain a partial sum value being selected by multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>and output via outputs <b>218</b><i>a</i>-<b>218</b><i>b </i>for a given compute-cluster cycle. When a compute-cluster cycle is complete, the sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>move their combined stored value into output buffers <b>232</b><i>a</i>-<b>232</b><i>b</i>, respectively, in response to a final clock signal from second clock <b>214</b> or in response to a next clock signal from first clock <b>212</b>. In some embodiments, the sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>may also include one or more compute-cluster-cycle-size input lines (not illustrated) to indicate how many different partial sum values (the number of columns associated with a given compute cluster) are to be obtained for a given compute-cluster cycle, similar to what is described herein for multiplexers <b>208</b><i>a</i>-<b>208</b><i>b. </i></p><p id="p-0054" num="0053">System <b>200</b>A also includes a cluster cycle management circuitry <b>160</b>. In some embodiments, the cluster cycle management circuitry <b>160</b> determines the number of multiplexer cycles (e.g., compute-cluster cycle size) to be used for a compute-cluster cycle based on the number of columns storing data for a given compute cluster. In at least one embodiment, the number of columns in which data is stored for a given compute cluster may be based on one or more thresholds compared to the batch size of kernel data for neural network processing. In some embodiments, Kernel sets are partitioned in batches processed sequentially based on the current neural network layer being utilized.</p><p id="p-0055" num="0054">In various embodiments, cluster cycle management circuitry <b>160</b> provides information or instructions to multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>and sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>regarding the compute-cluster cycle size or the clock signals to utilize (e.g., whether the first clock triggers all multiplexer cycles or whether the first clock initiates the multiplexer cycles to be responsive to second clock signals). In some embodiments, the cluster cycle management circuitry <b>160</b> manages or generates the control signals (e.g., the first clock signals and the second clock signals) and provides the control signals to the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>and the sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b</i>. In some embodiments, the cluster cycle management circuitry may coordinate the output of data from the output buffers <b>232</b><i>a</i>-<b>232</b><i>b </i>for further processing, such as input to a next layer in a neural network process.</p><p id="p-0056" num="0055">Although <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates embodiments where multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>cycle through all four of their physical data lines <b>216</b> such that each sensing circuit <b>210</b><i>a</i>-<b>210</b><i>b </i>combines four partial sums during a single compute-cluster cycle, some implementations may have a desire for the sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>to combine fewer partial sums, such as two partial sums. For example, in some situations and implementations, small compute clusters may not optimally utilize the memory when four columns are used due to poor aspect ratio. To improve the aspect ratio, the data for a small compute cluster is stored in two columns, rather than four as described above, and the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>and the sensing circuits reconfigured accordingly, as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>.</p><p id="p-0057" num="0056">System <b>200</b>B in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> illustrates an embodiment where the configurable multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>and sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>utilize two columns in the memory <b>202</b> instead of four columns. System <b>200</b>B is an embodiment of system <b>200</b>A described in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0058" num="0057">As described above, each column <b>204</b><i>a</i>-<b>204</b><i>h </i>of the memory array <b>202</b> is in electrical communication with a corresponding partial sum circuit <b>206</b> that is configured to calculate or determine the sum of the cell values from each cell in that corresponding column. In this example, however, the compute clusters are smaller than what is described above in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In the illustrated embodiment, the data labeled k1 [a1], k1 [a2], . . . , and k1[n1], k1 [n2], . . . are for a first compute cluster and are stored in the cells in columns <b>204</b><i>a</i>-<b>204</b><i>b</i>; the data labeled k2[p1], k2[p2], k2[p3], k2[x1], and k2[x2] are for a second compute cluster and are stored in the cells in columns <b>204</b><i>c</i>-<b>204</b><i>d</i>; the data labeled k3[a1], k3[a2], . . . , and k3[n1], k3[n2], . . . are for a third compute cluster and are stored in the cells in columns <b>204</b><i>e </i><b>204</b><i>f</i>; and the data labeled k4[p1], k4[p2], k4[p3], k4[x1], and k4[x2] are for a fourth compute cluster and are stored in the cells in columns <b>204</b><i>g</i>-<b>204</b><i>h. </i></p><p id="p-0059" num="0058">Each multiplexer <b>208</b><i>a</i>-<b>208</b><i>b </i>includes four physical data lines <b>216</b>. Because each compute cluster is stored in two columns <b>204</b> in the memory <b>202</b>, each multiplexer <b>208</b><i>a</i>-<b>208</b><i>b </i>is reconfigured to cycle through two data lines <b>216</b> for a given compute-cluster cycle. As described above, in some embodiments, the signals received via the first clock input <b>228</b> from first clock <b>212</b> may initialize the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>to cycle through the data lines <b>216</b>, but each individual data line cycle is triggered by signals received from a second clock <b>214</b> via a second clock input <b>226</b>. The signals from the second clock <b>214</b> are utilized such that the number of multiplexer data lines cycled to equals the number of columns utilized for a single compute cluster.</p><p id="p-0060" num="0059">For example, when multiplexer <b>208</b><i>a </i>receives clock signal CLK<sub>1 </sub>from first clock <b>212</b> to initiate a compute-cluster cycle, multiplexer <b>208</b><i>a </i>cycles to the data line corresponding to partial sum PS<sub>1 </sub>at the next clock signal C<sub>1 </sub>received from second clock <b>214</b> so that the partial sum value from PS<sub>1 </sub>is obtained by sensing circuit <b>210</b><i>a</i>. When clock signal C<sub>2 </sub>is received from the second clock <b>214</b>, multiplexer <b>208</b><i>a </i>cycles to the data line corresponding to partial sum PS<sub>2 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>a </i>and combined with its previous held value. After sensing circuit <b>210</b><i>a </i>has combined the values from PS<sub>1 </sub>and PS<sub>2</sub>, the resulting value is output as the corresponding compute cluster output, such as to output buffer <b>232</b><i>a. </i></p><p id="p-0061" num="0060">Multiplexer <b>208</b><i>a </i>then receives a second signal, CLK<sub>2</sub>, from the first clock <b>212</b> to initiate another compute-cluster cycle, which initiates a second compute-cluster cycle. When clock signal C<sub>3 </sub>is received from second clock <b>214</b>, multiplexer <b>208</b><i>a </i>cycles to the data line corresponding to partial sum PS<sub>3 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>a</i>. When clock signal C<sub>4 </sub>is received from the second clock <b>214</b>, multiplexer <b>208</b><i>a </i>cycles to the data line corresponding to partial sum PS<sub>4 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>a </i>and combined with its previous held value. After sensing circuit <b>210</b><i>a </i>has combined the values from PS<sub>3 </sub>and PS<sub>4</sub>, the resulting value is output to output buffer <b>232</b><i>a </i>as the corresponding compute cluster output.</p><p id="p-0062" num="0061">Similar to multiplexer <b>208</b><i>a</i>, when multiplexer <b>208</b><i>b </i>receives clock signal CLK<sub>1 </sub>from first clock <b>212</b> to initiate a compute-cluster cycle, multiplexer <b>208</b><i>b </i>cycles to the data lines corresponding to partial sum PS<sub>5 </sub>and PS<sub>6 </sub>at the next clock signals, C<sub>1 </sub>and C<sub>2</sub>, received from the second clock <b>214</b>. When clock signal C<sub>2 </sub>is received from the second clock <b>214</b>, multiplexer <b>208</b><i>b </i>cycles to the data line corresponding to partial sum PS<sub>6 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>b </i>and combined with its previous held value. After sensing circuit <b>210</b><i>b </i>has combined the values from PS<sub>5 </sub>and PS<sub>6</sub>, the resulting value is output as the corresponding compute cluster output, such as to output buffer <b>232</b><i>b. </i></p><p id="p-0063" num="0062">Multiplexer <b>208</b><i>b </i>then receives a second signal, CLK<sub>2</sub>, from the first clock <b>212</b> to initiate another compute-cluster cycle, which initiates a second compute-cluster cycle. When clock signal C<sub>3 </sub>is received from second clock <b>214</b>, multiplexer <b>208</b><i>b </i>cycles to the data line corresponding to partial sum PS<sub>7 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>b</i>. When clock signal C<sub>4 </sub>is received from the second clock <b>214</b>, multiplexer <b>208</b><i>b </i>cycles to the data line corresponding to partial sum PS<sub>8 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>b </i>and combined with its previous held value. After sensing circuit <b>210</b><i>b </i>has combined the values from PS<sub>7 </sub>and PS<sub>8</sub>, the resulting value is output to output buffer <b>232</b><i>b </i>as the corresponding compute cluster output.</p><p id="p-0064" num="0063">Once the maximum number of physical multiplexer cycles is reached (e.g., four in the illustrated example in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>), then the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>wait for the next first clock signal from first clock <b>212</b> to initiate the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>to again cycle through the data lines <b>216</b> based on the compute-cluster-cycle size.</p><p id="p-0065" num="0064">As a result, system <b>200</b>B obtains four results for four compute clusters, one by sensing circuit <b>210</b><i>a </i>for columns <b>204</b><i>a</i>-<b>204</b><i>b</i>, a second by sensing circuit <b>210</b><i>a </i>for columns <b>204</b><i>c</i>-<b>204</b><i>d</i>, a third by sensing circuit <b>210</b><i>b </i>for columns <b>204</b><i>e </i><b>204</b><i>f</i>, and a fourth by sensing circuit <b>210</b><i>b </i>for columns <b>204</b><i>g</i>-<b>204</b><i>h</i>. And because the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>utilize the same clock signals (first clock signals or a combination of first clock signals and second clock signals) to cycle through their respective data lines <b>216</b>, the first two results for the first two compute clusters (columns <b>204</b><i>a</i>-<b>204</b><i>b </i>and <b>204</b><i>e </i><b>204</b><i>f</i>) are obtained during a first compute-cluster cycle time and the second two results for the second two compute clusters (columns <b>204</b><i>c</i>-<b>204</b><i>d </i>and <b>204</b><i>g</i>-<b>204</b><i>h</i>) are obtained during a second compute-cluster cycle time.</p><p id="p-0066" num="0065">Similar to what is described above, the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>may utilize clock signals from the first clock <b>212</b> to instruct the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>to cycle to a first data line <b>216</b> at a next clock signal received from second clock <b>214</b> to allow for each multiplexer cycle to be controlled by the clock signals received from the second clock <b>214</b>, or they can utilize one clock signal from first clock <b>212</b> and one clock signal from second clock <b>214</b> to access their corresponding two data lines <b>216</b> for a given compute cluster, or they may utilize each separate clock signal received from first clock <b>212</b> to cycle to a next data line. Likewise, the clock signals received from the first clock <b>212</b>, the second clock <b>214</b>, or a combination thereof may be utilized to also trigger the sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>to obtain the current output value of the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b</i>, respectively.</p><p id="p-0067" num="0066">In some embodiments, the number of data lines utilized for a given compute cluster may be controlled by the first clock signals <b>212</b>. For example, the first clock signal may hold a value of &#x201c;1&#x201d; for two second clock signals and then fall to a value of &#x201c;0.&#x201d; This change to &#x201c;0&#x201d; indicates the beginning of a new compute-cluster cycle. In another example, other circuitry (not illustrated) may store the number of columns associated with a given compute-cluster cycle and monitor the number of second clock signals that enabled the multiplexers to cycle to the corresponding number of data lines. Once the number of second clock signals equals the number columns associated with a given compute-cluster cycle, then the other circuitry releases the next first clock signal to initiate a new compute-cluster cycle.</p><p id="p-0068" num="0067">In other embodiments, the multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>may have compute-cluster-cycle-size input lines (not illustrated), as described above, which instruct the multiplexers as to the number of columns associated with a given compute-cluster cycle. For example, a single input line may be used such that a &#x201c;0&#x201d; indicates two columns and a &#x201c;1&#x201d; indicates four columns. Other numbers of compute-cluster-cycle-size input lines may also be used to represent different compute-cluster-cycle sizes. Similarly, the sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>can utilize compute-cluster-cycle-size input lines or clock signals to instruct the sensing circuits to output a currently held value.</p><p id="p-0069" num="0068">Although <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref> illustrate embodiments where multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>cycle through four data lines <b>216</b> such that each sensing circuit <b>210</b><i>a</i>-<b>210</b><i>b </i>combines partial sums for one or more compute-cluster cycles, some implementations may have a desire for a sensing circuit to combine more partial sums, such as eight partial sums. For example, in some situations and implementations, very large compute clusters may not optimally utilize the memory when two or four columns are used due to poor aspect ratio. To improve the aspect ratio, the data for a large compute cluster may be stored in eight columns, rather than two or four as described above, which is illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>.</p><p id="p-0070" num="0069">System <b>200</b>C in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref> illustrates an embodiment where the configurable multiplexers <b>208</b><i>a</i>-<b>208</b><i>b </i>and sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b </i>are reconfigured to utilize eight columns in the memory <b>202</b> instead of two or four columns, as described above. System <b>200</b>C is an embodiment of system <b>200</b>A described in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> and system <b>200</b>B described in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>.</p><p id="p-0071" num="0070">As described above, each column <b>204</b><i>a</i>-<b>204</b><i>h </i>of the memory array <b>202</b> is in electrical communication with a corresponding partial sum circuit <b>206</b> that is configured to calculate or determine the sum of the cell values from each cell in that corresponding column. In this example, however, the compute clusters are larger than what is described above in <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref>. In the illustrated embodiment, the data labeled k1 [a1], . . . , k1[a4], k1[n1], . . . , k1[n3], k1[p1], . . . , k1[p3], k1[x1], k1[x2], k1[el], . . . , k1[e4], k1[h1], . . . , k1[h3], k1[q1], . . . , k1[q3], k1 [y1], and k1 [y2] are for a compute cluster and are stored in the cells in columns <b>204</b><i>a</i>-<b>204</b><i>h. </i></p><p id="p-0072" num="0071">In this illustrated example, however, the multiplexer <b>208</b><i>a </i>is reconfigured to have eight data lines <b>216</b>. In some embodiments, the multiplexer <b>208</b><i>a </i>is reconfigured such that the additional data lines are provided by circuitry that was previously used as another multiplexer. In other embodiments, a second multiplexer (e.g., multiplexer <b>208</b><i>b </i>in <figref idref="DRAWINGS">FIG. <b>2</b>A or <b>2</b>B</figref>) is controlled or &#x201c;slaved&#x201d; by the multiplexer <b>208</b><i>a </i>to utilize its data lines. For example, the multiplexer <b>208</b><i>a </i>may provide the clock signals to the second multiplexer after the multiplexer <b>208</b><i>a </i>has cycled through its physical data lines.</p><p id="p-0073" num="0072">As described above, in some embodiments, the signals received via the first clock input <b>228</b> from first clock <b>212</b> may initialize the multiplexer <b>208</b><i>a </i>to cycle through the data lines <b>216</b>, but each individual data line cycle is triggered by signals received from a second clock <b>214</b> via a second clock input <b>226</b>. The signals from the second clock <b>214</b> are utilized such that the number of multiplexer data lines cycled to equals the number of columns utilized for a single compute-cluster cycle.</p><p id="p-0074" num="0073">For example, when multiplexer <b>208</b><i>a </i>receives clock signal CLK from first clock <b>212</b> to initiate a compute-cluster cycle, multiplexer <b>208</b><i>a </i>waits for clock cycle C<sub>1 </sub>from the second clock <b>214</b> to cycle to the data line <b>216</b> corresponding to partial sum PS<sub>1</sub>. When clock signal C<sub>2 </sub>is received from the second clock <b>214</b>, multiplexer <b>208</b><i>a </i>cycles to the data line corresponding to partial sum PS<sub>2 </sub>so that its partial sum value is obtained by sensing circuit <b>210</b><i>a </i>and combined with its previous held value. The multiplexer <b>208</b><i>a </i>continues to cycle to the other data lines <b>216</b> corresponding to partial sums PS<sub>3</sub>, PS<sub>4</sub>, PS<sub>5</sub>, PS<sub>6</sub>, PS<sub>7</sub>, and PS<sub>8 </sub>so that their partial sum values are obtained and combined by sensing circuit <b>210</b><i>a </i>in response to clock signals C<sub>3</sub>, C<sub>4</sub>, C<sub>5</sub>, C<sub>6</sub>, C<sub>7</sub>, and C<sub>8 </sub>from second clock <b>214</b>.</p><p id="p-0075" num="0074">After sensing circuit <b>210</b><i>a </i>has combined the values from PS<sub>1 </sub>through PS<sub>8</sub>, the resulting value is output as the corresponding compute cluster output, such as to output buffer <b>232</b><i>a</i>. Once the maximum number of multiplexer cycles is reached for the compute-cluster cycle (e.g., eight in the illustrated example in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>), then the multiplexer <b>208</b><i>a </i>waits for the next first clock signal from first clock <b>212</b> to initiate the multiplexer <b>208</b><i>a </i>to again cycle through the data lines <b>216</b>.</p><p id="p-0076" num="0075">Similar to what is described above, the multiplexer <b>208</b><i>a </i>may utilize clock signals from the first clock <b>212</b> to instruct the multiplexer <b>208</b><i>a </i>to cycle to a first data line <b>216</b> at a next clock signal received from second clock <b>214</b> to allow for each multiplexer cycle to be controlled by the clock signals received from the second clock <b>214</b>, or the multiplexer <b>208</b><i>a </i>can utilize one clock signal from first clock <b>212</b> and seven clock signals from second clock <b>214</b> to access the data lines <b>216</b> for the compute cluster, or the multiplexer <b>208</b><i>a </i>may utilize each separate clock signal received from first clock <b>212</b> to cycle to a next data line. As discussed above, the multiplexer <b>208</b><i>a </i>may utilize one or more compute-cluster-cycle-size input lines (not illustrated) to reconfigured the multiplexer <b>208</b><i>a </i>to the correct number of data lines for the given compute-cluster-cycle size. Likewise, the clock signals received from the first clock <b>212</b>, the second clock <b>214</b>, or a combination thereof may be utilized to also trigger the sensing circuit <b>210</b><i>a </i>to obtain the current output value of multiplexer <b>208</b><i>a</i>. It should be recognized that other numbers of multiplexers <b>208</b><i>a</i>-<b>208</b><i>b</i>, sensing circuits <b>210</b><i>a</i>-<b>210</b><i>b</i>, and partial sum circuits <b>206</b> may be utilized for other sizes of memory <b>202</b>. Similarly, other numbers of physical data lines may be utilized by multiplexers <b>208</b><i>a</i>-<b>208</b><i>b</i>, as well as different compute-cluster cycle sizes. Moreover, partial sum circuits <b>206</b> may obtain the mathematical sum of each cell value in a corresponding column <b>204</b> in the memory <b>202</b>. In some embodiments, however, the partial sum circuits <b>206</b> may obtain other mathematical combinations of cell values, such as multiplication.</p><p id="p-0077" num="0076">Although embodiments in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref> are described as using clock signals from the first clock <b>212</b> and the second clock <b>214</b> to read data from the memory <b>202</b>, embodiments are not so limited. In some embodiments, similar clock signals may also be utilized to write data to the memory, such as illustrated and described in conjunction with <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D and <b>4</b>A-<b>4</b>D</figref>.</p><p id="p-0078" num="0077">Moreover, <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref> illustrate embodiments of determining and utilizing a number of multiplexer cycles to employ during a read operation based on the number of columns storing data for a given compute cluster, where the number of multiplexer cycles can be less than, equal to, or more than the number of physical data lines of the multiplexer. In some other embodiments, the multiplexer may cycle through a determined number of multiplexer cycles that is less than, equal to, or more than the number of physical data lines of the multiplexer during a write operation. For example, in some embodiments, the cluster cycle management circuitry <b>160</b> may compare a kernel batch size for a given compute cluster to one or more thresholds to determine the number of columns in which to store the kernel data for the given compute cluster. In one such embodiment, each threshold may corresponding to a particular number of multiplexer cycles&#x2014;e.g., if the batch size is less than a first threshold then the number of multiplexer cycles is two, if the batch size is greater than the first threshold but less than a second threshold then the number of multiplexer cycles is four, and if the batch size is greater than the second threshold then the number of multiplexer cycles is eight. Other numbers of thresholds and corresponding number of multiplexer cycles may also be utilized, which may vary based on the neural network layer or processing being performed.</p><p id="p-0079" num="0078">The embodiments described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref> illustrate various embodiments for utilizing configurable multiplexers to read data from a memory, while also performing computations on the values read from the memory&#x2014;such as obtaining partial sums and combining the partial sums for a given compute cluster&#x2014;in high data processing neural network environments.</p><p id="p-0080" num="0079">To read such amounts of data from memory, the incoming data needs to be written to the memory. As mentioned above, neural networks often involve many similar computations on large amounts of data. Moreover, neural networks are designed to learn specific characteristics from large amounts of training data. Some of this training data will be useful, while others will not. As a result, erroneous data should eventually be removed from the system as the system learns. Some situations, however, can result in erroneous training or input data. For example, if consecutive images are read into memory in the same manner then the same pixel location is stored in the same memory location. But if a pixel becomes &#x201c;dead&#x201d; (e.g., by a malfunctioning photo sensor or related circuitry or a failed memory cell), then that memory location will always have the same value. As a result, it is possible that the system may learn the &#x201c;dead&#x201d; pixel as part of the training process or be unable to correctly process consecutive input images.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref> illustrate use-case context diagrams of the use of a shifting or line-shifting multiplexer <b>308</b> for consecutive writes of a plurality of data to a memory array <b>302</b> according to an embodiment. The shifting multiplexer or line-shifting multiplexer refers to a multiplexer that includes circuitry that, in operation, causes the multiplexer itself to change the address of each physical data line of the multiplexer or to modify the selection of physical data lines for consecutive data writes. In various embodiments, the multiplexer <b>308</b> includes a barrel shifter that modifies the internal address of each data line <b>316</b> for consecutive data writes of a plurality of data. The multiplexer <b>408</b> may be a write only or a read-write multiplexer.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates an example <b>300</b>A for a first compute cluster write. Incoming data is written to columns <b>304</b><i>a</i>, <b>304</b><i>b</i>, <b>304</b><i>c</i>, and <b>304</b><i>d</i>, in that order, via data lines addressed as 00, 01, 10, and 11, respectively. The first data of the first compute cluster is stored in column <b>304</b><i>a</i>, the second data of the first compute cluster is stored in column <b>304</b><i>b</i>, the third data of the first compute cluster is stored in column <b>304</b><i>c</i>, and the fourth data of the first compute cluster is stored in column <b>304</b><i>d</i>. The data in the memory is then processed, such as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> illustrates an example <b>300</b>B for a second compute cluster write that is subsequent to the first compute cluster write in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. When data for the second compute cluster write is received, the barrel shifter modifies the address of the data lines such that data lines addressed as 00, 01, 10, and 11 correspond to columns <b>304</b><i>b</i>, <b>304</b><i>c</i>, <b>304</b><i>d</i>, and <b>304</b><i>a</i>, respectively. The incoming data is written to columns <b>304</b><i>b</i>, <b>304</b><i>c</i>, <b>304</b><i>d</i>, and <b>304</b><i>a</i>, in that order, via data lines addressed as 00, 01, 10, and 11, respectively. The first data of the second compute cluster is stored in column <b>304</b><i>b</i>, the second data of the second compute cluster is stored in column <b>304</b><i>c</i>, the third data of the second compute cluster is stored in column <b>304</b><i>d</i>, and the fourth data of the second compute cluster is stored in column <b>304</b><i>a</i>. The data in the memory is then processed, such as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> illustrates an example <b>300</b>C for a third compute cluster write that is subsequent to the second compute cluster write in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. When data for the third compute cluster write is received, the barrel shifter again modifies the address of the data lines such that data lines addressed as 00, 01, 10, and 11 correspond to columns <b>304</b><i>c</i>, <b>304</b><i>d</i>, <b>304</b><i>a</i>, and <b>304</b><i>b</i>, respectively. The incoming data is written to columns <b>304</b><i>c</i>, <b>304</b><i>d</i>, <b>304</b><i>a</i>, and <b>304</b><i>b</i>, in that order, via data lines addressed as 00, 01, 10, and 11, respectively. The first data of the third compute cluster is stored in column <b>304</b><i>c</i>, the second data of the third compute cluster is stored in column <b>304</b><i>d</i>, the third data of the third compute cluster is stored in column <b>304</b><i>a</i>, and the fourth data of the third compute cluster is stored in column <b>304</b><i>b</i>. The data in the memory is then processed, such as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>.</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>3</b>D</figref> illustrates an example <b>300</b>D for a fourth compute cluster write that is subsequent to the third compute cluster write in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>. When data for the fourth compute cluster write is received, the barrel shifter again modifies the address of the data lines such that data lines addressed as 00, 01, 10, and 11 correspond to columns <b>304</b><i>d</i>, <b>304</b><i>a</i>, <b>304</b><i>b</i>, and <b>304</b><i>c</i>, respectively. The incoming data is written to columns <b>304</b><i>d</i>, <b>304</b><i>a</i>, <b>304</b><i>b</i>, and <b>304</b><i>c</i>, in that order, via data lines addressed as 00, 01, 10, and 11, respectively. The first data of the fourth compute cluster is stored in column <b>304</b><i>d</i>, the second data of the fourth compute cluster is stored in column <b>304</b><i>a</i>, the third data of the fourth compute cluster is stored in column <b>304</b><i>b</i>, and the fourth data of the fourth compute cluster is stored in column <b>304</b><i>c</i>. The data in the memory is then processed, such as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>.</p><p id="p-0086" num="0085">When data for a fifth compute cluster write is received, the barrel shifter again modifies the address of the data lines such that data lines addressed as 00, 01, 10, and 11 correspond to columns <b>304</b><i>a</i>, <b>304</b><i>b</i>, <b>304</b><i>c</i>, and <b>304</b><i>d</i>, respectively, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. The shifting of data line addresses, as illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>, can continue in this manner for consecutive compute cluster writes. This shifting facilitates semi-random storage of continuous errors, which facilitates removal of such errors through the learning/inference process or ignored in the analysis of target images.</p><p id="p-0087" num="0086">As described above, a first clock signal may be utilized to initiate a multiplexer to cycle through its data lines for a read operation of a compute-cluster cycle for configurable number of data lines. <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref> also illustrate the use of such clock signals, but for data write operations.</p><p id="p-0088" num="0087">In some embodiments, the signals received via the first clock input <b>228</b> from first clock <b>212</b> initialize the multiplexer <b>308</b> to cycle through the data lines <b>216</b>, but each individual data line cycle is triggered by signals received from a second clock <b>214</b> via a second clock input <b>226</b>. In this way, each separate compute-cluster cycle is triggered by a clock signal from the first clock <b>212</b>.</p><p id="p-0089" num="0088">In <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, for example, when multiplexer <b>308</b> receives clock signal CLK from first clock <b>212</b> to initiate a compute-cluster write cycle, multiplexer <b>308</b> cycles to the data line <b>216</b> address 00 in response to C<sub>1 </sub>from second clock <b>214</b> so that data can be written to column <b>304</b><i>a</i>. Clock signal C<sub>2 </sub>causes multiplexer <b>308</b> to cycle to the data line <b>316</b> address 01 so that data can be written to column <b>304</b><i>b</i>. Multiplexer <b>308</b> continues to operate in a similar manner for clock signals C<sub>3 </sub>and C<sub>4 </sub>to write data to columns <b>304</b><i>c </i>and <b>304</b><i>d </i>respectively.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is similar, but when multiplexer <b>308</b> receives clock signal CLK from first clock <b>212</b> to initiate a compute-cluster write cycle and subsequently receives C<sub>1 </sub>from second clock <b>214</b>, multiplexer <b>308</b> cycles to the data line <b>316</b> address 00 so that data can be written to column <b>304</b><i>b </i>(not column <b>304</b><i>a </i>as in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>). Clock signals C<sub>2</sub>, C<sub>3</sub>, and C<sub>4 </sub>received from second clock <b>214</b>, cause multiplexer <b>308</b> to cycle to the data line <b>316</b> addresses 01, 10, and 11, respectively, so that data can be written to columns <b>304</b><i>c</i>, <b>304</b><i>d</i>, and <b>304</b><i>a</i>, respectively.</p><p id="p-0091" num="0090">Likewise, in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, a compute-cluster write cycle is initiated when multiplexer <b>308</b> receives clock signal CLK from first clock <b>212</b>. Multiplexer <b>308</b> cycles to the data line <b>316</b> address 00 when C<sub>1 </sub>is received from second clock <b>214</b> so that data can be written to column <b>304</b><i>c </i>(not column <b>304</b><i>b </i>as in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>). Clock signals C<sub>2</sub>, C<sub>3</sub>, and C<sub>4 </sub>received from second clock <b>214</b>, cause multiplexer <b>308</b> to cycle to the data line <b>316</b> addresses 01, 10, and 11, respectively, so that data can be written to columns <b>304</b><i>d</i>, <b>304</b><i>a</i>, and <b>304</b><i>b</i>, respectively.</p><p id="p-0092" num="0091">Moreover, in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, when multiplexer <b>308</b> receives clock signal CLK from first clock <b>212</b>, multiplexer <b>208</b> initiates a compute-cluster write cycle and cycles to the data line <b>316</b> address 00 in response to receipt of C<sub>1 </sub>from second clock <b>214</b> so that data can be written to column <b>304</b><i>d </i>(not column <b>304</b><i>c </i>as in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>). Clock signals C<sub>2</sub>, C<sub>3</sub>, and C<sub>4 </sub>received from second clock <b>214</b> cause multiplexer <b>308</b> to cycle to the data line <b>316</b> addresses 01, 10, and 11, respectively, so that data can be written to columns <b>304</b><i>a</i>, <b>304</b><i>b</i>, and <b>304</b><i>c</i>, respectively.</p><p id="p-0093" num="0092">As illustrated, the multiplexer <b>308</b> utilizes one clock signal from first clock <b>212</b> and four clock signals from second clock <b>214</b> to write to the four data lines <b>216</b>. Embodiments, however, are not so limited. Rather, in other embodiments, receipt of a clock signal from the first clock <b>212</b> may instruct the multiplexer <b>308</b> to cycle to a first data line <b>316</b> address 00. In this way, the first clock <b>212</b> is utilized to cycle to the first data line and the second clock <b>214</b> is utilized to cycle through each other corresponding data line for a given compute-cluster cycle write operation, which, in this illustrated example, the multiplexer <b>308</b> would utilize three clock signals from second clock <b>214</b> to write data to columns <b>304</b><i>a</i>-<b>304</b><i>d. </i></p><p id="p-0094" num="0093">In other embodiments, each signal received via the first clock input <b>228</b> from first clock <b>212</b> triggers an individual data line cycle. For example, when multiplexer <b>308</b> receives a first clock signal from first clock <b>212</b>, multiplexer <b>308</b> cycles to the data line address 00. But when multiplexer <b>308</b> receives a second clock signal from first clock <b>212</b>, multiplexer <b>308</b> cycles to the data line address 01. Multiplexer <b>308</b> continues to operate in a similar manner for additional clock signals received from first clock <b>212</b>. Once the maximum number of multiplexer cycles is reached for a compute-cluster cycle (e.g., four in the illustrated example in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>), then the multiplexer <b>308</b> cycles back to the data line address 00 on the next clock signal. In such an embodiment, the second clock <b>214</b> is optional and is not utilized.</p><p id="p-0095" num="0094">Although <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref> illustrate the use of a multiplexer with a built-in barrel shifter to change the address of the data lines, embodiments are not so limited. Rather, in some embodiments, other shifting circuitry, such as circuitry external to the multiplexer may be utilized as pre-decoding for the multiplexer to shift and select the data lines for the multiplexer without changing the internal data lines addresses of the multiplexer.</p><p id="p-0096" num="0095"><figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref> illustrate use-case context diagrams of the use of pre-decoding shifting for consecutive writes of a plurality of data to a memory array. The system includes a multiplexer <b>408</b>, a memory array <b>402</b>, and data-line-selection circuitry <b>406</b>. The multiplexer <b>408</b> may be a write only or a read-write multiplexer. Unlike the example illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>, where the address of the data lines changed, each data line <b>416</b> corresponds to a non-changing address. Therefore, data line address 00 corresponds to column <b>404</b><i>a </i>in the memory <b>402</b>, data line address 01 corresponds to column <b>404</b><i>b </i>in the memory <b>402</b>, data line address 10 corresponds to column <b>404</b><i>c </i>in the memory <b>402</b>, and data line address 11 corresponds to column <b>404</b><i>d </i>in the memory <b>402</b>.</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates an example <b>400</b>A for a first compute cluster write. The data-line-selection circuitry <b>406</b> selects the order in which the data lines <b>416</b> of the multiplexer <b>408</b> are cycled to write the data. In this example, the data-line-selection circuitry <b>406</b> selects the data line addresses as 00, 01, 10, and 11, in that order, and outputs the data line addresses to the multiplexer <b>408</b> via address-selection lines <b>318</b>. The first data of the first compute cluster is stored in column <b>304</b><i>a</i>, the second data of the first compute cluster is stored in column <b>304</b><i>b</i>, the third data of the first compute cluster is stored in column <b>304</b><i>c</i>, and the fourth data of the first compute cluster is stored in column <b>304</b><i>d</i>. The data in the memory is then processed, such as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>.</p><p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates an example <b>400</b>B for a second compute cluster write that is subsequent to the first compute cluster write in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. When data for the second compute cluster write is received, the data-line-selection circuitry <b>406</b> modifies the order in which the data lines <b>416</b> of the multiplexer <b>408</b> are cycled to write the data. In this example, the data-line-selection circuitry <b>406</b> selects the data line addresses as 01, 10, 11, and 00, in that order, and outputs the data line addresses to the multiplexer <b>408</b> via address-selection lines <b>418</b>. The first data of the second compute cluster is stored in column <b>304</b><i>b</i>, the second data of the second compute cluster is stored in column <b>304</b><i>c</i>, the third data of the second compute cluster is stored in column <b>304</b><i>d</i>, and the fourth data of the second compute cluster is stored in column <b>304</b><i>a</i>. The data in the memory is then processed, such as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>.</p><p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. <b>4</b>C</figref> illustrates an example <b>400</b>C for a third compute cluster write that is subsequent to the second compute cluster write in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>. When data for the second compute cluster write is received, the data-line-selection circuitry <b>406</b> modifies the order in which the data lines <b>416</b> of the multiplexer <b>408</b> are cycled to write the data. In this example, the data-line-selection circuitry <b>406</b> selects the data line addresses as 10, 11, 00, and 01, in that order, and outputs the data line addresses to the multiplexer <b>408</b> via address-selection lines <b>418</b>. The first data of the third compute cluster is stored in column <b>304</b><i>c</i>, the second data of the third compute cluster is stored in column <b>304</b><i>d</i>, the third data of the third compute cluster is stored in column <b>304</b><i>a</i>, and the fourth data of the third compute cluster is stored in column <b>304</b><i>b</i>. The data in the memory is then processed, such as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>.</p><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>4</b>D</figref> illustrates an example <b>400</b>D for a fourth compute cluster write that is subsequent to the third compute cluster write in <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>. When data for the second compute cluster write is received, the data-line-selection circuitry <b>406</b> modifies the order in which the data lines <b>416</b> of the multiplexer <b>408</b> are cycled to write the data. In this example, the data-line-selection circuitry <b>406</b> selects the data line addresses as 11, 00, 01, and 10, in that order, and outputs the data line addresses to the multiplexer <b>408</b> via address-selection lines <b>418</b>. The first data of the fourth compute cluster is stored in column <b>304</b><i>d</i>, the second data of the fourth compute cluster is stored in column <b>304</b><i>a</i>, the third data of the fourth compute cluster is stored in column <b>304</b><i>b</i>, and the fourth data of the fourth compute cluster is stored in column <b>304</b><i>c</i>. The data in the memory is then processed, such as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>.</p><p id="p-0101" num="0100">When data for a fifth compute cluster write is received, the data-line-selection circuitry <b>406</b> modifies the order in which the data lines <b>416</b> to be data line addresses as 00, 01, 10, and 11, in that order, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. The shifting of data line addresses, as illustrated in <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref>, can continue in this manner for consecutive compute cluster writes. Similar to what is discussed above in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>, the shifting allows for semi-random storage of continuous errors, which allows the errors to be removed through the learning/inference process or ignored in the analysis of target images.</p><p id="p-0102" num="0101">As described above in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>, a first clock signal may be utilized to initiate a multiplexer to cycle through its data lines for a write operation of a compute-cluster cycle and a second clock for each individual cycle. The embodiments described in conjunction with <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref> may also utilize a first clock and a second clock in a similar manor. In the illustrated examples in <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref>, however, the data-line-selection circuitry <b>406</b> receives the clock signals from the first clock <b>212</b> and the second clock <b>214</b>, rather than the multiplexer <b>408</b>, itself. Instead, changes on address-selection lines <b>318</b> are triggered by the clock signals and trigger the multiplexer to select the appropriate data line <b>416</b>. In other embodiments, the multiplexer <b>408</b> may include inputs (not illustrated) to receive the first clock signals and the second clock signals, similar to what is illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>.</p><p id="p-0103" num="0102">The data-line-selection circuitry <b>406</b> receives signals from first clock <b>212</b> to initialize the selection of the data line addresses, but each individual data line address cycle is triggered by signals received from a second clock <b>214</b>. In this way, each separate compute-cluster cycle is triggered by a clock signal from the first clock <b>212</b>. Similar to what is described above, in some embodiments, the data-line-selection circuitry <b>406</b> utilizes one clock signal from first clock <b>212</b> and four clock signals from second clock <b>214</b> to select four data line addresses for the multiplexer <b>408</b> to write to the four different columns <b>404</b><i>a</i>-<b>404</b><i>d</i>. In other embodiments, receipt of a clock signal from the first clock <b>212</b> may instruct the data-line-selection circuitry <b>406</b> to cycle to a first data line address and utilize the second clock <b>214</b> to cycle through each remaining corresponding data line address for a given compute-cluster cycle write operation, which, in this illustrated example, the data-line-selection circuitry <b>406</b> would utilize one clock signal from first clock <b>212</b> and three clock signals from second clock <b>214</b> to select four data line addresses for the multiplexer to write data to columns <b>304</b><i>a</i>-<b>304</b><i>d</i>. In yet other embodiments, each signal received via the first clock input <b>228</b> from first clock <b>212</b> triggers an individual data line address selection.</p><p id="p-0104" num="0103">In various embodiments, the input sequence to the barrel shifter and data-line-selection circuitry described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D and <b>4</b>A-<b>4</b>D</figref>, respectively, can also change the sequence of address/data line selection to a different sequence. Moreover, in some embodiments, not all address inputs/data line addresses may be shifted. For example, for large multiplexer ratios, only a sub-set of the address inputs/data line addresses may be shifted to dither data stored in the memory under consideration.</p><p id="p-0105" num="0104">The operation of certain aspects of the disclosure will now be described with respect to <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref>. In at least one of various embodiments, processes <b>500</b>, <b>600</b>, <b>700</b>, and <b>800</b> described in conjunction with <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref>, respectively, may be implemented by one or more components or circuits associated with in-memory compute elements, as described herein.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a logical flow diagram generally showing one embodiment of a process <b>500</b> for reading data from a memory array using a configurable multiplexer and sensing circuit as illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>. Process <b>500</b> begins, after a start block, at block <b>502</b>, where cluster data is stored in a column-row memory array. Various embodiments of facilitating the storage of data in the memory are described in more detail below in conjunction with <figref idref="DRAWINGS">FIGS. <b>6</b> and <b>7</b></figref>.</p><p id="p-0107" num="0106">Process <b>500</b> proceeds to block <b>504</b>, where a partial sum is calculated for each column in the memory.</p><p id="p-0108" num="0107">Process <b>500</b> continues at block <b>506</b>, where a number of columns is selected for a compute cluster. In various embodiments, this is the number of columns in which data is stored for a single compute cluster, which may be referred to as the compute-cluster-cycle size.</p><p id="p-0109" num="0108">Process <b>500</b> proceeds next to decision block <b>508</b>, where a determination is made whether the selected number of columns for the compute cluster are greater than the number of column multiplexer cycles. In at least one embodiment, this determination is based on a comparison between the selected number of columns and the number of physical data lines on the multiplexer. If the selected number of columns for the compute cluster are greater than the number of multiplexer cycles, then process <b>500</b> flows to block <b>510</b>; otherwise, process <b>500</b> flows to block <b>512</b>.</p><p id="p-0110" num="0109">At block <b>510</b>, the multiplexer is enlarged. In some embodiments, the number of data lines supported by the multiplexer are reconfigured to accommodate the selected number of columns for the compute cluster. In at least one embodiment, enlargement of the multiplexer may include utilization of a second multiplexer as the enlarged portion of the multiplexer. This may be done, for example, by reconfiguring the first multiplexer to utilize circuitry for the second multiplexer to provide additional data lines or by configuring the first multiplexer to control the multiplexer as discussed with respect to <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>. Process <b>500</b> proceeds to block <b>512</b>.</p><p id="p-0111" num="0110">If, at decision block <b>508</b>, the selected number of columns is equal to or less than the number of multiplexer cycles or after block <b>510</b>, process <b>500</b> flows to block <b>512</b>. At block <b>512</b>, the multiplexer and a sensing circuit are initiated to cycle through the partial sums for each column in the memory associated with the compute cluster. As described above, a first clock signal may initiate the multiplexer to cycle through the partial sums for a compute-cluster cycle.</p><p id="p-0112" num="0111">Process <b>500</b> proceeds to block <b>514</b>, where the current partial sum for the current multiplexer cycle is obtained and combined with the compute cluster value.</p><p id="p-0113" num="0112">Process <b>500</b> continues at decision block <b>516</b>, where a determination is made whether the number of obtained partial sums equals the selected number of columns for the compute cluster. In various embodiments, this determination is made based on a comparison between the number of multiplexer cycles selected (the number of partial sums obtained) and the selected number of columns (the compute-cluster-cycle size). If the number of obtained partial sums equals the selected number of columns, then process <b>500</b> flows to block <b>520</b>; otherwise process <b>500</b> flows to block <b>518</b>.</p><p id="p-0114" num="0113">At block <b>518</b>, the multiplexer cycle in incremented to obtain the next partial sum for the compute cluster. After block <b>518</b>, process <b>500</b> loops to block <b>514</b>, to obtain the next partial sum for the incremented multiplexer cycle.</p><p id="p-0115" num="0114">If, at decision block <b>516</b>, the number of obtained partial sums equals the selected number of columns for the compute cluster, then process <b>500</b> flows from decision block <b>516</b> to block <b>520</b>. At block <b>520</b>, the combined compute cluster value is output to a buffer, which can be accesses by another component of the system for further processing, such as an input to a next layer of the neural network processing.</p><p id="p-0116" num="0115">Process <b>500</b> continues at decision block <b>522</b>, where a determination is made whether the maximum number of multiplexer cycles is reached. In various embodiments, the maximum number of multiplexer cycles is the physical number of data lines associated with the multiplexer. If the maximum number of multiplexer cycles is reached, then process <b>500</b> flows to decision block <b>524</b>; otherwise, process <b>500</b> loops to block <b>512</b> to initiate the multiplexer and sensing circuit to cycle through the next set of partial sums for the next compute cluster for the selected number of columns.</p><p id="p-0117" num="0116">At decision block <b>524</b>, a determination is made whether additional data is to be stored in the memory, such as for a next set of compute clusters. If additional data is to be stored in the memory, process <b>500</b> loops to block <b>502</b>; otherwise, process <b>500</b> terminates or otherwise returns to a calling process to perform other actions.</p><p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a logical flow diagram generally showing one embodiment of a process <b>600</b> for employing a multiplexer that modifies data line addresses for consecutive writes of a plurality of data to a memory array as illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>.</p><p id="p-0119" num="0118">Process <b>600</b> begins, after a start block, at block <b>602</b>, where a command is received to store data in a column-row memory array for cluster compute operations. This command may be a write command or may be data on a particular input data line.</p><p id="p-0120" num="0119">Process <b>600</b> proceeds to block <b>604</b>, where each multiplexer data line is associated with a corresponding column in the memory. In various embodiments, the association between a column in the memory and a particular data line of the multiplexer includes selecting and assigning a multiplexer address to that particular data line. In one example embodiment, a first data line of the multiplexer is assigned address 00, a second data line of the multiplexer is assigned address 01, a third data line of the multiplexer is assigned address 10, and a fourth data line of the multiplexer is assigned address 11.</p><p id="p-0121" num="0120">Process <b>600</b> continues at block <b>606</b>, where the next data for the cluster compute operation is received. In various embodiments, the next data is the incoming data that is to be stored in the memory for a particular compute cluster.</p><p id="p-0122" num="0121">Process <b>600</b> proceeds next to block <b>608</b>, where the next data for the cluster compute is stored in the column associated with the multiplexer data line for the current multiplexer cycle. In various embodiments, the current multiplexer cycle is the current address of a data line of the multiplexer. For example, when first data is received, the current multiplexer cycle is the first cycle, and may use address 00; when second data is received, the current multiplexer cycle is the second cycle, and may use address 01; and so on.</p><p id="p-0123" num="0122">Process <b>600</b> continues next at decision block <b>610</b>, where a determination is made whether the maximum data line cycle of the multiplexer has been reached. In some embodiments, the maximum data line cycle is the number of physical data lines of the multiplexer. In other embodiments, the maximum data line cycle may be a selected number of data line or columns for a particular compute cluster. If the last or maximum data line cycle of the multiplexer has been reached, then process <b>600</b> flows to block <b>612</b>; otherwise, process <b>600</b> flows to block <b>616</b>.</p><p id="p-0124" num="0123">At block <b>616</b>, the multiplexer cycles to the next data line. In at least one embodiment, the multiplexer increments its current multiplexer cycle data line address to a next address. For example, if the data was stored via address 00 at block <b>608</b>, then the next multiplexer data line address may be 01. Process <b>600</b> then loops to block <b>606</b> to receive the next data to be stored in the memory for the cluster compute operation.</p><p id="p-0125" num="0124">If, at decision block <b>610</b>, the maximum multiplexer data line cycle has been reached, then process <b>600</b> flows from decision block <b>610</b> to block <b>612</b>. At block <b>612</b>, the cluster compute operation is performed. In some embodiments, a read command may be received, which initiates the reading of the memory columns via the multiplexer and a sensing circuit, such as described herein, including <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref> and process <b>500</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0126" num="0125">Process <b>600</b> proceeds next to decision block <b>614</b>, where a determination is made whether a command is received to store data for a consecutive cluster compute operation. If a consecutive cluster compute operation is to be performed, process <b>600</b> flows to block <b>618</b>; otherwise, process <b>600</b> terminates or otherwise returns to a calling process to perform other actions.</p><p id="p-0127" num="0126">At block <b>618</b>, the association between each multiplexer data line and the columns in memory are modified. In at least one non-limiting embodiment, the multiplexer includes a barrel shifter that modifies the data line/column association between storing data for consecutive cluster compute operations. For example, the barrel shifter modifies the address of the data lines, as illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref>. If the previous association indicated that the first data line of the multiplexer is assigned address 00, the second data line of the multiplexer is assigned address 01, the third data line of the multiplexer is assigned address 10, and the fourth data line of the multiplexer is assigned address 11, then the modified association may be the first data line of the multiplexer is assigned address 01, the second data line of the multiplexer is assigned address 10, the third data line of the multiplexer is assigned address 11, and the fourth data line of the multiplexer is assigned address 00.</p><p id="p-0128" num="0127">After block <b>618</b>, process <b>600</b> loops to block <b>606</b> to receive data for the next cluster computer operation.</p><p id="p-0129" num="0128"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a logical flow diagram generally showing one embodiment of a process <b>700</b> for employing pre-decoding shifting for consecutive writes of a plurality of data to a memory array as illustrated in <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref>.</p><p id="p-0130" num="0129">Process <b>700</b> begins, after a start block, at block <b>702</b>, where a command is received to store data in a column-row memory array for cluster compute operations. In various embodiments, block <b>702</b> may employ embodiments described above in conjunction with block <b>602</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0131" num="0130">Process <b>700</b> proceeds to block <b>704</b>, where each multiplexer data line is associated with a corresponding column in the memory. In various embodiments, block <b>704</b> may employ embodiments described above in conjunction with block <b>604</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0132" num="0131">Process <b>700</b> continues at block <b>706</b>, where an order is determined for the multiplexer data lines to write data for the cluster compute operation. In some embodiments, the initial order of the multiplexer data lines maybe preselected or predetermined. In other embodiments, the initial data line order may be random.</p><p id="p-0133" num="0132">In at least one embodiment, the multiplexer data line order is the order in which the data line addresses are provided to the multiplexer for data writes. For example, selection circuitry may determine that the initial order of the data line addresses is 00, 01, 10, 11.</p><p id="p-0134" num="0133">However, other orders may also be utilized. Likewise, other numbers of addresses may also be utilized depending on the size of the multiplexer.</p><p id="p-0135" num="0134">Process <b>700</b> proceeds next to block <b>708</b>, where an initial multiplexer data line is selected based on the determined data line order. In at least one embodiment, selection of the initial multiplexer data line is the first data line address in the determined data line order and output to the multiplexer.</p><p id="p-0136" num="0135">Process <b>700</b> continues at block <b>710</b>, where the next data for the cluster compute operation is received. In various embodiments, block <b>710</b> may employ embodiments described above in conjunction with block <b>606</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0137" num="0136">Process <b>700</b> proceeds next to block <b>712</b>, where the next data for the cluster compute is stored in the column associated with the selected multiplexer data line. In at least one embodiment, the data line associated with the data line address for the selected data line is utilized to store the received data in the corresponding column in the memory.</p><p id="p-0138" num="0137">Process <b>700</b> continues next at decision block <b>714</b>, where a determination is made whether the maximum data line cycle of the multiplexer has been reached. In various embodiments, decision block <b>714</b> may employ embodiments of decision block <b>610</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. If the last or maximum data line cycle of the multiplexer has been reached, then process <b>700</b> flows to block <b>716</b>; otherwise, process <b>700</b> flows to block <b>720</b>.</p><p id="p-0139" num="0138">At block <b>720</b>, the multiplexer is instructed to cycle to the next data line based on the determined data line order. In at least one embodiment, the selection circuitry increments to the data line address in the determined data line order. For example, if the previous data line address is 00 and the data line order are addresses 00, 01, 10, 11, then the next data line address is 01. Process <b>700</b> then loops to block <b>710</b> to receive the next data to be stored in the memory for the cluster compute operation.</p><p id="p-0140" num="0139">If, at decision block <b>714</b>, the maximum multiplexer data line cycle has been reached, then process <b>700</b> flows from decision block <b>714</b> to block <b>716</b>. At block <b>716</b>, the cluster compute operation is performed. In various embodiments, block <b>716</b> may employ embodiments described above in conjunction with block <b>612</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0141" num="0140">Process <b>700</b> proceeds next to decision block <b>718</b>, where a determination is made whether a command is received to store data for a consecutive cluster compute operation. In various embodiments, decision block <b>718</b> may employ embodiments described above in conjunction with decision block <b>614</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. If a consecutive cluster compute operation is to be performed, process <b>700</b> flows to block <b>722</b>; otherwise, process <b>700</b> terminates or otherwise returns to a calling process to perform other actions.</p><p id="p-0142" num="0141">At block <b>722</b>, a new multiplexer data line order is determined. The new multiplexer data line order may be random or the new multiplexer data line order may increment the previous addresses. For example, if the previous order is addresses 00, 01, 10, 11, then the new order may be addresses 01, 10, 11, 00. In at least one non-limiting embodiment, the data-line-selection circuitry includes circuitry (e.g., a barrel shifter) that selects the data line order for storing data for consecutive cluster compute operations. For example, the data-line-selection circuitry selects different orders in which to instruct the multiplexer to cycle through its data lines for consecutive cluster compute operations, as illustrated in <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>D</figref>.</p><p id="p-0143" num="0142">After block <b>722</b>, process <b>700</b> loops to block <b>708</b> to receive data for the next cluster computer operation.</p><p id="p-0144" num="0143"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a logical flow diagram generally showing one embodiment of a process for utilizing a first clock (e.g., an external system clock) to initiate multiplexer reads and writes to a memory array and utilizing a second clock (e.g., an internal memory clock) to initiate each cycle of the multiplexer read and write.</p><p id="p-0145" num="0144">Process <b>800</b> begins, after a start block, at block <b>802</b>, where a command is received for cluster compute operation for data in a column-row memory. In some embodiments, the command may be a read command, such as to read data from the memory (e.g., as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>C</figref>). In other embodiments, the command may be a write command, such as to write data to the memory (e.g., as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D and <b>4</b>A-<b>4</b>D</figref>).</p><p id="p-0146" num="0145">Process <b>800</b> proceeds to block <b>804</b>, where a first clock signal is utilized to initiate a column multiplexer to facilitate a read or write operation to the memory. In various embodiments, the first clock is separate from the memory itself. In at least one embodiment, the first clock may be separate from the memory unit or chip and may be an overall system clock.</p><p id="p-0147" num="0146">Process <b>800</b> continues at block <b>806</b>, where a second clock is trigged to step through the multiplexer cycles. In at least one embodiment, the first clock signal may trigger the first multiplexer cycle. In other embodiments, the first multiplexer cycle is triggered with the first second clock signal after the first clock signal.</p><p id="p-0148" num="0147">Process <b>800</b> proceeds next to block <b>808</b>, where data is read from or written to the memory at the column that corresponds to the current multiplexer cycle. In various embodiments, block <b>808</b> may employ embodiments of block <b>514</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, block <b>608</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, or block <b>712</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, depending on the operation and utilization of the multiplexer and memory.</p><p id="p-0149" num="0148">Process <b>800</b> continues next to decision block <b>810</b>, where a determination is made whether the maximum number of multiplexer cycles is reached. In various embodiments, decision block <b>810</b> may employ embodiments of decision block <b>522</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, decision block <b>610</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, or decision block <b>714</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. If the maximum multiplexer cycle is reached, process <b>800</b> flows to block <b>812</b>; otherwise, process <b>800</b> flows to block <b>716</b>.</p><p id="p-0150" num="0149">At block <b>716</b>, the multiplexer is incremented to the next multiplexer cycle at the next second clock signal. In various embodiments, the current memory cycle address is incremented in response to receipt of a next second clock signal. After block <b>716</b>, process <b>800</b> loops to block <b>808</b> to read or write data to the next column in the memory associated with the next multiplexer cycle.</p><p id="p-0151" num="0150">If, at decision block <b>810</b>, the maximum multiplexer cycle is reached, process <b>800</b> flows from decision block <b>810</b> to block <b>812</b>. At block <b>812</b>, the memory is put into a low power mode or memory retention mode. In some embodiments, the memory may transition through other states between the operating mode and the memory retention mode or between the low power mode and the retention mode. Such other states may include, but are not limited to, an idle state, a wait state, a light sleep state, etc. In other embodiments, block <b>812</b> may be optional and the memory may not be moved into the retention or a low power mode after the maximum multiplexer cycle is reached at decision block <b>810</b>.</p><p id="p-0152" num="0151">Embodiments of the foregoing processes and methods may contain additional acts not shown in <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref>, may not contain all of the acts shown in <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref>, may perform acts shown in <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref> in various orders, may combine acts, and may be modified in various respects. For example, process <b>800</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref> may omit act <b>812</b> when continuous compute clusters are being written to and read from the memory for consecutive neural network layer processing, combine acts <b>804</b> and <b>806</b>, etc.</p><p id="p-0153" num="0152">Some embodiments may take the form of or comprise computer program products. For example, according to one embodiment there is provided a computer readable medium comprising a computer program adapted to perform one or more of the methods or functions described above. The medium may be a physical storage medium, such as for example a Read Only Memory (ROM) chip, or a disk such as a Digital Versatile Disk (DVD-ROM), Compact Disk (CD-ROM), a hard disk, a memory, a network, or a portable media article to be read by an appropriate drive or via an appropriate connection, including as encoded in one or more barcodes or other related codes stored on one or more such computer-readable mediums and being readable by an appropriate reader device.</p><p id="p-0154" num="0153">Furthermore, in some embodiments, some or all of the methods and/or functionality may be implemented or provided in other manners, such as at least partially in firmware and/or hardware, including, but not limited to, one or more application-specific integrated circuits (ASICs), digital signal processors, discrete circuitry, logic gates, standard integrated circuits, controllers (e.g., by executing appropriate instructions, and including microcontrollers and/or embedded controllers), field-programmable gate arrays (FPGAs), complex programmable logic devices (CPLDs), etc., as well as devices that employ RFID technology, and various combinations thereof.</p><p id="p-0155" num="0154">Embodiments may be further or alternatively summarized as described below.</p><p id="p-0156" num="0155">A system may be summarized as including a memory array having a plurality of cells arranged as a plurality of rows of cells intersecting a plurality of columns of cells; a column multiplexer having a plurality of data lines where each respective data line corresponds to a respective column of the plurality of columns, and having a plurality of selection lines that indicate which of the plurality of data lines is selected for a given cycle, wherein the column multiplexer, in operation, cycles through the plurality of data lines to write data to the plurality of cells based on a data line address received via the plurality of selection lines; and data-line-selection circuitry, which, in operation, selects a first cycle order for a first write operation to write a first plurality of data to the plurality of cells and selects a second cycle order for a second write operation to write a second plurality of data to the plurality of cells, wherein the first and second cycle orders indicate an order in which the plurality of data lines are selected on each cycle, and wherein the first cycle order is different from the second cycle order.</p><p id="p-0157" num="0156">The column multiplexer may include the data-line-selection circuitry to select the plurality of data lines in the first cycle order during the first write operation and select the plurality of data lines in the second cycle order during the second write operation. The data-line-selection circuitry may include a plurality of output lines that correspond to the plurality of selection lines of the column multiplexer and the data-line-selection circuitry, in operation, outputs the data line address of the plurality of data lines via the plurality of output lines in accordance with the first selected cycle order to write of a first plurality of data to the plurality of cells during the first write operation and to output the data line address of the plurality of data lines via the plurality of output lines in accordance with the second selected cycle order to write a second plurality of data to the plurality of cells during the second write operation.</p><p id="p-0158" num="0157">The system may include cluster cycle management circuitry, which, in operation, generates a plurality of control signals in response to a clock signal and provides the plurality of control signals to the column multiplexer to cycle through the plurality of data lines to write data to a respective column in the plurality of columns of cells.</p><p id="p-0159" num="0158">The system may include a plurality of computation circuits where each computation circuit calculates a computation value from cell values in a corresponding column of cells in the plurality of cells and corresponds to a respective data line of the plurality of data lines of the column multiplexer; and a sensing circuit, which, in operation, obtains the computation values from the plurality of computation circuits via the column multiplexer as the column multiplexer cycles through the plurality of data lines and to combine the obtained computation values over a determined number of multiplexer cycles during a read operation. The determined number of multiplexer cycles may be less than the plurality of data lines of the column multiplexer. The sensing circuit, in operation, may calculate a first value from the obtained computation values via a first set of the plurality of data lines during a first set of cycles of the column multiplexer during a first portion of the read operation and to calculate a second value from the obtained computation values via a second set of the plurality of data lines during a second set of cycles of the column multiplexer during a second portion of the read operation, wherein the first and second sets of cycles include the determined number of multiplexer cycles. The column multiplexer, in operation, may cycle through a second plurality of data lines that each corresponds to a respective second computation circuit of a plurality of second computation circuits, where each second computation circuit calculates a computation value from cell values in a corresponding column of cells in a second plurality of cells. The second plurality of data lines for the column multiplexer may be provided by a second column multiplexer. The system may include a first clock, which, in operation, initiates the read operation of the column multiplexer to cycle through the plurality of data lines for the determined number of multiplexer cycles; and a second clock, which, in operation, initiates each cycle for each data line of the column multiplexer for the determined number of multiplexer cycles during the read operation for the sensing circuit to obtain the computation value from the corresponding computation circuits.</p><p id="p-0160" num="0159">A method may be summarized as including receiving a first command to store first data for a first cluster compute operation in a plurality of cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells; associating each of a plurality of multiplexer data lines with a respective column of the plurality of columns; determining a first data-line order for storing the first data in the plurality of cells; cycling through the plurality of data lines in accordance with the first data-line order to store the first data in the respective columns of the plurality of columns for the first cluster compute operation; performing the first cluster compute operation; in response to completion of the first cluster compute operation, receiving a second command to store second data for a second cluster compute operation in the plurality of cells; determining a second data-line order for storing the second data in the plurality of cells, the second data-line order being different from the first data-line order; and cycling through the plurality of data lines in accordance with the second data-line order to store the second data in the respective columns of the plurality of columns for the second cluster compute operation.</p><p id="p-0161" num="0160">Determining the second data-line order for storing the second data in the plurality of cells may include employing a barrel shifter to modify an address of each of the plurality of data lines based on the first data-line order. Determining the first data-line order for storing the first data in the plurality of cells may include selecting the first data-line order and instructing a column multiplexer to cycle through the plurality of data lines in accordance with the first data-line order, and wherein determining the second data-line order for storing the second data in the plurality of cells may include selecting the second data-line order and instructing the column multiplexer to cycle through the plurality of data lines in accordance with the second data-line order.</p><p id="p-0162" num="0161">Cycling through the plurality of data lines in accordance with the first data-line order may include initiating the cycling through the plurality of data line in accordance with the first data-line order in response to a first clock signal from a first clock; and initiating each cycle for each data line in the first data-line order to write data to each respective column of the plurality of columns in response to a first set of clock signals from a second clock; wherein cycling through the plurality of data lines in accordance with the second data-line order may include initiating the cycling through the plurality of data line in accordance with the second data-line order in response to a second clock signal from the first clock; and initiating each cycle for each data line in the first data-line order to write data to each respective column of the plurality of columns in response to a second set of clock signals from the second clock.</p><p id="p-0163" num="0162">Performing the first cluster compute operation may include computing a plurality of compute values from cell values from the plurality of columns of cells, wherein each respective compute value is computed from cells values from a respective column of cells; selecting a number of multiplexer cycles for the first cluster compute operation based on a number of columns storing data for the first cluster compute operation; generating a result of the first cluster compute operation by employing a column multiplexer to cycle through a first subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a sensing engine to combine the respective compute values from the first subset of compute values; and outputting the result of the first cluster compute operation. The method may further include generating a second result of the first cluster compute operation by employing a second column multiplexer to cycle through a second subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a second sensing engine to combine the respective compute values from the second subset of compute values; and outputting the second result of the first cluster compute operation. The selected number of multiplexer cycles may be less than the plurality of data lines.</p><p id="p-0164" num="0163">A computing device may be summarized as including means for receiving a plurality of data to store in a plurality of cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells; means for determining a data-line order for storing the received plurality of data in the plurality of cells; means for cycling through the plurality of data lines in accordance with the data-line order to store the received plurality of data in respective columns of the plurality of columns; and means for modifying the data-line order for storing subsequently received plurality of data in the plurality of cells.</p><p id="p-0165" num="0164">The computing device may further include means for initiating the cycling through the plurality of data lines based on signals from a first clock; and means for initiating each cycle for each data line of the plurality of data lines in accordance with the data-line order based on signals from a second clock. The computing device may further include means for computing respective computation values from cell values from each respective column of the plurality of columns of cells; means for cycling through each respective computation value for a determined number of computation values; and means for combining the respective computation values from a subset of computation values to generate a result of a data compute cluster for the determined number of computation values.</p><p id="p-0166" num="0165">A system may be summarized as including a memory array having a plurality of cells arranged as a plurality of rows of cells intersecting a plurality of columns of cells; a column multiplexer having a plurality of data lines where each respective data line corresponds to a respective column of the plurality of columns, wherein the column multiplexer, in operation, initiates cycling through the plurality of data lines to read data from or write data to the plurality of cells in response to a clock signal from a first clock for a read or write operation, and wherein the column multiplexer, in operation, initiates each cycle for each data line of the column multiplexer to read from or write data to a respective column in the plurality of columns of cells in response to clock signals from a second clock that is separate from the first clock. The first clock may be a system clock external to the plurality of cells and the second clock may be a memory refresh clock associated with the plurality of cells.</p><p id="p-0167" num="0166">The system may include data-line-selection circuitry, which, in operation, selects a first cycle order for a first write operation to write a first plurality of data to the plurality of cells and to select a second cycle order for a second write operation to write a second plurality of data to the plurality of cells, wherein the first and second cycle orders indicate an order in which the plurality of data lines are selected on each cycle, and wherein the first cycle order is different from the second cycle order. The data-line-selection circuitry may include a plurality of output lines that correspond to a plurality of selection lines of the column multiplexer and the data-line-selection circuitry, in operation, outputs a data line address of the plurality of data lines via the plurality of output lines in accordance with the first selected cycle order to write of a first plurality of data to the plurality of cells during the first write operation and to output the data line address of the plurality of data lines via the plurality of output lines in accordance with the second selected cycle order to write of a second plurality of data to the plurality of cells during the second write operation.</p><p id="p-0168" num="0167">The column multiplexer, in operation, may modify an address of each of the plurality of data lines of the column multiplexer for writing consecutive pluralities of data to the plurality of cells. The column multiplexer, in operation, may select the plurality of data lines in a first cycle order during a first write operation and select the plurality of data lines in a second cycle order during a second write operation.</p><p id="p-0169" num="0168">The system may include cluster cycle management circuitry, which, in operation, determines a number of multiplexer cycles based on a number of columns storing data of associated with a read operation; a plurality of computation circuits where each computation circuit calculates a computation value from cell values in a corresponding column of cells in the plurality of cells and corresponds to a respective data line of the plurality of data lines of the column multiplexer; and a sensing circuit, which, in operation, obtains the computation values from the plurality of computation circuits via the column multiplexer as the column multiplexer cycles through the plurality of data lines and to combine the obtained computation values over the determined number of multiplexer cycles during the read operation. The determined number of multiplexer cycles may be less than the plurality of data lines of the column multiplexer. The sensing circuit, in operation, may calculate a first value from the obtained computation values via a first set of the plurality of data lines during a first set of cycles of the column multiplexer during a first portion of the read operation and to calculate a second value from the obtained computation values via a second set of the plurality of data lines during a second set of cycles of the column multiplexer during a second portion of the read operation, wherein the first and second sets of cycles include the determined number of multiplexer cycles. The column multiplexer, in operation, may cycle through a second plurality of data lines that each corresponds to a respective second computation circuit of a plurality of second computation circuits, where each second computation circuit calculates a computation value from cell values in a corresponding column of cells in a second plurality of cells.</p><p id="p-0170" num="0169">A method may be summarized as including receiving a command associated with a cluster compute operation to read data from or write data to a plurality of cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells; initiating a multiplexer to cycle through a plurality of data lines in response to a clock signal from a first clock, each of the plurality of data lines corresponds to a respective column of the plurality of columns; and initiating each cycle of the multiplexer for each data line of the plurality of data lines to read data from or write data to each respective column of the plurality of columns in response to clock signals from a second clock. The first clock may be a system clock external to the plurality of cells and the second clock is a memory refresh clock associated with the plurality of cells.</p><p id="p-0171" num="0170">The method may further include prior to initiating the multiplexer to cycle through the plurality of data lines, determining a data-line order for storing first data in the plurality of cells; and wherein initiating each cycle of the multiplexer for each data line of the plurality of data lines includes cycling through the plurality of data lines in accordance with the data-line order to store the data in the respective columns of the plurality of columns.</p><p id="p-0172" num="0171">The method may further include receiving a second command to write second data to the plurality of cells; determining a second data-line order for storing first data in the plurality of cells; initiating the multiplexer to cycle through the plurality of data lines in response to a second clock signal from the first clock; and initiating each cycle of the multiplexer for each data line of the plurality of data lines to store the second data to each respective column of the plurality of columns in accordance with the second data-line order and in response to additional clock signals from the second clock. Determining the second data-line order for storing the second data in the plurality of cells may include employing a barrel shifter to modify an address of each of the plurality of data lines based on the first data-line order.</p><p id="p-0173" num="0172">The method may further include computing a plurality of compute values from cell values from the plurality of columns of cells, wherein each respective compute value is computed from cells values from a respective column of cells; selecting a number of multiplexer cycles for a cluster compute read operation based on a number of columns storing data for the cluster compute read operation; and generating a result of the cluster compute read operation by employing the multiplexer to cycle through a first subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a sensing engine to combine the respective compute values from the first subset of compute values.</p><p id="p-0174" num="0173">The method may further include initiating a second multiplexer to cycle through a second plurality of data lines in response to the clock signal from the first clock, each of the second plurality of data lines corresponds to a respective column of a second plurality of columns in the plurality of cells; and initiating each cycle of the second multiplexer for each data line of the second plurality of data lines to read data from each respective column of the second plurality of columns in response to the clock signals from the second clock; and generating a second result of the cluster compute read operation by cycling through a second subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a second sensing engine to combine the respective comp computation values from the second subset of compute values.</p><p id="p-0175" num="0174">A computing device may be summarized as including means for receiving a command to read data from or write data to a plurality of cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells; means for initiating a multiplexer to cycle through a plurality of data lines from a first clock source, each of the plurality of data lines corresponds to a respective column of the plurality of columns; and means for initiating each cycle of the multiplexer for each data line of the plurality of data lines to read data from or write data to each respective column of the plurality of columns from a second clock source.</p><p id="p-0176" num="0175">The computing device may further include means for determining a data-line order for storing plurality of received data in the plurality of cells; means for cycling through the plurality of data lines in accordance with the data-line order to store the received plurality of data in respective columns of the plurality of columns; and means for modifying the data-line order for storing subsequently received plurality of data in the plurality of cells. The computing device may further include means for computing respective computation values from cell values from each respective column of the plurality of columns of cells; means for determining a number of computation values based on a number of columns storing data associated with a data compute cluster; means for cycling through each respective computation value for the determined number of computation values; and means for combining the respective computation values from a subset of computation values to generate a result of the data compute cluster for the determined number of computation values.</p><p id="p-0177" num="0176">The various embodiments described above can be combined to provide further embodiments. These and other changes can be made to the embodiments in light of the above-detailed description. In general, in the following claims, the terms used should not be construed to limit the claims to the specific embodiments disclosed in the specification and the claims, but should be construed to include all possible embodiments along with the full scope of equivalents to which such claims are entitled. Accordingly, the claims are not limited by the disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system, comprising:<claim-text>a memory array having a first plurality of cells arranged as a plurality of rows of cells intersecting a plurality of columns of cells;</claim-text><claim-text>a plurality of first computation circuits where each first computation circuit, in operation, calculates a computation value from cell values in a corresponding column of cells in the first plurality of cells;</claim-text><claim-text>a first column multiplexer, which, in operation, cycles through a plurality of data lines that each corresponds to a first computation circuit of the plurality of first computation circuits;</claim-text><claim-text>a first sensing circuit, which, in operation, obtains the computation values from the plurality of first computation circuits via the first column multiplexer as the first column multiplexer cycles through the plurality of data lines and combines the obtained computation values over a determined number of multiplexer cycles; and</claim-text><claim-text>a cluster cycle management circuit, which, in operation, determines the determined number of multiplexer cycles based on a number of columns storing data of a compute cluster.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determined number of multiplexer cycles is less than a plurality of physical data lines of the first column multiplexer.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a computation value is a partial sum of cell values in a corresponding column and the first sensing circuit, in operation, calculates a first sum from the obtained partial sums via a first set of the plurality of data lines during a first set of cycles of the first column multiplexer and calculates a second sum from the obtained partial sums via a second set of the plurality of data lines during a second set of cycles of the first column multiplexer, wherein the first and second sets of cycles have the determined number of multiplexer cycles.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the first column multiplexer, in operation, cycles through a second plurality of data lines that each corresponds to a respective second computation circuit of a plurality of second computation circuits, where each second computation circuit calculates a partial sum from cell values in a corresponding column of cells in a second plurality of cells.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the second plurality of data lines for the first column multiplexer are provided by a second column multiplexer.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>a plurality of second computation circuits where each second computation circuit, in operation, calculates a computation value from cell values in a corresponding column of cells in a second plurality of cells of the memory array;</claim-text><claim-text>a second column multiplexer, which, in operation, cycles through a plurality of data lines that each corresponds to a second computation circuit of the plurality of second computation circuits; and</claim-text><claim-text>a second sensing circuit, which, in operation, obtains the computation values from the plurality of second computation circuits via the second column multiplexer as the second column multiplexer cycles through the plurality of data lines and combines the obtained computation values over the determined number of multiplexer cycles.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein,<claim-text>the cluster cycle management circuit, in operation, generates a plurality of control signals in response to a clock signal and provides the plurality of control signals to the first sensing circuit and to the first column multiplexer to cycle through the plurality of data lines for the determined number of multiplexer cycles for the first sensing circuit to obtain the computation values from the corresponding first computation circuits.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>a data-line-selection circuit, which, in operation, selects different cycle orders through the plurality of data lines of the first column multiplexer to write consecutive pluralities of data to the first plurality of cells.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A method, comprising:<claim-text>storing data in a plurality of memory cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells;</claim-text><claim-text>computing a plurality of compute values from cell values from the plurality of columns of cells, wherein each respective compute value is computed from cells values from a respective column of cells;</claim-text><claim-text>determining a number of columns in the plurality of columns of cells storing data for a data compute cluster;</claim-text><claim-text>selecting a number of multiplexer cycles based on the determined number of columns;</claim-text><claim-text>generating a result of the data compute cluster by employing a column multiplexer to cycle through a first subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a sensing engine to combine the respective compute values from the first subset of compute values; and</claim-text><claim-text>outputting the result of the data compute cluster.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, comprising:<claim-text>generating a second result of the data compute cluster by employing a second column multiplexer to cycle through a second subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a second sensing engine to combine the respective compute values from the second subset of compute values; and</claim-text><claim-text>outputting the second result of the data compute cluster.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, comprising:<claim-text>generating a second result of the data compute cluster by employing the column multiplexer to cycle through a second subset of the plurality of compute values for the selected number of multiplexer cycles and by employing the sensing engine to combine the respective compute values from the second subset of compute values; and</claim-text><claim-text>outputting the second result of the data compute cluster.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, comprising:<claim-text>modifying a number of data lines utilized by the column multiplexer based on the selected number of multiplexer cycles for the data compute cluster.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, comprising:<claim-text>initiating the column multiplexer to cycle through the first subset of compute values for the selected number of multiplexer cycles in response to a non-memory clock signal; and</claim-text><claim-text>initiating each cycle for each data line of the column multiplexer for the selected number of multiplexer cycles to obtain the first subset of compute values in response to memory clock signals.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, comprising:<claim-text>selecting different cycle orders for the column multiplexer to cycle through the plurality of columns of cells for writing consecutive pluralities of data to the plurality of cells.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computing device, comprising:<claim-text>means for storing data in a plurality of cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells;</claim-text><claim-text>means for computing respective computation values from cell values from each respective column of the plurality of columns of cells;</claim-text><claim-text>means for determining a compute-cluster-cycle size based on a number of columns in the plurality of columns of cells storing data for a data compute cluster;</claim-text><claim-text>means for cycling through respective computation values for the determined compute-cluster-cycle size; and</claim-text><claim-text>means for combining the respective computation values to generate a result of the data compute cluster for the determined compute-cluster-cycle size.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computing device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, comprising:<claim-text>means for initiating the cycling through the respective computation values for the determined compute-cluster-cycle size; and</claim-text><claim-text>means for initiating each cycle for each respective computation value for the determined compute-cluster-cycle size.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computing device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, comprising:<claim-text>means for modifying an order in which data is stored in the plurality of columns of cells for writing consecutive pluralities of data to the plurality of cells.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A non-transitory computer-readable medium having contents which cause cluster cycle management circuitry to perform actions, the actions comprising:<claim-text>storing data in a plurality of memory cells that are arranged as a plurality of rows of cells intersecting a plurality of columns of cells;</claim-text><claim-text>determining a number of columns in the plurality of columns of cells that store data for a compute operation;</claim-text><claim-text>selecting a number of multiplexer cycles based on the determined number of columns;</claim-text><claim-text>generating a result of the compute operation by employing a column multiplexer to cycle through a first subset of the plurality of columns of cells for the selected number of multiplexer cycles and by employing a sensing engine to combine the values from the first subset of columns of cells; and</claim-text><claim-text>outputting the result of the compute operation.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the actions comprise:<claim-text>generating a second result of the data compute cluster by employing a second column multiplexer to cycle through a second subset of the plurality of compute values for the selected number of multiplexer cycles and by employing a second sensing engine to combine the respective compute values from the second subset of compute values; and</claim-text><claim-text>outputting the second result of the data compute cluster.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the contents comprise instructions executed by the cluster cycle management circuitry.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A device, comprising:<claim-text>a memory array having a first plurality of cells arranged as a plurality of rows of cells intersecting a plurality of columns of cells;</claim-text><claim-text>a plurality of first computation circuits where each first computation circuit, in operation, calculates a computation value from cell values in a corresponding column of cells in the first plurality of cells;</claim-text><claim-text>a first column multiplexer, which, in operation, cycles through a plurality of data lines that each corresponds to a first computation circuit of the plurality of first computation circuits; and</claim-text><claim-text>control circuitry, which, in operation, responds to a cluster compute command by initiating, using a first clock signal, the first column multiplexer to cycle through a determined number of cycles, wherein the first column multiplexer cycles through the determined number of cycles using a second clock signal.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The device of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the cluster compute command is a read command.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The device of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the cluster compute command is a write command.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The device of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the control circuitry, in operation, responds to completion of the determined number of cycles by generating control signals to place the memory array in a determined operational state.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The device of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the determined operational state is one of a low-power state, a retention state, an idle state, a wait state or a sleep state.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The device of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the control circuitry, in operation, responds to completion of the determined number of cycles by generating control signals to transition the memory through a series of operational states.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The device of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the first clock signal is a system clock signal and the second clock signal is a memory clock signal.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The device of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the cluster compute command is one of a series of cluster compute commands, and the control circuitry, in operation, responds to completion of the series of cluster compute commands by generating control signals to place the memory array in a determined operational state.</claim-text></claim></claims></us-patent-application>