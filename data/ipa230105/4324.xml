<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004325A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004325</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17673283</doc-number><date>20220216</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>KR</country><doc-number>10-2021-0085878</doc-number><date>20210630</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0659</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0647</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0611</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0679</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0253</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">DATA PROCESSING SYSTEM AND OPERATING METHOD THEREOF</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SK hynix Inc.</orgname><address><city>Gyeonggi-do</city><country>KR</country></address></addressbook><residence><country>KR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>BYUN</last-name><first-name>Eu Joon</first-name><address><city>Gyeonggi-do</city><country>KR</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A data processing system in which, in a case where it is difficult for a host to perform garbage collection by itself due to a load induced in the host in a system configured by Zoned Namespaces, the host requests garbage collection to a memory system and thus the memory system performs the garbage collection, and an operating method thereof.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="84.84mm" wi="158.75mm" file="US20230004325A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="190.25mm" wi="127.25mm" orientation="landscape" file="US20230004325A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="238.25mm" wi="150.62mm" file="US20230004325A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="110.41mm" wi="122.51mm" file="US20230004325A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="217.17mm" wi="119.63mm" orientation="landscape" file="US20230004325A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="150.88mm" wi="155.70mm" file="US20230004325A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="225.21mm" wi="157.65mm" file="US20230004325A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="204.13mm" wi="138.35mm" orientation="landscape" file="US20230004325A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="204.13mm" wi="138.35mm" orientation="landscape" file="US20230004325A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="159.94mm" wi="135.38mm" file="US20230004325A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="127.51mm" wi="130.81mm" file="US20230004325A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="128.44mm" wi="130.81mm" file="US20230004325A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="226.57mm" wi="145.03mm" file="US20230004325A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application claims priority under 35 U.S.C. &#xa7; 119 to Korean Patent Application No. 10-2021-0085878 filed on Jun. 30, 2021, which is incorporated herein by reference in its entirety.</p><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">1. Field</heading><p id="p-0003" num="0002">Various embodiments relate to a data processing system and an operating method thereof, and more particularly, to a data processing system in which, in a case where it is difficult for a host to perform garbage collection by itself due to a load induced in the host in a system configured by Zoned Namespaces, the host requests garbage collection to a memory system and thus the memory system performs the garbage collection, and an operating method thereof.</p><heading id="h-0004" level="1">2. Discussion of the Related Art</heading><p id="p-0004" num="0003">Recently, the paradigm for the computer environment has changed to ubiquitous computing in which computer systems can be used anytime and anywhere. Due to this fact, the use of portable electronic devices such as mobile phones, digital cameras, and notebook computers has rapidly increased. In general, such portable electronic devices use a memory system which uses a memory device, that is, a data storage device. The data storage device is used as a main memory device or an auxiliary memory device of the portable electronic devices.</p><p id="p-0005" num="0004">A data storage device using a nonvolatile memory device provides advantages in that, since there is no mechanical driving part unlike a hard disk, stability and durability are excellent, an information access speed is high and power consumption is small. Data storage devices having such advantages include a universal serial bus (USB) memory device, memory cards having various interfaces, and a solid state drive (SSD).</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0006" num="0005">Various embodiments of the present disclosure are directed to a data processing system in which, in a case where it is difficult for a host to perform garbage collection by itself due to a load induced in the host in a system configured by Zoned Namespaces, the host can entrust garbage collection to a memory system and thus the memory system can perform the garbage collection, and an operating method thereof.</p><p id="p-0007" num="0006">Also, various embodiments of the present disclosure are directed to a data processing system capable of determining a load level of a host in order to decide whether to entrust garbage collection to a memory system, and an operating method thereof.</p><p id="p-0008" num="0007">In an embodiment of the present disclosure, a data processing system may include: a host including a processor and a volatile memory and configured to sequentially allocate data to a plurality of zones of a Zoned Namespace; and a memory system including: a memory device including a plurality of memory blocks; and a controller configured to allocate the plurality of memory blocks to respective zones of the Zoned Namespace and access a memory block allocated for one of the plurality of zones according to an address of the zone inputted together with a data input/output request from the host, wherein the host is further configured to request garbage collection to the controller or perform host-based garbage collection, depending on a load level of the host.</p><p id="p-0009" num="0008">In an embodiment of the present disclosure, a method for operating a data processing system may include: sequentially allocating, by a host including a processor and a volatile memory, data to a plurality of zones of a Zoned Namespace; allocating, by a controller, a plurality of memory blocks of a memory device to respective zones of the Zoned Namespace; accessing, by the controller, a memory block allocated for one zone among the plurality of zones according to an address of the zone inputted together with a data input/output request from the host; and requesting, by the host, garbage collection to the controller or performing host-based garbage collection, depending on a load level of the host.</p><p id="p-0010" num="0009">In an embodiment of the present disclosure, a memory system may include: a memory device including a plurality of memory blocks; and a controller configured to: allocate the plurality of memory blocks to respective zones of a Zoned Namespace, access a memory block allocated for one of the plurality of zones according to an address of the zone inputted together with a data input/output request, and perform a garbage collection operation in response to a garbage collection request from a host.</p><p id="p-0011" num="0010">In an embodiment of the present disclosure, an operating method of a data processing system, the operating method may include: requesting, by a host in a processor-bound status, a garbage collection operation by providing a controller with information for the operation; and controlling, by the controller, a memory device to perform the garbage collection operation on victim and target storage units included therein according to the information.</p><p id="p-0012" num="0011">In the data processing system and the operating method thereof according to the embodiments of the present disclosure, in a case where it is difficult for a host to perform garbage collection by itself due to a load induced in the host in a system configured by Zoned Namespaces, the host can entrust garbage collection to a memory system and thus the memory system can perform the garbage collection.</p><p id="p-0013" num="0012">Also, the data processing system and the operating method thereof according to the embodiments of the present disclosure can determine a load level of the host in order to decide whether to entrust garbage collection to the memory system.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram schematically illustrating an example of a data processing system including a memory system in accordance with an embodiment of the present disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram schematically illustrating an example of a memory device in accordance with an embodiment of the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram schematically illustrating a memory cell array circuit of memory blocks in the memory device in accordance with an embodiment of the disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram schematically illustrating the structure of the memory device in the memory system in accordance with an embodiment of the present disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram schematically illustrating an example of a case where a plurality of command operations corresponding to a plurality of commands are performed in the memory system in accordance with an embodiment of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating the concept of a super memory block used in the memory system in accordance with an embodiment of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating a data processing system in accordance with an embodiment of the present disclosure in which Zoned Namespace technology is implemented.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating a memory system including a nonvolatile memory device which supports Namespaces divided into the units of zones in accordance with an embodiment of the present disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram illustrating a method for a host to perform garbage collection using Zoned Namespaces in accordance with an embodiment of the present disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating a garbage collection method in the data processing system in accordance with an embodiment of the present disclosure to which the Zoned Namespace technology is applied.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart illustrating the garbage collection method in the data processing system in accordance with an embodiment of the present disclosure to which the Zoned Namespace technology is applied.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart illustrating a method for deciding a subject for performing garbage collection in accordance with an embodiment of the present disclosure.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart illustrating a method for deciding a subject for performing garbage collection in accordance with an embodiment of the present disclosure.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flow diagram illustrating a process in accordance with an embodiment of the present disclosure in which the host transmits a garbage collection request to a controller of the memory system.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a diagram illustrating an example of a process of performing garbage collection requested to the memory system in accordance with an embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION</heading><p id="p-0029" num="0028">Various embodiments of the present disclosure will be described below in more detail with reference to the accompanying drawings. The present disclosure may, however, be embodied in different forms and should not be construed as limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the present disclosure to those skilled in the art. Throughout the disclosure, like reference numerals refer to like parts throughout the various figures and embodiments of the present disclosure.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram schematically illustrating an example of a data processing system including a memory system in accordance with an embodiment of the present disclosure.</p><p id="p-0031" num="0030">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a data processing system <b>100</b> may include a host <b>102</b> and a memory system <b>110</b>.</p><p id="p-0032" num="0031">The host <b>102</b> includes electronic devices, for example, portable electronic devices such as a mobile phone, an MP3 player and a laptop computer or electronic devices such as a desktop computer, a game machine, a TV and a projector, that is, wired and wireless electronic devices.</p><p id="p-0033" num="0032">The host <b>102</b> may include a processor <b>105</b> and a memory <b>106</b>. The host <b>102</b> may include the processor <b>105</b> having higher performance and the memory <b>106</b> having larger capacity, as compared to the memory system <b>110</b> interworking with the host <b>102</b>. Unlike the memory system <b>110</b>, the processor <b>105</b> and the memory <b>106</b> in the host <b>102</b> provide advantages in that they have little space limitation and operate at high speed and the hardware upgrade of the processor <b>105</b> and the memory <b>106</b> is possible. In order to use the host <b>102</b> having higher performance as compared to the memory system <b>110</b>, a Zoned Namespace system may be utilized and will be described later.</p><p id="p-0034" num="0033">The host <b>102</b> includes at least one operating system (OS). The operating system generally manages and controls the function and operation of the host <b>102</b>, and provides interoperability between the host <b>102</b> and a user using the data processing system <b>100</b> or the memory system <b>110</b>. The operating system supports functions and operations corresponding to the user's purpose of use and the use of the operating system. For example, the operating system may be classified into a general operating system and a mobile operating system depending on the mobility of the host <b>102</b>. Also, the general operating system as the operating system may be classified into a personal operating system and an enterprise operating system depending on the user's usage environment. For example, the personal operating system is a system characterized to support a service providing functions for a general user and may include windows and chrome, and the enterprise operating system is a system characterized to secure and support high performance and may include Windows server, Linux and Unix. In addition, the mobile operating system as the operating system is a system characterized to support a mobility service providing function and a system power saving function to users and may include Android, iOS, Windows mobile, etc. The host <b>102</b> may include a plurality of operating systems, and executes the operating systems to perform operations with the memory system <b>110</b> in response to a user request. The host <b>102</b> transmits a plurality of commands corresponding to a user request to the memory system <b>110</b>, and accordingly, the memory system <b>110</b> performs operations corresponding to the commands, that is, operations corresponding to the user request.</p><p id="p-0035" num="0034">The memory system <b>110</b> operates in response to a request of the host <b>102</b>, and particularly, stores data to be accessed by the host <b>102</b>. The memory system <b>110</b> may be used as a main memory device or an auxiliary memory device of the host <b>102</b>. The memory system <b>110</b> may be implemented as any of various storage devices, depending on a host interface protocol which is coupled with the host <b>102</b>. For example, the memory system <b>110</b> may be implemented into any of various storage devices such as a solid state drive (SSD), a multimedia card in the form of an MMC, an eMMC (embedded MMC), an RS-MMC (reduced size MMC) and a micro-MMC, a secure digital card in the form of an SD, a mini-SD and a micro-SD, a universal serial bus (USB) storage device, a universal flash storage (UFS) device, a compact flash (CF) card, a smart media card, a memory stick, and so forth.</p><p id="p-0036" num="0035">The storage devices which implement the memory system <b>110</b> may be implemented by a volatile memory device such as a dynamic random access memory (DRAM) and a static random access memory (SRAM) or a nonvolatile memory device such as a read only memory (ROM), a mask ROM (MROM), a programmable ROM (PROM), an erasable programmable ROM (EPROM), an electrically erasable and programmable ROM (EEPROM), an ferroelectric random access memory (FRAM), a phase change RAM (PRAM), a magnetic RAM (MRAM), a resistive RAM (RRAM) and a flash memory.</p><p id="p-0037" num="0036">The memory system <b>110</b> includes a memory device <b>150</b> which stores data to be accessed by the host <b>102</b>, and a controller <b>130</b> which controls storage of data in the memory device <b>150</b>.</p><p id="p-0038" num="0037">The controller <b>130</b> and the memory device <b>150</b> may be integrated into one semiconductor device. For instance, the controller <b>130</b> and the memory device <b>150</b> may be integrated into one semiconductor device and thereby configure an SSD. In the case where the memory system <b>110</b> is used as an SSD, the operating speed of the host <b>102</b> which is coupled to the memory system <b>110</b> may be improved. Further, the controller <b>130</b> and the memory device <b>150</b> may be integrated into one semiconductor device and configure a memory card.</p><p id="p-0039" num="0038">For example, the controller <b>130</b> and the memory device <b>150</b> may configure a memory card such as a PC card (PCMCIA: Personal Computer Memory Card International Association), a compact flash card (CF), a smart media card (SM and SMC), a memory stick, a multimedia card (MMC, RS-MMC and MMCmicro), an SD card (SD, miniSD, microSD and SDHC) and a universal flash storage (UFS).</p><p id="p-0040" num="0039">For another instance, the memory system <b>110</b> may configure a computer, an ultra mobile PC (UMPC), a workstation, a net-book, a personal digital assistant (PDA), a portable computer, a web tablet, a tablet computer, a wireless phone, a mobile phone, a smart phone, an e-book, a portable multimedia player (PMP), a portable game player, a navigation device, a black box, a digital camera, a digital multimedia broadcasting (DMB) player, a 3-dimensional television, a smart television, a digital audio recorder, a digital audio player, a digital picture recorder, a digital picture player, a digital video recorder, a digital video player, a storage configuring a data center, a device capable of transmitting and receiving information under a wireless environment, one of various electronic devices configuring a home network, one of various electronic devices configuring a computer network, one of various electronic devices configuring a telematics network, an RFID (radio frequency identification) device, or one of various component elements configuring a computing system.</p><p id="p-0041" num="0040">The memory device <b>150</b> in the memory system <b>110</b> may maintain stored data even though power is not supplied. In particular, the memory device <b>150</b> in the memory system <b>110</b> stores data provided from the host <b>102</b>, through a write operation, and provides stored data to the host <b>102</b>, through a read operation. The memory device <b>150</b> includes a plurality of memory blocks <b>152</b>, <b>154</b> and <b>156</b>. Each of the memory blocks <b>152</b>, <b>154</b> and <b>156</b> includes a plurality of pages. Each of the pages includes a plurality of memory cells to which a plurality of word lines (WL) are coupled. Also, the memory device <b>150</b> includes a plurality of planes each of which includes the plurality of memory blocks <b>152</b>, <b>154</b> and <b>156</b>. In particular, the memory device <b>150</b> may include a plurality of memory dies each of which includes a plurality of planes. The memory device <b>150</b> may be a nonvolatile memory device, for example, a flash memory, and the flash memory may have a 3D stack structure.</p><p id="p-0042" num="0041">Since detailed descriptions will be made below with reference to <figref idref="DRAWINGS">FIGS. <b>2</b> to <b>4</b></figref> for the structure of the memory device <b>150</b> and the 3-dimensional stack structure of the memory device <b>150</b> and detailed descriptions will be made below with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref> for a plurality of planes each including the plurality of memory blocks <b>152</b>, <b>154</b> and <b>156</b>, a plurality of memory dies each including a plurality of planes and the memory device <b>150</b> including the plurality of memory dies, further descriptions thereof will be omitted herein.</p><p id="p-0043" num="0042">The controller <b>130</b> in the memory system <b>110</b> controls the memory device <b>150</b> in response to a request from the host <b>102</b>. For example, the controller <b>130</b> provides the data read from the memory device <b>150</b>, to the host <b>102</b>, and stores the data provided from the host <b>102</b>, in the memory device <b>150</b>. To this end, the controller <b>130</b> controls the operations of the memory device <b>150</b>, such as read, write, program, and erase operations.</p><p id="p-0044" num="0043">In detail, the controller <b>130</b> includes a host interface unit (Host I/F) <b>132</b>, a processor (Processor) <b>134</b>, an error correction code unit (ECC) <b>138</b>, a power management unit (PMU) <b>140</b>, a memory interface unit (Memory I/F) <b>142</b> and a memory <b>144</b>.</p><p id="p-0045" num="0044">The host interface unit <b>132</b> processes the commands and data of the host <b>102</b>, and may be configured to communicate with the host <b>102</b> through at least one of various communication standards or interfaces such as universal serial bus (USB), multimedia card (MMC), peripheral component interconnect-express (PCI-e or PCIe), serial attached SCSI (SAS), serial advanced technology attachment (SATA), parallel advanced technology attachment (PATA), small computer system interface (SCSI), enhanced small disk interface (ESDI), integrated drive electronics (IDE) and MIPI (mobile industry processor interface). The host interface unit <b>32</b> may be driven through firmware which is referred to as a host interface layer (HIL), and is a region which exchanges data with the host <b>102</b>.</p><p id="p-0046" num="0045">The ECC unit <b>138</b> may correct an error bit of the data processed in the memory device <b>150</b>, and may include an ECC encoder and an ECC decoder. The ECC encoder may error correct-encode data to be programmed in the memory device <b>150</b> and generate data added with parity bits. The data added with parity bits may be stored in the memory device <b>150</b>. The ECC decoder detects and corrects an error included in data read from the memory device <b>150</b>, in the case of reading data stored in the memory device <b>150</b>. That is, after performing error correction decoding for data read from the memory device <b>150</b>, the ECC unit <b>138</b> may determine whether the error correction decoding has succeeded, may output an indication signal depending on a determination result, for example, an error correction success/failure signal, and may correct an error bit of the read data by using the parity bits generated in the ECC encoding process. The ECC unit <b>138</b> cannot correct error bits when the number of occurred error bits is equal to or greater than a correctable error bit limit, and may output an error correction failure signal corresponding to the incapability of correcting error bits.</p><p id="p-0047" num="0046">The ECC unit <b>138</b> may perform error correction by using, but not limited to, an LDPC (low density parity check) code, a BCH (Bose, Chaudhuri, Hocquenghem) code, a turbo code, a Reed-Solomon code, a convolution code, an RSC (recursive systematic code), or a coded modulation such as a TCM (trellis-coded modulation) or a BCM (block coded modulation). The ECC unit <b>138</b> may include a circuit, a module, a system or a device for error correction.</p><p id="p-0048" num="0047">The PMU <b>140</b> provides and manages power for the controller <b>130</b>, that is, power for the components included in the controller <b>130</b>.</p><p id="p-0049" num="0048">The memory interface unit <b>142</b> serves as a memory/storage interface which performs interfacing between the controller <b>130</b> and the memory device <b>150</b>, to allow the controller <b>130</b> to control the memory device <b>150</b> in response to a request from the host <b>102</b>. The memory interface unit <b>142</b> generates control signals for the memory device <b>150</b> and processes data according to the control of the processor <b>134</b>, as a NAND flash controller (NFC) in the case where the memory device <b>150</b> is a flash memory, in particular, in the case where the memory device <b>150</b> is a NAND flash memory. The memory interface unit <b>142</b> may support the operation of an interface which processes a command and data between the controller <b>130</b> and the memory device <b>150</b>, for example, a NAND flash interface, in particular, data input/output between the controller <b>130</b> and the memory device <b>150</b>, and may be driven through a firmware referred to as a flash interface layer (FIL) being a region which exchanges data with the memory device <b>150</b>.</p><p id="p-0050" num="0049">The memory <b>144</b>, as the working memory of the memory system <b>110</b> and the controller <b>130</b>, stores data for driving of the memory system <b>110</b> and the controller <b>130</b>. In detail, in the case where the controller <b>130</b> controls the memory device <b>150</b> in response to a request from the host <b>102</b>, for example, in the case where the controller <b>130</b> provides the data read from the memory device <b>150</b>, to the host <b>102</b>, and stores the data provided from the host <b>102</b>, in the memory device <b>150</b>, and, to this end, in the case where the controller <b>130</b> controls the operations of the memory device <b>150</b>, such as read, write, program and erase operations, the memory <b>144</b> stores data needed to allow such operations to be performed by the memory system <b>110</b>, that is, between the controller <b>130</b> and the memory device <b>150</b>.</p><p id="p-0051" num="0050">The memory <b>144</b> may be implemented by a volatile memory. For example, the memory <b>1441</b> may be implemented by a static random access memory (SRAM) or a dynamic random access memory (DRAM). Furthermore, the memory <b>144</b> may exist inside the controller <b>130</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Alternatively, the memory <b>144</b> may exist outside the controller <b>130</b>, and in this regard, may be implemented as an external volatile memory to and from which data are inputted and outputted from and to the controller <b>130</b> through a memory interface.</p><p id="p-0052" num="0051">As described above, the memory <b>144</b> stores data needed to perform data read and write operations between the host <b>102</b> and the memory device <b>150</b> and data when performing the data read and write operations. For such data storage, the memory <b>144</b> includes a program memory, a data memory, a write buffer/cache, a read buffer/cache, a data buffer/cache, a map buffer/cache, and so forth.</p><p id="p-0053" num="0052">The processor <b>134</b> controls the general operations of the memory system <b>110</b>, and particularly, controls a program operation or a read operation for the memory device <b>150</b>, in response to a write request or a read request from the host <b>102</b>. The processor <b>134</b> drives a firmware which is referred to as a flash translation layer (FTL), to control general operations of the memory system <b>110</b>. The processor <b>134</b> may be implemented by a microprocessor or a central processing unit (CPU).</p><p id="p-0054" num="0053">For instance, the controller <b>130</b> performs an operation requested from the host <b>102</b>, in the memory device <b>150</b>, that is, performs a command operation corresponding to a command received from the host <b>102</b>, with the memory device <b>150</b>, through the processor <b>134</b> implemented by a microprocessor or a central processing unit (CPU). The controller <b>130</b> may perform a foreground operation as a command operation corresponding to a command received from the host <b>102</b>, for example, a program operation corresponding to a write command, a read operation corresponding to a read command, an erase operation corresponding to an erase command or a parameter set operation corresponding to a set parameter command or a set feature command as a set command.</p><p id="p-0055" num="0054">The controller <b>130</b> may also perform a background operation for the memory device <b>150</b>, through the processor <b>134</b> implemented by a microprocessor or a central processing unit (CPU). The background operation for the memory device <b>150</b> includes an operation of copying the data stored in a certain memory block among the memory blocks <b>152</b>, <b>154</b> and <b>156</b> of the memory device <b>150</b>, to another certain memory block, for example, a garbage collection (GC) operation, an operation of swapping the memory blocks <b>152</b>, <b>154</b> and <b>156</b> of the memory device <b>150</b> or the data stored in the memory blocks <b>152</b>, <b>154</b> and <b>156</b>, for example, a wear leveling (WL) operation, an operation of storing the map data stored in the controller <b>130</b>, in the memory blocks <b>152</b>, <b>154</b> and <b>156</b> of the memory device <b>150</b>, for example, a map flush operation, or an operation of performing bad block management for the memory device <b>150</b>, for example, a bad block management operation of checking and processing a bad block in the plurality of memory blocks <b>152</b>, <b>154</b> and <b>156</b> included in the memory device <b>150</b>.</p><p id="p-0056" num="0055">Also, in a memory system in accordance with an embodiment of the present disclosure, for instance, in the case where the controller <b>130</b> performs a plurality of command operations corresponding to a plurality of commands received from the host <b>102</b>, for example, a plurality of program operations corresponding to a plurality of write commands, a plurality of read operations corresponding to a plurality of read commands and a plurality of erase operations corresponding to a plurality of erase commands, in the memory device <b>150</b>, best channels (or ways) are decided among a plurality of channels (or ways) coupled with a plurality of memory dies included in the memory device <b>150</b>, the commands received from the host <b>102</b> are transmitted to corresponding memory dies through the best channels (or ways), performance results of the command operations are received through the best channels (or ways) from the memory dies in which the command operations corresponding to the commands are performed, and the performance results of the command operations are provided to the host <b>102</b>. In particular, in the memory system in accordance with an embodiment of the present disclosure, in the case where a plurality of commands are received from the host <b>102</b>, after checking the states of a plurality of channels (or ways) coupled with the memory dies of the memory device <b>150</b>, best transmission channels (or transmission ways) are decided which correspond to the states of the channels (or ways), and the plurality of commands received from the host <b>102</b> are transmitted to corresponding memory dies through the best transmission channels (or transmission ways). Moreover, in the memory system in accordance with an embodiment of the present disclosure, after performing command operations corresponding to the plurality of commands received from the host <b>102</b>, in the memory dies of the memory device <b>150</b>, performance results of the command operations are received from the memory dies of the memory device <b>150</b> through best reception channels (or reception ways) corresponding to the states of channels (or ways) among the plurality of channels (or ways) coupled with the memory dies of the memory device <b>150</b>. The performance results received from the memory dies of the memory device <b>150</b> are provided to the host <b>102</b> as responses to the plurality of commands received from the host <b>102</b>.</p><p id="p-0057" num="0056">After checking the states of the plurality of channels (or ways) coupled with the plurality of memory dies included in the memory device <b>150</b>, for example, a busy state, a ready state, an active state, an idle state, a normal state or an abnormal state of the channels (or ways), the controller <b>130</b> transmits the plurality of commands received from the host <b>102</b>, to the corresponding memory dies through the best channels (or ways) according to the states of the channels (or ways), that is, requests performing of the command operations corresponding to the plurality of commands received from the host <b>102</b>, to the corresponding memory dies through the best transmission channels (or transmission ways). In response to the request for performing of the command operations through the best transmission channels (or transmission ways), the controller <b>130</b> receives the performance results of the command operations from the corresponding memory dies. In this regard, the controller <b>130</b> receives the performance results of the command operations through the best channels (or ways) according to the states of the channels (or ways), that is, the best reception channels (or reception ways). The controller <b>130</b> matches the descriptors of the commands transmitted through the best transmission channels (or transmission ways) and the descriptors of the performance results received through the best reception channels (or reception ways), and then, provides the performance results of the command operations corresponding to the commands received from the host <b>102</b>, to the host <b>102</b>.</p><p id="p-0058" num="0057">In the descriptors of the commands, there may be included data information or position information corresponding to the commands, for example, the addresses of data corresponding to write commands or read commands (for instance, logical page numbers of data) or the addresses of positions where data are stored (for instance, the physical page information of the memory device <b>150</b>), etc. and indication information of transmission channels (or transmission ways) through which the commands are transmitted, for example, the identifiers (for example, channel numbers (or way numbers)) of the transmission channels (or the transmission ways), etc. In the descriptors of the performance results, there may be included data information or position information corresponding to the performance results, for example, the addresses for the data of program operations corresponding to write commands or the data of read operations corresponding to read commands (for instance, logical page numbers for data) or the addresses of positions where the program operations or the read operations are performed (for instance, the physical page information of the memory device <b>150</b>), etc. and indication information of channels (or ways) through which command operations are requested, that is, transmission channels (or transmission ways) through which the commands are transmitted, for example, the identifiers (for example, channel numbers (or way numbers)) of the transmission channels (or the transmission ways), etc. The information included in the descriptors of the commands and the descriptors of the performance results, for example, the data information, the position information or the indication information of the channels (or the ways), may be included in the descriptors in the form of contexts or tags.</p><p id="p-0059" num="0058">That is, in the memory system <b>110</b> in accordance with an embodiment of the present disclosure, the plurality of commands received from the host <b>102</b> and the performance results of the plurality of command operations corresponding to the commands are transmitted and received through the best channels (or ways) among the plurality of channels (or ways) coupled with the memory dies of the memory device <b>150</b>. In particular, in the memory system <b>110</b> in accordance with an embodiment of the present disclosure, in correspondence to the states of the plurality of channels (or ways) coupled with the memory dies of the memory device <b>150</b>, the transmission channels (or transmission ways) through which the commands are to be transmitted to the memory dies of the memory device <b>150</b> and the reception channels (or reception ways) through which the performance results of the command operations are to be received from the memory dies of the memory device <b>150</b> are managed independently of each other. For example, the controller <b>130</b> in the memory system <b>110</b> decides a transmission channel (or transmission way) through which a first command is transmitted and a reception channel (or reception way) through which a performance result of a first command operation corresponding to the first command is received, as best channels (or ways) which are independent of each other, among the plurality of channels (or ways), in correspondence to the states of the plurality of channels (or ways). For instance, the transmission channel (or transmission way) is decided as a first best channel (or way) and the reception channel (or reception way) is decided as the first best channel (or way) or a second best channel (or way), and then, transmission of the first command and reception of the performance result of the first command operation are respectively performed through the best channels (or ways) which are independent of each other.</p><p id="p-0060" num="0059">Therefore, in the memory system <b>110</b> in accordance with an embodiment of the present disclosure, the plurality of channels (or ways) coupled with the plurality of memory dies of the memory device <b>150</b> may be used efficiently. In particular, since the plurality of commands received from the host <b>102</b> and the performance results of the command operations corresponding to the commands are respectively transmitted and received through the best channels (or ways) which are independent of each other, the operational performance of the memory system <b>110</b> may be improved. While it will be described as an example in an embodiment of the present disclosure for the sake of convenience in description that the plurality of commands received from the host <b>102</b> and the performance results of the command operations corresponding to the commands are transmitted and received through the plurality of channels (or ways) for the memory dies included in the memory device <b>150</b> of the memory system <b>110</b>, it is to be noted that the same principle may be applied even in the case where, in a plurality of memory systems each including the controller <b>130</b> and the memory device <b>150</b>, a plurality of commands received from the host <b>102</b> and performance results after performing command operations corresponding to the commands in the respective memory systems are transmitted and received through a plurality of channels (or ways) for the respective memory systems.</p><p id="p-0061" num="0060">Hereinbelow, a memory device in the memory system in accordance with an embodiment of the present disclosure will be described in detail with reference to <figref idref="DRAWINGS">FIGS. <b>2</b> to <b>4</b></figref>.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram schematically illustrating an example of a memory device in accordance with an embodiment of the present disclosure, <figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram schematically illustrating a memory cell array circuit of memory blocks in the memory device in accordance with an embodiment of the present disclosure, and <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram schematically illustrating the structure of the memory device in the memory system in accordance with an embodiment of the present disclosure. <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram schematically illustrating a structure in the case where the memory device is implemented as a 3-dimensional nonvolatile memory device.</p><p id="p-0063" num="0062">First, referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the memory device <b>150</b> includes a plurality of memory blocks, for example, a zeroth block (BLOCK0) <b>210</b>, a first block (BLOCK1) <b>220</b>, a second block (BLOCK2) <b>230</b> and an (N&#x2212;1)th block (BLOCKN&#x2212;1) <b>240</b>. Each of the blocks <b>210</b>, <b>220</b>, <b>230</b> and <b>240</b> includes a plurality of pages, for example, 2<sup>M </sup>number of pages (2<sup>M </sup>PAGES). While it is described for the sake of convenience in description that each of the plurality of memory blocks includes 2<sup>M </sup>number of pages, it is to be noted that each of the plurality of memory blocks may include M number of pages. Each of the pages includes a plurality of memory cells to which a plurality of word lines (WL) are coupled.</p><p id="p-0064" num="0063">Also, depending on the number of bits capable of storing or expressing the plurality of memory blocks in one memory cell, the memory device <b>150</b> may include a single level cell (SLC) memory block including a plurality of pages implemented by memory cells each storing 1-bit data, a multi-level cell (MLC) memory block including a plurality of pages implemented by memory cells each capable of storing 2-bit data, a triple level cell (TLC) memory block including a plurality of pages implemented by memory cells each capable of storing 3-bit data, a quadruple level cell (QLC) memory block including a plurality of pages implemented by memory cells each capable of storing 4-bit data, a multiple level cell memory block including a plurality of pages implemented by memory cells each capable of storing 5 or more-bit data, or the like.</p><p id="p-0065" num="0064">The memory device <b>150</b> may store a larger amount of data in the multiple level cell memory block than in the single level cell memory block. However, the memory device <b>150</b> may more quickly process data by using the single level cell memory block than by using the multiple level cell memory block. That is, the single level cell memory block and the multiple level cell memory block have different advantages and disadvantages from each other. Because of this fact, when rapid data processing is required, the processor <b>134</b> may control the memory device <b>150</b> such that the memory device <b>150</b> programs data to the single level cell memory block. On the other hand, when a large amount of storage space is required, the processor <b>134</b> may control the memory device <b>150</b> such that the memory device <b>150</b> programs data to the multiple level cell memory block. As a result, according to a situation, the processor <b>134</b> may decide the type of a memory block in which data is to be stored.</p><p id="p-0066" num="0065">While it is described below as an example for the sake of convenience in description that the memory device <b>150</b> is implemented by a nonvolatile memory such as a flash memory, for example, a NAND flash memory, it is to be noted that the memory device <b>150</b> may be implemented as any memory among memories such as a phase change memory or phase change random access memory (PCRAM), a resistive memory or resistive random access memory (RRAM or ReRAM), a ferroelectric memory or ferroelectric random access memory (FRAM) and a spin transfer torque magnetic memory or spin transfer torque magnetic random access memory (SU-RAM or STT-MRAM).</p><p id="p-0067" num="0066">Each of the memory blocks <b>210</b>, <b>220</b>, <b>230</b> and <b>240</b> stores the data provided from the host device <b>102</b>, through a program operation, and provides stored data to the host <b>102</b>, through a read operation.</p><p id="p-0068" num="0067">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a plurality of memory blocks included in the memory device <b>150</b> of the memory system <b>110</b> may be implemented as a memory cell array <b>330</b>, and thereby, may include a plurality of cell strings <b>340</b> which are coupled to bit lines BL0 to BLm&#x2212;1, respectively. The cell string <b>340</b> of each column may include at least one drain select transistor DST and at least one source select transistor SST. A plurality of memory cells or memory cell transistors MC0 to MCn&#x2212;1 may be coupled in series between the select transistors DST and SST. The respective memory cells MC0 to MCn&#x2212;1 may be configured by multi-level cells (MLC) each of which stores data information of a plurality of bits. The cell strings <b>340</b> may be electrically coupled to the corresponding bit lines BL0 to BLm&#x2212;1, respectively.</p><p id="p-0069" num="0068">While <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates, as an example, each memory cell array <b>330</b> which is configured by NAND flash memory cells, it is to be noted that the plurality of memory blocks included in the memory device <b>150</b> in accordance with an embodiment of the present disclosure are not limited to a NAND flash memory and may be implemented by a NOR flash memory, a hybrid flash memory in which at least two types of memory cells are combined or a one-NAND flash memory in which a controller is built into a memory chip.</p><p id="p-0070" num="0069">A voltage supply <b>310</b> of the memory device <b>150</b> may provide word line voltages (for example, a program voltage, a read voltage and a pass voltage) to be supplied to respective word lines depending on an operation mode and a voltage to be supplied to a bulk (for example, a well region) where memory cells are formed. The voltage generating operation of the voltage supply <b>310</b> may be performed under the control of a control circuit (not illustrated). The voltage supply <b>310</b> may generate a plurality of variable read voltages to generate a plurality of read data, select one among the memory blocks (or sectors) of a memory cell array in response to the control of the control circuit, select one among the word lines of the selected memory block, and provide word line voltages to the selected word line and unselected word lines.</p><p id="p-0071" num="0070">A read/write circuit <b>320</b> of the memory device <b>150</b> is controlled by the control circuit, and may operate as a sense amplifier or a write driver according to an operation mode. For example, in the case of a verify/normal read operation, the read/write circuit <b>320</b> may operate as a sense amplifier for reading data from the memory cell array. Also, in the case of a program operation, the read/write circuit <b>320</b> may operate as a write driver which drives bit lines according to data to be stored in the memory cell array. In the program operation, the read/write circuit <b>320</b> may receive data to be written in the memory cell array, from a buffer (not illustrated), and may drive the bit lines according to inputted data. To this end, the read/write circuit <b>320</b> may include a plurality of page buffers (PB) <b>322</b>, <b>324</b> and <b>326</b> respectively corresponding to columns (or bit lines) or pairs of columns (or pairs of bit lines), and a plurality of latches (not illustrated) may be included in each of the page buffers <b>322</b>, <b>324</b> and <b>326</b>.</p><p id="p-0072" num="0071">Also, the memory device <b>150</b> may be implemented as a two-dimensional or three-dimensional memory device. In particular, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the memory device <b>150</b> may be implemented as a nonvolatile memory device with a three-dimensional stack structure. In the case where the memory device <b>150</b> is implemented as a three-dimensional structure, the memory device <b>150</b> may include a plurality of memory blocks BLK0 to BLKN&#x2212;1. <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating the memory blocks of the memory device <b>150</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and each of the memory blocks may be implemented as a three-dimensional structure (or a vertical structure). For example, the respective memory blocks may be implemented as a three-dimensional structure by including a structure which extends in first to third directions, for example, an x-axis direction, a y-axis direction and a z-axis direction.</p><p id="p-0073" num="0072">Each memory cell array <b>330</b> included in the memory device <b>150</b> may include a plurality of NAND strings NS which extend in the second direction. The plurality of NAND strings NS may be provided in the first direction and the third direction. Each NAND string NS may be coupled to a bit line BL, at least one string select line SSL, at least one ground select line GSL, a plurality of word lines WL, at least one dummy word line DWL and a common source line CSL, and may include a plurality of transistor structures TS.</p><p id="p-0074" num="0073">Namely, among the plurality of memory blocks of the memory device <b>150</b>, each memory cell array <b>330</b> may be coupled to a plurality of bit lines BL, a plurality of string select lines SSL, a plurality of ground select lines GSL, a plurality of word lines WL, a plurality of dummy word lines DWL and a plurality of common source lines CSL, and accordingly, may include a plurality of NAND strings NS. Also, in each memory cell array <b>330</b>, a plurality of NAND strings NS may be coupled to one bit line BL, and thereby, a plurality of transistors may be implemented in one NAND string NS. The string select transistor SST of each NAND string NS may be coupled with a corresponding bit line BL, and the ground select transistor GST of each NAND string NS may be coupled with the common source line CSL. Memory cells MC may be provided between the string select transistor SST and the ground select transistor GST of each NAND string NS. Namely, in each memory cell array <b>330</b> of the plurality of memory blocks of the memory device <b>150</b>, a plurality of memory cells may be implemented.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram schematically illustrating an example of a case where a plurality of command operations corresponding to a plurality of commands are performed in the memory system in accordance with an embodiment of the present disclosure.</p><p id="p-0076" num="0075">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the memory device <b>150</b> includes a plurality of memory dies, for example, a memory die 0 <b>610</b>, a memory die 1 <b>630</b>, a memory die 2 <b>650</b> and a memory die 3 <b>670</b>. Each of the memory dies <b>610</b>, <b>630</b>, <b>650</b> and <b>670</b> includes a plurality of planes. For example, the memory die 0 <b>610</b> includes a plane 0 <b>612</b>, a plane 1 <b>616</b>, a plane 2 <b>620</b> and a plane 3 <b>624</b>, the memory die 1 <b>630</b> includes a plane 0 <b>632</b>, a plane 1 <b>636</b>, a plane 2 <b>640</b> and a plane 3 <b>644</b>, the memory die 2 <b>650</b> includes a plane 0 <b>652</b>, a plane 1 <b>656</b>, a plane 2 <b>660</b> and a plane 3 <b>664</b>, and the memory die 3 <b>670</b> includes a plane 0 <b>672</b>, a plane 1 <b>676</b>, a plane 2 <b>680</b> and a plane 3 <b>684</b>. The respective planes <b>612</b>, <b>616</b>, <b>620</b>, <b>624</b>, <b>632</b>, <b>636</b>, <b>640</b>, <b>644</b>, <b>652</b>, <b>656</b>, <b>660</b>, <b>664</b>, <b>672</b>, <b>676</b>, <b>680</b> and <b>684</b> in the memory dies <b>610</b>, <b>630</b>, <b>650</b> and <b>670</b> included in the memory device <b>150</b> include a plurality of memory blocks <b>614</b>, <b>618</b>, <b>622</b>, <b>626</b>, <b>634</b>, <b>638</b>, <b>642</b>, <b>646</b>, <b>654</b>, <b>658</b>, <b>662</b>, <b>666</b>, <b>674</b>, <b>678</b>, <b>682</b> and <b>686</b>, for example, N number of blocks Block0, Block1, . . . and BlockN&#x2212;1 each including a plurality of pages, for example, 2<sup>M </sup>number of pages, as described above with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Moreover, the memory device <b>150</b> includes a plurality of buffers corresponding to the respective memory dies <b>610</b>, <b>630</b>, <b>650</b> and <b>670</b>, for example, a buffer 0 <b>628</b> corresponding to the memory die 0 <b>610</b>, a buffer 1 <b>648</b> corresponding to the memory die 1 <b>630</b>, a buffer 2 <b>668</b> corresponding to the memory die 2 <b>650</b>, and a buffer 3 <b>688</b> corresponding to the memory die 3 <b>670</b>.</p><p id="p-0077" num="0076">In the case of performing command operations corresponding to a plurality of commands received from the host <b>102</b>, data corresponding to the command operations are stored in the buffers <b>628</b>, <b>648</b>, <b>668</b> and <b>688</b> included in the memory device <b>150</b>. For example, in the case of performing program operations, data corresponding to the program operations are stored in the buffers <b>628</b>, <b>648</b>, <b>668</b> and <b>688</b>, and are then stored in the pages included in the memory blocks of the memory dies <b>610</b>, <b>630</b>, <b>650</b> and <b>670</b>. In the case of performing read operations, data corresponding to the read operations are read from the pages included in the memory blocks of the memory dies <b>610</b>, <b>630</b>, <b>650</b> and <b>670</b>, are stored in the buffers <b>628</b>, <b>648</b>, <b>668</b> and <b>688</b>, and are then provided to the host <b>102</b> through the controller <b>130</b>.</p><p id="p-0078" num="0077">In an embodiment of the present disclosure, while it will be described below as an example for the sake of convenience in description that the buffers <b>628</b>, <b>648</b>, <b>668</b> and <b>688</b> included in the memory device <b>150</b> exist outside the respective corresponding memory dies <b>610</b>, <b>630</b>, <b>650</b> and <b>670</b>, it is to be noted that the buffers <b>628</b>, <b>648</b>, <b>668</b> and <b>688</b> may exist inside the respective corresponding memory dies <b>610</b>, <b>630</b>, <b>650</b> and <b>670</b>, and it is to be noted that the buffers <b>628</b>, <b>648</b>, <b>668</b> and <b>688</b> may correspond to the respective planes <b>612</b>, <b>616</b>, <b>620</b>, <b>624</b>, <b>632</b>, <b>636</b>, <b>640</b>, <b>644</b>, <b>652</b>, <b>656</b>, <b>660</b>, <b>664</b>, <b>672</b>, <b>676</b>, <b>680</b> and <b>684</b> or the respective memory blocks <b>614</b>, <b>618</b>, <b>622</b>, <b>626</b>, <b>634</b>, <b>638</b>, <b>642</b>, <b>646</b>, <b>654</b>, <b>658</b>, <b>662</b>, <b>666</b>, <b>674</b>, <b>678</b>, <b>682</b> and <b>686</b> in the respective memory dies <b>610</b>, <b>630</b>, <b>650</b> and <b>670</b>. Further, in an embodiment of the present disclosure, while it will be described below as an example for the sake of convenience in description that the buffers <b>628</b>, <b>648</b>, <b>668</b> and <b>688</b> included in the memory device <b>150</b> are the plurality of page buffers <b>322</b>, <b>324</b> and <b>326</b> included in the memory device <b>150</b> as described above with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, it is to be noted that the buffers <b>628</b>, <b>648</b>, <b>668</b> and <b>688</b> may be a plurality of caches or a plurality of registers included in the memory device <b>150</b>.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating the concept of a super memory block used in the memory system in accordance with an embodiment of the present disclosure.</p><p id="p-0080" num="0079">Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, it may be seen that the components included in the memory device <b>150</b> among the components of the memory system <b>110</b> in accordance with the embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are illustrated in detail.</p><p id="p-0081" num="0080">The memory device <b>150</b> includes a plurality of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N, BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N, BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N, and BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N.</p><p id="p-0082" num="0081">The memory device <b>150</b> includes a zeroth memory die DIE0 capable of inputting/outputting data through a zeroth channel CH0 and a first memory die DIE1 capable of inputting/outputting data through a first channel CH1. The zeroth channel CH0 and the first channel CH1 may input/output data in an interleaving scheme.</p><p id="p-0083" num="0082">The zeroth memory die DIE0 includes a plurality of planes PLANE00 and PLANE01 respectively corresponding to a plurality of ways WAY0 and WAY1 capable of inputting/outputting data in the interleaving scheme by sharing the zeroth channel CH0.</p><p id="p-0084" num="0083">The first memory die DIE1 includes a plurality of planes PLANE10 and PLANE11 respectively corresponding to a plurality of ways WAY2 and WAY3 capable of inputting/outputting data in the interleaving scheme by sharing the first channel CH1.</p><p id="p-0085" num="0084">The first plane PLANE00 of the zeroth memory die DIE0 includes a predetermined number of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N among the plurality of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N, BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N, BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N, and BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N.</p><p id="p-0086" num="0085">The second plane PLANE01 of the zeroth memory die DIE0 includes the predetermined number of memory blocks BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N among the plurality of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N, BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N, BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N, and BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N.</p><p id="p-0087" num="0086">The first plane PLANE10 of the first memory die DIE1 includes the predetermined number of memory blocks BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N among the plurality of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N, BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N, BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N, and BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N.</p><p id="p-0088" num="0087">The second plane PLANE11 of the first memory die DIE1 includes the predetermined number of memory blocks BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N among the plurality of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N, BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N, BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N, and BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N.</p><p id="p-0089" num="0088">In this manner, the plurality of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N, BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N, BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N, and BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N included in the memory device <b>150</b> may be divided according to physical positions such as using the same ways or the same channels.</p><p id="p-0090" num="0089">For reference, while it is illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> that two memory dies DIE0 and DIE1 are included in the memory device <b>150</b>, two planes PLANE00 and PLANE01/PLANE10 and PLAN Eli are included in each of the memory dies DIE0 and DIE1 and a predetermined number of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N/BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N/BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N/BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N are included in each of the planes PLANE00, PLANE01, PLANE10 and PLANE11, it is to be noted that this is an example. According to a designer's choice, a number of memory dies that is larger or smaller than two may be included in the memory device <b>150</b>, and a number of planes that is larger or smaller than two may be included in each memory die. Of course, the predetermined number as the number of memory blocks included in each plane may be adjusted variously according to a designer's choice.</p><p id="p-0091" num="0090">Moreover, different from the scheme of dividing the plurality of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N, BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N, BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N, and BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N included in the memory device <b>150</b> according to physical positions such as the plurality of memory dies DIE0 and DIE1 or the plurality of planes PLANE00, PLANE01, PLANE10 and PLANE11, the controller <b>130</b> may use a scheme of dividing a plurality of memory blocks according to simultaneous selection and operation of memory blocks. That is, the controller <b>130</b> may manage a plurality of memory blocks which are divided into different dies or different planes through the dividing scheme according to physical positions, by grouping memory blocks capable of being simultaneously selected among the plurality of memory blocks and thereby dividing the plurality of memory blocks into super memory blocks. In this regard, &#x2018;being simultaneously selected&#x2019; may mean &#x2018;being selected in parallel.&#x2019;</p><p id="p-0092" num="0091">The scheme of grouping, in this manner, the plurality of memory blocks BLOCK000, BLOCK001, BLOCK002, . . . and BLOCK00N, BLOCK010, BLOCK011, BLOCK012, . . . and BLOCK01N, BLOCK100, BLOCK101, BLOCK102, . . . and BLOCK10N, and BLOCK110, BLOCK111, BLOCK112, . . . and BLOCK11N into super memory blocks by the controller <b>130</b> may be divided into various schemes according to a designer's choice, and three schemes will be described herein.</p><p id="p-0093" num="0092">A first scheme is to manage one super memory block A1 by grouping, by the controller <b>130</b>, one optional memory block BLOCK000 in the first plane PLANE00 and one optional memory block BLOCK010 in the second plane PLANE01 of the zeroth memory die DIE0 between the plurality of memory dies DIE0 and DIE1 included in the memory device <b>150</b>. When applying the first scheme to the first memory die DIE1 between the plurality of memory dies DIE0 and DIE1 included in the memory device <b>150</b>, the controller <b>130</b> may manage one super memory block A2 by grouping one optional memory block BLOCK100 in the first plane PLANE10 and one optional memory block BLOCK110 in the second plane PLANE11 of the first memory die DIE1.</p><p id="p-0094" num="0093">A second scheme is to manage one super memory block B1 by grouping, by the controller <b>130</b>, one optional memory block BLOCK002 included in the first plane PLANE00 of the zeroth memory die DIE0 between the plurality of memory dies DIE0 and DIE1 included in the memory device <b>150</b> and one optional memory block BLOCK102 included in the first plane PLANE10 of the first memory die DIE1. When applying the second scheme again, the controller <b>130</b> may manage one super memory block B2 by grouping one optional memory block BLOCK012 included in the second plane PLANE01 of the zeroth memory die DIE0 between the plurality of memory dies DIE0 and DIE1 included in the memory device <b>150</b> and one optional memory block BLOCK112 included in the second plane PLANE11 of the first memory die DIE1.</p><p id="p-0095" num="0094">A third scheme is to manage one super memory block C by grouping, by the controller <b>130</b>, one optional memory block BLOCK001 included in the first plane PLANE00 of the zeroth memory die DIE0 between the plurality of memory dies DIE0 and DIE1 included in the memory device <b>150</b>, one optional memory block BLOCK011 included in the second plane PLANE01 of the zeroth memory die DIE0, one optional memory block BLOCK101 included in the first plane PLANE10 of the first memory die DIE1 and one optional memory block BLOCK111 included in the second plane PLANE11 of the first memory die DIE1.</p><p id="p-0096" num="0095">For reference, memory blocks capable of being simultaneously selected by being included in a super memory block may be substantially simultaneously selected through an interleaving scheme, for example, a channel interleaving scheme, a memory die interleaving scheme, a memory chip interleaving scheme or a way interleaving scheme.</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating a data processing system in accordance with an embodiment of the present disclosure in which Zoned Namespace technology is implemented. Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a data processing system <b>100</b> includes a host <b>102</b> and a memory system <b>110</b>. Since components included in the host <b>102</b> and the memory system <b>110</b> are the same as those described above, description thereof will be omitted herein.</p><p id="p-0098" num="0097">At least some of the plurality of memory blocks included in the memory device <b>150</b> may be allocated as Namespaces (hereinafter, referred to as Zoned Namespaces (ZNS)) which are divided into the units of zones.</p><p id="p-0099" num="0098">The Zoned Namespaces (ZNS) refer to the use of namespaces which are divided into the units of zones. The namespace may mean an amount (storage space) of a nonvolatile memory which may be formatted as a logical block. In a memory system to which the Zoned Namespace technology is applied, a data input/output operation may be performed differently from that of a general nonvolatile memory system.</p><p id="p-0100" num="0099">For example, as illustrated in the drawing, a plurality of applications APPL1, APPL2 and APPL3 are being executed in the host <b>102</b> and the plurality of applications APPL1, APPL2 and APPL3 loaded in the memory <b>106</b> generate data and store the generated data in the memory system <b>110</b>. The memory <b>106</b> may include a command queue <b>107</b> which queues a command to be processed by the processor <b>105</b>. The command queue <b>107</b> may include a command which controls the memory device <b>150</b>. For example, the command queue <b>107</b> may include commands such as read, program, erase, and status checking commands.</p><p id="p-0101" num="0100">A general nonvolatile memory system sequentially stores data, inputted from the host <b>102</b> which is coupled to the memory system, in the memory device <b>150</b>. The data generated by the plurality of applications APPL1, APPL2 and APPL3 may be stored without distinction in the memory device <b>150</b> according to the order in which the data are transferred from the host <b>102</b> to the memory system <b>110</b>. The data generated by the plurality of applications APPL1, APPL2 and APPL3 may be mixedly stored in an open memory block for programming data. In this process, the controller <b>130</b> generates map data capable of linking a logical address inputted from the host <b>102</b> and a physical address indicating a location where data is stored in the memory device <b>150</b>. Thereafter, when the plurality of applications APPL1, APPL2 and APPL3 of the host <b>102</b> request the data stored in the memory system <b>110</b>, the controller <b>130</b> may output the data, requested by the plurality of applications APPL1, APPL2 and APPL3, to the host on the basis of the map data.</p><p id="p-0102" num="0101">In the general nonvolatile memory system, various types of data or data generated by various applications may be mixedly stored in one memory block. In this case, validities (recentness) of the data stored in the memory block may be different from one another and may be difficult to predict. Due to this fact, when garbage collection is performed, a lot of resources may be consumed in identifying valid data or checking whether data is valid. Also, since there may be a plurality of applications which are associated with one memory block, when garbage collection is performed on the corresponding memory block, data input/output operations requested by the plurality of corresponding applications may be delayed. However, the Zoned Namespace (ZNS) technology may solve the problems in the general nonvolatile memory system described above.</p><p id="p-0103" num="0102">In the Zoned Namespace (ZNS) technology, the plurality of applications APPL1, APPL2 and APPL3 executed in the host <b>102</b> may sequentially store data in zones respectively designated thereto. Each zone may include a predetermined space in a logical address system used by the host <b>102</b> and some of the plurality of memory blocks included in the memory device <b>150</b>. Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the memory device <b>150</b> may include a plurality of Zoned Namespaces (ZNS1, ZNS2 and ZNS3) <b>322</b>, <b>324</b> and <b>326</b> corresponding to a plurality of applications (APPL1, APPL2 and APPL3) <b>312</b>, <b>314</b> and <b>316</b>. A first application (APPL1) 312 may store data in a first Zoned Namespace (ZNS1) <b>322</b>, a second application (APPL2) <b>314</b> may store data in a second Zoned Namespace (ZNS2) <b>324</b>, and a third application (APPL3) <b>316</b> may store data in a third Zoned Namespace (ZNS3) <b>326</b>. In this case, since data generated by the first application APPL1 are sequentially stored in memory blocks included in the first Zoned Namespace ZNS1, it is not necessary to check memory blocks included in the other Zoned Namespaces ZNS2 and ZNS3 to check valid data. In addition, until the first Zoned Namespace ZNS1 allocated to the first application APPL1 is short of storage space, it is not necessary to perform garbage collection on the memory blocks allocated to the first Zoned Namespace ZNS1. For this reason, the efficiency of garbage collection for the memory device <b>150</b> may be increased, and the frequency of garbage collection for the memory device <b>150</b> may be decreased. This may result in a decrease in a write amplification factor (WAF) indicating a degree to which the amount of write in the memory device <b>150</b> is amplified, and may increase the lifespan of the memory device <b>150</b>. In the memory system <b>110</b> to which the Zoned Namespace (ZNS) technology is applied, media over-provisioning may be reduced in the memory device <b>150</b>, and the usage rate of the volatile memory <b>144</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) may be decreased.</p><p id="p-0104" num="0103">Also, as the amount of data processing and the amount of data transmission/reception are reduced, it is possible to reduce overhead occurring in the memory system <b>110</b>. Through this, the performance of the data input/output operation of the memory system <b>110</b> may be improved.</p><p id="p-0105" num="0104">According to an embodiment, the plurality of applications APPL1, APPL2 and APPL3 executed in the host <b>102</b> may be allocated with different Zoned Namespaces (ZNS), respectively. In another embodiment, the plurality of respective applications APPL1, APPL2 and APPL3 executed in the host <b>102</b> may use together a specific Zoned Namespace (ZNS). In still another embodiment, each of the plurality of applications APPL1, APPL2 and APPL3 executed in the host <b>102</b> may be allocated with a plurality of Zoned Namespaces (ZNS), and thereby, may use the plurality of allocated Zoned Namespaces (ZNS) corresponding to the characteristics of data to be stored in the memory system <b>110</b>. For example, when the first application APPL1 is allocated with the first Zoned Namespace ZNS1 and the second Zoned Namespace ZNS2, the first application APPL1 may store hot data (e.g., data to which access occurs frequently or whose validity period (update period) is short) in the first Zoned Namespace ZNS1, and may store cold data (e.g., data to which access occurs infrequently or whose validity period (update period) is long) in the second Zoned Namespace ZNS2.</p><p id="p-0106" num="0105">According to an embodiment, the controller <b>130</b> may equally allocate all the memory blocks included in the memory device <b>150</b> to a plurality of Zoned Namespaces. In this case, the plurality of memory blocks allocated to the Zoned Namespaces may include a memory block which stores data and a free memory block which stores no data.</p><p id="p-0107" num="0106">Furthermore, according to an embodiment, the controller <b>130</b> may allocate only some, among all the memory blocks included in the memory device <b>150</b>, corresponding to a storage space required by each Zoned Namespace. When allocation of memory blocks is released according to garbage collection, some of the memory blocks included in the memory device <b>150</b> may be maintained in a state in which they are not allocated to any Zoned Namespace. If necessary, the controller <b>130</b> may additionally allocate an unallocated memory block to a Zoned Namespace according to a request of an external device or in the process of performing an input/output operation.</p><p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating a memory system including a nonvolatile memory device which supports Namespaces divided into the units of zones in accordance with an embodiment of the present disclosure.</p><p id="p-0109" num="0108">Referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the plurality of applications <b>312</b>, <b>314</b> and <b>316</b> executed in the host <b>102</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) may request the controller <b>130</b> to perform a data input/output operation using Zoned Namespaces (ZNS). According to a request from the host <b>102</b> for a memory allocation according to Zoned Namespaces, the controller <b>130</b> may allocate the plurality of memory blocks, included in the memory device <b>150</b>, to the three Zoned Namespaces <b>322</b>, <b>324</b> and <b>326</b> in such a manner that a zone identified in each Zoned Namespace corresponds to the erase unit of the memory device <b>150</b>.</p><p id="p-0110" num="0109">A Zoned Namespace may include one or a plurality of zones.</p><p id="p-0111" num="0110">Each zone identified by the host <b>102</b> may correspond to each erase unit of the memory device <b>150</b>, and the erase unit may be the super block of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0112" num="0111">For example, describing a memory block <b>322</b>_<b>1</b> which is allocated to the first Zoned Namespace <b>322</b>, the memory block <b>322</b>_<b>1</b> may be the erase unit, and may correspond to a first zone zone #0 of the first Zoned Namespace <b>322</b>. The first application (APPL1) <b>312</b> may use the first zone zone #0 of the first Zoned Namespace <b>322</b>, and data associated with the first application (APPL1) <b>312</b> may be sequentially stored in the first zone zone #0. By dividing a Zoned Namespace into a plurality of zones and sequentially storing data in each of the plurality of zones, it is possible to use the memory device <b>150</b> faster and more efficiently, and reduce the difference between the logical address system used by the host <b>102</b> and a physical address system in the memory device <b>150</b>. The first application (APPL1) <b>312</b> may allocate a logical address of the first zone zone #0, set in the first Zoned Namespace <b>322</b>, to generate data in the logical address system. Such data may be sequentially stored in the memory block <b>322</b>_<b>1</b> which is allocated to the first application (APPL1) <b>312</b>.</p><p id="p-0113" num="0112">The plurality of applications <b>312</b>, <b>314</b> and <b>316</b> may use respective zones zone #0, zone #1, zone #2, . . . and zone #n allocated thereto. As described above with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, according to an embodiment, a plurality of zones may be allocated to one application, or a plurality of applications may share one zone. Also, in each of the Zoned Namespaces <b>322</b>, <b>324</b> and <b>326</b>, zones requested by the plurality of applications <b>312</b>, <b>314</b> and <b>316</b> in the logical address system may be allocated in advance. Each of the plurality of applications <b>312</b>, <b>314</b> and <b>316</b> may not use the zones zone #0, zone #1, zone #2, . . . and zone #n which are not allocated thereto. Namely, a logical address which is allocated in advance to a specific zone may not be used by another application which uses another zone. Through this, it is possible to prevent data, generated by various applications, from being mixedly stored in a memory block in a conventional nonvolatile memory device.</p><p id="p-0114" num="0113">When the Zoned Namespace technology is used, a logical address and a physical address may be sequentially allocated to data, generated by an application, in the logical address system and the physical address system, and garbage collection may be performed by the unit of zone, whereby it is possible to easily perform garbage collection. According to an embodiment, the host <b>102</b> may change storage spaces allocated to the zones zone #0, zone #1, zone #2, . . . and zone #n, and may additionally allocate a memory block which is not allocated to the Zoned Namespaces <b>322</b>, <b>324</b> and <b>326</b> in the memory device <b>150</b>.</p><p id="p-0115" num="0114"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram illustrating a method for a host to perform garbage collection using Zoned Namespaces in accordance with an embodiment of the present disclosure. As described above, the host <b>102</b> may perform garbage collection by the unit of zone. Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, data corresponding to the first application (APPL1) <b>312</b> is allocated to a first zone <b>332</b> of the first Zoned Namespace <b>322</b>, data corresponding to the second application (APPL2) <b>314</b> is allocated to a second zone <b>334</b> of the first Zoned Namespace <b>322</b>, and data is not allocated yet to a third zone <b>335</b> of the first Zoned Namespace <b>322</b>.</p><p id="p-0116" num="0115">When the host <b>102</b> performs garbage collection using Zoned Namespaces, garbage collection may be performed by the unit of zone. For example, the first zone <b>332</b> may be selected as a victim zone and valid data to be moved from the victim zone <b>332</b> to a target zone may be selected. When the third zone <b>335</b> is selected as a target zone to which data is to be moved to from the victim zone, the controller <b>130</b> may read the data from the first zone <b>332</b>, store the read data in the memory <b>144</b> and then transmit the stored data to the host <b>102</b>, and the host <b>102</b> may store the transmitted data in the memory <b>106</b>.</p><p id="p-0117" num="0116">The host <b>102</b> which receives the data to be moved to the target zone may transmit, to the controller <b>130</b>, a write command and the data to be moved to the target zone and may also transmit information on the third zone <b>335</b> or the target zone to which the data is to be moved. The controller <b>130</b> which receives the data to be moved to the target zone may store the received data in the memory <b>144</b>, may program the data in the third zone <b>335</b> or the target zone, may erase the data stored in the first zone <b>332</b>, and thereby, may select the first zone <b>332</b> as a free zone.</p><p id="p-0118" num="0117">In the case of the host-based garbage collection performed by the host <b>102</b> as described above, since the data is transmitted to the host <b>102</b> and is then transmitted to the memory system <b>110</b> from the host <b>102</b>, a data transmission time is required. Also, when the host <b>102</b> is performing another operation, a time allocable to garbage collection decreases, and thus, a lot of time may be required to perform garbage collection.</p><p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating a garbage collection method in the data processing system <b>100</b> in accordance with the embodiment of the present disclosure to which the Zoned Namespace technology is applied.</p><p id="p-0120" num="0119">When the host <b>102</b> is performing another operation, less time may be allocated to garbage collection, and thus, the host <b>102</b> may first determine whether it is possible to perform garbage collection. In order to determine the load of the host <b>102</b>, the host <b>102</b> may check the number of commands for controlling the memory system <b>110</b>, the commands being queued in the command queue <b>107</b>, or may compare an occupation time amount and an input/output (IO)) standby time amount, and thereby, may decide whether to perform host-based garbage collection by the host <b>102</b> or whether to request the garbage collection to the memory system <b>110</b>. The occupation time amount is a time amount for which a process of the host <b>102</b> occupies the processor <b>105</b>. The IO standby time amount is a time amount for which the host <b>102</b> stands by for input/output to/from the memory system <b>110</b>.</p><p id="p-0121" num="0120">For example, when the number of commands for controlling the memory system <b>110</b>, such as read, program, and erase commands queued in the command queue <b>107</b> exceeds a threshold, the host <b>102</b> may determine that it is unsuitable for the memory system <b>110</b> to perform garbage collection and may decide that the host <b>102</b> performs garbage collection by itself. When the number of commands for controlling the memory system <b>110</b> is equal to or less than the threshold, the host <b>102</b> may decide that the memory system <b>110</b> instead of the host <b>102</b> should perform garbage collection. According to an embodiment of the present disclosure, the host <b>102</b> may compare, at a predetermined time interval, the occupation time amount and the IO standby time amount. When the difference between the occupation time amount and the IO standby time amount exceeds a threshold, the host <b>102</b> may not perform garbage collection and may request garbage collection to the memory system <b>110</b>.</p><p id="p-0122" num="0121">When the host <b>102</b> decides not to perform garbage collection, the host <b>102</b> may select a victim zone and a target zone. Taking the case described above with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref> again as an example, the host <b>102</b> may select the first zone <b>332</b> of the first Zoned Namespace <b>322</b> as a victim zone, and may select the third zone <b>335</b> as a target zone.</p><p id="p-0123" num="0122">The host <b>102</b> may collect information on the logical block address of valid data to be moved from the victim zone <b>332</b> to the target zone <b>335</b>, and may transmit, to the memory system <b>110</b>, a garbage collection request including information on the victim zone <b>332</b> and the target zone <b>335</b> and the information on the logical block address of the valid data as the target of garbage collection.</p><p id="p-0124" num="0123">The memory system <b>110</b> may receive the garbage collection request, may collect the valid data from the victim zone <b>332</b> by using the information on the logical block address of the valid data, may move the corresponding data to the target zone <b>335</b>, may erase data of the victim zone <b>332</b>, and then, may notify the host <b>102</b> of the completion of the garbage collection request. Since the valid data as the target of garbage collection is sequentially moved to the target zone <b>335</b> and an address is calculated by the host <b>102</b>, the completion notification may not include information other than the completion report of garbage collection.</p><p id="p-0125" num="0124">According to the method described above with reference to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the host <b>102</b> may decide whether the host <b>102</b> will directly perform garbage collection or the memory system <b>110</b> will perform garbage collection, by determining the load of the host <b>102</b>. When the load of the host <b>102</b> is large, the host <b>102</b> may request the memory system <b>110</b> to perform garbage collection, thereby reducing a time required for garbage collection. In addition, since the memory system <b>110</b> does not transmit the data as the target of garbage collection to the host <b>102</b>, a time required for data transmission may also be reduced.</p><p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart illustrating the garbage collection method in the data processing system <b>100</b> in accordance with an embodiment of the present disclosure to which the Zoned Namespace technology is applied. Referring to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, at operation S<b>1110</b>, the host <b>102</b> may determine a status of the host <b>102</b> in order to secure a free zone in a Zoned Namespace. Since the host <b>102</b> may have no or insufficient free zone or may be in a situation in which it is necessary to secure a free zone in advance, the host <b>102</b> may decide whether the host <b>102</b> will directly perform garbage collection or will request garbage collection to the memory system <b>110</b>, depending on the status of the host <b>102</b>. The host <b>102</b> may decide whether the current status of the host <b>102</b> is a processor-bound status or an input/output (IO)-bound status, and may perform garbage collection according to a decision result. The processor-bound status refers to a status in which the host <b>102</b> allocates more resources for a process of the processor <b>105</b> more than input/output to/from the memory system <b>110</b> and occupies the processor <b>105</b> for more of a time amount than input/output to/from the memory system <b>110</b>. The IO-bound status refers to a status in which the host <b>102</b> allocates more resource for input/output to/from the memory system <b>110</b> more than a process of the processor <b>105</b> and occupies more of a time amount for the input/output to/from the memory system <b>110</b> than the process of the processor <b>105</b>.</p><p id="p-0127" num="0126">When it is determined that the status of the host <b>102</b> is the processor-bound status, the host <b>102</b> may proceed to operation S<b>1120</b>, and when it is determined that the status of the host <b>102</b> is the IO-bound status, the host <b>102</b> may proceed to operation S<b>1160</b>. In an embodiment, the host <b>102</b> may determine the processor-bound status by the number of commands queued in the command queue <b>107</b>. For example, when the number of commands for controlling the memory system <b>110</b>, included in the command queue <b>107</b>, exceeds a threshold, the host <b>102</b> may determine that the status of the host <b>102</b> is the IO-bound status. In another embodiment, the host <b>102</b> may determine the processor-bound status by comparing the occupation time amount and the IO standby time amount. That is, the host <b>102</b> may determine the status of the host <b>102</b> as the processor-bound status when the difference between the occupation time amount and the IO standby time amount exceeds a preset threshold, and may determine the status of the host <b>102</b> as the IO-bound status when the difference does not exceed the preset threshold.</p><p id="p-0128" num="0127">At the operation S<b>1120</b>, the host <b>102</b> may select a victim zone for garbage collection and a target zone to which data is to be moved from the victim zone. The victim zone may mean a zone which stores valid data on which garbage collection is to be performed, and the target zone may mean a zone to which the valid data is to be moved from the victim zone.</p><p id="p-0129" num="0128">At operation S<b>1130</b>, the host <b>102</b> may collect information on the valid data stored in the victim zone. In an embodiment, the information on the valid data may be a logical block address (LBA).</p><p id="p-0130" num="0129">At operation S<b>1140</b>, the host <b>102</b> may transmit, to the controller <b>130</b>, a garbage collection request including information on the victim zone, the information on the valid data as a garbage collection target and information on the target zone to which the valid data is to be moved, and may request the controller <b>130</b> to perform garbage collection. That is, the host <b>102</b> may reduce the load of the processor <b>105</b> of the host <b>102</b> by requesting garbage collection to the memory system <b>110</b>.</p><p id="p-0131" num="0130">At operation S<b>1150</b>, the controller <b>130</b> may receive the garbage collection request from the host <b>102</b>, and may move the valid data to the target zone by using the information on the victim zone, the information on the valid data and the information on the target zone included in the garbage collection request. When the execution of the garbage collection request is completed, the controller <b>130</b> may notify the host <b>102</b> of the completion of garbage collection.</p><p id="p-0132" num="0131">When the host <b>102</b> determines at the operation S<b>1110</b> that the status of the host <b>102</b> is the IO-bound status, at the operation S<b>1160</b>, the host <b>102</b> may perform host-based garbage collection which is to be performed by the host <b>102</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart illustrating a method for deciding a subject for performing garbage collection in accordance with an embodiment of the present disclosure, and is a diagram showing in detail the operation S<b>1110</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0134" num="0133">Referring to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, at operation S<b>1111</b>, the host <b>102</b> may check the number of commands for controlling the memory system <b>110</b>, which are queued in the command queue <b>107</b>.</p><p id="p-0135" num="0134">At operation S<b>1112</b>, the host <b>102</b> may determine whether the number of commands checked at the operation S<b>1111</b> is equal to or less than the threshold. When the number of commands is equal to or less than the threshold (YES of the operation S<b>1112</b>), the host <b>102</b> may request the garbage collection to the memory system <b>110</b> (operation S<b>1113</b>).</p><p id="p-0136" num="0135">When the checked number of commands exceeds the threshold (NO of the operation S<b>1112</b>), the host <b>102</b> may decide to perform host-based garbage collection (operation S<b>1114</b>).</p><p id="p-0137" num="0136">Although not shown in the present flowchart, according to an embodiment of the present disclosure, the host <b>102</b> may check, at the operation S<b>1111</b>, the number of commands other than commands for controlling the memory system <b>110</b> queued in the command queue <b>107</b>, and at the operation S<b>1112</b>, the host <b>102</b> may determine whether the number of commands checked at the operation S<b>1111</b> is equal to or less than a threshold and may decide to perform host-based garbage collection when the number of commands is equal to or less than the threshold. When the checked number of commands exceeds the threshold, the host <b>102</b> may decide to request garbage collection to the memory device <b>150</b>.</p><p id="p-0138" num="0137"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart illustrating a method for deciding a subject for performing garbage collection in accordance with an embodiment of the present disclosure. Similarly to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, <figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram showing in detail the operation S<b>1110</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0139" num="0138">Referring to <figref idref="DRAWINGS">FIG. <b>13</b></figref>, at operation S<b>1111</b>, the host <b>102</b> may check the occupation time amount and the IO standby time amount. When a value obtained by subtracting the IO standby time amount from the occupation time amount exceeds a threshold (YES of operation S<b>1112</b>), the host <b>102</b> may request the garbage collection to the memory system <b>110</b> (operation S<b>1113</b>), and when the value is equal to or less than the threshold (NO of the operation S<b>1112</b>), the host <b>102</b> may decide to perform host-based garbage collection and may directly perform garbage collection (operation S<b>1114</b>).</p><p id="p-0140" num="0139"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flow diagram illustrating a process in accordance with an embodiment of the present disclosure in which the host <b>102</b> transmits a garbage collection request to the controller <b>130</b> of the memory system <b>110</b>.</p><p id="p-0141" num="0140">At operation S<b>1410</b>, the host <b>102</b> may select a victim zone for garbage collection and a target zone as a zone to which valid data being a garbage collection target is to be moved, and at operation S<b>1420</b>, the host <b>102</b> may collect information on the valid data being the garbage collection target, which is stored in the victim zone. In an embodiment, the information on the valid data may be a logical block address.</p><p id="p-0142" num="0141">When the information on the valid data is collected, the host <b>102</b> may transmit information on the target zone as a location where garbage collection data is to be moved, information on the victim zone and the information on the valid data to the controller <b>130</b>, and may transmit a garbage collection request which instructs garbage collection to be performed using the transmitted information (operation S<b>1430</b>).</p><p id="p-0143" num="0142">The controller <b>130</b>, which receives the garbage collection request and the information on the victim zone, the information on the target zone and the information on the valid data accompanying the garbage collection request, may read the valid data in the victim zone by using the information on the victim zone and the information on the valid data, and then, may move the read valid data to the target zone (operation S<b>1440</b>). For example, the controller <b>130</b> may read the data of the victim zone using information on a logical block address (LBA), which is transmitted from the host <b>102</b>, and may move the read data to the target zone.</p><p id="p-0144" num="0143">When the garbage collection operation is completed, the controller <b>130</b> may notify the host <b>102</b> that garbage collection is completed (operation S<b>1450</b>).</p><p id="p-0145" num="0144"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a diagram illustrating an example of a process of performing garbage collection requested to the memory system <b>110</b> in accordance with an embodiment of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, the host <b>102</b> may decide a second zone zone #1 as a victim zone, may select valid data to be moved from the victim zone, and may collect a logical block address (LBA) for the valid data. The host <b>102</b> may decide a tenth zone zone #9 as a target zone to which the valid data is to be moved, and may transfer a garbage collection request including information on the victim zone, the target zone and the valid data to the memory system <b>110</b>.</p><p id="p-0146" num="0145">The controller <b>130</b>, which receives the garbage collection request, may read the valid data as a garbage collection target in an erase unit corresponding to the second zone zone #1 decided as the victim zone, by using the information on the victim zone, the target zone and the valid data received from the host <b>102</b>, and may move the valid data read in the erase unit corresponding to the tenth zone zone #9 as the target zone.</p><p id="p-0147" num="0146">Although various embodiments have been described for illustrative purposes, it will be apparent to those skilled in the art that various changes and modifications may be made without departing from the spirit and scope of the disclosure as defined in the following claims. Furthermore, the embodiments may be combined to form additional embodiments.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A data processing system comprising:<claim-text>a host including a processor and a volatile memory and configured to sequentially allocate data to a plurality of zones of a Zoned Namespace; and</claim-text><claim-text>a memory system including:<claim-text>a memory device including a plurality of memory blocks; and</claim-text><claim-text>a controller configured to allocate the plurality of memory blocks to respective zones of the Zoned Namespace and access a memory block allocated for one of the plurality of zones according to an address of the zone inputted together with a data input/output request from the host,</claim-text></claim-text><claim-text>wherein the host is further configured to request garbage collection to the controller or perform host-based garbage collection, depending on a load level of the host.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The data processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the host is further configured to determine the load level based on a number of memory system control commands or an occupation time amount for which a process of the host occupies the processor.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The data processing system according to <claim-ref idref="CLM-00002">claim 2</claim-ref>,<claim-text>wherein the volatile memory includes a command queue, and</claim-text><claim-text>wherein the host requests garbage collection to the controller when the number of memory system control commands included in the command queue is equal to or less than a threshold and performs the host-based garbage collection when the number of memory system control commands exceeds the threshold.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The data processing system according to <claim-ref idref="CLM-00002">claim 2</claim-ref>,<claim-text>wherein the host is further configured to compare the occupation time amount with an input/output (IO) standby time amount of the processor for the memory system, and</claim-text><claim-text>wherein the host requests the garbage collection to the controller when a difference between the occupation time amount and the TO standby time amount exceeds a threshold and performs the host-based garbage collection when the difference is equal to or less than the threshold.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The data processing system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the host requests the garbage collection to the controller by providing the controller with information on a victim zone, a target zone and valid data to be moved from the victim zone to the target zone.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The data processing system according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein in response to the request, the controller is further configured to perform a garbage collection operation on the victim and target zones for the valid data according to the information.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The data processing system according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein a memory block allocated to correspond to the victim zone is configured in an erase unit.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The data processing system according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the erase unit is a super block.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The data processing system according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the Zoned Namespace includes a plurality of zones, the plurality of zones correspond to a plurality of erase units and include the victim zone and the target zone, and the controller performs garbage collection for an erase unit corresponding to the victim zone and the target zone.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A method for operating a data processing system, comprising:<claim-text>sequentially allocating, by a host including a processor and a volatile memory, data to a plurality of zones of a Zoned Namespace;</claim-text><claim-text>allocating, by a controller, a plurality of memory blocks of a memory device to respective zones of the Zoned Namespace;</claim-text><claim-text>accessing, by the controller, a memory block allocated for one zone among the plurality of zones according to an address of the zone inputted together with a data input/output request from the host; and</claim-text><claim-text>requesting, by the host, garbage collection to the controller or performing host-based garbage collection, depending on a load level of the host.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising determining, by the host, the load level based on a number of memory system control commands or an occupation time amount for which a process of the host occupies the processor.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>,<claim-text>wherein the garbage collection is requested to the controller when the number of memory system control commands included in a command queue within the host is equal to or less than a threshold, and</claim-text><claim-text>wherein the host-based garbage collection is performed when the number of memory system control commands exceeds the threshold.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method according to <claim-ref idref="CLM-00011">claim 11</claim-ref>,<claim-text>further comprising comparing, by the host, the occupation time amount with an input/output (TO) standby time amount of the processor for the memory system,</claim-text><claim-text>wherein the garbage collection is requested to the controller when a difference between the occupation time amount and the TO standby time amount exceeds a threshold, and</claim-text><claim-text>wherein the host-based garbage collection is performed when the difference is equal to or less than the threshold.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the request of the garbage collection includes providing the controller with information on a victim zone, a target zone, and valid data to be moved from the victim zone to the target zone.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising performing, by the controller in response to the request, a garbage collection operation on the victim zone and the target zone for the valid data according to the information.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein a memory block allocated to correspond to the victim zone is configured in an erase unit.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the erase unit is a super block.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the Zoned Namespace includes a plurality of zones, the plurality of zones correspond to a plurality of erase units and include the victim zone and the target zone, and the controller performs garbage collection for an erase unit corresponding to the victim zone and the target zone.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A memory system comprising:<claim-text>a memory device including a plurality of memory blocks; and</claim-text><claim-text>a controller configured to:<claim-text>allocate the plurality of memory blocks to respective zones of a Zoned Namespace,</claim-text><claim-text>access a memory block allocated for one of the plurality of zones according to an address of the zone inputted together with a data input/output request, and</claim-text><claim-text>perform a garbage collection operation in response to a garbage collection request from a host.</claim-text></claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The memory system according to <claim-ref idref="CLM-00019">claim 19</claim-ref>,<claim-text>wherein the request includes information on a victim zone, a target zone, and valid data to be moved from the victim zone to the target zone, and</claim-text><claim-text>wherein the controller is further configured to perform, in response to the request, a garbage collection operation on the victim zone and the target zone for the valid data according to the information.</claim-text></claim-text></claim></claims></us-patent-application>