<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004663A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004663</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364131</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>164</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">CLASSIFYING DATA AND ENFORCING DATA ACCESS CONTROL USING A CONTEXT-BASED HIERARCHICAL POLICY</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>EMC IP Holding Company LLC</orgname><address><city>Hopkinton</city><state>MA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Shafik</last-name><first-name>Farida</first-name><address><city>Cairo</city><country>EG</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Christner</last-name><first-name>Joel</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Reineke</last-name><first-name>Nicole</first-name><address><city>Northborough</city><state>MA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">One example method includes receiving a request from a user to access data stored in a filesystem, in response to the request, retrieving metadata of the data and metadata of the user, validating the metadata of the data and the metadata of the user against a data access rule, and granting the user access to the data upon successful validation of the metadata of the data and the metadata of the user.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="91.52mm" wi="158.75mm" file="US20230004663A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="122.34mm" wi="172.89mm" file="US20230004663A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="171.96mm" wi="172.89mm" file="US20230004663A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="171.96mm" wi="172.89mm" file="US20230004663A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="238.17mm" wi="172.97mm" file="US20230004663A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="131.91mm" wi="115.65mm" file="US20230004663A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE INVENTION</heading><p id="p-0002" num="0001">Embodiments of the present invention generally relate to data access control. More particularly, at least some embodiments of the invention relate to systems, hardware, software, computer-readable media, and methods for implementing and using a context-based hierarchical policy as a basis for data access control.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Operating systems (OS) use file systems to organize files. Different operating systems have different file systems, with the result that access control mechanisms that are specific to operating systems do not transfer between file systems. That is, an access control system that functions with one operating system may not function with a different operating system. Therefore, permissions need to be redefined whenever a file is moved from one device to another. Further, due to inconsistency in access control implementations, administrators often find that a gap exists in access control capabilities from platform to platform.</p><p id="p-0004" num="0003">Another concern with conventional data access control approaches is the introduction of human error. In particular, simple human mistakes in defining access control may lead to substantial damages if confidential, sensitive, or regulated files are leaked, incorrectly stored, or otherwise accessed by an entity that should not have been allowed access. A better approach would be to flag possible issues before they occur.</p><p id="p-0005" num="0004">One approach that has been employed to deal with problems in managing data access control is the use of mechanisms such as Mandatory Access Control (MAC). However, while a MAC approach may provide adequate security, the stringent requirements of MAC add a substantial overhead and require expensive management systems and methods. Further, while fast-paced environments, such as banks, require extensive security guarantees, those environments cannot afford to incur the processing and operational lag that MAC approaches add.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">In order to describe the manner in which at least some of the advantages and features of the invention may be obtained, a more particular description of embodiments of the invention will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, embodiments of the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> discloses aspects of a hypothetical comparative example of a workflow for granting access to data.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> discloses aspects of an example architecture and method, in which access is granted to data, according to some embodiments of the invention.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> discloses aspects of an example architecture and method, in which data that a user may be granted access to is updated, according to some embodiments of the invention.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> discloses aspects of a hypothetical comparative example of a workflow in which access is erroneously granted to updated data.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> discloses aspects of an example architecture and method, in which access is granted to updated data, according to some embodiments of the invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> discloses aspects of an example computing entity operable to perform any of the disclosed methods, operations, and processes.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION OF SOME EXAMPLE EMBODIMENTS</heading><p id="p-0013" num="0012">Embodiments of the present invention generally relate to data access control. More particularly, at least some embodiments of the invention relate to systems, hardware, software, computer-readable media, and methods for implementing and using a context-based hierarchical policy as a basis for data access control.</p><p id="p-0014" num="0013">In general, example embodiments of the invention may operate to apply data access control at the file-system or object level using a context-based hierarchical policy. Example embodiments may would classify and annotate data, concatenate it with various forms of metadata, and leverage the available information to make granular access-control decisions, such as at the file level for example.</p><p id="p-0015" num="0014">In an example embodiment, a user may request access to a particular file of a filesystem. The access request may trigger a hook which may then retrieve, from a catalog, metadata tags that have been associated with the file. The hook may then transmit the file metadata, and information concerning the user, to a security service. The security service may perform a validation process to validate the metadata and information, received from the hook, with one or more data access rules. If the validation is successful, the user may be granted access to the file, and if the validation is unsuccessful, access to the file may be denied.</p><p id="p-0016" num="0015">Embodiments of the invention, such as the examples disclosed herein, may be beneficial in a variety of respects. For example, and as will be apparent from the present disclosure, one or more embodiments of the invention may provide one or more advantageous and unexpected effects, in any combination, some examples of which are set forth below. It should be noted that such effects are neither intended, nor should be construed, to limit the scope of the claimed invention in any way. It should further be noted that nothing herein should be construed as constituting an essential or indispensable element of any invention or embodiment. Rather, various aspects of the disclosed embodiments may be combined in a variety of ways so as to define yet further embodiments. Such further embodiments are considered as being within the scope of this disclosure. As well, none of the embodiments embraced within the scope of this disclosure should be construed as resolving, or being limited to the resolution of, any particular problem(s). Nor should any such embodiments be construed to implement, or be limited to implementation of, any particular technical effect(s) or solution(s). Finally, it is not required that any embodiment implement any of the advantageous and unexpected effects disclosed herein.</p><p id="p-0017" num="0016">In particular, an embodiment may provide a content-based approach that enables flexibility in the application of access control processes. An embodiment may provide for granularity in the application of access control processes, which may be provided at the file or object level, for example. An embodiment may reduce the amount of performance and processing lag associated with application of access control processes. An embodiment may enable access control to be enforced on a file even if the file moves from one node to another.</p><p id="p-0018" num="0017">It is noted that embodiments of the invention, whether claimed or not, cannot be performed, practically or otherwise, in the mind of a human. As indicated by the illustrative examples disclosed herein, embodiments of the invention are applicable to, and find practical usage in, environments in which thousands, or tens of thousands, of data objects may be handled and processed by a data access control system. Such handling and processing, which may be performed in complex environments in which files are constantly being added, deleted, and modified, and in which access requirements are changing, is well beyond the mental capabilities of any human to perform practically, or otherwise. Thus, while other, simplistic, examples are disclosed herein, those are only for the purpose of illustration and to simplify the discussion, but do not represent real world applications of embodiments of the invention. Accordingly, nothing herein should be construed as teaching or suggesting that any aspect of any embodiment of the invention could or would be performed, practically or otherwise, in the mind of a human.</p><heading id="h-0005" level="1">A. Aspects of Example Operating Environments</heading><p id="p-0019" num="0018">The following is a discussion of aspects of example operating environments for various embodiments of the invention. This discussion is not intended to limit the scope of the invention, or the applicability of the embodiments, in any way.</p><p id="p-0020" num="0019">In general, embodiments of the invention may be implemented in connection with systems, software, and components, that individually and/or collectively implement, and/or cause the implementation of, data access control operations.</p><p id="p-0021" num="0020">At least some embodiments of the invention provide for the implementation of the disclosed functionality in existing data backup platforms, examples of which include the Dell-EMC NetWorker and Avamar platforms and associated backup software, and storage environments such as the Dell-EMC DataDomain storage environment. In general however, the scope of the invention is not limited to any particular data backup platform or data storage environment.</p><p id="p-0022" num="0021">New and/or modified data collected and/or generated in connection with some embodiments, may be stored in a data protection environment that may take the form of a public or private cloud storage environment, an on-premises storage environment, and hybrid storage environments that include public and private elements. Any of these example storage environments, may be partly, or completely, virtualized. The storage environment may comprise, or consist of, a datacenter which is operable to service read, write, delete, backup, restore, and/or cloning, operations initiated by one or more clients or other elements of the operating environment. Where a backup comprises groups of data with different respective characteristics, that data may be allocated, and stored, to different respective targets in the storage environment, where the targets each correspond to a data group having one or more particular characteristics.</p><p id="p-0023" num="0022">Example cloud computing environments, which may or may not be public, include storage environments that may provide data protection functionality for one or more clients. Another example of a cloud computing environment is one in which processing, data protection, and other, services may be performed on behalf of one or more clients. Some example cloud computing environments in connection with which embodiments of the invention may be employed include, but are not limited to, Microsoft Azure, Amazon AWS, Dell EMC Cloud Storage Services, and Google Cloud. More generally however, the scope of the invention is not limited to employment of any particular type or implementation of cloud computing environment.</p><p id="p-0024" num="0023">In addition to the cloud environment, the operating environment may also include one or more clients that are capable of collecting, modifying, and creating, data. As such, a particular client may employ, or otherwise be associated with, one or more instances of each of one or more applications that perform such operations with respect to data. Such clients may comprise physical machines, or virtual machines (VM)</p><p id="p-0025" num="0024">As used herein, the term &#x2018;data&#x2019; is intended to be broad in scope. Thus, that term embraces, by way of example and not limitation, data segments such as may be produced by data stream segmentation processes, data chunks, data blocks, atomic data, emails, objects of any type, files of any type including media files, word processing files, spreadsheet files, and database files, as well as contacts, directories, sub-directories, volumes, and any group of one or more of the foregoing.</p><p id="p-0026" num="0025">Example embodiments of the invention are applicable to any system capable of storing and handling various types of objects, in analog, digital, or other form. Although terms such as document, file, segment, block, or object may be used by way of example, the principles of the disclosure are not limited to any particular form of representing and storing data or other information. Rather, such principles are equally applicable to any object capable of representing information.</p><heading id="h-0006" level="1">B. Overview</heading><p id="p-0027" num="0026">Access control mechanisms within data storage platforms, including those platforms that serve objects and files, may authorize subjects, such as users and processes, to perform operations, such as read, write, and delete, on resources within the underlying filesystem as managed by the operating system. OSs may support different variations of access control mechanisms.</p><p id="p-0028" num="0027">One example access control mechanism that may be employed by an OS is MAC (Mandatory Access Control). MAC is a relatively strict mechanism, and may be employed by entities with high security requirements, such as government entities for example. Under a MAC implementation, only the system administrator may be allowed define/alter access to resource objects&#x2014;users are not. A MAC system/approach may assign security labels to objects, which include a classification, such as &#x2018;Confidential,&#x2019; and a category, such as &#x2018;Department X&#x2019; or &#x2018;Project A.&#x2019; A user attempting to access such objects would have to be associated with labels that match those assigned to the object. MAC is disfavored in many circumstances and applications as it imposes a substantial processing overhead due to its stringent requirements.</p><p id="p-0029" num="0028">Another example access control mechanism that may be employed is DAC (Discretionary Access Control). Commercial operating systems may utilize DAC where users are responsible for defining access to resources they own. Access to the resource is defined as an Access Control List, which states the users and groups allowed to perform specific operations on the resource. While more flexible than a MAC approach, DAC offers weaker security guarantees and functionality than MAC.</p><p id="p-0030" num="0029">A final example of an access control mechanism that may be employed in some circumstances is RBAC (Role-based Access Control). In this approach, RBAC assigns users &#x201c;roles,&#x201d; where every role translates to specific permissions and access rights. RBAC imposes inflexibility in access control, since users cannot gain permissions more than those defined in the role to which they have been assigned.</p><p id="p-0031" num="0030">While the MAC, DAC, and RBAC, approaches may be useful in certain circumstances, these mechanisms contrast with example embodiments at least in that none of these mechanisms provide support for content-based access control at the filesystem level, and access control decisions in these mechanisms are made based on &#x201c;flat&#x201d; information. That is, and in contrast with example embodiments, these access control approaches provide no support for, nor implement, utilization of a hierarchical policy comprised of attributes at multiple levels in a combined, uniform manner, to make access control decisions. Hierarchical levels employed in example embodiments may include, but are not limited to, user, group, and organizational unit, and embodiments may operate using extended metadata attributes, such as attributes identifying the types of content found within a particular piece of data. As disclosed herein, example embodiments may leverage AI/ML (Artificial Intelligence/Machine Learning) methods to extract useful metadata annotations from the underlying data, in addition to metadata annotations associated with users, in order to provide a facility to define and enforce access control.</p><heading id="h-0007" level="1">C. Aspects of Some Example Embodiments</heading><p id="p-0032" num="0031">Example embodiments may use a context-based hierarchical policy to support finer access control decisions for the filesystem. Embodiments may include various components. Such components may include, for example, a metadata annotator that may operate to leverage human-defined rules alongside AI/ML to extract useful metadata from data.</p><p id="p-0033" num="0032">Another component that may be included in some example embodiments is a data catalog. In general, the data catalog may store the extracted metadata to be used in making access control decisions.</p><p id="p-0034" num="0033">Still another component that may be included in some embodiments is a security provider. In general, the security provider may serve as a policy decision point that may use various different hierarchical metadata to determine whether access to data is denied or granted.</p><p id="p-0035" num="0034">As a final example of a component that may be included in some embodiments, one or more hooks may be provided. In general, a hook may listen for any filesystem changes, and, in response to detection of a filesystem change, triggering the metadata annotator or security provider as required. A security rule and/or file metadata may be automatically updated in response to a filesystem change, although it is noted that access permissions to the changed file may, or may not, change as a result of the filesystem change. For example, if PII is added to a file, the permissions may change, but if the change to the file does not add PII to the file, the permissions may remain the same as they were prior to that change.</p><p id="p-0036" num="0035">Example embodiments may come into play at various stages during the lifecycle of a file or other dataset. For example, on file creation, the kernel underlying the filesystem may determine whether the user has permission to create a new file. At this stage, embodiments do not interfere with the file creation process, but simply defer to the underlying security implementation for the resource within which the file is being created.</p><p id="p-0037" num="0036">Example embodiments may also implement various functionalities when a file is closed. For example, on a file close where file writes have been detected followed by the file close, a hook may be triggered. The hook may initially check the data catalog to determine if the file had any previous contents, that is whether or not a new file or simply a file revision had been created at close, and send the user and file metadata to the security provider to determine if these file writes are to be accepted, using a permission check mechanism. If the writes are accepted, that is, permitted, the hook may then package, and send, a reference of the new/modified file to the metadata annotator to retrieve, analyze, and generate metadata and annotations reflecting the changes. This information may then be stored within the data catalog.</p><p id="p-0038" num="0037">As well, embodiments of the invention may implement functionalities when a user attempts to access a file, such as by opening or copying the file for example. When the user makes the access attempt, a hook may once again be triggered, and may send the user identity metadata, along with the file metadata, to a security provider. The security provider may then utilize a permission check mechanism to compare various different categories of metadata, such as user metadata, file metadata, and access request metadata, for example, against the defined policies or rules to determine whether the user can access the file to which access has been requested, and then, based on the comparison, the user may be either granted or denied access to the file.</p><p id="p-0039" num="0038">Further, embodiments of the invention may implement various functionalities relating to file delete processes. For example, on file delete, such embodiments may adhere to a retention policy stated within the data catalog configurations. A retention policy may have different options, such as deleting the file immediately, deleting the file after passage of a specific time period, persisting the file indefinitely, or possibly a combination of these, according to the different tags on the file. For example a file retention policy may specify &#x201c;delete immediately if &#x2018;PII,&#x2019; else persist for 30 days if no sensitive tags found.&#x201d; Note that in this example policy, PII refers to Personal Identifying Information.</p><p id="p-0040" num="0039">C.1 File Creation/Writing</p><p id="p-0041" num="0040">With attention now to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>, details are provided concerning a hypothetical comparative example architecture and method (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) and an example architecture and method of an embodiment of the invention (<figref idref="DRAWINGS">FIG. <b>2</b></figref>). The example architecture <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes a filesystem <b>102</b> that may include one or more filesystem folders <b>104</b>, such as the example FolderA. The filesystem folder <b>104</b> may include one or more files <b>106</b> and <b>108</b>, such as, respectively, FileA, which does not initially contain PCI (Personal Confidential Information) data, and FileB. A kernel <b>110</b> may underly the file system <b>102</b>.</p><p id="p-0042" num="0041">In this comparative example, both a UserA and a UserB may have access to FolderA. Based on this access configuration, when UserA attempts to access FileA, UserA will be granted access to FileA. In this comparative example, a workflow <b>150</b> may proceed as follows. UserA, who has access to FolderA, may request <b>152</b> access to FileA stored in FolderA, and the request may be conveyed <b>154</b> by the filesystem <b>102</b> to the kernel <b>110</b>. In response to the request <b>152</b>, the kernel <b>110</b> may check to determine if UserA has sufficient permissions to access FileA and, if so, the kernel <b>110</b> may indicate <b>156</b> to the filesystem <b>102</b> that the access request should be granted. On the other hand, if the kernel <b>110</b> determines that UserA does not have sufficient permissions to access FileA, the kernel <b>110</b> may indicate <b>156</b> to the filesystem <b>102</b> that the access request should be denied. In either case, the user may be informed of the decision. If the kernel <b>110</b> indicates that access should be granted, the filesystem <b>102</b> may grant <b>158</b> access to the user.</p><p id="p-0043" num="0042">With attention to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and with the hypothetical comparative example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> in view, one example architecture <b>200</b> according to some embodiments is disclosed. Except as noted hereafter, the architecture <b>200</b> may the be same as the architecture <b>100</b>.</p><p id="p-0044" num="0043">The example architecture <b>200</b> may include, for example, a filesystem <b>202</b> that contains one or more folders <b>204</b> that may include, for example, a FileA <b>206</b> that does not initially contain PCI, and a FileB <b>208</b>. A kernel <b>210</b> may underly the filesystem <b>202</b>. In contrast with the example architecture <b>100</b>, the architecture <b>200</b> may additionally comprise, as part of the filesystem <b>202</b>, or separately from the filesystem <b>202</b>, one or more hooks <b>212</b>. The hooks <b>212</b> may communicate with a data catalog <b>214</b> and a security provider <b>216</b>. Finally, a metadata annotator <b>218</b>, which may include rules <b>220</b> and AI/ML functionality <b>222</b>, may be included in the architecture <b>200</b>.</p><p id="p-0045" num="0044">In operation, a method <b>250</b> may be performed that may begin with a UserA request <b>252</b> for access to FileA. The request <b>252</b> may trigger a hook <b>212</b> to request <b>254</b>, and receive <b>256</b>, from the data catalog <b>214</b>, one or more metadata tags that have been assigned to FileA. The metadata tags, along with metadata identifying the UserA who made the request <b>252</b>, may then be provided <b>258</b> by the hook <b>212</b> to the security provider <b>216</b>. The metadata tags and metadata may be generated, and associated with the file and user, by the metadata annotator <b>218</b> based on the rules <b>220</b> and/or by using AI/ML.</p><p id="p-0046" num="0045">After receipt <b>258</b> of the metadata and metadata tags from the hooks <b>212</b>, the security provider <b>216</b> may then validate the various metadata, provided <b>258</b> by the hooks, against one or more rules. Based on the outcome of the validation process, which may involve comparison of the metadata and metadata tags with one or more data access rules, the security provider <b>216</b> may grant/deny <b>260</b> the access request by UserA, and the decision of the security provider <b>216</b> may be communicated <b>262</b> by the filesystem <b>202</b> to the user. In some embodiments, the kernel <b>210</b> may set an OS Access Granted state to &#x2018;TRUE,&#x2019; after receipt <b>264</b> of the decision of the security provider <b>216</b> from the filesystem <b>202</b>. The kernel <b>210</b> may then inform <b>266</b> the filesystem <b>202</b> of the OS Access Granted state, even though access to the requested file may not yet have been granted <b>262</b>.</p><p id="p-0047" num="0046">C.2 File Modification</p><p id="p-0048" num="0047">With reference now to <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref>, details are provided concerning the structure and operation of an embodiment of the invention in a circumstance where a user has added PCI data to FileA, that is, FileA has been modified by a different user, UserB in this case, to include PCI data. The example architecture <b>300</b> may be similar, or identical, in both structure and operation, to the architecture <b>200</b>. As such, a detailed discussion of the architecture <b>300</b> is not provided, except to note that FileA <b>306</b> now includes PCI. In general, and similar to the architecture <b>200</b>, the architecture <b>300</b> may comprise a filesystem <b>302</b>, folder(s) <b>304</b>, FileA <b>306</b>, FileB <b>308</b>, kernel <b>310</b>, hooks <b>312</b>, data catalog <b>314</b>, security provider <b>316</b>, and metadata annotator <b>318</b> with rules <b>320</b> and AI/ML functionality <b>322</b>.</p><p id="p-0049" num="0048">An example method <b>350</b> performed in connection with the architecture <b>300</b> may begin at <b>352</b> when UserB modifies FileA in some way, such as by adding PCI to FileA, for example. In this regard, it is noted that access control criteria may be set broadly so that any change to a file renders the file inaccessible to a party, or parties. In other embodiments, the access control criteria may be relatively granular such that, for example, access is denied only if the file has been modified to include confidential information.</p><p id="p-0050" num="0049">In response to this change to FileA, the hook(s) <b>312</b> may be triggered to request <b>354</b>, and receive <b>356</b>, metadata tags of the file from the data catalog <b>314</b>. The hook(s) <b>312</b> may then transmit <b>358</b> the user metadata and file metadata, received <b>356</b> from the data catalog <b>314</b>, to the security provider <b>316</b>. The security provider <b>316</b> may the validate the metadata received <b>358</b> from the hooks <b>304</b> against one or more data access rules and then transmit <b>360</b>, based on the outcome of the validation, to the filesystem <b>302</b> a decision to grant access to UserB, that is, to allow UserB to write PCI data to FileA. Note that if the validation process performed by the security provider <b>316</b> fails, the decision would be to deny access to UserB, that is, to prevent UserB from writing PCI data to FileA. In the former case, the decision to grant access may then be communicated <b>362</b> by the filesystem <b>302</b> to the UserB.</p><p id="p-0051" num="0050">During, and/or after, the writing of PCI data by UserB to FileA, the hook <b>312</b> may be triggered by modification of FileA to send <b>364</b> a new file reference to the metadata annotator <b>318</b> which may then generate new/modified file metadata corresponding to the change made by UserB to FileA, that is, the writing of PCI data by UserB to FileA. The new/modified file data may then be communicated <b>366</b> by the metadata annotator <b>318</b> to the data catalog <b>314</b> for storage at the data catalog <b>314</b>.</p><p id="p-0052" num="0051">In some embodiments, the kernel <b>310</b> may set an OS Access Granted state to &#x2018;TRUE,&#x2019; after receipt <b>361</b> of the decision of the security provider <b>316</b> from the filesystem <b>302</b>. The kernel <b>310</b> may then inform <b>363</b> the filesystem <b>302</b> of the OS Access Granted state, even though access to the requested file may not yet have been granted <b>362</b>.</p><p id="p-0053" num="0052">C.3 File (Modified) Access</p><p id="p-0054" num="0053">With reference now to <figref idref="DRAWINGS">FIGS. <b>4</b></figref> (hypothetical comparative example) and <b>5</b> (example embodiment), details are provided concerning a circumstance in which a UserA who initially had access to a FileA may be denied access to that FileA after another UserB has made changes to that FileA. An example method and architecture concerning access requests in the context of making changes to a file were discussed above in connection with <figref idref="DRAWINGS">FIGS. <b>2</b> and <b>3</b></figref>.</p><p id="p-0055" num="0054">Turning first to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, an architecture <b>400</b> may include a filesystem <b>402</b> with one or more folders <b>404</b>, such as FolderA, that hold files <b>406</b> and <b>408</b>, such as FileA and FileB, respectively. A kernel <b>410</b> may underly the filesystem <b>402</b>. In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the file <b>406</b> may be a FileA that was updated by a UserB to include PCI data. Prior to this update, FileA may have been accessible both to UserA and UserB simply by virtue of the fact that both of those users had access to FolderA.</p><p id="p-0056" num="0055">In the architecture <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, it may be possible for UserA to access the modified FileA, notwithstanding that the enterprise may wish to prevent UserA from having such access. In particular, a method <b>450</b> may begin when UserA, who has access to FolderA, requests access <b>452</b> to the modified FileA. In response to the request <b>452</b>, the filesystem <b>402</b> may forward <b>454</b> the request to the kernel <b>410</b>. The kernel <b>410</b> may check to determine if UserA has sufficient permissions to obtain access to the modified FileA. In the case of architecture <b>400</b>, the check performed by the kernel <b>410</b> may simply determine that UserA has been granted access to FolderA and, as such, should be granted access to the files in FolderA, including the modified FileA which the entity does not wish UserA to be able to access.</p><p id="p-0057" num="0056">However, the kernel <b>410</b> has determined that UserA has previously been granted access to FolderA, the kernel <b>410</b> may grant UserA access to the modified FileA. The kernel <b>410</b> may then communicate <b>456</b> the decision to grant UserA access to FileA to the filesystem <b>402</b>. Accordingly, the filesystem <b>402</b> may then grant access <b>458</b> to UserA. Thus, even though the entity did not wish to permit UserA to access FileA, due to the inclusion of PCI, the architecture <b>400</b> nonetheless permitted such access.</p><p id="p-0058" num="0057">With reference now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, example embodiments of an architecture <b>500</b> and method <b>550</b> are disclosed that may prevent such a result. The example architecture <b>500</b> may be similar, or identical, in both structure and operation, to the architecture <b>300</b>. As such, a detailed discussion of the architecture <b>500</b> is not provided, except to note that the architecture <b>500</b> may comprise a filesystem <b>502</b>, folder(s) <b>504</b>, FileA <b>506</b> which has been updated to include PCI information, FileB <b>508</b>, kernel <b>510</b>, hooks <b>512</b>, data catalog <b>514</b>, security provider <b>516</b>, and metadata annotator <b>518</b> with rules <b>520</b>, and AI/ML functionality <b>522</b> which may perform, for example, text analyses of the contents of file to generate new/modified metadata for that file. As with the other example rules <b>320</b>, the rules <b>520</b> for creation of file metadata may specify that file metadata be generated based on keywords within file content, and relationships within the file content, for example.</p><p id="p-0059" num="0058">An example method <b>550</b> may performed in connection with the architecture <b>500</b> which, in contrast with architecture/method <b>400</b>/<b>450</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, prevents unauthorized access to the modified FileA. In this way, the example embodiment of <figref idref="DRAWINGS">FIG. <b>5</b></figref> may implement data access control at a file level, based on user metadata, access request metadata, and file metadata.</p><p id="p-0060" num="0059">In more detail, the example method <b>550</b> may begin when UserA, who has access to FolderA, requests access <b>552</b> to the modified FileA, which is contained in FolderA, that was generated by UserB. The access request <b>552</b> may trigger the hook(s) <b>512</b> to request <b>554</b>, and receive <b>556</b>, metadata tags of the FileA from the data catalog <b>514</b>. The hook(s) <b>512</b> may then transmit <b>558</b> the user metadata and file metadata, received <b>556</b> from the data catalog <b>514</b>, to the security provider <b>516</b>. The security provider <b>516</b> may the validate the metadata received <b>558</b> from the hooks <b>504</b> against one or more data access rules and then transmit <b>560</b>, based on the outcome of the validation, to the filesystem <b>502</b> a decision to deny access to UserA, that is, to prevent UserA from accessing the FileA which was modified by UserB to include PCI data. The denial of access may then be communicated <b>562</b> by the filesystem <b>502</b> to the UserA.</p><p id="p-0061" num="0060">During, and/or after, the writing of PCI data by UserB to FileA, the hook <b>312</b> may be triggered by modification of FileA to send <b>364</b> a new file reference to the metadata annotator <b>318</b> which may then generate new/modified file metadata corresponding to the change made by UserB to FileA, that is, the writing of PCI data by UserB to FileA. The new/modified file data may then be communicated <b>366</b> by the metadata annotator <b>318</b> to the data catalog <b>314</b> for storage at the data catalog <b>314</b>.</p><p id="p-0062" num="0061">In some embodiments, the kernel <b>510</b> may set an OS Access Granted state to &#x2018;TRUE,&#x2019; after receipt <b>561</b> of the decision of the security provider <b>516</b> from the filesystem <b>502</b>. The kernel <b>510</b> may then inform <b>563</b> the filesystem <b>502</b> of the OS Access Granted state. That is, the kernel <b>510</b> may erroneously indicate that access to FileA should be granted to UserA when, in fact, UserA should not have access to the FileA. Thus, example embodiments may operate to override incorrect file access determinations that may be made by a kernel.</p><p id="p-0063" num="0062">It is noted with respect to the example methods of <figref idref="DRAWINGS">FIGS. <b>2</b>, <b>3</b>, and <b>5</b></figref>, discussed above, that any of the disclosed processes, operations, methods, and/or any portion of any of these, may be performed in response to, as a result of, and/or, based upon, the performance of any preceding process(es), methods, and/or, operations. Correspondingly, performance of one or more processes, for example, may be a predicate or trigger to subsequent performance of one or more additional processes, operations, and/or methods. Thus, for example, the various processes that may make up a method may be linked together or otherwise associated with each other by way of relations such as the examples just noted.</p><p id="p-0064" num="0063">Finally, it is noted that data access permissions implemented using a context-based hierarchy, as disclosed herein, may be used alone or alongside traditional security settings. That is, example embodiments may be implemented in both greenfield environments where data access controls have yet to be implemented, and brownfield environments where some form of data access control has been implemented.</p><heading id="h-0008" level="1">D. Further Discussion</heading><p id="p-0065" num="0064">As disclosed herein, example embodiments may possess various useful features and functionalities. For example, embodiments may implement a context-based hierarchical access control decisions for underlying file data triggered by and at the file system level. More specifically, example embodiments may augment existing local access control decisions, as disclosed herein, by enabling access to be enforced based on user identity metadata and the metadata associated with the object to which access has been, or may be, requested. This approach may enable more granularity and access control based on the actual content of the file or other dataset.</p><p id="p-0066" num="0065">As another example, some embodiments may implement data classification of underlying file data. Particularly, example embodiments may employ human-defined rules alone, or alongside AI/ML methods, to generate content-based metadata for files and objects, which metadata may be used to classify data into different categories. For example, files may be scanned to generate metadata, and then to annotate that metadata should the file contain sensitive information such as PII (Personally Identifiable Information), financial transactions, or intellectual property, for example.</p><p id="p-0067" num="0066">Further, some example embodiments may define and enforce security policies, that is, data access policies, that may follow the data to various locations or sites through hook invocation of context-based hierarchical access control. In more detail, some example embodiments may provide another mechanism of safety in that, where employed, the security policy would naturally follow the data using the metadata associated with that data. As access requests are initiated against a given resource such as a data object, hooks may be invoked requesting validation that the supplied identity context, that is, the requesting user, could access the resource given the metadata and annotations that have been identified for that resource. In this way, if a file or object were copied or moved from one node to another, and assuming each node employs the techniques disclosed herein, the policy as defined may be enforced at any node where the data is located. Thus, example embodiments of the invention may support the application of security policies regardless of how the files are accessed, be it directly from the filesystem, using a terminal, from a catalog, or even from a program.</p><p id="p-0068" num="0067">Another useful functionality that may be implemented by some example embodiments is the automated metadata generation and annotation of new and changed data. That is, some example embodiments may allow new or changed data to be automatically analyzed, have metadata generated, and have annotations created within the metadata based on the contents, or changes found, within the file. These processes may be automatically triggered when a change to a file is detected.</p><p id="p-0069" num="0068">As well, some example embodiments may reduce, or eliminate, a time gap between when new content is created, and creation and/or enforcement of an access policy concerning that new content. For example, some embodiments may enable a data security policy to be enacted in near-real-time, as new or changed data may have immediate metadata and annotation generation requested against it.</p><p id="p-0070" num="0069">As a final example, some embodiments may provide for a metadata-based access audit trail with enforcement record. In particular, some embodiments may allow security operations to analyze access request denials with detailed understanding of the metadata/tags which triggered the denial. This may be useful for the detection of bad actors, and/or identification of poorly delineated rule sets that may need to be edited.</p><heading id="h-0009" level="1">E. Further Example Embodiments</heading><p id="p-0071" num="0070">Following are some further example embodiments of the invention. These are presented only by way of example and are not intended to limit the scope of the invention in any way.</p><p id="p-0072" num="0071">Embodiment 1. A method, comprising: receiving a request from a user to access data stored in a filesystem; in response to the request, retrieving metadata of the data and metadata of the user; validating the metadata of the data and the metadata of the user against a data access rule; and granting the user access to the data upon successful validation of the metadata of the data and the metadata of the user.</p><p id="p-0073" num="0072">Embodiment 2. The method as recited in embodiment 1, wherein access to the data by the user is granted or denied based on a combination of user identity and content of the data.</p><p id="p-0074" num="0073">Embodiment 3. The method as recited in any of embodiments 1-2, wherein the data access rule is enforceable regardless of a location of the data.</p><p id="p-0075" num="0074">Embodiment 4. The method as recited in any of embodiments 1-3, wherein other data in a same folder as the data is not accessible to the user.</p><p id="p-0076" num="0075">Embodiment 5. The method as recited in any of embodiments 1-4, wherein the metadata of the data is updated and stored, automatically, in response to a change to the data.</p><p id="p-0077" num="0076">Embodiment 6. The method as recited in any of embodiments 1-5, wherein the data access rule is updated automatically in response to a change in the data, and the data access rule is enforceable immediately after it has been updated.</p><p id="p-0078" num="0077">Embodiment 7. The method as recited in any of embodiments 1-6, wherein the metadata includes annotations that are based on content of the data.</p><p id="p-0079" num="0078">Embodiment 8. The method as recited in any of embodiments 1-7, wherein the data metadata is generated according to one or more rules.</p><p id="p-0080" num="0079">Embodiment 9. The method as recited in any of embodiments 1-8, wherein the data access rule is applicable at an individual data object level.</p><p id="p-0081" num="0080">Embodiment 10. The method as recited in any of embodiments 1-9, wherein the access request comprises a request to read the data or a request to write to the data.</p><p id="p-0082" num="0081">Embodiment 11. A method for performing any of the operations, methods, or processes, or any portion of any of these, disclosed herein.</p><p id="p-0083" num="0082">Embodiment 12. A computer readable storage medium having stored therein instructions that are executable by one or more hardware processors to perform operations comprising the operations of any one or more of embodiments 1-11.</p><heading id="h-0010" level="1">F. Example Computing Devices and Associated Media</heading><p id="p-0084" num="0083">The embodiments disclosed herein may include the use of a special purpose or general-purpose computer including various computer hardware or software modules, as discussed in greater detail below. A computer may include a processor and computer storage media carrying instructions that, when executed by the processor and/or caused to be executed by the processor, perform any one or more of the methods disclosed herein, or any part(s) of any method disclosed.</p><p id="p-0085" num="0084">As indicated above, embodiments within the scope of the present invention also include computer storage media, which are physical media for carrying or having computer-executable instructions or data structures stored thereon. Such computer storage media may be any available physical media that may be accessed by a general purpose or special purpose computer.</p><p id="p-0086" num="0085">By way of example, and not limitation, such computer storage media may comprise hardware storage such as solid state disk/device (SSD), RAM, ROM, EEPROM, CD-ROM, flash memory, phase-change memory (&#x201c;PCM&#x201d;), or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other hardware storage devices which may be used to store program code in the form of computer-executable instructions or data structures, which may be accessed and executed by a general-purpose or special-purpose computer system to implement the disclosed functionality of the invention. Combinations of the above should also be included within the scope of computer storage media. Such media are also examples of non-transitory storage media, and non-transitory storage media also embraces cloud-based storage systems and structures, although the scope of the invention is not limited to these examples of non-transitory storage media.</p><p id="p-0087" num="0086">Computer-executable instructions comprise, for example, instructions and data which, when executed, cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions. As such, some embodiments of the invention may be downloadable to one or more systems or devices, for example, from a website, mesh topology, or other source. As well, the scope of the invention embraces any hardware system or device that comprises an instance of an application that comprises the disclosed executable instructions.</p><p id="p-0088" num="0087">Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts disclosed herein are disclosed as example forms of implementing the claims.</p><p id="p-0089" num="0088">As used herein, the term &#x2018;module&#x2019; or &#x2018;component&#x2019; may refer to software objects or routines that execute on the computing system. The different components, modules, engines, and services described herein may be implemented as objects or processes that execute on the computing system, for example, as separate threads. While the system and methods described herein may be implemented in software, implementations in hardware or a combination of software and hardware are also possible and contemplated. In the present disclosure, a &#x2018;computing entity&#x2019; may be any computing system as previously defined herein, or any module or combination of modules running on a computing system.</p><p id="p-0090" num="0089">In at least some instances, a hardware processor is provided that is operable to carry out executable instructions for performing a method or process, such as the methods and processes disclosed herein. The hardware processor may or may not comprise an element of other hardware, such as the computing devices and systems disclosed herein.</p><p id="p-0091" num="0090">In terms of computing environments, embodiments of the invention may be performed in client-server environments, whether network or local environments, or in any other suitable environment. Suitable operating environments for at least some embodiments of the invention include cloud computing environments where one or more of a client, server, or other machine may reside and operate in a cloud environment.</p><p id="p-0092" num="0091">With reference briefly now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, any one or more of the entities disclosed, or implied, by <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>5</b></figref> and/or elsewhere herein, may take the form of, or include, or be implemented on, or hosted by, a physical computing device, one example of which is denoted at <b>600</b>. As well, where any of the aforementioned elements comprise or consist of a virtual machine (VM), that VM may constitute a virtualization of any combination of the physical components disclosed in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0093" num="0092">In the example of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the physical computing device <b>500</b> includes a memory <b>602</b> which may include one, some, or all, of random access memory (RAM), non-volatile memory (NVM) <b>604</b> such as NVRAM for example, read-only memory (ROM), and persistent memory, one or more hardware processors <b>606</b>, non-transitory storage media <b>608</b>, UI device <b>610</b>, and data storage <b>612</b>. One or more of the memory components <b>602</b> of the physical computing device <b>600</b> may take the form of solid state device (SSD) storage. As well, one or more applications <b>614</b> may be provided that comprise instructions executable by one or more hardware processors <b>606</b> to perform any of the operations, or portions thereof, disclosed herein.</p><p id="p-0094" num="0093">Such executable instructions may take various forms including, for example, instructions executable to perform any method or portion thereof disclosed herein, and/or executable by/at any of a storage site, whether on-premises at an enterprise, or a cloud computing site, client, datacenter, data protection site including a cloud storage site, or backup server, to perform any of the functions disclosed herein. As well, such instructions may be executable to perform any of the other operations and methods, and any portions thereof, disclosed herein.</p><p id="p-0095" num="0094">The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>receiving a request from a user to access data stored in a filesystem;</claim-text><claim-text>in response to the request, retrieving metadata of the data and metadata of the user;</claim-text><claim-text>validating the metadata of the data and the metadata of the user against a data access rule; and</claim-text><claim-text>granting the user access to the data upon successful validation of the metadata of the data and the metadata of the user.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein access to the data by the user is granted or denied based on a combination of user identity and content of the data.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data access rule is enforceable regardless of a location of the data.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein other data in a same folder as the data is not accessible to the user.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the metadata of the data is updated and stored, automatically, in response to a change to the data.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data access rule is updated automatically in response to a change in the data, and the data access rule is enforceable immediately after it has been updated.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the metadata includes annotations that are based on content of the data.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data metadata is generated according to one or more rules.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data access rule is applicable at an individual data object level.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the access request comprises a request to read the data or a request to write to the data.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A computer readable storage medium having stored therein instructions that are executable by one or more hardware processors to perform operations comprising:<claim-text>receiving a request from a user to access data stored in a filesystem;</claim-text><claim-text>in response to the request, retrieving metadata of the data and metadata of the user;</claim-text><claim-text>validating the metadata of the data and the metadata of the user against a data access rule; and</claim-text><claim-text>granting the user access to the data upon successful validation of the metadata of the data and the metadata of the user.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein access to the data by the user is granted or denied based on a combination of user identity and content of the data.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the data access rule is enforceable regardless of a location of the data.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein other data in a same folder as the data is not accessible to the user.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the metadata of the data is updated and stored, automatically, in response to a change to the data.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the data access rule is updated automatically in response to a change in the data, and the data access rule is enforceable immediately after it has been updated.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the metadata includes annotations that are based on content of the data.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the data metadata is generated according to one or more rules.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the data access rule is applicable at an individual data object level.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer readable storage medium as recited in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the access request comprises a request to read the data or a request to write to the data.</claim-text></claim></claims></us-patent-application>