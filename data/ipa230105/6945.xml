<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006946A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006946</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940996</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>49</main-group><subgroup>90</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>49</main-group><subgroup>90</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e43">FIRST-IN FIRST-OUT FUNCTION FOR SEGMENTED DATA STREAM PROCESSING</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17028854</doc-number><date>20200922</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17940996</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62907625</doc-number><date>20190928</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Tencent America LLC</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SODAGAR</last-name><first-name>Iraj</first-name><address><city>Los Angeles</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Tencent America LLC</orgname><role>02</role><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method includes storing entries in a first first-in first-out (FIFO) buffer, each entry of the first FIFO buffer includes a respective segment of plural segments of a first data stream and timing attributes corresponding to the respective segment. The method also includes processing the respective segments in entries output from the first FIFO buffer using a first media processing task of a workflow in a network-based media processing (NBMP) system. The respective segments are processed independently from each other and the first media processing task is performed in a cloud computing environment. The method also includes generating a continuous data stream by concatenating the processed segments according to the timing attributes corresponding to the processed segments.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="100.75mm" wi="158.75mm" file="US20230006946A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="206.59mm" wi="164.17mm" orientation="landscape" file="US20230006946A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="230.46mm" wi="147.57mm" orientation="landscape" file="US20230006946A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="202.18mm" wi="159.09mm" orientation="landscape" file="US20230006946A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="222.59mm" wi="140.72mm" orientation="landscape" file="US20230006946A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="206.25mm" wi="147.83mm" orientation="landscape" file="US20230006946A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="205.49mm" wi="151.21mm" file="US20230006946A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="225.21mm" wi="179.07mm" orientation="landscape" file="US20230006946A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">INCORPORATION BY REFERENCE</heading><p id="p-0002" num="0001">The present application is a continuation of U.S. application Ser. No. 17/028,854 filed on Sep. 22, 2020, which claims the benefit of priority to U.S. Provisional Application No. 62/907,625, &#x201c;Indexed FIFO Functions for Segmented Processing in Cloud&#x201d; filed on Sep. 28, 2019. The disclosures of the prior applications are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to first-in first-out (FIFO) buffers for segmented data stream processing on a computing platform (e.g., a computer or a cloud platform). Some embodiments are related with Network-based Media Processing (NBMP).</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent the work is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.</p><p id="p-0005" num="0004">Multimedia service providers face the challenge of adapting their services to multiple cloud and network service providers to reach their customers. These cloud and network service providers oftentimes define their own application programing interfaces (APIs) to assign compute resources to their customers. The Network-based Media Processing (NBMP) standard is being developed to address fragmentation and offer a unified way to perform media processing on top of any cloud platform and on any IP network. NBMP defines a Workflow Manager that can use implementations of ready-made media processing functions and compose them together to create a media processing workflow.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">Aspects of the disclosure provide a method of segmented media data processing. The method can include receiving a first sequence of first segments partitioned from a first data stream of a streaming media, and storing the first segments into a first first-in first-out (FIFO) buffer. In the first FIFO buffer, each first segment and attributes associated with each first segment form an entry of the first FIFO buffer. The attributes associated with each first segment can include a start time of the respective first segment, a duration of the respective first segment, and a length of the respective first segment indicating a number of bytes in the respective first segment. The first segments received from the first FIFO buffer can be processed using a first media processing task of a workflow in a network-based media processing (NBMP) system. The first segments received from the first FIFO buffer can be processed independently from each other.</p><p id="p-0007" num="0006">In an embodiment, the first sequence of the first segments are received from a continuous-to-segmented conversion function that partitions the first data stream of the streaming media from a continuous stream to a segmented stream. In an embodiment, the first sequence of the first segments partitioned from the first data stream of the streaming media are received from a media processing task of the workflow in the NBMP system. In an embodiment, the first data stream of the streaming media is received from a NBMP source of the NBMP system, or from a media processing task of the workflow in the NBMP system.</p><p id="p-0008" num="0007">An embodiment of the method can further includes storing the processed first segments output from the first media processing task of the workflow into a second FIFO buffer. In the second FIFO buffer, each processed first segment and attributes associated with each processed first segment form an entry of the second FIFO buffer. The attributes associated with each processed first segment can include the start time of the respective first segment, the duration of the respective first segment, and a length of the respective processed first segment indicating a number of bytes in the respective processed first segment. In an embodiment, the entries stored in the second FIFO buffer are converted to a continuous stream without the attributes associated with each processed first segment.</p><p id="p-0009" num="0008">An embodiment of the method can further include receiving a second sequence of second segments partitioned from a second data stream of the streaming media, and storing the second segments into a third FIFO buffer. In the third FIFO buffer, each second segment and attributes associated with each second segment form an entry of the third FIFO buffer. The attributes associated with each second segment can include a start time of the respective second segment, a duration of the respective second segment, and a length of the respective second segment indicating a number of bytes in the respective second segment. The second segments received from the third FIFO buffer can be processed using a second media processing task of the workflow in the NBMP system. The second segments received from the third FIFO buffer are processed independently from each other.</p><p id="p-0010" num="0009">Partitioning the first sequence of the first segments from the first data stream is synchronized with partitioning the second sequence of the second segments from the second data stream such that each first segment of the first data stream and the respective second segment of the second data stream correspond to a same time span of the streaming media. In an embodiment, each first segment of the first data stream and the respective second segment of the second data stream have a same start time in the respective attribute associated with each first or second segment.</p><p id="p-0011" num="0010">Aspects of the disclosure provide an apparatus. The apparatus can include circuitry configured to receive a first sequence of first segments partitioned from a first data stream of a streaming media, and store the first segments into a first FIFO buffer. In the first FIFO buffer, each first segment and attributes associated with each first segment form an entry of the first FIFO buffer. The attributes associated with each first segment can include a start time of the respective first segment, a duration of the respective first segment, and a length of the respective first segment indicating a number of bytes in the respective first segment. The first segments received from the first FIFO buffer can be processed using a first media processing task of a workflow in a NBMP system. The first segments received from the first FIFO buffer are processed independently from each other.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0012" num="0011">Further features, the nature, and various advantages of the disclosed subject matter will be more apparent from the following detailed description and the accompanying drawings in which:</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an exemplary data processing system according to an embodiment of the disclosure.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example of a workflow according to an embodiment of the disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example first-in first-out (FIFO) buffer according to an embodiment of the disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example continuous-to-segmented (C2S) conversion function according to an embodiment of the disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example segmented-to-continuous (S2C) conversion function according to an embodiment of the disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an example processing path according to an embodiment of the disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a multi-indexed segment FIFO (MiFIFO) function according to an embodiment of the disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example process of a segmented data stream processing process according to an embodiment of the disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a schematic illustration of a computer system according to an embodiment of the disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading><p id="p-0022" num="0021">I. Network-Based Media Processing</p><p id="p-0023" num="0022">Aspects of the disclosure describe segmented data stream processing mechanisms related with a network-based media processing (NBMP) framework. The NBMP framework can be employed to initialize and control media processing in a network (e.g., on a cloud platform). For example, a NBMP source describes requested media processing and provides information about the nature and format of media data. In response, an NBMP workflow manager can establish a media processing workflow and inform the NBMP source that the workflow is ready, and the requested media processing can start. The media source(s) can then start transmitting media to the network for processing.</p><p id="p-0024" num="0023">An NBMP workflow can be understood as a connected graph of media processing tasks, each of which performs a well-defined media processing operation. The workflow manager ensures correct operation of the workflow by configuring and monitoring each task as well as a workflow output. The workflow manager is responsible for selection of media processing functions and instantiating the selected functions as tasks based on a workflow description that is received from the NBMP source.</p><p id="p-0025" num="0024">By employment of techniques disclosed herein, a continuous data stream can be converted to a sequence of segments. The segments can then be stored in a first-in first-out (FIFO) buffer with each segment associated with a set of attributes such as a start time, a duration, and a length of the respective segment. Such segments can be processed independently through one or more tasks in a workflow. For example, the segments can be processed in parallel using multiple instances of a same function. Stateless containers in a cloud computing plat form can thus be applied to such segmented media stream processing.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an exemplary NBMP system (<b>100</b>) according to an embodiment of the disclosure. The NBMP system (<b>100</b>) can support existing media delivery methods such as streaming, file delivery, push-based progressive download, hybrid delivery, multipath, and heterogeneous network environments. The NBMP system (<b>100</b>) can also enable emerging media applications by providing various cloud-based media processing capabilities such as network-assisted media quality enhancement (e.g., virtual reality (VR) stitching, video up-scaling, mobile edge encoding for adaptive streaming, and content-aware cloud transcoding), network-assisted media distribution (e.g., live media ingestion, online transcoding, and media-aware caching), network-assisted media composition (e.g., augmented video streaming, and customized media composition), immersive media handling (e.g., network aggregated point cloud media), and the like.</p><p id="p-0027" num="0026">As shown, the NBMP system (<b>100</b>) can include a NBMP source (<b>101</b>), a NBMP workflow manager (<b>103</b>), a function repository (<b>105</b>), a media source (<b>111</b>), a data processing entity (MPE) (<b>113</b>), and a media sink (<b>115</b>). The NBMP system (<b>100</b>) can include additional media source(s), media sink(s), and/or MPEs.</p><p id="p-0028" num="0027">The NBMP source (<b>101</b>) can describe, or otherwise indicate, media processing operations to be performed by the media processing entity (<b>113</b>). The function repository (<b>105</b>) can store various media processing functions. The NBMP source (<b>101</b>) and the NBMP workflow manager (<b>103</b>) can retrieve media processing functions from the function repository (<b>105</b>). A media processing function or a function can be used for performing a specific media processing process, such as a stitching process in a <b>360</b> video streaming service, an artificial intelligence (AI) based video up-scaling process in a video delivery service, or the like.</p><p id="p-0029" num="0028">A media processing task or a task can be a runtime instance of a function that is executed by the MPE (<b>113</b>). An NBMP workflow or a workflow can be represented by a graph (e.g., a directed acyclic graph (DAG)) of one or more connected task(s) that achieve the requested media processing. The NBMP workflow manager (<b>103</b>) or the workflow manager (<b>103</b>) can provision task(s) and connect the task(s) to create, control, manage and monitor a workflow, for example, based on a workflow description document (WDD).</p><p id="p-0030" num="0029">The media source (<b>111</b>) can provide media content (e.g., media data, supplementary information) to be processed by a workflow. The supplementary information can include metadata or auxiliary information related to the media data. The media source (<b>111</b>) can provide an input to the workflow. The media sink (<b>115</b>) can consume an output of the workflow. The MPE (<b>113</b>) can run one or more media processing task(s) to process the media content.</p><p id="p-0031" num="0030">Different entities (e.g., the NBMP Source (<b>101</b>), the workflow manager (<b>103</b>) and the MPE (<b>113</b>)) in the NBMP system (<b>100</b>) can use APIs to invoke and respond to media service requests as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The APIs can include a NBMP workflow API (or a workflow API), a function discovery API, and a task API. The workflow API can provide an interface between the NBMP Source (<b>101</b>) and the workflow manager (<b>103</b>). The task API can provide an interface between the workflow manager (<b>103</b>) and media processing tasks. The function discovery API can provide an interface between the workflow manager (<b>103</b>)/the NBMP Source (<b>101</b>) and the Function Repository (<b>105</b>).</p><p id="p-0032" num="0031">The NBMP interfaces described above can be used to create and control media processing workflows in the network. The NBMP system (<b>100</b>) can be split into a control plane and a media plane (or media data plane). The control plane can include the workflow API, the function discovery API, and the task API.</p><p id="p-0033" num="0032">The workflow API can be used by the NBMP source (<b>101</b>) to create and control a media processing workflow. The NBMP Source (<b>101</b>) can use the workflow API to communicate with the workflow manager (<b>103</b>) for configuring and controlling media processing in the network. When the NBMP Source (<b>101</b>) sends a request to the workflow manager (<b>103</b>) by including a workflow resource (WR) in an operation of the workflow API, the workflow manager (<b>103</b>) can parse the WR, the included WDD and corresponding descriptors, and take the appropriate actions according to the requested operation. Then, the workflow manager (<b>103</b>) can acknowledge the request with a response. The workflow API operations can include creating a workflow (e.g., CreateWorkflow), updating a workflow (e.g., UpdateWorkflow), deleting a workflow (e.g., DeleteWorkflow), retrieving a workflow (e.g., RetrieveWorkflow), and the like.</p><p id="p-0034" num="0033">The function discovery API can provide the means for the workflow manager (<b>103</b>) and/or the NBMP Source (<b>101</b>) to discover media processing functions that can be loaded as part of a media processing workflow.</p><p id="p-0035" num="0034">The task API can be used by the workflow manager (<b>103</b>) to configure and monitor task(s) (e.g., a task <b>1</b> and a task <b>2</b> run by the MPE (<b>113</b>)) at runtime. The task API can define interface(s) for configuration of media processing tasks by the workflow manager (<b>103</b>), for example, after the resources for the task are allocated in the MPE (<b>113</b>). Task API operations can include creating a task (e.g., CreateTask), updating a task (e.g., UpdateTask), getting a task (e.g., GetTask), deleting a task (e.g., DeleteTask), and the like.</p><p id="p-0036" num="0035">On the media plane, the media formats, the metadata, and the supplementary information formats between the NBMP Source (<b>111</b>) and task(s), as well as between the tasks can be defined.</p><p id="p-0037" num="0036">A workflow description (WD) can be passed from the NBMP source (<b>101</b>) to the workflow manager (<b>103</b>). The WD can describe information such as input data and output data, functions and other requirements for the workflow.</p><p id="p-0038" num="0037">The workflow manager (<b>103</b>) can receive a WDD from the NBMP source (<b>101</b>) and can build a workflow for requested media processing. In a workflow procedure, media processing functions can be selected, for example, from the function repository (<b>105</b>), and then corresponding media processing tasks can be configured and distributed to a set of one or more MPEs (e.g., including the MPE (<b>113</b>)).</p><p id="p-0039" num="0038">The set of functions provided by the function repository (<b>105</b>) can be read by an NBMP source (<b>101</b>) and the workflow manager (<b>103</b>). In an embodiment, the NBMP source (<b>101</b>) requests the creation of a workflow using a set of functions in the function repository (<b>105</b>). Accordingly, the NBMP source (<b>101</b>) is configured to select functions for the workflow. The NBMP source (<b>101</b>) can request the creation of the workflow as described below. The NBMP source (<b>101</b>) can use a description of the media processing tasks by which the workflow is to be created, and can specify a connection map to define connections of inputs and outputs of the media processing tasks. When the workflow manager (<b>103</b>) receives the above information from the NBMP source (<b>101</b>), the workflow manager (<b>103</b>) can instantiate the media processing tasks based on respective function names and can connect the media processing tasks according to the connection map.</p><p id="p-0040" num="0039">Alternatively, the NBMP source (<b>101</b>) can request the creation of a workflow using a set of keywords by which the workflow manager (<b>103</b>) can construct the workflow. Accordingly, the NBMP source (<b>101</b>) may not be aware of a set of functions to be inserted into the workflow. The NBMP source (<b>101</b>) can request the creation of the workflow as described below. The NBMP source (<b>101</b>) can use the set of keywords by which the workflow manager (<b>103</b>) can find the appropriate functions, and can specify the requirements of the workflow using suitable workflow description.</p><p id="p-0041" num="0040">When the workflow manager (<b>103</b>) receives the above information (e.g., the set of keywords) from the NBMP source (<b>101</b>), the workflow manager (<b>103</b>) can create the workflow by searching for appropriate functions using the keywords, for example, specified in a processing descriptor. The workflow manager (<b>103</b>) can then use other descriptors in the workflow description to provision the media processing tasks and connect the media processing tasks to create the final workflow.</p><p id="p-0042" num="0041">A processing model of the workflow manager (<b>103</b>) can be described as below.</p><p id="p-0043" num="0042">The workflow manager (<b>103</b>) can discover available media processing functions as below. The NBMP function repository (<b>105</b>) can provide the function discovery interface (or API) to allow external entities to query for a media processing function that can fulfil the requested processing. The workflow manager (<b>103</b>) can have access to a directory service that offers a searchable list of media processing functions. The workflow manager (<b>103</b>) can use the description of the media processing tasks in the workflow description to find the appropriate functions for the workflow.</p><p id="p-0044" num="0043">Selection of the media processing tasks for the workflow can be described below. When a request for media processing is received from the NBMP source (<b>101</b>), the workflow manager (<b>103</b>) can search the function repository (<b>105</b>) to find the list of all available functions that can fulfill the workflow. Using the workflow description from the NBMP Source (<b>101</b>), the workflow manager (<b>103</b>) can find the functions from the function repository (<b>105</b>) to implement the workflow, which can depend on the information for media processing from the NBMP Source (<b>101</b>). The information for media processing can include the input and output description, the description of the requested processing, and the information in other descriptors for functions in the function directory (<b>105</b>). Mapping of the source requests to appropriate media processing tasks to be included in the workflow can be a part of the implementation of the NBMP in the network. To reference and link input sources with input port names and output port names at the time of task creation, the input-ports and output-ports can be used to make references to the input streams.</p><p id="p-0045" num="0044">A search for appropriate functions to be instantiated as tasks can be performed by the workflow manager (<b>103</b>) using a function discovery API. Alternatively, the workflow manager (<b>103</b>) can retrieve detailed information of some or all suitable functions in the function repository (<b>105</b>) using the function discovery API. The workflow manager (<b>103</b>) can then compare the information for media processing from the NBMP source (<b>101</b>) with different descriptors of each function.</p><p id="p-0046" num="0045">Selected media processing tasks can be configured in the workflow. When the functions to be included in the workflow are identified, the NBMP workflow manager (<b>103</b>) can instantiate the functions as respective tasks and configure the tasks so that the tasks can be added to the workflow. The NBMP workflow manager (<b>103</b>) can extract the configuration data from the media processing information received from the NBMP source (<b>101</b>) and configure the corresponding tasks. The configuration of the Tasks can be performed using a task API (e.g., NBMP task API).</p><p id="p-0047" num="0046">Task allocation and distribution can be described below. The workflow manager (<b>103</b>) can use the workflow to perform processing deployment and configure the media processing entities. In an example, for computationally intensive media processing requests, the workflow manager (<b>103</b>) can set up multiple computational instances and distribute a workload among the multiple computational instances. Thus, the workflow manager (<b>103</b>) can connect and configure the multiple computational instances as needed. In an example, the workflow manager (<b>103</b>) allocates a same task to multiple instances and provisions a load balancer to distribute the workload among the multiple instances using a chosen scheduling mechanism. In an alternative example, the workflow manager (<b>103</b>) allocates different operations of the same task to different instances (e.g., parallel operations). In both examples described above, the workflow manager (<b>103</b>) can set up the workflow paths between the instances, and thus the suitable workload can be successfully realized. The workflow manager (<b>103</b>) can configure the tasks to push the processed media data/streams (or make them available through a pull mechanism) to a next task in the workflow graph.</p><p id="p-0048" num="0047">When the workflow manager (<b>103</b>) receives a WDD from the NBMP Source (<b>101</b>), the workflow manager (<b>103</b>) can perform a selection of media processing functions to be inserted into the workflow. When the list of tasks to be included in the workflow is compiled, the workflow manager (<b>103</b>) can then connect the tasks to prepare the workflow.</p><p id="p-0049" num="0048">The workflow manager (<b>103</b>) can generate a workflow, for example, as represented by a graph (e.g., a DAG). <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example of a graph (e.g., a DAG) (<b>200</b>) according to an embodiment of the disclosure. The DAG (<b>200</b>) can include a plurality of nodes (T<b>1</b>)-(T<b>6</b>) and a plurality of links (or connections) (<b>202</b>)-(<b>208</b>). In an example, the DAG (<b>200</b>) represents the workflow (<b>200</b>).</p><p id="p-0050" num="0049">Each node of the DAG (<b>200</b>) can represent a media processing task in the workflow (<b>200</b>). A link (e.g., the link (<b>202</b>)) connecting a first node (e.g., the node (T<b>1</b>)) to a second node (e.g., the node (T<b>2</b>)) in the DAG (<b>200</b>A) can represent a transfer of an output of the first node (e.g., the node (T<b>1</b>)) as an input to the second node (e.g., the node (T<b>2</b>)).</p><p id="p-0051" num="0050">In general, a workflow can include any suitable number of input(s) (or workflow input(s)) and any suitable number of output(s) (or workflow output(s)). The workflow input(s) can be connected to the media source (<b>111</b>), other workflow(s), and/or the like, and the workflow output(s) can be connected to the media sink (<b>115</b>), other workflow(s), and/or the like. The workflow (<b>200</b>) has an input (<b>201</b>) and outputs (<b>209</b>) and (<b>210</b>). The workflow (<b>200</b>) can have one or more outputs from intermediate nodes in some embodiments.</p><p id="p-0052" num="0051">II. First-In First-Out (FIFO) Function for Segmented Data Stream Processing</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example FIFO buffer (<b>300</b>) according to an embodiment of the disclosure. The FIFO buffer (<b>300</b>) can be used for implementing a FIFO function for segmented data stream processing. The FIFO buffer (<b>300</b>) can receive a sequence of input segments (<b>310</b>) as an input, and store the received segments as entries (<b>301</b>A-<b>301</b>N).</p><p id="p-0054" num="0053">The sequence of segments (<b>310</b>) can be received from a continuous-to-segmented (C2S) conversion function. The C2S function can receive a data stream of a streaming media, for example, from the media source (<b>111</b>) in the <figref idref="DRAWINGS">FIG. <b>1</b></figref> example, and partition the data stream into the sequence of the segments (<b>310</b>). For example, the streaming media can be a delivery of digital content (e.g., a television program or a movie) over the Internet by a streaming service provider. The data stream can be a bitstream carrying one of various types of content of the streaming media. Examples of the data stream can include a video stream, an audio stream, a metadata stream, a point cloud stream, or the like.</p><p id="p-0055" num="0054">Or, the sequence of segments (<b>310</b>) can be received from a task in a workflow, for example, in the NBMP system (<b>100</b>). A data stream can be partitioned into a sequence of segments before being fed into the task for processing. The task then outputs the sequence of segments (<b>310</b>).</p><p id="p-0056" num="0055">The entries (<b>310</b>A-<b>310</b>N) can each include a segment belonging to the sequence of segments (<b>310</b>) and a set of attributes associated with the segment. For example, the attributes of each segment can be associated to the respective segment when the respective segment is generated (e.g., partitioned from a data stream), or after the respective is processed by a task.</p><p id="p-0057" num="0056">In an embodiment, the attributes in each entry include a start time denoted by S<sub>i </sub>indicating a start time of the respective segment, a duration D<sub>i</sub>, indicating a duration of the respective segment when displayed, and a length L<sub>i </sub>(or a size) indicating a length of the respective segment, for example, in terms of a number of bytes in the respective segment. The parameter i represents an index corresponding to each segment. As shown, the entry (<b>301</b>A) includes attributes S<sub>0</sub>, D<sub>0</sub>, and L<sub>0</sub>; the entry (<b>301</b>B) includes attributes S<sub>1</sub>, D<sub>1</sub>, and L<sub>1</sub>; and the entry (<b>301</b>B) includes attributes S<sub>n-1</sub>, D<sub>n-1</sub>, and L<sub>n-1</sub>.</p><p id="p-0058" num="0057">In an example, the start time of each segment in the sequence of segments (<b>310</b>) can be a time with respect to a start time of the data stream the segment is partitioned from, or any time within the span of the data stream designated as a time reference. Or, the start time can be a time with respect to a timing reference, such as a clock providing a clock signal. The duration of each segment in the sequence of segments (<b>310</b>) can be a time span corresponding to a period of time for displaying the segment when the data stream of the streaming media is being displayed. The start time and the duration of each segment can be represented in units of second, millisecond, or the like. In various embodiments, the durations of each segment in the sequence of segments (<b>310</b>) can be the same or different.</p><p id="p-0059" num="0058">In an embodiment, the set of attributes of each segment includes only the attribute of the start time, and the attributes of the duration and the length are optional. For example, when the duration and the length for each segment are equal, the attributes of the duration and the length can be omitted. In an embodiment, the set of attributes of each segment includes an index indicating an order of each segment in the sequence of segments (<b>310</b>). In an example, when the index attribute is used, the attributes of the start time, the duration, and the length can be optional. Both the start time attribute and the index attribute can serve the purpose of indexing each segment. Accordingly, the FIFO buffer (<b>300</b>) storing the indexed segments can be referred to as an indexed segment FIFO denoted by iFIFO.</p><p id="p-0060" num="0059">In an embodiment, each entry (<b>301</b>A-<b>301</b>N) can be read from the FIFO buffer (<b>300</b>) to provide a sequence of output segments (<b>320</b>) in a first-in first-out manner. In an example, the sequence of input segments (<b>310</b>) have been processed by one or more of tasks of a workflow, and then stored in the FIFO buffer (<b>300</b>). The output segments (<b>320</b>) read from the FIFO buffer (<b>300</b>) is then concatenated together by a segmented-to-continuous (S2C) conversion function to form a continuous data stream. The continuous data stream can then be output from the workflow.</p><p id="p-0061" num="0060">In an example, the sequence of input segments (<b>310</b>) are partitioned from a data stream of a streaming media in a previous step. The output segments (<b>320</b>) read from the FIFO buffer (<b>300</b>) is then input to a task of a workflow for processing. In an example, the sequence of input segments (<b>310</b>) have been processed by one or more of tasks of a workflow, and then stored in the FIFO buffer (<b>300</b>). The output segments (<b>320</b>) read from the FIFO buffer (<b>300</b>) is then input to a next task of the workflow for further processing.</p><p id="p-0062" num="0061">In an embodiment, the FIFO buffer (<b>300</b>) can be configured with a set of configuration parameters. In an example, the configuration parameters can include a size of the FIFO buffer (<b>300</b>), for example, in a number of entries, and a maximum size of the entries in the FIFO buffer (<b>300</b>). In an example, the configuration parameters can be received from the NBMP source (<b>101</b>) in the <figref idref="DRAWINGS">FIG. <b>1</b></figref> example that specifies how the FIFO buffer (<b>300</b>) is to be configured and operated in a workflow. In an example, the configuration parameter is determined by the NBMP workflow manager (<b>103</b>) based on information received from the NBMP source (<b>101</b>). For example, the information can include parameters describing a data stream of a streaming media to-be-processed with a workflow, and/or parameters describing a function that is before or after the FIFO buffer (<b>300</b>) in the workflow. The NBMP workflow manager (<b>103</b>) can then determine how to configure the FIFO buffer (<b>300</b>) in the workflow based on that information.</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example C2S conversion function (<b>400</b>) according to an embodiment of the disclosure. The C2S conversion function (<b>400</b>) can be configured to receive a continuous data stream (<b>410</b>) of a streaming media, and partition the continuous data stream (<b>410</b>) into a segmented data stream (<b>420</b>).</p><p id="p-0064" num="0063">The segmented data stream (<b>420</b>) can include a sequence of segments (<b>421</b>A-<b>421</b>N) each associated with a set of attributes, such as attributes of a start time, a duration, and a length of the respective segment. The segmented data stream <b>420</b> can then be input to a FIFO function, such as the FIFO function (<b>300</b>).</p><p id="p-0065" num="0064">The data stream (<b>410</b>) can be a data stream received from the media source (<b>111</b>), and is input to the C2S conversion function (<b>400</b>) before entering a workflow for processing. Or, the data stream (<b>410</b>) can be a data stream that has been processed by a function of a workflow before reaching the C2S conversion function (<b>400</b>).</p><p id="p-0066" num="0065">Partitioning operation of the C2S conversion function (<b>400</b>) can be performed in such a way that the resulting segments (<b>421</b>A-<b>421</b>N) can be subsequently processed independently. In an example, the resulting segments (<b>421</b>A-<b>421</b>N) can be processed in parallel in a workflow with multiple instances of a same media processing function in the workflow to accelerate processing speed.</p><p id="p-0067" num="0066">In an example, the resulting segments (<b>421</b>A-<b>421</b>N) can be processed with a step mode. For example, in a computing platform (e.g., a computer or a cloud platform) with limited resources, tasks belonging to a same workflow may not be run at the same time. Instead, the tasks connected in series can be instantiated successively to process a group of segments. A current group of segments can be processed step by step (task by task) passing through the workflow before a next group of segments can enter the workflow.</p><p id="p-0068" num="0067">In an embodiment, containerized tasks are employed in a cloud computing environment where a task can run within a stateless container that runs on top of a single operating system kernel and emulates an operating system rather than the underlying hardware. The independent segments (<b>421</b>A-<b>421</b>N) resulting from the C2S conversion function (<b>400</b>) can thus be suitably processed within such containers either in parallel or in step mode.</p><p id="p-0069" num="0068">The partitioning operation at the C2S conversion function (<b>400</b>) can depend on internal structures of the data stream (<b>410</b>). In various examples, the data stream (<b>410</b>) may be of various types and have various formats, and can be, for example, a point cloud data stream, a video stream, an audio stream, or the like. Each type of data stream may have a specific internal structure. The C2S conversion function (<b>400</b>) can identify the different structures, and accordingly partition the respective data stream into segments. While partitioning, a set of attributes (e.g., a start time, a duration, a length (size), or the like) of the respective segment can be determined and associated with the respective segment.</p><p id="p-0070" num="0069">For example, the data stream (<b>410</b>) can be a video including structures of group of pictures (GOPs). Pictures (or frames) within a GOP can reference other members of the GOP for inter prediction coding. However, each GOP in the video can be processed independently. Accordingly, the partitioning can be performed on a basis of GOPs. For example, one or more GOPs in the video can be included in one segment. The resulting segments can thus be processed independently.</p><p id="p-0071" num="0070">In another example, a video compliant with High Efficiency Video Coding (HEVC) standard may include structures of random access point (RAP) pictures to facilitate users jumping to specific parts of the video. Such RAP pictures (e.g., an instantaneous decoding refresh (IDR) picture) can be used as a start of a segment for the partitioning operation.</p><p id="p-0072" num="0071">In addition, while partitioning the video in the above examples of the partitioning operation, a start time of each segment can be determined based on the location where a partition operation takes place in the video. For example, in the above examples, each picture can be associated with a picture order count (POC) indicating an order of pictures in the video. Based on the POC information, a timing of a picture where the partition takes place can be determined and associated with respect segment. Similarly, based on information of the internal structure of the video, a duration and a length (size) of the respective segment can be determining while partitioning the video.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example S2C conversion function (<b>500</b>) according to an embodiment of the disclosure. The S2C conversion function (<b>500</b>) can be configured to receive a segmented data stream (<b>510</b>), and convert the segmented date stream (<b>510</b>) to a continuous data stream (<b>520</b>). The segmented data stream (<b>510</b>) can include a sequence of segments (<b>511</b>A-<b>511</b>N) each associated with a set of attributes. For example, the set of attributes can include a start time, a duration, and a length of the respective segment. The sequence of segments (<b>511</b>A-<b>511</b>N) can be an output of a task in a workflow.</p><p id="p-0074" num="0073">In an example, the S2C conversion function (<b>500</b>) removes the attributes associated with the segments (<b>511</b>A-<b>511</b>N), and concatenates the sequence of the segments (<b>511</b>A-<b>511</b>N) to generate the continuous data stream (<b>520</b>). The continuous data stream (<b>520</b>) can then be input to a next task of the workflow for further processing. Or, the continuous data stream (<b>520</b>) can be transmitted to a media sink as an output of the workflow.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an example processing path (<b>600</b>) according to an embodiment of the disclosure. The processing path can be part of a workflow in a NBMP system. The processing path (<b>600</b>) includes a series of a C2S conversion function (<b>601</b>), a first iFIFO buffer (<b>602</b>), a task (<b>603</b>), a second iFIFO buffer (<b>604</b>), and a S2C conversion function (<b>605</b>).</p><p id="p-0076" num="0075">A continuous data stream (<b>610</b>) is received at the C2S conversion function (<b>601</b>). The continuous data stream (<b>610</b>) can be an output of a previous task, or transmitted from a media source such as the media source (<b>111</b>) in the <figref idref="DRAWINGS">FIG. <b>1</b></figref> example. The C2S conversion function (<b>601</b>) partitions the continuous stream (<b>601</b>) into a sequence of segments each associated with a set of attributes (e.g., a start time, a duration, a length, or the like). The sequence of segments is output from the C2S conversion function (<b>601</b>) as a segmented data stream (<b>620</b>). The iFIFO buffer (<b>602</b>) receives the segmented data stream (<b>620</b>) and stores the segments and associated attributes as entries.</p><p id="p-0077" num="0076">The entries are then read from the iFIFO buffer (<b>602</b>) and processed by the task (<b>603</b>). The task (<b>603</b>) can be a media processing task instantiated from a media processing function. In an example, the task (<b>603</b>) can be configured to be multiple instances of a same function. Accordingly, the segments in the iFIFO buffer (<b>602</b>) can be fed to the multiple instances and processed in parallel. In an example, the task (<b>603</b>) can be configured to operate in step mode. Specifically, the task (<b>603</b>) can be instantiated to process a group of segments received from the iFIFO buffer (<b>602</b>) and then terminated.</p><p id="p-0078" num="0077">The iFIFO buffer (<b>604</b>) receives processed segments each associated with the attributes from the task (<b>603</b>), and stores the processed segments and attributes in form of entries. The entries in the iFIFO buffer (<b>604</b>) are then input to the S2C conversion function (<b>605</b>) as a segmented data stream (<b>630</b>). The S2C conversion function (<b>605</b>) concatenates the segments in the segmented data stream (<b>630</b>) to generate a continuous data stream (<b>640</b>).</p><p id="p-0079" num="0078">While only one task (<b>603</b>) is shown in the processing path (<b>600</b>), there can be more than one tasks configured in place of the task (<b>603</b>) in other examples. Between a pair of consecutive tasks among those tasks, there can be an iFIFO buffer employed to connect the pair of tasks. Of course, some pairs of consecutive tasks can be directly connected in each pair without an iFIFO buffer.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a multi-indexed segment FIFO (MiFIFO) function (<b>700</b>) according to an embodiment of the disclosure. The MiFIFO function (<b>700</b>) can include multiple FIFO buffers (<b>730</b>A-<b>730</b>N) operating in parallel. The MiFIFO function (<b>700</b>) can receive multiple segment inputs (<b>710</b>A-<b>710</b>N) (e.g., 2, 3, or more segment inputs) at the multiple FIFO buffers (<b>730</b>A-<b>730</b>N), respectively. Each segment input (<b>710</b>A-<b>710</b>N) can be a sequence of segments that are each associated with a set of attributes. The sequence of segments and the associated attributes are stored as entries in each FIFO buffer (<b>730</b>A-<b>730</b>N). For example, the FIFO buffer (<b>730</b>A) can include entries (<b>701</b>A-<b>701</b>N), the FIFO buffer (<b>730</b>B) can include entries (<b>702</b>A-<b>702</b>N), and the FIFO buffer (<b>730</b>N) can include entries (<b>703</b>A-<b>703</b>N). The entries in each FIFO buffer (<b>730</b>A-<b>730</b>N) can be read out in a first-in first-out manner as multiple segment outputs (<b>720</b>A-<b>720</b>N).</p><p id="p-0081" num="0080">In an example, data streams corresponding to the segment inputs (<b>710</b>A-<b>710</b>N) can belong to a same streaming media. For example, the data streams can include one or more video streams, one or more audio streams, one or more metadata streams, or the like. When being displayed, contents belonging to different data streams but corresponding to a same time span can be displayed synchronously. To serve this purpose, contents belonging to different data streams but corresponding to a same span are desired to be processed by a workflow in a synchronized manner.</p><p id="p-0082" num="0081">Accordingly, in an embodiment, segmentation of the segments in each segment input (<b>710</b>A-<b>710</b>N) can be performed synchronously. For example, the locations in each data stream where the segmentation takes place can be time aligned. As a result, the resulting segments overlapping a same time span can be time aligned, and have a same start time and a same duration. For example, the entries <b>701</b>A, <b>702</b>A, and <b>703</b>A can have a same start time and a same duration. During processing by one or more functions before or after the MiFIFO function (<b>700</b>) in the workflow, segments belonging to different data streams but corresponding to a same time span can be processed in a synchronous way such that contents of different data stream but the same time span can be delivered to a use for display properly.</p><p id="p-0083" num="0082">In various embodiments, the segment inputs (<b>710</b>A-<b>710</b>N) can each be output from a different C2S conversion function, or a different media processing function. Or, two or more segments inputs (<b>710</b>A-<b>710</b>N) can be output from a same C2S conversion function or a same media processing function. Similarly, the segment outputs (<b>720</b>A-<b>720</b>N) can each be output to a different S2C conversion function or a different media processing function. Or, two or more segment outputs (<b>720</b>A-<b>720</b>N) can be provided to a same S2C conversion function or a same media processing function.</p><p id="p-0084" num="0083">In a workflow including multiple tasks and multiple processing paths, MiFIFO functions can be configured to each connect two groups of tasks: one group of tasks resides at an input side, and the other group of tasks resides at an output side of the respective MiFIFO function.</p><p id="p-0085" num="0084">It is noted that the FIFO buffer mechanism disclosed herein is not limited to a NBMP system although the iFIFO function and MiFIFO function in some examples are explained in the context of NBMP. The FIFO buffers can be applied to media data or non-media data processing scenarios where a workflow-like process including multiple tasks is employed.</p><p id="p-0086" num="0085">In addition, the FIFO functions disclosed herein can be implemented by processing circuitry (e.g., one or more processors or one or more integrated circuits). Or, the FIFO functions disclosed herein can each be implemented as instructions of a program stored in a non-transitory computer-readable storage medium. The instructions, when executed by one or more processors, can cause the processors to carry out a FIFO function.</p><p id="p-0087" num="0086">III. Example Processes of Segmented Data Stream Processing</p><p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example process (<b>800</b>) of a segmented data stream processing process according to an embodiment of the disclosure. The process (<b>800</b>) can be part of a process for media processing using a workflow in a NBMP system. The process (<b>800</b>) can start from (S<b>801</b>) and proceed to (S<b>810</b>).</p><p id="p-0089" num="0088">At (S<b>810</b>), a sequence of segments partitioned from a data stream of a streaming media can be received. For example, the sequence of segments can be received from a C2S conversion function or from a media processing task of the workflow in the NBMP system. The streaming media can include one or more data streams, and be transmitted from a media source over a network (e.g., the Internet).</p><p id="p-0090" num="0089">At (S<b>820</b>), the segments can be stored into a first FIFO buffer. For example, each segment and associated one or more attributes can be stored as an entry in the first FIFO buffer. The attributes can include one or more of a start time, a duration, and a length of the respective segments.</p><p id="p-0091" num="0090">At (S<b>830</b>), the segments are read from the first FIFO buffer and processed by a task in the workflow. For example, the segments are processed independently from each other. In one example, the segments are processed in parallel. In an example, tasks in the workflow operate in step mode. Accordingly, the segments can be organized into groups that are each processed independently by the workflow and pass through the workflow step by step.</p><p id="p-0092" num="0091">At (S<b>840</b>), after being processed at (S<b>830</b>), the segments can then be stored in a second FIFO buffer with associated attributes. For example, the attributes of each processed segments can have the same start time and duration as the attributes associated with the segments before being processed at (S<b>830</b>). Each processed segment can have a length attribute indicating a size (e.g., a number of bytes) of the processed segment that may have changed compared with the length before being processed.</p><p id="p-0093" num="0092">At (S<b>850</b>), the processed segments can then be read from the second FIFO buffer and input to a S2C function, and be converted to a continuous data stream. The continuous data stream can be output from the work flow in an example. The process (<b>800</b>) can then proceed to (S<b>899</b>) and terminate at (S<b>899</b>).</p><p id="p-0094" num="0093">IV. Computer System</p><p id="p-0095" num="0094">The methods, embodiments, entities, or functions disclosed herein may be implemented by processing circuitry (e.g., one or more processors or one or more integrated circuits). In one example, the one or more processors execute a program that is stored in a non-transitory computer-readable medium to perform the methods, embodiments, or functions disclosed herein. The program can be coded using any suitable machine code or computer language, that may be subject to assembly, compilation, linking, or like mechanisms to create code comprising instructions that can be executed directly, or through interpretation, micro-code execution, and the like, by one or more CPUs, GPUs, and the like. The instructions can be executed on various types of computers or components thereof, including, for example, personal computers, tablet computers, servers, smartphones, gaming devices, internet of things devices, and the like.</p><p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a computer system (<b>900</b>) suitable for implementing certain embodiments of the disclosed subject matter. The components shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> for computer system (<b>900</b>) are exemplary in nature and are not intended to suggest any limitation as to the scope of use or functionality of the computer software implementing embodiments of the present disclosure. Neither should the configuration of components be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary embodiment of a computer system (<b>900</b>).</p><p id="p-0097" num="0096">Computer system (<b>900</b>) may include certain human interface input devices. Such a human interface input device may be responsive to input by one or more human users through, for example, tactile input (such as: keystrokes, swipes, data glove movements), audio input (such as: voice, clapping), visual input (such as: gestures), olfactory input (not depicted). The human interface devices can also be used to capture certain media not necessarily directly related to conscious input by a human, such as audio (such as: speech, music, ambient sound), images (such as: scanned images, photographic images obtain from a still image camera), video (such as two-dimensional video, three-dimensional video including stereoscopic video).</p><p id="p-0098" num="0097">Input human interface devices may include one or more of (only one of each depicted): keyboard (<b>901</b>), mouse (<b>902</b>), trackpad (<b>903</b>), touch screen (<b>910</b>), data-glove (not shown), joystick (<b>905</b>), microphone (<b>906</b>), scanner (<b>907</b>), camera (<b>908</b>).</p><p id="p-0099" num="0098">Computer system (<b>900</b>) may also include certain human interface output devices. Such human interface output devices may be stimulating the senses of one or more human users through, for example, tactile output, sound, light, and smell/taste. Such human interface output devices may include tactile output devices (for example tactile feedback by the touch-screen (<b>910</b>), data-glove (not shown), or joystick (<b>905</b>), but there can also be tactile feedback devices that do not serve as input devices), audio output devices (such as: speakers (<b>909</b>), headphones (not depicted)), visual output devices (such as screens (<b>910</b>) to include CRT screens, LCD screens, plasma screens, OLED screens, each with or without touch-screen input capability, each with or without tactile feedback capability-some of which may be capable to output two dimensional visual output or more than three dimensional output through means such as stereographic output; virtual-reality glasses (not depicted), holographic displays and smoke tanks (not depicted)), and printers (not depicted).</p><p id="p-0100" num="0099">Computer system (<b>900</b>) can also include human accessible storage devices and their associated media such as optical media including CD/DVD ROM/RW (<b>920</b>) with CD/DVD or the like media (<b>921</b>), thumb-drive (<b>922</b>), removable hard drive or solid state drive (<b>923</b>), legacy magnetic media such as tape and floppy disc (not depicted), specialized ROM/ASIC/PLD based devices such as security dongles (not depicted), and the like.</p><p id="p-0101" num="0100">Those skilled in the art should also understand that term &#x201c;computer readable media&#x201d; as used in connection with the presently disclosed subject matter does not encompass transmission media, carrier waves, or other transitory signals.</p><p id="p-0102" num="0101">Computer system (<b>900</b>) can also include an interface (<b>954</b>) to one or more communication networks (<b>955</b>). Networks can for example be wireless, wireline, optical. Networks can further be local, wide-area, metropolitan, vehicular and industrial, real-time, delay-tolerant, and so on. Examples of networks include local area networks such as Ethernet, wireless LANs, cellular networks to include GSM, 3G, 4G, 5G, LTE and the like, TV wireline or wireless wide area digital networks to include cable TV, satellite TV, and terrestrial broadcast TV, vehicular and industrial to include CANBus, and so forth. Certain networks commonly require external network interface adaptors that attached to certain general purpose data ports or peripheral buses (<b>949</b>) (such as, for example USB ports of the computer system (<b>900</b>)); others are commonly integrated into the core of the computer system (<b>900</b>) by attachment to a system bus as described below (for example Ethernet interface into a PC computer system or cellular network interface into a smartphone computer system). Using any of these networks, computer system (<b>900</b>) can communicate with other entities. Such communication can be uni-directional, receive only (for example, broadcast TV), uni-directional send-only (for example CANbus to certain CANbus devices), or bi-directional, for example to other computer systems using local or wide area digital networks. Certain protocols and protocol stacks can be used on each of those networks and network interfaces as described herein.</p><p id="p-0103" num="0102">Aforementioned human interface devices, human-accessible storage devices, and network interfaces can be attached to a core (<b>940</b>) of the computer system (<b>900</b>).</p><p id="p-0104" num="0103">The core (<b>940</b>) can include one or more Central Processing Units (CPU) (<b>941</b>), Graphics Processing Units (GPU) (<b>942</b>), specialized programmable processing units in the form of Field Programmable Gate Areas (FPGA) (<b>943</b>), hardware accelerators (<b>944</b>) for certain tasks, graphics adapters (<b>950</b>), and so forth. These devices, along with Read-only memory (ROM) (<b>945</b>), Random-access memory (<b>946</b>), internal mass storage such as internal non-user accessible hard drives, SSDs, and the like (<b>947</b>), may be connected through a system bus (<b>948</b>). In some computer systems, the system bus (<b>948</b>) can be accessible in the form of one or more physical plugs to enable extensions by additional CPUs, GPU, and the like. The peripheral devices can be attached either directly to the core's system bus (<b>948</b>), or through a peripheral bus (<b>949</b>). In an example, the screen (<b>910</b>) can be connected to the graphics adapter (<b>950</b>). Architectures for a peripheral bus include PCI, USB, and the like.</p><p id="p-0105" num="0104">CPUs (<b>941</b>), GPUs (<b>942</b>), FPGAs (<b>943</b>), and accelerators (<b>944</b>) can execute certain instructions that, in combination, can make up the aforementioned computer code. That computer code can be stored in ROM (<b>945</b>) or RAM (<b>946</b>). Transitional data can be also be stored in RAM (<b>946</b>), whereas permanent data can be stored for example, in the internal mass storage (<b>947</b>). Fast storage and retrieve to any of the memory devices can be enabled through the use of cache memory, that can be closely associated with one or more CPU (<b>941</b>), GPU (<b>942</b>), mass storage (<b>947</b>), ROM (<b>945</b>), RAM (<b>946</b>), and the like.</p><p id="p-0106" num="0105">The computer readable media can have computer code thereon for performing various computer-implemented operations. The media and computer code can be those specially designed and constructed for the purposes of the present disclosure, or they can be of the kind well known and available to those having skill in the computer software arts.</p><p id="p-0107" num="0106">As an example and not by way of limitation, the computer system having architecture (<b>900</b>), and specifically the core (<b>940</b>) can provide functionality as a result of processor(s) (including CPUs, GPUs, FPGA, accelerators, and the like) executing software embodied in one or more tangible, computer-readable media. Such computer-readable media can be media associated with user-accessible mass storage as introduced above, as well as certain storage of the core (<b>940</b>) that are of non-transitory nature, such as core-internal mass storage (<b>947</b>) or ROM (<b>945</b>). The software implementing various embodiments of the present disclosure can be stored in such devices and executed by core (<b>940</b>). A computer-readable medium can include one or more memory devices or chips, according to particular needs. The software can cause the core (<b>940</b>) and specifically the processors therein (including CPU, GPU, FPGA, and the like) to execute particular processes or particular parts of particular processes described above, including defining data structures stored in RAM (<b>946</b>) and modifying such data structures according to the processes defined by the software. In addition or as an alternative, the computer system can provide functionality as a result of logic hardwired or otherwise embodied in a circuit (for example: accelerator (<b>944</b>)), which can operate in place of or together with software to execute particular processes or particular parts of particular processes described herein. Reference to software can encompass logic, and vice versa, where appropriate. Reference to a computer-readable media can encompass a circuit (such as an integrated circuit (IC)) storing software for execution, a circuit embodying logic for execution, or both, where appropriate. The present disclosure encompasses any suitable combination of hardware and software.</p><p id="p-0108" num="0107">While this disclosure has described several exemplary embodiments, there are alterations, permutations, and various substitute equivalents, which fall within the scope of the disclosure. It will thus be appreciated that those skilled in the art will be able to devise numerous systems and methods which, although not explicitly shown or described herein, embody the principles of the disclosure and are thus within the spirit and scope thereof.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>storing entries in a first first-in first-out (FIFO) buffer, each entry of the first FIFO buffer comprises a respective segment of plural segments of a first data stream and timing attributes corresponding to the respective segment;</claim-text><claim-text>processing the respective segments in entries output from the first FIFO buffer using a first media processing task of a workflow in a network-based media processing (NBMP) system, wherein the respective segments are processed independently from each other and the first media processing task is performed in a cloud computing environment; and</claim-text><claim-text>generating a continuous data stream by concatenating the processed segments according to the timing attributes corresponding to the processed segments.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving a first sequence of the plural segments from a continuous-to-segmented conversion function that partitions the first data stream from a continuous stream to a segmented stream.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising<claim-text>receiving a first sequence of the plural segments partitioned from the first data stream from a second media processing task of the workflow in the NBMP system.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first data stream is received from a NBMP source of the NBMP system, or from a third media processing task of the workflow in the NBMP system.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>storing the processed segments output from the first media processing task of the workflow into a second FIFO buffer in which each processed segment and the timing attributes associated with each processed segment form an entry of the second FIFO buffer, the timing attributes associated with each processed segment including a start time of the respective processed segment, a duration of the respective processed segment, and a length of the respective processed segment indicating a number of bytes in the respective processed segment.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the generating includes<claim-text>converting the entries stored in the second FIFO buffer to the continuous data stream without the timing attributes associated with each processed segment.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving a second sequence of second segments partitioned from a second data stream;</claim-text><claim-text>storing the second segments into a third FIFO buffer in which each second segment and attributes associated with each second segment form an entry of the third FIFO buffer, the attributes associated with each second segment including a start time of the respective second segment, a duration of the respective second segment, and a length of the respective second segment indicating a number of bytes in the respective second segment; and</claim-text><claim-text>processing the second segments output from the third FIFO buffer using a fourth media processing task of the workflow in the NBMP system wherein the second segments output from the third FIFO buffer are processed independently from each other,</claim-text><claim-text>wherein partitioning the first data stream into the plural segments is synchronized with partitioning the second data stream into the second segments such that each segment of the first data stream and a corresponding synchronized second segment of the second data stream correspond to a same time span.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein each segment of the first data stream and the corresponding synchronized second segment of the second data stream have a same start time in the respective first and second data streams.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. An apparatus, comprising:<claim-text>circuitry configured to:<claim-text>store entries in a first first-in first-out (FIFO) buffer, each entry of the first FIFO buffer comprises a respective segment of plural segments of a first data stream and timing attributes corresponding to the respective segment;</claim-text><claim-text>process the respective segments in entries output from the first FIFO buffer using a first media processing task of a workflow in a network-based media processing (NBMP) system, wherein the respective segments are processed independently from each other and the first media processing task is performed in a cloud computing environment; and</claim-text><claim-text>generate a continuous data stream by concatenating the processed segments according to the timing attributes corresponding to the processed segments.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the circuitry is further configured to:<claim-text>receive a first sequence of the plural segments from a continuous-to-segmented conversion function that partitions the first data stream from a continuous stream to a segmented stream.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the circuitry is further configured to:<claim-text>receive a first sequence of the plural segments partitioned from the first data stream from a second media processing task of the workflow in the NBMP system.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the first data stream is received from a NBMP source of the NBMP system, or from a third media processing task of the workflow in the NBMP system.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the circuitry is further configured to:<claim-text>store the processed segments output from the first media processing task of the workflow into a second FIFO buffer in which each processed segment and the timing attributes associated with each processed segment form an entry of the second FIFO buffer, the timing attributes associated with each processed segment including a start time of the respective processed segment, a duration of the respective processed segment, and a length of the respective processed segment indicating a number of bytes in the respective processed segment.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the circuitry is further configured to:<claim-text>convert the entries stored in the second FIFO buffer to the continuous stream without the timing attributes associated with each processed segment.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the circuitry is further configured to:<claim-text>receive a second sequence of second segments partitioned from a second data stream;</claim-text><claim-text>store the second segments into a third FIFO buffer in which each second segment and attributes associated with each second segment form an entry of the third FIFO buffer, the attributes associated with each second segment including a start time of the respective second segment, a duration of the respective second segment, and a length of the respective second segment indicating a number of bytes in the respective second segment; and</claim-text><claim-text>process the second segments output from the third FIFO buffer using a fourth media processing task of the workflow in the NBMP system wherein the second segments output from the third FIFO buffer are processed independently from each other,</claim-text><claim-text>wherein partitioning the first data stream into the plural segments is synchronized with partitioning the second data stream into the second segments such that each segment of the first data stream and a corresponding synchronized second segment of the second data stream correspond to a same time span.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein each segment of the first data stream and the corresponding synchronized second segment of the second data stream have a same start time in the respective first and second data streams.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A non-transitory computer-readable medium storing instructions that, when executed by a processor, cause the processor to perform a method, the method comprising:<claim-text>storing entries in a first first-in first-out (FIFO) buffer, each entry of the first FIFO buffer comprises a respective segment of plural segments of a first data stream and timing attributes corresponding to the respective segment;</claim-text><claim-text>processing the respective segments in entries output from the first FIFO buffer using a first media processing task of a workflow in a network-based media processing (NBMP) system, wherein the respective segments are processed independently from each other and the first media processing task is performed in a cloud computing environment; and</claim-text><claim-text>generating a continuous data stream by concatenating the processed segments according to the timing attributes corresponding to the processed segments.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, the method further comprising<claim-text>receiving a first sequence of the plural segments from a continuous-to-segmented conversion function that partitions the first data stream from a continuous stream to a segmented stream.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, the method further comprising<claim-text>receiving a first sequence of the plural segments partitioned from the first data stream from a second media processing task of the workflow in the NBMP system.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the first data stream is received from a NBMP source of the NBMP system, or from a third media processing task of the workflow in the NBMP system.</claim-text></claim></claims></us-patent-application>