<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006678A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006678</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17366904</doc-number><date>20210702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>L</subclass><main-group>7</main-group><subgroup>081</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>01</class><subclass>R</subclass><main-group>31</main-group><subgroup>317</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>L</subclass><main-group>7</main-group><subgroup>081</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>01</class><subclass>R</subclass><main-group>31</main-group><subgroup>31709</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Circuits and Methods to Alter a Phase Speed of an Output Clock</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Arm Limited</orgname><address><city>Cambridge</city><country>GB</country></address></addressbook><residence><country>GB</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Labbe</last-name><first-name>Benoit</first-name><address><city>Cambridge</city><country>GB</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In a particular implementation, a method to reduce noise/clock jitter and to generate a &#x201c;stretched&#x201d; output clock to optimize for jitter of the output clock is disclosed. The method includes: generating two or more clock phases upon detecting a transient voltage by a detector circuit, generating an output clock signal based on one of the two or more clock phases; and altering a phase speed of the output clock signal to correspond to a phase speed of an input clock signal.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="49.78mm" wi="158.75mm" file="US20230006678A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="230.72mm" wi="144.27mm" orientation="landscape" file="US20230006678A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="236.22mm" wi="164.17mm" orientation="landscape" file="US20230006678A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="236.05mm" wi="102.53mm" orientation="landscape" file="US20230006678A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="242.65mm" wi="134.62mm" orientation="landscape" file="US20230006678A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="236.30mm" wi="134.62mm" orientation="landscape" file="US20230006678A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="186.44mm" wi="160.95mm" file="US20230006678A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="186.94mm" wi="97.54mm" file="US20230006678A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="224.03mm" wi="150.88mm" file="US20230006678A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">I. FIELD</heading><p id="p-0002" num="0001">The present disclosure is generally related to circuit and methods to alter a phase speed of an output clock.</p><heading id="h-0002" level="1">II. DESCRIPTION OF RELATED ART</heading><p id="p-0003" num="0002">Advances in technology have resulted in smaller and more powerful computing devices. For example, a variety of portable personal computing devices, including wireless telephones, such as mobile and smart phones, tablets and laptop computers are small, lightweight, and easily carried by users. These devices can communicate voice and data packets over wireless networks. Further, many such devices incorporate additional functionality, such as a digital still camera, a digital video camera, a digital recorder, and an audio file player. Also, such devices can process executable instructions, including software applications, such as a web browser application, that can be used to access the Internet. As such, these devices can include significant computing and networking capabilities. Nevertheless, there is an ever increasing need for computing devices to run faster and/or with consuming less power.</p><p id="p-0004" num="0003">In one example, due to various timing failures, extraneous jitter (i.e., added noise) at the output of a digital system can be a significant issue in adaptive clocking circuits. In certain operations, a delayed locked loop (DLL) would add clock jitter to an input jitter of a master clock. Accordingly, each output phase of the DLL would be &#x201c;noisier&#x201d; than the input clock signal. Such added jitter cannot be filtered by a shifter circuit. Hence, there is a need in the art, to provide for adaptive clocking systems, circuits and methods to account for extraneous jitter, and keep it as low as possible, such that digital systems may run faster and/or with consuming less power.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">III. BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The present technique(s) will be described further, by way of example, with reference to embodiments thereof as illustrated in the accompanying drawings. It should be understood, however, that the accompanying drawings illustrate only the various implementations described herein and are not meant to limit the scope of various techniques, methods, systems, circuits or apparatuses described herein.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram implementable with example circuits and methods.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram implementable with example circuits and methods.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic block diagram implementable with example circuits and methods</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic block diagram implementable with example circuits and methods.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic block diagram implementable with example circuits and methods.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic block diagram implementable with example circuits and methods.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart of a particular illustrative aspect of example methods.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a schematic block diagram implementable with example circuits and methods.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0014" num="0013">Reference is made in the following detailed description to accompanying drawings, which form a part hereof, wherein like numerals may designate like parts throughout that are corresponding and/or analogous. It will be appreciated that the figures have not necessarily been drawn to scale, such as for simplicity and/or clarity of illustration. For example, dimensions of some aspects may be exaggerated relative to others. Further, it is to be understood that other embodiments may be utilized. Furthermore, structural and/or other changes may be made without departing from claimed subject matter. References throughout this specification to &#x201c;claimed subject matter&#x201d; refer to subject matter intended to be covered by one or more claims, or any portion thereof, and are not necessarily intended to refer to a complete claim set, to a particular combination of claim sets (e.g., method claims, apparatus claims, etc.), or to a particular claim. It should also be noted that directions and/or references, for example, such as up, down, top, bottom, and so on, may be used to facilitate discussion of drawings and are not intended to restrict application of claimed subject matter. Therefore, the following detailed description is not to be taken to limit claimed subject matter and/or equivalents.</p><heading id="h-0004" level="1">IV. DETAILED DESCRIPTION</heading><p id="p-0015" num="0014">According to one implementation of the present disclosure, a method to reduce noise/clock jitter and to generate a &#x201c;stretched&#x201d; output clock to optimize for jitter of the output clock is disclosed. The method includes: generating two or more clock phases upon detecting a transient voltage by a detector circuit, generating an output clock signal based on one of the two or more clock phases; and altering a phase speed of the output clock signal to correspond to a phase speed of an input clock signal.</p><p id="p-0016" num="0015">According to another implementation of the present disclosure, a circuit to reduce noise/clock jitter and to generate a &#x201c;stretched&#x201d; output clock to optimize for jitter of the output clock is disclosed. The circuit includes: a detector circuit to monitor a supply voltage for a transient voltage; upon detection of the transient voltage, an input phase circuit configured to generate two or more clock phases; a phase selector configured to generate an output clock signal from at least one of the two or more clock phases; and a speed controller circuit configured to alter a phase speed of the output clock signal to correspond to a phase speed of an input clock signal.</p><p id="p-0017" num="0016">According to another implementation of the present disclosure, a speed controller circuit to allow for the capacity to reduce noise/clock jitter and generate a &#x201c;stretched&#x201d; output clock to optimize for jitter of the output clock is disclosed. The speed controller circuit may include: an OR logic gate; a NOR logic gate; an AND logic gate; and a multiplexer. The speed controller circuit can be configured to determine whether an input signal from a detector circuit comprises a voltage level above a voltage threshold, and whether a selected phase speed is above a phase speed threshold.</p><p id="p-0018" num="0017">Particular implementations of the present disclosure are described below with reference to the drawings. In the description, common features are designated by common reference numbers throughout the drawings.</p><p id="p-0019" num="0018">Advantageously, inventive schemes and techniques provide for adaptive clocking circuitry to dynamically adjust a clock frequency of a digital system to respond to a supply voltage perturbation (i.e., a detected transient voltage, a noise signal). For example, in certain implementations, when a voltage droop is detected, inventive aspects allow for the capacity to &#x201c;carry on shifting&#x201d; (i.e., altering a phase speed) to a least noisy clock phase instead of &#x201c;staying&#x201d; on a random clock phase.</p><p id="p-0020" num="0019">As one advantage, upon detection of a droop voltage, inventive speed controller circuitry provides for the capability to slow down an output clock, such that the output clock &#x201c;stretches&#x201d; (and thus, the output clock's frequency is less than a frequency of the base clock).</p><p id="p-0021" num="0020">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a fine-grained adaptive clocking circuit <b>100</b> (i.e., system <b>100</b>) is shown. A master clock <b>170</b> (PLL_CLK) (e.g., 2-4 GHz) can be transmitted to the circuit <b>100</b> (as one example, from a Phase Locked Loop (PLL)) <b>110</b> and provide a clock signal <b>170</b> (PLL_CLK) for a droop detector <b>120</b> (droop_dtct) to monitor a supply voltage (Vdd_core) of a larger digital circuit (i.e., digital system). In an example, the digital system (not shown) would receive the adaptive clocking output clock <b>172</b> CPU_CLK (e.g., approximately 0.5 to 4 GHz).</p><p id="p-0022" num="0021">In certain implementations, a delayed locked loop (DLL) <b>130</b> can be configured to generate two or more (e.g., several) phases (i.e., DLL phases) from the PLL <b>110</b> to be transmitted to a phase selector circuit <b>140</b> (i.e., phase shifter). As illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in one example, the DLL circuit <b>130</b> is configured to receive the master clock <b>170</b> (PLL_CLK), and output eight phases, Phi<sub>DLL </sub>[0] to [7] (i.e., DLL phases). The phase selector circuit (i.e., shifter/mask) <b>140</b>, in turn, can be configured to generate a composite clock signal <b>171</b> (DDL_CLK) from the DLL phases. In one implementation, the composite clock signal <b>171</b> may be transmitted to a post scaler circuit <b>150</b> to generate the adaptive clocking output clock <b>172</b> (CPU_CLK).</p><p id="p-0023" num="0022">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, example input and output signals of the DLL circuit <b>130</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is shown. One input signal <b>210</b> is depicted as M<sub>clk</sub>, and eight different prospective output clock signals (i.e., output phases, output clock phases) <b>220</b> (e.g., <b>220</b>(<i>a</i>)-(<i>h</i>)) is depicted as Ph<sub>o </sub>to Ph<sub>7</sub>. In one example implementation, one period (T) of the clock can be divided into 8 segments (i.e., each of different delays). As illustrated, the rising edge of each of the output phases <b>220</b>(<i>a</i>)-<b>220</b>(<i>h</i>) correspond to each of the eight segments. In a particular operation, the phase selector circuit <b>140</b> would generate a rising edge of an output clock <b>172</b>, CPU_CLK, utilizing one of the DLL output phases <b>220</b>(<i>a</i>)-<b>220</b>(<i>h</i>). For example, the chosen phase would be randomly selected by a shifting operation when an adaptative clocking mechanism would be triggered (e.g., upon detection of a transient voltage on V<sub>DD</sub>). For example, the chosen phase would be randomly selected by the phase selector circuit (<b>140</b>) after triggering (e.g., upon detection of a transient voltage on V<sub>DD</sub>) of one or more adaptive clocking mechanism (e.g., to shift between the output clock phases).&#x201d;</p><p id="p-0024" num="0023">However, such an operation would be suboptimal as the jitter of the output clock <b>172</b> CPU_CLK can be as high as the jitter of the chosen phase of the DLL circuit <b>130</b>. Accordingly, this jitter would also have to be taken into account in digital circuit designs that receive, the output clock <b>172</b> CPU_CLK, as well as added to a timing margin as part of clock uncertainty. As an example, if phase 7 of an 8-phase DLL would present a worst-case minimum period jitter of 5 picoseconds (ps), then 5 ps must also be added to the timing margining during digital circuit design.</p><p id="p-0025" num="0024">Advantageously, the inventive aspects take into account that in the DLL circuit <b>133</b>, the phase &#x201c;noise&#x201d; (e.g., clock jitter) would increase with subsequent delay through a provided delay line (i.e., each additional segment of the period). Hence, each subsequent phase would be &#x201c;noisier&#x201d; than the preceding phase (e.g., phase &#x201c;7&#x201d; would be noisier than phase &#x201c;6&#x201d;, phase &#x201c;6&#x201d; would be noisier than phase &#x201c;5&#x201d;, etc.). As can be appreciated, the &#x201c;cleanest&#x201d; (i.e., least) noise would be the initial phase, phase &#x201c;0&#x201d;, which for example, may be close to (e.g., approximately equal to) a noise of level of the input clock, PLL_CLK <b>170</b>.</p><p id="p-0026" num="0025">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a block diagram of an adaptative clocking circuit <b>300</b> (i.e., system <b>300</b>) according to example implementations is shown. As illustrated, the circuit <b>300</b> includes a detector circuit <b>310</b>, an input phase circuit <b>330</b>, a phase selector circuit <b>340</b>, a speed controller circuit <b>320</b>. In certain implementations, the detector circuit <b>310</b> comprises a droop detector circuit (droop_dtct) that can be configured to monitor a supply voltage (Vdd) for an indication of a transient voltage, and output a detection signal <b>368</b> (i.e., [n:0], droop) to the speed controller circuit <b>350</b>. In some implementations, the detection signal <b>368</b> may be transmitted to a high-pass filter circuit <b>322</b> (e.g., an analog-to-digital converter) before a filtered detection signal <b>369</b> is transmitted to the speed controller circuit <b>350</b>.</p><p id="p-0027" num="0026">In certain operations, upon a detection of a transient voltage by the detection circuit <b>310</b>, the input phase circuit <b>330</b> can be configured to generate two or more (e.g., several, a plurality) of clock phases. In some operations, the input phase circuit <b>330</b> can be configured to receive a base clock (CLK) signal, and transmit two or more (e.g., eight, a plurality of) clock phases to the phase selector circuit <b>330</b>. In different implementations, the input phase circuit <b>330</b> can comprise a delayed lock loop circuit (DLL), a phased-locked loop (PLL), a frequency-locked loop (FLL) or an oscillator.</p><p id="p-0028" num="0027">As illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, in one example, input phase circuit <b>330</b> is configured to receive the base clock <b>370</b>, and output two or more input phases (i.e., [m:0], clock phases). The phase selector circuit (i.e., shifter/mask) <b>340</b>, in turn, can be configured to generate an output clock <b>372</b> from the input phases.</p><p id="p-0029" num="0028">In some additional implementations, the circuit <b>300</b> may further include a phase-locked loop (PLL) circuit (not shown) to transmit the base clock signal <b>370</b> to the input phase circuit <b>330</b>. In some implementations, the circuit <b>300</b> may further include a post scaler circuit (not shown) that is configured to receive an output clock signal <b>372</b> from the phase selector circuit <b>340</b>.</p><p id="p-0030" num="0029">In schemes and techniques as described herein, advantageously, the phase selector circuit <b>340</b> (i.e., shifter circuit) has the capacity to always settle on phase &#x201c;0&#x201d; of the input phase circuit <b>330</b>. For example, if after a transient voltage is detected at the detection circuit <b>320</b>, the phase selector circuit <b>340</b> may initially settle on phase &#x201c;4&#x201d;, for example, at random, the phase selector circuit <b>340</b> would carry on &#x201c;shifting&#x201d; (i.e., altering a phase speed of) the clock signal until the phase selector circuit <b>340</b> would reach phase &#x201c;0&#x201d;. Such an operation would occur irrespective of a droop detector signal ([n:0]) from the detection circuit <b>320</b>.</p><p id="p-0031" num="0030">For this instance, an overall penalty would delay the digital system by half a cycle. In such cases, a maximum penalty in doing so would be up to one lost cycle of CPU operation. Nevertheless, advantageously, if the input phase circuit <b>330</b> added clock jitter is 2% higher of a total clock period for a &#x201c;last&#x201d; input phase (e.g., DLL phase) than for an &#x201c;initial&#x201d; input phase (e.g., DLL phase), then the CPU may run 2% faster thank to a reduction of clock uncertainty. As such, inventive adaptive clocking circuit and methods as disclosed herein provide for circuits to run faster and/or with less power.</p><p id="p-0032" num="0031">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a diagram <b>400</b> of an speed controller circuit <b>410</b> (corresponding to speed controller circuit <b>350</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) and phase selector circuit <b>420</b> (corresponding to phase selector circuit <b>340</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) according to example implementations is shown. As illustrated, in an example operation, an example input droop signal <b>468</b> (i.e., a first input signal) is transmitted to the speed controller <b>410</b>. At decision block <b>412</b>, the speed controller <b>410</b> would determine whether the input droop signal <b>468</b> may be asserted (e.g., 2) (i.e., whether the input droop signal <b>468</b> includes a voltage level (i.e., a transient voltage) above a voltage threshold) or not (e.g., 0). If &#x201c;yes&#x201d; at the decision block <b>412</b>, the input signal <b>468</b> is provided (as a digital &#x201c;1&#x201d;) to an AND logic gate <b>416</b>. In alternative implementations, other equivalent circuit structures may be utilized (e.g., two consecutive NAND logic gates). If &#x201c;no&#x201d; at the decision block <b>412</b>, the first input signal <b>468</b> is provided as a first input (e.g., a digital &#x201c;0&#x201d;) to multiplexer <b>418</b> (e.g., a 2 to 1 multiplexer) (i.e., a controlled switch). Also provided, from the phase selector circuit <b>420</b>, is a phase selector signal <b>474</b> (i.e., a second input signal) (ph_sel as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, Setphase[n:0]) from the phase selector circuit <b>420</b>. At decision block <b>414</b>, the speed controller <b>410</b> would determine whether the phase selector signal <b>474</b> corresponds to (i.e., equals) the quietest phase (!=quietest) (e.g., phase &#x201c;0&#x201d;, the least &#x201c;noisy&#x201d; phase would be the voltage threshold). If &#x201c;yes&#x201d; at the decision block <b>414</b>, the second input signal <b>474</b> is provided to the AND logic gate <b>414</b>. If both of the first and second inputs signal <b>468</b>, <b>474</b> are &#x201c;yes&#x201d;, a selector input <b>475</b> would transmit a digital &#x201c;1&#x201d; to the multiplexer <b>418</b>, and the multiplexer <b>414</b> would output a digital &#x201c;1&#x201d; as the output signal <b>476</b> (inc as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) to the phase selector circuit <b>420</b>.</p><p id="p-0033" num="0032">In turn, in certain implementations, the phase selector circuit <b>420</b> would output the output clock signal <b>372</b> at a lower frequency than the base clock <b>370</b> until it outputs the phase of the output clock signal <b>371</b> corresponding to the &#x201c;least noisy&#x201d; phase. When, the least noisy phase of the clock signal <b>371</b> feeds the output clock signal <b>372</b>, the decision block <b>414</b> outputs a logic &#x201c;0&#x201d; that in turn, would &#x201c;toggle&#x201d; the &#x201c;AND&#x201d; logic gate <b>416</b> irrespective of the output of the decision block <b>412</b>. The multiplexer <b>418</b> may then output the input signal <b>468</b>. If the input signal <b>468</b> is a digital &#x201c;0&#x201d;, and the output of the decision block <b>414</b> is &#x201c;0&#x201d;, the phase selector input signal <b>476</b> (inc) would &#x201c;lock&#x201d; the phase selector <b>420</b> in a current state where the output clock <b>372</b> is triggered from the least noisy phase of the clocks <b>371</b>.</p><p id="p-0034" num="0033">As one example, in operation, in response to a detection of the input droop signal <b>468</b>, the speed controller <b>410</b> would slow down the output clock <b>372</b> so that the output clock <b>372</b> &#x201c;stretches&#x201d; and would have a frequency lower than the base clock <b>370</b>. If so, the output clock <b>372</b> would have a value of 1 (e.g., as a multiple of the frequency of the base clock <b>370</b>). However, as a result of voltage droop, the output clock would have a value of 0.7 or 0.8 (e.g., as a multiple of the frequency of the base clock <b>370</b>). Nevertheless, as a supply voltage (Vdd) would stabilize, there would no longer be any problematic voltage droop, and hence, no droop signal would be input to the speed controller circuit <b>410</b>. Correspondingly, the system <b>300</b> can return to a &#x201c;normal&#x201d; state where the frequency of the output clock <b>372</b> corresponds to (i.e., is approximately equivalent to) the frequency of the base clock <b>370</b>.</p><p id="p-0035" num="0034">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a diagram <b>500</b> corresponding to the diagram <b>400</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref> according to example implementations is shown. In contrast, to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in one implementation, the decision block <b>412</b> is represented by an &#x201c;OR&#x201d; logic gate <b>512</b> and the decision block <b>414</b> is represented by a &#x201c;NOR&#x201d; logic gate <b>514</b>. In alternative implementations, other equivalent circuit structures may be utilized for the decision blocks <b>412</b>, <b>414</b>. Hence, in a particular implementation, the speed controller circuit <b>510</b> (i.e., corresponding to the speed controller circuit <b>410</b>), configured to determine the quietest phase of the multiphase clock group to be phase &#x201c;0&#x201d;, can include: an OR logic gate <b>512</b>, a NOR logic gate <b>514</b>, an AND logic gate <b>516</b>, and a multiplexer <b>518</b> (i.e., a controlled switch). In an alternative implementation, a look-up table may be utilized. A look-up table can be built from a &#x201c;memory&#x201d; type element, or multiplexers. Alternatively, any of the logic function as described herein can be built solely with NAND gates, or solely with NOR gates according to another implementation.</p><p id="p-0036" num="0035">In certain implementations, the speed controller circuit <b>510</b> can be coupled to a set-path of the phase selector circuit <b>520</b> (i.e., corresponding to the phase selector circuit <b>420</b>). As illustrated, the circuit elements of the phase selector circuit <b>520</b> may be similar to other examples.</p><p id="p-0037" num="0036">In an example, a register transfer level (RTL) description of an speed controller circuit can include:</p><p id="p-0038" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="189pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>always@(d_fadc or d_bypass) begin</entry></row><row><entry/><entry>&#x2003;if(d_bypass) phase_shift_speed &#x3c;= 5&#x2032;h00;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[6]) phase_shift_speed &#x3c;= 5&#x2032;h07;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[5]) phase_shift_speed &#x3c;= 5&#x2032;h06;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[4]) phase_shift_speed &#x3c;= 5&#x2032;h05;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[3]) phase_shift_speed &#x3c;= 5&#x2032;h04;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[2]) phase_shift_speed &#x3c;= 5&#x2032;h03;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[1]) phase_shift_speed &#x3c;= 5&#x2032;h02;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[0]) phase_shift_speed &#x3c;= 5&#x2032;h01;</entry></row><row><entry/><entry>&#x2003;else phase_shift_speed &#x3c;= 5&#x2032;h00;</entry></row><row><entry/><entry>end</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0039" num="0037">In certain example implementations, an RTL description (i.e., RTL code) of the speed controller (<b>350</b>, <b>410</b>, <b>510</b> as illustrated with reference to <figref idref="DRAWINGS">FIGS. <b>3</b>, <b>4</b> and <b>5</b></figref>) according to example implementations includes:</p><p id="p-0040" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="196pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>assign low_noise_shift = ~mask_phi1[0];</entry></row><row><entry/><entry>always@(d_fadc or d_bypass or low_noise_shift) begin</entry></row><row><entry/><entry>&#x2003;if(d_bypass) phase_shift_speed &#x3c;= 5&#x2032;h00;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[6]) phase_shift_speed &#x3c;= 5&#x2032;h07;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[5]) phase_shift_speed &#x3c;= 5&#x2032;h06;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[4]) phase_shift_speed &#x3c;= 5&#x2032;h05;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[3]) phase_shift_speed &#x3c;= 5&#x2032;h04;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[2]) phase_shift_speed &#x3c;= 5&#x2032;h03;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[1]) phase_shift_speed &#x3c;= 5&#x2032;h02;</entry></row><row><entry/><entry>&#x2003;else if(d_fadc[0]) phase_shift_speed &#x3c;= 5&#x2032;h01;</entry></row><row><entry/><entry>&#x2003;else if(low_noise_shift) phase_shift_speed &#x3c;= 5&#x2032;h01;</entry></row><row><entry/><entry>&#x2003;else phase_shift_speed &#x3c;= 5&#x2032;h00;</entry></row><row><entry/><entry>end</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0041" num="0038">Advantageously, the RTL code may be a description of a digital hardware circuit and can be synthetized (i.e., transformed) into a digital circuit that performs the same operation.</p><p id="p-0042" num="0039">Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a diagram according to example implementations is shown. As illustrated, a state machine operation <b>600</b> of a phase selector circuit is depicted before and after certain inventive aspects as described herein. As illustrated, the state machine depicts an operation of the phase selector when no voltage droop has been detected. Accordingly, as shown, for example, eight different clocks are provided (ph0 to ph7) to trigger an adaptative clocking circuit. For instance, upon landing randomly on a particular phase (e.g., phase 3 as illustrated as ph3), without the benefit of the inventive aspects as described herein, the adaptive clocking circuit would remain on the same phase (e.g., ph3) (as shown by the dashed line for each phase). However, with implementation of the inventive circuits and methods as described herein, the adaptive clocking circuit would initially land on particular phase (e.g., ph3) and then, subsequently, shift phases in order (e.g., shift to ph4, then shift to ph5, then shift to ph6, then shift to ph7, then shift to ph0) until it reaches the least noisy phase (e.g., ph0) and would remain there (e.g., stay on ph0) (as shown by the solid lines for shifting from phase to phase) (i.e., incrementally altering the phase speed).</p><p id="p-0043" num="0040">Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a flowchart of an example method <b>700</b> (i.e., procedure) to reduce noise/clock jitter is shown. Advantageously, in various implementations, the method <b>700</b> depicts a methodology to generate a &#x201c;stretched&#x201d; output clock, and optimize for output clock jitter. The method <b>700</b> may be implemented with reference to circuit implementations and operations as depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>3</b>, <b>4</b> and <b>5</b></figref>, and/or combinations thereof</p><p id="p-0044" num="0041">At block <b>710</b>, the method includes upon detecting a transient voltage by a detector circuit, generating two or more clock phases. For instance, with reference to various implementations as described in with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>6</b></figref>, upon detecting a transient voltage by a detector circuit (e.g., <b>120</b>, <b>320</b>), two or more clock phases (e.g., Ph[0] to Ph[7]; [m:0]) can be generated.</p><p id="p-0045" num="0042">At block <b>720</b>, the method includes generating an output clock signal based on one of the two or more clock phases. For instance, with reference to various implementations as described in with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>6</b></figref>, an output clock signal (e.g., CPU_CLK, <b>172</b>, <b>372</b>) may be generated based on one of the two or more clock phases (e.g., Ph[0] to Ph[7]; [m:0]).</p><p id="p-0046" num="0043">At block <b>730</b>, the method includes altering a phase speed of the output clock signal to correspond to a phase speed of an input clock signal. For instance, with reference to various implementations as described in with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>6</b></figref>, a phase speed of the output clock signal (e.g., CPU_CLK, <b>172</b>, <b>372</b>) may be altered (i.e., shifted) ((e.g., shifting from ph(3) to ph(4), then to ph(5), then to ph(6), then to ph(7), and then finally to ph(0)) to correspond to a phase speed (e.g., ph(0)) of an input clock signal (e.g., base clock <b>370</b>).</p><p id="p-0047" num="0044"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates example hardware components in the computer system <b>800</b> that may be used to reduce noise clock jitter; and to generate a &#x201c;stretched&#x201d; output clock to optimize for jitter of the output clock. In certain implementations, the example computer system <b>800</b> (e.g., networked computer system and/or server) may include a circuit design tool <b>824</b> (i.e., an elective fine-grain adaptive clocking circuit design tool) and execute software based on the procedure as described with reference to the method <b>700</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. In certain implementations, the circuit design tool <b>824</b> may be included as a feature of an existing memory compiler software program.</p><p id="p-0048" num="0045">In some cases, the circuit design tool <b>824</b> may provide generated computer-aided physical layout designs for memory architecture. The procedure (as described with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>) may be stored as program code as instructions <b>817</b> in the computer readable medium of the storage device <b>816</b> (or alternatively, in memory <b>814</b>) that may be executed by the computer <b>810</b>, or networked computers <b>820</b>, <b>830</b>, other networked electronic devices (not shown) or a combination thereof. In certain implementations, each of the computers <b>810</b>, <b>820</b>, <b>830</b> may be any type of computer, computer system, or other programmable electronic device. Further, each of the computers <b>810</b>, <b>820</b>, <b>830</b> may be implemented using one or more networked computers, e.g., in a cluster or other distributed computing system.</p><p id="p-0049" num="0046">In certain implementations, the system <b>800</b> may be used with semiconductor integrated circuit (IC) designs that contain all standard cells, all blocks or a mixture of standard cells and blocks. In a particular example implementation, the system <b>800</b> may include in its database structures: a collection of cell libraries, one or more technology files, a plurality of cell library format files, a set of top design format files, one or more Open Artwork System Interchange Standard (OASIS/OASIS.MASK) files, and/or at least one EDIF file. The database of the system <b>800</b> may be stored in one or more of memory <b>814</b> or storage devices <b>816</b> of computer <b>810</b> or in networked computers <b>820</b>, <b>830</b>.</p><p id="p-0050" num="0047">The system <b>800</b> may perform the following functions automatically, with variable user input: generating two or more clock phases upon detecting a transient voltage by a detector circuit; generating an output clock signal based on one of the two or more clock phases; and altering (i.e., shifting) a phase speed of the output clock signal to correspond to a phase speed of an input clock signal. In some instances, such functions may be performed substantially via user input control. Additionally, such functions can be used in conjunction with the manual capabilities of the system <b>800</b> to produce the target results that are required by a designer.</p><p id="p-0051" num="0048">In one implementation, the computer <b>800</b> includes a processing unit <b>812</b> having at least one hardware-based processor coupled to a memory <b>814</b>. In certain implementations, the processing unit <b>812</b> may include one or more of a central processing unit (CPU), a graphical processing unit (GPU) or a neural processing unit (NPU). The memory <b>814</b> may represent random access memory (RAM) devices of main storage of the computer <b>810</b>, supplemental levels of memory (e.g., cache memories, non-volatile or backup memories (e.g., programmable or flash memories)), read-only memories, or combinations thereof. In addition to the memory <b>814</b>, the computer system <b>800</b> may include other memory located elsewhere in the computer <b>810</b>, such as cache memory in the processing unit <b>812</b>, as well as any storage capacity used as a virtual memory (e.g., as stored on a storage device <b>816</b> or on another computer coupled to the computer <b>810</b>).</p><p id="p-0052" num="0049">The computer <b>810</b> may further be configured to communicate information externally. To interface with a user or operator (e.g., a circuit design engineer), the computer <b>810</b> may include a user interface (I/F) <b>818</b> incorporating one or more user input devices (e.g., a keyboard, a mouse, a touchpad, and/or a microphone, among others) and a display (e.g., a monitor, a liquid crystal display (LCD) panel, light emitting diode (LED), display panel, and/or a speaker, among others). In other examples, user input may be received via another computer or terminal. Furthermore, the computer <b>810</b> may include a network interface (I/F) <b>815</b> which may be coupled to one or more networks <b>840</b> (e.g., a wireless network) to enable communication of information with other computers and electronic devices. The computer <b>860</b> may include analog and/or digital interfaces between the processing unit <b>812</b> and each of the components <b>814</b>, <b>815</b>, <b>816</b>, and <b>818</b>. Further, other non-limiting hardware environments may be used within the context of example implementations.</p><p id="p-0053" num="0050">The computer <b>810</b> may operate under the control of an operating system <b>826</b> and may execute or otherwise rely upon various computer software applications, components, programs, objects, modules, data structures, etc. (such as the programs associated with the procedure <b>700</b> and related software). The operating system <b>828</b> may be stored in the memory <b>814</b>. Operating systems include, but are not limited to, UNIX&#xae; (a registered trademark of The Open Group), Linux&#xae; (a registered trademark of Linus Torvalds), Windows&#xae; (a registered trademark of Microsoft Corporation, Redmond, Wash., United States), AIX&#xae; (a registered trademark of International Business Machines (IBM) Corp., Armonk, N.Y., United States) i5/OS&#xae; (a registered trademark of IBM Corp.), and others as will occur to those of skill in the art. The operating system <b>826</b> in the example of <figref idref="DRAWINGS">FIG. <b>8</b></figref> is shown in the memory <b>814</b>, but components of the aforementioned software may also, or in addition, be stored at non-volatile memory (e.g., on storage device <b>816</b> (data storage) and/or the non-volatile memory (not shown). Moreover, various applications, components, programs, objects, modules, etc. may also execute on one or more processors in another computer coupled to the computer <b>810</b> via the network <b>840</b> (e.g., in a distributed or client-server computing environment) where the processing to implement the functions of a computer program may be allocated to multiple computers <b>820</b>, <b>830</b> over the network <b>840</b>.</p><p id="p-0054" num="0051">In example implementations, circuit diagrams and representations have been provided in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>, whose redundant description has not been duplicated in the related description of analogous circuit diagrams and representations. It is expressly incorporated that the same layout diagrams with identical symbols and/or reference numerals are included in each of embodiments based on its corresponding figure(s).</p><p id="p-0055" num="0052">Although one or more of <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref> may illustrate systems, apparatuses, or methods according to the teachings of the disclosure, the disclosure is not limited to these illustrated systems, apparatuses, or methods. One or more functions or components of any of <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref> as illustrated or described herein may be combined with one or more other portions of another of <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>. Accordingly, no single implementation described herein should be construed as limiting and implementations of the disclosure may be suitably combined without departing form the teachings of the disclosure.</p><p id="p-0056" num="0053">Aspects of the present disclosure may be incorporated in a system, a method, and/or a computer program product. The computer program product may include a computer-readable storage medium (or media) having computer-readable program instructions thereon for causing a processor to carry out aspects of the present disclosure. The computer-readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer-readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer-readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer-readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire. For example, the memory <b>814</b>, the storage device <b>816</b>, or both, include tangible, non-transitory computer-readable media or storage devices.</p><p id="p-0057" num="0054">Computer-readable program instructions described herein can be downloaded to respective computing/processing devices from a computer-readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer-readable program instructions from the network and forwards the computer-readable program instructions for storage in a computer-readable storage medium within the respective computing/processing device.</p><p id="p-0058" num="0055">Computer-readable program instructions for carrying out operations of the present disclosure may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer-readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some implementations, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer-readable program instructions by utilizing state information of the computer-readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present disclosure.</p><p id="p-0059" num="0056">Aspects of the present disclosure are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer-readable program instructions.</p><p id="p-0060" num="0057">These computer-readable program instructions may be provided to a processor of a general-purpose computer, a special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus. The machine is an example of means for implementing the functions/acts specified in the flowchart and/or block diagrams. The computer-readable program instructions may also be stored in a computer-readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer-readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the functions/acts specified in the flowchart and/or block diagrams.</p><p id="p-0061" num="0058">The computer-readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to perform a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagrams.</p><p id="p-0062" num="0059">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various implementations of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in a block in a diagram may occur out of the order noted in the figures. For example, two blocks shown in succession may be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowcharts, and combinations of blocks in the block diagrams and/or flowcharts, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0063" num="0060">In the following description, numerous specific details are set forth to provide a thorough understanding of the disclosed concepts, which may be practiced without some or all of these particulars. In other instances, details of known devices and/or processes have been omitted to avoid unnecessarily obscuring the disclosure. While some concepts will be described in conjunction with specific examples, it will be understood that these examples are not intended to be limiting.</p><p id="p-0064" num="0061">Unless otherwise indicated, the terms &#x201c;first&#x201d;, &#x201c;second&#x201d;, etc. are used herein merely as labels, and are not intended to impose ordinal, positional, or hierarchical requirements on the items to which these terms refer. Moreover, reference to, e.g., a &#x201c;second&#x201d; item does not require or preclude the existence of, e.g., a &#x201c;first&#x201d; or lower-numbered item, and/or, e.g., a &#x201c;third&#x201d; or higher-numbered item.</p><p id="p-0065" num="0062">Reference herein to &#x201c;one example&#x201d; means that one or more feature, structure, or characteristic described in connection with the example is included in at least one implementation. The phrase &#x201c;one example&#x201d; in various places in the specification may or may not be referring to the same example.</p><p id="p-0066" num="0063">Illustrative, non-exhaustive examples, which may or may not be claimed, of the subject matter according to the present disclosure are provided below. Different examples of the device(s) and method(s) disclosed herein include a variety of components, features, and functionalities. It should be understood that the various examples of the device(s) and method(s) disclosed herein may include any of the components, features, and functionalities of any of the other examples of the device(s) and method(s) disclosed herein in any combination, and all of such possibilities are intended to be within the scope of the present disclosure. Many modifications of examples set forth herein will come to mind to one skilled in the art to which the present disclosure pertains having the benefit of the teachings presented in the foregoing descriptions and the associated drawings.</p><p id="p-0067" num="0064">Therefore, it is to be understood that the present disclosure is not to be limited to the specific examples illustrated and that modifications and other examples are intended to be included within the scope of the appended claims. Moreover, although the foregoing description and the associated drawings describe examples of the present disclosure in the context of certain illustrative combinations of elements and/or functions, it should be appreciated that different combinations of elements and/or functions may be provided by alternative implementations without departing from the scope of the appended claims. Accordingly, parenthetical reference numerals in the appended claims are presented for illustrative purposes only and are not intended to limit the scope of the claimed subject matter to the specific examples provided in the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>upon detecting, by a detector circuit a transient voltage, generating two or more clock phases;</claim-text><claim-text>generating an output clock signal based on one of the two or more clock phases; and</claim-text><claim-text>altering a phase speed of the output clock signal to correspond to a phase speed of an input clock signal.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the phase speed is altered to reduce a phase noise of an output clock signal based on a phase noise of the input clock signal.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the phase speed is altered to correspond to an approximate level of noise of an input clock signal.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the phase speed of the output clock signal is altered based on determining the phase speed to be above a phase speed threshold.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the phase speed threshold corresponds to a phase speed of the input clock signal.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein altering the phase speed comprises shifting from a first clock phase to a second clock phase, wherein the second clock phase comprises less noise than the first clock phase.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the second clock phase comprises a least noisy clock phase.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein altering the phase speed comprises shifting from a second clock phase to a third clock phase, wherein the third clock phase comprises less noise than the second clock phase. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the third clock phase comprises a least noisy clock phase.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the plurality of clock phases corresponds to a different delays of a clock period.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the plurality of clock phases is configured to initialize a leading edge of the output clock signal.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the two or more clock phases comprises a plurality of clock phases of a multiphase clock grouping.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A circuit comprising:<claim-text>a detector circuit to monitor a supply voltage for a transient voltage;</claim-text><claim-text>upon detection of the transient voltage, an input phase circuit configured to generate two or more clock phases;</claim-text><claim-text>a phase selector configured to generate an output clock signal from at least one of the two or more clock phases; and</claim-text><claim-text>a speed controller circuit configured to alter a phase speed of the output clock signal to correspond to a phase speed of an input clock signal.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The circuit of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:<claim-text>a phase-locked loop circuit configured to provide a base clock signal to the input phase circuit.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The circuit of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the speed controller circuit comprises: an OR logic gate, a NOR logic gate, an AND logic gate, and a multiplexer.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The circuit of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the speed controller circuit is configured to determine whether an input signal from a detector circuit comprises a voltage level above a voltage threshold, and whether the phase speed is above a phase speed threshold.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein altering the phase speed comprises shifting from a first clock phase to a second clock phase, wherein the second clock phase comprises less noise than the first clock phase.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the second clock phase comprises a least noisy clock phase.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A speed controller circuit comprising:<claim-text>an OR logic gate;</claim-text><claim-text>a NOR logic gate;</claim-text><claim-text>an AND logic gate;</claim-text><claim-text>and a multiplexer, wherein the speed controller circuit is configured to determine whether an input signal from a detector circuit comprises a voltage level above a voltage threshold, and whether a selected phase speed is above a phase speed threshold.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The speed controller circuit of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the speed controller circuit is configured to receive input signal corresponding to a detection signal and a phase selection signal, and configured to transmit an output signal to verify a least noisy output clock.</claim-text></claim></claims></us-patent-application>