<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006941A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006941</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17365960</doc-number><date>20210701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>805</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>46</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>365</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>4641</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>45558</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2009</main-group><subgroup>45595</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">HYPERVISOR IMPLEMENTED PMTU FUNCTIONALITY AND FRAGMENTATION IN A CLOUD DATACENTER</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>VMware, Inc.</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Natarajan</last-name><first-name>Vijai Coimbatore</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Parmar</last-name><first-name>Ankit</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The method of some embodiments controls maximum transmission unit (MTU) size for transmitting data messages of a flow through a gateway of a datacenter. The method, on a host computer operating in the datacenter and executing a source machine for a data message flow, receives an identifier of an MTU size associated with the gateway operating in the datacenter. The method receives, from the source machine, a data message of the flow to be sent through the gateway, where the data message comprises a frame that exceeds the identified MTU size. After determining that the frame includes an indicator specifying that the frame should not be fragmented, the method directs the machine to use smaller size frames in the data messages of the flow. After receiving smaller size frames for the data messages of the flow, the method forwards the data messages to the gateway.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="111.68mm" wi="158.75mm" file="US20230006941A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="237.24mm" wi="173.74mm" orientation="landscape" file="US20230006941A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="226.65mm" wi="174.41mm" file="US20230006941A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="210.82mm" wi="154.94mm" file="US20230006941A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="210.82mm" wi="155.28mm" file="US20230006941A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="210.82mm" wi="155.19mm" file="US20230006941A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="166.71mm" wi="149.18mm" file="US20230006941A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="229.02mm" wi="173.23mm" orientation="landscape" file="US20230006941A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="192.70mm" wi="144.70mm" orientation="landscape" file="US20230006941A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">In a datacenter (e.g., a private cloud datacenter operating on a public/provider cloud datacenter), there are several options for machines inside the datacenter to connect to machines outside the datacenter, sometimes called &#x201c;north-south connectivity&#x201d; (e.g., namely internet connectivity, provider services connectivity, and on-premise connectivity). Data messages are sent in networks as frames of data. Different network connections allow different maximum transmission unit (MTU) sizes for frames. The internet connectivity path typically has a maximum-supported MTU size of 1500 (e.g., each frame must be at most 1500 bytes). The provider connectivity services and on-premise connectivity paths typically have support for larger frames. Moreover, the datacenter topologies are usually prescriptive topologies (i.e., predefined topologies). The topologies do not typically change with each administrator (i.e., administrator of the public cloud datacenter who operates the private cloud datacenter).</p><p id="p-0003" num="0002">In some prior art systems (e.g., IP4 network systems), when a data message is sent with frames that are larger than the smallest MTU size of any router in the path from the source to the destination of the data message, the first router along the path whose MTU size is exceeded by the frame will either break the frame down into smaller frames that are equal to or less than the MTU size of that router (if the frame does not include an indicator that the frame should not be broken down) or drops the packet and sends a &#x201c;needs fragmentation&#x201d; message (e.g., an Internet Control Message Protocol (ICMP)) back to the source machine of the packet. The message includes the MTU size of the router that dropped the packet, so that the source machine of the packet can fragment the data message with fragments at or below the MTU size of the router. In some prior art systems, in order to expedite data message transmission, a path MTU (PMTU) discovery process is performed by a gateway of a datacenter to determine the smallest MTU size of any router, switch, etc., along a network path between the source machine and the destination machine.</p><p id="p-0004" num="0003">The datacenter bring-up (initialization process) is also typically automated, and workflows are usually API driven. Hence, the underlay network connectivity is generally uniform within any given datacenter. In such a scenario, the cloud service application (network manager of the datacenter) in the datacenter that is interfacing with a cloud provider would have settings for the maximum-supported MTU size for each different connectivity option. Usually, for provider connectivity services (e.g., connections to Software as a Service (SaaS)) provided by the provider of the public cloud network, the cloud provider would publish the maximum-supported MTU size for the provider services. For on-premises connectivity (e.g., high-speed connections to other datacenters of the administrator), the administrator would know what is the maximum-supported MTU size for on-premises connectivity.</p><p id="p-0005" num="0004">In the prior art, the PMTU discovery (and fragmentation and re-assembly functionality) for every machine (e.g., virtual machine, container, pod, etc., operating on a host computer of the datacenter) is handled by a gateway (sometimes called an edge device) of the datacenter. The MTU sizes for various uplinks (outgoing connection options) for the gateway would generally be discovered by the gateway using a PMTU discovery process known in the art. Such prior art examples include sending large frames through an uplink with &#x201c;don't fragment&#x201d; indicators, receiving replies from intermediate devices along the network path that fragmentation is needed (e.g., an &#x201c;ICMP-fragmentation needed&#x201d; packet), sending frames of the indicated size, and repeating the process until a frame is sent that is small enough to pass through each intermediate hop in the path and reach the final destination. The gateway in the prior art is a single device or virtual device that handles data forwarding into and out of the datacenter. Being the sole handler of the PMTU functionality for the datacenter is a large load on the gateway. Therefore, there is a need in the art for a more distributed system for handling the PMTU functionality of a datacenter.</p><heading id="h-0002" level="1">BRIEF SUMMARY</heading><p id="p-0006" num="0005">In a datacenter that sends data messages to uplinks through a gateway of the datacenter, when an administrator knows what the maximum-supported maximum transmission unit (MTU) size is for a particular uplink (e.g., an on-premises (datacenter-to-datacenter) environment or for provider services uplink), then there is no need to do path MTU (PMTU) discovery by sending packets all the way through the on-premises environment or to the provider. The PMTU functionality, fragmentation, and re-assembly can be performed within the datacenter itself. For example, the method of some embodiments provides PMTU functionality, fragmentation, and re-assembly inside hypervisors operating on host computers of the datacenter, rather than having a gateway of the datacenter handle the PMTU functionality, fragmentation, and re-assembly.</p><p id="p-0007" num="0006">The method of some embodiments controls the MTU size for transmitting data messages of a flow through a gateway of a datacenter. The method, on a host computer operating in the datacenter and executing a source machine for a data message flow, receives an identifier of an MTU size associated with the gateway operating in the datacenter. The method receives, from the source machine, a data message of the flow to be sent through the gateway, where the data message comprises a frame that exceeds the identified MTU size. After determining that the frame includes an indicator specifying that the frame should not be fragmented, the method directs the machine to use smaller-size frames in the data messages of the flow. After receiving smaller-size frames for the data messages of the flow, the method forwards the data messages to the gateway. In some embodiments, the gateway has a set of one or more uplink interfaces, and the MTU size is associated with a first uplink interface of the gateway. Some embodiments of the method are performed by a hypervisor of the host computer.</p><p id="p-0008" num="0007">In the method of some embodiments, there are multiple flows, multiple uplinks, and multiple MTU sizes, and the second uplink interface of the gateway is associated with a larger, second MTU size. The method of such embodiments, receives, from the source machine, a data message of a second flow to be sent to the second uplink of the gateway, wherein the data message comprises a frame that exceeds the first MTU size but not the second MTU size. Based on the frame of the received data message of the second flow being smaller than the second MTU size, the method forwards the data messages of the second flow to the gateway for forwarding along the second uplink interface.</p><p id="p-0009" num="0008">Some embodiments have multiple flows sent through the same uplink. The method of such embodiments receives, from the source machine, a data message of a second flow to be forwarded along the first uplink interface. The received data message of the second flow includes a frame that does not exceed the identified MTU size. Based on the frame of the received data message of the second flow being smaller than the MTU size, the method forwards the data messages of the second flow to the gateway for forwarding along the first uplink interface. The first uplink may be an uplink to the internet. In some embodiments, the datacenter is a first datacenter, and the first uplink is a connection to a second datacenter.</p><p id="p-0010" num="0009">In some embodiments, in addition to a flow with an indicator specifying that the frame of the flow should not be fragmented, the method also receives, from the source machine, a data message of a second flow to be sent to the gateway. The received data message of the second flow also includes a frame that exceeds the identified MTU size. The method determines that the frame of the received data message of the second flow does not include an indicator specifying that the frame should not be fragmented. The method divides the data frame of the received data message of the second flow into two or more fragmented data frames smaller than or equal to the MTU size and forwards the fragmented data frames in two or more data messages to the gateway.</p><p id="p-0011" num="0010">The machine, in some embodiments, is one of a virtual machine, a pod, or a container of a container network. The datacenter, in some embodiments, is a cloud data center. The cloud datacenter may be a virtual private cloud (VPC) datacenter operating in a public cloud datacenter. In some such embodiments, the gateway is implemented by a machine of the VPC datacenter. In some such embodiments, the gateway may have an uplink to services of the public cloud datacenter and the MTU size is associated with an uplink to services of the public cloud datacenter.</p><p id="p-0012" num="0011">The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly, to understand all of the embodiments described by this document, a full review of the Summary, the Detailed Description, the Drawings, and the Claims is needed. Moreover, the claimed subject matters are not to be limited by the illustrative details in the Summary, the Detailed Description, and the Drawings, but rather are to be defined by the appended claims, because the claimed subject matters can be embodied in other specific forms without departing from the spirit of the subject matters.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012">The novel features of the invention are set forth in the appended claims. However, for purposes of explanation, several embodiments of the invention are set forth in the following figures.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a datacenter of some embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> conceptually illustrates a process of some embodiments for handling PMTU functionality and fragmentation operations.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a fragmentation operation of a source machine sending an oversized frame with a &#x201c;do not fragment&#x201d; indicator to a hypervisor.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a fragmentation operation of a source machine sending an oversized frame without a &#x201c;do not fragment&#x201d; indicator to a hypervisor.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a fragmentation operation of a source machine sending a correct-sized frame to a hypervisor.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>6</b></figref> conceptually illustrates a process of some embodiments for sending configuration data to the hypervisors of the datacenter.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a GUI of some embodiments that allows an administrator to set MTU size values for uplinks associated with a gateway and associate destination addresses with specific uplinks.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>8</b></figref> conceptually illustrates a computer system with which some embodiments of the invention are implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0022" num="0021">In the following detailed description of the invention, numerous details, examples, and embodiments of the invention are set forth and described. However, it will be clear and apparent to one skilled in the art that the invention is not limited to the embodiments set forth and that the invention may be practiced without some of the specific details and examples discussed.</p><p id="p-0023" num="0022">In a datacenter that sends data messages to uplinks through a gateway of the datacenter, when an administrator knows what the maximum-supported maximum transmission unit (MTU) size is for a particular uplink, (e.g., an on-premises (datacenter to datacenter) environment or for provider services uplink), then there is no need to do path MTU (PMTU) discovery by sending packets all the way through the on-premises environment or to the provider. The PMTU functionality, fragmentation, and re-assembly can be performed within the datacenter itself. For example, the method of some embodiments executes PMTU functionality, fragmentation, and re-assembly inside hypervisors operating on host computers of the datacenter, rather than having a gateway of the datacenter handle the PMTU functionality, fragmentation, and re-assembly.</p><p id="p-0024" num="0023">The method of some embodiments controls the MTU size for transmitting data messages of a flow through a gateway of a datacenter. The method, on a host computer operating in the datacenter and executing a source machine for a data message flow, receives an identifier of an MTU size associated with the gateway operating in the datacenter. The method receives, from the source machine, a data message of the flow to be sent through the gateway, where the data message comprises a frame that exceeds the identified MTU size. After determining that the frame includes an indicator specifying that the frame should not be fragmented, the method directs the machine to use smaller-size frames in the data messages of the flow. After receiving smaller-size frames for the data messages of the flow, the method forwards the data messages to the gateway. In some embodiments, the gateway has a set of one or more uplink interfaces, and the MTU size is associated with a first uplink interface of the gateway. The method of some embodiments is performed by a hypervisor of the host computer.</p><p id="p-0025" num="0024">In the method of some embodiments, there are multiple flows, multiple uplinks, and multiple MTU sizes, and the second uplink interface of the gateway is associated with a larger, second MTU size. The method of such embodiments, receives, from the source machine, a data message of a second flow to be sent to the second uplink of the gateway, wherein the data message comprises a frame that exceeds the first MTU size but not the second MTU size. Based on the frame of the received data message of the second flow being smaller than the second MTU size, the method forwards the data messages of the second flow to the gateway for forwarding along the second uplink interface.</p><p id="p-0026" num="0025">Some embodiments have multiple flows sent through the same uplink. The method of such embodiments receives, from the source machine, a data message of a second flow to be forwarded along the first uplink interface. The received data message of the second flow includes a frame that does not exceed the identified MTU size. Based on the frame of the received data message of the second flow being smaller than the MTU size, the method forwards the data messages of the second flow to the gateway for forwarding along the first uplink interface. The first uplink may be an uplink to the internet. In some embodiments, the datacenter is a first datacenter and the first uplink is a connection to a second datacenter.</p><p id="p-0027" num="0026">In some embodiments, in addition to a flow with an indicator specifying that the frame of the flow should not be fragmented, the method also receives, from the source machine, a data message of a second flow to be sent to the gateway. The received data message of the second flow also includes a frame that exceeds the identified MTU size. The method determines that the frame of the received data message of the second flow does not include an indicator specifying that the frame should not be fragmented. The method divides the data frame of the received data message of the second flow into two or more fragmented data frames smaller than or equal to the MTU size and forwards the fragmented data frames in two or more data messages to the gateway.</p><p id="p-0028" num="0027">The machine, in some embodiments, is one of a virtual machine, a pod, or a container of a container network. The datacenter, in some embodiments, is a cloud data center. The cloud datacenter may be a virtual private cloud (VPC) datacenter operating in a public cloud datacenter. In some such embodiments, the gateway is implemented by a machine of the VPC datacenter. In some such embodiments, the gateway may have an uplink to services of the public cloud datacenter and the MTU size is associated with an uplink to services of the public cloud datacenter.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a datacenter <b>100</b> of some embodiments. The datacenter <b>100</b> includes multiple host computers <b>105</b>, a computer <b>150</b> that implements software for controlling the logical elements of the datacenter, and a gateway <b>175</b>. Each host computer <b>105</b> includes a hypervisor <b>115</b> with a virtual distributed router <b>120</b>. Each host computer <b>105</b> implements one or more machines <b>125</b> (e.g., virtual machines (VMs), containers or pods of a container network, etc.). The computer <b>150</b> may be another host computer, a server, or some other physical or virtual device in the datacenter. Computer <b>150</b> includes a network manager <b>155</b> (sometimes called a &#x201c;software defined datacenter manager&#x201d;) and a network manager interface <b>160</b>. Each computer <b>105</b> and <b>150</b> has a network interface card <b>130</b> that connects to a switch <b>165</b> (e.g., a physical or logical switch) of the datacenter <b>100</b>. The switch <b>165</b> routes data messages between the computers <b>105</b> and <b>150</b> and between the computers <b>105</b> and <b>150</b> and the gateway <b>175</b> through the port <b>170</b> (e.g., a physical or logical port) of the gateway <b>175</b>. The gateway <b>175</b> then sends data messages out through one or more uplinks (e.g., an internet uplink, a direct datacenter uplink, a provider services uplink, etc.).</p><p id="p-0030" num="0029">One of ordinary skill in the art will understand that the uplinks in some embodiments are not separate physical connections, but are conceptual descriptions of different types of communications paths that data messages will pass through, given the source and destination addresses of the data messages. In some embodiments, the hypervisor <b>115</b> or a component of the hypervisor <b>115</b> will maintain a list (or database) of addresses or address ranges that a router, switch, or other element uses to determine which uplink a data message will be sent through based on its destination address and/or some other characteristic of the data message. For example, in some embodiments, the hypervisor <b>115</b> or a virtual distributed router (VDR) <b>120</b> of the hypervisor <b>115</b> performs a policy-based routing (PBR) lookup of route endpoints (e.g., in a list or database supplied by the network manager <b>155</b>). The PBR lookup is used to determine which &#x201c;uplink&#x201d; the data message will travel through based on the destination address (and/or the source address in some embodiments) of the data message flow. In some embodiments, the PBR lookup table includes rules that match both the source and destination endpoints when determining the uplink that applies to a data message. However, in other embodiments that use a PBR lookup table, the source address of the data message is not relevant because whatever the source address is, it will be a source inside the datacenter <b>100</b> (e.g., a machine on a host of the datacenter <b>100</b>) and thus the uplink that a data message flow will use outside the datacenter <b>100</b> does not depend on the specific source address of the flow.</p><p id="p-0031" num="0030">In some embodiments, the PBR lookup is performed using a match/action algorithm on a PBR lookup table (of match criteria and corresponding actions) with the match being determined based on the destination address of a data message frame and/or other characteristics of the data message frame (e.g., a source address of the data message), and the action is to use a particular uplink's MTU size when determining whether the frames of the data message are too big. In other embodiments, the VDR <b>120</b> or hypervisor <b>115</b> receives specific uplink data for each match, and then uses that uplink data to populate the actions for that match with the MTU size values to use for each match criteria. That is, the PBR lookup table may be populated with MTU size values when data identifying the endpoints of routes and their corresponding uplinks arrives, rather than the uplink itself being stored in the table. In some embodiments, VDR data used to generate the PBR lookup table is provided by a network manager <b>155</b>. A process for providing VDR data will be further described below with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0032" num="0031">An internet uplink's MTU size will generally remain at <b>1500</b>, the standard MTU size for the internet. In some embodiments, the datacenter <b>100</b> operates as a virtual private cloud (VPC) operating as a logically isolated section of a public cloud datacenter (e.g., an Amazon Web Services (AWS) datacenter). In such embodiments, the public cloud datacenter may offer various SaaS options (e.g., data backup or other storage, security, etc.). In some cases, an uplink to the provider services may have a higher (or lower) MTU size than the internet uplink (e.g., an MTU size of 8,000, 9,000, or some other value). In some datacenters, the datacenter will include a high-speed uplink to one or more other datacenters (e.g., other private datacenters on other VPCs of the public cloud datacenter, other datacenters elsewhere in a different building, city, state, etc.). These high-speed links are referred to as on-premises links and may also have a higher (or lower) MTU size than the internet uplink (e.g., an MTU size of 8,000, 9,000, or some other value).</p><p id="p-0033" num="0032">The hypervisor <b>115</b> is computer software, firmware or hardware operating on a host computer <b>105</b> that creates and runs machines <b>125</b> on the host (e.g., virtual machines, containers, pods, etc.). In the embodiment of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the hypervisor <b>115</b> includes a VDR <b>120</b> that routes data messages between machines <b>125</b> within the host computer <b>105</b> and between the machines <b>125</b> and the NIC <b>130</b> of the host computer <b>105</b>. The hypervisors <b>115</b> of some embodiments of the invention are configured by commands from a network manager <b>155</b>.</p><p id="p-0034" num="0033">The network manager <b>155</b> provides commands to network components of the datacenter <b>100</b> to implement logical operations of the datacenter (e.g., implement machines on the host computers, change settings on hypervisors, etc.). The network manager <b>155</b> receives instructions from the network manager interface <b>160</b> that provides a graphical user interface (GUI) to an administrator of the datacenter <b>100</b> and receives commands and/or data input from the datacenter administrator. In some embodiments, this GUI is provided through a web browser used by a datacenter administrator (e.g., at a separate location from the datacenter <b>100</b>). In other embodiments, a dedicated application at the administrator's location displays data received from the network manager interface <b>160</b>, receives the administrator's commands/data, and sends the commands/data through the GUI to the network manager <b>155</b> through the network manager interface <b>160</b>. Such a GUI will be further described below with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0035" num="0034">The received commands in some embodiments include commands to the hypervisors <b>115</b>, of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, to supply MTU size values for one or more uplinks of the gateway <b>175</b>. The hypervisor <b>115</b> then ensures that frames of data messages sent to the gateway <b>175</b> are smaller than or equal to the MTU size of the uplink that the data messages are being sent through. In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the command connections are illustrated separately from the data connections for clarity, but one of ordinary skill in the art will understand that the command messages may be sent, part way or entirely, on communications routes (e.g., physical or virtual connections) that are used by data messages.</p><p id="p-0036" num="0035">In some embodiments of the invention, the hypervisors <b>115</b> receive an MTU size for each uplink of the gateway <b>175</b> and configure the VDRs <b>120</b> to perform a PMTU process that ensures that packets sent to an uplink of the gateway <b>175</b> are equal to or smaller in size than the configured MTU size for that uplink. In the illustrated embodiment, the VDR <b>120</b> is part of the hypervisor <b>115</b>, however, in other embodiments, the VDR <b>120</b> is implemented separately from the hypervisor <b>115</b>. In such embodiments, the VDR <b>120</b> may be configured by the hypervisor <b>115</b>, by the network manager <b>155</b> directly, or by some other system.</p><p id="p-0037" num="0036">After being configured, the VDR <b>120</b> in some embodiments receives data messages made of multiple frames of data from the machines <b>125</b>. The VDR <b>120</b> then ensures that the frames of the data messages sent to the gateway <b>175</b> are equal to or smaller in size (e.g., number of bytes) than the configured MTU size for the uplink through which the data message is being sent. A process of some embodiments for ensuring that a data message uses frames equal to or smaller in size than the configured MTU size for the uplink that the data message is being sent through is described in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0038" num="0037">The gateway <b>175</b> receives the data message frames from the machines <b>125</b> on the host computers <b>105</b> and sends the data out of the datacenter <b>100</b> through a communications link (e.g., a physical or virtual router, etc.). The gateway <b>175</b> of some embodiments is hardware, software, firmware, or some combination of the above. In some embodiments, the gateway <b>175</b> may be implemented as a machine or on a machine of a host computer. One of ordinary skill in the art will understand that sending a data message out on a particular uplink does not mean sending it on a physically or logically separate connection from the gateway, but rather the uplinks are descriptions of the type of network connection that the data messages will pass through after they leave the datacenter <b>100</b>.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>2</b></figref> conceptually illustrates a process <b>200</b> of some embodiments for handling PMTU functionality and fragmentation operations. In some embodiments, the process <b>200</b> is performed by a hypervisor operating on a host computer (e.g., by one or more modules or sets of software code that implement the hypervisor). In other embodiments, the process <b>200</b> is performed by a different element or elements operating on the host computer. The process <b>200</b> begins by receiving (at <b>205</b>) an identifier of an MTU size associated with a gateway operating in the datacenter. The MTU size in some embodiments is received from a network manager. In some embodiments, the MTU size for each uplink is pre-configured in the network manager, in other embodiments, the MTU size is specified by an administrator of the datacenter (e.g., through a GUI used with the network manager).</p><p id="p-0040" num="0039">The process <b>200</b> then receives (at <b>210</b>), from the source machine, a frame of a data message of a flow to be sent to the gateway. In some embodiments, the data message is received at a VDR of a hypervisor from a virtual MC (VNIC) of the source machine. The process <b>200</b> then determines (at <b>215</b>) whether the frame is too big. That is, whether the size of the frame in bytes exceeds the configured MTU size for the uplink that the data message will use. As mentioned above, the uplink is not a physical connection out of the datacenter, but instead specifies which of multiple classifications of network routes the data message will take when being routed to its destination address.</p><p id="p-0041" num="0040">In some embodiments, determining whether a frame is too big includes determining which uplink the frame will be sent through (e.g., by performing a PBR lookup to compare the destination address of the data message flow to addresses in a list or database of uplinks used when sending data messages to particular addresses or ranges of addresses and/or by using other information in the data frame). If the frame is determined (at <b>215</b>) to not be too big (i.e., to be equal in size to or smaller than the MTU size of the uplink that the frame is being sent through), the process <b>200</b> forwards (at <b>240</b>) the data message toward its destination (without fragmenting the frames of the data message or instructing the source machine to fragment the frames). An illustration of this scenario will be further described below with respect to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0042" num="0041">If the frame of the data message is determined (at <b>215</b>) to be too big for the uplink it will use, then the process <b>200</b> determines (at <b>220</b>) whether a &#x201c;do not fragment&#x201d; indicator is set for the frame. In some embodiments, the &#x201c;do not fragment&#x201d; indicator is a specific bit or byte in the data message frame, sometimes called a &#x201c;DF bit&#x201d; or just a &#x201c;DF.&#x201d; If the &#x201c;do not fragment&#x201d; indicator is in the frame, then the process <b>200</b> directs (at <b>230</b>) the source machine to use smaller frame sizes. An illustration of this scenario will be further described below by reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The direction includes in indicator of the MTU size for the source machine to use. The process <b>200</b> then receives (at <b>235</b>) the data message broken down into smaller frames by the source machine. The process <b>200</b> then forwards (at <b>240</b>) the data message (now broken into smaller frames) towards its destination. The process <b>200</b> then ends.</p><p id="p-0043" num="0042">Operation <b>235</b> is provided for clarity, however, one of ordinary skill in the art will understand that operation <b>235</b> in practice may be performed as operations <b>210</b> and <b>215</b> (with frames that are not too big). That is, operation <b>235</b> should only need to be performed once per data message flow as the source machine should subsequently break all data messages of that flow down to the specified MTU size (or smaller). As all subsequent (smaller) frames of the data messages of that flow will be received by the hypervisor in the same way as operation <b>210</b>, the process <b>200</b> will then determine at operation <b>215</b> that the packets (broken into smaller frames than the original frame) are not too big. In some embodiments, the configured MTU size may change under some circumstances, so that a previously acceptable frame size is found to be too big, or the source machine may lose a record of the required frame size for some reason, so in some embodiments, all frames are checked to determine whether they are too big for the then current MTU size of the uplink.</p><p id="p-0044" num="0043">If the &#x201c;do not fragment&#x201d; indicator is not in the frame, then the process <b>200</b> divides (at <b>225</b>) the frame of the data message into frames smaller than or equal to the MTU size. An illustration of this scenario will be further described below with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The process <b>200</b> then forwards (at <b>240</b>) the data message (now broken into smaller frames) towards its destination. The process <b>200</b> then ends. Since the division is performed by the hypervisor (or the VDR of the hypervisor) in some embodiments, the process <b>200</b> will be performed on all frames of the data message flow. The process <b>200</b> is performed in the datacenter before the fragmented frames are sent out; however, one of ordinary skill in the art will realize that either a forwarding element along the path the frames take to the destination (or the destination machine itself) re-assembles the fragmented frames into the original frames (or into the original data message).</p><p id="p-0045" num="0044">One of ordinary skill in the art will notice that the process <b>200</b> does not include a PMTU discovery operation such as that found in the prior art. In the prior art, one or more frames must be sent from either a source machine or some intermediate forwarding element (e.g., physical or virtual router, physical or virtual switch, physical or virtual gateway, etc.) to the destination in order to discover whether any of the intermediate forwarding elements have an MTU size that is smaller than a particular frame size. In process <b>200</b>, the MTU size is defined at a local element of the database (e.g., provided in a GUI by a user). In such a process, no packets need to be sent out of the datacenter in order to determine the MTU size for the route that the data message will be sent through.</p><p id="p-0046" num="0045">However, in some embodiments, the processes of the present invention work in concert with existing PMTU discovery systems. For example, in a case in which the MTU size for a particular set of endpoints (source and destination machines) is not defined in the received data used to generate the PBR lookup table, the hypervisors, VDRs, or gateways may perform a PMTU discovery for that particular set of endpoints. In such embodiments, the present invention still reduces the workload of discovering the PMTU for the sets of endpoints that are defined in the received data. In other embodiments, the hypervisors (or VDRs) use a default MTU size (e.g., the typical internet MTU size of 1500) for endpoint values that do not match any of the PBR lookup table entries. Finally, there may be situations in which the hypervisor has incorrect values for the MTU size of a particular uplink or about whether a particular uplink applies to a particular set of endpoints. In such situations, frames sent out in operation <b>240</b> of process <b>200</b> may be dropped by forwarding elements along the route to the destination address, with the forwarding elements sending ICMP messages back to the datacenter. In such cases, the prior art PMTU discovery process might be implemented for those pairs of endpoints while the present invention would apply to all endpoints with correctly-identified MTU size values.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a fragmentation operation of a source machine sending an oversized frame with a &#x201c;do not fragment&#x201d; indicator to a hypervisor. First, a source machine <b>125</b> on a host <b>105</b> sends an oversized frame (e.g., a frame larger than the MTU size of the uplink that the data message that the frame is part of is being sent through) with a &#x201c;do not fragment&#x201d; indicator to the hypervisor <b>115</b> of the host <b>105</b>. Second, the hypervisor <b>115</b> directs the machine <b>125</b> to send smaller frames. In some embodiments, this direction is via an ICMP message that also specifies the MTU size for frames to be sent. A VDR of the hypervisor <b>115</b> performs this operation in some embodiments. Third, the source machine <b>125</b> sends the data message again, with frames equal to or smaller than the MTU size indicated in the ICMP. Fourth, the hypervisor <b>115</b> forwards the smaller frames to the gateway <b>175</b> so that the gateway <b>175</b> can send the frames out of the datacenter.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a fragmentation operation of a source machine sending an oversized frame without a &#x201c;do not fragment&#x201d; indicator to a hypervisor. First, a source machine <b>125</b> on a host <b>105</b> sends an oversized frame (e.g., a frame larger than the MTU size of the uplink that the data message that the frame is part of is being sent through) without a &#x201c;do not fragment&#x201d; indicator to the hypervisor <b>115</b> of the host <b>105</b>. Second, the hypervisor <b>115</b> divides the oversized frame into smaller frames (e.g., equal to or smaller than the MTU size). A VDR of the hypervisor <b>115</b> performs this operation in some embodiments. Third, the hypervisor <b>115</b> forwards the smaller frames to the gateway <b>175</b> so that the gateway <b>175</b> can send the frames out of the datacenter.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a fragmentation operation of a source machine sending a correct-sized frame to a hypervisor. First, a source machine <b>125</b> on a host <b>105</b> sends the correct-sized frame (e.g., a frame equal in size or smaller than the MTU size of the uplink that the data message that the frame is part of is being sent through). Because no action is needed to fragment the packet, the hypervisor <b>115</b> does not need to determine whether the frame has a &#x201c;do not fragment&#x201d; indicator. Second, the hypervisor <b>115</b> forwards the frames to the gateway <b>175</b> so that the gateway <b>175</b> can send the frames out of the datacenter.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>6</b></figref> conceptually illustrates a process <b>600</b> of some embodiments for sending configuration data to the hypervisors of the datacenter. In some embodiments, the process <b>600</b> is performed by a network manager. The process <b>600</b> receives (at <b>605</b>) MTU sizes for uplinks of a datacenter supplied by a user through a GUI of a network manager interface. Such a GUI will be further described below with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>. The process <b>600</b> then configures (at <b>610</b>) the MTU sizes for the uplinks associated with the gateway. The process <b>600</b> then sends (at <b>615</b>) virtual distributed routing data to the hypervisors of the host computers of the datacenter. The virtual distributed routing data defines what uplinks are used according to the route endpoints. In some embodiments, these definitions may identify uplinks by reference to individual source/destination address pairs, ranges of destination addresses and/or source addresses, or some combination of individual destination address pairs. As mentioned above, the virtual distributed routing data may be used by the hypervisors or VDRs in some embodiments to generate a PBR lookup table once the VDR or hypervisor receives the VDR data.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a GUI <b>700</b> of some embodiments that allows an administrator to set MTU size values for uplinks associated with a gateway and associate destination addresses with specific uplinks. In some embodiments the GUI <b>700</b> is displayed in a web browser, in other embodiments the GUI <b>700</b> is displayed by a dedicated application. GUI <b>700</b> includes an interface selector <b>710</b>, an uplink definition control <b>720</b>, and a VDR data input control <b>730</b>. The interface selector <b>710</b> receives input (e.g., a click on a pull-down menu icon from a control device such as a mouse) from an administrator to switch from the MTU value control interface to controls for other aspects of the datacenter.</p><p id="p-0052" num="0051">The uplink definition control <b>720</b> receives input from an administrator to edit existing uplink definitions (e.g., by receiving a click from a control device on a field and receiving input from a keyboard to change the value in the field). The uplink definition control <b>720</b> receives input to change the name or MTU value for an uplink or add new uplink names and provide MTU values for the new uplinks.</p><p id="p-0053" num="0052">The VDR data input control <b>730</b> receives IP addresses or domain names of destinations and the associated uplinks to use for those destinations. In the illustrated embodiments, these destination addresses may be a single address, a range of addresses, a range that includes wildcards (here the asterisk), or may omit an IP address in favor of a domain name. One of ordinary skill in the art will understand that the GUI <b>700</b> is only one example of GUIs that may be used in some embodiments and that GUIs of other embodiments may have more controls, fewer controls, or different controls from GUI <b>700</b>.</p><p id="p-0054" num="0053">Many of the above-described features and applications are implemented as software processes that are specified as a set of instructions recorded on a computer-readable storage medium (also referred to as computer-readable medium). When these instructions are executed by one or more processing unit(s) (e.g., one or more processors, cores of processors, or other processing units), they cause the processing unit(s) to perform the actions indicated in the instructions. Examples of computer-readable media include, but are not limited to, CD-ROMs, flash drives, RAM chips, hard drives, EPROMs, etc. The computer-readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.</p><p id="p-0055" num="0054">In this specification, the term &#x201c;software&#x201d; is meant to include firmware residing in read-only memory or applications stored in magnetic storage, which can be read into memory for processing by a processor. Also, in some embodiments, multiple software inventions can be implemented as sub-parts of a larger program while remaining distinct software inventions. In some embodiments, multiple software inventions can also be implemented as separate programs. Finally, any combination of separate programs that together implement a software invention described here is within the scope of the invention. In some embodiments, the software programs, when installed to operate on one or more electronic systems, define one or more specific machine implementations that execute and perform the operations of the software programs.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>8</b></figref> conceptually illustrates a computer system <b>800</b> with which some embodiments of the invention are implemented. The computer system <b>800</b> can be used to implement any of the above-described hosts, controllers, gateway, and edge forwarding elements. As such, it can be used to execute any of the above-described processes. This computer system <b>800</b> includes various types of non-transitory machine-readable media and interfaces for various other types of machine-readable media. Computer system <b>800</b> includes a bus <b>805</b>, processing unit(s) <b>810</b>, a system memory <b>825</b>, a read-only memory <b>830</b>, a permanent storage device <b>835</b>, input devices <b>840</b>, and output devices <b>845</b>.</p><p id="p-0057" num="0056">The bus <b>805</b> collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of the computer system <b>800</b>. For instance, the bus <b>805</b> communicatively connects the processing unit(s) <b>810</b> with the read-only memory <b>830</b>, the system memory <b>825</b>, and the permanent storage device <b>835</b>.</p><p id="p-0058" num="0057">From these various memory units, the processing unit(s) <b>810</b> retrieve instructions to execute and data to process in order to execute the processes of the invention. The processing unit(s) may be a single processor or a multi-core processor in different embodiments. The read-only-memory (ROM) <b>830</b> stores static data and instructions that are needed by the processing unit(s) <b>810</b> and other modules of the computer system. The permanent storage device <b>835</b>, on the other hand, is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when the computer system <b>800</b> is off. Some embodiments of the invention use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as the permanent storage device <b>835</b>.</p><p id="p-0059" num="0058">Other embodiments use a removable storage device (such as a floppy disk, flash drive, etc.) as the permanent storage device <b>835</b>. Like the permanent storage device <b>835</b>, the system memory <b>825</b> is a read-and-write memory device. However, unlike storage device <b>835</b>, the system memory <b>825</b> is a volatile read-and-write memory, such as random access memory. The system memory <b>825</b> stores some of the instructions and data that the processor needs at runtime. In some embodiments, the invention's processes are stored in the system memory <b>825</b>, the permanent storage device <b>835</b>, and/or the read-only memory <b>830</b>. From these various memory units, the processing unit(s) <b>810</b> retrieve instructions to execute and data to process in order to execute the processes of some embodiments.</p><p id="p-0060" num="0059">The bus <b>805</b> also connects to the input and output devices <b>840</b> and <b>845</b>. The input devices <b>840</b> enable the user to communicate information and select commands to the computer system <b>800</b>. The input devices <b>840</b> include alphanumeric keyboards and pointing devices (also called &#x201c;cursor control devices&#x201d;). The output devices <b>845</b> display images generated by the computer system <b>800</b>. The output devices <b>845</b> include printers and display devices, such as cathode ray tubes (CRT) or liquid crystal displays (LCD). Some embodiments include devices such as touchscreens that function as both input and output devices <b>840</b> and <b>845</b>.</p><p id="p-0061" num="0060">Finally, as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, bus <b>805</b> also couples computer system <b>800</b> to a network <b>865</b> through a network adapter (not shown). In this manner, the computer <b>800</b> can be a part of a network of computers (such as a local area network (&#x201c;LAN&#x201d;), a wide area network (&#x201c;WAN&#x201d;), or an Intranet), or a network of networks (such as the Internet). Any or all components of computer system <b>800</b> may be used in conjunction with the invention.</p><p id="p-0062" num="0061">Some embodiments include electronic components, such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media). Some examples of such computer-readable media include RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic and/or solid state hard drives, read-only and recordable Blu-Ray&#xae; discs, ultra-density optical discs, any other optical or magnetic media, and floppy disks. The computer-readable media may store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code, such as is produced by a compiler, and files including higher-level code that are executed by a computer, an electronic component, or a microprocessor using an interpreter.</p><p id="p-0063" num="0062">While the above discussion primarily refers to microprocessors or multi-core processors that execute software, some embodiments are performed by one or more integrated circuits, such as application-specific integrated circuits (ASICs) or field-programmable gate arrays (FPGAs). In some embodiments, such integrated circuits execute instructions that are stored on the circuit itself.</p><p id="p-0064" num="0063">As used in this specification, the terms &#x201c;computer&#x201d;, &#x201c;server&#x201d;, &#x201c;processor&#x201d;, and &#x201c;memory&#x201d; all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification, the terms &#x201c;display&#x201d; or &#x201c;displaying&#x201d; mean displaying on an electronic device. As used in this specification, the terms &#x201c;computer-readable medium,&#x201d; &#x201c;computer-readable media,&#x201d; and &#x201c;machine-readable medium&#x201d; are entirely restricted to tangible, physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals, wired download signals, and any other ephemeral or transitory signals.</p><p id="p-0065" num="0064">While the invention has been described with reference to numerous specific details, one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. For instance, several of the above-described embodiments deploy gateways in public cloud datacenters. However, in other embodiments, the gateways are deployed in a third-party's private cloud datacenters (e.g., datacenters that the third-party uses to deploy cloud gateways for different entities in order to deploy virtual networks for these entities). Thus, one of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details, but rather is to be defined by the appended claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of controlling maximum transmission unit (MTU) size for transmitting data messages of a flow through a gateway of a datacenter, the method comprising:<claim-text>on a host computer operating in the datacenter and executing a source machine for a data message flow:<claim-text>receiving an identifier of an MTU size associated with the gateway operating in the datacenter;</claim-text><claim-text>receiving, from the source machine, a data message of the flow to be sent through the gateway, wherein the data message comprises a frame that exceeds the identified MTU size;</claim-text><claim-text>after determining that the frame comprises an indicator specifying that the frame should not be fragmented, directing the machine to use smaller size frames in the data messages of the flow; and</claim-text><claim-text>after receiving smaller size frames for the data messages of the flow, forwarding the data messages through the gateway.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the gateway has a set of one or more uplink interfaces, and the MTU size is associated with a first uplink interface of the gateway.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the flow is a first flow, the MTU size is a first MTU size, and a second uplink interface of the gateway is associated with a larger, second MTU size, the method further comprising:<claim-text>receiving, from the source machine, a data message of a second flow to be sent to the second uplink of the gateway, wherein the data message comprises a frame that exceeds the first MTU size but not the second MTU size; and</claim-text><claim-text>based on the frame of the received data message of the second flow being smaller than the second MTU size, forwarding the data messages of the second flow to the gateway for forwarding along the second uplink interface.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the flow is a first flow, the method comprising:<claim-text>receiving, from the source machine, a data message of a second flow to be forwarded along the first uplink interface, wherein the received data message of the second flow comprises a frame that does not exceed the identified MTU size;</claim-text><claim-text>based on the frame of the received data message of the second flow being smaller than the MTU size, forwarding the data messages of the second flow to the gateway for forwarding along the first uplink interface.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first uplink is an uplink to the internet.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the datacenter is a first datacenter and the first uplink is a connection to a second datacenter.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the flow is a first flow, the method further comprising:<claim-text>on the host computer:<claim-text>receiving, from the source machine, a data message of a second flow to be sent through the gateway, wherein the received data message of the second flow comprises a frame that exceeds the identified MTU size;</claim-text><claim-text>determining that the frame of the received data message of the second flow does not comprise an indicator specifying that the frame should not be fragmented;</claim-text><claim-text>dividing the data frame of the received data message of the second flow into two or more fragmented data frames smaller than or equal to the MTU size and forwarding the fragmented data frames in two or more data messages to the gateway.</claim-text></claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the machine is one of a virtual machine, a pod, or a container of a container network.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the datacenter is a cloud data center.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the cloud datacenter is a virtual private cloud (VPC) datacenter operating in a public cloud datacenter.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the gateway is implemented by a machine of the VPC datacenter.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the gateway has an uplink to services of the public cloud datacenter and the MTU size is associated with an uplink to services of the public cloud datacenter.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving the identifier, receiving the data message, determining that the frame comprises an indicator, receiving smaller size frames, and forwarding the data messages to the gateway are performed at a hypervisor of the host computer.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A non-transitory machine readable medium storing a program which, when executed by at least one processing units of a host computer operating in a datacenter, controls maximum transmission unit (MTU) size for transmitting data messages of a flow through a gateway of the datacenter, the program comprising sets of instructions for:<claim-text>receiving an identifier of an MTU size associated with the gateway operating in the datacenter;</claim-text><claim-text>receiving, from a source machine executed by the host computer, a data message of the flow to be sent through the gateway, wherein the data message comprises a frame that exceeds the identified MTU size;</claim-text><claim-text>after determining that the frame comprises an indicator specifying that the frame should not be fragmented, directing the machine to use smaller size frames in the data messages of the flow; and</claim-text><claim-text>after receiving smaller size frames for the data messages of the flow, forwarding the data messages through the gateway.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The non-transitory machine readable medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the gateway has a set of one or more uplink interfaces, and the MTU size is associated with a first uplink interface of the gateway.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory machine readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the flow is a first flow, the MTU size is a first MTU size, and a second uplink interface of the gateway is associated with a larger, second MTU size, the program further comprising sets of instructions for:<claim-text>receiving, from the source machine, a data message of a second flow to be sent to the second uplink of the gateway, wherein the data message comprises a frame that exceeds the first MTU size but not the second MTU size; and</claim-text><claim-text>based on the frame of the received data message of the second flow being smaller than the second MTU size, forwarding the data messages of the second flow to the gateway for forwarding along the second uplink interface.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory machine readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the flow is a first flow, the program further comprising sets of instructions for:<claim-text>receiving, from the source machine, a data message of a second flow to be forwarded along the first uplink interface, wherein the received data message of the second flow comprises a frame that does not exceed the identified MTU size;</claim-text><claim-text>based on the frame of the received data message of the second flow being smaller than the MTU size, forwarding the data messages of the second flow to the gateway for forwarding along the first uplink interface.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory machine readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the first uplink is an uplink to the internet.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory machine readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the datacenter is a first datacenter and the first uplink is a connection to a second datacenter.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory machine readable medium of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein the flow is a first flow, the program further comprising sets of instructions for:<claim-text>on the host computer:<claim-text>receiving, from the source machine, a data message of a second flow to be sent through the gateway, wherein the received data message of the second flow comprises a frame that exceeds the identified MTU size;</claim-text><claim-text>determining that the frame of the received data message of the second flow does not comprise an indicator specifying that the frame should not be fragmented;</claim-text><claim-text>dividing the data frame of the received data message of the second flow into two or more fragmented data frames smaller than or equal to the MTU size and forwarding the fragmented data frames in two or more data messages to the gateway.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>