<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005029A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005029</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17902203</doc-number><date>20220902</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20120101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>04</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>N</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>04</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0637</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">OPTIMIZATION OF TRUSTED INVOICING</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16691511</doc-number><date>20191121</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11501345</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17902203</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Shrinivasan</last-name><first-name>Yedendra</first-name><address><city>Scarsdale</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Narayanam</last-name><first-name>Krishnasuri</first-name><address><city>BANGALORE</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Goel</last-name><first-name>Seep</first-name><address><city>New Delhi</city><country>IN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Singh</last-name><first-name>Abhishek</first-name><address><city>New Delhi</city><country>IN</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Choudhary</last-name><first-name>Vishnu</first-name><address><city>Kotputli</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An example operation may include one or more of monitoring, by a blockchain node, a delivery of a service to a first node from a second node based on a service contract and an order retrieved from a blockchain, determining, by the blockchain node, an incremental charge for a partial delivery of the service based on the monitoring, and executing, by the blockchain node, a smart contract to issue the incremental charge for the partial delivery of the service, and responsive to a resolution of a dispute raised for the incremental charge, add the incremental charge to an incremental invoice.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="157.73mm" wi="139.70mm" file="US20230005029A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="128.78mm" wi="180.09mm" file="US20230005029A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="232.92mm" wi="167.72mm" file="US20230005029A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="130.56mm" wi="178.56mm" file="US20230005029A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="130.56mm" wi="172.38mm" file="US20230005029A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="130.56mm" wi="172.47mm" file="US20230005029A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="138.94mm" wi="172.55mm" file="US20230005029A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="214.29mm" wi="141.73mm" file="US20230005029A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="213.53mm" wi="154.60mm" file="US20230005029A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="225.38mm" wi="142.92mm" file="US20230005029A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="214.38mm" wi="121.58mm" file="US20230005029A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="227.33mm" wi="152.65mm" file="US20230005029A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="230.38mm" wi="159.60mm" file="US20230005029A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="138.35mm" wi="175.85mm" file="US20230005029A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="189.99mm" wi="122.77mm" file="US20230005029A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="116.16mm" wi="188.64mm" file="US20230005029A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="225.72mm" wi="152.48mm" file="US20230005029A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="218.36mm" wi="165.10mm" file="US20230005029A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="225.81mm" wi="135.38mm" file="US20230005029A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="233.43mm" wi="143.93mm" file="US20230005029A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">This application generally relates to a supply-chain, and more particularly, to an optimization of trusted invoicing.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">A centralized database stores and maintains data in a single database (e.g., a database server) at one location. This location is often a central computer, for example, a desktop central processing unit (CPU), a server CPU, or a mainframe computer. Information stored on a centralized database is typically accessible from multiple different points. Multiple users or client workstations can work simultaneously on the centralized database, for example, based on a client/server configuration. A centralized database is easy to manage, maintain, and control, especially for purposes of security because of its single location. Within a centralized database, data redundancy is minimized as a single storing place of all data also implies that a given set of data only has one primary record.</p><p id="p-0004" num="0003">However, a centralized database suffers from significant drawbacks. For example, a centralized database has a single point of failure. In particular, if there are no fault-tolerance considerations and a failure occurs (for example, a hardware, firmware, and/or a software failure), all data within the database is lost and work of all users is interrupted. In addition, centralized databases are highly dependent on network connectivity. As a result, the slower the connection, the amount of time needed for each database access is increased. Another drawback is the occurrence of bottlenecks when a centralized database experiences high traffic due to a single location. Furthermore, a centralized database provides limited access to data because only one copy of the data is maintained by the database. As a result, multiple devices cannot access the same piece of data at the same time without creating significant problems or risk overwriting stored data. Furthermore, because a database storage system has minimal to no data redundancy, data that is unexpectedly lost is very difficult to retrieve other than through manual operation from back-up storage.</p><p id="p-0005" num="0004">Supply-chains are often implemented on top of an underlying blockchain. The invoices (both traditional and self-billing) generated within the supply-chain contain different prices as per contractual agreement(s). However, the invoice is generated at once (either by the supplier, or by the customer) containing all the different prices. This process has the following shortcomings. Even though some of the prices become applicable much before the invoice generation time, the invoice is not generated partially with the applicable prices. This negatively affects the invoice processing time from the invoice generation to a payment remittance.</p><p id="p-0006" num="0005">Accordingly, it is desired to optimize trusted invoicing by reduction of a finalization time of an invoice.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0007" num="0006">One example embodiment provides a system that includes a processor and memory, wherein the processor is configured to perform one or more of monitor a delivery of a service to a first node from a second node based on a service contract and an order retrieved from a blockchain, determine an incremental charge for a partial delivery of the service based on the monitoring, and execute a smart contract to issue the incremental charge for the partial delivery of the service, and responsive to a resolution of a dispute raised for the incremental charge, add the incremental charge to an incremental invoice. The advantage of this system is that it provides for an automated optimization of processing of a trusted invoice by reduction of a finalization time of the invoice.</p><p id="p-0008" num="0007">Another example embodiment provides a method that includes one or more of monitoring, by a blockchain node, a delivery of a service to a first node from a second node based on a service contract and an order retrieved from a blockchain, determining, by the blockchain node, an incremental charge for a partial delivery of the service based on the monitoring, and executing, by the blockchain node, a smart contract to: issue the incremental charge for the partial delivery of the service; and, responsive to a resolution of a dispute raised for the incremental charge, add the incremental charge to an incremental invoice. The advantage of this method is that it provides for an automated optimization of processing of a trusted invoice by reduction of a finalization time of the invoice.</p><p id="p-0009" num="0008">A further example embodiment provides a non-transitory computer readable medium comprising instructions, that when read by a processor, cause the processor to perform one or more of monitoring a delivery of a service to a first node from a second node based on a service contract and an order retrieved from a blockchain, determining an incremental charge for a partial delivery of the service based on the monitoring, and executing a smart contract to: issue the incremental charge for the partial delivery of the service; and, responsive to a resolution of a dispute raised for the incremental charge, add the incremental charge to an incremental invoice. The advantage of this embodiment is that it provides for an automated optimization of processing of a trusted invoice by reduction of a finalization time of the invoice.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a network diagram of a system including a database, according to example embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates an example blockchain architecture configuration, according to example embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> illustrates a blockchain transactional flow, according to example embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates a permissioned network, according to example embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> illustrates another permissioned network, according to example embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> illustrates a permissionless network, according to example embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates a flow diagram, according to example embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates a further flow diagram, according to example embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> illustrates an example system configured to perform one or more operations described herein, according to example embodiments.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> illustrates another example system configured to perform one or more operations described herein, according to example embodiments.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> illustrates a further example system configured to utilize a smart contract, according to example embodiments.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates yet another example system configured to utilize a blockchain, according to example embodiments.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> illustrates a process for a new block being added to a distributed ledger, according to example embodiments.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> illustrates contents of a new data block, according to example embodiments.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>6</b>C</figref> illustrates a blockchain for digital content, according to example embodiments.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>6</b>D</figref> illustrates a block which may represent the structure of blocks in the blockchain, according to example embodiments.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates an example blockchain which stores machine learning (artificial intelligence) data, according to example embodiments.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> illustrates an example quantum-secure blockchain, according to example embodiments.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example system that supports one or more of the example embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0029" num="0028">It will be readily understood that the instant components, as generally described and illustrated in the figures herein, may be arranged and designed in a wide variety of different configurations. Thus, the following detailed description of the embodiments of at least one of a method, apparatus, non-transitory computer readable medium and system, as represented in the attached figures, is not intended to limit the scope of the application as claimed but is merely representative of selected embodiments.</p><p id="p-0030" num="0029">The instant features, structures, or characteristics as described throughout this specification may be combined or removed in any suitable manner in one or more embodiments. For example, the usage of the phrases &#x201c;example embodiments&#x201d;, &#x201c;some embodiments&#x201d;, or other similar language, throughout this specification refers to the fact that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment. Thus, appearances of the phrases &#x201c;example embodiments&#x201d;, &#x201c;in some embodiments&#x201d;, &#x201c;in other embodiments&#x201d;, or other similar language, throughout this specification do not necessarily all refer to the same group of embodiments, and the described features, structures, or characteristics may be combined or removed in any suitable manner in one or more embodiments. Further, in the diagrams, any connection between elements can permit one-way and/or two-way communication even if the depicted connection is a one-way or two-way arrow. Also, any device depicted in the drawings can be a different device. For example, if a mobile device is shown sending information, a wired device could also be used to send the information.</p><p id="p-0031" num="0030">In addition, while the term &#x201c;message&#x201d; may have been used in the description of embodiments, the application may be applied to many types of networks and data. Furthermore, while certain types of connections, messages, and signaling may be depicted in exemplary embodiments, the application is not limited to a certain type of connection, message, and signaling.</p><p id="p-0032" num="0031">Example embodiments provide methods, systems, components, non-transitory computer readable media, devices, and/or networks, which provide for an optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain.</p><p id="p-0033" num="0032">In one embodiment the application utilizes a decentralized database (such as a blockchain) that is a distributed storage system, which includes multiple nodes that communicate with each other. The decentralized database includes an append-only immutable data structure resembling a distributed ledger capable of maintaining records between mutually untrusted parties. The untrusted parties are referred to herein as peers or peer nodes. Each peer maintains a copy of the database records and no single peer can modify the database records without a consensus being reached among the distributed peers. For example, the peers may execute a consensus protocol to validate blockchain storage transactions, group the storage transactions into blocks, and build a hash chain over the blocks. This process forms the ledger by ordering the storage transactions, as is necessary, for consistency. In various embodiments, a permissioned and/or a permissionless blockchain can be used. In a public or permission-less blockchain, anyone can participate without a specific identity. Public blockchains can involve native cryptocurrency and use consensus based on various protocols such as Proof of Work (PoW). On the other hand, a permissioned blockchain database provides secure interactions among a group of entities which share a common goal but which do not fully trust one another, such as businesses that exchange funds, goods, information, and the like.</p><p id="p-0034" num="0033">This application can utilize a blockchain that operates arbitrary, programmable logic, tailored to a decentralized storage scheme and referred to as &#x201c;smart contracts&#x201d; or &#x201c;chaincodes.&#x201d; In some cases, specialized chaincodes may exist for management functions and parameters which are referred to as system chaincode. The application can further utilize smart contracts that are trusted distributed applications which leverage tamper-proof properties of the blockchain database and an underlying agreement between nodes, which is referred to as an endorsement or endorsement policy. Blockchain transactions associated with this application can be &#x201c;endorsed&#x201d; before being committed to the blockchain while transactions, which are not endorsed, are disregarded. An endorsement policy allows chaincode to specify endorsers for a transaction in the form of a set of peer nodes that are necessary for endorsement. When a client sends the transaction to the peers specified in the endorsement policy, the transaction is executed to validate the transaction. After validation, the transactions enter an ordering phase in which a consensus protocol is used to produce an ordered sequence of endorsed transactions grouped into blocks.</p><p id="p-0035" num="0034">This application can utilize nodes that are the communication entities of the blockchain system. A &#x201c;node&#x201d; may perform a logical function in the sense that multiple nodes of different types can run on the same physical server. Nodes are grouped in trust domains and are associated with logical entities that control them in various ways. Nodes may include different types, such as a client or submitting-client node which submits a transaction-invocation to an endorser (e.g., peer), and broadcasts transaction-proposals to an ordering service (e.g., ordering node). Another type of node is a peer node which can receive client submitted transactions, commit the transactions and maintain a state and a copy of the ledger of blockchain transactions. Peers can also have the role of an endorser, although it is not a requirement. An ordering-service-node or orderer is a node running the communication service for all nodes, and which implements a delivery guarantee, such as a broadcast to each of the peer nodes in the system when committing transactions and modifying a world state of the blockchain, which is another name for the initial blockchain transaction which normally includes control and setup information.</p><p id="p-0036" num="0035">This application can utilize a ledger that is a sequenced, tamper-resistant record of all state transitions of a blockchain. State transitions may result from chaincode invocations (i.e., transactions) submitted by participating parties (e.g., client nodes, ordering nodes, endorser nodes, peer nodes, etc.). Each participating party (such as a peer node) can maintain a copy of the ledger. A transaction may result in a set of asset key-value pairs being committed to the ledger as one or more operands, such as creates, updates, deletes, and the like. The ledger includes a blockchain (also referred to as a chain) which is used to store an immutable, sequenced record in blocks. The ledger also includes a state database which maintains a current state of the blockchain.</p><p id="p-0037" num="0036">This application can utilize a chain that is a transaction log which is structured as hash-linked blocks, and each block contains a sequence of N transactions where N is equal to or greater than one. The block header includes a hash of the block's transactions, as well as a hash of the prior block's header. In this way, all transactions on the ledger may be sequenced and cryptographically linked together. Accordingly, it is not possible to tamper with the ledger data without breaking the hash links. A hash of a most recently added blockchain block represents every transaction on the chain that has come before it, making it possible to ensure that all peer nodes are in a consistent and trusted state. The chain may be stored on a peer node file system (i.e., local, attached storage, cloud, etc.), efficiently supporting the append-only nature of the blockchain workload.</p><p id="p-0038" num="0037">The current state of the immutable ledger represents the latest values for all keys that are included in the chain transaction log. Since the current state represents the latest key values known to a channel, it is sometimes referred to as a world state. Chaincode invocations execute transactions against the current state data of the ledger. To make these chaincode interactions efficient, the latest values of the keys may be stored in a state database. The state database may be simply an indexed view into the chain's transaction log, it can therefore be regenerated from the chain at any time. The state database may automatically be recovered (or generated if needed) upon peer node startup, and before transactions are accepted.</p><p id="p-0039" num="0038">Some benefits of the instant solutions described and depicted herein include a method and system for an optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain. The exemplary embodiments solve the issues of time and trust by extending features of a database such as immutability, digital signatures and being a single source of truth. The exemplary embodiments provide a solution for an optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain. The blockchain networks may be homogenous based on the asset type and rules that govern the assets based on the smart contracts.</p><p id="p-0040" num="0039">Blockchain is different from a traditional database in that blockchain is not a central storage, but rather a decentralized, immutable, and secure storage, where nodes must share in changes to records in the storage. Some properties that are inherent in blockchain and which help implement the blockchain include, but are not limited to, an immutable ledger, smart contracts, security, privacy, decentralization, consensus, endorsement, accessibility, and the like, which are further described herein. According to various aspects, the system for an optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain is implemented due to immutable accountability, security, privacy, permitted decentralization, availability of smart contracts, endorsements and accessibility that are inherent and unique to blockchain. In particular, the blockchain ledger data is immutable and that provides for efficient method for an optimization of trusted invoicing based on a blockchain. Also, use of the encryption in the blockchain provides security and builds trust. The smart contract manages the state of the asset to complete the life-cycle. The example blockchains are permission decentralized. Thus, each end user may have its own ledger copy to access. Multiple organizations (and peers) may be on-boarded on the blockchain network. The key organizations may serve as endorsing peers to validate the smart contract execution results, read-set and write-set. In other words, the blockchain inherent features provide for efficient implementation of a method for an optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain.</p><p id="p-0041" num="0040">One of the benefits of the example embodiments is that it improves the functionality of a computing system by implementing a method for an optimization of trusted invoicing by reduction of an invoice finalization time based on blockchain-based systems. The exemplary embodiments create a functional improvement in terms of providing appropriate access permissions to the authorized users at the granularity of each transaction while also providing high availability with immutability to the data being stored by the application. While any centralized solution implemented using a traditional database providing similar services would still have drawbacks like single point of failure and revealing data access to a group of users, or a third-party who is providing the service/who is managing the data. Another important aspect that is achieved by the application is consensus among the mutually untrusting transacting parties on the invoice generated by the proposed system in our invention, while it is not possible to ensure consensus via a solution using a traditional database.</p><p id="p-0042" num="0041">Through the blockchain system described herein, a computing system can perform functionality for an automated optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain by providing access to capabilities such as distributed ledger, peers, encryption technologies, MSP, event handling, etc. Also, the blockchain enables to create a business network and make any users or organizations to on-board for participation. As such, the blockchain is not just a database. The blockchain comes with capabilities to create a Business Network of users and on-board/off-board organizations to collaborate and execute service processes in the form of smart contracts.</p><p id="p-0043" num="0042">The example embodiments provide numerous benefits over a traditional database. For example, through the blockchain the embodiments provide for immutable accountability, security, privacy, permitted decentralization, availability of smart contracts, endorsements and accessibility that are inherent and unique to the blockchain.</p><p id="p-0044" num="0043">Meanwhile, a traditional database could not be used to implement the example embodiments because it does not bring all parties on the business network, it does not create trusted collaboration and does not provide for an efficient storage of digital assets. It is not possible to implement the application on a traditional database instead of a blockchain since the aspects of immutable accountability, security, privacy, permitted decentralization, availability of smart contracts, endorsements and accessibility that are inherent and unique to the blockchain and are not straight forward to realize on a traditional database. Any solution implemented without providing these aspects can still lead to disputes among the mutually untrusting transacting players (i.e., producers, distributors, retailers, customers, financiers, etc.).</p><p id="p-0045" num="0044">The traditional database does not provide for a tamper proof storage and does not provide for preservation of the digital assets being stored. Thus, the proposed method for an optimization of trusted invoicing based on a blockchain cannot be implemented in the traditional database.</p><p id="p-0046" num="0045">Meanwhile, if a traditional database were to be used to implement the example embodiments, the example embodiments would have suffered from unnecessary drawbacks such as search capability, lack of security and slow speed of transactions. Additionally, the automated method for an optimization of trusted invoicing based on a blockchain would simply not be possible.</p><p id="p-0047" num="0046">Accordingly, the example embodiments provide for a specific solution to a problem in the arts/field of automated invoicing in supply-chains.</p><p id="p-0048" num="0047">The example embodiments also change how data may be stored within a block structure of the blockchain. For example, a digital asset data may be securely stored within a certain portion of the data block (i.e., within header, data segment, or metadata). By storing the digital asset data within data blocks of a blockchain, the digital asset data may be appended to an immutable blockchain ledger through a hash-linked chain of blocks. In some embodiments, the data block may be different than a traditional data block by having a personal data associated with the digital asset not stored together with the assets within a traditional block structure of a blockchain. By removing the personal data associated with the digital asset, the blockchain can provide the benefit of anonymity based on immutable accountability and security.</p><p id="p-0049" num="0048">According to the exemplary embodiments, a system and method for an automated optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain are provided. According to one exemplary embodiment, the invoice processing time can be significantly reduced as follows:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0049">reconciliation of the prices may be performed before the invoice is computed fully;</li>        <li id="ul0002-0002" num="0050">disputes on the already included prices in the invoice may be processed resulting in the reduction in the invoice finalization time after the invoice is generated fully.</li>    </ul>    </li></ul></p><p id="p-0050" num="0051">This may save significant amounts of time for initiation of the payment remittance. In other words, the payment based on the invoice may, advantageously, occur much faster. According to the exemplary embodiments, the different prices may constitute an invoice to be generated at different time instances when particular prices become applicable for the service delivered by the supplier to the customer. Thus, the invoice is not computed at once with all the prices at the end of the service delivery to the customer. Instead, the invoice gets computed in parts (i.e., increments) till the end of the service delivery to the customer. The different prices of the invoice are computed in real time when the prices become eligible to be applicable. The invoice generation system (i.e., a designated blockchain node) has access to the contracts and the order details stored on a blockchain. The invoice generation system may have access to the live tracking of the service delivery status to the customer by the supplier.</p><p id="p-0051" num="0052">According to one exemplary embodiment, reconciliation of the invoice with partial prices is performed as soon as the prices are added to the invoice, and a payment remittance can be initiated immediately if no disputes are found. The invoice generation logic may be implemented as a smart contract on a blockchain. The contracts and orders may be submitted as transactions to the blockchain and recorded on the blockchain ledger. The supplier and the customer may serve as peers on the blockchain network and may verify by consent the different prices added to the invoice. The live tracking status of the service delivery by the supplier to the customer may be recorded on the blockchain ledger as different transactions.</p><p id="p-0052" num="0053"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a logic network diagram for an automated optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain, according to example embodiments.</p><p id="p-0053" num="0054">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the example network <b>100</b> includes a blockchain (BC) node <b>102</b> connected to a first node <b>103</b> and a second node <b>105</b>. The BC node may serve an invoice generator node. The BC node <b>102</b> may be connected to a blockchain <b>106</b> that has a ledger <b>108</b> for storing contracts, order details and incremental invoices <b>110</b>. While this example describes in detail only one BC node <b>102</b>, multiple such nodes may be connected to the blockchain <b>106</b>. It should be understood that the BC node <b>102</b> may include additional components and that some of the components described herein may be removed and/or modified without departing from a scope of the BC node <b>102</b> disclosed herein. The BC node <b>102</b> may be a computing device or a server computer, or the like, and may include a processor <b>104</b>, which may be a semiconductor-based microprocessor, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), and/or another hardware device. Although a single processor <b>104</b> is depicted, it should be understood that the BC node <b>102</b> may include multiple processors, multiple cores, or the like, without departing from the scope of the BC node <b>102</b> system.</p><p id="p-0054" num="0055">The BC node <b>102</b> may also include a non-transitory computer readable medium <b>112</b> that may have stored thereon machine-readable instructions executable by the processor <b>104</b>. Examples of the machine-readable instructions are shown as <b>114</b>-<b>118</b> and are further discussed below. Examples of the non-transitory computer readable medium <b>112</b> may include an electronic, magnetic, optical, or other physical storage device that contains or stores executable instructions. For example, the non-transitory computer readable medium <b>112</b> may be a Random Access memory (RAM), an Electrically Erasable Programmable Read-Only Memory (EEPROM), a hard disk, an optical disc, or other type of storage device.</p><p id="p-0055" num="0056">The processor <b>104</b> may execute the machine-readable instructions <b>114</b> to monitor a delivery of a service to a first node <b>103</b> from a second node <b>105</b> based on a service contract and an order retrieved from a blockchain <b>106</b>. As discussed above, the blockchain ledger <b>108</b> may store the incremental invoices <b>110</b>. The blockchain <b>106</b> network may be configured to use one or more smart contracts that manage transactions for multiple participating nodes.</p><p id="p-0056" num="0057">The processor <b>104</b> may execute the machine-readable instructions <b>116</b> to determine an incremental charge for a partial delivery of the service based on the monitored delivery. The processor <b>104</b> may execute the machine-readable instructions <b>118</b> to execute a smart contract to: issue the incremental charge for the partial delivery of the service and, responsive to a resolution of a dispute raised for the incremental charge, add the incremental charge to an incremental invoice.</p><p id="p-0057" num="0058"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates a blockchain architecture configuration <b>200</b>, according to example embodiments. Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the blockchain architecture <b>200</b> may include certain blockchain elements, for example, a group of blockchain nodes <b>202</b>. The blockchain nodes <b>202</b> may include one or more nodes <b>204</b>-<b>210</b> (these four nodes are depicted by example only). These nodes participate in a number of activities, such as blockchain transaction addition and validation process (consensus). One or more of the blockchain nodes <b>204</b>-<b>210</b> may endorse transactions based on endorsement policy and may provide an ordering service for all blockchain nodes in the architecture <b>200</b>. A blockchain node may initiate a blockchain authentication and seek to write to a blockchain immutable ledger stored in blockchain layer <b>216</b>, a copy of which may also be stored on the underpinning physical infrastructure <b>214</b>. The blockchain configuration may include one or more applications <b>224</b> which are linked to application programming interfaces (APIs) <b>222</b> to access and execute stored program/application code <b>220</b> (e.g., chaincode, smart contracts, etc.) which can be created according to a customized configuration sought by participants and can maintain their own state, control their own assets, and receive external information. This can be deployed as a transaction and installed, via appending to the distributed ledger, on all blockchain nodes <b>204</b>-<b>210</b>.</p><p id="p-0058" num="0059">The blockchain base or platform <b>212</b> may include various layers of blockchain data, services (e.g., cryptographic trust services, virtual execution environment, etc.), and underpinning physical computer infrastructure that may be used to receive and store new transactions and provide access to auditors which are seeking to access data entries. The blockchain layer <b>216</b> may expose an interface that provides access to the virtual execution environment necessary to process the program code and engage the physical infrastructure <b>214</b>. Cryptographic trust services <b>218</b> may be used to verify transactions such as asset exchange transactions and keep information private.</p><p id="p-0059" num="0060">The blockchain architecture configuration of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> may process and execute program/application code <b>220</b> via one or more interfaces exposed, and services provided, by blockchain platform <b>212</b>. The code <b>220</b> may control blockchain assets. For example, the code <b>220</b> can store and transfer data, and may be executed by nodes <b>204</b>-<b>210</b> in the form of a smart contract and associated chaincode with conditions or other code elements subject to its execution. As a non-limiting example, smart contracts may be created to execute reminders, updates, and/or other notifications subject to the changes, updates, etc. The smart contracts can themselves be used to identify rules associated with authorization and access requirements and usage of the ledger. For example, the incremental charge information <b>226</b> may be processed by one or more processing entities (e.g., virtual machines) included in the blockchain layer <b>216</b>. The result <b>228</b> may include the data blocks containing the incremental invoice. The physical infrastructure <b>214</b> may be utilized to retrieve any of the data or information described herein.</p><p id="p-0060" num="0061">A smart contract may be created via a high-level application and programming language, and then written to a block in the blockchain. The smart contract may include executable code which is registered, stored, and/or replicated with a blockchain (e.g., distributed network of blockchain peers). A transaction is an execution of the smart contract code which can be performed in response to conditions associated with the smart contract being satisfied. The executing of the smart contract may trigger a trusted modification(s) to a state of a digital blockchain ledger. The modification(s) to the blockchain ledger caused by the smart contract execution may be automatically replicated throughout the distributed network of blockchain peers through one or more consensus protocols.</p><p id="p-0061" num="0062">The smart contract may write data to the blockchain in the format of key-value pairs. Furthermore, the smart contract code can read the values stored in a blockchain and use them in application operations. The smart contract code can write the output of various logic operations into the blockchain. The code may be used to create a temporary data structure in a virtual machine or other computing platform. Data written to the blockchain can be public and/or can be encrypted and maintained as private. The temporary data that is used/generated by the smart contract is held in memory by the supplied execution environment, then deleted once the data needed for the blockchain is identified.</p><p id="p-0062" num="0063">A chaincode may include the code interpretation of a smart contract, with additional features. As described herein, the chaincode may be program code deployed on a computing network, where it is executed and validated by chain validators together during a consensus process. The chaincode receives a hash and retrieves from the blockchain a hash associated with the data template created by use of a previously stored feature extractor. If the hashes of the hash identifier and the hash created from the stored identifier template data match, then the chaincode sends an authorization key to the requested service. The chaincode may write to the blockchain data associated with the cryptographic details.</p><p id="p-0063" num="0064"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> illustrates an example of a blockchain transactional flow <b>250</b> between nodes of the blockchain in accordance with an example embodiment. Referring to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, the transaction flow may include a transaction proposal <b>291</b> sent by an application client node <b>260</b> to an endorsing peer node <b>281</b>. The endorsing peer <b>281</b> may verify the client signature and execute a chaincode function to initiate the transaction. The output may include the chaincode results, a set of key/value versions that were read in the chaincode (read set), and the set of keys/values that were written in chaincode (write set). The proposal response <b>292</b> is sent back to the client <b>260</b> along with an endorsement signature, if approved. The client <b>260</b> assembles the endorsements into a transaction payload <b>293</b> and broadcasts it to an ordering service node <b>284</b>. The ordering service node <b>284</b> then delivers ordered transactions as blocks to all peers <b>281</b>-<b>283</b> on a channel. Before committal to the blockchain, each peer <b>281</b>-<b>283</b> may validate the transaction. For example, the peers may check the endorsement policy to ensure that the correct allotment of the specified peers have signed the results and authenticated the signatures against the transaction payload <b>293</b>.</p><p id="p-0064" num="0065">Referring again to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, the client node <b>260</b> initiates the transaction <b>291</b> by constructing and sending a request to the peer node <b>281</b>, which is an endorser. The client <b>260</b> may include an application leveraging a supported software development kit (SDK), which utilizes an available API to generate a transaction proposal. The proposal is a request to invoke a chaincode function so that data can be read and/or written to the ledger (i.e., write new key value pairs for the assets). The SDK may serve as a shim to package the transaction proposal into a properly architected format (e.g., protocol buffer over a remote procedure call (RPC)) and take the client's cryptographic credentials to produce a unique signature for the transaction proposal.</p><p id="p-0065" num="0066">In response, the endorsing peer node <b>281</b> may verify (a) that the transaction proposal is well formed, (b) the transaction has not been submitted already in the past (replay-attack protection), (c) the signature is valid, and (d) that the submitter (client <b>260</b>, in the example) is properly authorized to perform the proposed operation on that channel. The endorsing peer node <b>281</b> may take the transaction proposal inputs as arguments to the invoked chaincode function. The chaincode is then executed against a current state database to produce transaction results including a response value, read set, and write set. However, no updates are made to the ledger at this point. In <b>292</b>, the set of values, along with the endorsing peer node's <b>281</b> signature is passed back as a proposal response <b>292</b> to the SDK of the client <b>260</b> which parses the payload for the application to consume.</p><p id="p-0066" num="0067">In response, the application of the client <b>260</b> inspects/verifies the endorsing peers signatures and compares the proposal responses to determine if the proposal response is the same. If the chaincode only queried the ledger, the application would inspect the query response and would typically not submit the transaction to the ordering node service <b>284</b>. If the client application intends to submit the transaction to the ordering node service <b>284</b> to update the ledger, the application determines if the specified endorsement policy has been fulfilled before submitting (i.e., did all peer nodes necessary for the transaction endorse the transaction). Here, the client may include only one of multiple parties to the transaction. In this case, each client may have their own endorsing node, and each endorsing node will need to endorse the transaction. The architecture is such that even if an application selects not to inspect responses or otherwise forwards an unendorsed transaction, the endorsement policy will still be enforced by peers and upheld at the commit validation phase.</p><p id="p-0067" num="0068">After successful inspection, in step <b>293</b> the client <b>260</b> assembles endorsements into a transaction and broadcasts the transaction proposal and response within a transaction message to the ordering node <b>284</b>. The transaction may contain the read/write sets, the endorsing peers signatures and a channel ID. The ordering node <b>284</b> does not need to inspect the entire content of a transaction in order to perform its operation, instead the ordering node <b>284</b> may simply receive transactions from all channels in the network, order them chronologically by channel, and create blocks of transactions per channel.</p><p id="p-0068" num="0069">The blocks of the transaction are delivered from the ordering node <b>284</b> to all peer nodes <b>281</b>-<b>283</b> on the channel. The transactions <b>294</b> within the block are validated to ensure any endorsement policy is fulfilled and to ensure that there have been no changes to ledger state for read set variables since the read set was generated by the transaction execution. Transactions in the block are tagged as being valid or invalid. Furthermore, in step <b>295</b> each peer node <b>281</b>-<b>283</b> appends the block to the channel's chain, and for each valid transaction the write sets are committed to current state database. An event is emitted, to notify the client application that the transaction (invocation) has been immutably appended to the chain, as well as to notify whether the transaction was validated or invalidated.</p><p id="p-0069" num="0070"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates an example of a permissioned blockchain network <b>300</b>, which features a distributed, decentralized peer-to-peer architecture. In this example, a blockchain user <b>302</b> may initiate a transaction to the permissioned blockchain <b>304</b>. In this example, the transaction can be a deploy, invoke, or query, and may be issued through a client-side application leveraging an SDK, directly through an API, etc. Networks may provide access to a regulator <b>306</b>, such as an auditor. A blockchain network operator <b>308</b> manages member permissions, such as enrolling the regulator <b>306</b> as an &#x201c;auditor&#x201d; and the blockchain user <b>302</b> as a &#x201c;client&#x201d;. An auditor could be restricted only to querying the ledger whereas a client could be authorized to deploy, invoke, and query certain types of chaincode.</p><p id="p-0070" num="0071">A blockchain developer <b>310</b> can write chaincode and client-side applications. The blockchain developer <b>310</b> can deploy chaincode directly to the network through an interface. To include credentials from a traditional data source <b>312</b> in chaincode, the developer <b>310</b> could use an out-of-band connection to access the data. In this example, the blockchain user <b>302</b> connects to the permissioned blockchain <b>304</b> through a peer node <b>314</b>. Before proceeding with any transactions, the peer node <b>314</b> retrieves the user's enrollment and transaction certificates from a certificate authority <b>316</b>, which manages user roles and permissions. In some cases, blockchain users must possess these digital certificates in order to transact on the permissioned blockchain <b>304</b>. Meanwhile, a user attempting to utilize chaincode may be required to verify their credentials on the traditional data source <b>312</b>. To confirm the user's authorization, chaincode can use an out-of-band connection to this data through a traditional processing platform <b>318</b>.</p><p id="p-0071" num="0072"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> illustrates another example of a permissioned blockchain network <b>320</b>, which features a distributed, decentralized peer-to-peer architecture. In this example, a blockchain user <b>322</b> may submit a transaction to the permissioned blockchain <b>324</b>. In this example, the transaction can be a deploy, invoke, or query, and may be issued through a client-side application leveraging an SDK, directly through an API, etc. Networks may provide access to a regulator <b>326</b>, such as an auditor. A blockchain network operator <b>328</b> manages member permissions, such as enrolling the regulator <b>326</b> as an &#x201c;auditor&#x201d; and the blockchain user <b>322</b> as a &#x201c;client.&#x201d; An auditor could be restricted only to querying the ledger whereas a client could be authorized to deploy, invoke, and query certain types of chaincode.</p><p id="p-0072" num="0073">A blockchain developer <b>330</b> writes chaincode and client-side applications. The blockchain developer <b>330</b> can deploy chaincode directly to the network through an interface. To include credentials from a traditional data source <b>332</b> in chaincode, the developer <b>330</b> could use an out-of-band connection to access the data. In this example, the blockchain user <b>322</b> connects to the network through a peer node <b>334</b>. Before proceeding with any transactions, the peer node <b>334</b> retrieves the user's enrollment and transaction certificates from the certificate authority <b>336</b>. In some cases, blockchain users must possess these digital certificates in order to transact on the permissioned blockchain <b>324</b>. Meanwhile, a user attempting to utilize chaincode may be required to verify their credentials on the traditional data source <b>332</b>. To confirm the user's authorization, chaincode can use an out-of-band connection to this data through a traditional processing platform <b>338</b>.</p><p id="p-0073" num="0074">In some embodiments, the blockchain herein may be a permissionless blockchain. In contrast with permissioned blockchains which require permission to join, anyone can join a permissionless blockchain. For example, to join a permissionless blockchain a user may create a personal address and begin interacting with the network, by submitting transactions, and hence adding entries to the ledger. Additionally, all parties have the choice of running a node on the system and employing the mining protocols to help verify transactions.</p><p id="p-0074" num="0075"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> illustrates a process <b>350</b> of a transaction being processed by a permissionless blockchain <b>352</b> including a plurality of nodes <b>354</b>. A sender <b>356</b> desires to send payment or some other form of value (e.g., a deed, medical records, a contract, a good, a service, or any other asset that can be encapsulated in a digital record) to a recipient <b>358</b> via the permissionless blockchain <b>352</b>. In one embodiment, each of the sender device <b>356</b> and the recipient device <b>358</b> may have digital wallets (associated with the blockchain <b>352</b>) that provide user interface controls and a display of transaction parameters. In response, the transaction is broadcast throughout the blockchain <b>352</b> to the nodes <b>354</b>. Depending on the blockchain's <b>352</b> network parameters the nodes verify <b>360</b> the transaction based on rules (which may be pre-defined or dynamically allocated) established by the permissionless blockchain <b>352</b> creators. For example, this may include verifying identities of the parties involved, etc. The transaction may be verified immediately or it may be placed in a queue with other transactions and the nodes <b>354</b> determine if the transactions are valid based on a set of network rules.</p><p id="p-0075" num="0076">In structure <b>362</b>, valid transactions are formed into a block and sealed with a lock (hash). This process may be performed by mining nodes among the nodes <b>354</b>. Mining nodes may utilize additional software specifically for mining and creating blocks for the permissionless blockchain <b>352</b>. Each block may be identified by a hash (e.g., 256 bit number, etc.) created using an algorithm agreed upon by the network. Each block may include a header, a pointer or reference to a hash of a previous block's header in the chain, and a group of valid transactions. The reference to the previous block's hash is associated with the creation of the secure independent chain of blocks.</p><p id="p-0076" num="0077">Before blocks can be added to the blockchain, the blocks must be validated. Validation for the permissionless blockchain <b>352</b> may include a proof-of-work (PoW) which is a solution to a puzzle derived from the block's header. Although not shown in the example of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, another process for validating a block is proof-of-stake. Unlike the proof-of-work, where the algorithm rewards miners who solve mathematical problems, with the proof of stake, a creator of a new block is chosen in a deterministic way, depending on its wealth, also defined as &#x201c;stake.&#x201d; Then, a similar proof is performed by the selected/chosen node.</p><p id="p-0077" num="0078">With mining <b>364</b>, nodes try to solve the block by making incremental changes to one variable until the solution satisfies a network-wide target. This creates the PoW thereby ensuring correct answers. In other words, a potential solution must prove that computing resources were drained in solving the problem. In some types of permissionless blockchains, miners may be rewarded with value (e.g., coins, etc.) for correctly mining a block.</p><p id="p-0078" num="0079">Here, the PoW process, alongside the chaining of blocks, makes modifications of the blockchain extremely difficult, as an attacker must modify all subsequent blocks in order for the modifications of one block to be accepted. Furthermore, as new blocks are mined, the difficulty of modifying a block increases, and the number of subsequent blocks increases. With distribution <b>366</b>, the successfully validated block is distributed through the permissionless blockchain <b>352</b> and all nodes <b>354</b> add the block to a majority chain which is the permissionless blockchain's <b>352</b> auditable ledger. Furthermore, the value in the transaction submitted by the sender <b>356</b> is deposited or otherwise transferred to the digital wallet of the recipient device <b>358</b>.</p><p id="p-0079" num="0080"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates a flow diagram <b>400</b> of an example method for an automated optimization of trusted invoicing by reduction of an invoice finalization time based on a blockchain, according to example embodiments. Referring to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the method <b>400</b> may include one or more of the steps described below.</p><p id="p-0080" num="0081"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates a flow chart of an example method executed by the BC node <b>102</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). It should be understood that method <b>400</b> depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may include additional operations and that some of the operations described therein may be removed and/or modified without departing from the scope of the method <b>400</b>. The description of the method <b>400</b> is also made with reference to the features depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> for purposes of illustration. Particularly, the processor <b>104</b> of the BC node <b>102</b> may execute some or all of the operations included in the method <b>400</b>.</p><p id="p-0081" num="0082">With reference to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, at block <b>412</b>, the processor <b>104</b> may monitor a delivery of a service to a first node from a second node based on a service contract and an order retrieved from a blockchain. At block <b>414</b>, the processor <b>104</b> may determine an incremental charge for a partial delivery of the service based on the monitored delivery. At block <b>416</b>, the processor <b>104</b> may execute a smart contract to: issue the incremental charge for the partial delivery of the service and, responsive to a resolution of a dispute raised for the incremental charge, add the incremental charge to an incremental invoice.</p><p id="p-0082" num="0083"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates a flow diagram <b>450</b> of an example method, according to example embodiments. Referring to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the method <b>450</b> may also include one or more of the following steps. At block <b>452</b>, the processor <b>104</b> may execute the smart contract to generate a final invoice based on a plurality of incremental invoices. At block <b>454</b>, the processor <b>104</b> may execute the smart contract to generate a final invoice upon a detection of a completion of the delivery of the service. At block <b>456</b>, the processor <b>104</b> may execute the smart contract to generate a final invoice in response to a reconciliation of all of the incremental charges by the first node or by the second node. Note that an intermediate status of the service delivery may be recorded on a blockchain ledger. The intermediate status of the service delivery may be recorded as blockchain transactions. At block <b>458</b>, the processor <b>104</b> may receive consents from the first node and from the second node for adding the incremental charge to the incremental invoice.</p><p id="p-0083" num="0084"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> illustrates an example system <b>500</b> that includes a physical infrastructure <b>510</b> configured to perform various operations according to example embodiments. Referring to <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the physical infrastructure <b>510</b> includes a module <b>512</b> and a module <b>514</b>. The module <b>514</b> includes a blockchain <b>520</b> and a smart contract <b>530</b> (which may reside on the blockchain <b>520</b>), that may execute any of the operational steps <b>508</b> (in module <b>512</b>) included in any of the example embodiments. The steps/operations <b>508</b> may include one or more of the embodiments described or depicted and may represent output or written information that is written or read from one or more smart contracts <b>530</b> and/or blockchains <b>520</b>. The physical infrastructure <b>510</b>, the module <b>512</b>, and the module <b>514</b> may include one or more computers, servers, processors, memories, and/or wireless communication devices. Further, the module <b>512</b> and the module <b>514</b> may be a same module.</p><p id="p-0084" num="0085"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> illustrates another example system <b>540</b> configured to perform various operations according to example embodiments. Referring to <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, the system <b>540</b> includes a module <b>512</b> and a module <b>514</b>. The module <b>514</b> includes a blockchain <b>520</b> and a smart contract <b>530</b> (which may reside on the blockchain <b>520</b>), that may execute any of the operational steps <b>508</b> (in module <b>512</b>) included in any of the example embodiments. The steps/operations <b>508</b> may include one or more of the embodiments described or depicted and may represent output or written information that is written or read from one or more smart contracts <b>530</b> and/or blockchains <b>520</b>. The module <b>512</b> and the module <b>514</b> may include one or more computers, servers, processors, memories, and/or wireless communication devices. Further, the module <b>512</b> and the module <b>514</b> may be a same module.</p><p id="p-0085" num="0086"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> illustrates an example system configured to utilize a smart contract configuration among contracting parties and a mediating server configured to enforce the smart contract terms on the blockchain according to example embodiments. Referring to <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, the configuration <b>550</b> may represent a communication session, an asset transfer session or a process or procedure that is driven by a smart contract <b>530</b> which explicitly identifies one or more user devices <b>552</b> and/or <b>556</b>. The execution, operations and results of the smart contract execution may be managed by a server <b>554</b>. Content of the smart contract <b>530</b> may require digital signatures by one or more of the entities <b>552</b> and <b>556</b> which are parties to the smart contract transaction. The results of the smart contract execution may be written to a blockchain <b>520</b> as a blockchain transaction. The smart contract <b>530</b> resides on the blockchain <b>520</b> which may reside on one or more computers, servers, processors, memories, and/or wireless communication devices.</p><p id="p-0086" num="0087"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates a system <b>560</b> including a blockchain, according to example embodiments. Referring to the example of <figref idref="DRAWINGS">FIG. <b>5</b>D</figref>, an application programming interface (API) gateway <b>562</b> provides a common interface for accessing blockchain logic (e.g., smart contract <b>530</b> or other chaincode) and data (e.g., distributed ledger, etc.). In this example, the API gateway <b>562</b> is a common interface for performing transactions (invoke, queries, etc.) on the blockchain by connecting one or more entities <b>552</b> and <b>556</b> to a blockchain peer (i.e., server <b>554</b>). Here, the server <b>554</b> is a blockchain network peer component that holds a copy of the world state and a distributed ledger allowing clients <b>552</b> and <b>556</b> to query data on the world state as well as submit transactions into the blockchain network where, depending on the smart contract <b>530</b> and endorsement policy, endorsing peers will run the smart contracts <b>530</b>.</p><p id="p-0087" num="0088">The above embodiments may be implemented in hardware, in a computer program executed by a processor, in firmware, or in a combination of the above. A computer program may be embodied on a computer readable medium, such as a storage medium. For example, a computer program may reside in random access memory (&#x201c;RAM&#x201d;), flash memory, read-only memory (&#x201c;ROM&#x201d;), erasable programmable read-only memory (&#x201c;EPROM&#x201d;), electrically erasable programmable read-only memory (&#x201c;EEPROM&#x201d;), registers, hard disk, a removable disk, a compact disk read-only memory (&#x201c;CD-ROM&#x201d;), or any other form of storage medium known in the art.</p><p id="p-0088" num="0089">An exemplary storage medium may be coupled to the processor such that the processor may read information from, and write information to, the storage medium. In the alternative, the storage medium may be integral to the processor. The processor and the storage medium may reside in an application specific integrated circuit (&#x201c;ASIC&#x201d;). In the alternative, the processor and the storage medium may reside as discrete components.</p><p id="p-0089" num="0090"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> illustrates a process <b>600</b> of a new block being added to a distributed ledger <b>620</b>, according to example embodiments, and <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> illustrates contents of a new data block structure <b>630</b> for blockchain, according to example embodiments. The data associated with the contracts, transactions and the generated invoices is stored as a part of the in the new data block structure <b>630</b> in a block of the blockchain.</p><p id="p-0090" num="0091">Referring to <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, clients (not shown) may submit transactions to blockchain nodes <b>611</b>, <b>612</b>, and/or <b>613</b>. Clients may be instructions received from any source to enact activity on the blockchain <b>620</b>. As an example, clients may be applications that act on behalf of a requester, such as a device, person or entity to propose transactions for the blockchain. The plurality of blockchain peers (e.g., blockchain nodes <b>611</b>, <b>612</b>, and <b>613</b>) may maintain a state of the blockchain network and a copy of the distributed ledger <b>620</b>. Different types of blockchain nodes/peers may be present in the blockchain network including endorsing peers which simulate and endorse transactions proposed by clients and committing peers which verify endorsements, validate transactions, and commit transactions to the distributed ledger <b>620</b>. In this example, the blockchain nodes <b>611</b>, <b>612</b>, and <b>613</b> may perform the role of endorser node, committer node, or both.</p><p id="p-0091" num="0092">The distributed ledger <b>620</b> includes a blockchain which stores immutable, sequenced records in blocks, and a state database <b>624</b> (current world state) maintaining a current state of the blockchain <b>622</b>. One distributed ledger <b>620</b> may exist per channel and each peer maintains its own copy of the distributed ledger <b>620</b> for each channel of which they are a member. The blockchain <b>622</b> is a transaction log, structured as hash-linked blocks where each block contains a sequence of N transactions. Blocks may include various components such as shown in <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>. The linking of the blocks (shown by arrows in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>) may be generated by adding a hash of a prior block's header within a block header of a current block. In this way, all transactions on the blockchain <b>622</b> are sequenced and cryptographically linked together preventing tampering with blockchain data without breaking the hash links. Furthermore, because of the links, the latest block in the blockchain <b>622</b> represents every transaction that has come before it. The blockchain <b>622</b> may be stored on a peer file system (local or attached storage), which supports an append-only blockchain workload.</p><p id="p-0092" num="0093">The current state of the blockchain <b>622</b> and the distributed ledger <b>622</b> may be stored in the state database <b>624</b>. Here, the current state data represents the latest values for all keys ever included in the chain transaction log of the blockchain <b>622</b>. Chaincode invocations execute transactions against the current state in the state database <b>624</b>. To make these chaincode interactions extremely efficient, the latest values of all keys are stored in the state database <b>624</b>. The state database <b>624</b> may include an indexed view into the transaction log of the blockchain <b>622</b>, it can therefore be regenerated from the chain at any time. The state database <b>624</b> may automatically get recovered (or generated if needed) upon peer startup, before transactions are accepted.</p><p id="p-0093" num="0094">Endorsing nodes receive transactions from clients and endorse the transaction based on simulated results. Endorsing nodes hold smart contracts which simulate the transaction proposals. When an endorsing node endorses a transaction, the endorsing node creates a transaction endorsement which is a signed response from the endorsing node to the client application indicating the endorsement of the simulated transaction. The method of endorsing a transaction depends on an endorsement policy which may be specified within chaincode. An example of an endorsement policy is &#x201c;the majority of endorsing peers must endorse the transaction&#x201d;. Different channels may have different endorsement policies. Endorsed transactions are forward by the client application to ordering service <b>610</b>.</p><p id="p-0094" num="0095">The ordering service <b>610</b> accepts endorsed transactions, orders them into a block, and delivers the blocks to the committing peers. For example, the ordering service <b>610</b> may initiate a new block when a threshold of transactions has been reached, a timer times out, or another condition. In the example of <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, blockchain node <b>612</b> is a committing peer that has received a new data new data block <b>630</b> for storage on blockchain <b>620</b>. The first block in the blockchain may be referred to as a genesis block which includes information about the blockchain, its members, the data stored therein, etc.</p><p id="p-0095" num="0096">The ordering service <b>610</b> may be made up of a cluster of orderers. The ordering service <b>610</b> does not process transactions, smart contracts, or maintain the shared ledger. Rather, the ordering service <b>610</b> may accept the endorsed transactions and specifies the order in which those transactions are committed to the distributed ledger <b>620</b>. The architecture of the blockchain network may be designed such that the specific implementation of &#x2018;ordering&#x2019; (e.g., Solo, Kafka, BFT, etc.) becomes a pluggable component.</p><p id="p-0096" num="0097">Transactions are written to the distributed ledger <b>620</b> in a consistent order. The order of transactions is established to ensure that the updates to the state database <b>624</b> are valid when they are committed to the network. Unlike a cryptocurrency blockchain system (e.g., Bitcoin, etc.) where ordering occurs through the solving of a cryptographic puzzle, or mining, in this example the parties of the distributed ledger <b>620</b> may choose the ordering mechanism that best suits that network.</p><p id="p-0097" num="0098">When the ordering service <b>610</b> initializes a new data block <b>630</b>, the new data block <b>630</b> may be broadcast to committing peers (e.g., blockchain nodes <b>611</b>, <b>612</b>, and <b>613</b>). In response, each committing peer validates the transaction within the new data block <b>630</b> by checking to make sure that the read set and the write set still match the current world state in the state database <b>624</b>. Specifically, the committing peer can determine whether the read data that existed when the endorsers simulated the transaction is identical to the current world state in the state database <b>624</b>. When the committing peer validates the transaction, the transaction is written to the blockchain <b>622</b> on the distributed ledger <b>620</b>, and the state database <b>624</b> is updated with the write data from the read-write set. If a transaction fails, that is, if the committing peer finds that the read-write set does not match the current world state in the state database <b>624</b>, the transaction ordered into a block will still be included in that block, but it will be marked as invalid, and the state database <b>624</b> will not be updated.</p><p id="p-0098" num="0099">Referring to <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>, a new data block <b>630</b> (also referred to as a data block) that is stored on the blockchain <b>622</b> of the distributed ledger <b>620</b> may include multiple data segments such as a block header <b>640</b>, block data <b>650</b>, and block metadata <b>660</b>. It should be appreciated that the various depicted blocks and their contents, such as new data block <b>630</b> and its contents. Shown in <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> are merely examples and are not meant to limit the scope of the example embodiments. The new data block <b>630</b> may store transactional information of N transaction(s) (e.g., 1, 10, 100, 500, 1000, 2000, 3000, etc.) within the block data <b>650</b>. The new data block <b>630</b> may also include a link to a previous block (e.g., on the blockchain <b>622</b> in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>) within the block header <b>640</b>. In particular, the block header <b>640</b> may include a hash of a previous block's header. The block header <b>640</b> may also include a unique block number, a hash of the block data <b>650</b> of the new data block <b>630</b>, and the like. The block number of the new data block <b>630</b> may be unique and assigned in various orders, such as an incremental/sequential order starting from zero.</p><p id="p-0099" num="0100">The block data <b>650</b> may store transactional information of each transaction that is recorded within the new data block <b>630</b>. For example, the transaction data may include one or more of a type of the transaction, a version, a timestamp, a channel ID of the distributed ledger <b>620</b>, a transaction ID, an epoch, a payload visibility, a chaincode path (deploy tx), a chaincode name, a chaincode version, input (chaincode and functions), a client (creator) identify such as a public key and certificate, a signature of the client, identities of endorsers, endorser signatures, a proposal hash, chaincode events, response status, namespace, a read set (list of key and version read by the transaction, etc.), a write set (list of key and value, etc.), a start key, an end key, a list of keys, a Merkel tree query summary, and the like. The transaction data may be stored for each of the N transactions.</p><p id="p-0100" num="0101">In some embodiments, the block data <b>650</b> may also store new data <b>662</b> which adds additional information to the hash-linked chain of blocks in the blockchain <b>622</b>. The additional information includes one or more of the steps, features, processes and/or actions described or depicted herein. Accordingly, the new data <b>662</b> can be stored in an immutable log of blocks on the distributed ledger <b>620</b>. The data associated with the contracts, transactions and the generated invoices is stored as a part of the in the new data <b>662</b> in a block of the blockchain. The application requires smart contracts to be developed as per the methods disclosed herein and to be loaded on the blockchain platform, and the exemplary solution may define privacy policy along with the endorsement criteria. Some of the benefits of storing such new data <b>662</b> are reflected in the various embodiments disclosed and depicted herein. Although in <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> the new data <b>662</b> is depicted in the block data <b>650</b> but could also be located in the block header <b>640</b> or the block metadata <b>660</b>.</p><p id="p-0101" num="0102">The block metadata <b>660</b> may store multiple fields of metadata (e.g., as a byte array, etc.). Metadata fields may include signature on block creation, a reference to a last configuration block, a transaction filter identifying valid and invalid transactions within the block, last offset persisted of an ordering service that ordered the block, and the like. The signature, the last configuration block, and the orderer metadata may be added by the ordering service <b>610</b>. Meanwhile, a committer of the block (such as blockchain node <b>612</b>) may add validity/invalidity information based on an endorsement policy, verification of read/write sets, and the like. The transaction filter may include a byte array of a size equal to the number of transactions in the block data <b>650</b> and a validation code identifying whether a transaction was valid/invalid.</p><p id="p-0102" num="0103"><figref idref="DRAWINGS">FIG. <b>6</b>C</figref> illustrates an embodiment of a blockchain <b>670</b> for digital content in accordance with the embodiments described herein. The digital content may include one or more files and associated information. The files may include media, images, video, audio, text, links, graphics, animations, web pages, documents, or other forms of digital content. The immutable, append-only aspects of the blockchain serve as a safeguard to protect the integrity, validity, and authenticity of the digital content, making it suitable use in legal proceedings where admissibility rules apply or other settings where evidence is taken in to consideration or where the presentation and use of digital information is otherwise of interest. In this case, the digital content may be referred to as digital evidence.</p><p id="p-0103" num="0104">The blockchain may be formed in various ways. In one embodiment, the digital content may be included in and accessed from the blockchain itself. For example, each block of the blockchain may store a hash value of reference information (e.g., header, value, etc.) along the associated digital content. The hash value and associated digital content may then be encrypted together. Thus, the digital content of each block may be accessed by decrypting each block in the blockchain, and the hash value of each block may be used as a basis to reference a previous block. This may be illustrated as follows:</p><p id="p-0104" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="77pt" align="center"/><colspec colname="3" colwidth="14pt" align="left"/><colspec colname="4" colwidth="70pt" align="center"/><thead><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>Block 1</entry><entry>Block 2</entry><entry>. . .</entry><entry>Block N</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="77pt" align="center"/><colspec colname="3" colwidth="14pt" align="center"/><colspec colname="4" colwidth="70pt" align="center"/><tbody valign="top"><row><entry>Hash Value 1</entry><entry>Hash Value 2</entry><entry/><entry>Hash Value N</entry></row><row><entry>Digital Content 1</entry><entry>Digital Content 2</entry><entry/><entry>Digital Content N</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0105" num="0105">In one embodiment, the digital content may be not included in the blockchain. For example, the blockchain may store the encrypted hashes of the content of each block without any of the digital content. The digital content may be stored in another storage area or memory address in association with the hash value of the original file. The other storage area may be the same storage device used to store the blockchain or may be a different storage area or even a separate relational database. The digital content of each block may be referenced or accessed by obtaining or querying the hash value of a block of interest and then looking up that has value in the storage area, which is stored in correspondence with the actual digital content. This operation may be performed, for example, a database gatekeeper. This may be illustrated as follows:</p><p id="p-0106" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="70pt" align="center"/><colspec colname="2" colwidth="133pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Blockchain</entry><entry>Storage Area</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>Block 1 Hash Value</entry><entry>Block 1 Hash Value . . . Content</entry></row><row><entry/><entry>.</entry><entry>.</entry></row><row><entry/><entry>.</entry><entry>.</entry></row><row><entry/><entry>.</entry><entry>.</entry></row><row><entry/><entry>Block N Hash Value</entry><entry>Block N Hash Value . . . Content</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0107" num="0106">In the example embodiment of <figref idref="DRAWINGS">FIG. <b>6</b>C</figref>, the blockchain <b>670</b> includes a number of blocks <b>678</b><sub>1</sub>, <b>678</b><sub>2</sub>, . . . <b>678</b><sub>N </sub>cryptographically linked in an ordered sequence, where N&#x2265;1. The encryption used to link the blocks <b>678</b><sub>1</sub>, <b>678</b><sub>2</sub>, . . . <b>678</b><sub>N </sub>may be any of a number of keyed or un-keyed Hash functions. In one embodiment, the blocks <b>678</b><sub>1</sub>, <b>678</b><sub>2</sub>, . . . <b>678</b><sub>N </sub>are subject to a hash function which produces n-bit alphanumeric outputs (where n is 256 or another number) from inputs that are based on information in the blocks. Examples of such a hash function include, but are not limited to, a SHA-type (SHA stands for Secured Hash Algorithm) algorithm, Merkle-Damgard algorithm, HAIFA algorithm, Merkle-tree algorithm, nonce-based algorithm, and a non-collision-resistant PRF algorithm. In another embodiment, the blocks <b>678</b><sub>1</sub>, <b>678</b><sub>2</sub>, . . . , <b>678</b><sub>N </sub>may be cryptographically linked by a function that is different from a hash function. For purposes of illustration, the following description is made with reference to a hash function, e.g., SHA-2.</p><p id="p-0108" num="0107">Each of the blocks <b>678</b><sub>1</sub>, <b>678</b><sub>2</sub>, . . . , <b>678</b><sub>N </sub>in the blockchain includes a header, a version of the file, and a value. The header and the value are different for each block as a result of hashing in the blockchain. In one embodiment, the value may be included in the header. As described in greater detail below, the version of the file may be the original file or a different version of the original file.</p><p id="p-0109" num="0108">The first block <b>678</b><sub>1 </sub>in the blockchain is referred to as the genesis block and includes the header <b>672</b><sub>1</sub>, original file <b>674</b><sub>1</sub>, and an initial value <b>676</b><sub>1</sub>. The hashing scheme used for the genesis block, and indeed in all subsequent blocks, may vary. For example, all the information in the first block <b>678</b><sub>1 </sub>may be hashed together and at one time, or each or a portion of the information in the first block <b>678</b><sub>1 </sub>may be separately hashed and then a hash of the separately hashed portions may be performed.</p><p id="p-0110" num="0109">The header <b>672</b><sub>1 </sub>may include one or more initial parameters, which, for example, may include a version number, timestamp, nonce, root information, difficulty level, consensus protocol, duration, media format, source, descriptive keywords, and/or other information associated with original file <b>674</b><sub>1 </sub>and/or the blockchain. The header <b>672</b><sub>1 </sub>may be generated automatically (e.g., by blockchain network managing software) or manually by a blockchain participant. Unlike the header in other blocks <b>678</b><sub>2 </sub>to <b>678</b><sub>N </sub>in the blockchain, the header <b>672</b><sub>1 </sub>in the genesis block does not reference a previous block, simply because there is no previous block.</p><p id="p-0111" num="0110">The original file <b>674</b><sub>1 </sub>in the genesis block may be, for example, data as captured by a device with or without processing prior to its inclusion in the blockchain. The original file <b>674</b><sub>1 </sub>is received through the interface of the system from the device, media source, or node. The original file <b>674</b><sub>1 </sub>is associated with metadata, which, for example, may be generated by a user, the device, and/or the system processor, either manually or automatically. The metadata may be included in the first block <b>678</b><sub>1 </sub>in association with the original file <b>674</b><sub>1</sub>.</p><p id="p-0112" num="0111">The value <b>676</b><sub>1 </sub>in the genesis block is an initial value generated based on one or more unique attributes of the original file <b>674</b><sub>1</sub>. In one embodiment, the one or more unique attributes may include the hash value for the original file <b>674</b><sub>1</sub>, metadata for the original file <b>674</b><sub>1</sub>, and other information associated with the file. In one implementation, the initial value <b>676</b><sub>1 </sub>may be based on the following unique attributes:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0112">1) SHA-2 computed hash value for the original file</li>        <li id="ul0004-0002" num="0113">2) originating device ID</li>        <li id="ul0004-0003" num="0114">3) starting timestamp for the original file</li>        <li id="ul0004-0004" num="0115">4) initial storage location of the original file</li>        <li id="ul0004-0005" num="0116">5) blockchain network member ID for software to currently control the original file and associated metadata</li>    </ul>    </li></ul></p><p id="p-0113" num="0117">The other blocks <b>678</b><sub>2 </sub>to <b>678</b><sub>N </sub>in the blockchain also have headers, files, and values. However, unlike the first block <b>672</b><sub>1</sub>, each of the headers <b>672</b><sub>2 </sub>to <b>672</b><sub>N </sub>in the other blocks includes the hash value of an immediately preceding block. The hash value of the immediately preceding block may be just the hash of the header of the previous block or may be the hash value of the entire previous block. By including the hash value of a preceding block in each of the remaining blocks, a trace can be performed from the Nth block back to the genesis block (and the associated original file) on a block-by-block basis, as indicated by arrows <b>680</b>, to establish an auditable and immutable chain-of-custody.</p><p id="p-0114" num="0118">Each of the header <b>672</b><sub>2 </sub>to <b>672</b><sub>N </sub>in the other blocks may also include other information, e.g., version number, timestamp, nonce, root information, difficulty level, consensus protocol, and/or other parameters or information associated with the corresponding files and/or the blockchain in general.</p><p id="p-0115" num="0119">The files <b>674</b><sub>2 </sub>to <b>674</b><sub>N </sub>in the other blocks may be equal to the original file or may be a modified version of the original file in the genesis block depending, for example, on the type of processing performed. The type of processing performed may vary from block to block. The processing may involve, for example, any modification of a file in a preceding block, such as redacting information or otherwise changing the content of, taking information away from, or adding or appending information to the files.</p><p id="p-0116" num="0120">Additionally, or alternatively, the processing may involve merely copying the file from a preceding block, changing a storage location of the file, analyzing the file from one or more preceding blocks, moving the file from one storage or memory location to another, or performing action relative to the file of the blockchain and/or its associated metadata. Processing which involves analyzing a file may include, for example, appending, including, or otherwise associating various analytics, statistics, or other information associated with the file.</p><p id="p-0117" num="0121">The values in each of the other blocks <b>6762</b> to <b>676</b>N in the other blocks are unique values and are all different as a result of the processing performed. For example, the value in any one block corresponds to an updated version of the value in the previous block. The update is reflected in the hash of the block to which the value is assigned. The values of the blocks therefore provide an indication of what processing was performed in the blocks and also permit a tracing through the blockchain back to the original file. This tracking confirms the chain-of-custody of the file throughout the entire blockchain.</p><p id="p-0118" num="0122">For example, consider the case where portions of the file in a previous block are redacted, blocked out, or pixelated in order to protect the identity of a person shown in the file. In this case, the block including the redacted file will include metadata associated with the redacted file, e.g., how the redaction was performed, who performed the redaction, timestamps where the redaction(s) occurred, etc. The metadata may be hashed to form the value. Because the metadata for the block is different from the information that was hashed to form the value in the previous block, the values are different from one another and may be recovered when decrypted.</p><p id="p-0119" num="0123">In one embodiment, the value of a previous block may be updated (e.g., a new hash value computed) to form the value of a current block when any one or more of the following occurs. The new hash value may be computed by hashing all or a portion of the information noted below, in this example embodiment.<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0124">a) new SHA-2 computed hash value if the file has been processed in any way (e.g., if the file was redacted, copied, altered, accessed, or some other action was taken)</li>        <li id="ul0006-0002" num="0125">b) new storage location for the file</li>        <li id="ul0006-0003" num="0126">c) new metadata identified associated with the file</li>        <li id="ul0006-0004" num="0127">d) transfer of access or control of the file from one blockchain participant to another blockchain participant</li>    </ul>    </li></ul></p><p id="p-0120" num="0128"><figref idref="DRAWINGS">FIG. <b>6</b>D</figref> illustrates an embodiment of a block which may represent the structure of the blocks in the blockchain <b>690</b> in accordance with one embodiment. The block, Block<sub>i</sub>, includes a header <b>672</b><sub>i</sub>, a file <b>674</b><sub>i</sub>, and a value <b>676</b><sub>i</sub>.</p><p id="p-0121" num="0129">The header <b>672</b><sub>i </sub>includes a hash value of a previous block Block<sub>i&#x2212;1 </sub>and additional reference information, which, for example, may be any of the types of information (e.g., header information including references, characteristics, parameters, etc.) discussed herein. All blocks reference the hash of a previous block except, of course, the genesis block. The hash value of the previous block may be just a hash of the header in the previous block or a hash of all or a portion of the information in the previous block, including the file and metadata.</p><p id="p-0122" num="0130">The file <b>674</b><sub>i </sub>includes a plurality of data, such as Data 1, Data 2, . . . , Data N in sequence. The data are tagged with metadata Metadata 1, Metadata 2, . . . , Metadata N which describe the content and/or characteristics associated with the data. For example, the metadata for each data may include information to indicate a timestamp for the data, process the data, keywords indicating the persons or other content depicted in the data, and/or other features that may be helpful to establish the validity and content of the file as a whole, and particularly its use a digital evidence, for example, as described in connection with an embodiment discussed below. In addition to the metadata, each data may be tagged with reference REF<sub>1</sub>, REF<sub>2</sub>, . . . , REF<sub>N </sub>to a previous data to prevent tampering, gaps in the file, and sequential reference through the file.</p><p id="p-0123" num="0131">Once the metadata is assigned to the data (e.g., through a smart contract), the metadata cannot be altered without the hash changing, which can easily be identified for invalidation. The metadata, thus, creates a data log of information that may be accessed for use by participants in the blockchain.</p><p id="p-0124" num="0132">The value <b>676</b><sub>i </sub>is a hash value or other value computed based on any of the types of information previously discussed. For example, for any given block Block<sub>i</sub>, the value for that block may be updated to reflect the processing that was performed for that block, e.g., new hash value, new storage location, new metadata for the associated file, transfer of control or access, identifier, or other action or information to be added. Although the value in each block is shown to be separate from the metadata for the data of the file and header, the value may be based, in part or whole, on this metadata in another embodiment.</p><p id="p-0125" num="0133">Once the blockchain <b>670</b> is formed, at any point in time, the immutable chain-of-custody for the file may be obtained by querying the blockchain for the transaction history of the values across the blocks. This query, or tracking procedure, may begin with decrypting the value of the block that is most currently included (e.g., the last (N<sup>th</sup>) block), and then continuing to decrypt the value of the other blocks until the genesis block is reached and the original file is recovered. The decryption may involve decrypting the headers and files and associated metadata at each block, as well.</p><p id="p-0126" num="0134">Decryption is performed based on the type of encryption that took place in each block. This may involve the use of private keys, public keys, or a public key-private key pair. For example, when asymmetric encryption is used, blockchain participants or a processor in the network may generate a public key and private key pair using a predetermined algorithm. The public key and private key are associated with each other through some mathematical relationship. The public key may be distributed publicly to serve as an address to receive messages from other users, e.g., an IP address or home address. The private key is kept secret and used to digitally sign messages sent to other blockchain participants. The signature is included in the message so that the recipient can verify using the public key of the sender. This way, the recipient can be sure that only the sender could have sent this message.</p><p id="p-0127" num="0135">Generating a key pair may be analogous to creating an account on the blockchain, but without having to actually register anywhere. Also, every transaction that is executed on the blockchain is digitally signed by the sender using their private key. This signature ensures that only the owner of the account can track and process (if within the scope of permission determined by a smart contract) the file of the blockchain.</p><p id="p-0128" num="0136"><figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref> illustrate additional examples of use cases for blockchain which may be incorporated and used herein. In particular, <figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates an example <b>700</b> of a blockchain <b>710</b> which stores machine learning (artificial intelligence) data. Machine learning relies on vast quantities of historical data (or training data) to build predictive models for accurate prediction on new data. Machine learning software (e.g., neural networks, etc.) can often sift through millions of records to unearth non-intuitive patterns.</p><p id="p-0129" num="0137">In the example of <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, a host platform <b>720</b> builds and deploys a machine learning model for predictive monitoring of assets <b>730</b>. Here, the host platform <b>720</b> may be a cloud platform, an industrial server, a web server, a personal computer, a user device, and the like. Assets <b>730</b> can be any type of asset (e.g., machine or equipment, etc.) such as an aircraft, locomotive, turbine, medical machinery and equipment, oil and gas equipment, boats, ships, vehicles, and the like. As another example, assets <b>730</b> may be non-tangible assets such as stocks, currency, digital coins, insurance, or the like.</p><p id="p-0130" num="0138">The blockchain <b>710</b> can be used to significantly improve both a training process <b>702</b> of the machine learning model and a predictive process <b>704</b> based on a trained machine learning model. For example, in <b>702</b>, rather than requiring a data scientist/engineer or other user to collect the data, historical data may be stored by the assets <b>730</b> themselves (or through an intermediary, not shown) on the blockchain <b>710</b>. This can significantly reduce the collection time needed by the host platform <b>720</b> when performing predictive model training. For example, using smart contracts, data can be directly and reliably transferred straight from its place of origin to the blockchain <b>710</b>. By using the blockchain <b>710</b> to ensure the security and ownership of the collected data, smart contracts may directly send the data from the assets to the individuals that use the data for building a machine learning model. This allows for sharing of data among the assets <b>730</b>.</p><p id="p-0131" num="0139">The collected data may be stored in the blockchain <b>710</b> based on a consensus mechanism. The consensus mechanism pulls in (permissioned nodes) to ensure that the data being recorded is verified and accurate. The data recorded is time-stamped, cryptographically signed, and immutable. It is therefore auditable, transparent, and secure. Adding IoT devices which write directly to the blockchain can, in certain cases (i.e. supply chain, healthcare, logistics, etc.), increase both the frequency and accuracy of the data being recorded.</p><p id="p-0132" num="0140">Furthermore, training of the machine learning model on the collected data may take rounds of refinement and testing by the host platform <b>720</b>. Each round may be based on additional data or data that was not previously considered to help expand the knowledge of the machine learning model. In <b>702</b>, the different training and testing steps (and the data associated therewith) may be stored on the blockchain <b>710</b> by the host platform <b>720</b>. Each refinement of the machine learning model (e.g., changes in variables, weights, etc.) may be stored on the blockchain <b>710</b>. This provides verifiable proof of how the model was trained and what data was used to train the model. Furthermore, when the host platform <b>720</b> has achieved a finally trained model, the resulting model may be stored on the blockchain <b>710</b>.</p><p id="p-0133" num="0141">After the model has been trained, it may be deployed to a live environment where it can make predictions/decisions based on the execution of the final trained machine learning model. For example, in <b>704</b>, the machine learning model may be used for condition-based maintenance (CBM) for an asset such as an aircraft, a wind turbine, a healthcare machine, and the like. In this example, data fed back from the asset <b>730</b> may be input the machine learning model and used to make event predictions such as failure events, error codes, and the like. Determinations made by the execution of the machine learning model at the host platform <b>720</b> may be stored on the blockchain <b>710</b> to provide auditable/verifiable proof. As one non-limiting example, the machine learning model may predict a future breakdown/failure to a part of the asset <b>730</b> and create alert or a notification to replace the part. The data behind this decision may be stored by the host platform <b>720</b> on the blockchain <b>710</b>. In one embodiment the features and/or the actions described and/or depicted herein can occur on or with respect to the blockchain <b>710</b>.</p><p id="p-0134" num="0142">New transactions for a blockchain can be gathered together into a new block and added to an existing hash value. This is then encrypted to create a new hash for the new block. This is added to the next list of transactions when they are encrypted, and so on. The result is a chain of blocks that each contain the hash values of all preceding blocks. Computers that store these blocks regularly compare their hash values to ensure that they are all in agreement. Any computer that does not agree, discards the records that are causing the problem. This approach is good for ensuring tamper-resistance of the blockchain, but it is not perfect.</p><p id="p-0135" num="0143">One way to game this system is for a dishonest user to change the list of transactions in their favor, but in a way that leaves the hash unchanged. This can be done by brute force, in other words by changing a record, encrypting the result, and seeing whether the hash value is the same. And if not, trying again and again and again until it finds a hash that matches. The security of blockchains is based on the belief that ordinary computers can only perform this kind of brute force attack over time scales that are entirely impractical, such as the age of the universe. By contrast, quantum computers are much faster (<b>1000</b><i>s </i>of times faster) and consequently pose a much greater threat.</p><p id="p-0136" num="0144"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> illustrates an example <b>750</b> of a quantum-secure blockchain <b>752</b> which implements quantum key distribution (QKD) to protect against a quantum computing attack. In this example, blockchain users can verify each other's identities using QKD. This sends information using quantum particles such as photons, which cannot be copied by an eavesdropper without destroying them. In this way, a sender and a receiver through the blockchain can be sure of each other's identity.</p><p id="p-0137" num="0145">In the example of <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, four users are present <b>754</b>, <b>756</b>, <b>758</b>, and <b>760</b>. Each of pair of users may share a secret key <b>762</b> (i.e., a QKD) between themselves. Since there are four nodes in this example, six pairs of nodes exist, and therefore six different secret keys <b>762</b> are used including QKD<sub>AB</sub>, QKD<sub>AC</sub>, QKD<sub>AD</sub>, QKD<sub>BC</sub>, QKD<sub>BD</sub>, and QKD<sub>CD</sub>. Each pair can create a QKD by sending information using quantum particles such as photons, which cannot be copied by an eavesdropper without destroying them. In this way, a pair of users can be sure of each other's identity.</p><p id="p-0138" num="0146">The operation of the blockchain <b>752</b> is based on two procedures (i) creation of transactions, and (ii) construction of blocks that aggregate the new transactions. New transactions may be created similar to a traditional blockchain network. Each transaction may contain information about a sender, a receiver, a time of creation, an amount (or value) to be transferred, a list of reference transactions that justifies the sender has funds for the operation, and the like. This transaction record is then sent to all other nodes where it is entered into a pool of unconfirmed transactions. Here, two parties (i.e., a pair of users from among <b>754</b>-<b>760</b>) authenticate the transaction by providing their shared secret key <b>762</b> (QKD). This quantum signature can be attached to every transaction making it exceedingly difficult to tamper with. Each node checks their entries with respect to a local copy of the blockchain <b>752</b> to verify that each transaction has sufficient funds. However, the transactions are not yet confirmed.</p><p id="p-0139" num="0147">Rather than perform a traditional mining process on the blocks, the blocks may be created in a decentralized manner using a broadcast protocol. At a predetermined period of time (e.g., seconds, minutes, hours, etc.) the network may apply the broadcast protocol to any unconfirmed transaction thereby to achieve a Byzantine agreement (consensus) regarding a correct version of the transaction. For example, each node may possess a private value (transaction data of that particular node). In a first round, nodes transmit their private values to each other. In subsequent rounds, nodes communicate the information they received in the previous round from other nodes. Here, honest nodes are able to create a complete set of transactions within a new block. This new block can be added to the blockchain <b>752</b>. In one embodiment the features and/or the actions described and/or depicted herein can occur on or with respect to the blockchain <b>752</b>.</p><p id="p-0140" num="0148"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example system <b>800</b> that supports one or more of the example embodiments described and/or depicted herein. The system <b>800</b> comprises a computer system/server <b>802</b>, which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and/or configurations that may be suitable for use with computer system/server <b>802</b> include, but are not limited to, personal computer systems, server computer systems, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.</p><p id="p-0141" num="0149">Computer system/server <b>802</b> may be described in the general context of computer system-executable instructions, such as program modules, being executed by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. Computer system/server <b>802</b> may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.</p><p id="p-0142" num="0150">As shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, computer system/server <b>802</b> in cloud computing node <b>800</b> is shown in the form of a general-purpose computing device. The components of computer system/server <b>802</b> may include, but are not limited to, one or more processors or processing units <b>804</b>, a system memory <b>806</b>, and a bus that couples various system components including system memory <b>806</b> to processor <b>804</b>.</p><p id="p-0143" num="0151">The bus represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus.</p><p id="p-0144" num="0152">Computer system/server <b>802</b> typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system/server <b>802</b>, and it includes both volatile and non-volatile media, removable and non-removable media. System memory <b>806</b>, in one embodiment, implements the flow diagrams of the other figures. The system memory <b>806</b> can include computer system readable media in the form of volatile memory, such as random-access memory (RAM) <b>810</b> and/or cache memory <b>812</b>. Computer system/server <b>802</b> may further include other removable/non-removable, volatile/non-volatile computer system storage media. By way of example only, storage system <b>814</b> can be provided for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a &#x201c;hard drive&#x201d;). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a &#x201c;floppy disk&#x201d;), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM or other optical media can be provided. In such instances, each can be connected to the bus by one or more data media interfaces. As will be further depicted and described below, memory <b>806</b> may include at least one program product having a set (e.g., at least one) of program modules that are configured to carry out the functions of various embodiments of the application.</p><p id="p-0145" num="0153">Program/utility <b>816</b>, having a set (at least one) of program modules <b>818</b>, may be stored in memory <b>806</b> by way of example, and not limitation, as well as an operating system, one or more application programs, other program modules, and program data. Each of the operating system, one or more application programs, other program modules, and program data or some combination thereof, may include an implementation of a networking environment. Program modules <b>818</b> generally carry out the functions and/or methodologies of various embodiments of the application as described herein.</p><p id="p-0146" num="0154">As will be appreciated by one skilled in the art, aspects of the present application may be embodied as a system, method, or computer program product. Accordingly, aspects of the present application may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the present application may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.</p><p id="p-0147" num="0155">Computer system/server <b>802</b> may also communicate with one or more external devices <b>820</b> such as a keyboard, a pointing device, a display <b>822</b>, etc.; one or more devices that enable a user to interact with computer system/server <b>802</b>; and/or any devices (e.g., network card, modem, etc.) that enable computer system/server <b>802</b> to communicate with one or more other computing devices. Such communication can occur via I/O interfaces <b>824</b>. Still yet, computer system/server <b>802</b> can communicate with one or more networks such as a local area network (LAN), a general wide area network (WAN), and/or a public network (e.g., the Internet) via network adapter <b>826</b>. As depicted, network adapter <b>826</b> communicates with the other components of computer system/server <b>802</b> via a bus. It should be understood that although not shown, other hardware and/or software components could be used in conjunction with computer system/server <b>802</b>. Examples, include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, RAID systems, tape drives, and data archival storage systems, etc.</p><p id="p-0148" num="0156">Although an exemplary embodiment of at least one of a system, method, and non-transitory computer readable medium has been illustrated in the accompanied drawings and described in the foregoing detailed description, it will be understood that the application is not limited to the embodiments disclosed, but is capable of numerous rearrangements, modifications, and substitutions as set forth and defined by the following claims. For example, the capabilities of the system of the various figures can be performed by one or more of the modules or components described herein or in a distributed architecture and may include a transmitter, receiver or pair of both. For example, all or part of the functionality performed by the individual modules, may be performed by one or more of these modules. Further, the functionality described herein may be performed at various times and in relation to various events, internal or external to the modules or components. Also, the information sent between various modules can be sent between the modules via at least one of: a data network, the Internet, a voice network, an Internet Protocol network, a wireless device, a wired device and/or via plurality of protocols. Also, the messages sent or received by any of the modules may be sent or received directly and/or via one or more of the other modules.</p><p id="p-0149" num="0157">One skilled in the art will appreciate that a &#x201c;system&#x201d; could be embodied as a personal computer, a server, a console, a personal digital assistant (PDA), a cell phone, a tablet computing device, a smartphone or any other suitable computing device, or combination of devices. Presenting the above-described functions as being performed by a &#x201c;system&#x201d; is not intended to limit the scope of the present application in any way but is intended to provide one example of many embodiments. Indeed, methods, systems and apparatuses disclosed herein may be implemented in localized and distributed forms consistent with computing technology.</p><p id="p-0150" num="0158">It should be noted that some of the system features described in this specification have been presented as modules, in order to more particularly emphasize their implementation independence. For example, a module may be implemented as a hardware circuit comprising custom very large-scale integration (VLSI) circuits or gate arrays, off-the-shelf semiconductors such as logic chips, transistors, or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays, programmable array logic, programmable logic devices, graphics processing units, or the like.</p><p id="p-0151" num="0159">A module may also be at least partially implemented in software for execution by various types of processors. An identified unit of executable code may, for instance, comprise one or more physical or logical blocks of computer instructions that may, for instance, be organized as an object, procedure, or function. Nevertheless, the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which, when joined logically together, comprise the module and achieve the stated purpose for the module. Further, modules may be stored on a computer-readable medium, which may be, for instance, a hard disk drive, flash device, random access memory (RAM), tape, or any other such medium used to store data.</p><p id="p-0152" num="0160">Indeed, a module of executable code could be a single instruction, or many instructions, and may even be distributed over several different code segments, among different programs, and across several memory devices. Similarly, operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices, and may exist, at least partially, merely as electronic signals on a system or network.</p><p id="p-0153" num="0161">It will be readily understood that the components of the application, as generally described and illustrated in the figures herein, may be arranged and designed in a wide variety of different configurations. Thus, the detailed description of the embodiments is not intended to limit the scope of the application as claimed but is merely representative of selected embodiments of the application.</p><p id="p-0154" num="0162">One having ordinary skill in the art will readily understand that the above may be practiced with steps in a different order, and/or with hardware elements in configurations that are different than those which are disclosed. Therefore, although the application has been described based upon these preferred embodiments, it would be apparent to those of skill in the art that certain modifications, variations, and alternative constructions would be apparent.</p><p id="p-0155" num="0163">While preferred embodiments of the present application have been described, it is to be understood that the embodiments described are illustrative only and the scope of the application is to be defined solely by the appended claims when considered with a full range of equivalents and modifications (e.g., protocols, hardware devices, software platforms etc.) thereto.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system, comprising:<claim-text>a memory device comprising a blockchain ledger; and</claim-text><claim-text>a processor configured to:<claim-text>detect a delivery of a first service to a first node from a second node based on a blockchain transaction that is recorded on the blockchain ledger;</claim-text><claim-text>generate, via a blockchain smart contract, a partial invoice with a charge for the detected delivery of the first service;</claim-text><claim-text>detect a delivery of a second service to the first node from the second node subsequent to the delivery of the first service based on an additional blockchain transaction that is recorded on the blockchain ledger; and</claim-text><claim-text>generate, via the blockchain smart contract, a final invoice related to the partial invoice that includes a charge for a detected completion of the delivery of the second service.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the final invoice is related to an incremental invoice that supplements the partial invoice.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the detected delivery of the first service to the first node from the second node is based on a service contract retrieved from the blockchain ledger.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to execute the blockchain smart contract to generate the final invoice in response to a reconciliation of an incremental charge by the first node or by the second node.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is configured to commit an intermediate status of the second service delivery to the blockchain ledger.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the intermediate status of the second service delivery is recorded as a blockchain transaction.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to receive consent from the first node and from the second node to commit the partial invoice and the final invoice to the blockchain ledger.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A method, comprising:<claim-text>detecting, by a blockchain node, a delivery of a first service to a first node from a second node based on a blockchain transaction being recorded on the blockchain ledger;</claim-text><claim-text>generating, via a blockchain smart contract, a partial invoice with a charge for the detected delivery of the first service;</claim-text><claim-text>detecting a delivery of a second service to the first node from the second node subsequent to the delivery of the first service based on an additional blockchain transaction being recorded on the blockchain ledger; and</claim-text><claim-text>generating, via the blockchain smart contract, a final invoice related to the partial invoice including a charge for a detected completion of the delivery of the second service.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the final invoice is related to an incremental invoice supplementing the partial invoice.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the detected delivery of the first service to the first node from the second node is based on a service contract retrieved from the blockchain ledger.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, comprising executing the blockchain smart contract to generate the final invoice in response to a reconciliation of an incremental charge by the first node or by the second node.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, comprising committing an intermediate status of the second service delivery to the blockchain ledger.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the intermediate status of the second service delivery is recorded as a blockchain transaction.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, comprising receiving consent from the first node and from the second node to commit the partial invoice and the final invoice to the blockchain ledger.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable medium comprising instructions, that when read by a processor, cause a blockchain node to perform a method comprising:<claim-text>detecting, by a blockchain node, a delivery of a first service to a first node from a second node based on a blockchain transaction being recorded on the blockchain ledger;</claim-text><claim-text>generating, via a blockchain smart contract, a partial invoice with a charge for the detected delivery of the first service;</claim-text><claim-text>detecting a delivery of a second service to the first node from the second node subsequent to the delivery of the first service based on an additional blockchain transaction being recorded on the blockchain ledger; and</claim-text><claim-text>generating, via the blockchain smart contract, a final invoice related to the partial invoice including a charge for a detected completion of the delivery of the second service.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the final invoice is related to an incremental invoice supplementing the partial invoice.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the detected delivery of the first service to the first node from the second node is based on a service contract retrieved from the blockchain ledger.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the method further comprises executing the blockchain smart contract to generate the final invoice in response to a reconciliation of an incremental charge by the first node or by the second node.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the method further comprises committing an intermediate status of the second service delivery to the blockchain ledger.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the intermediate status of the second service delivery is recorded as a blockchain transaction.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the method further comprises receiving consent from the first node and from the second node to commit the partial invoice and the final invoice to the blockchain ledger.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. A system, comprising:<claim-text>a memory device; comprising a blockchain ledger; and</claim-text><claim-text>a processor configured to:</claim-text><claim-text>detect a partial delivery of a service to a first node from a second node based on a blockchain transaction that is recorded on the blockchain ledger;<claim-text>generate, via a blockchain smart contract, a incremental invoice which includes a charge for the detected partial delivery of the service;</claim-text><claim-text>detect an additional partial delivery of the service to the first node from the second node subsequent to the partial delivery based on an additional blockchain transaction being recorded on the blockchain ledger; and</claim-text><claim-text>generate, via the blockchain smart contract, a second incremental invoice related to the incremental invoice that includes a charge for a detected completion of the additional partial delivery of the service.</claim-text></claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the processor is further configured to execute the blockchain smart contract to generate a final invoice based on the incremental invoice and the second incremental invoice.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. A method, comprising:<claim-text>detecting a partial delivery of a service to a first node from a second node based on a blockchain transaction being recorded on the blockchain ledger;</claim-text><claim-text>generating, via a blockchain smart contract, a incremental invoice including a charge for the detected partial delivery of the service;</claim-text><claim-text>detecting an additional partial delivery of the service to the first node from the second node subsequent to the partial delivery based on an additional blockchain transaction being recorded on the blockchain ledger; and</claim-text><claim-text>generating, via the blockchain smart contract, a second incremental invoice related to the incremental invoice including a charge for a detected completion of the additional partial delivery of the service.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The method of <claim-ref idref="CLM-00024">claim 24</claim-ref>, comprising executing the blockchain smart contract to generate a final invoice based on the incremental invoice and the second incremental invoice.</claim-text></claim></claims></us-patent-application>