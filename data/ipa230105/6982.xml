<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006983A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006983</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17355420</doc-number><date>20210623</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>901</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0478</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0414</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9024</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">MASKING COMPOSITE PAYLOADS USING POLICY GRAPHS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>MOFFIE</last-name><first-name>Micha Gideon</first-name><address><city>Zichron Yaakov</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>FARKASH</last-name><first-name>Ariel</first-name><address><city>Shimshit</city><country>IL</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An example system includes a processor to receive a graph-based masking policy and a composite payload containing a data object to be masked. The processor is to instantiate a masking engine based on the graph-based masking policy. The processor is to execute the masking engine on the composite payload to generate a masked payload comprising a masked data object. The data object to be masked is masked in place such that the resulting composite payload type is maintained. The processor is to output the masked payload.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="170.35mm" wi="136.57mm" file="US20230006983A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="179.83mm" wi="138.60mm" file="US20230006983A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="241.81mm" wi="87.38mm" orientation="landscape" file="US20230006983A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="146.73mm" wi="122.17mm" orientation="landscape" file="US20230006983A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="100.33mm" wi="136.65mm" file="US20230006983A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="192.79mm" wi="143.43mm" file="US20230006983A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="171.79mm" wi="159.26mm" orientation="landscape" file="US20230006983A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="204.47mm" wi="152.40mm" orientation="landscape" file="US20230006983A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="84.50mm" wi="90.17mm" file="US20230006983A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">The present techniques relate to masking data. More specifically, the techniques relate to masking elements of data payloads.</p><p id="p-0003" num="0002">Masking tools may usually receive a policy specifying the rules to identify a sensitive or confidential element such as XML Path Language (XPath) describing context or the surrounding structure, or a regular expression pattern corresponding to a payload type describing specific content, or the element to be masked itself. The policy may also specify the masking operation to perform such as redact, tokenize, encrypt, etc. In addition, the policy may also specify a payload type to be parsed and traversed, if more than one is supported. Many existing solutions provide the user the means to specify what and how to mask in a given payload with a specific format. For example, such solutions may provide a user to mask a row in a comma-separated files (CSV) table. However, in many use cases, the payload itself is more complex. For example, a CSV exported from a database may also contain an Extensible Markup Language (XML) object. In another example, a Hypertext Markup Language (HTML) file may contain a Java Script Object Notation (JSON) object in a specific location. Existing solutions do not address composite payloads. For example, the existing alternatives may treat the top most layer of the payload according to its type and the inner layers as text. If the inner layer has structure, the structure may be treated as text and rules will be hard coded.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0004" num="0003">According to an embodiment described herein, a system can include processor to receive a graph-based masking policy and a composite payload containing a data object to be masked. The processor can also further instantiate a masking engine based on a graph-based masking policy. The processor can also execute the masking engine on the composite payload to generate a masked payload including a masked data object; where the data object to be masked is masked in place such that the resulting composite payload type is maintained. The processor can then output the masked payload. Thus, the system can enable data objects to be masked in composite payloads while maintaining the payload type in the masked composite payload. Preferably, a validity of the composite payload type is maintained in the masked payload after masking the data object. In this embodiment, the system may enable format restrictions of the composite payload time may be maintained. Preferably, the composite payload includes a number of data different data types. In this embodiment, the system enables multiple data types to be supported. Optionally, the composite payload includes a number of nested payload types. In this embodiment, the system enables nesting of data types. Preferably, the masking engine includes a number of data processors coupled to a number of selectors, where each of the data processors is configured to process a particular type of data in a predetermined manner and each of the selectors is configured to identify to an associated data processor a relative location of a portion of the composite payload to be extracted at the associated data processor. In this embodiment, the system enables any combination of different data types inside of a composite payload to be processed. Preferably, an identification of the data object to be masked in the composite payload is based on a series of context identification selectors, content identification selectors, or a combination of both. In this embodiment, the system enables data objects to be identified using any combination of selectors. Preferably, each node in the graph-based masking policy handles a different data layer of the composite payload and corresponds to a data processor in the masking engine. In this embodiment, the system enables a graph-based masking policy to be used to generate a masking engine. Preferably, a first data processor of the masking engine is connected to a second data processor processing a lower layer of the composite payload via a selector that provides the first data processor a specified relative path for a payload portion to be extracted. In this embodiment, the system enables portions of the composite payload to be processed more efficiently by the second data processors instead of the entire composite payload at the second data processor. Preferably, each edge in the graph-based masking policy corresponds to a selector in the masking engine that receives a payload portion of the composite payload from a previous node and transmits a sub-portion of the received payload portion to a subsequent node, and receives in return, from the subsequent node, a corresponding masked sub-portion of the payload portion and replaces the masked sub-portion in place to create a masked payload portion to transmit back to the previous node. In this embodiment, the system enables payload portions of different data types to be efficiently processed by different data processors. Optionally, the masking engine includes a masking processor coupled to a data processor, where the masking processor is to receive the data object from the data processor, mask the data object, and transmit the data object back to the data processor for masking in place in a portion of the composite payload processed by the data processor. In this embodiment, the system enables masking of data objects in composite payloads. Optionally, the executed masking engine is to perform a number of masking actions on the data object. In this embodiment, the system enables any number of masking actions to be performed on a data object. Optionally, the executed masking engine is to perform a masking action on a number of data objects. In this embodiment, the system enables any number of data objects to be masked in the composite payload. Preferably, an order of processing, selection and masking is to be determined based on the graph-based masking policy. In this embodiment, the system enables processing, selection and masking to be specified in the graph-based masking policy. Optionally, a processing flow of the masking engine is controlled based on a received external parameter. In this embodiment, the system enables control of processing flow via the external parameter. Optionally, a processing flow of the masking engine is controlled based on a received payload-specific parameter. In this embodiment, the system enables control of processing flow via the payload-specific parameter. Optionally, the processing flow of the masking engine is controlled based on a combination of a received payload-specific parameter and a received external parameter. In this embodiment, the system enables control of processing flow via an external parameter and a payload-specific parameter.</p><p id="p-0005" num="0004">According to another embodiment described herein, a method can include receiving, via a processor, a graph-based masking policy and a composite payload containing a data object to be masked. The method can further include instantiating, via the processor, a masking engine based on the graph-based masking policy. The method can also further include executing, via the processor, the masking engine on the composite payload to generate a masked payload including a masked data object, where the data object to be masked is masked in place such that the resulting composite payload type is maintained. The method can also include outputting, via the processor, the masked payload. Thus, the method can enable data objects to be masked in composite payloads while maintaining the payload type in the masked composite payload. Preferably, generating the masking engine includes configuring the masking engine to process the composite payload at a root node to parse the composite payload based on the type of the data of the composite payload and extract a relevant portion of the composite payload to a subsequent data processor based on information provided by a coupled selector. In this embodiment, the method enables a data object in the extract relevant portion to be processed by another data processor that is configured to process a different payload type. Optionally, generating the masking engine includes configuring the masking engine to extract a relevant portion of the composite payload based on a location of the data object to be masked using context based detection. In this embodiment, the method enables context based detection of data objects in the composite payload. Optionally, generating the masking engine includes configuring the masking engine to extract a relevant portion of the composite payload based on a structure of the data object using content based detection. In this embodiment, the method enables content based detection of data objects in the composite payload. Preferably, generating the masking engine includes configuring the masking engine to mask a data segment received from a data processor at a masking processor of the masking engine and transmit a masked data segment to the data processor for replacement in place of the data segment. In this embodiment, the method enables masking of data objects in composite payloads. Preferably, generating the masking engine includes configuring the masking engine to receive at each data processor of the masking engine a returned masked value from a subsequently coupled selector and replace in place a previously selected data of the data segment processed at each data processor with the returned masked value. In this embodiment, the method enables a data object within an inner layer of a composite payload to be masked. Optionally, executing the masking engine generates a masked payload including a number of masked data objects. In this embodiment, the method enables a number of masked data objects to be masked at the same time.</p><p id="p-0006" num="0005">According to another embodiment described herein, a computer program product for masking composite payloads can include computer-readable storage medium having program code embodied therewith. The computer readable storage medium is not a transitory signal per se. The program code executable by a processor to cause the processor to receive a graph-based masking policy and a composite payload containing a data object to be masked. The program code can also cause the processor to initiate a masking engine based on the graph-based masking policy. The program code can also cause the processor to execute the masking engine on the composite payload to generate a masked payload including a masked data object, where the data object to be masked is masked in place such that the resulting composite payload type is maintained. The program code can also cause the processor to output the masked payload. The program code can thus enable data objects to be masked in composite payloads while maintaining the payload type in the masked composite payload. Preferably, the program code can also cause the processor to configure the masking engine to process the composite payload at a root node to parse the composite payload based on the type of the data of the composite payload and extract a relevant portion of the composite payload to a subsequent data processor based on information provided by a coupled selector. In this embodiment, the coupled selector may provide a means for identifying the relevant portion of the composite payload including the object to be masked.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an example masking engine for masking composite payloads generated using graph-based masking policies;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is an example graph-based masking policy used to generate a masking engine for masking composite payloads;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is an example graph-based masking policy used to generate a masking engine for masking composite payloads;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of an example method that can mask composite payloads using graph-based masking policies;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of an example computing device that can mask composite payloads using graph-based masking policies;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram of an example cloud computing environment according to embodiments described herein;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram of an example abstraction model layers according to embodiments described herein; and</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example tangible, non-transitory computer-readable medium that can mask composite payloads using graph-based masking policies.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0015" num="0014">According to embodiments of the present disclosure, a system can include a processor to receive a graph-based masking policy and composite payload containing a data object to be masked. The processor can instantiate a masking engine based on the graph-based masking policy. For example, the graph-based masking policy may be a payload processing template that can be used to mask all payloads that have the same structure. In particular, the masking engine can include a combination of data processors and selectors configured based on the graph-based masking policy. As used herein, a data processor an element responsible for processing a specific type or kind of payload with a predefined functionality. For example, a data processor can be responsible to parse a JSON payload, or to encrypt a text. A selector, as used herein, refers to an element that provides the means to specify how to select a certain data element. For example, a selector can contain an XPath identifying an element in XML, or can contain a regular expression. The processor can execute the masking engine on the composite payload to generate a masked payload including a masked data object. The data object to be masked is masked in place such that the resulting composite payload type is maintained. The processor can then output the masked payload. Thus, embodiments of the present disclosure enable the ability to support multiple payload types, including structured, semi-structured, unstructured, and composite formats, in a flexible and reusable way. For example, structured payload types may include CSV and similar formats. In various examples, semi-structured payload types may include JSON or XML, and similar formats. Unstructured payload types may include text. Composite formats may include any combination of payload types, such as a JSON element within HTML. The embodiments provide a configurable system for masking payloads. For example, the graph-based masking policy and masking engine allows for configuration of any order and combination of nesting, supporting any payload type, regardless of the processing depth, while matching on each edge a payload related location specification without modification of code. Furthermore, the embodiments enable the use of any nesting depth, allowing all payload types in each level and provides a means to specify the relative location in the traversal path that corresponds to the payload type.</p><p id="p-0016" num="0015">Moreover, the embodiments described may process composite payloads more efficiently because only a portion of the payload processed at one data processor is selected to be processed at the next data processor. Thus, the embodiments may be more efficient than methods in which the entire composite payload is processed at each and every one of a number of processing components. The embodiments enable cross composite control flow using expressions, which enables the embodiments to control the processing of one data processor based on processing results of another data processor. As one example, based on a value of a field found in an HTML tag, the embodiments may mask another field contained in a JSON data element within another HTML tag. For example, the value of the field may be a Boolean value and the JSON data element may be a name of a person.</p><p id="p-0017" num="0016">With reference now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a block diagram shows an example system for masking composite payloads using graph-based masking policies. The example system is generally referred to by the reference number <b>100</b>. The system <b>100</b> can be implanted using the method <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> using the processor <b>404</b> of computing device <b>400</b> or the processor <b>702</b> of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>7</b></figref>.</p><p id="p-0018" num="0017">The system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes a first data processor <b>102</b>A coupled to a second data processor <b>102</b>B via a first selector <b>104</b>A. The system <b>100</b> also includes an Nth data processor <b>102</b>C coupled to the second data processor <b>102</b>B via a second selector <b>104</b>B. For example, the Nth data processor <b>102</b>C and the second data processor <b>102</b>B may have any number of additional data processors and data selectors coupled in between as indicated by ellipses. The system <b>100</b> also includes a masking processor <b>106</b> coupled to the Nth data processor <b>102</b>C via an Nth selector <b>104</b>C. The system <b>100</b> includes a composite payload <b>108</b>. In various examples, the composite payload <b>108</b> may be composed of a number of different data types. For example, the data types may include XML, HTML, Text, JSON, among other suitable data types. The system <b>100</b> includes a first data segment <b>110</b>A. For example, the first data segment <b>110</b>A may be a subset of the composite payload <b>108</b>. The system <b>100</b> includes a second data segment <b>110</b>B. For example the second data segment <b>110</b>B may be a subset of the first data segment <b>110</b>A. The system <b>100</b> also further includes a third data segment <b>110</b>C. For example, the third data segment <b>110</b>C may be a subset of the second data segment <b>110</b>B. In some examples, the Nth data segment <b>110</b>C may be a specific data object to be masked. The system <b>100</b> also includes a masked Nth data segment <b>112</b>A. For example, the masked Nth data segment <b>112</b>A may be a redaction, an encryption, or a tokenization of the Nth data segment <b>110</b>C. The system includes a masked second data segment <b>112</b>B. For example, the masked second data segment <b>112</b>B may be the second data segment <b>110</b>B including the masked Nth data segment <b>112</b>A instead of the third data segment <b>110</b>C. The system <b>100</b> also includes a masked first data segment <b>112</b>C. For example, the masked first data segment <b>112</b>C may be the first data segment <b>110</b>A including the masked second data segment <b>112</b>B instead of the second data segment <b>110</b>B. The system <b>100</b> also further includes a masked payload <b>114</b>. For example, the masked payload <b>114</b> may be similar to the composite payload <b>108</b>, but including the masked first data segment <b>112</b>C instead of the first data segment <b>110</b>A.</p><p id="p-0019" num="0018">In the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the first data processor <b>102</b> receives a composite payload <b>108</b> and outputs a masked payload <b>114</b> that has a target data object masked. For example, the target data object may be encrypted according to an encryption algorithm and may be thus decrypted using an encryption key. In some examples, the target data object may be redacted. For example, the string corresponding to the target data object may be replaced with asterisks or any other symbols. In some examples, the target data object may be replaced with a token. For example, the token may be a randomized value within a particular domain of values.</p><p id="p-0020" num="0019">Still referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the first data processor <b>102</b>A, the second data processor <b>102</b>B, and the Nth data processor <b>102</b>C may each be associated with and able to process a different data type. In various examples, the first data processor <b>102</b>A, the second data processor <b>102</b>B, and the Nth data processor <b>102</b>C may process a flow of data where each data processor handles one aspect of the payload and postpones the rest of the processing for the next data processors. In some examples, two or more of the data processors may be associated with the same particular data type. As one example, the first data processor <b>102</b>A may be associated with a particular data type and the Nth processor <b>102</b>C may also be associated with the same data type. The second data processor <b>102</b>B may be able to process a second data type. Thus, the different data type may be the first data segment <b>110</b>A extracted from the composite payload <b>108</b> via the first processor and processed by the second data processor <b>102</b>B to extract the second data segment <b>110</b>B containing a data object to be masked. The Nth data processor <b>102</b>C can extract the data object from the data segment and transmit the data object as Nth data segment <b>110</b>C to the masking processor <b>106</b>. The masking processor <b>106</b> can then mask the data object and return a masked data object as the masked Nth data segment <b>112</b>A.</p><p id="p-0021" num="0020">In various examples, each of the first data processor <b>102</b>A, the second processor <b>102</b>B, and the Nth data processor <b>102</b>C can receive a masked data segment and mask in place a data segment with the masked data segment. For example, the Nth data processor <b>102</b>C may receive the masked Nth data segment <b>112</b>A and a portion of the second data segment <b>110</b>B corresponding to the Nth data segment <b>110</b>C with the masked Nth data segment <b>112</b>A to generate a masked second data segment <b>112</b>B.</p><p id="p-0022" num="0021">The second data processor <b>102</b>B may similarly receive the masked second data segment <b>112</b>B from the Nth data processor <b>102</b>C via the second selector <b>104</b>B. The second data processor <b>102</b>B can replace the second data segment <b>110</b>B in the first data segment <b>110</b>A with the masked second data segment <b>112</b>B to generate the masked first data segment <b>112</b>C. The second processor can then send the masked first data segment <b>112</b>C to the first selector <b>104</b>A to transmit the masked first data segment <b>112</b>C to the first data processor <b>102</b>A.</p><p id="p-0023" num="0022">The first data processor <b>102</b>A can then replace the first data segment <b>110</b>A in the composite payload <b>108</b> with the masked first data segment <b>112</b>C to generate the masked payload <b>114</b>. The masked payload <b>114</b> may then be output. For example, the masked payload <b>114</b> may be output to an application or other computing system (not shown).</p><p id="p-0024" num="0023">In various examples, the system <b>100</b> may be configured using a masking library that includes two components. For example, the first component may be a masking engine that is responsible to process the payload and execute the data flow. The second component may be a policy engine that is responsible for instantiating the masking engine discussed herein based on a masking policy provided by the user. For example, the policy graph may be a directed acyclical graph as shown in the different example of <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>.</p><p id="p-0025" num="0024">In various examples, a masking policy may indicate both where the target data objects to be processed reside within the composite payload, as well as what to do with the target data objects. Target data items to be extracted and masked may be detected by their structure, their location, or both their structure and location, in the composite payload. Target data items may be detected based on their structure using content based detection. For example, content based detection may be performed using a construct called a data classifier. The data classifier can contain either a regular expression or group of regular expressions, a text or group of text elements to match against by simple identity, or a piece of code which can describe the exact constraints that a data item needs to contain. Alternatively, or in addition, a context based detection may be performed when it is possible to identify a data item based on its relative location in a payload. For example, this might mean an XPath in an XML document, or more visually, a column in a table as seen it an application screen. As discussed above, composite payloads may be more complex and contain composite formats. Detecting target data objects in composite formats can be achieved by using multiple layers of context or content based detection.</p><p id="p-0026" num="0025">Once the data items have been identified and selected, a particular action may then be executed. For example, the masking policy may indicate whether the target data objects should be removed, tokenized or encrypted. In particular, there are several types of masking transformations such as redaction, encryption, tokenization, etc. The masking policy may thus also specify actions to be taken by the masking engine on any number of target objects.</p><p id="p-0027" num="0026">As one particular example, the composite payload <b>208</b> handled by the system <b>100</b> may be:</p><p id="p-0028" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="182pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x3c;?xml version=&#x201c;1.0&#x201d; encoding=&#x201c;utf-8&#x201d;?&#x3e;</entry></row><row><entry/><entry>&#x3c;partial-response&#x3e;</entry></row><row><entry/><entry>... &#x3c;update ...&#x3e;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x3c;![CDATA[</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;table ..&#x3e; ...</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td ...&#x201c;&#x3e;Name&#x3c;/td&#x3e;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td ...&#x201d;&#x3e;<b>john doe</b>&#x3c;/td&#x3e;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;..</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;script .. type=&#x201c;text/javascript&#x201d;&#x3e; ..</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;Object.func(&#x201c;..Button&#x201d;,..,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;{id:&#x201c;12345678&#x201d;,widget:&#x201c;..&#x201d;});</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;.. &#x3c;/script&#x3e;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;..&#x3c;/table&#x3e; ]]&#x3e;</entry></row><row><entry/><entry>&#x2003;&#x3c;/update&#x3e; ...</entry></row><row><entry/><entry>&#x3c;/partial-response&#x3e;</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>where the name &#x201c;john doe&#x201d;, as bolded above for reference, is to be masked. In this example, the received graph-based masking policy is configured to mask the name in the HTML table, &#x201c;john doe&#x201d; in the above payload. First, the processor should to parse XML, select XPath (e.g. &#x201c;/partial-response/changes/update&#x201d;). Then the processor should parse HTML, and select CSS (e.g. &#x201c;table&#x3e;tbody&#x3e;tr&#x3e;td:nth-child(2)&#x201d;). The processor should then mask the selected content. In the payload above, the name &#x201c;john doe&#x201d; will be masked. The processor should then rebuild the HTML with updated text, and then rebuild the XML with updated HTML element.</p><p id="p-0029" num="0027">Thus, in this example, a policy engine may configure the system <b>100</b> to include a first data processor <b>102</b>A that is an XML processor that parses XML payloads, support XPath Syntax expressions to select XML nodes and supports updating of selected nodes. The policy engine may further configure system <b>100</b> to include a second data processor <b>102</b>B that is an HTML processor that parses HTML payload, supports Cascading Style Sheets (CSS) Syntax and selectors as well as support updating of selected elements. In this example, the Nth data processor <b>102</b>C is not included. The policy engine may also configure the system <b>100</b> with a masking processor <b>106</b>, which is able to mask text. For example, the masking processor <b>106</b> may be able to replace text with an asterisk symbol &#x2018;*&#x2019;. In addition, the policy engine may configure system <b>100</b> to include a first selector <b>104</b>A that is an XPath selector that specifies the relevant XPath, and a second selector <b>104</b>B that is a CSS selector that specifies the relevant CSS path. The masking engine may be executed on the composite payload to mask the name &#x201c;john doe&#x201d;.</p><p id="p-0030" num="0028">It is to be understood that the block diagram of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is not intended to indicate that the system <b>100</b> is to include all of the components shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Rather, the system <b>100</b> can include fewer or additional components not illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> (e.g., additional composite payloads, data processors, data selectors, data segments, masked data segments, masking processors, or additional masked payloads, etc.). For example, the example system <b>100</b> is shown in a simple form, and depending on the particular composite payload <b>108</b> received, the system <b>100</b> may be reconfigured to include any combination of various data processors for various data types present in the composite payload <b>108</b>. In various examples, multiple data processors can be coupled to a single data processor via a number of selectors, as described using nodes and directed edges in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>.</p><p id="p-0031" num="0029"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is an example graph-based masking policy used to generate a masking engine for masking composite payloads. In various examples, the graph-based masking policy can be received by the processor <b>402</b> or the processor <b>702</b> of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>7</b></figref>.</p><p id="p-0032" num="0030">The example graph-based masking policy <b>200</b>A of <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes a node representing XML data processor <b>202</b>A coupled to a node representing an HTML data processor <b>202</b>B via a directed edge representing an Xpath selector <b>204</b>A. The graph-based masking policy <b>200</b>A also includes a node representing text data processor <b>202</b>C coupled to the HTML data processor <b>202</b>B via a directed edge representing HtmlScript selector <b>204</b>B. The graph-based masking policy <b>200</b>A also includes a node representing a JSON data processor <b>202</b>D coupled to the text data processor <b>202</b>C via a directed edge representing a regular expression selector <b>204</b>C. The graph-based masking policy <b>200</b>A also includes a node representing a masking processor <b>206</b> coupled to the JSON data processor <b>202</b>D via a directed edge representing a JSON ID selector <b>204</b>D and to the HTML data processor <b>202</b>B via a directed edge representing an HTML Owner Selector <b>204</b>E. The graph-based masking policy <b>200</b>A also further includes a redacted payload <b>210</b>. For example, the masked payload <b>210</b> may be similar to the composite payload <b>208</b>, but including a masked owner name and a masked ID number.</p><p id="p-0033" num="0031">In the example of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the XML data processor <b>202</b>A is configured to receive a composite payload and eventually output a masked payload that has target data objects masked. In various examples, the composite payload may be composed of a number of different data types. For example, as shown in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the data types of composite payload <b>208</b> may include XML, HTML, Text, and JSON data types. In some examples, other data types may be included, such as Comma Separated Values (CSV), various word processing file types, etc. In the example of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the root node represents XML data processor <b>202</b>A because the outer payload type of the composite payload is XML. As one specific example, the received composite payload may be:</p><p id="p-0034" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="336pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x3c;partial-response&#x3e;</entry></row><row><entry>&#x2003;&#x3c;changes&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;update id=&#x201c;dialogForm:output&#x201d;&#x3e;&#x3c;![CDATA[</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x3c;table id=&#x201c;dialogForm:output&#x201d; class=&#x201c;ui-panelgrid ui-widget&#x201d; role=&#x201c;grid&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tbody&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Type&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;2572&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Model&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;B6V&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Serial&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;V8XN757&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;OEM&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;not exist&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Description&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Owner&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;John (3212149056)&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Host&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Comments&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;input id=&#x201c;dialogForm:j_id1539686477_5bc5c710&#x201d;</entry></row><row><entry>name=&#x201c;dialogForm:j_id1539686477_5bc5c710&#x201d;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;type=&#x201c;text&#x201d; value=&#x201c;&#x201d;/&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;button id=&#x201c;dialogForm:j&#x201d; name=&#x201c;dialogForm:j&#x201d;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;class=&#x201c;ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only&#x201d;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;onclick=&#x201c;&#x201d; type=&#x201c;submit&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;span class=&#x201c;ui-button-text ui-c&#x201d;&#x3e;Update comments&#x3c;/span&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/button&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;script id=&#x201c;dialogForm:j&#x201d; type=&#x201c;text/javascript&#x201d;&#x3e;</entry></row><row><entry>PrimeFaces.cw(&#x201c;CommandButton&#x201d;,&#x201c;widget_dialogForm_j&#x201d;,{id:&#x201c;3212149056&#x201d;,widgetVar:&#x201c;widget_dialogF</entry></row><row><entry>orm&#x201d;});</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/script&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;/tbody&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x3c;/table&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;]]&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;/update&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;update id=&#x201c;javax.faces.ViewState&#x201d;&#x3e;</entry></row><row><entry>NX/CpYYsE+66fuO8UiLLEstPRmaOtdUGbZtlA7N++XZUf6abpacpRsQ5WKGS9vDakUxhTBVXFq39fdHj6Z5F</entry></row><row><entry>8MwGEcu0ltdoZYILdvLfeRMSYEy3WC3FzhxhtWA=</entry></row><row><entry>&#x2003;&#x2003;&#x3c;/update&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/changes&#x3e;</entry></row><row><entry>&#x3c;/partial-response&#x3e;</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>The composite payload in the above example includes a top level XML segment containing a CDATA node. This CDATA node, which cannot be parsed using Xpath, is an HTML segment containing a table. The table itself further contains several rows, one of which contains a name+id &#x201c;John (3212149056)&#x201d;. In addition, the last row in the table contains a script, which also contains the same id of &#x201c;3212149056&#x201d; within a JSON snippet.</p><p id="p-0035" num="0032">In the example of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, a graph-based masking policy <b>200</b>A may be received to process the payload using an XmlProcessor and select the CDATA using the &#x201c;/partial-response/changes/update/text( )&#x201d; Xpath. The graph-based masking policy <b>200</b>A also specifies to process the selected data using an HtmlProcessor and select the 6<sup>th </sup>row/2<sup>nd </sup>column (Owner name) using the &#x201c;table&#x3e;tbody&#x3e;tr:nth-child(6)&#x3e;td:nth-child(2)&#x201d; CSS for the name+Id. The graph-based masking policy <b>200</b>A may also specify, for the id in the script function, to select the content of the script tag in last row using the &#x201c;table&#x3e;tbody&#x3e;tr:nth-child(9)&#x3e;td&#x3e;script&#x201d; CSS, to process the script body as text and select the JSON snippet using a simple regular expression: &#x201c;\{.*\}&#x201d;, and process the snippet as JSON and select the id using the &#x201c;$.id&#x201d; JSON path. The graph-based masking policy <b>200</b>A may also further specify to redact the value by replacing it with &#x201c;*&#x201d;. This graph-based masking policy <b>200</b>A may be used to automatically generate a masking engine.</p><p id="p-0036" num="0033">Still referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, an outer layer of the composite payload <b>208</b> may thus be an XML layer, therefore the masking engine may include an XML data processor <b>202</b>A to handle XML data. The graph-based masking policy <b>200</b>A may also therefore include an Xpath Selector <b>204</b>A to select a particular location inside the XML and indicate a data segment to be extracted from the composite payload <b>208</b>. The graph-based masking policy <b>200</b>A also includes an HTML data processor <b>202</b>B to handle HTML data. The graph-based masking policy <b>200</b>A includes an HtmlSelector used to select the 6<sup>th </sup>row/2<sup>nd </sup>column (Owner name) using the &#x201c;table&#x3e;tbody&#x3e;tr:nth-child(6)&#x3e;td:nth-child(2)&#x201d; CSS for the name+Id. The graph-based masking policy <b>200</b>A also includes the HtmlSelector <b>204</b>B to select the content of the script tag in last row using the &#x201c;table&#x3e;tbody&#x3e;tr:nth-child(9)&#x3e;td&#x3e;script&#x201d; CSS.</p><p id="p-0037" num="0034">In various examples, the policy graph <b>200</b> is used to generate a masking engine. For example, the specification of the graph-based masking policy <b>200</b>A may be the following:</p><p id="p-0038" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="203pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>{</entry></row><row><entry/><entry>&#x2003;&#x201c;version&#x201d;: &#x201c;1.0&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x201c;graph&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;nodes&#x201d;: [</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;Redact&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;root&#x201d;: false</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;XmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;root&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;HtmlProcessor&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;TextProcessor&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;JsonProcessor&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;&#x2003;],</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;edges&#x201d;: [</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;source&#x201d;: &#x201c;XmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;target&#x201d;: &#x201c;HtmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;selector&#x201d;: &#x201c;XpathSelector&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;source&#x201d;: &#x201c;HtmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;target&#x201d;: &#x201c;Redact&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;selector&#x201d;: &#x201c;HtmlOwnerSelector&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;source&#x201d;: &#x201c;HtmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;target&#x201d;: &#x201c;TextProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;selector&#x201d;: &#x201c;HtmlScriptSelector&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;source&#x201d;: &#x201c;TextProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;target&#x201d;: &#x201c;JsonProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;selector&#x201d;: &#x201c;RegexSelector&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;source&#x201d;: &#x201c;JsonProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;target&#x201d;: &#x201c;Redact&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;selector&#x201d;: &#x201c;JsonIdSelector&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;&#x2003;]</entry></row><row><entry/><entry>&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x201c;processors&#x201d;: [</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;Redact&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;RedactProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;configuration&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;charMask&#x201d;: &#x201c;*&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;prefix&#x201d;: &#x201c;&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;suffix&#x201d;: &#x201c;&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;XmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;XmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;HtmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;HtmlProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;configuration&#x201d;: { },</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;TextProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;TextProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;JsonProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;JsonProcessor&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;],</entry></row><row><entry/><entry>&#x2003;&#x201c;selectors&#x201d;: [</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;XpathSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;XpathSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;configuration&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;xpath&#x201d;: &#x201c;/partial-response/changes/update/text( )&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;HtmlOwnerSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;CssSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;configuration&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;css&#x201d;: &#x201c;table &#x3e; tbody &#x3e; tr:nth-child(6) &#x3e; td:nth-child(2)&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;HtmlScriptSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;CssSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;configuration&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;css&#x201d;: &#x201c;table &#x3e; tbody &#x3e; tr:nth-child(9) &#x3e; td &#x3e; script&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;RegexSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;RegexSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;configuration&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;regex&#x201d;: &#x201c;\\{.*\\}&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;classification&#x201d;: &#x201c;&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;id&#x201d;: &#x201c;JsonIdSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;JsonPathSelector&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;configuration&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;jpath&#x201d;: &#x201c;$.id&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;},</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;loggable&#x201d;: true</entry></row><row><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;],</entry></row><row><entry/><entry>&#x2003;&#x201c;expressions&#x201d;: [ ],</entry></row><row><entry/><entry>&#x2003;&#x201c;formats&#x201d;: [ ]</entry></row><row><entry/><entry>}</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>In various examples, the masking engine described above may be executed on the example composite payload described above to output the masked payload with masked portions replaced by asterisks:</p><p id="p-0039" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="336pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x3c;partial-response&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;changes&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x3c;update id=&#x201c;dialogForm:output&#x201d;&#x3e;&#x3c;![CDATA[&#x3c;table id=&#x201c;dialogForm:output&#x201d; class=&#x201c;ui-panelgrid ui-</entry></row><row><entry>widget&#x201d; role=&#x201c;grid&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tbody&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Type&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;2572&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Model&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;B6V&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Serial&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;V8XN757&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;OEM&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;not exist&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Description&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;&#x3c;/td&#x3e;</entry></row><row><entry>&#x2009;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Owner&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;*****************&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e;Host&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e;&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell laber&#x3e;Comments&#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell value&#x201d;&#x3e; &#x3c;input id=&#x201c;dialogForm:j_id1539686477_5bc5c710&#x201d;</entry></row><row><entry>name=&#x201c;dialogForm:j_id1539686477_5bc5c710&#x201d; type=&#x201c;text&#x201d; value=&#x201c;&#x201d;&#x3e; &#x3c;/td&#x3e;</entry></row><row><entry>&#x2003;&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x3c;tr class=&#x201c;ui-widget-content&#x201d; role=&#x201c;row&#x201d;&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;td role=&#x201c;gridcell&#x201d; class=&#x201c;ui-panelgrid-cell label&#x201d;&#x3e; &#x3c;button id=&#x201c;dialogForm:j&#x201d; name=&#x201c;dialogForm:j&#x201d;</entry></row><row><entry>class=&#x201c;ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only&#x201d; onclick=&#x201c;&#x201d; type=&#x201c;submit&#x201d;&#x3e;</entry></row><row><entry>&#x3c;span class=&#x201c;ui-button-text ui-c&#x201d;&#x3e;Update comments&#x3c;/span&#x3e; &#x3c;/button&#x3e; &#x3c;script id=&#x201c;dialogForm:j&#x201d;</entry></row><row><entry>type=&#x201c;text/javascript&#x201d;&#x3e;PrimeFaces.cw(&#x201c;CommandButton&#x201d;,&#x201c;widget_dialogForm_j&#x201d;,{&#x201c;id&#x201d;:&#x201c;**********&#x201d;,&#x201c;</entry></row><row><entry>widgetVar&#x201d;:&#x201c;widget_dialogForm&#x201d;});&#x3c;/script&#x3e; &#x3c;/td&#x3e;</entry></row><row><entry>&#x3c;/tr&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;/tbody&#x3e;</entry></row><row><entry>&#x3c;/table&#x3e;]]&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x3c;/update&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x3c;update id=&#x201c;javax.faces.ViewState&#x201d;&#x3e;&#x3c;html&#x3e;</entry></row><row><entry>&#x2003;&#x3c;head/&#x3e;</entry></row><row><entry>&#x2003;&#x3c;body&#x3e;</entry></row><row><entry>NX/CpYYsE+66fuO8UiLLEstPRmaOtdUGbZtlA7N++XZUf6abpacpRsQ5WKGS9vDakUxhTBVXFq39fdHj6Z5F</entry></row><row><entry>8MwGEcu0ltdoZYILdvLfeRMSYEy3WC3FzhxhtWA=</entry></row><row><entry>&#x2003;&#x3c;/body&#x3e;</entry></row><row><entry>&#x3c;/htmlx/update&#x3e;</entry></row><row><entry>&#x2003;&#x2003;&#x3c;/changes&#x3e;</entry></row><row><entry>&#x3c;/partial-response&#x3e;</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>Thus, the name+id's are redacted using asterisks, as specified in the received graph-based masking policy <b>200</b>A.</p><p id="p-0040" num="0035">It is to be understood that the block diagram of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is not intended to indicate that the graph-based masking policy <b>200</b>A is to include all of the components shown in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. Rather, the graph-based masking policy <b>200</b>A can include fewer or additional components not illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> (e.g., additional composite payloads, data processors, data segments, masked data segments, masking processors, or additional masked payloads, etc.). For example, depending on the particular composite payload <b>208</b> received, the graph-based masking policy <b>200</b>A may be reconfigured to include any combination of various data processors for various data types present in the composite payload <b>208</b> to redact any number of target data objects. In some examples, the masking processor <b>206</b> may alternatively be an encrypting processor or a tokenizing processor.</p><p id="p-0041" num="0036"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a graph-based masking policy used to generate a masking engine for masking composite payloads. In various examples, the graph-based masking policy can be received by the processor <b>402</b> or the processor <b>702</b> of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>7</b></figref>.</p><p id="p-0042" num="0037">The graph-based masking policy <b>200</b>B includes a data flow implemented as a directed acyclic graph. For example, the graph-based masking policy <b>200</b>B is a graph with directed edges and no cycles. In various examples, the graph elements of a graph-based masking policy <b>200</b>B may be mapped to design entities as follows: each node in the graph corresponds to a single data processor, each directed edge in the graph between two nodes corresponds to a selector and an optional expression. The expression may be optional on the edge, and may be next to the selector. In various examples, the expression may be a logical expression that can be evaluated to true or false. For example, the expression may be &#x201c;isTrue(x), x and y&#x201d;. If the expression is evaluated to true, then the selector may perform selection. If the expression is evaluated to be false, then the selector may not perform selection. In various examples, the expression may be used to control a flow by providing input to the expression. The graph-based masking policy <b>200</b>B itself may thus correspond to a masking engine, which is represented by a collection of nodes and edges that collectively are able to perform a masking or unmasking operation on a payload. The graph-based masking policy <b>200</b>B thus includes a node representing a first data processor <b>202</b>E coupled to a node representing a second data processor <b>202</b>F via a directed edge representing a data selector <b>204</b>F. The graph-based masking policy <b>200</b>B also includes a node representing a third data processor <b>202</b>G coupled to the first data processor <b>202</b>E via a directed edge representing a data selector <b>204</b>G. The graph-based masking policy <b>200</b>B includes a node representing a fourth data processor <b>202</b>H coupled to the second data processor <b>202</b>F via a directed edge representing a data selector <b>204</b>H. The graph-based masking policy <b>200</b>B includes a node representing a fifth data processor <b>202</b>I coupled to the second data processor <b>202</b>F via a directed edge representing a data selector <b>204</b>I. The graph-based masking policy <b>200</b>B includes a node representing a sixth data processor <b>202</b>J coupled to the third data processor <b>202</b>G via a directed edge representing a data selector <b>204</b>J. The sixth data processor <b>202</b>J is further coupled to the fifth data processor via a directed edge representing a data selector <b>204</b>K. The graph-based masking policy <b>200</b>B includes a node representing a masking processor <b>206</b> coupled to the fourth data processor <b>202</b>H via a directed edge representing a selector <b>204</b>L, coupled to the fifth data processor <b>202</b>I via a directed edge representing a selector <b>204</b>M, and coupled to the sixth data processor <b>202</b>J via a directed edge representing a selector <b>204</b>N.</p><p id="p-0043" num="0038">In the example graph-based masking policy <b>200</b>B, three different data objects may be masked in a composite payload that includes a number of different data types. For example, the data types may be XML, HTML, text, JSON, CSV, DOCX, among other suitable data types. The graph-based masking policy <b>200</b>B has been configured based on the number and order of different data types and the data objects to be processed. In various examples, the graph-based masking policy <b>200</b>B contains a single root node <b>202</b>E where the processing begins and parses the payload based on the type of data of the payload. In various examples, each one of the directed edges <b>204</b>F, <b>204</b>G, <b>204</b>G, <b>204</b>H, <b>204</b>I, <b>204</b>J, <b>204</b>K, <b>204</b>L, <b>204</b>M, and <b>204</b>N representing selectors is used to specify how to extract the data segment from the relevant payload type. The extracted data segment is then provided to the next processor. For example, the relevant payload type of the extracted segment may be a table cell, XML text node, etc. In various examples, this process is applied repeatedly until a terminal node <b>206</b> is reached where masking is performed and result is returned. The graph-based masking policy <b>200</b>B thus allows to specify gradual and stepwise selection from the root node on the left to the leaf nodes on the right of the graph-based masking policy <b>200</b>B for each of any number of composite payloads. The final selections from nodes <b>202</b>H, <b>202</b>I and <b>202</b>J can be transformed by the terminal node <b>206</b>. For example, the terminal node <b>206</b> may be a masking processor that masks the received final selections of data segments. After masking, the flow of the process may proceed from the leaf nodes on the right to the root node on the left. In various examples, the transformed values are replaced in the original composite payload in place. For example, the relevant selection is replaced at each of the nodes <b>202</b>E, <b>202</b>F, <b>202</b>G, <b>202</b>H, <b>202</b>I, and <b>202</b>J corresponding to a data processor until the node <b>202</b>E generates a complete masked payload.</p><p id="p-0044" num="0039">In the particular example graph-based masking policy <b>200</b>B, a number of nodes corresponding to data processors <b>202</b>E, <b>202</b>F, and <b>202</b>J, are configured to send different data segments to multiple downstream nodes. For example, the second data processor <b>202</b>F is configured to be coupled to the fourth data processor <b>202</b>H and the fifth data processor <b>202</b>I and may thus send different data segments via the data selector <b>204</b>H and the data selector <b>204</b>I depending on the relative address received from these data selectors. Similarly, the sixth data processor <b>202</b>J is also configured to be coupled to the fifth data processor <b>202</b>I and the masking processor <b>206</b>, and can thus send a data segment to the fifth data processor <b>202</b>I to be further processed into another data segment sent via the data selector <b>204</b>M to the masking processor <b>206</b>, in addition to sending a data segment directly to the masking processor <b>206</b> via the data selector <b>204</b>N.</p><p id="p-0045" num="0040">In addition, the fifth data processor <b>202</b>I receives data segments from multiple data processors <b>202</b>F and <b>202</b>J and sends a processed data segment <b>204</b>M to the masking processor <b>206</b> via the data selector <b>204</b>M.</p><p id="p-0046" num="0041">In various examples, the masking processor <b>206</b> receives data segments via data selectors <b>204</b>L, <b>204</b>M, and <b>204</b>N from data processors <b>202</b>H, <b>202</b>I, and <b>202</b>J, respectively, and returns masked data segments to the data processors <b>202</b>H, <b>202</b>I, and <b>202</b>J via the same data selectors <b>204</b>L, <b>204</b>M, and <b>204</b>N. The masked data segments may be masked in place in selected portions of early data segments to ultimately result in a masked payload from the first data processor <b>202</b>E. For example, the data processor <b>202</b>H may mask in place a selected portion of the data segment received from data selector <b>204</b>H with the masked data segment from the data selector <b>204</b>K. The data processor <b>202</b>H may then send the masked data segment to the data processor <b>202</b>F via the data selector <b>204</b>H. The data processor <b>202</b>F may then mask in place a portion of the original data segment received from the data selector <b>204</b>F with the masked data segment from data selector <b>204</b>H, in addition to a masked data segment from the data selector <b>204</b>I. The data processor <b>204</b>G can then send the masked data segment to the first data processor <b>202</b>E via the data selector <b>204</b>F. The first data processor <b>202</b>E can then mask in place the masked data segment from data selector <b>204</b>F along with a masked data segment from data selector <b>204</b>G that was similarly processed by data processors <b>202</b>G, <b>202</b>I, and <b>202</b>J. In this manner, various layers of different data types may be processed using a masking engine generated based on the graph-based masking policy <b>200</b>B without the use of custom scripts or specialized algorithms to process text data.</p><p id="p-0047" num="0042">It is to be understood that the block diagram of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is not intended to indicate that the graph-based masking policy <b>200</b>B is to include all of the components shown in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>. Rather, the graph-based masking policy <b>200</b>B can include fewer or additional components not illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> (e.g., additional nodes, or additional directed edges, etc.). For example, depending on the particular masking policy received, the graph-based masking policy <b>200</b>B may include any combination of various nodes corresponding to any combination of different data processors and directed edges corresponding to data selectors for various data types present in the composite payload. For example, the graph-based masking policy <b>200</b>B can have two or more root nodes. In some examples, each of the root nodes may be connected to multiple data processors. In various examples, each of the data processors may have multiple inputs from multiple directed edges and multiple outputs to multiple directed edges. Furthermore, in some examples, a node representing a masking processor may have multiple inputs. Such nodes are terminal nodes in the graph and are not connected to other processors.</p><p id="p-0048" num="0043"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a process flow diagram of an example method that can mask composite payloads using graph-based masking policies. The method <b>300</b> can be implemented with any suitable computing device, such as the computing device <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> and is described with reference to the masking engine of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, the methods described below can be implemented by the processor <b>402</b> or the processor <b>702</b> of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>7</b></figref>.</p><p id="p-0049" num="0044">At block <b>302</b>, a processor receives a graph-based masking policy and a composite payload containing a data object to be masked. For example, the masking policy may include information indicating where and how the data object is to be masked. In various examples, the composite payload may include a number of layers of different data types.</p><p id="p-0050" num="0045">At block <b>304</b>, the processor instantiates a masking engine, for masking the composite payload and the data object, based on the graph-based masking policy. In various examples, the processor, based on the graph-based masking policy, can configure the masking engine to process the composite payload at a root node to parse the composite payload based on the type of the data of the composite payload and extract a relevant portion of the composite payload to a subsequent data processor based on information provided by a coupled selector. In some examples, the processor can configure the masking engine to extract a relevant portion of the composite payload based on a location of the data object to be masked using context based detection. In some examples, the processor can configure the masking engine to extract a relevant portion of the composite payload based on a structure of the data object using content based detection. In some examples, the processor can configure the masking engine to extract a relevant portion of the composite payload based on both context based detection and content based detection. In various examples, the processor can configure the masking engine to mask a data segment received from a data processor at a masking processor of the masking engine and transmit a masked data segment to the data processor for replacement in place of the data segment. In some examples, the processor can configure the masking engine to receive at each data processor of the masking engine a returned masked value from a subsequently coupled selector and replace in place a previously selected data of the data segment processed at each data processor with the returned masked value.</p><p id="p-0051" num="0046">At block <b>306</b>, the processor executes the masking engine on the composite payload to generate a masked payload including masked data objects, where the data objects to be masked are masked in place such that the resulting composite payload type is maintained. In various examples, the processor executes the masking engine on the composite payload to generate a masked payload including any number of masked data objects.</p><p id="p-0052" num="0047">At block <b>308</b>, the processor outputs the masked payload. For example, the masked payload may be transmitted to an application for use as test data.</p><p id="p-0053" num="0048">The process flow diagram of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is not intended to indicate that the operations of the method <b>300</b> are to be executed in any particular order, or that all of the operations of the method <b>300</b> are to be included in every case. Additionally, the method <b>300</b> can include any suitable number of additional operations.</p><p id="p-0054" num="0049">It is to be understood that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.</p><p id="p-0055" num="0050">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p><p id="p-0056" num="0051">Characteristics are as follows:</p><p id="p-0057" num="0052">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p><p id="p-0058" num="0053">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).</p><p id="p-0059" num="0054">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).</p><p id="p-0060" num="0055">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p><p id="p-0061" num="0056">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.</p><p id="p-0062" num="0057">Service Models are as follows:</p><p id="p-0063" num="0058">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based e-mail). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p><p id="p-0064" num="0059">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p><p id="p-0065" num="0060">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p><p id="p-0066" num="0061">Deployment Models are as follows:</p><p id="p-0067" num="0062">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p><p id="p-0068" num="0063">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p><p id="p-0069" num="0064">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p><p id="p-0070" num="0065">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).</p><p id="p-0071" num="0066">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.</p><p id="p-0072" num="0067"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is block diagram of an example computing device that can mask composite payloads using policy graphs. The computing device <b>400</b> may be for example, a server, desktop computer, laptop computer, tablet computer, or smartphone. In some examples, computing device <b>400</b> may be a cloud computing node. Computing device <b>400</b> may be described in the general context of computer system executable instructions, such as program modules, being executed by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. Computing device <b>400</b> may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.</p><p id="p-0073" num="0068">The computing device <b>400</b> may include a processor <b>402</b> that is to execute stored instructions, a memory device <b>404</b> to provide temporary memory space for operations of said instructions during operation. The processor can be a single-core processor, multi-core processor, computing cluster, or any number of other configurations. The memory <b>404</b> can include random access memory (RAM), read only memory, flash memory, or any other suitable memory systems.</p><p id="p-0074" num="0069">The processor <b>402</b> may be connected through a system interconnect <b>406</b> (e.g., PCI&#xae;, PCI-Express&#xae;, etc.) to an input/output (I/O) device interface <b>408</b> adapted to connect the computing device <b>400</b> to one or more I/O devices <b>410</b>. The I/O devices <b>410</b> may include, for example, a keyboard and a pointing device, wherein the pointing device may include a touchpad or a touchscreen, among others. The I/O devices <b>410</b> may be built-in components of the computing device <b>400</b>, or may be devices that are externally connected to the computing device <b>400</b>.</p><p id="p-0075" num="0070">The processor <b>402</b> may also be linked through the system interconnect <b>406</b> to a display interface <b>412</b> adapted to connect the computing device <b>400</b> to a display device <b>414</b>. The display device <b>414</b> may include a display screen that is a built-in component of the computing device <b>400</b>. The display device <b>414</b> may also include a computer monitor, television, or projector, among others, that is externally connected to the computing device <b>400</b>. In addition, a network interface controller (NIC) <b>416</b> may be adapted to connect the computing device <b>400</b> through the system interconnect <b>406</b> to the network <b>418</b>. In some embodiments, the NIC <b>416</b> can transmit data using any suitable interface or protocol, such as the internet small computer system interface, among others. The network <b>418</b> may be a cellular network, a radio network, a wide area network (WAN), a local area network (LAN), or the Internet, among others. An external computing device <b>420</b> may connect to the computing device <b>400</b> through the network <b>418</b>. In some examples, external computing device <b>420</b> may be an external webserver <b>420</b>. In some examples, external computing device <b>420</b> may be a cloud computing node.</p><p id="p-0076" num="0071">The processor <b>402</b> may also be linked through the system interconnect <b>406</b> to a storage device <b>422</b> that can include a hard drive, an optical drive, a USB flash drive, an array of drives, or any combinations thereof. In some examples, the storage device may include a receiver module <b>424</b>, a masking engine generator module <b>426</b>, a masking engine executor module <b>428</b>, and a transmitter module <b>430</b>. The receiver module <b>424</b> can receive a graph-based masking policy and a composite payload containing a data object to be masked. For example, the composite payload may include any number of data different data types. In some examples, the composite payload includes a number of nested payload types. For example, a composite payload may be a JSON payload within an XML payload within another outer JSON payload. The masking engine generator <b>426</b> can generate a masking engine for the composite payload and the data object based on a policy graph instantiated using the masking policy. For example, the masking engine may include a number of data processors coupled to a number of selectors. Each of the data processors may be configured to process a particular type of data in a predetermined manner and each of the selectors is configured to identify to an associated data processor a relative location of a portion of the composite payload to be extracted at the associated data processor. In various examples, an identification of the data object to be masked in the composite payload is based on a series of context identification selectors, content identification selectors, or a combination of both. For example, context identification selectors may include Jpath or Xpath. Content identification selectors may include regular expressions or dictionaries. In various examples, each node in the graph-based masking policy handles a different data layer of the composite payload and corresponds to a data processor in the masking engine. In some examples, a first data processor of the masking engine is connected to a second data processor processing a lower layer of the composite payload via a selector that provides the first data processor a specified relative path for a payload portion to be extracted. In various examples, each edge in the graph-based masking policy corresponds to a selector in the masking engine that receives a payload portion of the composite payload from a previous node and transmits a sub-portion of the received payload portion to a subsequent node. Each edge receives in return, from the subsequent node, a corresponding masked sub-portion of the payload and replaces the masked sub-portion in place to create a masked payload portion to transmit back to the previous node. In various examples, the masking engine includes a masking processor coupled to a data processor. For example, the masking processor is to receive the data object from the data processor, mask the data object, and transmit the data object back to the data processor for masking in place in a data segment processed by the data processor. In various examples, an order of processing, selection and masking is to be determined based on the graph-based masking policy. In some examples, a processing flow of the masking engine is controlled based on a received external parameter. For example, the received external parameter may be a value such as &#x201c;encrypt&#x201d; or &#x201c;decrypt.&#x201d; In some examples, a processing flow of the masking engine is controlled based on a received payload-specific parameter. For example, the payload-specific parameter may be an XMPL tag containing the value &#x201c;consent exists.&#x201d; In various examples, the processing flow of the masking engine may be controlled based on any combination of a received payload-specific parameter and a received external parameter. The masking engine executor module <b>428</b> can execute the masking engine on the composite payload to generate a masked payload including a masked data object. In some examples, the masking engine executor module <b>428</b> can execute the masking engine on the composite payload to generate a masked payload including a number of masked data objects. In some examples, the executed masking engine can perform any number of masking actions on a data object. In some examples, the executed masking engine is to perform a masking action on any number of data objects. In various examples, a validity of the composite payload type is maintained in the masked payload after masking the data object. For example, a masked word processing document may be a valid word processing document after the masking, and thus maintain any format restrictions. The transmitter module <b>430</b> can output the masked payload.</p><p id="p-0077" num="0072">It is to be understood that the block diagram of <figref idref="DRAWINGS">FIG. <b>4</b></figref> is not intended to indicate that the computing device <b>400</b> is to include all of the components shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Rather, the computing device <b>400</b> can include fewer or additional components not illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> (e.g., additional memory components, embedded controllers, modules, additional network interfaces, etc.). Furthermore, any of the functionalities of the receiver module <b>424</b>, the masking engine generator module <b>426</b>, the masking engine executor module <b>428</b>, and the transmitter module <b>430</b>, may be partially, or entirely, implemented in hardware and/or in the processor <b>402</b>. For example, the functionality may be implemented with an application specific integrated circuit, logic implemented in an embedded controller, or in logic implemented in the processor <b>402</b>, among others. In some embodiments, the functionalities of the receiver module <b>424</b>, the masking engine generator module <b>426</b>, the masking engine executor module <b>428</b>, and the transmitter module <b>430</b> can be implemented with logic, wherein the logic, as referred to herein, can include any suitable hardware (e.g., a processor, among others), software (e.g., an application, among others), firmware, or any suitable combination of hardware, software, and firmware.</p><p id="p-0078" num="0073">Referring now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, illustrative cloud computing environment <b>500</b> is depicted. As shown, cloud computing environment <b>500</b> includes one or more cloud computing nodes <b>502</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>504</b>A, desktop computer <b>504</b>B, laptop computer <b>504</b>C, and/or automobile computer system <b>504</b>N may communicate. Nodes <b>502</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>500</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>504</b>A-N shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> are intended to be illustrative only and that computing nodes <b>502</b> and cloud computing environment <b>500</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p><p id="p-0079" num="0074">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a set of functional abstraction layers provided by cloud computing environment <b>500</b> (<figref idref="DRAWINGS">FIG. <b>5</b></figref>) is shown. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p><p id="p-0080" num="0075">Hardware and software layer <b>600</b> includes hardware and software components. Examples of hardware components include: mainframes <b>601</b>; RISC (Reduced Instruction Set Computer) architecture based servers <b>602</b>; servers <b>603</b>; blade servers <b>604</b>; storage devices <b>605</b>; and networks and networking components <b>606</b>. In some embodiments, software components include network application server software <b>607</b> and database software <b>608</b>.</p><p id="p-0081" num="0076">Virtualization layer <b>610</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers <b>611</b>; virtual storage <b>612</b>; virtual networks <b>613</b>, including virtual private networks; virtual applications and operating systems <b>614</b>; and virtual clients <b>615</b>.</p><p id="p-0082" num="0077">In one example, management layer <b>620</b> may provide the functions described below. Resource provisioning <b>621</b> provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing <b>622</b> provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal <b>623</b> provides access to the cloud computing environment for consumers and system administrators. Service level management <b>624</b> provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment <b>625</b> provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p><p id="p-0083" num="0078">Workloads layer <b>630</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation <b>631</b>; software development and lifecycle management <b>632</b>; virtual classroom education delivery <b>633</b>; data analytics processing <b>634</b>; transaction processing <b>635</b>; and composite payload masking <b>636</b>.</p><p id="p-0084" num="0079">The present invention may be a system, a method and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.</p><p id="p-0085" num="0080">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0086" num="0081">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0087" num="0082">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0088" num="0083">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the techniques. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0089" num="0084">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0090" num="0085">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0091" num="0086">Referring now to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a block diagram is depicted of an example tangible, non-transitory computer-readable medium <b>700</b> that can mask composite payloads using policy graphs. The tangible, non-transitory, computer-readable medium <b>700</b> may be accessed by a processor <b>702</b> over a computer interconnect <b>704</b>. Furthermore, the tangible, non-transitory, computer-readable medium <b>700</b> may include code to direct the processor <b>702</b> to perform the operations of the method <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0092" num="0087">The various software components discussed herein may be stored on the tangible, non-transitory, computer-readable medium <b>700</b>, as indicated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For example, a receiver module <b>706</b> includes code to receive a masking policy and a composite payload containing a data object to be masked. A masking engine generator module <b>708</b> includes code to generate a masking engine for the composite payload and the data object based on a policy graph instantiated based on the masking policy. The masking engine generator module <b>708</b> further includes code to configure the masking engine to process the composite payload at a root node to parse the composite payload based on the type of the data of the composite payload and extract a relevant portion of the composite payload to a subsequent data processor based on information provided by a coupled selector. In various examples, the masking engine generator module <b>708</b> also includes code to configure the masking engine to extract a relevant portion of the composite payload based on a location of the data object to be masked using context based detection. In some examples, the masking engine generator module <b>708</b> includes code to configure the masking engine to extract a relevant portion of the composite payload based on a structure of the data object using content based detection. The masking engine generator module <b>708</b> also includes code to configure the masking engine to mask a data segment received from a data processor at a masking processor of the masking engine and transmit a masked data segment to the data processor for replacement in place of the data segment. In various examples, the masking engine generator module <b>708</b> includes code to configure the masking engine to receive at each data processor of the masking engine a returned masked value from a subsequently coupled selector and replace in place a previously selected data of the data segment processed at each data processor with the returned masked value. A masking engine executor module <b>710</b> includes code to execute the masking engine on the composite payload to generate a masked payload including a masked data object. The masking engine executor module <b>710</b> includes code to generate a masked payload including a number of masked data objects. A transmitter module <b>712</b> includes code to output the masked payload.</p><p id="p-0093" num="0088">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions. It is to be understood that any number of additional software components not shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be included within the tangible, non-transitory, computer-readable medium <b>700</b>, depending on the specific application.</p><p id="p-0094" num="0089">The descriptions of the various embodiments of the present techniques have been presented for purposes of illustration, but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system, comprising a processor to:<claim-text>receive a graph-based masking policy and a composite payload containing a data object to be masked;</claim-text><claim-text>instantiate a masking engine based on a graph-based masking policy;</claim-text><claim-text>execute the masking engine on the composite payload to generate a masked payload comprising a masked data object; wherein the data object to be masked is masked in place such that the resulting composite payload type is maintained; and</claim-text><claim-text>output the masked payload.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a validity of the composite payload type is maintained in the masked payload after masking the data object.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the composite payload comprises a plurality of data different data types.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the composite payload comprises a plurality of nested payload types.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the masking engine comprises a plurality of data processors coupled to a plurality of selectors, wherein each of the data processors is configured to process a particular type of data in a predetermined manner and each of the selectors is configured to identify to an associated data processor a relative location of a portion of the composite payload to be extracted at the associated data processor.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein an identification of the data object to be masked in the composite payload is based on a series of context identification selectors, content identification selectors, or a combination of both.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each node in the graph-based masking policy handles a different data layer of the composite payload and corresponds to a data processor in the masking engine.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a first data processor of the masking engine is connected to a second data processor processing a lower layer of the composite payload via a selector that provides the first data processor a specified relative path for a payload portion to be extracted.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each edge in the graph-based masking policy corresponds to a selector in the masking engine that receives a payload portion of the composite payload from a previous node and transmits a sub-portion of the received payload portion to a subsequent node, and receives in return, from the subsequent node, a corresponding masked sub-portion of the payload portion and replaces the masked sub-portion in place to create a masked payload portion to transmit back to the previous node.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the masking engine comprises a masking processor coupled to a data processor, wherein the masking processor is to receive the data object from the data processor, mask the data object, and transmit the data object back to the data processor for masking in place in a data segment processed by the data processor.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the executed masking engine is to perform a plurality of masking actions on the data object.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the executed masking engine is to perform a masking action on a plurality of data objects.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein an order of processing, selection and masking is to be determined based on the graph-based masking policy.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a processing flow of the masking engine is controlled based on a received external parameter.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a processing flow of the masking engine is controlled based on a received payload-specific parameter.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processing flow of the masking engine is controlled based on a combination of a received payload-specific parameter and a received external parameter.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A computer-implemented method, comprising:<claim-text>receiving, via a processor, a graph-based masking policy and a composite payload containing a data object to be masked;</claim-text><claim-text>instantiating, via the processor, a masking engine based on the graph-based masking policy;</claim-text><claim-text>executing, via the processor, the masking engine on the composite payload to generate a masked payload comprising a masked data object, wherein the data object to be masked is masked in place such that the resulting composite payload type is maintained; and</claim-text><claim-text>outputting, via the processor, the masked payload.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer-implemented method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein generating the masking engine comprises configuring the masking engine to process the composite payload at a root node to parse the composite payload based on the type of the data of the composite payload and extract a relevant portion of the composite payload to a subsequent data processor based on information provided by a coupled selector.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer-implemented method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein generating the masking engine comprises configuring the masking engine to extract a relevant portion of the composite payload based on a location of the data object to be masked using context based detection.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer-implemented method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein generating the masking engine comprises configuring the masking engine to extract a relevant portion of the composite payload based on a structure of the data object using content based detection.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The computer-implemented method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein generating the masking engine comprises configuring the masking engine to mask a data segment received from a data processor at a masking processor of the masking engine and transmit a masked data segment to the data processor for replacement in place of the data segment.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The computer-implemented method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein generating the masking engine comprises configuring the masking engine to receive at each data processor of the masking engine a returned masked value from a subsequently coupled selector and replace in place a previously selected data of the data segment processed at each data processor with the returned masked value.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The computer-implemented method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein executing the masking engine generates a masked payload comprising a plurality of masked data objects.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. A computer program product for masking composite payloads, the computer program product comprising a computer-readable storage medium having program code embodied therewith, wherein the computer-readable storage medium is not a transitory signal per se, the program code executable by a processor to cause the processor to:<claim-text>receive a graph-based masking policy and a composite payload containing a data object to be masked;</claim-text><claim-text>initiate a masking engine based on the graph-based masking policy;</claim-text><claim-text>execute the masking engine on the composite payload to generate a masked payload comprising a masked data object, wherein the data object to be masked is masked in place such that the resulting composite payload type is maintained; and</claim-text><claim-text>output the masked payload.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The computer program product of <claim-ref idref="CLM-00024">claim 24</claim-ref>, further comprising program code executable by the processor to configure the masking engine to process the composite payload at a root node to parse the composite payload based on the type of the data of the composite payload and extract a relevant portion of the composite payload to a subsequent data processor based on information provided by a coupled selector.</claim-text></claim></claims></us-patent-application>