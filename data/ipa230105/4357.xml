<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004358A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004358</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17942995</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>72</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>34</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>722</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>7</main-group><subgroup>728</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3013</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3066</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>34</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND APPARATUS TO IMPROVE PERFORMANCE OF ENCRYPTION AND DECRYPTION TASKS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Intel Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Parikh</last-name><first-name>Bhushan</first-name><address><city>Queen Creek</city><state>AZ</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>O'Dwyer</last-name><first-name>TJ</first-name><address><city>Co. Tipperary</city><country>IE</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Parker</last-name><first-name>Valerie</first-name><address><city>Portland</city><state>OR</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Palermo</last-name><first-name>Stephen</first-name><address><city>Chandler</city><state>AZ</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods, apparatus, systems, and articles of manufacture are disclosed. An example apparatus includes: interface circuitry to receive a first value and a second value; selector circuitry to select a first subset of bits and a second subset of bits from the first value; multiplier circuitry to: multiply the first subset to the second value during a first compute cycle; and multiply the second subset to the second value during a second compute cycle; left shift circuitry to perform a bitwise shift with a product of the first subset and the second value during the second compute cycle; adder circuitry to add a product of the second subset and the second value to a result of the plurality of bitwise shift operations during the second compute cycle; and comparator circuitry to determine the result of the modular multiplication based on a result of the addition during the second compute cycle.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="217.25mm" wi="158.75mm" file="US20230004358A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="236.22mm" wi="149.10mm" orientation="landscape" file="US20230004358A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="216.49mm" wi="156.13mm" file="US20230004358A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="216.15mm" wi="156.13mm" file="US20230004358A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="235.97mm" wi="145.80mm" file="US20230004358A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="238.93mm" wi="165.35mm" orientation="landscape" file="US20230004358A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="229.11mm" wi="153.50mm" file="US20230004358A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="242.23mm" wi="177.55mm" file="US20230004358A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="226.65mm" wi="152.91mm" file="US20230004358A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="239.27mm" wi="167.13mm" file="US20230004358A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="240.62mm" wi="175.77mm" file="US20230004358A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="154.52mm" wi="63.50mm" file="US20230004358A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE DISCLOSURE</heading><p id="p-0002" num="0001">This disclosure relates generally to encryption and decryption, more particularly, to methods and apparatus to increase encryption and decryption tasks.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Encryption refers to the process of representing data in a format that hides underlying information. In many examples, encryption can be used to provide security in a computer system. For example, a user device may store sensitive information (e.g., financial data, personal contact data, etc.) that needs to be sent across a network to a second device (e.g., a server that processes online purchase). The user device may encrypt the sensitive information before transmitting it over the network so that only devices with secret decryption data can reformat the encrypted message and obtain the sensitive information. In doing so, any malicious actor that does not have the secret key (decryption data) would be unable to the underlying sensitive information, even if the malicious actor intercepted the encrypted message during its transit over the network.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an illustrative example of position estimation for mobile devices.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is an example block diagram of the device of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is an example block diagram of the server of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example block diagram of the multiplier circuitry of <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref>.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an illustrative example of operations performed by the frequency scaler circuitry of <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref>.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart representative of example machine readable instructions and/or example operations that may be executed by example processor circuitry to implement the example device and/or example server of <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref>.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart representative of example machine readable instructions and/or example operations that may be executed by example processor circuitry to implement the 25638 (25519&#x3c;&#x3c;1) domain modular multiplication of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of an example processing platform including processor circuitry structured to execute the example machine readable instructions and/or the example operations of <figref idref="DRAWINGS">FIG. <b>3</b></figref> to implement the example device and/or example server of <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref>.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an example implementation of the processor circuitry of <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram of another example implementation of the processor circuitry of <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram of an example software distribution platform (e.g., one or more servers) to distribute software (e.g., software corresponding to the example machine readable instructions of <figref idref="DRAWINGS">FIG. <b>5</b></figref>) to client devices associated with end users and/or consumers (e.g., for license, sale, and/or use), retailers (e.g., for sale, re-sale, license, and/or sub-license), and/or original equipment manufacturers (OEMs) (e.g., for inclusion in products to be distributed to, for example, retailers and/or to other end users such as direct buy customers).</p><p id="p-0015" num="0014">In general, the same reference numbers will be used throughout the drawing(s) and accompanying written description to refer to the same or like parts. The figures are not to scale.</p><p id="p-0016" num="0015">As used herein, connection references (e.g., attached, coupled, connected, and joined) may include intermediate members between the elements referenced by the connection reference and/or relative movement between those elements unless otherwise indicated. As such, connection references do not necessarily infer that two elements are directly connected and/or in fixed relation to each other. As used herein, stating that any part is in &#x201c;contact&#x201d; with another part is defined to mean that there is no intermediate part between the two parts.</p><p id="p-0017" num="0016">Unless specifically stated otherwise, descriptors such as &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., are used herein without imputing or otherwise indicating any meaning of priority, physical order, arrangement in a list, and/or ordering in any way, but are merely used as labels and/or arbitrary names to distinguish elements for ease of understanding the disclosed examples. In some examples, the descriptor &#x201c;first&#x201d; may be used to refer to an element in the detailed description, while the same element may be referred to in a claim with a different descriptor such as &#x201c;second&#x201d; or &#x201c;third.&#x201d; In such instances, it should be understood that such descriptors are used merely for identifying those elements distinctly that might, for example, otherwise share a same name.</p><p id="p-0018" num="0017">As used herein, &#x201c;approximately&#x201d; and &#x201c;about&#x201d; modify their subjects/values to recognize the potential presence of variations that occur in real world applications. For example, &#x201c;approximately&#x201d; and &#x201c;about&#x201d; may modify dimensions that may not be exact due to manufacturing tolerances and/or other real world imperfections as will be understood by persons of ordinary skill in the art. For example, &#x201c;approximately&#x201d; and &#x201c;about&#x201d; may indicate such dimensions may be within a tolerance range of +/&#x2212;10% unless otherwise specified in the below description. As used herein &#x201c;substantially real time&#x201d; refers to occurrence in a near instantaneous manner recognizing there may be real world delays for computing time, transmission, etc. Thus, unless otherwise specified, &#x201c;substantially real time&#x201d; refers to real time+/&#x2212;1 second.</p><p id="p-0019" num="0018">As used herein, the phrase &#x201c;in communication,&#x201d; including variations thereof, encompasses direct communication and/or indirect communication through one or more intermediary components, and does not require direct physical (e.g., wired) communication and/or constant communication, but rather additionally includes selective communication at periodic intervals, scheduled intervals, aperiodic intervals, and/or one-time events.</p><p id="p-0020" num="0019">As used herein, &#x201c;processor circuitry&#x201d; is defined to include (i) one or more special purpose electrical circuits structured to perform specific operation(s) and including one or more semiconductor-based logic devices (e.g., electrical hardware implemented by one or more transistors), and/or (ii) one or more general purpose semiconductor-based electrical circuits programmable with instructions to perform specific operations and including one or more semiconductor-based logic devices (e.g., electrical hardware implemented by one or more transistors). Examples of processor circuitry include programmable microprocessors, Field Programmable Gate Arrays (FPGAs) that may instantiate instructions, Central Processor Units (CPUs), Graphics Processor Units (GPUs), Digital Signal Processors (DSPs), XPUs, or microcontrollers and integrated circuits such as Application Specific Integrated Circuits (ASICs). For example, an XPU may be implemented by a heterogeneous computing system including multiple types of processor circuitry (e.g., one or more FPGAs, one or more CPUs, one or more GPUs, one or more DSPs, etc., and/or a combination thereof) and application programming interface(s) (API(s)) that may assign computing task(s) to whichever one(s) of the multiple types of processor circuitry is/are best suited to execute the computing task(s).</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0021" num="0020">A wide variety of encryption techniques can be used to provide security in a computer system. Some types of encryption techniques include flaws or exploits that, when identified and used by malicious actors, allow the recovery of sensitive information without the secret decryption information. In some examples, the identification and exploitation of a flaw in an encryption technique is referred to as breaking the encryption.</p><p id="p-0022" num="0021">When a break occurs in an encryption technique used for security in a computer system, developers may change the encryption technique used in the computer system to re-establish security. In general, encryption techniques used by the computer security industry have become more complex over time. By increasing complexity, members of the computer security industry seek to develop new encryption techniques that are more difficult to break than previous encryption techniques, thereby ensuring computer systems stay secure for longer amounts of time.</p><p id="p-0023" num="0022">As the complexity of encryption techniques increases, the computational resources and time required to perform encryption and decryption tasks have also increased. This increase in computational expense may negatively impact the performance of any device that uses encryption for security. For example, mobile devices such as smartphones, tablets, etc. frequently use encryption to securely transmit messages over a network but have limited amounts of power available to perform such tasks. Furthermore, because many devices may include general purpose hardware that is not specially designed to perform encryption. In some examples, an encryption technique may be so computationally expensive that a device lacks the resources to properly perform the encryption task as defined by a security protocol. In other examples, a device may be required to reduce the number of computational resources dedicated to other tasks so that additional computational resources can be used to perform the encryption task.</p><p id="p-0024" num="0023">Example methods, systems, and apparatus described herein improve devices to perform computationally expensive tasks. Example frequency scaler circuitry obtains a power budget that describes an amount of power a given device is capable of using to perform the expensive task. Advantageously, the example frequency scaler circuitry selects, based on the power budget, a subset of processor cores within the device. The example frequency scaler circuitry assigns the selected subset of processor cores to perform the expensive task. The example frequency scaler circuitry increases the operating frequency of the selected subset of processor cores and, in turn, decreases the operating frequency of the remaining processor cores. As a result, a device that implements the example frequency scaler circuitry according to the teachings of this disclosure may perform a computationally expensive task (such as encryption) using less power and/or less time than previous solutions that ran the computationally expensive task on all cores without any adjustments to operating frequency.</p><p id="p-0025" num="0024">One example of a complex encryption technique is x25519. x25519 refers to a set of encryption algorithms that use a mathematical function known as an Elliptic Curve Cryptography (ECC) 25519 curve according to the elliptic curve Diffie-Hellman (ECDH) key agreement scheme. Request For Comments (RFC) 8446, a popular security standard, requires that any device using Transport Layer Security (TLS) v1.3, a communication protocol, supports the x25519 algorithms.</p><p id="p-0026" num="0025">Previous solutions that support the x25519 algorithms do so in a time consuming and computationally expensive manner. In big O notation, a computer science notation that describes an upper bound to how the execution time of an algorithm grows as the input size grows, many algorithms run in O(n<sup>3</sup>), resulting in long compute times. In a first example, one algorithm within x25519, x25519 Montgomery Point Multiplication, may require approximately 80,000 clock cycles to complete using techniques from previous solutions. As another example, Ed25519 Twisted Edwards Point Multiplication, which is another x25519 algorithm, may require approximately 70,0000 clock cycles to complete using techniques from previous solutions. The number of clock cycles are high in part because Modular Multiplication, an operation that occurs frequently within the x25519 algorithms, may require 19 or more compute cycles to perform each time techniques from previous solutions are used.</p><p id="p-0027" num="0026">Advantageously, example methods, systems, and apparatus described herein reduce the number of clock cycles required to perform 25519 Modular Multiplication from 19 or more to 6. In turn, example devices that support x25519 algorithms according to the teachings of this disclosure may require approximately 27,000 clock cycles to perform x25519 Montgomery Point Multiplication and approximately 25,0000 clock cycles to perform Ed25519 Twisted Edwards Point Multiplication. As such, example devices that support x25519 algorithms according to the teachings of this disclosure may require less compute cycles to do so than previous solutions.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an illustrative example of position estimation for mobile devices. <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes an example computer system. The example computer system <b>100</b> includes an example device <b>102</b>, example towers <b>104</b>A, <b>104</b>B, . . . , <b>104</b>-<i>n</i>, an example server <b>106</b>, an example round trip data path <b>108</b>, and an example angle of arrival (AoA) <b>110</b>. <figref idref="DRAWINGS">FIG. <b>1</b></figref> also includes an example map <b>112</b>. The example map <b>112</b> includes example calculated position points <b>114</b> and example actual position points <b>116</b>.</p><p id="p-0029" num="0028">The example computer system <b>100</b> determines the position of a device using 5G signal-cell based positioning techniques. Specifically, the example computer system <b>100</b> use the Long-Term Evolution (LTE) standard developed by the 3rd Generation Partnership Project (3GPP).</p><p id="p-0030" num="0029">The example device <b>102</b> is any type of device that supports x2559 algorithms. The example device <b>102</b> may be, for example, a smartphone, tablet, wearable device, laptop, desktop, etc. In the illustrated example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the example device <b>102</b> communicates using 5G-LTE. Furthermore, in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the example device <b>102</b> is an example of user equipment (UE) as defined in the 5G Radio Area Network (RAN) architecture.</p><p id="p-0031" num="0030">When using 5G-LTE to determine position data, the example device <b>102</b> may generate sounding resource signal (SRS) data that estimates the quality of one or more communication channels at different frequencies. The example device <b>102</b> may generate the SRS data in response to instructions from the example tower <b>104</b>A.</p><p id="p-0032" num="0031">Each of the example towers <b>104</b>A, <b>104</b>B, . . . , <b>104</b>-<i>n </i>is an example implementation of a 3GGP-compliant 5G base station. In some examples, a given example tower <b>104</b>A may be referred to as a radio hardware unit (RU) and/or a distributed unit (DU) as defined by the gNodeB architecture of 5G-LTE compliant RANs. The example device <b>102</b> may communicate with the tower <b>104</b>A as part of a massive multiple-input multiple-output (MIMO) architecture. In a massive multiple-input multiple-output (MIMO) architecture, each of example towers <b>104</b>A, <b>104</b>B, . . . , <b>104</b>-<i>n </i>may include a &#x201c;massive&#x201d; number of antennas. As such, a given example tower <b>104</b>A may receive data from a plurality of devices (including but not limited to the example device <b>102</b>) and forward corresponding data to other towers <b>104</b>B, . . . , <b>104</b>-<i>n</i>, one or more destination devices, etc. The example computer system <b>100</b> may include any number of example towers <b>104</b>A, <b>104</b>B, . . . , <b>104</b>-<i>n. </i></p><p id="p-0033" num="0032">The example server <b>106</b> is an example implementation of a centralized unit (CU) as defined by the gNodeB architecture of 5G-LTE compliant RANs. In some examples, the server <b>106</b> may be implemented within a Virtual Private Cloud (VPC). The example server <b>106</b> obtains SRS data from the tower <b>104</b>A to calculate the position of the device <b>102</b>. To calculate position information, the example server <b>106</b> may communicate with the example tower <b>104</b>A to determine the AoA <b>110</b> of the SRS data. The AoA <b>110</b> data describes a direction from which the example tower received the SRS data from the example device <b>102</b>. The example server <b>106</b> may use the AoA <b>110</b> in combination with additional information to calculate position data. Example information used to compute position may include, but is not limited a received signal strength indicator (RSSI), AoA data from other 5G-LTE compliant towers, etc. The example server may use any appropriate technique to calculate position data based on the available data. For example, the example device <b>102</b> may communicate with two or more of the example towers <b>104</b>A, <b>104</b>B, . . . , <b>104</b>-<i>n</i>, causing the server <b>106</b> to receive two or more AoA values corresponding to each tower. In such examples, the server <b>106</b> may use the two or more AoA values to perform triangulation and calculate a position of the device <b>102</b>.</p><p id="p-0034" num="0033">The example server <b>106</b> may calculate new position data for the example device <b>102</b> to capture any movement of the example device <b>102</b>. For example, the map <b>112</b> include actual position points <b>116</b>, which describe where a user carrying the example device <b>102</b> is physically located within a city at different points in time. As the user moves, the example server <b>106</b> determines new position values as illustrated by the calculated position points <b>114</b>.</p><p id="p-0035" num="0034">Positioning techniques within the 5G-LTE protocol require the device <b>102</b> and the server <b>106</b> to communicate with one another. To enable communication, the device <b>102</b> and server <b>106</b> exchange keys and encrypt messages by executing x25519 algorithms. As used above and herein, a key refers to an amount of data that is used to accomplish encryption and decryption tasks. For example, a first device may encrypt sensitive information based on a key. In such an example, a second device may be required to know the value of the key to perform decryption. By exchanging keys through the x25519 algorithms, the example server <b>106</b> and device <b>102</b> jointly agree on a shared secret using an insecure channel.</p><p id="p-0036" num="0035">The 5G-LTE standard defines the use of SRS data in a time sensitive manner. For example, in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the example tower <b>104</b>A must receive SRS data within one second of when the example tower <b>104</b>A transmits instructions to the example device <b>102</b> to generate the SRS data. If the example tower <b>104</b>A receives SRS data later than one second after the instructions are sent, the SRS data is considered expired. In turn, the 5G-LTE standard may require the example server <b>106</b> obtain unexpired SRS data from the example tower <b>104</b>A to calculate a position of the device <b>102</b>. As such, the maximum distance that the example device <b>102</b> can be positioned away from the example tower <b>104</b>A while still receiving 5G-LTE enabled position data is limited by the amount of time required for information to flow in the example round trip data path <b>108</b>. The example round trip data path <b>108</b> includes transmission of instructions from the example tower <b>104</b>A to the example device <b>102</b>, the computation of the SRS data by the device <b>102</b>, and the transmission of the SRS data from the device <b>102</b> to the tower <b>104</b>A.</p><p id="p-0037" num="0036">The illustrative example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example of a practical application of the use of encryption within a computer system. Because the position of a device is sensitive information, the example device <b>102</b> and example server <b>106</b> seek to reformat the position data through encryption. The encrypted format hides the underlying information from any malicious actor that may have access to the example tower <b>104</b>A or any other part of the communication network. As such, the example device <b>102</b> is required to encrypt the SRS data before transmission to the example tower <b>104</b>A. The encryption of the SRS data, which includes multiple x25519 modular multiplication operations, is part of set of operations required to occur within one second to avoid the expiration of the SRS data. Advantageously, the example device <b>102</b> requires less clock cycles to compute x25519 modular multiplication operations than previous solutions. The improved efficiency of the example device <b>102</b> when performing encryption tasks may enable the example device <b>102</b> to satisfy a latency threshold. As an example, the example device <b>102</b> may meet the one second SRS expiration window while being positioned further away from the example tower <b>104</b>A than other devices that use previous xx2519 modular multiplication.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a block diagram of the example device <b>102</b> to perform computationally expensive tasks. The example device <b>102</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> may be instantiated (e.g., creating an instance of, bring into being for any length of time, materialize, implement, etc.) by processor circuitry such as a central processing unit executing instructions. Additionally or alternatively, the example device <b>102</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> may be instantiated (e.g., creating an instance of, bring into being for any length of time, materialize, implement, etc.) by an ASIC or an FPGA structured to perform operations corresponding to the instructions. It should be understood that some or all of the circuitry of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may, thus, be instantiated at the same or different times. Some or all of the circuitry may be instantiated, for example, in one or more threads executing concurrently on hardware and/or in series on hardware. Moreover, in some examples, some or all of the circuitry of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> may be implemented by microprocessor circuitry executing instructions to implement one or more virtual machines and/or containers.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> includes the example device <b>102</b> and the example tower <b>104</b>A of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The example device <b>102</b> includes example interface circuitry <b>202</b>A, example SRS calculator circuitry <b>204</b>, example frequency scaler circuitry <b>206</b>A, and an example public key acceleration engine <b>208</b>A. The example public key acceleration engine <b>208</b>A includes example controller circuitry <b>210</b>A and example multiplier circuitry <b>212</b>A.</p><p id="p-0040" num="0039">The example interface circuitry <b>202</b>A enables communication between other components of the example device <b>102</b> and external devices. In some examples, the example interface circuitry <b>202</b>A may implement one or more lower layers of the Open Systems Interconnection (OSI) model for communication protocols that may include, but are not limited to, WiFi&#xae;, Bluetooth&#xae;, Near Field Communication (NFC), etc. The example interface circuitry <b>202</b>A receives a computationally expensive task from the external device. In some examples, the interface circuitry <b>202</b>A is instantiated by processor circuitry executing interface instructions and/or configured to perform operations such as those represented by the flowchart of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0041" num="0040">In <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the computationally expensive task is the encryption of SRS data. The example interface circuitry <b>202</b>A may receive the request from instructions sent from the example tower <b>104</b>A. The example interface circuitry <b>202</b>A may receive the instructions in an encrypted format. In <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the example interface circuitry <b>202</b>A also transmits encrypted SRS data to the example tower <b>104</b>A. In such examples, the example interface circuitry <b>202</b>A may be implemented by one or more 5G-LTE compliant antennas. The example interface circuitry <b>202</b>A may additionally or alternatively implement one or more lower layers of the OSI model for a 5G-LTE compliant RAN.</p><p id="p-0042" num="0041">The example SRS calculator circuitry <b>204</b> generates the SRS data to estimate the quality of the connection between the example interface circuitry <b>202</b>A and the example tower <b>104</b>A. The example SRS calculator circuitry <b>204</b> may use any appropriate technique as defined by the 5G-LTE standard to generate the SRS data.</p><p id="p-0043" num="0042">The example frequency scaler circuitry <b>206</b>A improves the performance of processor circuitry on the example device <b>102</b> to execute computationally expensive tasks according to the teachings of this disclosure. In some examples, the processor circuitry is an Intel&#xae; Xeon Sapphire Rapids processor. In other examples, the processor circuitry may be implemented by any architecture and maybe developed by any manufacturer. Examples of processor circuitry architectures are discussed further in connection with <figref idref="DRAWINGS">FIG. <b>7</b></figref>. To improve the performance of the processor circuitry, the example frequency scaler circuitry <b>206</b>A determines a number of cores in the processor circuitry, selects a subset of the cores based on a power budget, increases the operating frequency of the subset of cores, and decreases the operating frequency of the remaining cores. In some examples, increasing the operating frequency of a processor core may be referred to as overclocking, and decreasing the operating frequency of a processor core may be referred to as underclocking. The example frequency scaler circuitry <b>206</b>A is discussed further in connection with <figref idref="DRAWINGS">FIGS. <b>4</b>, <b>5</b></figref>. In some examples, the frequency scaler circuitry <b>206</b>A is instantiated by processor circuitry executing frequency scaler instructions and/or configured to perform operations such as those represented by the flowchart of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0044" num="0043">The subset of cores selected by the example frequency scaler circuitry <b>206</b>A perform the computationally expensive task. In <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the subset of cores implements at least the example multiplier circuitry <b>212</b>A. In some examples, the subset of cores additionally includes the example controller circuitry <b>210</b>A. The example controller circuitry <b>210</b> and the example controller circuitry <b>210</b>A are collectively referred to as the example public key acceleration engine <b>208</b>A. The example public key acceleration engine <b>208</b>A performs encryption and decryption tasks for the example device <b>102</b> according to the teachings of this disclosure. For example, in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the example public key acceleration engine <b>208</b>A encrypts the SRS data generated by the SRS calculator circuitry <b>204</b>.</p><p id="p-0045" num="0044">Within the example public key acceleration engine <b>208</b>A, the example controller circuitry <b>210</b>A manages the execution of various encryption tasks. For example, in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the example controller circuitry <b>210</b>A obtains the SRS data from the example SRS calculator circuitry <b>204</b> and performs one or more portions of the relevant x25519 algorithms required to encrypt the SRS data. The x25519 algorithms include multiple instances of x25519 modular multiplication. When x25519 modular multiplication is required, the example controller circuitry <b>210</b>A provides the necessary inputs to the example multiplier circuitry <b>212</b>A to perform the operation. The example controller circuitry <b>210</b>A also obtains the results of the x25519 operation, uses them to complete the rest of the x2559 algorithm, and provides the final encrypted SRS data to the example interface circuitry <b>202</b>A for transmission to the example tower <b>104</b>A. In some examples, the controller circuitry <b>210</b>A is instantiated by processor circuitry executing controller instructions and/or configured to perform operations such as those represented by the flowchart of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0046" num="0045">The example multiplier circuitry <b>212</b>A performs x25519 modular multiplication according to the teachings of this disclosure. In examples described herein, the technique described in this disclosure to perform x25519 modular multiplication may be referred to as modular multiplications in the example 25638 (25519&#x3c;&#x3c;1) domain. The example 25638 (25519&#x3c;&#x3c;1) domain is discussed further in connection with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In contrast, techniques from previous solutions to perform x25519 modular multiplications may be referred to as modular multiplications in the 25519 domain. The example multiplier circuitry <b>212</b>A may be operated by one or more cores of processor circuitry that execute instructions at an increased operating frequency as defined by the example frequency scaler circuitry <b>206</b>A. In some examples, the multiplier circuitry <b>212</b>A is instantiated by processor circuitry executing multiplier instructions and/or configured to perform operations such as those represented by the flowchart of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0047" num="0046">The example block diagram of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> shows how the example public key acceleration engine <b>208</b>A encrypts the SRS data of the illustrative example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Advantageously, the example multiplier circuitry <b>212</b>A performs x25519 modular multiplication in the example 25638 (25519&#x3c;&#x3c;1) domain rather than the 25519 domain used by previous techniques. As a result, the example multiplier circuitry <b>212</b>A requires fewer clock cycles to perform x25519 modular multiplication than previous solutions.</p><p id="p-0048" num="0047">Advantageously, the example frequency scaler circuitry <b>206</b>A instructs the processor circuitry to implement the multiplier circuitry <b>212</b>A on a subset of the total number of cores in the processor circuitry. The subset may include enough cores to enable parallel operations required in the example 25638 (25519&#x3c;&#x3c;1) domain to be executed at requisite performance levels. However, the subset may not include all the cores in the processor circuitry. Because the example device <b>102</b> does not perform modular multiplication in the example 25638 (25519&#x3c;&#x3c;1) domain on every available core, the example frequency scaler circuitry <b>206</b>A can reduce the operating frequency on the remaining cores without negatively impacting the performance of the encryption. Reducing the operating frequency of the remaining cores allows the frequency scaler circuitry <b>206</b>A to increase the frequency of the selected subset of cores without exceeding a power budget. As such, the cores executing modular multiplication in the example 25638 (25519&#x3c;&#x3c;1) domain are overclocked so that each clock cycle occurs in a smaller amount of time than clock cycles in cores executing at a standard operating frequency. Therefore, the amount of time required for the multiplier circuitry <b>212</b>A to compute x25519 modular multiplication is further reduced compared to previous solutions. The reduction of time required to perform x25519 modular multiplication increases the maximum distance the device <b>102</b> can be from the example tower <b>104</b>A while still ensuring that encrypted SRS data does not expire, thereby increasing the coverage and performance of 5G-LTE RANs implemented in accordance with the illustrative example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is an example block diagram of the server of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes the example towers <b>104</b>A, <b>104</b>B, . . . , <b>104</b>-<i>n</i>, and the example server <b>106</b>. The example server <b>106</b> includes example interface circuitry <b>202</b>B, example frequency scaler circuitry <b>206</b>B, example public key acceleration engine <b>208</b>B, and example position calculator circuitry <b>214</b>. The example public key acceleration engine <b>208</b>B includes example controller circuitry <b>210</b>B and example multiplier circuitry <b>212</b>B.</p><p id="p-0050" num="0049">The example interface circuitry <b>202</b>B enables communication between other components of the example server <b>106</b> and external devices. In some examples, the example interface circuitry <b>202</b>B may implement one or more lower layers of the Open Systems Interconnection (OSI) model for communication protocols that may include, but are not limited to, WiFi&#xae;, Bluetooth&#xae;, Near Field Communication (NFC), etc. The example interface circuitry <b>202</b>B receives a computationally expensive task from the external device. In some examples, the interface circuitry <b>202</b>B is instantiated by processor circuitry executing interface instructions and/or configured to perform operations such as those represented by the flowchart of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0051" num="0050">In <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, computationally expensive tasks may include but are not limited to the decryption of SRS data and encryption of position data. The example interface circuitry <b>202</b>B may receive SRS data from both the example device <b>102</b> and from a plurality of other devices. In some examples, the example interface circuitry <b>202</b>B may receive SRS data from thousands of devices. The other devices may communicate with any of the example towers <b>104</b>A, <b>104</b>B, . . . , <b>104</b>-<i>n </i>to receive 5G-LTE positioning data and may be considered additional components of the example computer system <b>100</b>.</p><p id="p-0052" num="0051">The example frequency scaler circuitry <b>206</b>B improves the performance of processor circuitry on the example server <b>106</b> to perform the computationally expensive tasks. To improve the performance of the processor circuitry, the example frequency scaler circuitry <b>206</b>B overclocks a subset of processor cores on the example server <b>106</b> and underclocks the remaining processor cores following the technique described in connection with the example frequency scaler circuitry <b>206</b>A of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0053" num="0052">The subset of cores selected by the example frequency scaler circuitry <b>206</b>B perform the computationally expensive task. In <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, the subset of cores implements at least the example multiplier circuitry <b>212</b>B. In some examples, the subset of cores additionally includes the example controller circuitry <b>210</b>B. The example controller circuitry <b>210</b>B and the example multiplier circuitry <b>212</b>B are collectively referred to as the example public key acceleration engine <b>208</b>B. The example public key acceleration engine <b>208</b>B performs encryption tasks for the example server <b>106</b> according to the teachings of this disclosure. For example, in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, the example public key acceleration engine <b>208</b>B decrypts the SRS data provided by the example interface circuitry <b>202</b>B. The public key acceleration engine <b>208</b>B may also encrypt the position data provided by the example position calculator circuitry <b>214</b>.</p><p id="p-0054" num="0053">Within the example public key acceleration engine <b>208</b>B, the example controller circuitry <b>210</b>B manages the execution of various encryption tasks. For example, in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, the example controller circuitry obtains the encrypted SRS data from the example interface circuitry <b>202</b>B and performs one or more portions of the relevant x25519 algorithms required to decrypt the SRS data. The example controller circuitry <b>210</b>B also provides the decrypted SRS data to the example position calculator circuitry <b>214</b>, obtains position data from the example position calculator circuitry <b>214</b>, encrypts the position data using x25519 algorithms, and provides the encrypted position data to the example interface circuitry <b>202</b>B. The x25519 algorithms include multiple instances of x25519 modular multiplication. When x25519 modular multiplication is required, the example controller circuitry <b>210</b>B provides the necessary inputs to the example multiplier circuitry <b>212</b>B to perform the operation.</p><p id="p-0055" num="0054">The example multiplier circuitry <b>212</b>B performs x25519 modular multiplication according to the teachings of this disclosure. That is, the example multiplier circuitry <b>212</b>B performs modular multiplication in the in the example 25638 (25519&#x3c;&#x3c;1) domain as opposed to the 25519 domain used by previous solutions. In some examples, the multiplier circuitry <b>212</b>B is instantiated by processor circuitry executing multiplier instructions and/or configured to perform operations such as those represented by the flowchart of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0056" num="0055">The example position calculator circuitry <b>214</b> determines uses the SRS data for a given device to determine the position of the device. The example position calculator circuitry <b>214</b> may additionally use other information to determine position as described previously. The example position calculator circuitry <b>214</b> may use any appropriate technique to determine position, including but not limited to triangulation, as described previously.</p><p id="p-0057" num="0056">Advantageously, example frequency scaler circuitry can improve the performance of any number of processor cores to execute computational tasks at any scale. For example, because the example server <b>106</b> may perform SRS decryption, position calculation, and position encryption for thousands of devices, the example server <b>106</b> may include one or more processor devices that collectively include a multitude of processor cores. The number of processor cores in the example server <b>106</b> may be magnitudes greater than the number of processor cores in the example device <b>102</b>. However, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B improve the performance of both the example device <b>102</b> and example server <b>106</b> respectively so that each component of the example computer system <b>100</b> performs x25519 modular multiplication in less time than is required for previous techniques.</p><p id="p-0058" num="0057">Furthermore, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B can improve the performance of any processor architecture to execute any type of computational task. In the illustrative example of <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>2</b>A, <b>2</b>B</figref>, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B may improve the performance of one or more Intel&#xae; Xeon Sapphire Rapids processor to perform x25519 modular multiplication operations in the 25638 (25519&#x3c;&#x3c;1) domain. In other examples, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B may improve the performance of a different type of processor architecture to execute a different computational task.</p><p id="p-0059" num="0058">In some examples, both the example device <b>102</b> and the example server <b>106</b> include means for scaling. For example, the means for scaling may be implemented by frequency scaler circuitry <b>206</b>A, <b>206</b>B. In some examples, the frequency scaler circuitry <b>206</b>A, <b>206</b>B may be instantiated by processor circuitry such as the example processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For instance, the frequency scaler circuitry <b>206</b>A, <b>206</b>B may be instantiated by the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> executing machine executable instructions such as those implemented by at least blocks <b>502</b>-<b>510</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. In some examples, the frequency scaler circuitry <b>206</b>A, <b>206</b>B may be instantiated by hardware logic circuitry, which may be implemented by an ASIC, XPU, or the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> structured to perform operations corresponding to the machine readable instructions. Additionally or alternatively, the frequency scaler circuitry <b>206</b>A, <b>206</b>B may be instantiated by any other combination of hardware, software, and/or firmware. For example, the frequency scaler circuitry <b>206</b>A, <b>206</b>B may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, an XPU, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to execute some or all of the machine readable instructions and/or to perform some or all of the operations corresponding to the machine readable instructions without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example block diagram of the multiplier circuitry of <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref>. The example block diagram of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be used to implement one or more of the example multiplier circuitry <b>212</b>A, <b>212</b>B to perform x25519 modular multiplication using the 25638 (25519&#x3c;&#x3c;1) domain and in accordance with the teachings of this disclosure. The example multiplier circuitry <b>212</b>A, <b>212</b>B each include example interface circuitry <b>301</b>, example &#x2018;A&#x2019; data portions <b>302</b>A, <b>302</b>B, <b>302</b>C, <b>302</b>D, collectively referred to as example &#x2018;A&#x2019; data <b>302</b>, example &#x2018;B&#x2019; data <b>304</b>, example selector circuitry <b>305</b>, example 64&#xd7;265 integer multiplier circuitry <b>306</b>, example multiplier output <b>308</b>, example adder circuitry <b>310</b>, example adder output <b>312</b>, example right shift circuitry <b>314</b>, example left shift circuitry <b>316</b>, <b>318</b>, <b>320</b>, example subtractor circuitry <b>322</b>, <b>324</b>, example multiplexer circuitry <b>326</b>, and example comparator circuitry <b>328</b>.</p><p id="p-0061" num="0060">The x25519 modular multiplication can generally be described by equation (1):</p><p id="p-0062" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>R</i>%<i>Y</i>=(<i>A&#xd7;B</i>)%<i>Y</i>&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0063" num="0061">In equation (1), A refers to a 265-bit input number, B refers to a 265-bit input number, Y refers to a 255-bit modulus parameter used in all x25519 modular multiplication, and R refers to a 255 bit result. The example interface circuitry <b>301</b> receives the values A and B from one of the example controller circuitry <b>210</b>A, <b>210</b>B. The example interface circuitry <b>301</b> may receive values for A and B based on the portion of an x25519 algorithm executed by the corresponding controller circuitry <b>210</b>A, <b>210</b>B.</p><p id="p-0064" num="0062">In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, A in equation (1) is represented as example &#x2018;A&#x2019; data <b>302</b> and is provided to the example multiplier circuitry <b>212</b>A, <b>212</b>B from the corresponding example controller circuitry <b>210</b>A, <b>210</b>B. Similarly, in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, B in equation (1) is represented as example &#x2018;B&#x2019; data <b>304</b> and is provided to the example multiplier circuitry <b>212</b>A, <b>212</b>B from the corresponding example controller circuitry <b>210</b>A, <b>210</b>B.</p><p id="p-0065" num="0063">The example selector circuitry <b>305</b> selects mutually exclusive subsets of bits from the example &#x2018;A&#x2019; data <b>302</b> and provides the subset of bits to the example 64&#xd7;265 integer multiplier circuitry <b>306</b>. For example, in a first compute cycle, the example selector circuitry <b>305</b> may select the example &#x2018;A&#x2019; data portion <b>302</b>A, which contains bits [264:256] of the value A from equation (1), and provide the selection to the example 64&#xd7;265 integer multiplier circuitry <b>306</b>. In a second compute cycle, the example selector circuitry <b>305</b> may select the example &#x2018;A&#x2019; data portion <b>302</b>B, which contains bits [255:192] of the value A, provide the new selection to the example 64&#xd7;265 integer multiplier circuitry <b>306</b>, etc. The example selector circuitry <b>305</b> iteratively selects subsets of bits from the example &#x2018;A&#x2019; data <b>302</b> in subsequent compute cycles until the superset of all subsets provided to the example 64&#xd7;265 integer multiplier circuitry <b>306</b> is all of the example &#x2018;A&#x2019; data <b>302</b>.</p><p id="p-0066" num="0064">The example 64&#xd7;265 integer multiplier circuitry <b>306</b> multiplies all 265 bits in the example &#x2018;B&#x2019; data <b>304</b> to a portion of the example &#x2018;A&#x2019; data <b>302</b>. Specifically, in a first compute cycle, the example 64&#xd7;265 integer multiplier circuitry <b>306</b> multiplies the example &#x2018;B&#x2019; data <b>304</b> to example &#x2018;A&#x2019; data portion <b>302</b>A. In a second compute cycle, the example 64&#xd7;265 integer multiplier circuitry <b>306</b> multiplies the example &#x2018;B&#x2019; data <b>304</b> to the example &#x2018;A&#x2019; data portion <b>302</b>B, etc.</p><p id="p-0067" num="0065">The example multiplier output <b>308</b> is an amount of memory that stores the output of the example 64&#xd7;265 integer multiplier circuitry <b>306</b> after each compute cycle. The values stored by the example multiplier output <b>308</b> can be described by equations (2), (3), (4), (5), (6):</p><p id="p-0068" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i><sub>0</sub>[273:0]=<i>A</i>[264:256]&#xd7;<i>B</i>[264:0]&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0069" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i><sub>1</sub>[328:0]=<i>A</i>[255:192]&#xd7;<i>B</i>[264:0]&#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0070" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i><sub>2</sub>[32 8:0]=<i>A</i>[191:128]&#xd7;<i>B</i>[264:0]&#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0071" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i><sub>3</sub>[32 8:0]=<i>A</i>[127:64]&#xd7;<i>B</i>[264:0]&#x2003;&#x2003;(5)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0072" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i><sub>4</sub>[328:0]=<i>A</i>[63:0]&#xd7;<i>B</i>[264:0]&#x2003;&#x2003;(6)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0073" num="0066">The example multiplier output <b>308</b> stores the values M<sub>0</sub>, M<sub>1</sub>, M<sub>2</sub>, M<sub>3</sub>, M<sub>4 </sub>in subsequent compute cycles. For example, the example multiplier output <b>308</b> stores M<sub>0 </sub>during a first compute cycle after the 64&#xd7;265 integer multiplier circuitry <b>306</b> performs the operations described in equation (2). The example multiplier output <b>308</b> then stores M<sub>1 </sub>during a second compute cycle after the 64&#xd7;265 integer multiplier circuitry <b>306</b> performs the operations described in equation (3), etc.</p><p id="p-0074" num="0067">In an example nth compute cycle, the example adder circuitry <b>310</b> performs a summation of a value stored in the multiplier output <b>308</b> during the nth compute cycle, the output of the example left shift circuitry <b>318</b>, and output of the example left shift circuitry <b>320</b>. In turn, the example adder output <b>312</b> is an amount of memory that stores the output of the example adder circuitry <b>310</b> after each compute cycle. Both of the example left shift circuitry <b>318</b>, <b>320</b> perform operations that use values generated in the (n&#x2212;1)th compute cycle. Therefore, the initial condition that occurs during the first compute cycle of a x25519 modular multiplication can be described by equation (7):</p><p id="p-0075" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>C</i><sub>0</sub><i>&#x2212;M</i><sub>0</sub>&#x2003;&#x2003;(7)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0076" num="0068">In equation (7), C<sub>0 </sub>is the value stored by the example adder output <b>312</b> during the first compute cycle. The values stored by the example adder output <b>312</b> during the subsequent compute cycles, which are referred to in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as C<sub>1</sub>, C<sub>2</sub>, C<sub>3</sub>, and C<sub>4 </sub>are discussed further below.</p><p id="p-0077" num="0069">In a given compute cycle, the example right shift circuitry <b>314</b> right shifts the value stored in the adder output <b>312</b> during the previous compute cycle by 256 bits. During a right shift, excess bits shifted off to the right are discarded. If the operand is unsigned, the example right shift circuitry <b>314</b> may shift &#x2018;0&#x2019; bits in from the left. If the operand is signed, the example right shift circuitry <b>314</b> may shift copies of the signed bit in from the left. The example right shift circuitry <b>314</b> removes the 256 lest significant bits from the value stored in the adder output <b>312</b> during the previous compute cycle. For example, during the second compute cycle, the example right shift circuitry <b>314</b> may produce a 274-bit value. In such examples, bits [18:0] of the output of the example right shift circuitry <b>314</b> would equal to M<sub>0</sub>[273:256], while bits [273:19] of the output would be either &#x2018;0&#x2019; or a signed bit. In subsequent operations that use C<sub>1</sub>, C<sub>2</sub>, C<sub>3</sub>, and C<sub>4 </sub>as an input, the example right shift circuitry <b>314</b> may produce an output that includes a different number of bits.</p><p id="p-0078" num="0070">The example left shift circuitry <b>316</b> performs three left shift operations in parallel. The example left shift circuitry <b>316</b> obtains the output of the example right shift circuitry <b>314</b> and left shifts the output by three different amounts such that the resulting values are mathematically equivalent to a multiplication of the output of the example right shift circuitry <b>314</b> by 38. The example left shift circuitry <b>316</b> performs the 38 multiplication by leveraging the fact that a single left shift of an operation by n bits is equivalent to multiplying the operand by 2<sup>n</sup>. Therefore, the example left shift circuitry <b>316</b> performs a first left shift by 1 bit, multiplying the output of the example right shift circuitry <b>314</b> by 2, a second left shift by 2 bits, multiplying the output of the example right shift circuitry <b>314</b> by 4, and a third left shift by 5, multiplying the output of the example right shift circuitry <b>314</b> by 32. When the three results of the example left shift circuitry <b>316</b> are summed by the example adder circuitry <b>310</b>, the result is a multiplication of the example right shift circuitry <b>314</b> by 38.</p><p id="p-0079" num="0071">The example left shift circuitry <b>318</b> left shifts each output of the example left shift circuitry <b>316</b> by 64 bits. In performing the left shift, the example left shift circuitry <b>318</b> removes the 64 most significant bits from the output of the example left shift circuitry <b>316</b>. The output of the example left shift circuitry <b>318</b> can be generalized in equation (8):</p><p id="p-0080" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>left shift(318)<sub>n</sub>=((<i>C</i><sub>n-1</sub>&#x3e;&#x3e;256)&#xd7;38)&#x3c;&#x3c;64&#x2003;&#x2003;(8)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0081" num="0072">In equation (8), left shift (<b>318</b>)<sub>n </sub>refers to the output of the example left shift circuitry <b>318</b> during an nth compute cycle, (C<sub>n-1</sub>&#x3e;&#x3e;256) is the output of the example right shift circuitry <b>314</b> during the nth compute cycle, the multiplication by 38 is performed by the example left shift circuitry <b>316</b>, and the left shift by 64 bits is performed by the example left shift circuitry <b>318</b>.</p><p id="p-0082" num="0073">The example left shift circuitry <b>320</b> left shifts a portion of the values stored in the example adder output <b>312</b> during the previous clock cycle. The output of the example left shift circuitry <b>320</b> can be generalized in equation (9):</p><p id="p-0083" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>left shift(320)<sub>n</sub><i>=C</i><sub>n-1</sub>[255:0]&#x3c;&#x3c;64&#x2003;&#x2003;(8)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0084" num="0074">In equation (9), left shift (<b>320</b>)<sub>n </sub>refers to the output of the example left shift circuitry <b>320</b> during an nth compute cycle, C<sub>n-1</sub>[255:0] refers to the 256 most significant bits of the value stored in the example adder output <b>312</b> during the (n&#x2212;1)th compute cycle. As an initial condition, the example left shift circuitry <b>320</b> may not produce an output in the first compute cycle. The example left shift circuitry <b>320</b> may perform the left shift operation described in equation (9) in parallel with when the left shift circuitry <b>318</b> performs the left shift operation described in equation (8).</p><p id="p-0085" num="0075">In an example nth compute cycle, the example adder circuitry <b>310</b> performs a summation of a value stored in the multiplier output <b>308</b> during the nth compute cycle, the output of the example left shift circuitry <b>318</b>, and output of the example left shift circuitry <b>320</b>. Therefore, not including the initial condition provided in equation (7) or the exit condition described below, the output of the example adder circuitry <b>310</b> in intermediate compute cycles can be generalized in equation (10):</p><p id="p-0086" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>C</i><sub>n</sub>=((((<i>C</i><sub>n-1</sub>&#x3e;&#x3e;256)&#xd7;38)+<i>C</i><sub>n-1</sub>[255:0])&#x3c;&#x3c;64)+<i>M</i><sub>n</sub>&#x2003;&#x2003;(10)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0087" num="0076">In the sixth compute cycle, the example adder circuitry <b>310</b> determines the value C<sub>5</sub>. The value C<sub>5 </sub>is determined because in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, indexing of the variables C and M begin at 0 while indexing of compute cycles begins at 1. While equation (10) indicates C<sub>5 </sub>would be based on a hypothetical M<sub>5 </sub>term, in practice, the example 64&#xd7;265 integer multiplier circuitry <b>306</b> does not produce such a M<sub>5 </sub>term because each segment of the example &#x2018;A&#x2019; data portions <b>302</b>A, <b>302</b>B, <b>302</b>C, <b>302</b>D, <b>302</b>E was multiplied to the example &#x2018;B&#x2019; data <b>304</b> and stored as variables M<sub>0</sub>, M<sub>1</sub>, M<sub>2</sub>, M<sub>3</sub>, M<sub>4</sub>. Furthermore, because M<sub>5 </sub>does not exist, neither of the example left shift circuitry <b>318</b>, <b>320</b> need to left shift their respective inputs to align with M<sub>5</sub>. As such, the value computed by the example adder circuitry <b>310</b> during the sixth compute cycle, which may also be referred to as an exit condition, is given in equation (11):</p><p id="p-0088" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>C</i><sub>5</sub>=((<i>C</i><sub>4</sub>&#x3e;&#x3e;256)&#xd7;38)+<i>C</i><sub>4</sub>[255:0]&#x2003;&#x2003;(11)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0089" num="0077">The example subtractor circuitry <b>322</b> subtracts the Y parameter from the last value stored in the example adder output <b>312</b>, C<sub>5</sub>. Similarly, the example subtractor circuitry <b>324</b> subtracts the term (2&#xd7;Y) from C<sub>5</sub>. Both of the example subtractor circuitry <b>322</b>, <b>324</b> may obtain the static value of Y from the corresponding controller circuitry <b>210</b>A, <b>210</b>B, or from a portion of memory within the corresponding one of the example device <b>102</b> or server <b>106</b>.</p><p id="p-0090" num="0078">The example multiplexer circuitry <b>326</b> obtains the output of the example subtractor circuitry <b>322</b>, C<sub>5</sub>&#x2212;Y, the value C<sub>4 </sub>from the example adder output <b>312</b>, and the output of the example subtractor circuitry <b>324</b>, C<sub>5</sub>&#x2212;2Y. The example multiplexer circuitry <b>326</b> provides one of its inputs as R, the result of the example modular multiplication, to the corresponding example controller circuitry <b>210</b>A, <b>210</b>B. The example multiplexer circuitry <b>326</b> determines which input to provide as R based on comparisons made by the example comparator circuitry <b>328</b>.</p><p id="p-0091" num="0079">The example <b>328</b> obtains the same inputs as the example multiplexer circuitry <b>326</b> and performs one or more comparisons in accordance with the teachings of this disclosure and the 25638 (25519&#x3c;&#x3c;1) domain to determine which of the previous terms should be provided to the example controller circuitry <b>210</b>A, <b>210</b>B as R, the result of the example modular multiplication. The one or more comparisons performed by the example comparator circuitry <b>328</b> are described in equation (12):</p><p id="p-0092" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>R</i>=(<i>C</i><sub>5</sub><i>&#x3e;Y</i>)?((<i>C</i><sub>5</sub><i>&#x2212;Y</i>)&#x3e;<i>Y</i>?(<i>C</i><sub>5</sub>&#x2212;2<i>Y</i>):(<i>C</i><sub>5</sub><i>&#x2212;Y</i>)):<i>C</i><sub>4</sub>&#x2003;&#x2003;(12)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0093" num="0080">Equation (12) indicates that if (C<sub>5</sub>&#x2264;Y), the example comparator circuitry <b>328</b> instructs the multiplexer circuitry <b>326</b> to provide R=C<sub>4 </sub>to the example controller circuitry <b>210</b>A, <b>210</b>B. If (C<sub>5</sub>&#x3e;Y), the example comparator circuitry <b>328</b> performs further comparisons. For example, if (C<sub>5</sub>&#x2212;Y)&#x3e;Y, the example comparator circuitry <b>328</b> instructs the multiplexer circuitry <b>326</b> to provide R=(C<sub>5</sub>&#x2212;2Y) to the example controller circuitry <b>210</b>A, <b>210</b>B. However, if (C<sub>5</sub>&#x2212;Y)&#x2264;Y, the example comparator circuitry <b>328</b> instructs the multiplexer circuitry <b>326</b> to provide R=(C<sub>5</sub>&#x2212;Y) to the example controller circuitry <b>210</b>A, <b>210</b>B.</p><p id="p-0094" num="0081">Advantageously, the example multiplier circuitry <b>212</b>A, <b>212</b>B breaks the first multiplication of A&#xd7;B into partial multiplications and computes the reduction steps in parallel. For example, one of the reduction steps for modular multiplication includes multiplication of (C<sub>n-1</sub>&#x3e;&#x3e;256) by an integer. Modular multiplication in the example 25638 (25519&#x3c;&#x3c;1) domain includes a multiplication by 38 for the reduction step because 38 can be decomposed into 2<sup>1</sup>+2<sup>2</sup>+2<sup>5</sup>. As a result, multiplication by 38 can be computed by three left shift operations in parallel. In contrast, modular multiplication in the previous 25519 domain may not use parallel bit shift operations to compute a multiplication by 19. As a result, previous solutions to perform modular multiplication may perform more operations sequentially during the reduction step than the example multiplier circuitry <b>212</b>A, <b>212</b>B. Accordingly, previous solutions may require longer amounts of time to perform the reduction step than the example multiplier circuitry <b>212</b>A, <b>212</b>B.</p><p id="p-0095" num="0082">Advantageously, in the example 25638 (25519&#x3c;&#x3c;1) domain, shift and add operations are also calculated in parallel with the partial multiplications. As a result, the example multiplier circuitry <b>212</b>A, <b>212</b>B can perform the x25519 modular multiplication given by equation (1) in six compute cycles as described in Table 1 below.</p><p id="p-0096" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>example 25638 (25519 &#x3c;&#x3c; 1) domain</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="112pt" align="left"/><colspec colname="3" colwidth="56pt" align="center"/><tbody valign="top"><row><entry/><entry/><entry>Cycles</entry></row><row><entry>Cycle #</entry><entry>Operation</entry><entry>Required</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>1</entry><entry>M<sub>0</sub>[273:0] = A[264:256] &#xd7; B[264:0]</entry><entry>1</entry></row><row><entry/><entry>C<sub>0 </sub>= M<sub>0</sub></entry></row><row><entry>2</entry><entry>M<sub>1</sub>[328:0] = A[255:192] &#xd7; B[264:0]</entry><entry>1</entry></row><row><entry/><entry>C<sub>1 </sub>= ((((C<sub>0</sub>&#x3e;&#x3e;256) &#xd7; 38) +</entry></row><row><entry/><entry>C<sub>0</sub>[255:0]) &#x3c;&#x3c; 64) + M<sub>1</sub></entry></row><row><entry>3</entry><entry>M<sub>2</sub>[328:0] = A[191:128] &#xd7; B[264:0]</entry><entry>1</entry></row><row><entry/><entry>C<sub>2 </sub>= ((((C<sub>1</sub>&#x3e;&#x3e;256) &#xd7; 38) +</entry></row><row><entry/><entry>C<sub>1</sub>[255:0]) &#x3c;&#x3c; 64) + M<sub>2</sub></entry></row><row><entry>4</entry><entry>M<sub>3</sub>[328:0] = A[127:64] &#xd7; B[264:0]</entry><entry>1</entry></row><row><entry/><entry>C<sub>3 </sub>= ((((C<sub>2</sub>&#x3e;&#x3e;256) &#xd7; 38) +</entry></row><row><entry/><entry>C<sub>2</sub>[255:0]) &#x3c;&#x3c; 64) + M<sub>3</sub></entry></row><row><entry>5</entry><entry>M<sub>4</sub>[328:0] = A[63:0] &#xd7; B[264:0]</entry><entry>1</entry></row><row><entry/><entry>C<sub>4 </sub>= ((((C<sub>3</sub>&#x3e;&#x3e;256] &#xd7; 38) +</entry></row><row><entry/><entry>C<sub>3</sub>[255:0]) &#x3c;&#x3c; 64) + M<sub>4</sub></entry></row><row><entry>6</entry><entry>C<sub>5 </sub>= ((C4 &#x3e;&#x3e; 256) &#xd7; 38) + C<sub>4</sub>[255:0]</entry><entry>1</entry></row><row><entry/><entry>R = (C<sub>5 </sub>&#x3e; Y) ? ((C<sub>5 </sub>&#x2212; Y) &#x3e; Y) ?</entry></row><row><entry/><entry>(C<sub>5 </sub>&#x2212; (2 &#xd7; Y):(C<sub>5 </sub>&#x2212; Y)):C<sub>4</sub></entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0097" num="0083">In contrast, the previous solutions that use the 25519 domain may require 19 or more compute cycles to perform x25519 modular multiplication, as described in Table 2 below.</p><p id="p-0098" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>25519 domain</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="112pt" align="left"/><colspec colname="3" colwidth="56pt" align="center"/><tbody valign="top"><row><entry/><entry/><entry>Cycles</entry></row><row><entry>Cycle #</entry><entry>Operation</entry><entry>Required</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>1</entry><entry>M<sub>0</sub>[529:0] = A[264:0] &#xd7; B[264:0]</entry><entry>6</entry></row><row><entry>7</entry><entry>M<sub>1</sub>[269:0] = M<sub>0</sub>[529:265] &#xd7; 19</entry><entry>6</entry></row><row><entry>13&#x2002;</entry><entry>C<sub>0</sub>[279:0] = (M<sub>1</sub>[269:0] &#x3c;&#x3c; 10) +</entry><entry>&#x3c;&#x3c;10&#x2003;&#x2002;</entry></row><row><entry/><entry>M<sub>0</sub>[264:0]</entry></row><row><entry>13+</entry><entry>M<sub>2</sub>[29:0] = C<sub>0</sub>[279:255] &#xd7; 19</entry><entry>6</entry></row><row><entry>19+</entry><entry>C<sub>1</sub>[255:0] = M2[29:0] + C<sub>0</sub>[254:0]</entry><entry>1</entry></row><row><entry/><entry>R = (C<sub>1 </sub>&#x3e; Y) ? (C<sub>1 </sub>&#x2212; Y):C<sub>1</sub></entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0099" num="0084">The example multiplier circuitry <b>212</b>A, <b>212</b>B may compute x25519 in fewer compute cycles than previous solutions, improving the efficiency of computationally expensive tasks that include x25519 algorithms. For example, in the example computer system <b>100</b>, the example device <b>102</b> may be positioned further away from the example tower <b>104</b>A than a second device that use 25519 domain modular multiplication, while the example device <b>102</b> and the second device produce unexpired, encrypted SRS data.</p><p id="p-0100" num="0085">In some examples, the example multiplier circuitry <b>212</b>A, <b>212</b>B may segment the example &#x2018;A&#x2019; data <b>302</b> into different portions of data than described previously. In such examples, the number of compute cycles required to compute modular multiplication in the 25638 (25519&#x3c;&#x3c;1) domain may be a value other than six. For example, multiplier circuitry <b>212</b>A, <b>212</b>B that segments the example &#x2018;A&#x2019; data into n segments may compute modular multiplication in the 25638 (25519&#x3c;&#x3c;1) domain using (n+1) compute cycles.</p><p id="p-0101" num="0086">In some examples, both the example device <b>102</b> and the example server <b>106</b> include means for receiving a first value and a second value. For example, the means for receiving may be implemented by interface circuitry <b>301</b>. In some examples, the interface circuitry <b>301</b> may be instantiated by processor circuitry such as the example processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For instance, the interface circuitry <b>301</b> may be instantiated by the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> executing machine executable instructions such as those implemented by at least blocks <b>602</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In some examples, the interface circuitry <b>301</b> may be instantiated by hardware logic circuitry, which may be implemented by an ASIC, XPU, or the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> structured to perform operations corresponding to the machine readable instructions. Additionally or alternatively, the interface circuitry <b>301</b> may be instantiated by any other combination of hardware, software, and/or firmware. For example, the interface circuitry <b>301</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, an XPU, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to execute some or all of the machine readable instructions and/or to perform some or all of the operations corresponding to the machine readable instructions without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0102" num="0087">In some examples, both the example device <b>102</b> and example server <b>106</b> include means for selecting a subset of bits. For example, the means for selecting may be implemented by selector circuitry <b>305</b>. In some examples, the selector circuitry <b>305</b> may be instantiated by processor circuitry such as the example processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For instance, the selector circuitry <b>305</b> may be instantiated by the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> executing machine executable instructions such as those implemented by at least blocks <b>604</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In some examples, the selector circuitry <b>305</b> may be instantiated by hardware logic circuitry, which may be implemented by an ASIC, XPU, or the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> structured to perform operations corresponding to the machine readable instructions. Additionally or alternatively, the selector circuitry <b>305</b> may be instantiated by any other combination of hardware, software, and/or firmware. For example, the selector circuitry <b>305</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, an XPU, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to execute some or all of the machine readable instructions and/or to perform some or all of the operations corresponding to the machine readable instructions without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0103" num="0088">In some examples, both the example device <b>102</b> and the example server <b>106</b> include means for multiplying. For example, the means for multiplying may be implemented by 64&#xd7;265 integer multiplier circuitry <b>306</b>. In some examples, the 64&#xd7;265 integer multiplier circuitry <b>306</b> may be instantiated by processor circuitry such as the example processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For instance, the 64&#xd7;265 integer multiplier circuitry <b>306</b> may be instantiated by the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> executing machine executable instructions such as those implemented by at least blocks <b>608</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In some examples, the 64&#xd7;265 integer multiplier circuitry <b>306</b> may be instantiated by hardware logic circuitry, which may be implemented by an ASIC, XPU, or the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> structured to perform operations corresponding to the machine readable instructions. Additionally or alternatively, the 64&#xd7;265 integer multiplier circuitry <b>306</b> may be instantiated by any other combination of hardware, software, and/or firmware. For example, the 64&#xd7;265 integer multiplier circuitry <b>306</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, an XPU, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to execute some or all of the machine readable instructions and/or to perform some or all of the operations corresponding to the machine readable instructions without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0104" num="0089">In some examples, both the example device <b>102</b> and example server <b>106</b> include means for performing a plurality of bitwise shift operations. For example, the means for performing a plurality of bitwise shift operations may be implemented by right shift circuitry <b>314</b>, and left shift circuitry <b>316</b>, <b>318</b>, <b>320</b>. In some examples, the right shift circuitry <b>314</b>, and left shift circuitry <b>316</b>, <b>318</b>, <b>320</b> may be instantiated by processor circuitry such as the example processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For instance, right shift circuitry <b>314</b>, and left shift circuitry <b>316</b>, <b>318</b>, <b>320</b> may be instantiated by the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> executing machine executable instructions such as those implemented by at least blocks <b>610</b>-<b>616</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In some examples, the right shift circuitry <b>314</b>, and left shift circuitry <b>316</b>, <b>318</b>, <b>320</b> may be instantiated by hardware logic circuitry, which may be implemented by an ASIC, XPU, or the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> structured to perform operations corresponding to the machine readable instructions. Additionally or alternatively, the right shift circuitry <b>314</b>, and left shift circuitry <b>316</b>, <b>318</b>, <b>320</b> may be instantiated by any other combination of hardware, software, and/or firmware. For example, the right shift circuitry <b>314</b>, and left shift circuitry <b>316</b>, <b>318</b>, <b>320</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, an XPU, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to execute some or all of the machine readable instructions and/or to perform some or all of the operations corresponding to the machine readable instructions without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0105" num="0090">In some examples, both the example multiplier circuitry <b>212</b>A, <b>212</b>B includes means for adding. For example, the means for adding may be implemented by adder circuitry <b>310</b>. In some examples, the adder circuitry <b>310</b> may be instantiated by processor circuitry such as the example processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For instance, the adder circuitry <b>310</b> may be instantiated by the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> executing machine executable instructions such as those implemented by at least blocks <b>618</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In some examples, the adder circuitry <b>310</b> may be instantiated by hardware logic circuitry, which may be implemented by an ASIC, XPU, or the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> structured to perform operations corresponding to the machine readable instructions. Additionally or alternatively, the adder circuitry <b>310</b> may be instantiated by any other combination of hardware, software, and/or firmware. For example, the adder circuitry <b>310</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, an XPU, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to execute some or all of the machine readable instructions and/or to perform some or all of the operations corresponding to the machine readable instructions without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0106" num="0091">In some examples, both the example device <b>102</b> and the example server <b>106</b> include means for comparing. For example, the means for comparing may be implemented by comparator circuitry <b>328</b>. In some examples, the comparator circuitry <b>328</b> may be instantiated by processor circuitry such as the example processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For instance, the comparator circuitry <b>328</b> may be instantiated by the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> executing machine executable instructions such as those implemented by at least blocks <b>622</b>, <b>628</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In some examples, the comparator circuitry <b>328</b> may be instantiated by hardware logic circuitry, which may be implemented by an ASIC, XPU, or the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> structured to perform operations corresponding to the machine readable instructions. Additionally or alternatively, the comparator circuitry <b>328</b> may be instantiated by any other combination of hardware, software, and/or firmware. For example, the comparator circuitry <b>328</b> may be implemented by at least one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, an XPU, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to execute some or all of the machine readable instructions and/or to perform some or all of the operations corresponding to the machine readable instructions without executing software or firmware, but other structures are likewise appropriate.</p><p id="p-0107" num="0092"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an illustrative example of operations performed by the frequency scaler circuitry of <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref>. <figref idref="DRAWINGS">FIG. <b>4</b></figref> includes example cores <b>402</b> and an example table <b>404</b> to describe frequency scaling within an Intel&#xae; Sapphire Rapids processor.</p><p id="p-0108" num="0093">The example frequency scaler circuitry <b>206</b>A, <b>206</b>B receives one or more computationally expensive tasks and determines how many of the total number of processor cores in the device can be dedicated to the tasks. The example cores <b>402</b> represent the number of cores that the example frequency scaler circuitry <b>206</b>A, <b>206</b>B selects to perform the one or more computationally expensive tasks. The example frequency scaler circuitry may determine the number of cores based on a power budget. As used above and herein, a power budget refers to an amount of power that device level software (such as an operating system) determines can be allocated for use to perform the computationally expensive task.</p><p id="p-0109" num="0094">In the illustrative example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the example cores <b>402</b> represent 48 of the 56 total cores that an Intel&#xae; Sapphire Rapids processor may implement. In other examples of frequency scaling with other types of processors, the example cores <b>402</b> may represent a different portion of a different total number of cores. In the illustrative example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B further assigns one half of the example cores <b>402</b> to execute a first computationally expensive task and assigns the other half of the example cores <b>402</b> to execute a second computationally expensive task. The first computationally expensive task of <figref idref="DRAWINGS">FIG. <b>4</b></figref> includes the execution Advanced Vector Extensions (AVX) instruction sets and implement ECC functionality, and the second computationally expensive task of <figref idref="DRAWINGS">FIG. <b>4</b></figref> includes the execution of Streaming SIMD Extensions (SSE) instruction sets.</p><p id="p-0110" num="0095">The example table <b>404</b> describes how the example frequency scaler circuitry <b>206</b>A, <b>206</b>B increases the operating frequency of the example cores <b>402</b> while maintaining a power budget. The x axis of the example table <b>404</b> shows relative frequencies that the 24 ECC/AVX dedicated cores could operate at, as well as the power per core that operating at such a frequency would cost. For example, a value of the x axis values of Freq=1.24, p/core=2.341 means that if the example frequency scaler circuitry <b>206</b>A, <b>206</b>B overclocks the ECC/AVX dedicated cores to 124% of their normal operating frequency, each of the ECC/AVX cores would consume 234.1% more power than they would if operating at a normal operating frequency. Similarly, the y axis of the example table <b>404</b> shows relative frequencies that the 24 SSE dedicated cores could operate at, as well as the power per core that operating at such a frequency would cost.</p><p id="p-0111" num="0096">At the intersection of a first frequency/power combination for the ECC/AVX dedicated cores and a second frequency/power combination for the SSE dedicated cores, the example table <b>404</b> includes a value that represents the total amount of power, in Watts, that may be consumed by the Intel&#xae; Sapphire Rapids processor. For example, the combination of Freq=1.24, p/core=2.341 for the ECC/AVX dedicated cores and Freq=3.00, p/core=3.903 for the SSE dedicated cores may result in the example processor consuming approximately 184 W of power.</p><p id="p-0112" num="0097">In the illustrative example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the example Intel&#xae; Sapphire Rapids processor is implemented in a device that requires the processor consume 185 W or less at any given time. Therefore, within the example table <b>404</b>, the example frequency configurations <b>406</b> satisfy a power threshold while the example frequency configurations <b>408</b> fail to satisfy the threshold. As such, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B may overclock the selected 48 cores using any of the example frequency configurations <b>406</b>. Such frequency configurations decrease the amount of time required to complete the ECC/AVX and SSE operations and also satisfy an example power budget. In some examples, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B may also decrease the operating frequency of the nine cores not selected for ECC/AVX or SSE operations to satisfy the example power budget.</p><p id="p-0113" num="0098">While an example manner of implementing the device <b>102</b> and server <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref> respectively, one or more of the elements, processes, and/or devices illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref> may be combined, divided, re-arranged, omitted, eliminated, and/or implemented in any other way. Further, the example interface circuitry <b>202</b>A, <b>202</b>B, the example SRS calculator circuitry <b>204</b>, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B, the example controller circuitry <b>210</b>A, <b>210</b>B, the example multiplier circuitry <b>212</b>A, <b>212</b>B, the example position calculator circuitry <b>214</b>, and/or, more generally, the example device <b>102</b> and example server <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, may be implemented by hardware alone or by hardware in combination with software and/or firmware. Thus, for example, any of the example interface circuitry <b>202</b>A, <b>202</b>B, the example SRS calculator circuitry <b>204</b>, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B, the example controller circuitry <b>210</b>A, <b>210</b>B, the example multiplier circuitry <b>212</b>A, <b>212</b>B, the example position calculator circuitry <b>214</b>, and/or, more generally, the example device <b>102</b> and example server <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, could be implemented by processor circuitry, analog circuit(s), digital circuit(s), logic circuit(s), programmable processor(s), programmable microcontroller(s), graphics processing unit(s) (GPU(s)), digital signal processor(s) (DSP(s)), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)), and/or field programmable logic device(s) (FPLD(s)) such as Field Programmable Gate Arrays (FPGAs). Further still, the example device <b>102</b> and example server <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may both include one or more elements, processes, and/or devices in addition to, or instead of, those illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref>, and/or may include more than one of any or all of the illustrated elements, processes and devices.</p><p id="p-0114" num="0099">A flowchart representative of example machine readable instructions, which may be executed to configure processor circuitry to implement the example device <b>102</b> and/or the example server <b>106</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A, <b>2</b>B</figref>, respectively, is shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The machine readable instructions may be one or more executable programs or portion(s) of an executable program for execution by processor circuitry, such as the processor circuitry <b>712</b> shown in the example processor platform <b>700</b> discussed below in connection with <figref idref="DRAWINGS">FIG. <b>7</b></figref> and/or the example processor circuitry discussed below in connection with <figref idref="DRAWINGS">FIGS. <b>7</b> and/or <b>8</b></figref>. The program may be embodied in software stored on one or more non-transitory computer readable storage media such as a compact disk (CD), a floppy disk, a hard disk drive (HDD), a solid-state drive (SSD), a digital versatile disk (DVD), a Blu-ray disk, a volatile memory (e.g., Random Access Memory (RAM) of any type, etc.), or a non-volatile memory (e.g., electrically erasable programmable read-only memory (EEPROM), FLASH memory, an HDD, an SSD, etc.) associated with processor circuitry located in one or more hardware devices, but the entire program and/or parts thereof could alternatively be executed by one or more hardware devices other than the processor circuitry and/or embodied in firmware or dedicated hardware. The machine readable instructions may be distributed across multiple hardware devices and/or executed by two or more hardware devices (e.g., a server and a client hardware device). For example, the client hardware device may be implemented by an endpoint client hardware device (e.g., a hardware device associated with a user) or an intermediate client hardware device (e.g., a radio access network (RAN)) gateway that may facilitate communication between a server and an endpoint client hardware device). Similarly, the non-transitory computer readable storage media may include one or more mediums located in one or more hardware devices. Further, although the example program is described with reference to the flowchart illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, many other methods of implementing the example device <b>102</b> and/or server <b>106</b> may alternatively be used. For example, the order of execution of the blocks may be changed, and/or some of the blocks described may be changed, eliminated, or combined. Additionally or alternatively, any or all of the blocks may be implemented by one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware. The processor circuitry may be distributed in different network locations and/or local to one or more hardware devices (e.g., a single-core processor (e.g., a single core central processor unit (CPU)), a multi-core processor (e.g., a multi-core CPU, an XPU, etc.) in a single machine, multiple processors distributed across multiple servers of a server rack, multiple processors distributed across one or more server racks, a CPU and/or a FPGA located in the same package (e.g., the same integrated circuit (IC) package or in two or more separate housings, etc.).</p><p id="p-0115" num="0100">The machine readable instructions described herein may be stored in one or more of a compressed format, an encrypted format, a fragmented format, a compiled format, an executable format, a packaged format, etc. Machine readable instructions as described herein may be stored as data or a data structure (e.g., as portions of instructions, code, representations of code, etc.) that may be utilized to create, manufacture, and/or produce machine executable instructions. For example, the machine readable instructions may be fragmented and stored on one or more storage devices and/or computing devices (e.g., servers) located at the same or different locations of a network or collection of networks (e.g., in the cloud, in edge devices, etc.). The machine readable instructions may require one or more of installation, modification, adaptation, updating, combining, supplementing, configuring, decryption, decompression, unpacking, distribution, reassignment, compilation, etc., in order to make them directly readable, interpretable, and/or executable by a computing device and/or other machine. For example, the machine readable instructions may be stored in multiple parts, which are individually compressed, encrypted, and/or stored on separate computing devices, wherein the parts when decrypted, decompressed, and/or combined form a set of machine executable instructions that implement one or more operations that may together form a program such as that described herein.</p><p id="p-0116" num="0101">In another example, the machine readable instructions may be stored in a state in which they may be read by processor circuitry, but require addition of a library (e.g., a dynamic link library (DLL)), a software development kit (SDK), an application programming interface (API), etc., in order to execute the machine readable instructions on a particular computing device or other device. In another example, the machine readable instructions may need to be configured (e.g., settings stored, data input, network addresses recorded, etc.) before the machine readable instructions and/or the corresponding program(s) can be executed in whole or in part. Thus, machine readable media, as used herein, may include machine readable instructions and/or program(s) regardless of the particular format or state of the machine readable instructions and/or program(s) when stored or otherwise at rest or in transit.</p><p id="p-0117" num="0102">The machine readable instructions described herein can be represented by any past, present, or future instruction language, scripting language, programming language, etc. For example, the machine readable instructions may be represented using any of the following languages: C, C++, Java, C #, Perl, Python, JavaScript, HyperText Markup Language (HTML), Structured Query Language (SQL), Swift, etc.</p><p id="p-0118" num="0103">As mentioned above, the example operations of <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be implemented using executable instructions (e.g., computer and/or machine readable instructions) stored on one or more non-transitory computer and/or machine readable media such as optical storage devices, magnetic storage devices, an HDD, a flash memory, a read-only memory (ROM), a CD, a DVD, a cache, a RAM of any type, a register, and/or any other storage device or storage disk in which information is stored for any duration (e.g., for extended time periods, permanently, for brief instances, for temporarily buffering, and/or for caching of the information). As used herein, the terms non-transitory computer readable medium, non-transitory computer readable storage medium, non-transitory machine readable medium, and non-transitory machine readable storage medium are expressly defined to include any type of computer readable storage device and/or storage disk and to exclude propagating signals and to exclude transmission media. As used herein, the terms &#x201c;computer readable storage device&#x201d; and &#x201c;machine readable storage device&#x201d; are defined to include any physical (mechanical and/or electrical) structure to store information, but to exclude propagating signals and to exclude transmission media. Examples of computer readable storage devices and machine readable storage devices include random access memory of any type, read only memory of any type, solid state memory, flash memory, optical discs, magnetic disks, disk drives, and/or redundant array of independent disks (RAID) systems. As used herein, the term &#x201c;device&#x201d; refers to physical structure such as mechanical and/or electrical equipment, hardware, and/or circuitry that may or may not be configured by computer readable instructions, machine readable instructions, etc., and/or manufactured to execute computer readable instructions, machine readable instructions, etc.</p><p id="p-0119" num="0104">&#x201c;Including&#x201d; and &#x201c;comprising&#x201d; (and all forms and tenses thereof) are used herein to be open ended terms. Thus, whenever a claim employs any form of &#x201c;include&#x201d; or &#x201c;comprise&#x201d; (e.g., comprises, includes, comprising, including, having, etc.) as a preamble or within a claim recitation of any kind, it is to be understood that additional elements, terms, etc., may be present without falling outside the scope of the corresponding claim or recitation. As used herein, when the phrase &#x201c;at least&#x201d; is used as the transition term in, for example, a preamble of a claim, it is open-ended in the same manner as the term &#x201c;comprising&#x201d; and &#x201c;including&#x201d; are open ended. The term &#x201c;and/or&#x201d; when used, for example, in a form such as A, B, and/or C refers to any combination or subset of A, B, C such as (1) A alone, (2) B alone, (3) C alone, (4) A with B, (5) A with C, (6) B with C, or (7) A with B and with C. As used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B. Similarly, as used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B. As used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B. Similarly, as used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B.</p><p id="p-0120" num="0105">As used herein, singular references (e.g., &#x201c;a,&#x201d; &#x201c;an,&#x201d; &#x201c;first,&#x201d; &#x201c;second,&#x201d; etc.) do not exclude a plurality. The term &#x201c;a&#x201d; or &#x201c;an&#x201d; object, as used herein, refers to one or more of that object. The terms &#x201c;a&#x201d; (or &#x201c;an&#x201d;), &#x201c;one or more,&#x201d; and &#x201c;at least one&#x201d; are used interchangeably herein. Furthermore, although individually listed, a plurality of means, elements or method actions may be implemented by, e.g., the same entity or object. Additionally, although individual features may be included in different examples or claims, these may possibly be combined, and the inclusion in different examples or claims does not imply that a combination of features is not feasible and/or advantageous.</p><p id="p-0121" num="0106"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart representative of example machine readable instructions and/or example operations <b>500</b> that may be executed and/or instantiated by processor circuitry to efficiently perform a task. The machine readable instructions and/or the operations <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> begin when the example interface circuitry <b>202</b>A, <b>202</b>B receive a task. (Block <b>502</b>). In the example device <b>102</b>, the task may be to provide encrypted SRS data to the example tower <b>104</b>A before the SRS data expires. In the example server <b>106</b>, the task may be one or more of decrypting the SRS data, computing position data for the device based on the SRS data, and encrypting the SRS data.</p><p id="p-0122" num="0107">The example frequency scaler circuitry <b>206</b>A, <b>206</b>B determines the total number of available cores in the example device <b>102</b> and the example server <b>106</b>, respectively. (Block <b>504</b>). The number of cores may be included in any type of processor device implemented by the example device <b>102</b> and the example server <b>106</b>. The example number of cores in both the example device <b>102</b> and the example server <b>106</b> may be any number. In some examples, the example server <b>106</b> includes more cores than the example device <b>102</b>.</p><p id="p-0123" num="0108">The example frequency scaler circuitry <b>206</b>A, <b>206</b>B selects a subset of the cores. (Block <b>506</b>). The subset of cores may be any number of the total available cores. In some examples, the number of cores in the subset may be less than the number of total available cores. In other examples, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B may select all of the total available cores at block <b>506</b>.</p><p id="p-0124" num="0109">The example frequency scaler circuitry <b>206</b>A, <b>206</b>B, increases the frequency of the selected cores. (Block <b>508</b>). With an increased operating frequency, a given compute cycle of the cores selected in block <b>506</b> may require less time than the compute cycle would otherwise.</p><p id="p-0125" num="0110">The example frequency scaler circuitry <b>206</b>A, <b>206</b>B decreases the frequency of the remaining cores. (Block <b>510</b>). The example frequency scaler circuitry <b>206</b>A, <b>206</b>B decreases the frequency of the remaining cores so that the cores selected in block <b>506</b> can be overclocked without exceeding the power budget of the example device <b>102</b> or example server <b>106</b>.</p><p id="p-0126" num="0111">The example frequency scaler circuitry <b>206</b>A, <b>206</b>B may use the power budget of the example device <b>102</b> and example server <b>106</b>, respectively, to determine the number of cores that should be in the subset, determine how much the operating frequency of the selected cores should be increased, and determine how much the operating frequency of the remaining cores should be decreased. For example, suppose a hypothetical device using the previous solution to perform encryption and decryption tasks requires 24 cores running at a normal operating frequency to achieve desired performance of x25519 algorithms. Because an example multiplier circuitry <b>212</b>-<i>n </i>uses approximately &#x2153; of the compute cycles required by previous solutions to perform x25519 algorithms, the hypothetical device only requires the 24 cores to run at &#x2153; of their normal operating frequency to achieve the same performance if it instead executed x25519 algorithms using the teachings of this disclosure. As a result, an example frequency scaler circuitry <b>206</b>-<i>n </i>implemented in the hypothetical device may decrease the frequency of the x25519 dedicated cores to &#x2153; of its normal operating frequency and increase the operating frequency of other cores dedicated to other tasks. Such a frequency configuration allows the hypothetical device, when performing x25519 algorithms and frequency scaling according to the teachings of this disclosure, to increase the performance of the cores unrelated to encryption and decryption while still meet the desired performance of the x25519 algorithms and still meeting a power budget.</p><p id="p-0127" num="0112">In some examples, a device may implement the example multiplier circuitry <b>212</b>-<i>n </i>but not the example frequency scaler circuitry <b>206</b>-<i>n</i>. Accordingly, in such examples, the example machine readable instructions and/or operations does not execute any of blocks <b>502</b> through blocks <b>510</b> and all cores execute instructions at their normal operating frequency. In such examples, the device is still more efficient than previous solutions to perform x25519 algorithms. In the foregoing example, a hypothetical device using the previous solution to perform encryption and decryption tasks requires 24 cores running at a normal operating frequency to achieve desired performance of x25519 algorithms. If the hypothetical device cannot frequency scale according to the teachings of this disclosure but can switch from the 25519 domain to the 25638 (25519&#x3c;&#x3c;1) domain to perform modular multiplication, the hypothetical device will still use approximately &#x2153; of the compute cycles than it previously did to perform x25519 algorithms. In such examples, the hypothetical device may, when using the 25638 (25519&#x3c;&#x3c;1) domain assign 8 cores running at their normal operating frequency to perform x25519 algorithms and have 16 extra cores to dedicate to other tasks.</p><p id="p-0128" num="0113">Example processor circuitry determines whether the task of block <b>502</b> includes x25519 algorithms. (Block <b>512</b>). In both the example device <b>102</b> and the example server <b>106</b>, the task of block <b>502</b> includes x25519 algorithms. However, other examples of devices that implement the frequency scaler circuitry may not execute x25519 algorithms.</p><p id="p-0129" num="0114">If the task of block <b>502</b> includes x25519 algorithms (Block <b>512</b>: Yes), the example multiplier circuitry <b>212</b>A, <b>212</b>B performs x25519 modular multiplication in the 25638 (25519&#x3c;&#x3c;1) domain as described previously in connection with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. (Block <b>514</b>). The example multiplier circuitry <b>212</b>A, <b>212</b>B may perform multiple x25519 modular multiplication operations at block <b>514</b>. The number of modular multiplication operations performed by the example multiplier circuitry <b>212</b>A, <b>212</b>B may depend on the type of x25519 algorithm, the type of input data to the algorithms, etc. The example machine readable instructions and/or operations <b>500</b> proceed to block <b>516</b> after block <b>514</b>. Block <b>514</b> is discussed further in connection with <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0130" num="0115">If the task of block <b>502</b> does not include x25519 algorithms (Block <b>512</b>: No), or if there are no further modular multiplications in the x25519 algorithm task, processor circuitry completes the task of block <b>514</b>. (Block <b>516</b>). For example, in the example device <b>102</b> and example server <b>106</b>, the example controller circuitry <b>210</b>A, <b>210</b>B complete the respective x25519 algorithm tasks. In such examples, one or more of the example controller circuitry <b>210</b>A, <b>210</b>B may complete a first portion of the x25519 algorithm, instruct the corresponding multiplier circuitry <b>212</b>A, <b>212</b>B to perform a first modular multiplication based on the first portion, complete a second portion of the x25519 algorithm based on the first modular multiplication result, instruct the corresponding multiplier circuitry <b>212</b>A, <b>212</b>B to perform a second modular multiplication based on the second portion, etc.</p><p id="p-0131" num="0116">In other examples, processor circuitry implemented by other devices completes other types of tasks during block <b>516</b>. In such examples, one or more tasks unrelated to x25519 algorithms may include modular multiplication. In such examples, other devices that implement an example multiplier circuitry <b>212</b>-<i>n </i>may execute the modular multiplication in the 25638 (25519&#x3c;&#x3c;1) domain as described previously in connection with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The example machine readable instructions and/or operations <b>500</b> end after block <b>516</b>.</p><p id="p-0132" num="0117">While <figref idref="DRAWINGS">FIG. <b>5</b></figref> is described in connection to the example device <b>102</b> and example server <b>106</b>, the example machine readable instructions and/or operations <b>500</b> may be implemented by any device that uses frequency scaling as according to the teachings of this disclosure. As a result, example frequency scaler circuitry may improve the performance of any type of compute device to perform any type of task.</p><p id="p-0133" num="0118"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart representative of example machine readable instructions and/or example operations that may be executed by example processor circuitry to implement the 25638 (25519&#x3c;&#x3c;1) domain modular multiplication of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Specifically, the flowchart of <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows how the example machine readable instructions and/or operations <b>500</b> execute block <b>514</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0134" num="0119">Execution of block <b>514</b> begins when the example interface circuitry <b>301</b> receives two 265-bit values, A and B. (Block <b>602</b>). To perform x25519 modular multiplication, the example multiplier circuitry <b>212</b>A, <b>212</b>B may compute A&#xd7;B % Y as described in the example flowchart of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the example block diagram of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and table <b>1</b>. In other examples of x25519 modular multiplication, one or more of the values A and B may be composed of a number of bits other than 265.</p><p id="p-0135" num="0120">The example selector circuitry <b>305</b> segments the value A into portions. (Block <b>604</b>). In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the example multiplier circuitry <b>212</b>A, <b>212</b>B segments the example &#x2018;A&#x2019; data <b>302</b> into four portions that each contain 64 bits (such as example &#x2018;A&#x2019; data portions <b>302</b>B, <b>302</b>C, <b>302</b>D, <b>302</b>E) and one portion that contains 9 bits (such as example &#x2018;A&#x2019; data portion <b>302</b>A). In other examples, one or more of the example multiplier circuitry <b>212</b>A, <b>212</b>B may segment the example &#x2018;A&#x2019; data into different sized portions. In some examples, segmenting the value of A into portions may be referred to as selecting a subset of bits from the value A.</p><p id="p-0136" num="0121">The example multiplier circuitry <b>212</b>A, <b>212</b>B performs operations in parallel. (Block <b>606</b>). Specifically, block <b>606</b> refers to the example multiplier circuitry <b>212</b>A, <b>212</b>B executing at least blocks <b>608</b>, <b>610</b>, <b>612</b> in parallel. The example multiplier circuitry <b>212</b>A, <b>212</b>B may implement the parallel operations of at least blocks <b>608</b>, <b>610</b>, <b>612</b> by implementing one or more of blocks <b>608</b>, <b>610</b>, <b>612</b> on different processor cores. The number of cores that implement both of the example multiplier circuitry <b>212</b>A, <b>212</b>B is determined by the example frequency scaler circuitry <b>206</b>A, <b>206</b>B respectively in block <b>506</b>.</p><p id="p-0137" num="0122">The example 64&#xd7;265 integer multiplier circuitry <b>306</b> multiplies a portion of A with the 265 bits of B. (Block <b>608</b>). The example 64&#xd7;265 integer multiplier circuitry <b>306</b> may use any bitwise multiplication technique to perform the multiplication of block <b>608</b>.</p><p id="p-0138" num="0123">The example left shift circuitry <b>320</b> left shifts the previous multiplication result by 64 bits. (Block <b>610</b>). After the initial multiplication result (such as M<sub>0 </sub>in equation (2)), a previous multiplication result does not yet exist, so the example machine readable instructions and/or instructions <b>500</b> proceed from block <b>608</b> back to block <b>606</b> at the start of a subsequent compute cycle. In examples where the machine readable instructions and/or operations <b>500</b> implement block <b>610</b> in an nth compute cycle, the previous multiplication result refers to the value produced at block <b>608</b> at the (n&#x2212;1)th compute cycle. In some examples, the example left shift circuitry <b>320</b> may left shift the previous multiplication result by a number of bits other than 64. The number of bits left shifted in block <b>610</b> may depend on the number of bits in the example &#x2018;A&#x2019; data portions <b>302</b>A, <b>302</b>B, <b>302</b>C, <b>302</b>D, <b>302</b>E.</p><p id="p-0139" num="0124">The example right shift circuitry <b>314</b> right shifts the previous multiplication result by 256 bits. (Block <b>612</b>). In turn, the example left shift circuitry <b>316</b> multiplies the output of block <b>612</b> by 38 using three parallel left shift operations. (Block <b>614</b>). Specifically, the example left shift circuitry <b>316</b> simultaneously left shifts the output of block <b>612</b> by one bit, left shifts the output of block <b>612</b> by two bits, and left shifts the output of block <b>612</b> by five bits. In other examples, the example left shift circuitry <b>316</b> may multiply the output of block <b>612</b> by a value other than 38. In such examples, the example left shift circuitry <b>316</b> implements the multiplication by another value through one or more parallel left shift operations.</p><p id="p-0140" num="0125">The example left shift circuitry <b>318</b> left shifts the result of the 38&#xd7; multiplication (i.e., the output of block <b>614</b>) by 64 bits. (Block <b>616</b>). As a result, three adder circuitry <b>310</b> obtains two terms, the output of block <b>610</b> and the output of block <b>616</b>, that are both left shifted by 64 bits. In examples in which the example left shift circuitry <b>320</b> left shifts a number of bits other than 64 at block <b>610</b>, the example left shift circuitry <b>318</b> may correspondingly left shift the output of block <b>614</b> by the same number bits at block <b>616</b>.</p><p id="p-0141" num="0126">The example adder circuitry <b>310</b> adds the 64-bit left shifted terms to the current multiplication result. (Block <b>618</b>). Specifically, during the nth compute cycle, the example adder circuitry <b>310</b> adds the outputs of blocks <b>608</b>, <b>610</b>, <b>616</b> that were executed during the nth compute cycle.</p><p id="p-0142" num="0127">The example multiplier circuitry <b>212</b>A, <b>212</b>B determines if all portions of A have been multiplied to B. (Block <b>620</b>). If all portions of A have not been multiplied to B, (Block <b>620</b>: No), the example machine readable instructions and/or operations <b>500</b> return to block <b>606</b>, where blocks <b>608</b>, <b>610</b>, <b>612</b> are implemented in parallel during a subsequent compute cycle. During the subsequent cycle, at block <b>610</b>, the example 64&#xd7;265 integer multiplier circuitry <b>306</b> multiplies a portion of A that was not used as an input during a previous compute cycle.</p><p id="p-0143" num="0128">If all portions of A have been multiplied to B, (Block <b>620</b>: Yes), the example multiplier circuitry <b>212</b>A, <b>212</b>B determines whether the last addition value of block <b>618</b>, C<sub>5</sub>, is greater than the x25519 modulo value, Y. (Block <b>622</b>). If C<sub>5 </sub>is greater than Y (Block <b>622</b>: Yes), the example multiplexer circuitry <b>326</b> provides the penultimate addition value of block <b>618</b>, C<sub>4</sub>, to the relevant controller circuitry <b>210</b>A, <b>210</b>B. (Block <b>624</b>). The example machine readable instructions and/or operations <b>500</b> return to block <b>516</b> after block <b>624</b>.</p><p id="p-0144" num="0129">If C<sub>5 </sub>is less than or equal to Y (Block <b>622</b>: No), the example subtractor circuitry <b>322</b> subtracts Y from C<sub>5</sub>. (Block <b>626</b>). The example multiplier circuitry <b>212</b>A, <b>212</b>B then determines whether the output of block <b>626</b>, C<sub>5</sub>&#x2212;Y, is greater than Y. (Block <b>628</b>).</p><p id="p-0145" num="0130">If C<sub>5</sub>&#x2212;Y is greater than Y (Block <b>628</b>: Yes), the example subtractor circuitry <b>324</b> subtracts (2&#xd7;Y) from C<sub>5</sub>. (Block <b>630</b>). The example multiplexer circuitry <b>326</b> then provides the output of block <b>630</b>, C<sub>5</sub>&#x2212;(2&#xd7;Y), to the relevant controller circuitry <b>210</b>A, <b>210</b>B. (Block <b>632</b>). The example machine readable instructions and/or operations <b>500</b> return to block <b>516</b> after block <b>632</b>.</p><p id="p-0146" num="0131">If C<sub>5</sub>&#x2212;Y is less than or equal to Y (Block <b>628</b>: No), the example multiplexer circuitry <b>326</b> provides the output of block <b>626</b>, C<sub>5</sub>&#x2212;Y, to the relevant controller circuitry <b>210</b>A, <b>210</b>B. (Block <b>634</b>). The example machine readable instructions and/or operations <b>500</b> return to block <b>516</b> after block <b>634</b>.</p><p id="p-0147" num="0132"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of an example processor platform <b>700</b> structured to execute and/or instantiate the machine readable instructions and/or the operations of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref> to implement the example device <b>102</b> and/or the example server <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The processor platform <b>700</b> can be, for example, a server, a personal computer, a workstation, a self-learning machine (e.g., a neural network), a mobile device (e.g., a cell phone, a smart phone, a tablet such as an iPad&#x2122;), an Internet appliance, a DVD player, a digital video recorder, a Blu-ray player, a gaming console, a personal video recorder, a set top box, a headset (e.g., an augmented reality (AR) headset, a virtual reality (VR) headset, etc.) or other wearable device, or any other type of computing device.</p><p id="p-0148" num="0133">The processor platform <b>700</b> of the illustrated example includes processor circuitry <b>712</b>. The processor circuitry <b>712</b> of the illustrated example is hardware. For example, the processor circuitry <b>712</b> can be implemented by one or more integrated circuits, logic circuits, FPGAs, microprocessors, CPUs, GPUs, DSPs, and/or microcontrollers from any desired family or manufacturer. The processor circuitry <b>712</b> may be implemented by one or more semiconductor based (e.g., silicon based) devices. In this example, the processor circuitry <b>712</b> implements one or more of the example SRS calculator circuitry <b>204</b>, the example frequency scaler circuitry <b>206</b>A, <b>206</b>B, the example public key acceleration engine <b>208</b>A, <b>208</b>B, and the example position calculator circuitry <b>214</b>.</p><p id="p-0149" num="0134">The processor circuitry <b>712</b> of the illustrated example includes a local memory <b>713</b> (e.g., a cache, registers, etc.). The processor circuitry <b>712</b> of the illustrated example is in communication with a main memory including a volatile memory <b>714</b> and a non-volatile memory <b>716</b> by a bus <b>718</b>. The volatile memory <b>714</b> may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS&#xae; Dynamic Random Access Memory (RDRAM&#xae;), and/or any other type of RAM device. The non-volatile memory <b>716</b> may be implemented by flash memory and/or any other desired type of memory device. Access to the main memory <b>714</b>, <b>716</b> of the illustrated example is controlled by a memory controller.</p><p id="p-0150" num="0135">The processor platform <b>700</b> of the illustrated example also includes interface circuitry <b>720</b>. The interface circuitry <b>720</b> may be implemented by hardware in accordance with any type of interface standard, such as an Ethernet interface, a universal serial bus (USB) interface, a Bluetooth&#xae; interface, a near field communication (NFC) interface, a Peripheral Component Interconnect (PCI) interface, and/or a Peripheral Component Interconnect Express (PCIe) interface.</p><p id="p-0151" num="0136">In the illustrated example, one or more input devices <b>722</b> are connected to the interface circuitry <b>720</b>. The input device(s) <b>722</b> permit(s) a user to enter data and/or commands into the processor circuitry <b>712</b>. The input device(s) <b>722</b> can be implemented by, for example, an audio sensor, a microphone, a camera (still or video), a keyboard, a button, a mouse, a touchscreen, a trackpad, a trackball, an isopoint device, and/or a voice recognition system.</p><p id="p-0152" num="0137">One or more output devices <b>724</b> are also connected to the interface circuitry <b>720</b> of the illustrated example. The output device(s) <b>724</b> can be implemented, for example, by display devices (e.g., a light emitting diode (LED), an organic light emitting diode (OLED), a liquid crystal display (LCD), a cathode ray tube (CRT) display, an in-place switching (IPS) display, a touchscreen, etc.), a tactile output device, a printer, and/or speaker. The interface circuitry <b>720</b> of the illustrated example, thus, typically includes a graphics driver card, a graphics driver chip, and/or graphics processor circuitry such as a GPU.</p><p id="p-0153" num="0138">The interface circuitry <b>720</b> of the illustrated example also includes a communication device such as a transmitter, a receiver, a transceiver, a modem, a residential gateway, a wireless access point, and/or a network interface to facilitate exchange of data with external machines (e.g., computing devices of any kind) by a network <b>726</b>. The communication can be by, for example, an Ethernet connection, a digital subscriber line (DSL) connection, a telephone line connection, a coaxial cable system, a satellite system, a line-of-site wireless system, a cellular telephone system, an optical connection, etc.</p><p id="p-0154" num="0139">The processor platform <b>700</b> of the illustrated example also includes one or more mass storage devices <b>728</b> to store software and/or data. Examples of such mass storage devices <b>728</b> include magnetic storage devices, optical storage devices, floppy disk drives, HDDs, CDs, Blu-ray disk drives, redundant array of independent disks (RAID) systems, solid state storage devices such as flash memory devices and/or SSDs, and DVD drives.</p><p id="p-0155" num="0140">The machine readable instructions <b>732</b>, which may be implemented by the machine readable instructions of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, may be stored in the mass storage device <b>728</b>, in the volatile memory <b>714</b>, in the non-volatile memory <b>716</b>, and/or on a removable non-transitory computer readable storage medium such as a CD or DVD.</p><p id="p-0156" num="0141"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an example implementation of the processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. In this example, the processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref> is implemented by a microprocessor <b>800</b>. For example, the microprocessor <b>800</b> may be a general purpose microprocessor (e.g., general purpose microprocessor circuitry). The microprocessor <b>800</b> executes some or all of the machine readable instructions of the flowchart of <figref idref="DRAWINGS">FIG. <b>5</b></figref> to effectively instantiate the example device <b>102</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> and/or the example server <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> as logic circuits to perform the operations corresponding to those machine readable instructions. In some such examples, the example device <b>102</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> and/or the example server <b>106</b> of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is instantiated by the hardware circuits of the microprocessor <b>800</b> in combination with the instructions. For example, the microprocessor <b>800</b> may be implemented by multi-core hardware circuitry such as a CPU, a DSP, a GPU, an XPU, etc. Although it may include any number of example cores <b>802</b> (e.g., 1 core), the microprocessor <b>800</b> of this example is a multi-core semiconductor device including N cores. The cores <b>802</b> of the microprocessor <b>800</b> may operate independently or may cooperate to execute machine readable instructions. For example, machine code corresponding to a firmware program, an embedded software program, or a software program may be executed by one of the cores <b>802</b> or may be executed by multiple ones of the cores <b>802</b> at the same or different times. In some examples, the machine code corresponding to the firmware program, the embedded software program, or the software program is split into threads and executed in parallel by two or more of the cores <b>802</b>. The software program may correspond to a portion or all of the machine readable instructions and/or operations represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref>.</p><p id="p-0157" num="0142">The cores <b>802</b> may communicate by a first example bus <b>804</b>. In some examples, the first bus <b>804</b> may be implemented by a communication bus to effectuate communication associated with one(s) of the cores <b>802</b>. For example, the first bus <b>804</b> may be implemented by at least one of an Inter-Integrated Circuit (I2C) bus, a Serial Peripheral Interface (SPI) bus, a PCI bus, or a PCIe bus. Additionally or alternatively, the first bus <b>804</b> may be implemented by any other type of computing or electrical bus. The cores <b>802</b> may obtain data, instructions, and/or signals from one or more external devices by example interface circuitry <b>806</b>. The cores <b>802</b> may output data, instructions, and/or signals to the one or more external devices by the interface circuitry <b>806</b>. Although the cores <b>802</b> of this example include example local memory <b>820</b> (e.g., Level 1 (L1) cache that may be split into an L1 data cache and an L1 instruction cache), the microprocessor <b>800</b> also includes example shared memory <b>810</b> that may be shared by the cores (e.g., Level 2 (L2 cache)) for high-speed access to data and/or instructions. Data and/or instructions may be transferred (e.g., shared) by writing to and/or reading from the shared memory <b>810</b>. The local memory <b>820</b> of each of the cores <b>802</b> and the shared memory <b>810</b> may be part of a hierarchy of storage devices including multiple levels of cache memory and the main memory (e.g., the main memory <b>714</b>, <b>716</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>). Typically, higher levels of memory in the hierarchy exhibit lower access time and have smaller storage capacity than lower levels of memory. Changes in the various levels of the cache hierarchy are managed (e.g., coordinated) by a cache coherency policy.</p><p id="p-0158" num="0143">Each core <b>802</b> may be referred to as a CPU, DSP, GPU, etc., or any other type of hardware circuitry. Each core <b>802</b> includes control unit circuitry <b>814</b>, arithmetic and logic (AL) circuitry (sometimes referred to as an ALU) <b>816</b>, a plurality of registers <b>818</b>, the local memory <b>820</b>, and a second example bus <b>822</b>. Other structures may be present. For example, each core <b>802</b> may include vector unit circuitry, single instruction multiple data (SIMD) unit circuitry, load/store unit (LSU) circuitry, branch/jump unit circuitry, floating-point unit (FPU) circuitry, etc. The control unit circuitry <b>814</b> includes semiconductor-based circuits structured to control (e.g., coordinate) data movement within the corresponding core <b>802</b>. The AL circuitry <b>816</b> includes semiconductor-based circuits structured to perform one or more mathematic and/or logic operations on the data within the corresponding core <b>802</b>. The AL circuitry <b>816</b> of some examples performs integer based operations. In other examples, the AL circuitry <b>816</b> also performs floating point operations. In yet other examples, the AL circuitry <b>816</b> may include first AL circuitry that performs integer based operations and second AL circuitry that performs floating point operations. In some examples, the AL circuitry <b>816</b> may be referred to as an Arithmetic Logic Unit (ALU). The registers <b>818</b> are semiconductor-based structures to store data and/or instructions such as results of one or more of the operations performed by the AL circuitry <b>816</b> of the corresponding core <b>802</b>. For example, the registers <b>818</b> may include vector register(s), SIMD register(s), general purpose register(s), flag register(s), segment register(s), machine specific register(s), instruction pointer register(s), control register(s), debug register(s), memory management register(s), machine check register(s), etc. The registers <b>818</b> may be arranged in a bank as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. Alternatively, the registers <b>818</b> may be organized in any other arrangement, format, or structure including distributed throughout the core <b>802</b> to shorten access time. The second bus <b>822</b> may be implemented by at least one of an I2C bus, a SPI bus, a PCI bus, or a PCIe bus</p><p id="p-0159" num="0144">Each core <b>802</b> and/or, more generally, the microprocessor <b>800</b> may include additional and/or alternate structures to those shown and described above. For example, one or more clock circuits, one or more power supplies, one or more power gates, one or more cache home agents (CHAs), one or more converged/common mesh stops (CMSs), one or more shifters (e.g., barrel shifter(s)) and/or other circuitry may be present. The microprocessor <b>800</b> is a semiconductor device fabricated to include many transistors interconnected to implement the structures described above in one or more integrated circuits (ICs) contained in one or more packages. The processor circuitry may include and/or cooperate with one or more accelerators. In some examples, accelerators are implemented by logic circuitry to perform certain tasks more quickly and/or efficiently than can be done by a general purpose processor. Examples of accelerators include ASICs and FPGAs such as those discussed herein. A GPU or other programmable device can also be an accelerator. Accelerators may be on-board the processor circuitry, in the same chip package as the processor circuitry and/or in one or more separate packages from the processor circuitry.</p><p id="p-0160" num="0145"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram of another example implementation of the processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. In this example, the processor circuitry <b>712</b> is implemented by FPGA circuitry <b>900</b>. For example, the FPGA circuitry <b>900</b> may be implemented by an FPGA. The FPGA circuitry <b>900</b> can be used, for example, to perform operations that could otherwise be performed by the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> executing corresponding machine readable instructions. However, once configured, the FPGA circuitry <b>900</b> instantiates the machine readable instructions in hardware and, thus, can often execute the operations faster than they could be performed by a general purpose microprocessor executing the corresponding software.</p><p id="p-0161" num="0146">More specifically, in contrast to the microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> described above (which is a general purpose device that may be programmed to execute some or all of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref> but whose interconnections and logic circuitry are fixed once fabricated), the FPGA circuitry <b>900</b> of the example of <figref idref="DRAWINGS">FIG. <b>7</b></figref> includes interconnections and logic circuitry that may be configured and/or interconnected in different ways after fabrication to instantiate, for example, some or all of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref>. In particular, the FPGA circuitry <b>900</b> may be thought of as an array of logic gates, interconnections, and switches. The switches can be programmed to change how the logic gates are interconnected by the interconnections, effectively forming one or more dedicated logic circuits (unless and until the FPGA circuitry <b>900</b> is reprogrammed). The configured logic circuits enable the logic gates to cooperate in different ways to perform different operations on data received by input circuitry. Those operations may correspond to some or all of the software represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref>. As such, the FPGA circuitry <b>900</b> may be structured to effectively instantiate some or all of the machine readable instructions of the flowcharts of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref> as dedicated logic circuits to perform the operations corresponding to those software instructions in a dedicated manner analogous to an ASIC. Therefore, the FPGA circuitry <b>900</b> may perform the operations corresponding to the some or all of the machine readable instructions of <figref idref="DRAWINGS">FIG. <b>5</b></figref> faster than the general purpose microprocessor can execute the same.</p><p id="p-0162" num="0147">In the example of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the FPGA circuitry <b>900</b> is structured to be programmed (and/or reprogrammed one or more times) by an end user by a hardware description language (HDL) such as Verilog. The FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, includes example input/output (I/O) circuitry <b>902</b> to obtain and/or output data to/from example configuration circuitry <b>904</b> and/or external hardware <b>906</b>. For example, the configuration circuitry <b>904</b> may be implemented by interface circuitry that may obtain machine readable instructions to configure the FPGA circuitry <b>900</b>, or portion(s) thereof. In some such examples, the configuration circuitry <b>904</b> may obtain the machine readable instructions from a user, a machine (e.g., hardware circuitry (e.g., programmed or dedicated circuitry) that may implement an Artificial Intelligence/Machine Learning (AI/ML) model to generate the instructions), etc. In some examples, the external hardware <b>906</b> may be implemented by external hardware circuitry. For example, the external hardware <b>906</b> may be implemented by the microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. The FPGA circuitry <b>900</b> also includes an array of example logic gate circuitry <b>908</b>, a plurality of example configurable interconnections <b>910</b>, and example storage circuitry <b>912</b>. The logic gate circuitry <b>908</b> and the configurable interconnections <b>910</b> are configurable to instantiate one or more operations that may correspond to at least some of the machine readable instructions of <figref idref="DRAWINGS">FIG. <b>5</b></figref> and/or other desired operations. The logic gate circuitry <b>908</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> is fabricated in groups or blocks. Each block includes semiconductor-based electrical structures that may be configured into logic circuits. In some examples, the electrical structures include logic gates (e.g., And gates, Or gates, Nor gates, etc.) that provide basic building blocks for logic circuits. Electrically controllable switches (e.g., transistors) are present within each of the logic gate circuitry <b>908</b> to enable configuration of the electrical structures and/or the logic gates to form circuits to perform desired operations. The logic gate circuitry <b>908</b> may include other electrical structures such as look-up tables (LUTs), registers (e.g., flip-flops or latches), multiplexers, etc.</p><p id="p-0163" num="0148">The configurable interconnections <b>910</b> of the illustrated example are conductive pathways, traces, vias, or the like that may include electrically controllable switches (e.g., transistors) whose state can be changed by programming (e.g., using an HDL instruction language) to activate or deactivate one or more connections between one or more of the logic gate circuitry <b>908</b> to program desired logic circuits.</p><p id="p-0164" num="0149">The storage circuitry <b>912</b> of the illustrated example is structured to store result(s) of the one or more of the operations performed by corresponding logic gates. The storage circuitry <b>912</b> may be implemented by registers or the like. In the illustrated example, the storage circuitry <b>912</b> is distributed amongst the logic gate circuitry <b>908</b> to facilitate access and increase execution speed.</p><p id="p-0165" num="0150">The example FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes example Dedicated Operations Circuitry <b>914</b>. In this example, the Dedicated Operations Circuitry <b>914</b> includes special purpose circuitry <b>916</b> that may be invoked to implement commonly used functions to avoid the need to program those functions in the field. Examples of such special purpose circuitry <b>916</b> include memory (e.g., DRAM) controller circuitry, PCIe controller circuitry, clock circuitry, transceiver circuitry, memory, and multiplier-accumulator circuitry. Other types of special purpose circuitry may be present. In some examples, the FPGA circuitry <b>900</b> may also include example general purpose programmable circuitry <b>918</b> such as an example CPU <b>920</b> and/or an example DSP <b>922</b>. Other general purpose programmable circuitry <b>918</b> may additionally or alternatively be present such as a GPU, an XPU, etc., that can be programmed to perform other operations.</p><p id="p-0166" num="0151">Although <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> illustrate two example implementations of the processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, many other approaches are contemplated. For example, as mentioned above, modern FPGA circuitry may include an on-board CPU, such as one or more of the example CPU <b>920</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>. Therefore, the processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref> may additionally be implemented by combining the example microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> and the example FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>. In some such hybrid examples, a first portion of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref> may be executed by one or more of the cores <b>802</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, a second portion of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref> may be executed by the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, and/or a third portion of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>5</b>, <b>6</b></figref> may be executed by an ASIC. It should be understood that some or all of the circuitry of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may, thus, be instantiated at the same or different times. Some or all of the circuitry may be instantiated, for example, in one or more threads executing concurrently and/or in series. Moreover, in some examples, some or all of the circuitry of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be implemented within one or more virtual machines and/or containers executing on the microprocessor.</p><p id="p-0167" num="0152">In some examples, the processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be in one or more packages. For example, the microprocessor <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> and/or the FPGA circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> may be in one or more packages. In some examples, an XPU may be implemented by the processor circuitry <b>712</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, which may be in one or more packages. For example, the XPU may include a CPU in one package, a DSP in another package, a GPU in yet another package, and an FPGA in still yet another package.</p><p id="p-0168" num="0153">A block diagram illustrating an example software distribution platform <b>1005</b> to distribute software such as the example machine readable instructions <b>732</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref> to hardware devices owned and/or operated by third parties is illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>. The example software distribution platform <b>1005</b> may be implemented by any computer server, data facility, cloud service, etc., capable of storing and transmitting software to other computing devices. The third parties may be customers of the entity owning and/or operating the software distribution platform <b>1005</b>. For example, the entity that owns and/or operates the software distribution platform <b>1005</b> may be a developer, a seller, and/or a licensor of software such as the example machine readable instructions <b>732</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. The third parties may be consumers, users, retailers, OEMs, etc., who purchase and/or license the software for use and/or re-sale and/or sub-licensing. In the illustrated example, the software distribution platform <b>1005</b> includes one or more servers and one or more storage devices. The storage devices store the machine readable instructions <b>732</b>, which may correspond to the example machine readable instructions and/or example operations <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, as described above. The one or more servers of the example software distribution platform <b>1005</b> are in communication with an example network <b>1010</b>, which may correspond to any one or more of the Internet and/or any of the example networks described above. In some examples, the one or more servers are responsive to requests to transmit the software to a requesting party as part of a commercial transaction. Payment for the delivery, sale, and/or license of the software may be handled by the one or more servers of the software distribution platform and/or by a third party payment entity. The servers enable purchasers and/or licensors to download the machine readable instructions <b>732</b> from the software distribution platform <b>1005</b>. For example, the software, which may correspond to the example machine readable instructions and/or example operations <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, may be downloaded to the example processor platform <b>700</b>, which is to execute the machine readable instructions <b>732</b> to implement the example device <b>102</b> and/or example server <b>106</b>. In some examples, one or more servers of the software distribution platform <b>1005</b> periodically offer, transmit, and/or force updates to the software (e.g., the example machine readable instructions <b>732</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>) to ensure improvements, patches, updates, etc., are distributed and applied to the software at the end user devices.</p><p id="p-0169" num="0154">From the foregoing, it will be appreciated that example systems, methods, apparatus, and articles of manufacture have been disclosed that improve the performance of encryption tasks. Disclosed systems, methods, apparatus, and articles of manufacture improve the efficiency of using a computing device by selecting a subset of cores within a processor to perform a computational task, increasing the operating frequency of the subsequent cores, and decreasing the operating frequency of the remaining cores. If the computational task includes x25519 modular multiplication, disclosed systems, methods, apparatus, and articles of manufacture improve the efficiency of using a computing device by performing operations in the 25638 (25519&#x3c;&#x3c;1) domain. In the 25638 (25519&#x3c;&#x3c;1) domain breaks the first multiplication of A&#xd7;B into partial multiplications, and computes the reduction, shift, and add operations in parallel. Disclosed systems, methods, apparatus, and articles of manufacture are accordingly directed to one or more improvement(s) in the operation of a machine such as a computer or other electronic and/or mechanical device.</p><p id="p-0170" num="0155">Example methods, apparatus, systems, and articles of manufacture to improve the performance of encryption tasks are disclosed herein. Further examples and combinations thereof include the following.</p><p id="p-0171" num="0156">Example 1 includes an apparatus to perform a modular multiplication, the apparatus comprising interface circuitry to receive a first value and a second value, selector circuitry to select a first subset of bits and a second subset of bits from the first value, multiplier circuitry to multiply the first subset of bits and the second value during a first compute cycle, and multiply the second subset of bits and the second value during a second compute cycle, left shift circuitry to perform a plurality of bitwise shift operations with a product of the first subset and the second value during the second compute cycle, adder circuitry to add a product of the second subset and the second value to a result of the plurality of bitwise shift operations during the second compute cycle, and comparator circuitry to determine the result of the modular multiplication based on a comparison of a final addition value with a modulo value, the final addition value based on a result of the addition during the second compute cycle.</p><p id="p-0172" num="0157">Example 2 includes the apparatus of example 1, wherein the selector circuitry is further to select a plurality of subsets of bits from the first value, and the multiplier circuitry is further to multiply the plurality of subsets to the second value in respective compute cycles, where one subset is multiplied with the second value per compute cycle.</p><p id="p-0173" num="0158">Example 3 includes the apparatus of example 2, wherein the first subset of bits, second subset of bits, and plurality of subsets of bits are mutually exclusive, and a superset of the first subset of bits, second subset of bits, and plurality of subsets of bits include all the bits in the first value.</p><p id="p-0174" num="0159">Example 4 includes the apparatus of example 1, wherein the left shift circuitry is further to perform a first left shift by 1 bit, a second left shift by 2 bits, and a third left shift by 5 bits, the first left shift, second left shift, and third left shift collectively form a multiplication by 38, and the left shift circuitry is further to perform the first left shift, the second left shift, and the third left shift in parallel.</p><p id="p-0175" num="0160">Example 5 includes the apparatus of example 1, further including frequency scaler circuitry to select, from a set of processor cores, a subset of processor cores, increase an operating frequency of the subset of processor cores, and perform the modular multiplication using the subset of processor cores.</p><p id="p-0176" num="0161">Example 6 includes the apparatus of example 5, wherein the frequency scaler circuitry is further to obtain a power budget, and decrease an operating frequency of processor cores not in the subset to satisfy the power budget.</p><p id="p-0177" num="0162">Example 7 includes the apparatus of example 1, wherein the modular multiplication is part of a Montgomery point multiplication or a Twisted Edwards point multiplication.</p><p id="p-0178" num="0163">Example 8 includes the apparatus of example 1, wherein the modular multiplication is part of an encryption task using Curve 25519 of elliptic curve Diffie-Hellman (ECDH) key agreement scheme.</p><p id="p-0179" num="0164">Example 9 includes the apparatus of example 1, wherein the selector circuitry it to further determine a result of the modular multiplication in an amount of time that satisfies a latency threshold.</p><p id="p-0180" num="0165">Example 10 includes At least one non-transitory machine-readable medium comprising instructions that, when executed, cause at least one processor to at least receive a first value and a second value, select a first subset of bits and a second subset of bits from the first value, multiply the first subset to the second value during a first compute cycle, multiply the second subset to the second value during a second compute cycle, perform a plurality of bitwise shift operations with a product of the first subset and the second value during the second compute cycle, add a product of the second subset and the second value to a result of the plurality of bitwise shift operations during the second compute cycle, and determine the result of a modular multiplication based on a comparison of a final addition value with a modulo value, the final addition value based on a result of the addition during the second compute cycle.</p><p id="p-0181" num="0166">Example 11 includes the at least one non-transitory machine-readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to select a plurality of subsets of bits from the first value, and multiply the plurality of subsets to the second value in respective compute cycles, where one subset is multiplied with the second value per compute cycle.</p><p id="p-0182" num="0167">Example 12 includes the at least one non-transitory machine-readable medium of example 11, wherein the first subset of bits, second subset of bits, and plurality of subsets of bits are mutually exclusive, and a superset of the first subset of bits, second subset of bits, and plurality of subsets of bits include all the bits in the first value.</p><p id="p-0183" num="0168">Example 13 includes the at least one non-transitory machine-readable medium of example 10, wherein the plurality of bitwise shift operations include a first left shift by 1 bit, a second left shift by 2 bits, and a third left shift by 5 bits, the first left shift, second left shift, and third left shift collectively form a multiplication by 38, and execute the first left shift, the second left shift, and the third left shift in parallel.</p><p id="p-0184" num="0169">Example 14 includes the at least one non-transitory machine-readable medium of example 10, wherein the at least one processor includes a set of processor cores, and the instructions, when executed, cause the at least one processor to select a subset of processor cores, increase an operating frequency of the subset of processor cores, and perform the modular multiplication using the subset of processor cores.</p><p id="p-0185" num="0170">Example 15 includes the at least one non-transitory machine-readable medium of example 14, wherein the instructions, when executed, cause the at least one processor to obtain a power budget set corresponding to the processor, and satisfy the power budget by decreasing an operating frequency of processor cores not in the subset.</p><p id="p-0186" num="0171">Example 16 includes the at least one non-transitory machine-readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to compute the modular multiplication as part of a Montgomery point multiplication or a Twisted Edwards point multiplication.</p><p id="p-0187" num="0172">Example 17 includes the at least one non-transitory machine-readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to compute the modular multiplication as part of an encryption task using Curve 25519 of an elliptic curve Diffie-Hellman (ECDH) key agreement scheme.</p><p id="p-0188" num="0173">Example 18 includes the at least one non-transitory machine-readable medium of example 10, wherein the instructions, when executed, cause the at least one processor to compute the modular multiplication in an amount of time that satisfies a latency threshold.</p><p id="p-0189" num="0174">Example 19 includes a method to perform a modular multiplication, the method comprising receiving a first value and a second value, selecting a first subset of bits and a second subset of bits from the first value, multiplying the first subset to the second value during a first compute cycle, multiplying the second subset to the second value during a second compute cycle, performing a plurality of bitwise shift operations with a product of the first subset and the second value during the second compute cycle, adding a product of the second subset and the second value to a result of the plurality of bitwise shift operations during the second compute cycle, and determining the result of the modular multiplication based on a comparison of a final addition value with a modulo value, the final addition value based on a result of the addition during the second compute cycle.</p><p id="p-0190" num="0175">Example 20 includes the method of example 19, further including selecting a plurality of subsets of bits from the first value, and multiplying the plurality of subsets to the second value in respective compute cycles, where one subset is multiplied with the second value per compute cycle.</p><p id="p-0191" num="0176">Example 21 includes the method of example 20, wherein the first subset of bits, second subset of bits, and plurality of subsets of bits are mutually exclusive, and a superset of the first subset of bits, second subset of bits, and plurality of subsets of bits include all the bits in the first value.</p><p id="p-0192" num="0177">Example 22 includes the method of example 19, wherein the plurality of bitwise shift operations include a first left shift by 1 bit, a second left shift by 2 bits, and a third left shift by 5 bits, the first left shift, second left shift, and third left shift collectively form a multiplication by 38, and the method further includes performing the first left shift, the second left shift, and the third left shift in parallel.</p><p id="p-0193" num="0178">Example 23 includes the method of example 19, further including selecting, from a set of processor cores, a subset of processor cores, increasing an operating frequency of the subset of processor cores, and performing the modular multiplication using the subset of processor cores.</p><p id="p-0194" num="0179">Example 24 includes the method of example 23, further including obtaining a power budget, and decreasing an operating frequency of processor cores not in the subset to satisfy the power budget.</p><p id="p-0195" num="0180">Example 25 includes the method of example 19, further including computing the modular multiplication as part of a Montgomery point multiplication or a Twisted Edwards point multiplication.</p><p id="p-0196" num="0181">Example 26 includes the method of example 19, further including computing the modular multiplication as part of an encryption task using Curve 25519 of an elliptic curve Diffie-Hellman (ECDH) key agreement scheme.</p><p id="p-0197" num="0182">Example 27 includes the method of example 19, further including computing the modular multiplication in an amount of time that satisfies a latency threshold.</p><p id="p-0198" num="0183">Example 28 includes an apparatus to perform a modular multiplication, the apparatus comprising means for receiving a first value and a second value, means for selecting to select a first subset of bits and a second subset of bits from the first value, means for multiplying to multiply the first subset to the second value during a first compute cycle, and multiply the second subset to the second value during a second compute cycle, means for performing a plurality of bitwise shift operations with a product of the first subset and the second value during the second compute cycle, means for adding a product of the second subset and the second value to a result of the plurality of bitwise shift operations during the second compute cycle, and means for comparing to determine the result of the modular multiplication based on a comparison of a final addition value with a modulo value, the final addition value based on a result of the addition during the second compute cycle.</p><p id="p-0199" num="0184">Example 29 includes the apparatus of example 28, wherein the means for selecting is further to select a plurality of subsets of bits from the first value, and the means for multiplying is further to multiply the plurality of subsets to the second value in respective compute cycles, where one subset is multiplied with the second value per compute cycle.</p><p id="p-0200" num="0185">Example 30 includes the apparatus of example 29, wherein the first subset of bits, second subset of bits, and plurality of subsets of bits are mutually exclusive, and a superset of the first subset of bits, second subset of bits, and plurality of subsets of bits include all the bits in the first value.</p><p id="p-0201" num="0186">Example 31 includes the apparatus of example 28, wherein the means for performing a plurality of bitwise shift operations is further to perform a first left shift by 1 bit, a second left shift by 2 bits, and a third left shift by 5 bits, the first left shift, second left shift, and third left shift collectively form a multiplication by 38, and the means for performing a plurality of bitwise shift operations is further to perform the first left shift, the second left shift, and the third left shift in parallel.</p><p id="p-0202" num="0187">Example 32 includes the apparatus of example 28, further including means for scaling to select, from a set of processor cores, a subset of processor cores, increase an operating frequency of the subset of processor cores, and perform the modular multiplication using the subset of processor cores.</p><p id="p-0203" num="0188">Example 33 includes the apparatus of example 32, wherein the means for scaling is further to obtain a power budget, and decrease an operating frequency of processor cores not in the subset to satisfy the power budget.</p><p id="p-0204" num="0189">Example 34 includes the apparatus of example 28, wherein the modular multiplication is part of a Montgomery point multiplication or a Twisted Edwards point multiplication.</p><p id="p-0205" num="0190">Example 35 includes the apparatus of example 28, wherein the modular multiplication is part of an encryption task using Curve 25519 of elliptic curve Diffie-Hellman (ECDH) key agreement scheme.</p><p id="p-0206" num="0191">Example 36 includes the apparatus of example 28, wherein the means for comparing is further to determine the result of the modular multiplication in an amount of time that satisfies a latency threshold.</p><p id="p-0207" num="0192">The following claims are hereby incorporated into this Detailed Description by this reference. Although certain example systems, methods, apparatus, and articles of manufacture have been disclosed herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all systems, methods, apparatus, and articles of manufacture fairly falling within the scope of the claims of this patent.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An apparatus to perform a modular multiplication, the apparatus comprising:<claim-text>interface circuitry to receive a first value and a second value;</claim-text><claim-text>selector circuitry to select a first subset of bits and a second subset of bits from the first value;</claim-text><claim-text>multiplier circuitry to:<claim-text>multiply the first subset of bits and the second value during a first compute cycle; and</claim-text><claim-text>multiply the second subset of bits and the second value during a second compute cycle;</claim-text></claim-text><claim-text>left shift circuitry to perform a plurality of bitwise shift operations with a product of the first subset and the second value during the second compute cycle;</claim-text><claim-text>adder circuitry to add a product of the second subset and the second value to a result of the plurality of bitwise shift operations during the second compute cycle; and</claim-text><claim-text>comparator circuitry to determine the result of the modular multiplication based on a comparison of a final addition value with a modulo value, the final addition value based on a result of the addition during the second compute cycle.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the selector circuitry is further to select a plurality of subsets of bits from the first value; and</claim-text><claim-text>the multiplier circuitry is further to multiply the plurality of subsets to the second value in respective compute cycles, where one subset is multiplied with the second value per compute cycle.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The apparatus of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein:<claim-text>the first subset of bits, second subset of bits, and plurality of subsets of bits are mutually exclusive; and</claim-text><claim-text>a superset of the first subset of bits, second subset of bits, and plurality of subsets of bits include all the bits in the first value.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the left shift circuitry is further to perform a first left shift by 1 bit, a second left shift by 2 bits, and a third left shift by 5 bits;</claim-text><claim-text>the first left shift, second left shift, and third left shift collectively form a multiplication by 38; and</claim-text><claim-text>the left shift circuitry is further to perform the first left shift, the second left shift, and the third left shift in parallel.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further including frequency scaler circuitry to:<claim-text>select, from a set of processor cores, a subset of processor cores;</claim-text><claim-text>increase an operating frequency of the subset of processor cores; and</claim-text><claim-text>perform the modular multiplication using the subset of processor cores.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The apparatus of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the frequency scaler circuitry is further to:<claim-text>obtain a power budget; and</claim-text><claim-text>decrease an operating frequency of processor cores not in the subset to satisfy the power budget.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the modular multiplication is part of a Montgomery point multiplication or a Twisted Edwards point multiplication.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the modular multiplication is part of an encryption task using Curve 25519 of elliptic curve Diffie-Hellman (ECDH) key agreement scheme.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the selector circuitry it to further determine a result of the modular multiplication in an amount of time that satisfies a latency threshold.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. At least one non-transitory machine-readable medium comprising instructions that, when executed, cause at least one processor to at least:<claim-text>receive a first value and a second value;</claim-text><claim-text>select a first subset of bits and a second subset of bits from the first value;</claim-text><claim-text>multiply the first subset to the second value during a first compute cycle;</claim-text><claim-text>multiply the second subset to the second value during a second compute cycle;</claim-text><claim-text>perform a plurality of bitwise shift operations with a product of the first subset and the second value during the second compute cycle;</claim-text><claim-text>add a product of the second subset and the second value to a result of the plurality of bitwise shift operations during the second compute cycle; and</claim-text><claim-text>determine the result of a modular multiplication based on a comparison of a final addition value with a modulo value, the final addition value based on a result of the addition during the second compute cycle.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The at least one non-transitory machine-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the instructions, when executed, cause the at least one processor to:<claim-text>select a plurality of subsets of bits from the first value; and</claim-text><claim-text>multiply the plurality of subsets to the second value in respective compute cycles, where one subset is multiplied with the second value per compute cycle.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The at least one non-transitory machine-readable medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the first subset of bits, second subset of bits, and plurality of subsets of bits are mutually exclusive; and</claim-text><claim-text>a superset of the first subset of bits, second subset of bits, and plurality of subsets of bits include all the bits in the first value.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The at least one non-transitory machine-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein:<claim-text>the plurality of bitwise shift operations include a first left shift by 1 bit, a second left shift by 2 bits, and a third left shift by 5 bits;</claim-text><claim-text>the first left shift, second left shift, and third left shift collectively form a multiplication by 38; and</claim-text><claim-text>execute the first left shift, the second left shift, and the third left shift in parallel.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The at least one non-transitory machine-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein:<claim-text>the at least one processor includes a set of processor cores; and</claim-text><claim-text>the instructions, when executed, cause the at least one processor to:</claim-text><claim-text>select a subset of processor cores;<claim-text>increase an operating frequency of the subset of processor cores; and</claim-text><claim-text>perform the modular multiplication using the subset of processor cores.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The at least one non-transitory machine-readable medium of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the instructions, when executed, cause the at least one processor to:<claim-text>obtain a power budget set corresponding to the processor; and</claim-text><claim-text>satisfy the power budget by decreasing an operating frequency of processor cores not in the subset.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The at least one non-transitory machine-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the instructions, when executed, cause the at least one processor to compute the modular multiplication as part of a Montgomery point multiplication or a Twisted Edwards point multiplication.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The at least one non-transitory machine-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the instructions, when executed, cause the at least one processor to compute the modular multiplication as part of an encryption task using Curve 25519 of an elliptic curve Diffie-Hellman (ECDH) key agreement scheme.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The at least one non-transitory machine-readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the instructions, when executed, cause the at least one processor to compute the modular multiplication in an amount of time that satisfies a latency threshold.</claim-text></claim><claim id="CLM-19-27" num="19-27"><claim-text><b>19</b>-<b>27</b>. (canceled)</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. An apparatus to perform a modular multiplication, the apparatus comprising:<claim-text>means for receiving a first value and a second value;</claim-text><claim-text>means for selecting to select a first subset of bits and a second subset of bits from the first value;</claim-text><claim-text>means for multiplying to:<claim-text>multiply the first subset to the second value during a first compute cycle; and</claim-text><claim-text>multiply the second subset to the second value during a second compute cycle;</claim-text></claim-text><claim-text>means for performing a plurality of bitwise shift operations with a product of the first subset and the second value during the second compute cycle;</claim-text><claim-text>means for adding a product of the second subset and the second value to a result of the plurality of bitwise shift operations during the second compute cycle; and</claim-text><claim-text>means for comparing to determine the result of the modular multiplication based on a comparison of a final addition value with a modulo value, the final addition value based on a result of the addition during the second compute cycle.</claim-text></claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The apparatus of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein:<claim-text>the means for selecting is further to select a plurality of subsets of bits from the first value; and</claim-text><claim-text>the means for multiplying is further to multiply the plurality of subsets to the second value in respective compute cycles, where one subset is multiplied with the second value per compute cycle.</claim-text></claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The apparatus of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein:<claim-text>the first subset of bits, second subset of bits, and plurality of subsets of bits are mutually exclusive; and</claim-text><claim-text>a superset of the first subset of bits, second subset of bits, and plurality of subsets of bits include all the bits in the first value.</claim-text></claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The apparatus of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein:<claim-text>the means for performing a plurality of bitwise shift operations is further to perform a first left shift by 1 bit, a second left shift by 2 bits, and a third left shift by 5 bits;</claim-text><claim-text>the first left shift, second left shift, and third left shift collectively form a multiplication by 38; and</claim-text><claim-text>the means for performing a plurality of bitwise shift operations is further to perform the first left shift, the second left shift, and the third left shift in parallel.</claim-text></claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The apparatus of <claim-ref idref="CLM-00028">claim 28</claim-ref>, further including means for scaling to:<claim-text>select, from a set of processor cores, a subset of processor cores;</claim-text><claim-text>increase an operating frequency of the subset of processor cores; and</claim-text><claim-text>perform the modular multiplication using the subset of processor cores.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the means for scaling is further to:<claim-text>obtain a power budget; and</claim-text><claim-text>decrease an operating frequency of processor cores not in the subset to satisfy the power budget.</claim-text></claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The apparatus of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the modular multiplication is part of a Montgomery point multiplication or a Twisted Edwards point multiplication.</claim-text></claim><claim id="CLM-35-36" num="35-36"><claim-text><b>35</b>-<b>36</b>. (canceled)</claim-text></claim></claims></us-patent-application>