<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004467A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004467</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17942974</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>20</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>178</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>1072</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>07</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>445</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>2076</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>2064</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>178</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>1844</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>061</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0684</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>1072</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>2082</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0727</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1464</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0604</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0632</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>065</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0659</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0683</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>275</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>44505</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0751</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1095</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Maintaining A Synchronous Replication Relationship Between Two Or More Storage Systems</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17240334</doc-number><date>20210426</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11442825</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17942974</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>16519474</doc-number><date>20190723</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10990490</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17240334</doc-number></document-id></child-doc></relation></continuation-in-part><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15713153</doc-number><date>20170922</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10365982</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16519474</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62518071</doc-number><date>20170612</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62470172</doc-number><date>20170310</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>PURE STORAGE, INC.</orgname><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>GRUNWALD</last-name><first-name>DAVID</first-name><address><city>SAN FRANCISCO</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>HODGSON</last-name><first-name>STEVEN</first-name><address><city>COBHAM</city><country>GB</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>KARR</last-name><first-name>RONALD</first-name><address><city>PALO ALTO</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>TRIVEDI</last-name><first-name>KUNAL</first-name><address><city>SAN FRANCISCO</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>GOLDEN</last-name><first-name>CHRISTOPHER</first-name><address><city>EMERALD HILLS</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>GILL</last-name><first-name>THOMAS</first-name><address><city>BURY ST EDMUNDS</city><country>GB</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>BROOKS</last-name><first-name>CONNOR</first-name><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="07" designation="us-only"><addressbook><last-name>SHIVANI</last-name><first-name>ZOHEB</first-name><address><city>SANTA CLARA</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Maintaining a synchronous replication relationship between two or more storage systems, including: receiving, by at least one of a plurality of storage systems across which a dataset will be synchronously replicated, timing information for at least one of the plurality of storage systems; and establishing, based on the timing information, a synchronous replication lease describing a period of time during which the synchronous replication relationship is valid, wherein a request to modify the dataset may only be acknowledged after a copy of the dataset has been modified on each of the storage systems.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="212.17mm" wi="158.75mm" file="US20230004467A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="226.23mm" wi="167.81mm" orientation="landscape" file="US20230004467A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="202.18mm" wi="161.71mm" orientation="landscape" file="US20230004467A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="223.60mm" wi="154.26mm" orientation="landscape" file="US20230004467A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="224.96mm" wi="168.06mm" orientation="landscape" file="US20230004467A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="210.82mm" wi="150.37mm" orientation="landscape" file="US20230004467A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="187.71mm" wi="162.98mm" orientation="landscape" file="US20230004467A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="246.13mm" wi="149.10mm" file="US20230004467A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="168.91mm" wi="169.59mm" orientation="landscape" file="US20230004467A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="213.36mm" wi="167.30mm" orientation="landscape" file="US20230004467A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="232.66mm" wi="171.62mm" file="US20230004467A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="225.89mm" wi="143.59mm" file="US20230004467A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="207.26mm" wi="124.29mm" file="US20230004467A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="235.80mm" wi="169.76mm" file="US20230004467A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="139.78mm" wi="122.09mm" file="US20230004467A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="225.64mm" wi="169.59mm" file="US20230004467A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="231.90mm" wi="169.59mm" file="US20230004467A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="232.66mm" wi="169.67mm" file="US20230004467A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="244.01mm" wi="169.08mm" file="US20230004467A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a continuation application for patent entitled to a filing date and claiming the benefit of earlier-filed U.S. Pat. No. 11,442,825, issued Sep. 13, 2022, herein incorporated by reference in its entirety, which is a continuation in-part of U.S. Pat. No. 10,990,490, issued Apr. 27, 2021, which is a continuation of U.S. Pat. No. 10,365,982, issued Jul. 30, 2019, which claims priority from U.S. Provisional Application No. 62/470,172, filed Mar. 10, 2017, and U.S. Provisional Application No. 62/518,071, filed Jun. 12, 2017.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0003" num="0002"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates a first example system for data storage in accordance with some implementations.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates a second example system for data storage in accordance with some implementations.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system for data storage in accordance with some implementations.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a fourth example system for data storage in accordance with some implementations.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster with multiple storage nodes and internal storage coupled to each storage node to provide network attached storage, in accordance with some embodiments.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing an interconnect switch coupling multiple storage nodes in accordance with some embodiments.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node and contents of one of the non-volatile solid state storage units in accordance with some embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes and storage units of some previous figures in accordance with some embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade hardware block diagram, showing a control plane, compute and storage planes, and authorities interacting with underlying physical resources, in accordance with some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities and storage resources in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system that is coupled for data communications with a cloud services provider in accordance with some embodiments of the present disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> sets forth an example of a cloud-based storage system <b>318</b> in accordance with some embodiments of the present disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b></figref> sets forth a flow chart illustrating an example method for establishing a synchronous replication relationship between two or more storage systems according to some embodiments of the present disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth a flow chart illustrating an additional example method for establishing a synchronous replication relationship between two or more storage systems according to some embodiments of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth a flow chart illustrating an additional example method for establishing a synchronous replication relationship between two or more storage systems according to some embodiments of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth a flow chart illustrating an additional example method for establishing a synchronous replication relationship between two or more storage systems according to some embodiments of the present disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0021" num="0020">Example methods, apparatus, and products for establishing a synchronous replication relationship between two or more storage systems in accordance with embodiments of the present disclosure are described with reference to the accompanying drawings, beginning with <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates an example system for data storage, in accordance with some implementations. System <b>100</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>100</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0022" num="0021">System <b>100</b> includes a number of computing devices <b>164</b>A-B. Computing devices (also referred to as &#x201c;client devices&#x201d; herein) may be embodied, for example, a server in a data center, a workstation, a personal computer, a notebook, or the like. Computing devices <b>164</b>A-B may be coupled for data communications to one or more storage arrays <b>102</b>A-B through a storage area network (&#x2018;SAN&#x2019;) <b>158</b> or a local area network (&#x2018;LAN&#x2019;) <b>160</b>.</p><p id="p-0023" num="0022">The SAN <b>158</b> may be implemented with a variety of data communications fabrics, devices, and protocols. For example, the fabrics for SAN <b>158</b> may include Fibre Channel, Ethernet, Infiniband, Serial Attached Small Computer System Interface (&#x2018;SAS&#x2019;), or the like. Data communications protocols for use with SAN <b>158</b> may include Advanced Technology Attachment (&#x2018;ATA&#x2019;), Fibre Channel Protocol, Small Computer System Interface (&#x2018;SCSI&#x2019;), Internet Small Computer System Interface (&#x2018;iSCSI&#x2019;), HyperSCSI, Non-Volatile Memory Express (&#x2018;NVMe&#x2019;) over Fabrics, or the like. It may be noted that SAN <b>158</b> is provided for illustration, rather than limitation. Other data communication couplings may be implemented between computing devices <b>164</b>A-B and storage arrays <b>102</b>A-B.</p><p id="p-0024" num="0023">The LAN <b>160</b> may also be implemented with a variety of fabrics, devices, and protocols. For example, the fabrics for LAN <b>160</b> may include Ethernet (<b>802</b>.<b>3</b>), wireless (<b>802</b>.<b>11</b>), or the like. Data communication protocols for use in LAN <b>160</b> may include Transmission Control Protocol (&#x2018;TCP&#x2019;), User Datagram Protocol (&#x2018;UDP&#x2019;), Internet Protocol (&#x2018;IP&#x2019;), HyperText Transfer Protocol (&#x2018;HTTP&#x2019;), Wireless Access Protocol (&#x2018;WAP&#x2019;), Handheld Device Transport Protocol (&#x2018;HDTP&#x2019;), Session Initiation Protocol (&#x2018;SIP&#x2019;), Real Time Protocol (&#x2018;RTP&#x2019;), or the like.</p><p id="p-0025" num="0024">Storage arrays <b>102</b>A-B may provide persistent data storage for the computing devices <b>164</b>A-B. Storage array <b>102</b>A may be contained in a chassis (not shown), and storage array <b>102</b>B may be contained in another chassis (not shown), in implementations. Storage array <b>102</b>A and <b>102</b>B may include one or more storage array controllers <b>110</b>A-D (also referred to as &#x201c;controller&#x201d; herein). A storage array controller <b>110</b>A-D may be embodied as a module of automated computing machinery comprising computer hardware, computer software, or a combination of computer hardware and software. In some implementations, the storage array controllers <b>110</b>A-D may be configured to carry out various storage tasks. Storage tasks may include writing data received from the computing devices <b>164</b>A-B to storage array <b>102</b>A-B, erasing data from storage array <b>102</b>A-B, retrieving data from storage array <b>102</b>A-B and providing data to computing devices <b>164</b>A-B, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as Redundant Array of Independent Drives (&#x2018;RAID&#x2019;) or RAID-like data redundancy operations, compressing data, encrypting data, and so forth.</p><p id="p-0026" num="0025">Storage array controller <b>110</b>A-D may be implemented in a variety of ways, including as a Field Programmable Gate Array (&#x2018;FPGA&#x2019;), a Programmable Logic Chip (&#x2018;PLC&#x2019;), an Application Specific Integrated Circuit (&#x2018;ASIC&#x2019;), System-on-Chip (&#x2018;SOC&#x2019;), or any computing device that includes discrete components such as a processing device, central processing unit, computer memory, or various adapters. Storage array controller <b>110</b>A-D may include, for example, a data communications adapter configured to support communications via the SAN <b>158</b> or LAN <b>160</b>. In some implementations, storage array controller <b>110</b>A-D may be independently coupled to the LAN <b>160</b>. In implementations, storage array controller <b>110</b>A-D may include an I/O controller or the like that couples the storage array controller <b>110</b>A-D for data communications, through a midplane (not shown), to a persistent storage resource <b>170</b>A-B (also referred to as a &#x201c;storage resource&#x201d; herein). The persistent storage resource <b>170</b>A-B main include any number of storage drives <b>171</b>A-F (also referred to as &#x201c;storage devices&#x201d; herein) and any number of non-volatile Random Access Memory (&#x2018;NVRAM&#x2019;) devices (not shown).</p><p id="p-0027" num="0026">In some implementations, the NVRAM devices of a persistent storage resource <b>170</b>A-B may be configured to receive, from the storage array controller <b>110</b>A-D, data to be stored in the storage drives <b>171</b>A-F. In some examples, the data may originate from computing devices <b>164</b>A-B. In some examples, writing data to the NVRAM device may be carried out more quickly than directly writing data to the storage drive <b>171</b>A-F. In implementations, the storage array controller <b>110</b>A-D may be configured to utilize the NVRAM devices as a quickly accessible buffer for data destined to be written to the storage drives <b>171</b>A-F. Latency for write requests using NVRAM devices as a buffer may be improved relative to a system in which a storage array controller <b>110</b>A-D writes data directly to the storage drives <b>171</b>A-F. In some implementations, the NVRAM devices may be implemented with computer memory in the form of high bandwidth, low latency RAM. The NVRAM device is referred to as &#x201c;non-volatile&#x201d; because the NVRAM device may receive or include a unique power source that maintains the state of the RAM after main power loss to the NVRAIVI device. Such a power source may be a battery, one or more capacitors, or the like. In response to a power loss, the NVRAIVI device may be configured to write the contents of the RAM to a persistent storage, such as the storage drives <b>171</b>A-F.</p><p id="p-0028" num="0027">In implementations, storage drive <b>171</b>A-F may refer to any device configured to record data persistently, where &#x201c;persistently&#x201d; or &#x201c;persistent&#x201d; refers as to a device's ability to maintain recorded data after loss of power. In some implementations, storage drive <b>171</b>A-F may correspond to non-disk storage media. For example, the storage drive <b>171</b>A-F may be one or more solid-state drives (&#x2018;SSDs&#x2019;), flash memory based storage, any type of solid-state non-volatile memory, or any other type of non-mechanical storage device. In other implementations, storage drive <b>171</b>A-F may include mechanical or spinning hard disk, such as hard-disk drives (&#x2018;HDD&#x2019;).</p><p id="p-0029" num="0028">In some implementations, the storage array controllers <b>110</b>A-D may be configured for offloading device management responsibilities from storage drive <b>171</b>A-F in storage array <b>102</b>A-B. For example, storage array controllers <b>110</b>A-D may manage control information that may describe the state of one or more memory blocks in the storage drives <b>171</b>A-F. The control information may indicate, for example, that a particular memory block has failed and should no longer be written to, that a particular memory block contains boot code for a storage array controller <b>110</b>A-D, the number of program-erase (&#x2018;PIE&#x2019;) cycles that have been performed on a particular memory block, the age of data stored in a particular memory block, the type of data that is stored in a particular memory block, and so forth. In some implementations, the control information may be stored with an associated memory block as metadata. In other implementations, the control information for the storage drives <b>171</b>A-F may be stored in one or more particular memory blocks of the storage drives <b>171</b>A-F that are selected by the storage array controller <b>110</b>A-D. The selected memory blocks may be tagged with an identifier indicating that the selected memory block contains control information. The identifier may be utilized by the storage array controllers <b>110</b>A-D in conjunction with storage drives <b>171</b>A-F to quickly identify the memory blocks that contain control information. For example, the storage controllers <b>110</b>A-D may issue a command to locate memory blocks that contain control information. It may be noted that control information may be so large that parts of the control information may be stored in multiple locations, that the control information may be stored in multiple locations for purposes of redundancy, for example, or that the control information may otherwise be distributed across multiple memory blocks in the storage drive <b>171</b>A-F.</p><p id="p-0030" num="0029">In implementations, storage array controllers <b>110</b>A-D may offload device management responsibilities from storage drives <b>171</b>A-F of storage array <b>102</b>A-B by retrieving, from the storage drives <b>171</b>A-F, control information describing the state of one or more memory blocks in the storage drives <b>171</b>A-F. Retrieving the control information from the storage drives <b>171</b>A-F may be carried out, for example, by the storage array controller <b>110</b>A-D querying the storage drives <b>171</b>A-F for the location of control information for a particular storage drive <b>171</b>A-F. The storage drives <b>171</b>A-F may be configured to execute instructions that enable the storage drive <b>171</b>A-F to identify the location of the control information. The instructions may be executed by a controller (not shown) associated with or otherwise located on the storage drive <b>171</b>A-F and may cause the storage drive <b>171</b>A-F to scan a portion of each memory block to identify the memory blocks that store control information for the storage drives <b>171</b>A-F. The storage drives <b>171</b>A-F may respond by sending a response message to the storage array controller <b>110</b>A-D that includes the location of control information for the storage drive <b>171</b>A-F. Responsive to receiving the response message, storage array controllers <b>110</b>A-D may issue a request to read data stored at the address associated with the location of control information for the storage drives <b>171</b>A-F.</p><p id="p-0031" num="0030">In other implementations, the storage array controllers <b>110</b>A-D may further offload device management responsibilities from storage drives <b>171</b>A-F by performing, in response to receiving the control information, a storage drive management operation. A storage drive management operation may include, for example, an operation that is typically performed by the storage drive <b>171</b>A-F (e.g., the controller (not shown) associated with a particular storage drive <b>171</b>A-F). A storage drive management operation may include, for example, ensuring that data is not written to failed memory blocks within the storage drive <b>171</b>A-F, ensuring that data is written to memory blocks within the storage drive <b>171</b>A-F in such a way that adequate wear leveling is achieved, and so forth.</p><p id="p-0032" num="0031">In implementations, storage array <b>102</b>A-B may implement two or more storage array controllers <b>110</b>A-D. For example, storage array <b>102</b>A may include storage array controllers <b>110</b>A and storage array controllers <b>110</b>B. At a given instance, a single storage array controller <b>110</b>A-D (e.g., storage array controller <b>110</b>A) of a storage system <b>100</b> may be designated with primary status (also referred to as &#x201c;primary controller&#x201d; herein), and other storage array controllers <b>110</b>A-D (e.g., storage array controller <b>110</b>A) may be designated with secondary status (also referred to as &#x201c;secondary controller&#x201d; herein). The primary controller may have particular rights, such as permission to alter data in persistent storage resource <b>170</b>A-B (e.g., writing data to persistent storage resource <b>170</b>A-B). At least some of the rights of the primary controller may supersede the rights of the secondary controller. For instance, the secondary controller may not have permission to alter data in persistent storage resource <b>170</b>A-B when the primary controller has the right. The status of storage array controllers <b>110</b>A-D may change. For example, storage array controller <b>110</b>A may be designated with secondary status, and storage array controller <b>110</b>B may be designated with primary status.</p><p id="p-0033" num="0032">In some implementations, a primary controller, such as storage array controller <b>110</b>A, may serve as the primary controller for one or more storage arrays <b>102</b>A-B, and a second controller, such as storage array controller <b>110</b>B, may serve as the secondary controller for the one or more storage arrays <b>102</b>A-B. For example, storage array controller <b>110</b>A may be the primary controller for storage array <b>102</b>A and storage array <b>102</b>B, and storage array controller <b>110</b>B may be the secondary controller for storage array <b>102</b>A and <b>102</b>B. In some implementations, storage array controllers <b>110</b>C and <b>110</b>D (also referred to as &#x201c;storage processing modules&#x201d;) may neither have primary or secondary status. Storage array controllers <b>110</b>C and <b>110</b>D, implemented as storage processing modules, may act as a communication interface between the primary and secondary controllers (e.g., storage array controllers <b>110</b>A and <b>110</b>B, respectively) and storage array <b>102</b>B. For example, storage array controller <b>110</b>A of storage array <b>102</b>A may send a write request, via SAN <b>158</b>, to storage array <b>102</b>B. The write request may be received by both storage array controllers <b>110</b>C and <b>110</b>D of storage array <b>102</b>B. Storage array controllers <b>110</b>C and <b>110</b>D facilitate the communication, e.g., send the write request to the appropriate storage drive <b>171</b>A-F. It may be noted that in some implementations storage processing modules may be used to increase the number of storage drives controlled by the primary and secondary controllers.</p><p id="p-0034" num="0033">In implementations, storage array controllers <b>110</b>A-D are communicatively coupled, via a midplane (not shown), to one or more storage drives <b>171</b>A-F and to one or more NVRAM devices (not shown) that are included as part of a storage array <b>102</b>A-B. The storage array controllers <b>110</b>A-D may be coupled to the midplane via one or more data communication links and the midplane may be coupled to the storage drives <b>171</b>A-F and the NVRAM devices via one or more data communications links. The data communications links described herein are collectively illustrated by data communications links <b>108</b>A-D and may include a Peripheral Component Interconnect Express (&#x2018;PCIe&#x2019;) bus, for example.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates an example system for data storage, in accordance with some implementations. Storage array controller <b>101</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> may be similar to the storage array controllers <b>110</b>A-D described with respect to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. In one example, storage array controller <b>101</b> may be similar to storage array controller <b>110</b>A or storage array controller <b>110</b>B. Storage array controller <b>101</b> includes numerous elements for purposes of illustration rather than limitation. It may be noted that storage array controller <b>101</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations. It may be noted that elements of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> may be included below to help illustrate features of storage array controller <b>101</b>.</p><p id="p-0036" num="0035">Storage array controller <b>101</b> may include one or more processing devices <b>104</b> and random access memory (&#x2018;RAM&#x2019;) <b>111</b>. Processing device <b>104</b> (or controller <b>101</b>) represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device <b>104</b> (or controller <b>101</b>) may be a complex instruction set computing (&#x2018;CISC&#x2019;) microprocessor, reduced instruction set computing (&#x2018;RISC&#x2019;) microprocessor, very long instruction word (&#x2018;VLIW&#x2019;) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device <b>104</b> (or controller <b>101</b>) may also be one or more special-purpose processing devices such as an ASIC, an FPGA, a digital signal processor (&#x2018;DSP&#x2019;), network processor, or the like.</p><p id="p-0037" num="0036">The processing device <b>104</b> may be connected to the RAM <b>111</b> via a data communications link <b>106</b>, which may be embodied as a high speed memory bus such as a Double-Data Rate 4 (&#x2018;DDR4&#x2019;) bus. Stored in RAM <b>111</b> is an operating system <b>112</b>. In some implementations, instructions <b>113</b> are stored in RAM <b>111</b>. Instructions <b>113</b> may include computer program instructions for performing operations in in a direct-mapped flash storage system. In one embodiment, a direct-mapped flash storage system is one that that addresses data blocks within flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0038" num="0037">In implementations, storage array controller <b>101</b> includes one or more host bus adapters <b>103</b>A-C that are coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C. In implementations, host bus adapters <b>103</b>A-C may be computer hardware that connects a host system (e.g., the storage array controller) to other network and storage arrays. In some examples, host bus adapters <b>103</b>A-C may be a Fibre Channel adapter that enables the storage array controller <b>101</b> to connect to a SAN, an Ethernet adapter that enables the storage array controller <b>101</b> to connect to a LAN, or the like. Host bus adapters <b>103</b>A-C may be coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C such as, for example, a PCIe bus.</p><p id="p-0039" num="0038">In implementations, storage array controller <b>101</b> may include a host bus adapter <b>114</b> that is coupled to an expander <b>115</b>. The expander <b>115</b> may be used to attach a host system to a larger number of storage drives. The expander <b>115</b> may, for example, be a SAS expander utilized to enable the host bus adapter <b>114</b> to attach to storage drives in an implementation where the host bus adapter <b>114</b> is embodied as a SAS controller.</p><p id="p-0040" num="0039">In implementations, storage array controller <b>101</b> may include a switch <b>116</b> coupled to the processing device <b>104</b> via a data communications link <b>109</b>. The switch <b>116</b> may be a computer hardware device that can create multiple endpoints out of a single endpoint, thereby enabling multiple devices to share a single endpoint. The switch <b>116</b> may, for example, be a PCIe switch that is coupled to a PCIe bus (e.g., data communications link <b>109</b>) and presents multiple PCIe connection points to the midplane.</p><p id="p-0041" num="0040">In implementations, storage array controller <b>101</b> includes a data communications link <b>107</b> for coupling the storage array controller <b>101</b> to other storage array controllers. In some examples, data communications link <b>107</b> may be a QuickPath Interconnect (QPI) interconnect.</p><p id="p-0042" num="0041">A traditional storage system that uses traditional flash drives may implement a process across the flash drives that are part of the traditional storage system. For example, a higher level process of the storage system may initiate and control a process across the flash drives. However, a flash drive of the traditional storage system may include its own storage controller that also performs the process. Thus, for the traditional storage system, a higher level process (e.g., initiated by the storage system) and a lower level process (e.g., initiated by a storage controller of the storage system) may both be performed.</p><p id="p-0043" num="0042">To resolve various deficiencies of a traditional storage system, operations may be performed by higher level processes and not by the lower level processes. For example, the flash storage system may include flash drives that do not include storage controllers that provide the process. Thus, the operating system of the flash storage system itself may initiate and control the process. This may be accomplished by a direct-mapped flash storage system that addresses data blocks within the flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0044" num="0043">In implementations, storage drive <b>171</b>A-F may be one or more zoned storage devices. In some implementations, the one or more zoned storage devices may be a shingled HDD. In implementations, the one or more storage devices may be a flash-based SSD. In a zoned storage device, a zoned namespace on the zoned storage device can be addressed by groups of blocks that are grouped and aligned by a natural size, forming a number of addressable zones. In implementations utilizing an SSD, the natural size may be based on the erase block size of the SSD.</p><p id="p-0045" num="0044">The mapping from a zone to an erase block (or to a shingled track in an HDD) may be arbitrary, dynamic, and hidden from view. The process of opening a zone may be an operation that allows a new zone to be dynamically mapped to underlying storage of the zoned storage device, and then allows data to be written through appending writes into the zone until the zone reaches capacity. The zone can be finished at any point, after which further data may not be written into the zone. When the data stored at the zone is no longer needed, the zone can be reset which effectively deletes the zone's content from the zoned storage device, making the physical storage held by that zone available for the subsequent storage of data. Once a zone has been written and finished, the zoned storage device ensures that the data stored at the zone is not lost until the zone is reset. In the time between writing the data to the zone and the resetting of the zone, the zone may be moved around between shingle tracks or erase blocks as part of maintenance operations within the zoned storage device, such as by copying data to keep the data refreshed or to handle memory cell aging in an SSD.</p><p id="p-0046" num="0045">In implementations utilizing an HDD, the resetting of the zone may allow the shingle tracks to be allocated to a new, opened zone that may be opened at some point in the future. In implementations utilizing an SSD, the resetting of the zone may cause the associated physical erase block(s) of the zone to be erased and subsequently reused for the storage of data. In some implementations, the zoned storage device may have a limit on the number of open zones at a point in time to reduce the amount of overhead dedicated to keeping zones open.</p><p id="p-0047" num="0046">The operating system of the flash storage system may identify and maintain a list of allocation units across multiple flash drives of the flash storage system. The allocation units may be entire erase blocks or multiple erase blocks. The operating system may maintain a map or address range that directly maps addresses to erase blocks of the flash drives of the flash storage system.</p><p id="p-0048" num="0047">Direct mapping to the erase blocks of the flash drives may be used to rewrite data and erase data. For example, the operations may be performed on one or more allocation units that include a first data and a second data where the first data is to be retained and the second data is no longer being used by the flash storage system. The operating system may initiate the process to write the first data to new locations within other allocation units and erasing the second data and marking the allocation units as being available for use for subsequent data. Thus, the process may only be performed by the higher level operating system of the flash storage system without an additional lower level process being performed by controllers of the flash drives.</p><p id="p-0049" num="0048">Advantages of the process being performed only by the operating system of the flash storage system include increased reliability of the flash drives of the flash storage system as unnecessary or redundant write operations are not being performed during the process. One possible point of novelty here is the concept of initiating and controlling the process at the operating system of the flash storage system. In addition, the process can be controlled by the operating system across multiple flash drives. This is contrast to the process being performed by a storage controller of a flash drive.</p><p id="p-0050" num="0049">A storage system can consist of two storage array controllers that share a set of drives for failover purposes, or it could consist of a single storage array controller that provides a storage service that utilizes multiple drives, or it could consist of a distributed network of storage array controllers each with some number of drives or some amount of Flash storage where the storage array controllers in the network collaborate to provide a complete storage service and collaborate on various aspects of a storage service including storage allocation and garbage collection.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system <b>117</b> for data storage in accordance with some implementations. System <b>117</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>117</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0052" num="0051">In one embodiment, system <b>117</b> includes a dual Peripheral Component Interconnect (&#x2018;PCI&#x2019;) flash storage device <b>118</b> with separately addressable fast write storage. System <b>117</b> may include a storage device controller <b>119</b>. In one embodiment, storage device controller <b>119</b>A-D may be a CPU, ASIC, FPGA, or any other circuitry that may implement control structures necessary according to the present disclosure. In one embodiment, system <b>117</b> includes flash memory devices (e.g., including flash memory devices <b>120</b><i>a</i>-<i>n</i>), operatively coupled to various channels of the storage device controller <b>119</b>. Flash memory devices <b>120</b><i>a</i>-<i>n, </i>may be presented to the controller <b>119</b>A-D as an addressable collection of Flash pages, erase blocks, and/or control elements sufficient to allow the storage device controller <b>119</b>A-D to program and retrieve various aspects of the Flash. In one embodiment, storage device controller <b>119</b>A-D may perform operations on flash memory devices <b>120</b><i>a</i>-<i>n </i>including storing and retrieving data content of pages, arranging and erasing any blocks, tracking statistics related to the use and reuse of Flash memory pages, erase blocks, and cells, tracking and predicting error codes and faults within the Flash memory, controlling voltage levels associated with programming and retrieving contents of Flash cells, etc.</p><p id="p-0053" num="0052">In one embodiment, system <b>117</b> may include RAM <b>121</b> to store separately addressable fast-write data. In one embodiment, RAM <b>121</b> may be one or more separate discrete devices. In another embodiment, RAM <b>121</b> may be integrated into storage device controller <b>119</b>A-D or multiple storage device controllers. The RAM <b>121</b> may be utilized for other purposes as well, such as temporary program memory for a processing device (e.g., a CPU) in the storage device controller <b>119</b>.</p><p id="p-0054" num="0053">In one embodiment, system <b>117</b> may include a stored energy device <b>122</b>, such as a rechargeable battery or a capacitor. Stored energy device <b>122</b> may store energy sufficient to power the storage device controller <b>119</b>, some amount of the RAM (e.g., RAM <b>121</b>), and some amount of Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<b>120</b><i>n</i>) for sufficient time to write the contents of RAM to Flash memory. In one embodiment, storage device controller <b>119</b>A-D may write the contents of RAM to Flash Memory if the storage device controller detects loss of external power.</p><p id="p-0055" num="0054">In one embodiment, system <b>117</b> includes two data communications links <b>123</b><i>a, </i><b>123</b><i>b. </i>In one embodiment, data communications links <b>123</b><i>a, </i><b>123</b><i>b </i>may be PCI interfaces. In another embodiment, data communications links <b>123</b><i>a, </i><b>123</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Data communications links <b>123</b><i>a, </i><b>123</b><i>b </i>may be based on non-volatile memory express (&#x2018;NVMe&#x2019;) or NVMe over fabrics (&#x2018;NVMf&#x2019;) specifications that allow external connection to the storage device controller <b>119</b>A-D from other components in the storage system <b>117</b>. It should be noted that data communications links may be interchangeably referred to herein as PCI buses for convenience.</p><p id="p-0056" num="0055">System <b>117</b> may also include an external power source (not shown), which may be provided over one or both data communications links <b>123</b><i>a, </i><b>123</b><i>b, </i>or which may be provided separately. An alternative embodiment includes a separate Flash memory (not shown) dedicated for use in storing the content of RAM <b>121</b>. The storage device controller <b>119</b>A-D may present a logical device over a PCI bus which may include an addressable fast-write logical device, or a distinct part of the logical address space of the storage device <b>118</b>, which may be presented as PCI memory or as persistent storage. In one embodiment, operations to store into the device are directed into the RAM <b>121</b>. On power failure, the storage device controller <b>119</b>A-D may write stored content associated with the addressable fast-write logical storage to Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<i>n</i>) for long-term persistent storage.</p><p id="p-0057" num="0056">In one embodiment, the logical device may include some presentation of some or all of the content of the Flash memory devices <b>120</b><i>a</i>-<i>n, </i>where that presentation allows a storage system including a storage device <b>118</b> (e.g., storage system <b>117</b>) to directly address Flash memory pages and directly reprogram erase blocks from storage system components that are external to the storage device through the PCI bus. The presentation may also allow one or more of the external components to control and retrieve other aspects of the Flash memory including some or all of: tracking statistics related to use and reuse of Flash memory pages, erase blocks, and cells across all the Flash memory devices; tracking and predicting error codes and faults within and across the Flash memory devices; controlling voltage levels associated with programming and retrieving contents of Flash cells; etc.</p><p id="p-0058" num="0057">In one embodiment, the stored energy device <b>122</b> may be sufficient to ensure completion of in-progress operations to the Flash memory devices <b>120</b><i>a</i>-<b>120</b><i>n </i>stored energy device <b>122</b> may power storage device controller <b>119</b>A-D and associated Flash memory devices (e.g., <b>120</b><i>a</i>-<i>n</i>) for those operations, as well as for the storing of fast-write RAM to Flash memory. Stored energy device <b>122</b> may be used to store accumulated statistics and other parameters kept and tracked by the Flash memory devices <b>120</b><i>a</i>-<i>n </i>and/or the storage device controller <b>119</b>. Separate capacitors or stored energy devices (such as smaller capacitors near or embedded within the Flash memory devices themselves) may be used for some or all of the operations described herein.</p><p id="p-0059" num="0058">Various schemes may be used to track and optimize the life span of the stored energy component, such as adjusting voltage levels over time, partially discharging the stored energy device <b>122</b> to measure corresponding discharge characteristics, etc. If the available energy decreases over time, the effective available capacity of the addressable fast-write storage may be decreased to ensure that it can be written safely based on the currently available stored energy.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a third example storage system <b>124</b> for data storage in accordance with some implementations. In one embodiment, storage system <b>124</b> includes storage controllers <b>125</b><i>a, </i><b>125</b><i>b. </i>In one embodiment, storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>are operatively coupled to Dual PCI storage devices. Storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may be operatively coupled (e.g., via a storage network <b>130</b>) to some number of host computers <b>127</b><i>a</i>-<i>n. </i></p><p id="p-0061" num="0060">In one embodiment, two storage controllers (e.g., <b>125</b><i>a </i>and <b>125</b><i>b</i>) provide storage services, such as a SCS) block storage array, a file server, an object server, a database or data analytics service, etc. The storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may provide services through some number of network interfaces (e.g., <b>126</b><i>a</i>-<i>d</i>) to host computers <b>127</b><i>a</i>-<i>n </i>outside of the storage system <b>124</b>. Storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may provide integrated services or an application entirely within the storage system <b>124</b>, forming a converged storage and compute system. The storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may utilize the fast write memory within or across storage devices <b>119</b><i>a</i>-<i>d </i>to journal in progress operations to ensure the operations are not lost on a power failure, storage controller removal, storage controller or storage system shutdown, or some fault of one or more software or hardware components within the storage system <b>124</b>.</p><p id="p-0062" num="0061">In one embodiment, storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>operate as PCI masters to one or the other PCI buses <b>128</b><i>a, </i><b>128</b><i>b. </i>In another embodiment, <b>128</b><i>a </i>and <b>128</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Other storage system embodiments may operate storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>as multi-masters for both PCI buses <b>128</b><i>a, </i><b>128</b><i>b. </i>Alternately, a PCI/NVMe/NVMf switching infrastructure or fabric may connect multiple storage controllers. Some storage system embodiments may allow storage devices to communicate with each other directly rather than communicating only with storage controllers. In one embodiment, a storage device controller <b>119</b><i>a </i>may be operable under direction from a storage controller <b>125</b><i>a </i>to synthesize and transfer data to be stored into Flash memory devices from data that has been stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>). For example, a recalculated version of RAM content may be transferred after a storage controller has determined that an operation has fully committed across the storage system, or when fast-write memory on the device has reached a certain used capacity, or after a certain amount of time, to ensure improve safety of the data or to release addressable fast-write capacity for reuse. This mechanism may be used, for example, to avoid a second transfer over a bus (e.g., <b>128</b><i>a, </i><b>128</b><i>b</i>) from the storage controllers <b>125</b><i>a, </i><b>125</b><i>b. </i>In one embodiment, a recalculation may include compressing data, attaching indexing or other metadata, combining multiple data segments together, performing erasure code calculations, etc.</p><p id="p-0063" num="0062">In one embodiment, under direction from a storage controller <b>125</b><i>a, </i><b>125</b><i>b, </i>a storage device controller <b>119</b><i>a, </i><b>119</b><i>b </i>may be operable to calculate and transfer data to other storage devices from data stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>) without involvement of the storage controllers <b>125</b><i>a, </i><b>125</b><i>b. </i>This operation may be used to mirror data stored in one storage controller <b>125</b><i>a </i>to another storage controller <b>125</b><i>b, </i>or it could be used to offload compression, data aggregation, and/or erasure coding calculations and transfers to storage devices to reduce load on storage controllers or the storage controller interface <b>129</b><i>a, </i><b>129</b><i>b </i>to the PCI bus <b>128</b><i>a, </i><b>128</b><i>b. </i></p><p id="p-0064" num="0063">A storage device controller <b>119</b>A-D may include mechanisms for implementing high availability primitives for use by other parts of a storage system external to the Dual PCI storage device <b>118</b>. For example, reservation or exclusion primitives may be provided so that, in a storage system with two storage controllers providing a highly available storage service, one storage controller may prevent the other storage controller from accessing or continuing to access the storage device. This could be used, for example, in cases where one controller detects that the other controller is not functioning properly or where the interconnect between the two storage controllers may itself not be functioning properly.</p><p id="p-0065" num="0064">In one embodiment, a storage system for use with Dual PCI direct mapped storage devices with separately addressable fast write storage includes systems that manage erase blocks or groups of erase blocks as allocation units for storing data on behalf of the storage service, or for storing metadata (e.g., indexes, logs, etc.) associated with the storage service, or for proper management of the storage system itself. Flash pages, which may be a few kilobytes in size, may be written as data arrives or as the storage system is to persist data for long intervals of time (e.g., above a defined threshold of time). To commit data more quickly, or to reduce the number of writes to the Flash memory devices, the storage controllers may first write data into the separately addressable fast write storage on one more storage devices.</p><p id="p-0066" num="0065">In one embodiment, the storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may initiate the use of erase blocks within and across storage devices (e.g., <b>118</b>) in accordance with an age and expected remaining lifespan of the storage devices, or based on other statistics. The storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may initiate garbage collection and data migration data between storage devices in accordance with pages that are no longer needed as well as to manage Flash page and erase block lifespans and to manage overall system performance.</p><p id="p-0067" num="0066">In one embodiment, the storage system <b>124</b> may utilize mirroring and/or erasure coding schemes as part of storing data into addressable fast write storage and/or as part of writing data into allocation units associated with erase blocks. Erasure codes may be used across storage devices, as well as within erase blocks or allocation units, or within and across Flash memory devices on a single storage device, to provide redundancy against single or multiple storage device failures or to protect against internal corruptions of Flash memory pages resulting from Flash memory operations or from degradation of Flash memory cells. Mirroring and erasure coding at various levels may be used to recover from multiple types of failures that occur separately or in combination.</p><p id="p-0068" num="0067">The embodiments depicted with reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A-G</figref> illustrate a storage cluster that stores user data, such as user data originating from one or more user or client systems or other sources external to the storage cluster. The storage cluster distributes user data across storage nodes housed within a chassis, or across multiple chassis, using erasure coding and redundant copies of metadata. Erasure coding refers to a method of data protection or reconstruction in which data is stored across a set of different locations, such as disks, storage nodes or geographic locations. Flash memory is one type of solid-state memory that may be integrated with the embodiments, although the embodiments may be extended to other types of solid-state memory or other storage medium, including non-solid state memory. Control of storage locations and workloads are distributed across the storage locations in a clustered peer-to-peer system. Tasks such as mediating communications between the various storage nodes, detecting when a storage node has become unavailable, and balancing s (inputs and outputs) across the various storage nodes, are all handled on a distributed basis. Data is laid out or distributed across multiple storage nodes in data fragments or stripes that support data recovery in some embodiments. Ownership of data can be reassigned within a cluster, independent of input and output patterns. This architecture described in more detail below allows a storage node in the cluster to fail, with the system remaining operational, since the data can be reconstructed from other storage nodes and thus remain available for input and output operations. In various embodiments, a storage node may be referred to as a cluster node, a blade, or a server.</p><p id="p-0069" num="0068">The storage cluster may be contained within a chassis, i.e., an enclosure housing one or more storage nodes. A mechanism to provide power to each storage node, such as a power distribution bus, and a communication mechanism, such as a communication bus that enables communication between the storage nodes are included within the chassis. The storage cluster can run as an independent system in one location according to some embodiments. In one embodiment, a chassis contains at least two instances of both the power distribution and the communication bus which may be enabled or disabled independently. The internal communication bus may be an Ethernet bus, however, other technologies such as PCIe, InfiniBand, and others, are equally suitable. The chassis provides a port for an external communication bus for enabling communication between multiple chassis, directly or through a switch, and with client systems. The external communication may use a technology such as Ethernet, InfiniBand, Fibre Channel, etc. In some embodiments, the external communication bus uses different communication bus technologies for inter-chassis and client communication. If a switch is deployed within or between chassis, the switch may act as a translation between multiple protocols or technologies. When multiple chassis are connected to define a storage cluster, the storage cluster may be accessed by a client using either proprietary interfaces or standard interfaces such as network file system (&#x2018;NFS&#x2019;), common internet file system (&#x2018;CIFS&#x2019;), small computer system interface (&#x2018;SCSI&#x2019;) or hypertext transfer protocol (&#x2018;HTTP&#x2019;). Translation from the client protocol may occur at the switch, chassis external communication bus or within each storage node. In some embodiments, multiple chassis may be coupled or connected to each other through an aggregator switch. A portion and/or all of the coupled or connected chassis may be designated as a storage cluster. As discussed above, each chassis can have multiple blades, each blade has a media access control (&#x2018;MAC&#x2019;) address, but the storage cluster is presented to an external network as having a single cluster IP address and a single MAC address in some embodiments.</p><p id="p-0070" num="0069">Each storage node may be one or more storage servers and each storage server is connected to one or more non-volatile solid state memory units, which may be referred to as storage units or storage devices. One embodiment includes a single storage server in each storage node and between one to eight non-volatile solid state memory units, however this one example is not meant to be limiting. The storage server may include a processor, DRAM and interfaces for the internal communication bus and power distribution for each of the power buses. Inside the storage node, the interfaces and storage unit share a communication bus, e.g., PCI Express, in some embodiments. The non-volatile solid state memory units may directly access the internal communication bus interface through a storage node communication bus, or request the storage node to access the bus interface. The non-volatile solid state memory unit contains an embedded CPU, solid state storage controller, and a quantity of solid state mass storage, e.g., between 2-32 terabytes (&#x2018;TB&#x2019;) in some embodiments. An embedded volatile storage medium, such as DRAM, and an energy reserve apparatus are included in the non-volatile solid state memory unit. In some embodiments, the energy reserve apparatus is a capacitor, super-capacitor, or battery that enables transferring a subset of DRAM contents to a stable storage medium in the case of power loss. In some embodiments, the non-volatile solid state memory unit is constructed with a storage class memory, such as phase change or magnetoresistive random access memory (&#x2018;MRAM&#x2019;) that substitutes for DRAM and enables a reduced power hold-up apparatus.</p><p id="p-0071" num="0070">One of many features of the storage nodes and non-volatile solid state storage is the ability to proactively rebuild data in a storage cluster. The storage nodes and non-volatile solid state storage can determine when a storage node or non-volatile solid state storage in the storage cluster is unreachable, independent of whether there is an attempt to read data involving that storage node or non-volatile solid state storage. The storage nodes and non-volatile solid state storage then cooperate to recover and rebuild the data in at least partially new locations. This constitutes a proactive rebuild, in that the system rebuilds data without waiting until the data is needed for a read access initiated from a client system employing the storage cluster. These and further details of the storage memory and operation thereof are discussed below.</p><p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster <b>161</b>, with multiple storage nodes <b>150</b> and internal solid-state memory coupled to each storage node to provide network attached storage or storage area network, in accordance with some embodiments. A network attached storage, storage area network, or a storage cluster, or other storage memory, could include one or more storage clusters <b>161</b>, each having one or more storage nodes <b>150</b>, in a flexible and reconfigurable arrangement of both the physical components and the amount of storage memory provided thereby. The storage cluster <b>161</b> is designed to fit in a rack, and one or more racks can be set up and populated as desired for the storage memory. The storage cluster <b>161</b> has a chassis <b>138</b> having multiple slots <b>142</b>. It should be appreciated that chassis <b>138</b> may be referred to as a housing, enclosure, or rack unit. In one embodiment, the chassis <b>138</b> has fourteen slots <b>142</b>, although other numbers of slots are readily devised. For example, some embodiments have four slots, eight slots, sixteen slots, thirty-two slots, or other suitable number of slots. Each slot <b>142</b> can accommodate one storage node <b>150</b> in some embodiments. Chassis <b>138</b> includes flaps <b>148</b> that can be utilized to mount the chassis <b>138</b> on a rack. Fans <b>144</b> provide air circulation for cooling of the storage nodes <b>150</b> and components thereof, although other cooling components could be used, or an embodiment could be devised without cooling components. A switch fabric <b>146</b> couples storage nodes <b>150</b> within chassis <b>138</b> together and to a network for communication to the memory. In an embodiment depicted in herein, the slots <b>142</b> to the left of the switch fabric <b>146</b> and fans <b>144</b> are shown occupied by storage nodes <b>150</b>, while the slots <b>142</b> to the right of the switch fabric <b>146</b> and fans <b>144</b> are empty and available for insertion of storage node <b>150</b> for illustrative purposes. This configuration is one example, and one or more storage nodes <b>150</b> could occupy the slots <b>142</b> in various further arrangements. The storage node arrangements need not be sequential or adjacent in some embodiments. Storage nodes <b>150</b> are hot pluggable, meaning that a storage node <b>150</b> can be inserted into a slot <b>142</b> in the chassis <b>138</b>, or removed from a slot <b>142</b>, without stopping or powering down the system. Upon insertion or removal of storage node <b>150</b> from slot <b>142</b>, the system automatically reconfigures in order to recognize and adapt to the change. Reconfiguration, in some embodiments, includes restoring redundancy and/or rebalancing data or load.</p><p id="p-0073" num="0072">Each storage node <b>150</b> can have multiple components. In the embodiment shown here, the storage node <b>150</b> includes a printed circuit board <b>159</b> populated by a CPU <b>156</b>, i.e., processor, a memory <b>154</b> coupled to the CPU <b>156</b>, and a non-volatile solid state storage <b>152</b> coupled to the CPU <b>156</b>, although other mountings and/or components could be used in further embodiments. The memory <b>154</b> has instructions which are executed by the CPU <b>156</b> and/or data operated on by the CPU <b>156</b>. As further explained below, the non-volatile solid state storage <b>152</b> includes flash or, in further embodiments, other types of solid-state memory.</p><p id="p-0074" num="0073">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, storage cluster <b>161</b> is scalable, meaning that storage capacity with non-uniform storage sizes is readily added, as described above. One or more storage nodes <b>150</b> can be plugged into or removed from each chassis and the storage cluster self-configures in some embodiments. Plug-in storage nodes <b>150</b>, whether installed in a chassis as delivered or later added, can have different sizes. For example, in one embodiment a storage node <b>150</b> can have any multiple of 4 TB, e.g., 8 TB, 12 TB, 16 TB, 32 TB, etc. In further embodiments, a storage node <b>150</b> could have any multiple of other storage amounts or capacities. Storage capacity of each storage node <b>150</b> is broadcast, and influences decisions of how to stripe the data. For maximum storage efficiency, an embodiment can self-configure as wide as possible in the stripe, subject to a predetermined requirement of continued operation with loss of up to one, or up to two, non-volatile solid state storage <b>152</b> units or storage nodes <b>150</b> within the chassis.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing a communications interconnect <b>173</b> and power distribution bus <b>172</b> coupling multiple storage nodes <b>150</b>. Referring back to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the communications interconnect <b>173</b> can be included in or implemented with the switch fabric <b>146</b> in some embodiments. Where multiple storage clusters <b>161</b> occupy a rack, the communications interconnect <b>173</b> can be included in or implemented with a top of rack switch, in some embodiments. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, storage cluster <b>161</b> is enclosed within a single chassis <b>138</b>. External port <b>176</b> is coupled to storage nodes <b>150</b> through communications interconnect <b>173</b>, while external port <b>174</b> is coupled directly to a storage node. External power port <b>178</b> is coupled to power distribution bus <b>172</b>. Storage nodes <b>150</b> may include varying amounts and differing capacities of non-volatile solid state storage <b>152</b> as described with reference to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In addition, one or more storage nodes <b>150</b> may be a compute only storage node as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>. Authorities <b>168</b> are implemented on the non-volatile solid state storage <b>152</b>, for example as lists or other data structures stored in memory. In some embodiments the authorities are stored within the non-volatile solid state storage <b>152</b> and supported by software executing on a controller or other processor of the non-volatile solid state storage <b>152</b>. In a further embodiment, authorities <b>168</b> are implemented on the storage nodes <b>150</b>, for example as lists or other data structures stored in the memory <b>154</b> and supported by software executing on the CPU <b>156</b> of the storage node <b>150</b>. Authorities <b>168</b> control how and where data is stored in the non-volatile solid state storage <b>152</b> in some embodiments. This control assists in determining which type of erasure coding scheme is applied to the data, and which storage nodes <b>150</b> have which portions of the data. Each authority <b>168</b> may be assigned to a non-volatile solid state storage <b>152</b>. Each authority may control a range of inode numbers, segment numbers, or other data identifiers which are assigned to data by a file system, by the storage nodes <b>150</b>, or by the non-volatile solid state storage <b>152</b>, in various embodiments.</p><p id="p-0076" num="0075">Every piece of data, and every piece of metadata, has redundancy in the system in some embodiments. In addition, every piece of data and every piece of metadata has an owner, which may be referred to as an authority. If that authority is unreachable, for example through failure of a storage node, there is a plan of succession for how to find that data or that metadata. In various embodiments, there are redundant copies of authorities <b>168</b>. Authorities <b>168</b> have a relationship to storage nodes <b>150</b> and non-volatile solid state storage <b>152</b> in some embodiments. Each authority <b>168</b>, covering a range of data segment numbers or other identifiers of the data, may be assigned to a specific non-volatile solid state storage <b>152</b>. In some embodiments the authorities <b>168</b> for all of such ranges are distributed over the non-volatile solid state storage <b>152</b> of a storage cluster. Each storage node <b>150</b> has a network port that provides access to the non-volatile solid state storage(s) <b>152</b> of that storage node <b>150</b>. Data can be stored in a segment, which is associated with a segment number and that segment number is an indirection for a configuration of a RAID (redundant array of independent disks) stripe in some embodiments. The assignment and use of the authorities <b>168</b> thus establishes an indirection to data. Indirection may be referred to as the ability to reference data indirectly, in this case via an authority <b>168</b>, in accordance with some embodiments. A segment identifies a set of non-volatile solid state storage <b>152</b> and a local identifier into the set of non-volatile solid state storage <b>152</b> that may contain data. In some embodiments, the local identifier is an offset into the device and may be reused sequentially by multiple segments. In other embodiments the local identifier is unique for a specific segment and never reused. The offsets in the non-volatile solid state storage <b>152</b> are applied to locating data for writing to or reading from the non-volatile solid state storage <b>152</b> (in the form of a RAID stripe). Data is striped across multiple units of non-volatile solid state storage <b>152</b>, which may include or be different from the non-volatile solid state storage <b>152</b> having the authority <b>168</b> for a particular data segment.</p><p id="p-0077" num="0076">If there is a change in where a particular segment of data is located, e.g., during a data move or a data reconstruction, the authority <b>168</b> for that data segment should be consulted, at that non-volatile solid state storage <b>152</b> or storage node <b>150</b> having that authority <b>168</b>. In order to locate a particular piece of data, embodiments calculate a hash value for a data segment or apply an inode number or a data segment number. The output of this operation points to a non-volatile solid state storage <b>152</b> having the authority <b>168</b> for that particular piece of data. In some embodiments there are two stages to this operation. The first stage maps an entity identifier (ID), e.g., a segment number, inode number, or directory number to an authority identifier. This mapping may include a calculation such as a hash or a bit mask. The second stage is mapping the authority identifier to a particular non-volatile solid state storage <b>152</b>, which may be done through an explicit mapping. The operation is repeatable, so that when the calculation is performed, the result of the calculation repeatably and reliably points to a particular non-volatile solid state storage <b>152</b> having that authority <b>168</b>. The operation may include the set of reachable storage nodes as input. If the set of reachable non-volatile solid state storage units changes the optimal set changes. In some embodiments, the persisted value is the current assignment (which is always true) and the calculated value is the target assignment the cluster will attempt to reconfigure towards. This calculation may be used to determine the optimal non-volatile solid state storage <b>152</b> for an authority in the presence of a set of non-volatile solid state storage <b>152</b> that are reachable and constitute the same cluster. The calculation also determines an ordered set of peer non-volatile solid state storage <b>152</b> that will also record the authority to non-volatile solid state storage mapping so that the authority may be determined even if the assigned non-volatile solid state storage is unreachable. A duplicate or substitute authority <b>168</b> may be consulted if a specific authority <b>168</b> is unavailable in some embodiments.</p><p id="p-0078" num="0077">With reference to <figref idref="DRAWINGS">FIG. <b>2</b>A and <b>2</b>B</figref>, two of the many tasks of the CPU <b>156</b> on a storage node <b>150</b> are to break up write data, and reassemble read data. When the system has determined that data is to be written, the authority <b>168</b> for that data is located as above. When the segment ID for data is already determined the request to write is forwarded to the non-volatile solid state storage <b>152</b> currently determined to be the host of the authority <b>168</b> determined from the segment. The host CPU <b>156</b> of the storage node <b>150</b>, on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside, then breaks up or shards the data and transmits the data out to various non-volatile solid state storage <b>152</b>. The transmitted data is written as a data stripe in accordance with an erasure coding scheme. In some embodiments, data is requested to be pulled, and in other embodiments, data is pushed. In reverse, when data is read, the authority <b>168</b> for the segment ID containing the data is located as described above. The host CPU <b>156</b> of the storage node <b>150</b> on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside requests the data from the non-volatile solid state storage and corresponding storage nodes pointed to by the authority. In some embodiments the data is read from flash storage as a data stripe. The host CPU <b>156</b> of storage node <b>150</b> then reassembles the read data, correcting any errors (if present) according to the appropriate erasure coding scheme, and forwards the reassembled data to the network. In further embodiments, some or all of these tasks can be handled in the non-volatile solid state storage <b>152</b>. In some embodiments, the segment host requests the data be sent to storage node <b>150</b> by requesting pages from storage and then sending the data to the storage node making the original request.</p><p id="p-0079" num="0078">In embodiments, authorities <b>168</b> operate to determine how operations will proceed against particular logical elements. Each of the logical elements may be operated on through a particular authority across a plurality of storage controllers of a storage system. The authorities <b>168</b> may communicate with the plurality of storage controllers so that the plurality of storage controllers collectively perform operations against those particular logical elements.</p><p id="p-0080" num="0079">In embodiments, logical elements could be, for example, files, directories, object buckets, individual objects, delineated parts of files or objects, other forms of key-value pair databases, or tables. In embodiments, performing an operation can involve, for example, ensuring consistency, structural integrity, and/or recoverability with other operations against the same logical element, reading metadata and data associated with that logical element, determining what data should be written durably into the storage system to persist any changes for the operation, or where metadata and data can be determined to be stored across modular storage devices attached to a plurality of the storage controllers in the storage system.</p><p id="p-0081" num="0080">In some embodiments the operations are token based transactions to efficiently communicate within a distributed system. Each transaction may be accompanied by or associated with a token, which gives permission to execute the transaction. The authorities <b>168</b> are able to maintain a pre-transaction state of the system until completion of the operation in some embodiments. The token based communication may be accomplished without a global lock across the system, and also enables restart of an operation in case of a disruption or other failure.</p><p id="p-0082" num="0081">In some systems, for example in UNIX-style file systems, data is handled with an index node or inode, which specifies a data structure that represents an object in a file system. The object could be a file or a directory, for example. Metadata may accompany the object, as attributes such as permission data and a creation timestamp, among other attributes. A segment number could be assigned to all or a portion of such an object in a file system. In other systems, data segments are handled with a segment number assigned elsewhere. For purposes of discussion, the unit of distribution is an entity, and an entity can be a file, a directory or a segment. That is, entities are units of data or metadata stored by a storage system. Entities are grouped into sets called authorities. Each authority has an authority owner, which is a storage node that has the exclusive right to update the entities in the authority. In other words, a storage node contains the authority, and that the authority, in turn, contains entities.</p><p id="p-0083" num="0082">A segment is a logical container of data in accordance with some embodiments. A segment is an address space between medium address space and physical flash locations, i.e., the data segment number, are in this address space. Segments may also contain meta-data, which enable data redundancy to be restored (rewritten to different flash locations or devices) without the involvement of higher level software. In one embodiment, an internal format of a segment contains client data and medium mappings to determine the position of that data. Each data segment is protected, e.g., from memory and other failures, by breaking the segment into a number of data and parity shards, where applicable. The data and parity shards are distributed, i.e., striped, across non-volatile solid state storage <b>152</b> coupled to the host CPUs <b>156</b> (See <figref idref="DRAWINGS">FIGS. <b>2</b>E and <b>2</b>G</figref>) in accordance with an erasure coding scheme. Usage of the term segments refers to the container and its place in the address space of segments in some embodiments. Usage of the term stripe refers to the same set of shards as a segment and includes how the shards are distributed along with redundancy or parity information in accordance with some embodiments.</p><p id="p-0084" num="0083">A series of address-space transformations takes place across an entire storage system. At the top are the directory entries (file names) which link to an inode. Inodes point into medium address space, where data is logically stored. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Segment addresses are then translated into physical flash locations. Physical flash locations have an address range bounded by the amount of flash in the system in accordance with some embodiments. Medium addresses and segment addresses are logical containers, and in some embodiments use a <b>128</b> bit or larger identifier so as to be practically infinite, with a likelihood of reuse calculated as longer than the expected life of the system. Addresses from logical containers are allocated in a hierarchical fashion in some embodiments. Initially, each non-volatile solid state storage <b>152</b> unit may be assigned a range of address space. Within this assigned range, the non-volatile solid state storage <b>152</b> is able to allocate addresses without synchronization with other non-volatile solid state storage <b>152</b>.</p><p id="p-0085" num="0084">Data and metadata is stored by a set of underlying storage layouts that are optimized for varying workload patterns and storage devices. These layouts incorporate multiple redundancy schemes, compression formats and index algorithms. Some of these layouts store information about authorities and authority masters, while others store file metadata and file data. The redundancy schemes include error correction codes that tolerate corrupted bits within a single storage device (such as a NAND flash chip), erasure codes that tolerate the failure of multiple storage nodes, and replication schemes that tolerate data center or regional failures. In some embodiments, low density parity check (&#x2018;LDPC&#x2019;) code is used within a single storage unit. Reed-Solomon encoding is used within a storage cluster, and mirroring is used within a storage grid in some embodiments. Metadata may be stored using an ordered log structured index (such as a Log Structured Merge Tree), and large data may not be stored in a log structured layout.</p><p id="p-0086" num="0085">In order to maintain consistency across multiple copies of an entity, the storage nodes agree implicitly on two things through calculations: (1) the authority that contains the entity, and (2) the storage node that contains the authority. The assignment of entities to authorities can be done by pseudo randomly assigning entities to authorities, by splitting entities into ranges based upon an externally produced key, or by placing a single entity into each authority. Examples of pseudorandom schemes are linear hashing and the Replication Under Scalable Hashing (&#x2018;RUSH&#x2019;) family of hashes, including Controlled Replication Under Scalable Hashing (&#x2018;CRUSH&#x2019;). In some embodiments, pseudo-random assignment is utilized only for assigning authorities to nodes because the set of nodes can change. The set of authorities cannot change so any subjective function may be applied in these embodiments. Some placement schemes automatically place authorities on storage nodes, while other placement schemes rely on an explicit mapping of authorities to storage nodes. In some embodiments, a pseudorandom scheme is utilized to map from each authority to a set of candidate authority owners. A pseudorandom data distribution function related to CRUSH may assign authorities to storage nodes and create a list of where the authorities are assigned. Each storage node has a copy of the pseudorandom data distribution function, and can arrive at the same calculation for distributing, and later finding or locating an authority. Each of the pseudorandom schemes requires the reachable set of storage nodes as input in some embodiments in order to conclude the same target nodes. Once an entity has been placed in an authority, the entity may be stored on physical devices so that no expected failure will lead to unexpected data loss. In some embodiments, rebalancing algorithms attempt to store the copies of all entities within an authority in the same layout and on the same set of machines.</p><p id="p-0087" num="0086">Examples of expected failures include device failures, stolen machines, datacenter fires, and regional disasters, such as nuclear or geological events. Different failures lead to different levels of acceptable data loss. In some embodiments, a stolen storage node impacts neither the security nor the reliability of the system, while depending on system configuration, a regional event could lead to no loss of data, a few seconds or minutes of lost updates, or even complete data loss.</p><p id="p-0088" num="0087">In the embodiments, the placement of data for storage redundancy is independent of the placement of authorities for data consistency. In some embodiments, storage nodes that contain authorities do not contain any persistent storage. Instead, the storage nodes are connected to non-volatile solid state storage units that do not contain authorities. The communications interconnect between storage nodes and non-volatile solid state storage units consists of multiple communication technologies and has non-uniform performance and fault tolerance characteristics. In some embodiments, as mentioned above, non-volatile solid state storage units are connected to storage nodes via PCI express, storage nodes are connected together within a single chassis using Ethernet backplane, and chassis are connected together to form a storage cluster. Storage clusters are connected to clients using Ethernet or fiber channel in some embodiments. If multiple storage clusters are configured into a storage grid, the multiple storage clusters are connected using the Internet or other long-distance networking links, such as a &#x201c;metro scale&#x201d; link or private link that does not traverse the internet.</p><p id="p-0089" num="0088">Authority owners have the exclusive right to modify entities, to migrate entities from one non-volatile solid state storage unit to another non-volatile solid state storage unit, and to add and remove copies of entities. This allows for maintaining the redundancy of the underlying data. When an authority owner fails, is going to be decommissioned, or is overloaded, the authority is transferred to a new storage node. Transient failures make it non-trivial to ensure that all non-faulty machines agree upon the new authority location. The ambiguity that arises due to transient failures can be achieved automatically by a consensus protocol such as Paxos, hot-warm failover schemes, via manual intervention by a remote system administrator, or by a local hardware administrator (such as by physically removing the failed machine from the cluster, or pressing a button on the failed machine). In some embodiments, a consensus protocol is used, and failover is automatic. If too many failures or replication events occur in too short a time period, the system goes into a self-preservation mode and halts replication and data movement activities until an administrator intervenes in accordance with some embodiments.</p><p id="p-0090" num="0089">As authorities are transferred between storage nodes and authority owners update entities in their authorities, the system transfers messages between the storage nodes and non-volatile solid state storage units. With regard to persistent messages, messages that have different purposes are of different types. Depending on the type of the message, the system maintains different ordering and durability guarantees. As the persistent messages are being processed, the messages are temporarily stored in multiple durable and non-durable storage hardware technologies. In some embodiments, messages are stored in RAM, NVRAM and on NAND flash devices, and a variety of protocols are used in order to make efficient use of each storage medium. Latency-sensitive client requests may be persisted in replicated NVRAM, and then later NAND, while background rebalancing operations are persisted directly to NAND.</p><p id="p-0091" num="0090">Persistent messages are persistently stored prior to being transmitted. This allows the system to continue to serve client requests despite failures and component replacement. Although many hardware components contain unique identifiers that are visible to system administrators, manufacturer, hardware supply chain and ongoing monitoring quality control infrastructure, applications running on top of the infrastructure address virtualize addresses. These virtualized addresses do not change over the lifetime of the storage system, regardless of component failures and replacements. This allows each component of the storage system to be replaced over time without reconfiguration or disruptions of client request processing, i.e., the system supports non-disruptive upgrades.</p><p id="p-0092" num="0091">In some embodiments, the virtualized addresses are stored with sufficient redundancy. A continuous monitoring system correlates hardware and software status and the hardware identifiers. This allows detection and prediction of failures due to faulty components and manufacturing details. The monitoring system also enables the proactive transfer of authorities and entities away from impacted devices before failure occurs by removing the component from the critical path in some embodiments.</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node <b>150</b> and contents of a non-volatile solid state storage <b>152</b> of the storage node <b>150</b>. Data is communicated to and from the storage node <b>150</b> by a network interface controller (&#x2018;NIC&#x2019;) <b>202</b> in some embodiments. Each storage node <b>150</b> has a CPU <b>156</b>, and one or more non-volatile solid state storage <b>152</b>, as discussed above. Moving down one level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, each non-volatile solid state storage <b>152</b> has a relatively fast non-volatile solid state memory, such as nonvolatile random access memory (&#x2018;NVRAM&#x2019;) <b>204</b>, and flash memory <b>206</b>. In some embodiments, NVRAM <b>204</b> may be a component that does not require program/erase cycles (DRAM, MRAM, PCM), and can be a memory that can support being written vastly more often than the memory is read from. Moving down another level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, the NVRAM <b>204</b> is implemented in one embodiment as high speed volatile memory, such as dynamic random access memory (DRAM) <b>216</b>, backed up by energy reserve <b>218</b>. Energy reserve <b>218</b> provides sufficient electrical power to keep the DRAM <b>216</b> powered long enough for contents to be transferred to the flash memory <b>206</b> in the event of power failure. In some embodiments, energy reserve <b>218</b> is a capacitor, super-capacitor, battery, or other device, that supplies a suitable supply of energy sufficient to enable the transfer of the contents of DRAM <b>216</b> to a stable storage medium in the case of power loss. The flash memory <b>206</b> is implemented as multiple flash dies <b>222</b>, which may be referred to as packages of flash dies <b>222</b> or an array of flash dies <b>222</b>. It should be appreciated that the flash dies <b>222</b> could be packaged in any number of ways, with a single die per package, multiple dies per package (i.e., multichip packages), in hybrid packages, as bare dies on a printed circuit board or other substrate, as encapsulated dies, etc. In the embodiment shown, the non-volatile solid state storage <b>152</b> has a controller <b>212</b> or other processor, and an input output () port <b>210</b> coupled to the controller <b>212</b>. I/O port <b>210</b> is coupled to the CPU <b>156</b> and/or the network interface controller <b>202</b> of the flash storage node <b>150</b>. Flash input output () port <b>220</b> is coupled to the flash dies <b>222</b>, and a direct memory access unit (DMA) <b>214</b> is coupled to the controller <b>212</b>, the DRAM <b>216</b> and the flash dies <b>222</b>. In the embodiment shown, the I/O port <b>210</b>, controller <b>212</b>, DMA unit <b>214</b> and flash I/O port <b>220</b> are implemented on a programmable logic device (&#x2018;PLD&#x2019;) <b>208</b>, e.g., an FPGA. In this embodiment, each flash die <b>222</b> has pages, organized as sixteen kB (kilobyte) pages <b>224</b>, and a register <b>226</b> through which data can be written to or read from the flash die <b>222</b>. In further embodiments, other types of solid-state memory are used in place of, or in addition to flash memory illustrated within flash die <b>222</b>.</p><p id="p-0094" num="0093">Storage clusters <b>161</b>, in various embodiments as disclosed herein, can be contrasted with storage arrays in general. The storage nodes <b>150</b> are part of a collection that creates the storage cluster <b>161</b>. Each storage node <b>150</b> owns a slice of data and computing required to provide the data. Multiple storage nodes <b>150</b> cooperate to store and retrieve the data. Storage memory or storage devices, as used in storage arrays in general, are less involved with processing and manipulating the data. Storage memory or storage devices in a storage array receive commands to read, write, or erase data. The storage memory or storage devices in a storage array are not aware of a larger system in which they are embedded, or what the data means. Storage memory or storage devices in storage arrays can include various types of storage memory, such as RAM, solid state drives, hard disk drives, etc. The non-volatile solid state storage <b>152</b> units described herein have multiple interfaces active simultaneously and serving multiple purposes. In some embodiments, some of the functionality of a storage node <b>150</b> is shifted into a storage unit <b>152</b>, transforming the storage unit <b>152</b> into a combination of storage unit <b>152</b> and storage node <b>150</b>. Placing computing (relative to storage data) into the storage unit <b>152</b> places this computing closer to the data itself. The various system embodiments have a hierarchy of storage node layers with different capabilities. By contrast, in a storage array, a controller owns and knows everything about all of the data that the controller manages in a shelf or storage devices. In a storage cluster <b>161</b>, as described herein, multiple controllers in multiple non-volatile sold state storage <b>152</b> units and/or storage nodes <b>150</b> cooperate in various ways (e.g., for erasure coding, data sharding, metadata communication and redundancy, storage capacity expansion or contraction, data recovery, and so on).</p><p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes <b>150</b> and storage <b>152</b> units of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref>. In this version, each non-volatile solid state storage <b>152</b> unit has a processor such as controller <b>212</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>), an FPGA, flash memory <b>206</b>, and NVRAM <b>204</b> (which is super-capacitor backed DRAM <b>216</b>, see <figref idref="DRAWINGS">FIGS. <b>2</b>B and <b>2</b>C</figref>) on a PCIe (peripheral component interconnect express) board in a chassis <b>138</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The non-volatile solid state storage <b>152</b> unit may be implemented as a single board containing storage, and may be the largest tolerable failure domain inside the chassis. In some embodiments, up to two non-volatile solid state storage <b>152</b> units may fail and the device will continue with no data loss.</p><p id="p-0096" num="0095">The physical storage is divided into named regions based on application usage in some embodiments. The NVRAM <b>204</b> is a contiguous block of reserved memory in the non-volatile solid state storage <b>152</b> DRAM <b>216</b>, and is backed by NAND flash. NVRAM <b>204</b> is logically divided into multiple memory regions written for two as spool (e.g., spool_region). Space within the NVRAM <b>204</b> spools is managed by each authority <b>168</b> independently. Each device provides an amount of storage space to each authority <b>168</b>. That authority <b>168</b> further manages lifetimes and allocations within that space. Examples of a spool include distributed transactions or notions. When the primary power to a non-volatile solid state storage <b>152</b> unit fails, onboard super-capacitors provide a short duration of power hold up. During this holdup interval, the contents of the NVRAM <b>204</b> are flushed to flash memory <b>206</b>. On the next power-on, the contents of the NVRAM <b>204</b> are recovered from the flash memory <b>206</b>.</p><p id="p-0097" num="0096">As for the storage unit controller, the responsibility of the logical &#x201c;controller&#x201d; is distributed across each of the blades containing authorities <b>168</b>. This distribution of logical control is shown in <figref idref="DRAWINGS">FIG. <b>2</b>D</figref> as a host controller <b>242</b>, mid-tier controller <b>244</b> and storage unit controller(s) <b>246</b>. Management of the control plane and the storage plane are treated independently, although parts may be physically co-located on the same blade. Each authority <b>168</b> effectively serves as an independent controller. Each authority <b>168</b> provides its own data and metadata structures, its own background workers, and maintains its own lifecycle.</p><p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade <b>252</b> hardware block diagram, showing a control plane <b>254</b>, compute and storage planes <b>256</b>, <b>258</b>, and authorities <b>168</b> interacting with underlying physical resources, using embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref> in the storage server environment of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. The control plane <b>254</b> is partitioned into a number of authorities <b>168</b> which can use the compute resources in the compute plane <b>256</b> to run on any of the blades <b>252</b>. The storage plane <b>258</b> is partitioned into a set of devices, each of which provides access to flash <b>206</b> and NVRAM <b>204</b> resources. In one embodiment, the compute plane <b>256</b> may perform the operations of a storage array controller, as described herein, on one or more devices of the storage plane <b>258</b> (e.g., a storage array).</p><p id="p-0099" num="0098">In the compute and storage planes <b>256</b>, <b>258</b> of <figref idref="DRAWINGS">FIG. <b>2</b>E</figref>, the authorities <b>168</b> interact with the underlying physical resources (i.e., devices). From the point of view of an authority <b>168</b>, its resources are striped over all of the physical devices. From the point of view of a device, it provides resources to all authorities <b>168</b>, irrespective of where the authorities happen to run. Each authority <b>168</b> has allocated or has been allocated one or more partitions <b>260</b> of storage memory in the storage units <b>152</b>, e.g., partitions <b>260</b> in flash memory <b>206</b> and NVRAM <b>204</b>. Each authority <b>168</b> uses those allocated partitions <b>260</b> that belong to it, for writing or reading user data. Authorities can be associated with differing amounts of physical storage of the system. For example, one authority <b>168</b> could have a larger number of partitions <b>260</b> or larger sized partitions <b>260</b> in one or more storage units <b>152</b> than one or more other authorities <b>168</b>.</p><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades <b>252</b> of a storage cluster, in accordance with some embodiments. In the elasticity structure, elasticity software is symmetric, i.e., each blade's compute module <b>270</b> runs the three identical layers of processes depicted in <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>. Storage managers <b>274</b> execute read and write requests from other blades <b>252</b> for data and metadata stored in local storage unit <b>152</b> NVRAM <b>204</b> and flash <b>206</b>. Authorities <b>168</b> fulfill client requests by issuing the necessary reads and writes to the blades <b>252</b> on whose storage units <b>152</b> the corresponding data or metadata resides. Endpoints <b>272</b> parse client connection requests received from switch fabric <b>146</b> supervisory software, relay the client connection requests to the authorities <b>168</b> responsible for fulfillment, and relay the authorities' <b>168</b> responses to clients. The symmetric three-layer structure enables the storage system's high degree of concurrency. Elasticity scales out efficiently and reliably in these embodiments. In addition, elasticity implements a unique scale-out technique that balances work evenly across all resources regardless of client access pattern, and maximizes concurrency by eliminating much of the need for inter-blade coordination that typically occurs with conventional distributed locking.</p><p id="p-0101" num="0100">Still referring to <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>, authorities <b>168</b> running in the compute modules <b>270</b> of a blade <b>252</b> perform the internal operations required to fulfill client requests. One feature of elasticity is that authorities <b>168</b> are stateless, i.e., they cache active data and metadata in their own blades' <b>252</b> DRAMs for fast access, but the authorities store every update in their NVRAM <b>204</b> partitions on three separate blades <b>252</b> until the update has been written to flash <b>206</b>. All the storage system writes to NVRAM <b>204</b> are in triplicate to partitions on three separate blades <b>252</b> in some embodiments. With triple-mirrored NVRAM <b>204</b> and persistent storage protected by parity and Reed-Solomon RAID checksums, the storage system can survive concurrent failure of two blades <b>252</b> with no loss of data, metadata, or access to either.</p><p id="p-0102" num="0101">Because authorities <b>168</b> are stateless, they can migrate between blades <b>252</b>. Each authority <b>168</b> has a unique identifier. NVRAM <b>204</b> and flash <b>206</b> partitions are associated with authorities' <b>168</b> identifiers, not with the blades <b>252</b> on which they are running in some. Thus, when an authority <b>168</b> migrates, the authority <b>168</b> continues to manage the same storage partitions from its new location. When a new blade <b>252</b> is installed in an embodiment of the storage cluster, the system automatically rebalances load by: partitioning the new blade's <b>252</b> storage for use by the system's authorities <b>168</b>, migrating selected authorities <b>168</b> to the new blade <b>252</b>, starting endpoints <b>272</b> on the new blade <b>252</b> and including them in the switch fabric's <b>146</b> client connection distribution algorithm.</p><p id="p-0103" num="0102">From their new locations, migrated authorities <b>168</b> persist the contents of their NVRAM <b>204</b> partitions on flash <b>206</b>, process read and write requests from other authorities <b>168</b>, and fulfill the client requests that endpoints <b>272</b> direct to them. Similarly, if a blade <b>252</b> fails or is removed, the system redistributes its authorities <b>168</b> among the system's remaining blades <b>252</b>. The redistributed authorities <b>168</b> continue to perform their original functions from their new locations.</p><p id="p-0104" num="0103"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities <b>168</b> and storage resources in blades <b>252</b> of a storage cluster, in accordance with some embodiments. Each authority <b>168</b> is exclusively responsible for a partition of the flash <b>206</b> and NVRAM <b>204</b> on each blade <b>252</b>. The authority <b>168</b> manages the content and integrity of its partitions independently of other authorities <b>168</b>. Authorities <b>168</b> compress incoming data and preserve it temporarily in their NVRAM <b>204</b> partitions, and then consolidate, RAID-protect, and persist the data in segments of the storage in their flash <b>206</b> partitions. As the authorities <b>168</b> write data to flash <b>206</b>, storage managers <b>274</b> perform the necessary flash translation to optimize write performance and maximize media longevity. In the background, authorities <b>168</b> &#x201c;garbage collect,&#x201d; or reclaim space occupied by data that clients have made obsolete by overwriting the data. It should be appreciated that since authorities' <b>168</b> partitions are disjoint, there is no need for distributed locking to execute client and writes or to perform background functions.</p><p id="p-0105" num="0104">The embodiments described herein may utilize various software, communication and/or networking protocols. In addition, the configuration of the hardware and/or software may be adjusted to accommodate various protocols. For example, the embodiments may utilize Active Directory, which is a database based system that provides authentication, directory, policy, and other services in a WINDOWS&#x2122; environment. In these embodiments, LDAP (Lightweight Directory Access Protocol) is one example application protocol for querying and modifying items in directory service providers such as Active Directory. In some embodiments, a network lock manager (&#x2018;NLM&#x2019;) is utilized as a facility that works in cooperation with the Network File System (&#x2018;NFS&#x2019;) to provide a System V style of advisory file and record locking over a network. The Server Message Block (&#x2018;SMB&#x2019;) protocol, one version of which is also known as Common Internet File System (&#x2018;CIFS&#x2019;), may be integrated with the storage systems discussed herein. SMP operates as an application-layer network protocol typically used for providing shared access to files, printers, and serial ports and miscellaneous communications between nodes on a network. SMB also provides an authenticated inter-process communication mechanism. AMAZON&#x2122; S3 (Simple Storage Service) is a web service offered by Amazon Web Services, and the systems described herein may interface with Amazon S3 through web services interfaces (REST (representational state transfer), SOAP (simple object access protocol), and BitTorrent). A RESTful API (application programming interface) breaks down a transaction to create a series of small modules. Each module addresses a particular underlying part of the transaction. The control or permissions provided with these embodiments, especially for object data, may include utilization of an access control list (&#x2018;ACL&#x2019;). The ACL is a list of permissions attached to an object and the ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects. The systems may utilize Internet Protocol version 6 (&#x2018;IPv6&#x2019;), as well as IPv4, for the communications protocol that provides an identification and location system for computers on networks and routes traffic across the Internet. The routing of packets between networked systems may include Equal-cost multi-path routing (&#x2018;ECMP&#x2019;), which is a routing strategy where next-hop packet forwarding to a single destination can occur over multiple &#x201c;best paths&#x201d; which tie for top place in routing metric calculations. Multi-path routing can be used in conjunction with most routing protocols, because it is a per-hop decision limited to a single router. The software may support Multi-tenancy, which is an architecture in which a single instance of a software application serves multiple customers. Each customer may be referred to as a tenant. Tenants may be given the ability to customize some parts of the application, but may not customize the application's code, in some embodiments. The embodiments may maintain audit logs. An audit log is a document that records an event in a computing system. In addition to documenting what resources were accessed, audit log entries typically include destination and source addresses, a timestamp, and user login information for compliance with various regulations. The embodiments may support various key management policies, such as encryption key rotation. In addition, the system may support dynamic root passwords or some variation dynamically changing passwords.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system <b>306</b> that is coupled for data communications with a cloud services provider <b>302</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>. In some embodiments, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied as a storage system that includes imbalanced active/active controllers, as a storage system that includes balanced active/active controllers, as a storage system that includes active/active controllers where less than all of each controller's resources are utilized such that each controller has reserve resources that may be used to support failover, as a storage system that includes fully active/active controllers, as a storage system that includes dataset-segregated controllers, as a storage system that includes dual-layer architectures with front-end controllers and back-end integrated storage controllers, as a storage system that includes scale-out clusters of dual-controller arrays, as well as combinations of such embodiments.</p><p id="p-0107" num="0106">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the storage system <b>306</b> is coupled to the cloud services provider <b>302</b> via a data communications link <b>304</b>. The data communications link <b>304</b> may be embodied as a dedicated data communications link, as a data communications pathway that is provided through the use of one or data communications networks such as a wide area network (&#x2018;WAN&#x2019;) or LAN, or as some other mechanism capable of transporting digital information between the storage system <b>306</b> and the cloud services provider <b>302</b>. Such a data communications link <b>304</b> may be fully wired, fully wireless, or some aggregation of wired and wireless data communications pathways. In such an example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using one or more data communications protocols. For example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using the handheld device transfer protocol (&#x2018;HDTP&#x2019;), hypertext transfer protocol (&#x2018;HTTP&#x2019;), internet protocol (&#x2018;IP&#x2019;), real-time transfer protocol (&#x2018;RTP&#x2019;), transmission control protocol (&#x2018;TCP&#x2019;), user datagram protocol (&#x2018;UDP&#x2019;), wireless application protocol (&#x2018;WAP&#x2019;), or other protocol.</p><p id="p-0108" num="0107">The cloud services provider <b>302</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied, for example, as a system and computing environment that provides a vast array of services to users of the cloud services provider <b>302</b> through the sharing of computing resources via the data communications link <b>304</b>. The cloud services provider <b>302</b> may provide on-demand access to a shared pool of configurable computing resources such as computer networks, servers, storage, applications and services, and so on. The shared pool of configurable resources may be rapidly provisioned and released to a user of the cloud services provider <b>302</b> with minimal management effort. Generally, the user of the cloud services provider <b>302</b> is unaware of the exact computing resources utilized by the cloud services provider <b>302</b> to provide the services. Although in many cases such a cloud services provider <b>302</b> may be accessible via the Internet, readers of skill in the art will recognize that any system that abstracts the use of shared resources to provide services to a user through any data communications link may be considered a cloud services provider <b>302</b>.</p><p id="p-0109" num="0108">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be configured to provide a variety of services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of various service models. For example, the cloud services provider <b>302</b> may be configured to provide services through the implementation of an infrastructure as a service (&#x2018;IaaS&#x2019;) service model, through the implementation of a platform as a service (&#x2018;PaaS&#x2019;) service model, through the implementation of a software as a service (&#x2018;SaaS&#x2019;) service model, through the implementation of an authentication as a service (&#x2018;AaaS&#x2019;) service model, through the implementation of a storage as a service model where the cloud services provider <b>302</b> offers access to its storage infrastructure for use by the storage system <b>306</b> and users of the storage system <b>306</b>, and so on. Readers will appreciate that the cloud services provider <b>302</b> may be configured to provide additional services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of additional service models, as the service models described above are included only for explanatory purposes and in no way represent a limitation of the services that may be offered by the cloud services provider <b>302</b> or a limitation as to the service models that may be implemented by the cloud services provider <b>302</b>.</p><p id="p-0110" num="0109">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be embodied, for example, as a private cloud, as a public cloud, or as a combination of a private cloud and public cloud. In an embodiment in which the cloud services provider <b>302</b> is embodied as a private cloud, the cloud services provider <b>302</b> may be dedicated to providing services to a single organization rather than providing services to multiple organizations. In an embodiment where the cloud services provider <b>302</b> is embodied as a public cloud, the cloud services provider <b>302</b> may provide services to multiple organizations. In still alternative embodiments, the cloud services provider <b>302</b> may be embodied as a mix of a private and public cloud services with a hybrid cloud deployment.</p><p id="p-0111" num="0110">Although not explicitly depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, readers will appreciate that a vast amount of additional hardware components and additional software components may be necessary to facilitate the delivery of cloud services to the storage system <b>306</b> and users of the storage system <b>306</b>. For example, the storage system <b>306</b> may be coupled to (or even include) a cloud storage gateway. Such a cloud storage gateway may be embodied, for example, as hardware-based or software-based appliance that is located on premise with the storage system <b>306</b>. Such a cloud storage gateway may operate as a bridge between local applications that are executing on the storage array <b>306</b> and remote, cloud-based storage that is utilized by the storage array <b>306</b>. Through the use of a cloud storage gateway, organizations may move primary iSCSI or NAS to the cloud services provider <b>302</b>, thereby enabling the organization to save space on their on-premises storage systems. Such a cloud storage gateway may be configured to emulate a disk array, a block-based device, a file server, or other storage system that can translate the SCSI commands, file server commands, or other appropriate command into REST-space protocols that facilitate communications with the cloud services provider <b>302</b>.</p><p id="p-0112" num="0111">In order to enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud migration process may take place during which data, applications, or other elements from an organization's local systems (or even from another cloud environment) are moved to the cloud services provider <b>302</b>. In order to successfully migrate data, applications, or other elements to the cloud services provider's <b>302</b> environment, middleware such as a cloud migration tool may be utilized to bridge gaps between the cloud services provider's <b>302</b> environment and an organization's environment. Such cloud migration tools may also be configured to address potentially high network costs and long transfer times associated with migrating large volumes of data to the cloud services provider <b>302</b>, as well as addressing security concerns associated with sensitive data to the cloud services provider <b>302</b> over data communications networks. In order to further enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud orchestrator may also be used to arrange and coordinate automated tasks in pursuit of creating a consolidated process or workflow. Such a cloud orchestrator may perform tasks such as configuring various components, whether those components are cloud components or on-premises components, as well as managing the interconnections between such components. The cloud orchestrator can simplify the inter-component communication and connections to ensure that links are correctly configured and maintained.</p><p id="p-0113" num="0112">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, and as described briefly above, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the usage of a SaaS service model, eliminating the need to install and run the application on local computers, which may simplify maintenance and support of the application. Such applications may take many forms in accordance with various embodiments of the present disclosure. For example, the cloud services provider <b>302</b> may be configured to provide access to data analytics applications to the storage system <b>306</b> and users of the storage system <b>306</b>. Such data analytics applications may be configured, for example, to receive vast amounts of telemetry data phoned home by the storage system <b>306</b>. Such telemetry data may describe various operating characteristics of the storage system <b>306</b> and may be analyzed for a vast array of purposes including, for example, to determine the health of the storage system <b>306</b>, to identify workloads that are executing on the storage system <b>306</b>, to predict when the storage system <b>306</b> will run out of various resources, to recommend configuration changes, hardware or software upgrades, workflow migrations, or other actions that may improve the operation of the storage system <b>306</b>.</p><p id="p-0114" num="0113">The cloud services provider <b>302</b> may also be configured to provide access to virtualized computing environments to the storage system <b>306</b> and users of the storage system <b>306</b>. Such virtualized computing environments may be embodied, for example, as a virtual machine or other virtualized computer hardware platforms, virtual storage devices, virtualized computer network resources, and so on. Examples of such virtualized environments can include virtual machines that are created to emulate an actual computer, virtualized desktop environments that separate a logical desktop from a physical machine, virtualized file systems that allow uniform access to different types of concrete file systems, and many others.</p><p id="p-0115" num="0114">Although the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates the storage system <b>306</b> being coupled for data communications with the cloud services provider <b>302</b>, in other embodiments the storage system <b>306</b> may be part of a hybrid cloud deployment in which private cloud elements (e.g., private cloud services, on-premises infrastructure, and so on) and public cloud elements (e.g., public cloud services, infrastructure, and so on that may be provided by one or more cloud services providers) are combined to form a single solution, with orchestration among the various platforms. Such a hybrid cloud deployment may leverage hybrid cloud management software such as, for example, Azure&#x2122; Arc from Microsoft&#x2122;, that centralize the management of the hybrid cloud deployment to any infrastructure and enable the deployment of services anywhere. In such an example, the hybrid cloud management software may be configured to create, update, and delete resources (both physical and virtual) that form the hybrid cloud deployment, to allocate compute and storage to specific workloads, to monitor workloads and resources for performance, policy compliance, updates and patches, security status, or to perform a variety of other tasks.</p><p id="p-0116" num="0115">Readers will appreciate that by pairing the storage systems described herein with one or more cloud services providers, various offerings may be enabled. For example, disaster recovery as a service (&#x2018;DRaaS&#x2019;) may be provided where cloud resources are utilized to protect applications and data from disruption caused by disaster, including in embodiments where the storage systems may serve as the primary data store. In such embodiments, a total system backup may be taken that allows for business continuity in the event of system failure. In such embodiments, cloud data backup techniques (by themselves or as part of a larger DRaaS solution) may also be integrated into an overall solution that includes the storage systems and cloud services providers described herein.</p><p id="p-0117" num="0116">The storage systems described herein, as well as the cloud services providers, may be utilized to provide a wide array of security features. For example, the storage systems may encrypt data at rest (and data may be sent to and from the storage systems encrypted) and may make use of Key Management-as-a-Service (&#x2018;KMaaS&#x2019;) to manage encryption keys, keys for locking and unlocking storage devices, and so on. Likewise, cloud data security gateways or similar mechanisms may be utilized to ensure that data stored within the storage systems does not improperly end up being stored in the cloud as part of a cloud data backup operation. Furthermore, microsegmentation or identity-based-segmentation may be utilized in a data center that includes the storage systems or within the cloud services provider, to create secure zones in data centers and cloud deployments that enables the isolation of workloads from one another.</p><p id="p-0118" num="0117">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system <b>306</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref> as the storage system may include many of the components described above.</p><p id="p-0119" num="0118">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may include a vast amount of storage resources <b>308</b>, which may be embodied in many forms. For example, the storage resources <b>308</b> can include nano-RAM or another form of nonvolatile random access memory that utilizes carbon nanotubes deposited on a substrate, 3D crosspoint non-volatile memory, flash memory including single-level cell (&#x2018;SLC&#x2019;) NAND flash, multi-level cell (&#x2018;MLC&#x2019;) NAND flash, triple-level cell (&#x2018;TLC&#x2019;) NAND flash, quad-level cell (&#x2018;QLC&#x2019;) NAND flash, or others. Likewise, the storage resources <b>308</b> may include non-volatile magnetoresistive random-access memory (&#x2018;MRAM&#x2019;), including spin transfer torque (&#x2018;STT&#x2019;) MRAM. The example storage resources <b>308</b> may alternatively include non-volatile phase-change memory (&#x2018;PCM&#x2019;), quantum memory that allows for the storage and retrieval of photonic quantum information, resistive random-access memory (&#x2018;ReRAM&#x2019;), storage class memory (&#x2018;SCM&#x2019;), or other form of storage resources, including any combination of resources described herein. Readers will appreciate that other forms of computer memories and storage devices may be utilized by the storage systems described above, including DRAM, SRAM, EEPROM, universal memory, and many others. The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied in a variety of form factors, including but not limited to, dual in-line memory modules (&#x2018;DIMMs&#x2019;), non-volatile dual in-line memory modules (&#x2018;NVDIMMs&#x2019;), M.2, U.2, and others.</p><p id="p-0120" num="0119">The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may include various forms of SCM. SCM may effectively treat fast, non-volatile memory (e.g., NAND flash) as an extension of DRAM such that an entire dataset may be treated as an in-memory dataset that resides entirely in DRAM. SCM may include non-volatile media such as, for example, NAND flash. Such NAND flash may be accessed utilizing NVMe that can use the PCIe bus as its transport, providing for relatively low access latencies compared to older protocols. In fact, the network protocols used for SSDs in all-flash arrays can include NVMe using Ethernet (ROCE, NVME TCP), Fibre Channel (NVMe FC), InfiniBand (iWARP), and others that make it possible to treat fast, non-volatile memory as an extension of DRAM. In view of the fact that DRAM is often byte-addressable and fast, non-volatile memory such as NAND flash is block-addressable, a controller software/hardware stack may be needed to convert the block data to the bytes that are stored in the media. Examples of media and software that may be used as SCM can include, for example, 3D XPoint, Intel Memory Drive Technology, Samsung's Z-SSD, and others.</p><p id="p-0121" num="0120">The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may also include racetrack memory (also referred to as domain-wall memory). Such racetrack memory may be embodied as a form of non-volatile, solid-state memory that relies on the intrinsic strength and orientation of the magnetic field created by an electron as it spins in addition to its electronic charge, in solid-state devices. Through the use of spin-coherent electric current to move magnetic domains along a nanoscopic permalloy wire, the domains may pass by magnetic read/write heads positioned near the wire as current is passed through the wire, which alter the domains to record patterns of bits. In order to create a racetrack memory device, many such wires and read/write elements may be packaged together.</p><p id="p-0122" num="0121">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may implement a variety of storage architectures. For example, storage systems in accordance with some embodiments of the present disclosure may utilize block storage where data is stored in blocks, and each block essentially acts as an individual hard drive. Storage systems in accordance with some embodiments of the present disclosure may utilize object storage, where data is managed as objects. Each object may include the data itself, a variable amount of metadata, and a globally unique identifier, where object storage can be implemented at multiple levels (e.g., device level, system level, interface level). Storage systems in accordance with some embodiments of the present disclosure utilize file storage in which data is stored in a hierarchical structure. Such data may be saved in files and folders, and presented to both the system storing it and the system retrieving it in the same format.</p><p id="p-0123" num="0122">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be embodied as a storage system in which additional storage resources can be added through the use of a scale-up model, additional storage resources can be added through the use of a scale-out model, or through some combination thereof. In a scale-up model, additional storage may be added by adding additional storage devices. In a scale-out model, however, additional storage nodes may be added to a cluster of storage nodes, where such storage nodes can include additional processing resources, additional networking resources, and so on.</p><p id="p-0124" num="0123">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may leverage the storage resources described above in a variety of different ways. For example, some portion of the storage resources may be utilized to serve as a write cache where data is initially written to storage resources with relatively fast write latencies, relatively high write bandwidth, or similar characteristics. In such an example, data that is written to the storage resources that serve as a write cache may later be written to other storage resources that may be characterized by slower write latencies, lower write bandwidth, or similar characteristics than the storage resources that are utilized to serve as a write cache. In a similar manner, storage resources within the storage system may be utilized as a read cache, where the read cache is populated in accordance with a set of predetermined rules or heuristics. In other embodiments, tiering may be achieved within the storage systems by placing data within the storage system in accordance with one or more policies such that, for example, data that is accessed frequently is stored in faster storage tiers while data that is accessed infrequently is stored in slower storage tiers.</p><p id="p-0125" num="0124">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes communications resources <b>310</b> that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>, including embodiments where those resources are separated by a relatively vast expanse. The communications resources <b>310</b> may be configured to utilize a variety of different protocols and data communication fabrics to facilitate data communications between components within the storage systems as well as computing devices that are outside of the storage system. For example, the communications resources <b>310</b> can include fibre channel (&#x2018;FC&#x2019;) technologies such as FC fabrics and FC protocols that can transport SCSI commands over FC network, FC over ethernet (&#x2018;FCoE&#x2019;) technologies through which FC frames are encapsulated and transmitted over Ethernet networks, InfiniBand (&#x2018;IB&#x2019;) technologies in which a switched fabric topology is utilized to facilitate transmissions between channel adapters, NVM Express (&#x2018;NVMe&#x2019;) technologies and NVMe over fabrics (&#x2018;NVMeoF&#x2019;) technologies through which non-volatile storage media attached via a PCI express (&#x2018;PCIe&#x2019;) bus may be accessed, and others. In fact, the storage systems described above may, directly or indirectly, make use of neutrino communication technologies and devices through which information (including binary information) is transmitted using a beam of neutrinos.</p><p id="p-0126" num="0125">The communications resources <b>310</b> can also include mechanisms for accessing storage resources <b>308</b> within the storage system <b>306</b> utilizing serial attached SCSI (&#x2018;SAS&#x2019;), serial ATA (&#x2018;SATA&#x2019;) bus interfaces for connecting storage resources <b>308</b> within the storage system <b>306</b> to host bus adapters within the storage system <b>306</b>, internet small computer systems interface (&#x2018;i SC SI&#x2019;) technologies to provide block-level access to storage resources <b>308</b> within the storage system <b>306</b>, and other communications resources that that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>.</p><p id="p-0127" num="0126">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes processing resources <b>312</b> that may be useful in useful in executing computer program instructions and performing other computational tasks within the storage system <b>306</b>. The processing resources <b>312</b> may include one or more ASICs that are customized for some particular purpose as well as one or more CPUs. The processing resources <b>312</b> may also include one or more DSPs, one or more FPGAs, one or more systems on a chip (&#x2018;SoCs&#x2019;), or other form of processing resources <b>312</b>. The storage system <b>306</b> may utilize the storage resources <b>312</b> to perform a variety of tasks including, but not limited to, supporting the execution of software resources <b>314</b> that will be described in greater detail below.</p><p id="p-0128" num="0127">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes software resources <b>314</b> that, when executed by processing resources <b>312</b> within the storage system <b>306</b>, may perform a vast array of tasks. The software resources <b>314</b> may include, for example, one or more modules of computer program instructions that when executed by processing resources <b>312</b> within the storage system <b>306</b> are useful in carrying out various data protection techniques to preserve the integrity of data that is stored within the storage systems. Readers will appreciate that such data protection techniques may be carried out, for example, by system software executing on computer hardware within the storage system, by a cloud services provider, or in other ways. Such data protection techniques can include, for example, data archiving techniques that cause data that is no longer actively used to be moved to a separate storage device or separate storage system for long-term retention, data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe with the storage system, data replication techniques through which data stored in the storage system is replicated to another storage system such that the data may be accessible via multiple storage systems, data snapshotting techniques through which the state of data within the storage system is captured at various points in time, data and database cloning techniques through which duplicate copies of data and databases may be created, and other data protection techniques.</p><p id="p-0129" num="0128">The software resources <b>314</b> may also include software that is useful in implementing software-defined storage (&#x2018;SDS&#x2019;). In such an example, the software resources <b>314</b> may include one or more modules of computer program instructions that, when executed, are useful in policy-based provisioning and management of data storage that is independent of the underlying hardware. Such software resources <b>314</b> may be useful in implementing storage virtualization to separate the storage hardware from the software that manages the storage hardware.</p><p id="p-0130" num="0129">The software resources <b>314</b> may also include software that is useful in facilitating and optimizing I/O operations that are directed to the storage resources <b>308</b> in the storage system <b>306</b>. For example, the software resources <b>314</b> may include software modules that perform carry out various data reduction techniques such as, for example, data compression, data deduplication, and others. The software resources <b>314</b> may include software modules that intelligently group together I/O operations to facilitate better usage of the underlying storage resource <b>308</b>, software modules that perform data migration operations to migrate from within a storage system, as well as software modules that perform other functions. Such software resources <b>314</b> may be embodied as one or more software containers or in many other ways.</p><p id="p-0131" num="0130">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> sets forth an example of a cloud-based storage system <b>318</b> in accordance with some embodiments of the present disclosure. In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the cloud-based storage system <b>318</b> is created entirely in a cloud computing environment <b>316</b> such as, for example, Amazon Web Services (&#x2018;AWS&#x2019;), Microsoft Azure, Google Cloud Platform, IBM Cloud, Oracle Cloud, and others. The cloud-based storage system <b>318</b> may be used to provide services similar to the services that may be provided by the storage systems described above. For example, the cloud-based storage system <b>318</b> may be used to provide block storage services to users of the cloud-based storage system <b>318</b>, the cloud-based storage system <b>318</b> may be used to provide storage services to users of the cloud-based storage system <b>318</b> through the use of solid-state storage, and so on.</p><p id="p-0132" num="0131">The cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes two cloud computing instances <b>320</b>, <b>322</b> that each are used to support the execution of a storage controller application <b>324</b>, <b>326</b>. The cloud computing instances <b>320</b>, <b>322</b> may be embodied, for example, as instances of cloud computing resources (e.g., virtual machines) that may be provided by the cloud computing environment <b>316</b> to support the execution of software applications such as the storage controller application <b>324</b>, <b>326</b>. In one embodiment, the cloud computing instances <b>320</b>, <b>322</b> may be embodied as Amazon Elastic Compute Cloud (&#x2018;EC2&#x2019;) instances. In such an example, an Amazon Machine Image (&#x2018;AMI&#x2019;) that includes the storage controller application <b>324</b>, <b>326</b> may be booted to create and configure a virtual machine that may execute the storage controller application <b>324</b>, <b>326</b>.</p><p id="p-0133" num="0132">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the storage controller application <b>324</b>, <b>326</b> may be embodied as a module of computer program instructions that, when executed, carries out various storage tasks. For example, the storage controller application <b>324</b>, <b>326</b> may be embodied as a module of computer program instructions that, when executed, carries out the same tasks as the controllers <b>110</b>A, <b>110</b>B in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> described above such as writing data received from the users of the cloud-based storage system <b>318</b> to the cloud-based storage system <b>318</b>, erasing data from the cloud-based storage system <b>318</b>, retrieving data from the cloud-based storage system <b>318</b> and providing such data to users of the cloud-based storage system <b>318</b>, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as RAID or RAID-like data redundancy operations, compressing data, encrypting data, deduplicating data, and so forth. Readers will appreciate that because there are two cloud computing instances <b>320</b>, <b>322</b> that each include the storage controller application <b>324</b>, <b>326</b>, in some embodiments one cloud computing instance <b>320</b> may operate as the primary controller as described above while the other cloud computing instance <b>322</b> may operate as the secondary controller as described above. Readers will appreciate that the storage controller application <b>324</b>, <b>326</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may include identical source code that is executed within different cloud computing instances <b>320</b>, <b>322</b>.</p><p id="p-0134" num="0133">Consider an example in which the cloud computing environment <b>316</b> is embodied as AWS and the cloud computing instances are embodied as EC2 instances. In such an example, the cloud computing instance <b>320</b> that operates as the primary controller may be deployed on one of the instance types that has a relatively large amount of memory and processing power while the cloud computing instance <b>322</b> that operates as the secondary controller may be deployed on one of the instance types that has a relatively small amount of memory and processing power. In such an example, upon the occurrence of a failover event where the roles of primary and secondary are switched, a double failover may actually be carried out such that: 1) a first failover event where the cloud computing instance <b>322</b> that formerly operated as the secondary controller begins to operate as the primary controller, and 2) a third cloud computing instance (not shown) that is of an instance type that has a relatively large amount of memory and processing power is spun up with a copy of the storage controller application, where the third cloud computing instance begins operating as the primary controller while the cloud computing instance <b>322</b> that originally operated as the secondary controller begins operating as the secondary controller again. In such an example, the cloud computing instance <b>320</b> that formerly operated as the primary controller may be terminated. Readers will appreciate that in alternative embodiments, the cloud computing instance <b>320</b> that is operating as the secondary controller after the failover event may continue to operate as the secondary controller and the cloud computing instance <b>322</b> that operated as the primary controller after the occurrence of the failover event may be terminated once the primary role has been assumed by the third cloud computing instance (not shown).</p><p id="p-0135" num="0134">Readers will appreciate that while the embodiments described above relate to embodiments where one cloud computing instance <b>320</b> operates as the primary controller and the second cloud computing instance <b>322</b> operates as the secondary controller, other embodiments are within the scope of the present disclosure. For example, each cloud computing instance <b>320</b>, <b>322</b> may operate as a primary controller for some portion of the address space supported by the cloud-based storage system <b>318</b>, each cloud computing instance <b>320</b>, <b>322</b> may operate as a primary controller where the servicing of I/O operations directed to the cloud-based storage system <b>318</b> are divided in some other way, and so on. In fact, in other embodiments where costs savings may be prioritized over performance demands, only a single cloud computing instance may exist that contains the storage controller application.</p><p id="p-0136" num="0135">The cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. The cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may be embodied, for example, as instances of cloud computing resources that may be provided by the cloud computing environment <b>316</b> to support the execution of software applications. The cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may differ from the cloud computing instances <b>320</b>, <b>322</b> described above as the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> have local storage <b>330</b>, <b>334</b>, <b>338</b> resources whereas the cloud computing instances <b>320</b>, <b>322</b> that support the execution of the storage controller application <b>324</b>, <b>326</b> need not have local storage resources. The cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be embodied, for example, as EC2 M5 instances that include one or more SSDs, as EC2 R5 instances that include one or more SSDs, as EC2 I3 instances that include one or more SSDs, and so on. In some embodiments, the local storage <b>330</b>, <b>334</b>, <b>338</b> must be embodied as solid-state storage (e.g., SSDs) rather than storage that makes use of hard disk drives.</p><p id="p-0137" num="0136">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, each of the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> can include a software daemon <b>328</b>, <b>332</b>, <b>336</b> that, when executed by a cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>can present itself to the storage controller applications <b>324</b>, <b>326</b> as if the cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>were a physical storage device (e.g., one or more SSDs). In such an example, the software daemon <b>328</b>, <b>332</b>, <b>336</b> may include computer program instructions similar to those that would normally be contained on a storage device such that the storage controller applications <b>324</b>, <b>326</b> can send and receive the same commands that a storage controller would send to storage devices. In such a way, the storage controller applications <b>324</b>, <b>326</b> may include code that is identical to (or substantially identical to) the code that would be executed by the controllers in the storage systems described above. In these and similar embodiments, communications between the storage controller applications <b>324</b>, <b>326</b> and the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may utilize iSCSI, NVMe over TCP, messaging, a custom protocol, or in some other mechanism.</p><p id="p-0138" num="0137">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, each of the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may also be coupled to block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b>. The block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> may be embodied, for example, as Amazon Elastic Block Store (&#x2018;EBS&#x2019;) volumes. For example, a first EBS volume may be coupled to a first cloud computing instance <b>340</b><i>a, </i>a second EBS volume may be coupled to a second cloud computing instance <b>340</b><i>b, </i>and a third EBS volume may be coupled to a third cloud computing instance <b>340</b><i>n. </i>In such an example, the block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> may be utilized in a manner that is similar to how the NVRAM devices described above are utilized, as the software daemon <b>328</b>, <b>332</b>, <b>336</b> (or some other module) that is executing within a particular cloud comping instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>may, upon receiving a request to write data, initiate a write of the data to its attached EBS volume as well as a write of the data to its local storage <b>330</b>, <b>334</b>, <b>338</b> resources. In some alternative embodiments, data may only be written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources within a particular cloud comping instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n. </i>In an alternative embodiment, rather than using the block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> as NVRAM, actual RAM on each of the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be used as NVRAM, thereby decreasing network utilization costs that would be associated with using an EBS volume as the NVRAM.</p><p id="p-0139" num="0138">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be utilized, by cloud computing instances <b>320</b>, <b>322</b> that support the execution of the storage controller application <b>324</b>, <b>326</b> to service I/O operations that are directed to the cloud-based storage system <b>318</b>. Consider an example in which a first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> is operating as the primary controller. In such an example, the first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> may receive (directly or indirectly via the secondary controller) requests to write data to the cloud-based storage system <b>318</b> from users of the cloud-based storage system <b>318</b>. In such an example, the first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> may perform various tasks such as, for example, deduplicating the data contained in the request, compressing the data contained in the request, determining where to the write the data contained in the request, and so on, before ultimately sending a request to write a deduplicated, encrypted, or otherwise possibly updated version of the data to one or more of the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. Either cloud computing instance <b>320</b>, <b>322</b>, in some embodiments, may receive a request to read data from the cloud-based storage system <b>318</b> and may ultimately send a request to read data to one or more of the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>.</p><p id="p-0140" num="0139">Readers will appreciate that when a request to write data is received by a particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>may be configured to not only write the data to its own local storage <b>330</b>, <b>334</b>, <b>338</b> resources and any appropriate block-storage <b>342</b>, <b>344</b>, <b>346</b> that are offered by the cloud computing environment <b>316</b>, but the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>may also be configured to write the data to cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n. </i>The cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>may be embodied, for example, as Amazon Simple Storage Service (&#x2018;S3&#x2019;) storage that is accessible by the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n. </i>In other embodiments, the cloud computing instances <b>320</b>, <b>322</b> that each include the storage controller application <b>324</b>, <b>326</b> may initiate the storage of the data in the local storage <b>330</b>, <b>334</b>, <b>338</b> of the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>and the cloud-based object storage <b>348</b>.</p><p id="p-0141" num="0140">Readers will appreciate that, as described above, the cloud-based storage system <b>318</b> may be used to provide block storage services to users of the cloud-based storage system <b>318</b>. While the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>may support block-level access, the cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>supports only object-based access. In order to address this, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>may be configured to take blocks of data, package those blocks into objects, and write the objects to the cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n. </i></p><p id="p-0142" num="0141">Consider an example in which data is written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>in 1 MB blocks. In such an example, assume that a user of the cloud-based storage system <b>318</b> issues a request to write data that, after being compressed and deduplicated by the storage controller application <b>324</b>, <b>326</b> results in the need to write 5 MB of data. In such an example, writing the data to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>is relatively straightforward as <b>5</b> blocks that are 1 MB in size are written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n. </i>In such an example, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>may be configured to: 1) create a first object that includes the first 1 MB of data and write the first object to the cloud-based object storage <b>348</b>, 2) create a second object that includes the second 1 MB of data and write the second object to the cloud-based object storage <b>348</b>, 3) create a third object that includes the third 1 MB of data and write the third object to the cloud-based object storage <b>348</b>, and so on. As such, in some embodiments, each object that is written to the cloud-based object storage <b>348</b> may be identical (or nearly identical) in size. Readers will appreciate that in such an example, metadata that is associated with the data itself may be included in each object (e.g., the first 1 MB of the object is data and the remaining portion is metadata associated with the data).</p><p id="p-0143" num="0142">Readers will appreciate that the cloud-based object storage <b>348</b> may be incorporated into the cloud-based storage system <b>318</b> to increase the durability of the cloud-based storage system <b>318</b>. Continuing with the example described above where the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>are EC2 instances, readers will understand that EC2 instances are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of the EC2 instance. As such, relying on the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> as the only source of persistent data storage in the cloud-based storage system <b>318</b> may result in a relatively unreliable storage system. Likewise, EBS volumes are designed for 99.999% availability. As such, even relying on EBS as the persistent data store in the cloud-based storage system <b>318</b> may result in a storage system that is not sufficiently durable. Amazon S3, however, is designed to provide 99.999999999% durability, meaning that a cloud-based storage system <b>318</b> that can incorporate S3 into its pool of storage is substantially more durable than various other options.</p><p id="p-0144" num="0143">Readers will appreciate that while a cloud-based storage system <b>318</b> that can incorporate S3 into its pool of storage is substantially more durable than various other options, utilizing S3 as the primary pool of storage may result in storage system that has relatively slow response times and relatively long I/O latencies. As such, the cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> not only stores data in S3 but the cloud-based storage system <b>318</b> also stores data in local storage <b>330</b>, <b>334</b>, <b>338</b> resources and block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n, </i>such that read operations can be serviced from local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n, </i>thereby reducing read latency when users of the cloud-based storage system <b>318</b> attempt to read data from the cloud-based storage system <b>318</b>.</p><p id="p-0145" num="0144">In some embodiments, all data that is stored by the cloud-based storage system <b>318</b> may be stored in both: 1) the cloud-based object storage <b>348</b>, and 2) at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n. </i>In such embodiments, the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>may effectively operate as cache that generally includes all data that is also stored in S3, such that all reads of data may be serviced by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>without requiring the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>to access the cloud-based object storage <b>348</b>. Readers will appreciate that in other embodiments, however, all data that is stored by the cloud-based storage system <b>318</b> may be stored in the cloud-based object storage <b>348</b>, but less than all data that is stored by the cloud-based storage system <b>318</b> may be stored in at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n. </i>In such an example, various policies may be utilized to determine which subset of the data that is stored by the cloud-based storage system <b>318</b> should reside in both: 1) the cloud-based object storage <b>348</b>, and 2) at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n. </i></p><p id="p-0146" num="0145">As described above, when the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> are embodied as EC2 instances, the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of each cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. As such, one or more modules of computer program instructions that are executing within the cloud-based storage system <b>318</b> (e.g., a monitoring module that is executing on its own EC2 instance) may be designed to handle the failure of one or more of the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. In such an example, the monitoring module may handle the failure of one or more of the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> by creating one or more new cloud computing instances with local storage, retrieving data that was stored on the failed cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>from the cloud-based object storage <b>348</b>, and storing the data retrieved from the cloud-based object storage <b>348</b> in local storage on the newly created cloud computing instances. Readers will appreciate that many variants of this process may be implemented.</p><p id="p-0147" num="0146">Consider an example in which all cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> failed. In such an example, the monitoring module may create new cloud computing instances with local storage, where high-bandwidth instances types are selected that allow for the maximum data transfer rates between the newly created high-bandwidth cloud computing instances with local storage and the cloud-based object storage <b>348</b>. Readers will appreciate that instances types are selected that allow for the maximum data transfer rates between the new cloud computing instances and the cloud-based object storage <b>348</b> such that the new high-bandwidth cloud computing instances can be rehydrated with data from the cloud-based object storage <b>348</b> as quickly as possible. Once the new high-bandwidth cloud computing instances are rehydrated with data from the cloud-based object storage <b>348</b>, less expensive lower-bandwidth cloud computing instances may be created, data may be migrated to the less expensive lower-bandwidth cloud computing instances, and the high-bandwidth cloud computing instances may be terminated.</p><p id="p-0148" num="0147">Readers will appreciate that in some embodiments, the number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system <b>318</b>. The number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system <b>318</b> in order to more rapidly pull data from the cloud-based object storage <b>348</b> and into the new cloud computing instances, as each new cloud computing instance can (in parallel) retrieve some portion of the data stored by the cloud-based storage system <b>318</b>. In such embodiments, once the data stored by the cloud-based storage system <b>318</b> has been pulled into the newly created cloud computing instances, the data may be consolidated within a subset of the newly created cloud computing instances and those newly created cloud computing instances that are excessive may be terminated.</p><p id="p-0149" num="0148">Consider an example in which <b>1000</b> cloud computing instances are needed in order to locally store all valid data that users of the cloud-based storage system <b>318</b> have written to the cloud-based storage system <b>318</b>. In such an example, assume that all 1,000 cloud computing instances fail. In such an example, the monitoring module may cause 100,000 cloud computing instances to be created, where each cloud computing instance is responsible for retrieving, from the cloud-based object storage <b>348</b>, distinct 1/100,000th chunks of the valid data that users of the cloud-based storage system <b>318</b> have written to the cloud-based storage system <b>318</b> and locally storing the distinct chunk of the dataset that it retrieved. In such an example, because each of the 100,000 cloud computing instances can retrieve data from the cloud-based object storage <b>348</b> in parallel, the caching layer may be restored <b>100</b> times faster as compared to an embodiment where the monitoring module only create 1000 replacement cloud computing instances. In such an example, over time the data that is stored locally in the 100,000 could be consolidated into 1,000 cloud computing instances and the remaining 99,000 cloud computing instances could be terminated.</p><p id="p-0150" num="0149">Readers will appreciate that various performance aspects of the cloud-based storage system <b>318</b> may be monitored (e.g., by a monitoring module that is executing in an EC2 instance) such that the cloud-based storage system <b>318</b> can be scaled-up or scaled-out as needed. Consider an example in which the monitoring module monitors the performance of the could-based storage system <b>318</b> via communications with one or more of the cloud computing instances <b>320</b>, <b>322</b> that each are used to support the execution of a storage controller application <b>324</b>, <b>326</b>, via monitoring communications between cloud computing instances <b>320</b>, <b>322</b>, <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n, </i>via monitoring communications between cloud computing instances <b>320</b>, <b>322</b>, <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>and the cloud-based object storage <b>348</b>, or in some other way. In such an example, assume that the monitoring module determines that the cloud computing instances <b>320</b>, <b>322</b> that are used to support the execution of a storage controller application <b>324</b>, <b>326</b> are undersized and not sufficiently servicing the I/O requests that are issued by users of the cloud-based storage system <b>318</b>. In such an example, the monitoring module may create a new, more powerful cloud computing instance (e.g., a cloud computing instance of a type that includes more processing power, more memory, etc. . . . ) that includes the storage controller application such that the new, more powerful cloud computing instance can begin operating as the primary controller. Likewise, if the monitoring module determines that the cloud computing instances <b>320</b>, <b>322</b> that are used to support the execution of a storage controller application <b>324</b>, <b>326</b> are oversized and that cost savings could be gained by switching to a smaller, less powerful cloud computing instance, the monitoring module may create a new, less powerful (and less expensive) cloud computing instance that includes the storage controller application such that the new, less powerful cloud computing instance can begin operating as the primary controller.</p><p id="p-0151" num="0150">Consider, as an additional example of dynamically sizing the cloud-based storage system <b>318</b>, an example in which the monitoring module determines that the utilization of the local storage that is collectively provided by the cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>has reached a predetermined utilization threshold (e.g., 95%). In such an example, the monitoring module may create additional cloud computing instances with local storage to expand the pool of local storage that is offered by the cloud computing instances. Alternatively, the monitoring module may create one or more new cloud computing instances that have larger amounts of local storage than the already existing cloud computing instances <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n, </i>such that data stored in an already existing cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>can be migrated to the one or more new cloud computing instances and the already existing cloud computing instance <b>340</b><i>a, </i><b>340</b><i>b, </i><b>340</b><i>n </i>can be terminated, thereby expanding the pool of local storage that is offered by the cloud computing instances. Likewise, if the pool of local storage that is offered by the cloud computing instances is unnecessarily large, data can be consolidated and some cloud computing instances can be terminated.</p><p id="p-0152" num="0151">Readers will appreciate that the cloud-based storage system <b>318</b> may be sized up and down automatically by a monitoring module applying a predetermined set of rules that may be relatively simple of relatively complicated. In fact, the monitoring module may not only take into account the current state of the cloud-based storage system <b>318</b>, but the monitoring module may also apply predictive policies that are based on, for example, observed behavior (e.g., every night from 10 PM until 6 AM usage of the storage system is relatively light), predetermined fingerprints (e.g., every time a virtual desktop infrastructure adds <b>100</b> virtual desktops, the number of IOPS directed to the storage system increase by X), and so on. In such an example, the dynamic scaling of the cloud-based storage system <b>318</b> may be based on current performance metrics, predicted workloads, and many other factors, including combinations thereof</p><p id="p-0153" num="0152">Readers will further appreciate that because the cloud-based storage system <b>318</b> may be dynamically scaled, the cloud-based storage system <b>318</b> may even operate in a way that is more dynamic. Consider the example of garbage collection. In a traditional storage system, the amount of storage is fixed. As such, at some point the storage system may be forced to perform garbage collection as the amount of available storage has become so constrained that the storage system is on the verge of running out of storage. In contrast, the cloud-based storage system <b>318</b> described here can always &#x2018;add&#x2019; additional storage (e.g., by adding more cloud computing instances with local storage). Because the cloud-based storage system <b>318</b> described here can always &#x2018;add&#x2019; additional storage, the cloud-based storage system <b>318</b> can make more intelligent decisions regarding when to perform garbage collection. For example, the cloud-based storage system <b>318</b> may implement a policy that garbage collection only be performed when the number of IOPS being serviced by the cloud-based storage system <b>318</b> falls below a certain level. In some embodiments, other system-level functions (e.g., deduplication, compression) may also be turned off and on in response to system load, given that the size of the cloud-based storage system <b>318</b> is not constrained in the same way that traditional storage systems are constrained.</p><p id="p-0154" num="0153">Readers will appreciate that embodiments of the present disclosure resolve an issue with block-storage services offered by some cloud computing environments as some cloud computing environments only allow for one cloud computing instance to connect to a block-storage volume at a single time. For example, in Amazon AWS, only a single EC2 instance may be connected to an EBS volume. Through the use of EC2 instances with local storage, embodiments of the present disclosure can offer multi-connect capabilities where multiple EC2 instances can connect to another EC2 instance with local storage (&#x2018;a drive instance&#x2019;). In such embodiments, the drive instances may include software executing within the drive instance that allows the drive instance to support I/O directed to a particular volume from each connected EC2 instance. As such, some embodiments of the present disclosure may be embodied as multi-connect block storage services that may not include all of the components depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>.</p><p id="p-0155" num="0154">In some embodiments, especially in embodiments where the cloud-based object storage <b>348</b> resources are embodied as Amazon S3, the cloud-based storage system <b>318</b> may include one or more modules (e.g., a module of computer program instructions executing on an EC2 instance) that are configured to ensure that when the local storage of a particular cloud computing instance is rehydrated with data from S3, the appropriate data is actually in S3. This issue arises largely because S3 implements an eventual consistency model where, when overwriting an existing object, reads of the object will eventually (but not necessarily immediately) become consistent and will eventually (but not necessarily immediately) return the overwritten version of the object. To address this issue, in some embodiments of the present disclosure, objects in S3 are never overwritten. Instead, a traditional &#x2018;overwrite&#x2019; would result in the creation of the new object (that includes the updated version of the data) and the eventual deletion of the old object (that includes the previous version of the data).</p><p id="p-0156" num="0155">In some embodiments of the present disclosure, as part of an attempt to never (or almost never) overwrite an object, when data is written to S3 the resultant object may be tagged with a sequence number. In some embodiments, these sequence numbers may be persisted elsewhere (e.g., in a database) such that at any point in time, the sequence number associated with the most up-to-date version of some piece of data can be known. In such a way, a determination can be made as to whether S3 has the most recent version of some piece of data by merely reading the sequence number associated with an object&#x2014;and without actually reading the data from S3. The ability to make this determination may be particularly important when a cloud computing instance with local storage crashes, as it would be undesirable to rehydrate the local storage of a replacement cloud computing instance with out-of-date data. In fact, because the cloud-based storage system <b>318</b> does not need to access the data to verify its validity, the data can stay encrypted and access charges can be avoided.</p><p id="p-0157" num="0156">The storage systems described above may carry out intelligent data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe. For example, the storage systems described above may be configured to examine each backup to avoid restoring the storage system to an undesirable state. Consider an example in which malware infects the storage system. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify backups that were captured before the malware infected the storage system and those backups that were captured after the malware infected the storage system. In such an example, the storage system may restore itself from a backup that does not include the malware&#x2014;or at least not restore the portions of a backup that contained the malware. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify the presences of malware (or a virus, or some other undesirable), for example, by identifying write operations that were serviced by the storage system and originated from a network subnet that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and originated from a user that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and examining the content of the write operation against fingerprints of the malware, and in many other ways.</p><p id="p-0158" num="0157">Readers will further appreciate that the backups (often in the form of one or more snapshots) may also be utilized to perform rapid recovery of the storage system. Consider an example in which the storage system is infected with ransomware that locks users out of the storage system. In such an example, software resources <b>314</b> within the storage system may be configured to detect the presence of ransomware and may be further configured to restore the storage system to a point-in-time, using the retained backups, prior to the point-in-time at which the ransomware infected the storage system. In such an example, the presence of ransomware may be explicitly detected through the use of software tools utilized by the system, through the use of a key (e.g., a USB drive) that is inserted into the storage system, or in a similar way. Likewise, the presence of ransomware may be inferred in response to system activity meeting a predetermined fingerprint such as, for example, no reads or writes coming into the system for a predetermined period of time.</p><p id="p-0159" num="0158">Readers will appreciate that the various components described above may be grouped into one or more optimized computing packages as converged infrastructures. Such converged infrastructures may include pools of computers, storage and networking resources that can be shared by multiple applications and managed in a collective manner using policy-driven processes. Such converged infrastructures may be implemented with a converged infrastructure reference architecture, with standalone appliances, with a software driven hyper-converged approach (e.g., hyper-converged infrastructures), or in other ways.</p><p id="p-0160" num="0159">Readers will appreciate that the storage systems described above may be useful for supporting various types of software applications. For example, the storage system <b>306</b> may be useful in supporting artificial intelligence (&#x2018;AI&#x2019;) applications, database applications, DevOps projects, electronic design automation tools, event-driven software applications, high performance computing applications, simulation applications, high-speed data capture and analysis applications, machine learning applications, media production applications, media serving applications, picture archiving and communication systems (&#x2018;PACS&#x2019;) applications, software development applications, virtual reality applications, augmented reality applications, and many other types of applications by providing storage resources to such applications.</p><p id="p-0161" num="0160">The storage systems described above may operate to support a wide variety of applications. In view of the fact that the storage systems include compute resources, storage resources, and a wide variety of other resources, the storage systems may be well suited to support applications that are resource intensive such as, for example, AI applications. AI applications may be deployed in a variety of fields, including: predictive maintenance in manufacturing and related fields, healthcare applications such as patient data &#x26; risk analytics, retail and marketing deployments (e.g., search advertising, social media advertising), supply chains solutions, fintech solutions such as business analytics &#x26; reporting tools, operational deployments such as real-time analytics tools, application performance management tools, IT infrastructure management tools, and many others.</p><p id="p-0162" num="0161">Such AI applications may enable devices to perceive their environment and take actions that maximize their chance of success at some goal. Examples of such AI applications can include IBM Watson, Microsoft Oxford, Google DeepMind, Baidu Minwa, and others. The storage systems described above may also be well suited to support other types of applications that are resource intensive such as, for example, machine learning applications. Machine learning applications may perform various types of data analysis to automate analytical model building. Using algorithms that iteratively learn from data, machine learning applications can enable computers to learn without being explicitly programmed. One particular area of machine learning is referred to as reinforcement learning, which involves taking suitable actions to maximize reward in a particular situation. Reinforcement learning may be employed to find the best possible behavior or path that a particular software application or machine should take in a specific situation. Reinforcement learning differs from other areas of machine learning (e.g., supervised learning, unsupervised learning) in that correct input/output pairs need not be presented for reinforcement learning and sub-optimal actions need not be explicitly corrected.</p><p id="p-0163" num="0162">In addition to the resources already described, the storage systems described above may also include graphics processing units (&#x2018;GPUs&#x2019;), occasionally referred to as visual processing unit (&#x2018;VPUs&#x2019;). Such GPUs may be embodied as specialized electronic circuits that rapidly manipulate and alter memory to accelerate the creation of images in a frame buffer intended for output to a display device. Such GPUs may be included within any of the computing devices that are part of the storage systems described above, including as one of many individually scalable components of a storage system, where other examples of individually scalable components of such storage system can include storage components, memory components, compute components (e.g., CPUs, FPGAs, ASICs), networking components, software components, and others. In addition to GPUs, the storage systems described above may also include neural network processors (&#x2018;NNPs&#x2019;) for use in various aspects of neural network processing. Such NNPs may be used in place of (or in addition to) GPUs and may also be independently scalable.</p><p id="p-0164" num="0163">As described above, the storage systems described herein may be configured to support artificial intelligence applications, machine learning applications, big data analytics applications, and many other types of applications. The rapid growth in these sort of applications is being driven by three technologies: deep learning (DL), GPU processors, and Big Data. Deep learning is a computing model that makes use of massively parallel neural networks inspired by the human brain. Instead of experts handcrafting software, a deep learning model writes its own software by learning from lots of examples. Such GPUs may include thousands of cores that are well-suited to run algorithms that loosely represent the parallel nature of the human brain.</p><p id="p-0165" num="0164">Advances in deep neural networks, including the development of multi-layer neural networks, have ignited a new wave of algorithms and tools for data scientists to tap into their data with artificial intelligence (AI). With improved algorithms, larger data sets, and various frameworks (including open-source software libraries for machine learning across a range of tasks), data scientists are tackling new use cases like autonomous driving vehicles, natural language processing and understanding, computer vision, machine reasoning, strong AI, and many others. Applications of such techniques may include: machine and vehicular object detection, identification and avoidance; visual recognition, classification and tagging; algorithmic financial trading strategy performance management; simultaneous localization and mapping; predictive maintenance of high-value machinery; prevention against cyber security threats, expertise automation; image recognition and classification; question answering; robotics; text analytics (extraction, classification) and text generation and translation; and many others. Applications of AI techniques has materialized in a wide array of products include, for example, Amazon Echo's speech recognition technology that allows users to talk to their machines, Google Translate&#x2122; which allows for machine-based language translation, Spotify's Discover Weekly that provides recommendations on new songs and artists that a user may like based on the user's usage and traffic analysis, Quill's text generation offering that takes structured data and turns it into narrative stories, Chatbots that provide real-time, contextually specific answers to questions in a dialog format, and many others.</p><p id="p-0166" num="0165">Data is the heart of modern AI and deep learning algorithms. Before training can begin, one problem that must be addressed revolves around collecting the labeled data that is crucial for training an accurate AI model. A full scale AI deployment may be required to continuously collect, clean, transform, label, and store large amounts of data. Adding additional high quality data points directly translates to more accurate models and better insights. Data samples may undergo a series of processing steps including, but not limited to: 1) ingesting the data from an external source into the training system and storing the data in raw form, 2) cleaning and transforming the data in a format convenient for training, including linking data samples to the appropriate label, 3) exploring parameters and models, quickly testing with a smaller dataset, and iterating to converge on the most promising models to push into the production cluster, 4) executing training phases to select random batches of input data, including both new and older samples, and feeding those into production GPU servers for computation to update model parameters, and 5) evaluating including using a holdback portion of the data not used in training in order to evaluate model accuracy on the holdout data. This lifecycle may apply for any type of parallelized machine learning, not just neural networks or deep learning. For example, standard machine learning frameworks may rely on CPUs instead of GPUs but the data ingest and training workflows may be the same. Readers will appreciate that a single shared storage data hub creates a coordination point throughout the lifecycle without the need for extra data copies among the ingest, preprocessing, and training stages. Rarely is the ingested data used for only one purpose, and shared storage gives the flexibility to train multiple different models or apply traditional analytics to the data.</p><p id="p-0167" num="0166">Readers will appreciate that each stage in the AI data pipeline may have varying requirements from the data hub (e.g., the storage system or collection of storage systems). Scale-out storage systems must deliver uncompromising performance for all manner of access types and patterns&#x2014;from small, metadata-heavy to large files, from random to sequential access patterns, and from low to high concurrency. The storage systems described above may serve as an ideal AI data hub as the systems may service unstructured workloads. In the first stage, data is ideally ingested and stored on to the same data hub that following stages will use, in order to avoid excess data copying. The next two steps can be done on a standard compute server that optionally includes a GPU, and then in the fourth and last stage, full training production jobs are run on powerful GPU-accelerated servers. Often, there is a production pipeline alongside an experimental pipeline operating on the same dataset. Further, the GPU-accelerated servers can be used independently for different models or joined together to train on one larger model, even spanning multiple systems for distributed training. If the shared storage tier is slow, then data must be copied to local storage for each phase, resulting in wasted time staging data onto different servers. The ideal data hub for the AI training pipeline delivers performance similar to data stored locally on the server node while also having the simplicity and performance to enable all pipeline stages to operate concurrently.</p><p id="p-0168" num="0167">In order for the storage systems described above to serve as a data hub or as part of an AI deployment, in some embodiments the storage systems may be configured to provide DMA between storage devices that are included in the storage systems and one or more GPUs that are used in an AI or big data analytics pipeline. The one or more GPUs may be coupled to the storage system, for example, via NVMe-over-Fabrics (&#x2018;NVMe-oF&#x2019;) such that bottlenecks such as the host CPU can be bypassed and the storage system (or one of the components contained therein) can directly access GPU memory. In such an example, the storage systems may leverage API hooks to the GPUs to transfer data directly to the GPUs. For example, the GPUs may be embodied as Nvidia GPUs and the storage systems may support GPUDirect Storage (&#x2018;GDS&#x2019;) software, or have similar proprietary software, that enables the storage system to transfer data to the GPUs via RDMA or similar mechanism.</p><p id="p-0169" num="0168">Although the preceding paragraphs discuss deep learning applications, readers will appreciate that the storage systems described herein may also be part of a distributed deep learning (&#x2018;DDL&#x2019;) platform to support the execution of DDL algorithms. The storage systems described above may also be paired with other technologies such as TensorFlow, an open-source software library for dataflow programming across a range of tasks that may be used for machine learning applications such as neural networks, to facilitate the development of such machine learning models, applications, and so on.</p><p id="p-0170" num="0169">The storage systems described above may also be used in a neuromorphic computing environment. Neuromorphic computing is a form of computing that mimics brain cells. To support neuromorphic computing, an architecture of interconnected &#x201c;neurons&#x201d; replace traditional computing models with low-powered signals that go directly between neurons for more efficient computation. Neuromorphic computing may make use of very-large-scale integration (VLSI) systems containing electronic analog circuits to mimic neuro-biological architectures present in the nervous system, as well as analog, digital, mixed-mode analog/digital VLSI, and software systems that implement models of neural systems for perception, motor control, or multisensory integration.</p><p id="p-0171" num="0170">Readers will appreciate that the storage systems described above may be configured to support the storage or use of (among other types of data) blockchains. In addition to supporting the storage and use of blockchain technologies, the storage systems described above may also support the storage and use of derivative items such as, for example, open source blockchains and related tools that are part of the IBM&#x2122; Hyperledger project, permissioned blockchains in which a certain number of trusted parties are allowed to access the block chain, blockchain products that enable developers to build their own distributed ledger projects, and others. Blockchains and the storage systems described herein may be leveraged to support on-chain storage of data as well as off-chain storage of data.</p><p id="p-0172" num="0171">Off-chain storage of data can be implemented in a variety of ways and can occur when the data itself is not stored within the blockchain. For example, in one embodiment, a hash function may be utilized and the data itself may be fed into the hash function to generate a hash value. In such an example, the hashes of large pieces of data may be embedded within transactions, instead of the data itself. Readers will appreciate that, in other embodiments, alternatives to blockchains may be used to facilitate the decentralized storage of information. For example, one alternative to a blockchain that may be used is a blockweave. While conventional blockchains store every transaction to achieve validation, a blockweave permits secure decentralization without the usage of the entire chain, thereby enabling low cost on-chain storage of data. Such blockweaves may utilize a consensus mechanism that is based on proof of access (PoA) and proof of work (PoW).</p><p id="p-0173" num="0172">The storage systems described above may, either alone or in combination with other computing devices, be used to support in-memory computing applications. In-memory computing involves the storage of information in RAM that is distributed across a cluster of computers. Readers will appreciate that the storage systems described above, especially those that are configurable with customizable amounts of processing resources, storage resources, and memory resources (e.g., those systems in which blades that contain configurable amounts of each type of resource), may be configured in a way so as to provide an infrastructure that can support in-memory computing. Likewise, the storage systems described above may include component parts (e.g., NVDIMMs, 3D crosspoint storage that provide fast random access memory that is persistent) that can actually provide for an improved in-memory computing environment as compared to in-memory computing environments that rely on RAM distributed across dedicated servers.</p><p id="p-0174" num="0173">In some embodiments, the storage systems described above may be configured to operate as a hybrid in-memory computing environment that includes a universal interface to all storage media (e.g., RAM, flash storage, 3D crosspoint storage). In such embodiments, users may have no knowledge regarding the details of where their data is stored but they can still use the same full, unified API to address data. In such embodiments, the storage system may (in the background) move data to the fastest layer available&#x2014;including intelligently placing the data in dependence upon various characteristics of the data or in dependence upon some other heuristic. In such an example, the storage systems may even make use of existing products such as Apache Ignite and GridGain to move data between the various storage layers, or the storage systems may make use of custom software to move data between the various storage layers. The storage systems described herein may implement various optimizations to improve the performance of in-memory computing such as, for example, having computations occur as close to the data as possible.</p><p id="p-0175" num="0174">Readers will further appreciate that in some embodiments, the storage systems described above may be paired with other resources to support the applications described above. For example, one infrastructure could include primary compute in the form of servers and workstations which specialize in using General-purpose computing on graphics processing units (&#x2018;GPGPU&#x2019;) to accelerate deep learning applications that are interconnected into a computation engine to train parameters for deep neural networks. Each system may have Ethernet external connectivity, InfiniBand external connectivity, some other form of external connectivity, or some combination thereof. In such an example, the GPUs can be grouped for a single large training or used independently to train multiple models. The infrastructure could also include a storage system such as those described above to provide, for example, a scale-out all-flash file or object store through which data can be accessed via high-performance protocols such as NFS, S3, and so on. The infrastructure can also include, for example, redundant top-of-rack Ethernet switches connected to storage and compute via ports in MLAG port channels for redundancy. The infrastructure could also include additional compute in the form of whitebox servers, optionally with GPUs, for data ingestion, pre-processing, and model debugging. Readers will appreciate that additional infrastructures are also be possible.</p><p id="p-0176" num="0175">Readers will appreciate that the storage systems described above, either alone or in coordination with other computing machinery may be configured to support other AI related tools. For example, the storage systems may make use of tools like ONXX or other open neural network exchange formats that make it easier to transfer models written in different AI frameworks. Likewise, the storage systems may be configured to support tools like Amazon's Gluon that allow developers to prototype, build, and train deep learning models. In fact, the storage systems described above may be part of a larger platform, such as IBM&#x2122;Cloud Private for Data, that includes integrated data science, data engineering and application building services.</p><p id="p-0177" num="0176">Readers will further appreciate that the storage systems described above may also be deployed as an edge solution. Such an edge solution may be in place to optimize cloud computing systems by performing data processing at the edge of the network, near the source of the data. Edge computing can push applications, data and computing power (i.e., services) away from centralized points to the logical extremes of a network. Through the use of edge solutions such as the storage systems described above, computational tasks may be performed using the compute resources provided by such storage systems, data may be storage using the storage resources of the storage system, and cloud-based services may be accessed through the use of various resources of the storage system (including networking resources). By performing computational tasks on the edge solution, storing data on the edge solution, and generally making use of the edge solution, the consumption of expensive cloud-based resources may be avoided and, in fact, performance improvements may be experienced relative to a heavier reliance on cloud-based resources.</p><p id="p-0178" num="0177">While many tasks may benefit from the utilization of an edge solution, some particular uses may be especially suited for deployment in such an environment. For example, devices like drones, autonomous cars, robots, and others may require extremely rapid processing&#x2014;so fast, in fact, that sending data up to a cloud environment and back to receive data processing support may simply be too slow. As an additional example, some IoT devices such as connected video cameras may not be well-suited for the utilization of cloud-based resources as it may be impractical (not only from a privacy perspective, security perspective, or a financial perspective) to send the data to the cloud simply because of the pure volume of data that is involved. As such, many tasks that really on data processing, storage, or communications may be better suited by platforms that include edge solutions such as the storage systems described above.</p><p id="p-0179" num="0178">The storage systems described above may alone, or in combination with other computing resources, serves as a network edge platform that combines compute resources, storage resources, networking resources, cloud technologies and network virtualization technologies, and so on. As part of the network, the edge may take on characteristics similar to other network facilities, from the customer premise and backhaul aggregation facilities to Points of Presence (PoPs) and regional data centers. Readers will appreciate that network workloads, such as Virtual Network Functions (VNFs) and others, will reside on the network edge platform. Enabled by a combination of containers and virtual machines, the network edge platform may rely on controllers and schedulers that are no longer geographically co-located with the data processing resources. The functions, as microservices, may split into control planes, user and data planes, or even state machines, allowing for independent optimization and scaling techniques to be applied. Such user and data planes may be enabled through increased accelerators, both those residing in server platforms, such as FPGAs and Smart NICs, and through SDN-enabled merchant silicon and programmable ASICs.</p><p id="p-0180" num="0179">The storage systems described above may also be optimized for use in big data analytics. Big data analytics may be generally described as the process of examining large and varied data sets to uncover hidden patterns, unknown correlations, market trends, customer preferences and other useful information that can help organizations make more-informed business decisions. As part of that process, semi-structured and unstructured data such as, for example, internet clickstream data, web server logs, social media content, text from customer emails and survey responses, mobile-phone call-detail records, IoT sensor data, and other data may be converted to a structured form.</p><p id="p-0181" num="0180">The storage systems described above may also support (including implementing as a system interface) applications that perform tasks in response to human speech. For example, the storage systems may support the execution intelligent personal assistant applications such as, for example, Amazon's Alexa, Apple Siri, Google Voice, Samsung Bixby, Microsoft Cortana, and others. While the examples described in the previous sentence make use of voice as input, the storage systems described above may also support chatbots, talkbots, chatterbots, or artificial conversational entities or other applications that are configured to conduct a conversation via auditory or textual methods. Likewise, the storage system may actually execute such an application to enable a user such as a system administrator to interact with the storage system via speech. Such applications are generally capable of voice interaction, music playback, making to-do lists, setting alarms, streaming podcasts, playing audiobooks, and providing weather, traffic, and other real time information, such as news, although in embodiments in accordance with the present disclosure, such applications may be utilized as interfaces to various system management operations.</p><p id="p-0182" num="0181">The storage systems described above may also implement AI platforms for delivering on the vision of self-driving storage. Such AI platforms may be configured to deliver global predictive intelligence by collecting and analyzing large amounts of storage system telemetry data points to enable effortless management, analytics and support. In fact, such storage systems may be capable of predicting both capacity and performance, as well as generating intelligent advice on workload deployment, interaction and optimization. Such AI platforms may be configured to scan all incoming storage system telemetry data against a library of issue fingerprints to predict and resolve incidents in real-time, before they impact customer environments, and captures hundreds of variables related to performance that are used to forecast performance load.</p><p id="p-0183" num="0182">The storage systems described above may support the serialized or simultaneous execution of artificial intelligence applications, machine learning applications, data analytics applications, data transformations, and other tasks that collectively may form an AI ladder. Such an AI ladder may effectively be formed by combining such elements to form a complete data science pipeline, where exist dependencies between elements of the AI ladder. For example, AI may require that some form of machine learning has taken place, machine learning may require that some form of analytics has taken place, analytics may require that some form of data and information architecting has taken place, and so on. As such, each element may be viewed as a rung in an AI ladder that collectively can form a complete and sophisticated AI solution.</p><p id="p-0184" num="0183">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver an AI everywhere experience where AI permeates wide and expansive aspects of business and life. For example, AI may play an important role in the delivery of deep learning solutions, deep reinforcement learning solutions, artificial general intelligence solutions, autonomous vehicles, cognitive computing solutions, commercial UAVs or drones, conversational user interfaces, enterprise taxonomies, ontology management solutions, machine learning solutions, smart dust, smart robots, smart workplaces, and many others.</p><p id="p-0185" num="0184">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver a wide range of transparently immersive experiences (including those that use digital twins of various &#x201c;things&#x201d; such as people, places, processes, systems, and so on) where technology can introduce transparency between people, businesses, and things. Such transparently immersive experiences may be delivered as augmented reality technologies, connected homes, virtual reality technologies, brain-computer interfaces, human augmentation technologies, nanotube electronics, volumetric displays, 4D printing technologies, or others.</p><p id="p-0186" num="0185">The storage systems described above may also, either alone or in combination with other computing environments, be used to support a wide variety of digital platforms. Such digital platforms can include, for example, 5G wireless systems and platforms, digital twin platforms, edge computing platforms, IoT platforms, quantum computing platforms, serverless PaaS, software-defined security, neuromorphic computing platforms, and so on.</p><p id="p-0187" num="0186">The storage systems described above may also be part of a multi-cloud environment in which multiple cloud computing and storage services are deployed in a single heterogeneous architecture. In order to facilitate the operation of such a multi-cloud environment, DevOps tools may be deployed to enable orchestration across clouds. Likewise, continuous development and continuous integration tools may be deployed to standardize processes around continuous integration and delivery, new feature rollout and provisioning cloud workloads. By standardizing these processes, a multi-cloud strategy may be implemented that enables the utilization of the best provider for each workload.</p><p id="p-0188" num="0187">The storage systems described above may be used as a part of a platform to enable the use of crypto-anchors that may be used to authenticate a product's origins and contents to ensure that it matches a blockchain record associated with the product. Similarly, as part of a suite of tools to secure data stored on the storage system, the storage systems described above may implement various encryption technologies and schemes, including lattice cryptography. Lattice cryptography can involve constructions of cryptographic primitives that involve lattices, either in the construction itself or in the security proof. Unlike public-key schemes such as the RSA, Diffie-Hellman or Elliptic-Curve cryptosystems, which are easily attacked by a quantum computer, some lattice-based constructions appear to be resistant to attack by both classical and quantum computers.</p><p id="p-0189" num="0188">A quantum computer is a device that performs quantum computing. Quantum computing is computing using quantum-mechanical phenomena, such as superposition and entanglement. Quantum computers differ from traditional computers that are based on transistors, as such traditional computers require that data be encoded into binary digits (bits), each of which is always in one of two definite states (0 or 1). In contrast to traditional computers, quantum computers use quantum bits, which can be in superpositions of states. A quantum computer maintains a sequence of qubits, where a single qubit can represent a one, a zero, or any quantum superposition of those two qubit states. A pair of qubits can be in any quantum superposition of 4 states, and three qubits in any superposition of 8 states. A quantum computer with n qubits can generally be in an arbitrary superposition of up to 2{circumflex over (&#x2003;)}n different states simultaneously, whereas a traditional computer can only be in one of these states at any one time. A quantum Turing machine is a theoretical model of such a computer.</p><p id="p-0190" num="0189">The storage systems described above may also be paired with FPGA-accelerated servers as part of a larger AI or ML infrastructure. Such FPGA-accelerated servers may reside near (e.g., in the same data center) the storage systems described above or even incorporated into an appliance that includes one or more storage systems, one or more FPGA-accelerated servers, networking infrastructure that supports communications between the one or more storage systems and the one or more FPGA-accelerated servers, as well as other hardware and software components. Alternatively, FPGA-accelerated servers may reside within a cloud computing environment that may be used to perform compute-related tasks for AI and ML jobs. Any of the embodiments described above may be used to collectively serve as a FPGA-based AI or ML platform. Readers will appreciate that, in some embodiments of the FPGA-based AI or ML platform, the FPGAs that are contained within the FPGA-accelerated servers may be reconfigured for different types of ML models (e.g., LSTMs, CNNs, GRUs). The ability to reconfigure the FPGAs that are contained within the FPGA-accelerated servers may enable the acceleration of a ML or AI application based on the most optimal numerical precision and memory model being used. Readers will appreciate that by treating the collection of FPGA-accelerated servers as a pool of FPGAs, any CPU in the data center may utilize the pool of FPGAs as a shared hardware microservice, rather than limiting a server to dedicated accelerators plugged into it.</p><p id="p-0191" num="0190">The FPGA-accelerated servers and the GPU-accelerated servers described above may implement a model of computing where, rather than keeping a small amount of data in a CPU and running a long stream of instructions over it as occurred in more traditional computing models, the machine learning model and parameters are pinned into the high-bandwidth on-chip memory with lots of data streaming though the high-bandwidth on-chip memory. FPGAs may even be more efficient than GPUs for this computing model, as the FPGAs can be programmed with only the instructions needed to run this kind of computing model.</p><p id="p-0192" num="0191">The storage systems described above may be configured to provide parallel storage, for example, through the use of a parallel file system such as BeeGFS. Such parallel files systems may include a distributed metadata architecture. For example, the parallel file system may include a plurality of metadata servers across which metadata is distributed, as well as components that include services for clients and storage servers.</p><p id="p-0193" num="0192">The systems described above can support the execution of a wide array of software applications. Such software applications can be deployed in a variety of ways, including container-based deployment models. Containerized applications may be managed using a variety of tools. For example, containerized applications may be managed using Docker Swarm, Kubernetes, and others. Containerized applications may be used to facilitate a serverless, cloud native computing deployment and management model for software applications. In support of a serverless, cloud native computing deployment and management model for software applications, containers may be used as part of an event handling mechanisms (e.g., AWS Lambdas) such that various events cause a containerized application to be spun up to operate as an event handler.</p><p id="p-0194" num="0193">The systems described above may be deployed in a variety of ways, including being deployed in ways that support fifth generation (&#x2018;5G&#x2019;) networks. 5G networks may support substantially faster data communications than previous generations of mobile communications networks and, as a consequence may lead to the disaggregation of data and computing resources as modern massive data centers may become less prominent and may be replaced, for example, by more-local, micro data centers that are close to the mobile-network towers. The systems described above may be included in such local, micro data centers and may be part of or paired to multi-access edge computing (&#x2018;MEC&#x2019;) systems. Such MEC systems may enable cloud computing capabilities and an IT service environment at the edge of the cellular network. By running applications and performing related processing tasks closer to the cellular customer, network congestion may be reduced and applications may perform better.</p><p id="p-0195" num="0194">The storage systems described above may also be configured to implement NVMe Zoned Namespaces. Through the use of NVMe Zoned Namespaces, the logical address space of a namespace is divided into zones. Each zone provides a logical block address range that must be written sequentially and explicitly reset before rewriting, thereby enabling the creation of namespaces that expose the natural boundaries of the device and offload management of internal mapping tables to the host. In order to implement NVMe Zoned Name Spaces (&#x2018;ZNS&#x2019;), ZNS SSDs or some other form of zoned block devices may be utilized that expose a namespace logical address space using zones. With the zones aligned to the internal physical properties of the device, several inefficiencies in the placement of data can be eliminated. In such embodiments, each zone may be mapped, for example, to a separate application such that functions like wear levelling and garbage collection could be performed on a per-zone or per-application basis rather than across the entire device. In order to support ZNS, the storage controllers described herein may be configured with to interact with zoned block devices through the usage of, for example, the Linux&#x2122; kernel zoned block device interface or other tools.</p><p id="p-0196" num="0195">The storage systems described above may also be configured to implement zoned storage in other ways such as, for example, through the usage of shingled magnetic recording (SMR) storage devices. In examples where zoned storage is used, device-managed embodiments may be deployed where the storage devices hide this complexity by managing it in the firmware, presenting an interface like any other storage device. Alternatively, zoned storage may be implemented via a host-managed embodiment that depends on the operating system to know how to handle the drive, and only write sequentially to certain regions of the drive. Zoned storage may similarly be implemented using a host-aware embodiment in which a combination of a drive managed and host managed implementation is deployed.</p><p id="p-0197" num="0196">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> illustrates an exemplary computing device <b>350</b> that may be specifically configured to perform one or more of the processes described herein. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, computing device <b>350</b> may include a communication interface <b>352</b>, a processor <b>354</b>, a storage device <b>356</b>, and an input/output (&#x201c;I/O&#x201d;) module <b>358</b> communicatively connected one to another via a communication infrastructure <b>360</b>. While an exemplary computing device <b>350</b> is shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, the components illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> are not intended to be limiting. Additional or alternative components may be used in other embodiments. Components of computing device <b>350</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> will now be described in additional detail.</p><p id="p-0198" num="0197">Communication interface <b>352</b> may be configured to communicate with one or more computing devices. Examples of communication interface <b>352</b> include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, an audio/video connection, and any other suitable interface.</p><p id="p-0199" num="0198">Processor <b>354</b> generally represents any type or form of processing unit capable of processing data and/or interpreting, executing, and/or directing execution of one or more of the instructions, processes, and/or operations described herein. Processor <b>354</b> may perform operations by executing computer-executable instructions <b>362</b> (e.g., an application, software, code, and/or other executable data instance) stored in storage device <b>356</b>.</p><p id="p-0200" num="0199">Storage device <b>356</b> may include one or more data storage media, devices, or configurations and may employ any type, form, and combination of data storage media and/or device. For example, storage device <b>356</b> may include, but is not limited to, any combination of the non-volatile media and/or volatile media described herein. Electronic data, including data described herein, may be temporarily and/or permanently stored in storage device <b>356</b>. For example, data representative of computer-executable instructions <b>362</b> configured to direct processor <b>354</b> to perform any of the operations described herein may be stored within storage device <b>356</b>. In some examples, data may be arranged in one or more databases residing within storage device <b>356</b>.</p><p id="p-0201" num="0200">I/O module <b>358</b> may include one or more I/O modules configured to receive user input and provide user output. I/O module <b>358</b> may include any hardware, firmware, software, or combination thereof supportive of input and output capabilities. For example, I/O module <b>358</b> may include hardware and/or software for capturing user input, including, but not limited to, a keyboard or keypad, a touchscreen component (e.g., touchscreen display), a receiver (e.g., an RF or infrared receiver), motion sensors, and/or one or more input buttons.</p><p id="p-0202" num="0201">I/O module <b>358</b> may include one or more devices for presenting output to a user, including, but not limited to, a graphics engine, a display (e.g., a display screen), one or more output drivers (e.g., display drivers), one or more audio speakers, and one or more audio drivers. In certain embodiments, I/O module <b>358</b> is configured to provide graphical data to a display for presentation to a user. The graphical data may be representative of one or more graphical user interfaces and/or any other graphical content as may serve a particular implementation. In some examples, any of the systems, computing devices, and/or other components described herein may be implemented by computing device <b>350</b>.</p><p id="p-0203" num="0202">The storage systems described above may, either alone or in combination, by configured to serve as a continuous data protection store. A continuous data protection store is a feature of a storage system that records updates to a dataset in such a way that consistent images of prior contents of the dataset can be accessed with a low time granularity (often on the order of seconds, or even less), and stretching back for a reasonable period of time (often hours or days). These allow access to very recent consistent points in time for the dataset, and also allow access to access to points in time for a dataset that might have just preceded some event that, for example, caused parts of the dataset to be corrupted or otherwise lost, while retaining close to the maximum number of updates that preceded that event. Conceptually, they are like a sequence of snapshots of a dataset taken very frequently and kept for a long period of time, though continuous data protection stores are often implemented quite differently from snapshots. A storage system implementing a data continuous data protection store may further provide a means of accessing these points in time, accessing one or more of these points in time as snapshots or as cloned copies, or reverting the dataset back to one of those recorded points in time.</p><p id="p-0204" num="0203">Over time, to reduce overhead, some points in the time held in a continuous data protection store can be merged with other nearby points in time, essentially deleting some of these points in time from the store. This can reduce the capacity needed to store updates. It may also be possible to convert a limited number of these points in time into longer duration snapshots. For example, such a store might keep a low granularity sequence of points in time stretching back a few hours from the present, with some points in time merged or deleted to reduce overhead for up to an additional day. Stretching back in the past further than that, some of these points in time could be converted to snapshots representing consistent point-in-time images from only every few hours.</p><p id="p-0205" num="0204">Although some embodiments are described largely in the context of a storage system, readers of skill in the art will recognize that embodiments of the present disclosure may also take the form of a computer program product disposed upon computer readable storage media for use with any suitable processing system. Such computer readable storage media may be any storage medium for machine-readable information, including magnetic media, optical media, solid-state media, or other suitable media. Examples of such media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps described herein as embodied in a computer program product. Persons skilled in the art will recognize also that, although some of the embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present disclosure.</p><p id="p-0206" num="0205">In some examples, a non-transitory computer-readable medium storing computer-readable instructions may be provided in accordance with the principles described herein. The instructions, when executed by a processor of a computing device, may direct the processor and/or computing device to perform one or more operations, including one or more of the operations described herein. Such instructions may be stored and/or transmitted using any of a variety of known computer-readable media.</p><p id="p-0207" num="0206">A non-transitory computer-readable medium as referred to herein may include any non-transitory storage medium that participates in providing data (e.g., instructions) that may be read and/or executed by a computing device (e.g., by a processor of a computing device). For example, a non-transitory computer-readable medium may include, but is not limited to, any combination of non-volatile storage media and/or volatile storage media. Exemplary non-volatile storage media include, but are not limited to, read-only memory, flash memory, a solid-state drive, a magnetic storage device (e.g., a hard disk, a floppy disk, magnetic tape, etc.), ferroelectric random-access memory (&#x201c;RAM&#x201d;), and an optical disc (e.g., a compact disc, a digital video disc, a Blu-ray disc, etc.). Exemplary volatile storage media include, but are not limited to, RAM (e.g., dynamic RAM).</p><p id="p-0208" num="0207">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b></figref> sets forth a flow chart illustrating an example method of establishing a synchronous replication relationship between two or more storage systems (<b>414</b>, <b>424</b>, <b>428</b>) according to some embodiments of the present disclosure. Although depicted in less detail, the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref>, <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>, <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>B</figref>, or any combination thereof. In fact, the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may include the same, fewer, additional components as the storage systems described above.</p><p id="p-0209" num="0208">The example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> includes identifying (<b>402</b>), for a dataset (<b>412</b>), a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) across which the dataset (<b>412</b>) will be synchronously replicated. The dataset (<b>412</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be embodied, for example, as the contents of a particular volume, as the contents of a particular shard of a volume, or as any other collection of one or more data elements. The dataset (<b>412</b>) may be synchronized across a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) such that each storage system (<b>414</b>, <b>424</b>, <b>428</b>) retains a local copy of the dataset (<b>412</b>). In the examples described herein, such a dataset (<b>412</b>) is synchronously replicated across the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) in such a way that the dataset (<b>412</b>) can be accessed through any of the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) with performance characteristics such that any one storage system in the cluster doesn't operate substantially more optimally than any other storage system in the cluster, at least as long as the cluster and the particular storage system being accessed are running nominally. In such systems, modifications to the dataset (<b>412</b>) should be made to the copy of the dataset that resides on each storage system (<b>414</b>, <b>424</b>, <b>428</b>) in such a way that accessing the dataset (<b>412</b>) on any of the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) will yield consistent results. For example, a write request issued to the dataset must be serviced on all storage systems (<b>414</b>, <b>424</b>, <b>428</b>) or serviced on none of the storage systems (<b>414</b>, <b>424</b>, <b>428</b>). Likewise, some groups of operations (e.g., two write operations that are directed to same location within the dataset) must be executed in the same order on all storage systems (<b>414</b>, <b>424</b>, <b>428</b>) such that the copy of the dataset that resides on each storage system (<b>414</b>, <b>424</b>, <b>428</b>) is ultimately identical. Modifications to the dataset (<b>412</b>) need not be made at the exact same time, but some actions (e.g., issuing an acknowledgement that a write request directed to the dataset, enabling read access to a location within the dataset that is targeted by a write request that has not yet been completed on all storage systems) may be delayed until the copy of the dataset (<b>412</b>) on each storage system (<b>414</b>, <b>424</b>, <b>428</b>) has been modified.</p><p id="p-0210" num="0209">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, identifying (<b>402</b>), for a dataset (<b>412</b>), a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) across which the dataset (<b>412</b>) will be synchronously replicated may be carried out, for example, by examining a pod definition or similar data structure that associates a dataset (<b>412</b>) with one or more storage systems (<b>414</b>, <b>424</b>, <b>428</b>) which nominally store that dataset (<b>412</b>). A &#x2018;pod&#x2019;, as the term is used here and throughout the remainder of the present application, may be embodied as a management entity that represents a dataset, a set of managed objects and management operations, a set of access operations to modify or read the dataset, and a plurality of storage systems. Such management operations may modify or query managed objects equivalently through any of the storage systems, where access operations to read or modify the dataset operate equivalently through any of the storage systems. Each storage system may store a separate copy of the dataset as a proper subset of the datasets stored and advertised for use by the storage system, where operations to modify managed objects or the dataset performed and completed through any one storage system are reflected in subsequent management objects to query the pod or subsequent access operations to read the dataset. Additional details regarding a &#x2018;pod&#x2019; may be found in previously filed provisional patent application No. 62/518,071, which is incorporated herein by reference. In such an example, the pod definition may include at least an identification of a dataset (<b>412</b>) and a set of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) across which the dataset (<b>412</b>) is synchronously replicated. Such a pod may encapsulate some of number of (perhaps optional) properties including symmetric access, flexible addition/removal of replicas, high availability data consistency, uniform user administration across storage systems in relationship to the dataset, managed host access, application clustering, and so on. Storage systems can be added to a pod, resulting in the pod's dataset (<b>412</b>) being copied to that storage system and then kept up to date as the dataset (<b>412</b>) is modified. Storage systems can also be removed from a pod, resulting in the dataset (<b>412</b>) being no longer kept up to date on the removed storage system. In such examples, a pod definition or similar data structure may be updated as storage systems are added to and removed from a particular pod.</p><p id="p-0211" num="0210">The example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> also includes configuring (<b>404</b>) one or more data communications links (<b>416</b>, <b>418</b>, <b>420</b>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to be used for synchronously replicating the dataset (<b>412</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) in a pod must communicate with each other both for high bandwidth data transfer, and for cluster, status, and administrative communication. These distinct types of communication could be over the same data communications links (<b>416</b>, <b>418</b>, <b>420</b>) or, in an alternative embodiment, these distinct types of communication could be over separate data communications links (<b>416</b>, <b>418</b>, <b>420</b>). In a cluster of dual controller storage systems, both controllers in each storage system should have the nominal ability to communicate with both controllers for any paired storage systems (i.e., any other storage system in a pod).</p><p id="p-0212" num="0211">In a primary/secondary controller design, all cluster communication for active replication may run between primary controllers until a fault occurs. In such systems, some communication may occur between a primary controller and a secondary controller, or between secondary controllers on distinct storage systems, in order to verify that the data communications links between such entities are operational. In other cases, virtual network addresses might be used to limit the configuration needed for of inter-datacenter network links, or to simplify design of the clustered aspect of the storage system. In an active/active controller design, cluster communications might run from all active controllers of one storage system to some or all active controllers in any paired storage systems, or they might be filtered through a common switch, or they might use a virtual network address to simplify configuration, or they might use some combination. In a scale-out design, two or more common network switches may be used such that all scale-out storage controllers within the storage system connect to the network switches in order to handle data traffic. The switches might or might not use techniques to limit the number of exposed network addresses, so that paired storage systems don't need to be configured with the network addresses of all storage controllers.</p><p id="p-0213" num="0212">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, configuring (<b>404</b>) one or more data communications links (<b>416</b>, <b>418</b>, <b>420</b>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to be used for synchronously replicating the dataset (<b>412</b>) may be carried out, for example, by configuring the storage systems (<b>416</b>, <b>418</b>, <b>420</b>) to communicate via defined ports over a data communications network, by configuring the storage systems (<b>416</b>, <b>418</b>, <b>420</b>) to communicate over a point-to-point data communications link between two of the storage systems (<b>416</b>, <b>424</b>, <b>428</b>), or in a variety of ways. If secure communication is required, some form of key exchange may be needed, or communication could be done or bootstrapped through some service such as SSH (Secure SHell), SSL, or some other service or protocol built around public keys or Diffie-Hellman key exchange or reasonable alternatives. Secure communications could also be mediated through some vendor-provided cloud service tied in some way to customer identities. Alternately, a service configured to run on customer facilities, such as running in a virtual machine or container, could be used to mediate key exchanges necessary for secure communications between replicating storage systems (<b>416</b>, <b>418</b>, <b>420</b>). Readers will appreciate that a pod including more than two storage systems may need communication links between most or all of the individual storage systems. In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, three data communications links (<b>416</b>, <b>418</b>, <b>420</b>) are illustrated, although additional data communications links may exist in other embodiments.</p><p id="p-0214" num="0213">Readers will appreciate that communication between the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) across which the dataset (<b>412</b>) will be synchronously replicated serves some number of purposes. One purpose, for example, is to deliver data from one storage system (<b>414</b>, <b>424</b>, <b>428</b>) to another storage system (<b>414</b>, <b>424</b>, <b>428</b>) as part of I/O processing. For example, processing a write commonly requires delivering the write content and some description of the write to any paired storage systems for a pod. Another purpose served by data communications between the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may be to communicate configuration changes and analytics data in order to handle creating, extending, deleting or renaming volumes, files, object buckets, and so on. Another purpose served by data communications between the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may be to carry out communication involved in detecting and handling storage system and interconnect faults. This type of communication may be time critical and may need to be prioritized to ensure it doesn't get stuck behind a long network queue delay when a large burst of write traffic is suddenly dumped on the datacenter interconnect.</p><p id="p-0215" num="0214">Readers will further appreciate that different types of communication may use the same connections, or different connections, and may use the same networks, or different networks, in various combinations. Further, some communications may be encrypted and secured while other communications might not be encrypted. In some cases, the data communications links could be used to forward I/O requests (either directly as the requests themselves or as logical descriptions of the operations the I/O requests represent) from one storage system to another. This could be used, for example, in cases where one storage system has up-to-date and in-sync content for a pod, and another storage system does not currently have up-to-date and in-sync content for the pod. In such cases, as long as the data communications links are running, requests can be forwarded from the storage system that is not up-to-date and in-sync to the storage system that is up-to-date and in-sync.</p><p id="p-0216" num="0215">The example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> also includes exchanging (<b>406</b>), between the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, timing information (<b>410</b>, <b>422</b>, <b>426</b>) for a particular storage system (<b>414</b>, <b>424</b>, <b>428</b>) may be embodied, for example, as the value of a clock within the storage system (<b>414</b>, <b>424</b>, <b>428</b>). In an alternative embodiment, the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for a particular storage system (<b>414</b>, <b>424</b>, <b>428</b>) may be embodied as a value which serves as a proxy for a clock value. The value which serves as a proxy for a clock value may be included in a token that is exchanged between the storage systems. Such a value which serves as a proxy for a clock value may be embodied, for example, a sequence number that a particular storage system (<b>414</b>, <b>424</b>, <b>428</b>) or storage system controller can internally record as having been sent at a particular time. In such an example, if the token (e.g., the sequence number) is received back, the associated clock value can be found and utilized as the basis for determining whether a valid lease is still in place. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, exchanging (<b>406</b>) timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) between the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may be carried out, for example, by each storage system (<b>414</b>, <b>424</b>, <b>428</b>) sending timing information to each other storage system (<b>414</b>, <b>424</b>, <b>428</b>) in a pod on a periodic basis, on demand, within a predetermined amount of time after a lease is established, within a predetermined amount of time before a lease is set to expire, as part of an attempt to initiate or re-establish a synchronous replication relationship, or in some other way.</p><p id="p-0217" num="0216">The example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> also includes establishing (<b>408</b>), in dependence upon the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), a synchronous replication lease, the synchronous replication lease identifying a period of time during which the synchronous replication relationship is valid. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a synchronous replication relationship is formed as a set of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) that replicate some dataset (<b>412</b>) between these largely independent stores, where each storage systems (<b>414</b>, <b>424</b>, <b>428</b>) has its own copy and its own separate internal management of relevant data structures for defining storage objects, for mapping objects to physical storage, for deduplication, for defining the mapping of content to snapshots, and so on. A synchronous replication relationship can be specific to a particular dataset, such that a particular storage system (<b>414</b>, <b>424</b>, <b>428</b>) may be associated with more than one synchronous replication relationship, where each synchronous replication relationship is differentiated by the dataset being described and may further consist of a different set of additional member storage systems.</p><p id="p-0218" num="0217">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a synchronous replication lease may be established (<b>408</b>) in dependence upon the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) in a variety of different ways. In one embodiment, the storage systems may establish (<b>408</b>) a synchronous replication lease by utilizing the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to coordinate clocks. In such an example, once the clocks are coordinated for each of the storage systems (<b>414</b>, <b>424</b>, <b>428</b>), the storage system may establish (<b>408</b>) a synchronous replication lease that extends for a predetermined period of time beyond the coordinated clock values. For example, if the clocks for each storage system (<b>414</b>, <b>424</b>, <b>428</b>) are coordinated to be at a value of X, the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may each be configured to establish a synchronous replication lease that is valid until X+2 seconds.</p><p id="p-0219" num="0218">In an alternative embodiment, the need to coordinate clocks between the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may be avoided while still achieving a timing guarantee. In such an embodiment, a storage controller within each storage system (<b>414</b>, <b>424</b>, <b>428</b>) may have a local monotonically increasing clock. A synchronous replication lease may be established (<b>408</b>) between storage controllers (such as a primary controller in one storage system communicating with a primary controller in a paired storage system) by each controller sending its clock value to the other storage controllers along with the last clock value it received from the other storage controller. When a particular controller receives back its clock value from another controller, it adds some agreed upon lease interval to that received clock value and uses that to establish (<b>408</b>) its local synchronous replication lease. In such a way, the synchronous replication lease may be calculated in dependence upon a value of a local clock that was received from another storage system.</p><p id="p-0220" num="0219">Consider an example in which a storage controller in a first storage system (<b>414</b>) is communicating with a storage controller in a second storage system (<b>424</b>). In such an example, assume that the value of the monotonically increasing clock for the storage controller in the first storage system (<b>414</b>) is <b>1000</b> milliseconds. Further assume that the storage controller in the first storage system (<b>414</b>) sends a message to the storage controller in the second storage system (<b>424</b>) indicating that its clock value at the time that the message was generated was <b>1000</b> milliseconds. In such an example, assume that <b>500</b> milliseconds after the storage controller in the first storage system (<b>414</b>) sent a message to the storage controller in the second storage system (<b>424</b>) indicating that its clock value at the time that the message was generated was 1000 milliseconds, the storage controller in the first storage system (<b>414</b>) receives a message from the storage controller in a second storage system (<b>424</b>) indicating that: 1) the value of the monotonically increasing clock in the storage controller in the second storage system (<b>424</b>) was at a value of 5000 milliseconds when the message was generated, and 2) the last value of the monotonically increasing clock in the storage controller in the first storage system (<b>414</b>) that was received by the second storage system (<b>424</b>) was 1000 milliseconds. In such an example, if the agreed upon lease interval is 2000 milliseconds, the first storage system (<b>414</b>) will establish (<b>408</b>) a synchronous replication lease that is valid until the monotonically increasing clock for the storage controller in the first storage system (<b>414</b>) is at a value of 3000 milliseconds. If the storage controller in the first storage system (<b>414</b>) does not receive a message from the storage controller in the second storage system (<b>424</b>) that includes an updated value of the monotonically increasing clock for the storage controller in the first storage system (<b>414</b>) by the time that the monotonically increasing clock for the storage controller in the first storage system (<b>414</b>) reaches a value of 3000 milliseconds, the first storage system (<b>414</b>) will treat the synchronous replication lease to have expired and may take various actions as described in greater detail below. Readers will appreciate that storage controllers within the remaining storage systems (<b>424</b>, <b>428</b>) in a pod may react similarly and perform a similar tracking and updating of the synchronous replication lease. Essentially, the receiving controller can be assured that the network and the paired controllers were running somewhere during that time interval, and it can be assured that the paired controller received a message that it sent somewhere during that time interval. Without any coordination in clocks, the receiving controller can't know exactly where in that time interval the network and the paired controller were running, and can't really know if there were queue delays in sending its clock value or in receiving back its clock value.</p><p id="p-0221" num="0220">In a pod consisting of two storage systems, each with a simple primary controller, where the primary controllers are exchanging clocks as part of their cluster communication, each primary controller can use the activity lease to put a bound on when it won't know for certain that the paired controller was running. At the point it becomes uncertain (when the controller's connection's activity lease has expired), it can start sending messages indicating that it is uncertain and that a properly synchronized connection must be reestablished before activity leases can again be resumed. These messages may be received and responses may not be received, if the network is working in one direction but is not working properly in the other direction. This may be the first indication by a running paired controller that the connection isn't running normally, because its own activity lease may not yet have expired, due to a different combination of lost messages and queue delays. As a result, if such a message is received, it should also consider its own activity lease to be expired, and it should start sending messages of its own attempting to coordinate synchronizing the connection and resuming of activity leases. Until that happens and a new set of clock exchanges can succeed, neither controller can consider its activity lease to be valid.</p><p id="p-0222" num="0221">In this model, a controller can wait for lease interval seconds after it started sending reestablish messages, and if it hasn't received a response, it can be assured that either the paired controller is down or the paired controller's own lease for the connection will have expired. To handle minor amounts of clock drift, it may wait slightly longer than the lease interval (i.e., a reestablishment lease). When a controller receives a reestablish message, it could consider the reestablishment lease to be expired immediately, rather than waiting (since it knows that the sending controller's activity lease has expired), but it will often make sense to attempt further messaging before giving up, in case message loss was a temporary condition caused, for example, by a congested network switch.</p><p id="p-0223" num="0222">In an alternative embodiment, in addition to establishing a synchronous replication lease, a cluster membership lease may also be established upon receipt of a clock value from a paired storage system or upon receipt back of a clock exchanged with a paired storage system. In such an example, each storage system may have its own synchronous replication lease and its own cluster membership lease with every paired storage system. The expiration of a synchronous replication lease with any pair may result in paused processing. Cluster membership, however, cannot be recalculated until the cluster membership lease has expired with all pairs. As such, the duration of the cluster membership lease should be set, based on the message and clock value interactions, to ensure that the cluster membership lease with a pair will not expire until after a pair's synchronous replication link for that link has expired. Readers will appreciate that a cluster membership lease can be established by each storage system in a pod and may be associated with a communication link between any two storage systems that are members of the pod. Furthermore, the cluster membership lease may extend after the expiration of the synchronous replication lease for a duration of time that is at least as long as the time period for expiration of the synchronous replication lease. The cluster membership lease may be extended on receipt of a clock value received from a paired storage system as part of a clock exchange, where the cluster membership lease period from the current clock value may be at least as long as the period established for the last synchronous replication lease extension based on exchanged clock values. In additional embodiments, additional cluster membership information can be exchanged over a connection, including when a session is first negotiated. Readers will appreciate that in embodiments that utilize a cluster membership lease, each storage system (or storage controller) may have its own value for the cluster membership lease. Such a lease should not expire until it can be assured that all synchronous replication leases across all pod members will have expired given that the cluster lease expiration allows establishing new membership such as through a mediator race and the synchronous replication lease expiration forces processing of new requests to pause. In such an example, the pause must be assured to be in place everywhere before cluster membership actions can be taken.</p><p id="p-0224" num="0223">Readers will appreciate that although only one of the storage systems (<b>414</b>) is depicted as identifying (<b>402</b>), for a dataset (<b>412</b>), a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) across which the dataset (<b>412</b>) will be synchronously replicated, configuring (<b>404</b>) one or more data communications links (<b>416</b>, <b>418</b>, <b>420</b>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to be used for synchronously replicating the dataset (<b>412</b>), exchanging (<b>406</b>), between the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), and establishing (<b>408</b>), in dependence upon the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), a synchronous replication lease, the remaining storage systems (<b>424</b>, <b>428</b>) may also carry out such steps. In fact, all three storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may carry out one or more of the steps described above at the same time, as establishing a synchronous replication relationship between two or more storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may require collaboration and interaction between two or more storage systems (<b>414</b>, <b>424</b>, <b>428</b>).</p><p id="p-0225" num="0224">For further explanation, <figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth a flow chart illustrating an additional example method of establishing a synchronous replication relationship between two or more storage systems (<b>414</b>, <b>424</b>, <b>428</b>) according to some embodiments of the present disclosure. The example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> also includes identifying (<b>402</b>), for a dataset (<b>412</b>), a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) across which the dataset (<b>412</b>) will be synchronously replicated, configuring (<b>404</b>) one or more data communications links (<b>416</b>, <b>418</b>, <b>420</b>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to be used for synchronously replicating the dataset (<b>412</b>), exchanging (<b>406</b>), between the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), and establishing (<b>408</b>), in dependence upon the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), a synchronous replication lease, the synchronous replication lease identifying a period of time during which the synchronous replication relationship is valid.</p><p id="p-0226" num="0225">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, establishing (<b>408</b>), in dependence upon the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), a synchronous replication lease can include coordinating (<b>502</b>) clocks between a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, coordinating (<b>502</b>) clocks between a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may be carried out, for example, through the exchange of one or more messages sent between the storage systems (<b>414</b>, <b>424</b>, <b>428</b>). The one or more messages sent between the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may include information such as, for example, the clock value of a storage system whose clock value will be used by all other storage systems, an instruction for all storage systems to set their clock values to a predetermined value, confirmation messages from a storage system that has updated its clock value, and so on. In such an example, the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may be configured such that the clock value for a particular storage system (e.g., a leader storage system) should be used by all other storage systems, the clock value from all of the storage system that meets some particular criteria (e.g., the highest clock value) should be used all other storage systems, and so on. In such an example, some predetermined amount of time may be added to a clock value received from another storage system to account for transmission times associated with the exchange of messages.</p><p id="p-0227" num="0226">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, establishing (<b>408</b>), in dependence upon the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), a synchronous replication lease can include exchanging (<b>504</b>) uncoordinated clocks between a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>). Exchanging (<b>504</b>) uncoordinated clocks between a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may be carried, for example, by a storage controller in each storage system (<b>414</b>, <b>424</b>, <b>428</b>) exchanging values for a local monotonically increasing clock as described in greater detail above. In such an example, each storage system (<b>414</b>, <b>424</b>, <b>428</b>) may utilize an agreed upon synchronous replication lease interval and messaging received from other storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to establish (<b>408</b>) a synchronous replication lease.</p><p id="p-0228" num="0227">The example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> also includes delaying (<b>506</b>) the processing of I/O requests received after the synchronous replication lease has expired. I/O requests received by any of the storage systems after the synchronous replication lease has expired may be delayed (<b>506</b>), for example, for a predetermined amount of time that is sufficient for attempting to re-establish a synchronous replication relationship, until a new synchronous replication lease has been established, and so on. In such an example, a storage system may delay (<b>506</b>) the processing of I/O requests by failing with some type of &#x2018;busy&#x2019; or temporary failure indication, or in some other way.</p><p id="p-0229" num="0228">For further explanation, <figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth a flow chart illustrating an additional example method of establishing a synchronous replication relationship between two or more storage systems (<b>414</b>, <b>424</b>, <b>428</b>) according to some embodiments of the present disclosure. The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes identifying (<b>402</b>), for a dataset (<b>412</b>), a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) across which the dataset (<b>412</b>) will be synchronously replicated, configuring (<b>404</b>) one or more data communications links (<b>416</b><i>a, </i><b>416</b><i>b, </i><b>418</b><i>a, </i><b>418</b><i>b, </i><b>420</b><i>a, </i><b>420</b><i>b</i>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to be used for synchronously replicating the dataset (<b>412</b>), exchanging (<b>406</b>), between the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), and establishing (<b>408</b>), in dependence upon the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), a synchronous replication lease, the synchronous replication lease identifying a period of time during which the synchronous replication relationship is valid.</p><p id="p-0230" num="0229">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, configuring (<b>404</b>) one or more data communications links (<b>416</b><i>a, </i><b>416</b><i>b, </i><b>418</b><i>a, </i><b>418</b><i>b, </i><b>420</b><i>a, </i><b>420</b><i>b</i>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to be used for synchronously replicating the dataset (<b>412</b>) can include configuring (<b>602</b>), for each of a plurality of data communications types, a data communications link (<b>416</b><i>a, </i><b>416</b><i>b, </i><b>418</b><i>a, </i><b>418</b><i>b, </i><b>420</b><i>a, </i><b>420</b><i>b</i>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to be used for synchronously replicating the dataset (<b>412</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, each storage system may be configured to generate a plurality of data communications types that the storage system sends to other storage systems in a pod. For example, a storage system may generate data communications of a first type that includes data that is part of I/O processing (e.g., data to be written to a storage system as part of a write request issued by a host), the storage system may be configured to generate data communications of a second type that includes configuration changes (e.g., information generated in response to create, extend, delete or rename volumes), the storage system may be configured to generate data communications of a third type that includes communication involved in detecting and handling storage system and interconnect faults, and so on. In such an example, the data communications type may be determined, for example, based on which software module initiated the message, based on which hardware component initiated the message, based on the type of event that caused the message to be initiated, and in other ways. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, configuring (<b>602</b>) a data communications link (<b>416</b><i>a, </i><b>416</b><i>b, </i><b>418</b><i>a, </i><b>418</b><i>b, </i><b>420</b><i>a, </i><b>420</b><i>b</i>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) for each of a plurality of data communications types may be carried out, for example, by configuring the storage systems to use distinct interconnects for each of a plurality of data communications types, by configuring the storage systems to use distinct networks for each of a plurality of data communications types, or in other ways.</p><p id="p-0231" num="0230">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes detecting (<b>604</b>) that the synchronous replication lease has expired. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, detecting (<b>604</b>) that the synchronous replication lease has expired may be carried out, for example, by a particular storage system comparing a current clock value to the period of time during which the lease was valid. Consider an example in which the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) coordinated clocks to set the value of a clock within each storage system (<b>414</b>, <b>424</b>, <b>428</b>) to a value of 5000 milliseconds and each storage system (<b>414</b>, <b>424</b>, <b>428</b>) was configured to establish (<b>408</b>) a synchronous replication lease that extended for a lease interval of 2000 milliseconds beyond their clock values, such that the synchronous replication lease for each storage system (<b>414</b>, <b>424</b>, <b>428</b>) expired when the clock within a particular storage system (<b>414</b>, <b>424</b>, <b>428</b>) reached a value that exceeds 7000 milliseconds. In such an example, detecting (<b>604</b>) that the synchronous replication lease has expired may be carried out by determining that the clock within a particular storage system (<b>414</b>, <b>424</b>, <b>428</b>) reached a value of 7001 milliseconds or higher.</p><p id="p-0232" num="0231">Readers will appreciate that the occurrence of other events may also cause each storage system (<b>414</b>, <b>424</b>, <b>428</b>) to immediately treat a synchronous replication lease as being expired, For example, a storage system (<b>414</b>, <b>424</b>, <b>428</b>) may immediately treat a synchronous replication lease as being expired upon detecting a communications failure between the storage system (<b>414</b>, <b>424</b>, <b>428</b>) and another storage system (<b>414</b>, <b>424</b>, <b>428</b>) in the pod, a storage system (<b>414</b>, <b>424</b>, <b>428</b>) may immediately treat a synchronous replication lease as being expired upon receiving a lease re-establishment message from another storage system (<b>414</b>, <b>424</b>, <b>428</b>) in the pod, a storage system (<b>414</b>, <b>424</b>, <b>428</b>) may immediately treat a synchronous replication lease as being expired upon detecting that another storage system (<b>414</b>, <b>424</b>, <b>428</b>) in the pod has failed, and so on. In such an example, the occurrence of any of the events described in the preceding sentence may cause a storage system to detect (<b>604</b>) that the synchronous replication lease has expired.</p><p id="p-0233" num="0232">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes re-establishing (<b>606</b>) a synchronous replication relationship. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, re-establishing (<b>606</b>) a synchronous replication relationship may be carried out, for example, through the use of one or more re-establishment messages. Such re-establishment messages can include, for example, an identification of a pod for which the synchronous replication relationship is to be re-established, information needed to configure one or more data communications links, updated timing information, and so on. In such a way, the storage systems (<b>414</b>, <b>424</b>, <b>428</b>) may re-establish (<b>606</b>) a synchronous replication relationship in much the same way that the synchronous replication relationship was initially created, including but not limited to, each storage system performing one or more of: identifying (<b>402</b>), for a dataset (<b>412</b>), a plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) across which the dataset (<b>412</b>) will be synchronously replicated, configuring (<b>404</b>) one or more data communications links (<b>416</b><i>a, </i><b>416</b><i>b, </i><b>418</b><i>a, </i><b>418</b><i>b, </i><b>420</b><i>a, </i><b>420</b><i>b</i>) between each of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>) to be used for synchronously replicating the dataset (<b>412</b>), exchanging (<b>406</b>), between the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), and establishing (<b>408</b>), in dependence upon the timing information (<b>410</b>, <b>422</b>, <b>426</b>) for at least one of the plurality of storage systems (<b>414</b>, <b>424</b>, <b>428</b>), a synchronous replication lease, the synchronous replication lease identifying a period of time during which the synchronous replication relationship is valid.</p><p id="p-0234" num="0233">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the expiration of a synchronous replication lease may be followed by some set of events, followed by a reestablishment message, followed by a new activity lease, or followed by some other action. Data communications, configuration communications, or other communications might be in transit while the synchronous replication lease expires and is re-established. In fact, communication may not be received, for example, until after a new synchronous replication lease has been established. In such cases, the communications may have been sent based on one understanding of the pod, cluster, or network link state, and may be received by a storage system (<b>414</b>, <b>424</b>, <b>428</b>) that now has a different understanding of one or another aspect of that state. As such, there should generally be some means of ensuring that received communications are discarded if the communications were sent prior to some set of cluster or link state changes. There are several possible ways of ensuring that received communications are discarded if the communications were sent prior to some set of cluster or link state changes. One way of ensuring that received communications are discarded if the communications were sent prior to some set of cluster or link state changes is to establish some session identifier (e.g., a number) that is associated with establishing or reestablishing a link with a working synchronous replication lease that is being extended. After a cluster communications link is reestablished, the link gets a new session identifier. This identifier can be included with data, configuration, or other communication messages. Any message that is received with the wrong session identifier is discarded or results in an error response indicating a mismatched session identifier.</p><p id="p-0235" num="0234">Readers will appreciate that the manner in which storage systems (<b>414</b>, <b>424</b>, <b>428</b>) respond to the re-establishment of a synchronous replication lease may change based on different embodiments that the storage systems and the pods may take. In the case of simple primary controllers with two storage systems, any new request to perform an operation on a storage system (reads, writes, file operations, object operations, administrative operations, etc.) that is received after the receiving controller's synchronous replication lease has expired may have its processing delayed, dropped, or failed with some kind of &#x201c;retry later&#x201d; error code. As such, a running primary storage controller can be assured that the paired storage controller is not processing new requests if it can be assured that the paired storage controller's synchronous replication lease has expired, which it can be assured of when its own reestablishment lease has expired. After the reestablishment lease has expired it is safe for the controller to start looking further at corrective actions, including considering the paired controller to be offline and then continuing storage processing without the paired controller. Exactly what actions those might be can differ based on a wide variety of considerations and implementation details.</p><p id="p-0236" num="0235">In the case of storage systems with primary and secondary controllers, a still running primary controller on one storage system might try to connect to the paired storage system's previous secondary controller, on the presumption that the paired storage system's previous secondary controller might be taking over. Or, a still running primary controller on one storage system might wait for some particular amount of time that is the likely maximum secondary takeover time. If the secondary controller connects and establishes a new connection with a new synchronous replication lease within a reasonable time, then the pod may then recover itself to a consistent state (described later) and then continue normally. If the paired secondary controller doesn't connect quickly enough, then the still running primary controller may take further action, such as trying to determine whether the still running primary controller should consider the paired storage system to be faulted and then continue operating without the paired storage system. Primary controllers might instead keep active, leased, connections to secondary controllers on paired storage systems within a pod. In that case, expiration of the primary-to-primary reestablishment lease might result instead in a surviving primary using that connection to query for secondary takeover, rather than there being a need to establish that connection in the first place. It is also possible that two primary storage controllers are running, while the network isn't working between them, but the network is working between one or the other primary controller and the paired secondary controller. In that case, internal high availability monitoring within the storage system might not detect a condition on its own that triggers a failover from primary to secondary controller. Responses to that condition include: triggering a failover from primary to secondary anyway, just to resume synchronous replication, routing communication traffic from a primary through a secondary, or operating exactly as if communication had failed completely between the two storage systems, resulting in the same fault handling as if that had happened.</p><p id="p-0237" num="0236">If multiple controllers are active for a pod (including in both dual active-active controller storage systems and in scale-out storage systems), leases might still be kept by individual controller cluster communications with any or all controllers in a paired storage system. In this case, an expired synchronous replication lease might need to result in pausing of new request processing for a pod across the entire storage system. The lease model can be extended with exchanging of clocks and paired clock responses between all active controllers in a storage system, with the further exchanging of those clocks with any paired controllers in the paired storage systems. If there is an operating path over which a particular local controller's clock is exchanged with any paired controller, then the controller can use that path for an independent synchronous replication lease and possibly for an independent reestablishment lease. In this case, local controllers within a storage system may be further exchanging clocks between each other for local leases between each other as well. This may already be incorporated into the local storage system's high availability and monitoring mechanisms, but any timings related to the storage system's high availability mechanisms should be taken into account in the duration of the activity and reestablishment leases, or in any further delays between reestablishment lease expiration and actions taken to handle an interconnect fault.</p><p id="p-0238" num="0237">Alternately, storage-system-to-storage-system cluster communications or lease protocols alone may be assigned to one primary controller at a time within an individual multi-controller or scale-out storage system, at least for a particular pod. This service may migrate from controller to controller as a result of faults or, perhaps, as a result of load imbalances. Or cluster communications or lease protocols might run on a subset of controllers (for example, two) in order to limit clock exchanges or the complexity of analyzing fault scenarios. Each local controller may need to exchange clocks within the controllers that handle storage system to storage system leases, and the time to respond after a lease expiration might have to be adjusted accordingly, to account for potential cascading delays in when individual controllers can be ensured to have effected a processing pause. Connections that are not currently depended on for leases related to processing pausing might still be monitored for alerting purposes.</p><p id="p-0239" num="0238">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes attempting (<b>608</b>) to take over I/O processing for the dataset. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, attempting (<b>608</b>) to take over I/O processing for the dataset (<b>412</b>) may be carried, for example, by a storage system (<b>414</b>, <b>424</b>, <b>428</b>) racing to a mediator. If a particular storage system (<b>414</b>, <b>424</b>, <b>428</b>) successfully takes over I/O processing for the dataset (<b>412</b>), all accesses of the dataset (<b>412</b>) will be serviced by the particular storage system (<b>414</b>, <b>424</b>, <b>428</b>) until a synchronous replication relationship can be reestablished and any changes to the dataset (<b>412</b>) that occurred after the previous synchronous replication relationship expired can then be transferred and persisted on the other storage systems (<b>414</b>, <b>424</b>, <b>428</b>). In such an example, an attempt (<b>608</b>) to take over I/O processing for the dataset (<b>412</b>) may only occur after the expiration of some period of time after the synchronous replication lease expires. For example, attempts to resolve how to proceed after link failure (including one or more of the storage systems attempting to take over I/O processing for the dataset) may not start until a time period after the synchronous replication lease has expired that is, for example, at least as long as the maximum lease time resulting from clock exchanges.</p><p id="p-0240" num="0239">Readers will appreciate that in many of the examples depicted above, although only one of the storage systems (<b>414</b>) is depicted as carrying out the steps described above, in fact, all storage systems (<b>414</b>, <b>424</b>, <b>428</b>) in a pod (or in a pod that is being formed) may carry out one or more of the steps described above at the same time, as establishing a synchronous replication relationship between two or more storage systems may require collaboration and interaction between two or more storage systems.</p><p id="p-0241" num="0240">For further explanation, <figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth a flow chart illustrating an additional example method of establishing a synchronous replication relationship between two or more storage systems (<b>724</b>, <b>746</b>) according to some embodiments of the present disclosure. Although the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an embodiment in which a dataset (<b>722</b>) is synchronously replicated across only two storage systems (<b>724</b>, <b>746</b>), the example depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> can be extended to embodiments in which the dataset (<b>722</b>) is synchronously replicated across additional storage systems that may perform steps that are similar to the steps performed by the two illustrated storage systems (<b>724</b>, <b>746</b>).</p><p id="p-0242" num="0241">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> includes configuring (<b>702</b>), by the storage system (<b>724</b>), one or more data communications links (<b>752</b>) between the storage systems (<b>724</b>, <b>746</b>) and the second storage system (<b>746</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the storage system (<b>724</b>) may configure (<b>702</b>) one or more data communications links (<b>752</b>) between the storage system (<b>724</b>) and the second storage system (<b>746</b>), for example, by identifying a defined port over a data communications network to be used for exchanging data communications with the second storage system (<b>746</b>), by identifying a point-to-point data communications link to be used for exchanging data communications with the second storage system (<b>746</b>), by identifying a data communications network to be used for exchanging data communications with the second storage system (<b>746</b>), or in a variety of ways. If secure communication is required, some form of key exchange may be needed, or communication could be done or bootstrapped through some service such as SSH (Secure SHell), SSL, or some other service or protocol built around public keys or Diffie-Hellman key exchange or reasonable alternatives. Secure communications could also be mediated through some vendor-provided cloud service tied in some way to customer identities. Alternately, a service configured to run on customer facilities, such as running in a virtual machine or container, could be used to mediate key exchanges necessary for secure communications between replicating storage systems (<b>724</b>, <b>746</b>). Readers will appreciate that a pod including more than two storage systems may need communication links between most or all of the individual storage systems. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the second storage system (<b>746</b>) may similarly configure (<b>726</b>) one or more data communications links (<b>752</b>) between the storage system (<b>724</b>) and the second storage system (<b>746</b>).</p><p id="p-0243" num="0242">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes sending (<b>704</b>), from the storage system (<b>724</b>) to the second storage system (<b>746</b>), timing information (<b>748</b>) for the storage system (<b>724</b>). The timing information (<b>748</b>) for the storage system (<b>724</b>) may be embodied, for example, as the value of a clock within the storage system (<b>724</b>), as a representation of a clock value (e.g., a sequence number that the storage system (<b>724</b>) can internally record), as the most recently received value of a clock within the second storage system (<b>746</b>), and so on. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the storage system (<b>724</b>) may send (<b>704</b>) timing information (<b>748</b>) for the storage system (<b>724</b>) to the second storage system (<b>746</b>), for example, via one or more messages sent from the storage system (<b>724</b>) to the second storage system (<b>746</b>) over a data communications link (<b>752</b>) between the two storage systems (<b>724</b>, <b>746</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the second storage system (<b>746</b>) may similarly send (<b>730</b>), from the second storage system (<b>746</b>) to the storage system (<b>724</b>), timing information (<b>750</b>) for the second storage system (<b>746</b>).</p><p id="p-0244" num="0243">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, sending (<b>704</b>), from the storage system (<b>724</b>) to the second storage system (<b>746</b>), timing information (<b>748</b>) for the storage system (<b>724</b>) can include sending (<b>706</b>) a value of a clock in the storage system (<b>724</b>). In the example depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the storage system (<b>724</b>) may send (<b>706</b>) a value of a clock in the storage system (<b>724</b>) to the second storage system (<b>746</b>) as part of an effort to coordinate clocks between the storage systems (<b>724</b>, <b>746</b>). In such an example, the storage system (<b>724</b>) may include a local monotonically increasing clock whose value is sent (<b>706</b>) via one or more messages that are sent to the second storage system (<b>746</b>) via a data communications link (<b>752</b>) between the two storage systems (<b>724</b>, <b>746</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, sending (<b>730</b>), from the second storage system (<b>746</b>) to the storage system (<b>724</b>), timing information (<b>750</b>) for the second storage system (<b>746</b>) may similarly include sending (<b>732</b>) a value of a clock in the second storage system (<b>746</b>).</p><p id="p-0245" num="0244">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, sending (<b>704</b>), from the storage system (<b>724</b>) to the second storage system (<b>746</b>), timing information (<b>748</b>) for the storage system (<b>724</b>) can also include sending (<b>708</b>) a most recently received value of a clock in the second storage system (<b>746</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, sending (<b>708</b>) a most recently received value of a clock in the second storage system (<b>746</b>) may be carried out, for example, as part of an effort to eliminate the need to coordinate clocks between the storage systems (<b>724</b>, <b>746</b>) while still achieving a timing guarantee. In such an embodiment, each storage system (<b>724</b>, <b>746</b>) may have a local monotonically increasing clock. A synchronous replication lease may be established between the storage systems (<b>724</b>, <b>748</b>) by each storage system (<b>724</b>, <b>748</b>) sending its clock value to the other storage system (<b>724</b>, <b>748</b>) along with the last clock value it received from the other storage system (<b>724</b>, <b>748</b>). When a particular storage system (<b>724</b>, <b>748</b>) receives back its clock value from another storage system (<b>724</b>, <b>748</b>), it may add some agreed upon lease interval to that received clock value and use that to establish the synchronous replication lease. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, sending (<b>730</b>), from the second storage system (<b>746</b>) to the storage system (<b>724</b>), timing information (<b>750</b>) for the second storage system (<b>746</b>) may similarly include sending (<b>734</b>) a most recently received value of a clock in the storage system (<b>724</b>).</p><p id="p-0246" num="0245">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes receiving (<b>710</b>), by the storage system (<b>724</b>) from the second storage system (<b>746</b>), timing information (<b>750</b>) for the second storage system (<b>746</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the storage system (<b>724</b>) may receive (<b>710</b>) timing information (<b>750</b>) for the second storage system (<b>746</b>) from the second storage system (<b>746</b>) via one or more messages sent from the second storage system (<b>746</b>) via a data communications link (<b>752</b>) between the two storage arrays (<b>724</b>, <b>746</b>). In the example depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the second storage system (<b>746</b>) may similarly receive (<b>728</b>), from the storage system (<b>724</b>), timing information for the storage system (<b>724</b>).</p><p id="p-0247" num="0246">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes setting (<b>712</b>), in dependence upon the timing information (<b>750</b>) for the second storage system (<b>746</b>), a clock value in the storage system (<b>724</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, setting (<b>712</b>) a clock value in the storage system (<b>724</b>) in dependence upon the timing information (<b>750</b>) for the second storage system (<b>746</b>) may be carried out, for example, as part of an effort to coordinate clocks between the two storage systems (<b>724</b>, <b>746</b>). In such an example, the two storage systems (<b>724</b>, <b>746</b>) may be configured, for example, to set their respective clocks values to a value that is some predetermined amount higher than the highest clock value between the pair of storage systems (<b>724</b>, <b>746</b>), to set their respective clocks values to a value that is equal to the highest clock value between the pair of storage systems (<b>724</b>, <b>746</b>), to set their respective clocks values to a value that is generated by applying some function to the respective clock values in each storage system (<b>724</b>, <b>746</b>), or in some other way. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the second storage system (<b>746</b>) may similarly set (<b>736</b>), in dependence upon timing information (<b>748</b>) for the storage system (<b>724</b>), a clock value in the second storage system (<b>746</b>).</p><p id="p-0248" num="0247">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes establishing (<b>714</b>) a synchronous replication lease. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, establishing (<b>714</b>) a synchronous replication lease may be carried out, for example, by establishing a synchronous replication lease that extends for some predetermined lease interval beyond a coordinate clock value between the two storage systems (<b>724</b>, <b>746</b>), by establishing a synchronous replication lease that extends for some predetermined lease interval beyond an uncoordinated clock value associated with one of the storage systems (<b>724</b>, <b>746</b>), or in some other way. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the second storage system (<b>746</b>) may similarly set (<b>736</b>), in dependence upon timing information (<b>748</b>) for the storage system (<b>724</b>), a clock value in the second storage system (<b>746</b>).</p><p id="p-0249" num="0248">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes detecting (<b>716</b>), by the storage system (<b>724</b>), that the synchronous replication lease has expired. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, detecting (<b>716</b>) that the synchronous replication lease has expired may be carried out, for example, by the storage system (<b>724</b>) comparing a current clock value to the period of time during which the lease was valid. Consider an example in which the storage systems (<b>724</b>, <b>746</b>) coordinated clocks to set the value of a clock within each storage system (<b>724</b>, <b>746</b>) to a value of <b>5000</b> milliseconds and each storage system (<b>724</b>, <b>746</b>) was configured to establish (<b>738</b>) a synchronous replication lease that extended for a lease interval of 2000 milliseconds beyond their clock values, such that the synchronous replication lease for each storage system (<b>724</b>, <b>746</b>) expired when the clock within a particular storage system (<b>724</b>, <b>746</b>) reached a value that exceeds 7000 milliseconds. In such an example, detecting (<b>706</b>) that the synchronous replication lease has expired may be carried out by determining that the clock within the storage system (<b>724</b>) reached a value of 7001 milliseconds or higher. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the second storage system (<b>746</b>) may similarly detect (<b>740</b>) that the synchronous replication lease has expired.</p><p id="p-0250" num="0249">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes attempting (<b>720</b>), by the storage system (<b>724</b>), to take over I/O processing for the dataset (<b>722</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, attempting (<b>720</b>) to take over I/O processing for the dataset (<b>722</b>) may be carried, for example, by the storage system (<b>724</b>) racing to a mediator. If the storage system (<b>724</b>) successfully takes over I/O processing for the dataset (<b>722</b>), all accesses of the dataset (<b>722</b>) will be serviced by the storage system (<b>724</b>) until a synchronous replication relationship can be reestablished and any changes to the dataset (<b>722</b>) that occurred after the previous synchronous replication relationship expired can be transferred to and persisted on the second storage system (<b>746</b>). In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the second storage system (<b>746</b>) may similarly attempt (<b>744</b>) to take over I/O processing for the dataset (<b>722</b>).</p><p id="p-0251" num="0250">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes attempting (<b>718</b>), by the storage system (<b>724</b>) to re-establish the synchronous replication relationship. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, attempting (<b>718</b>) to re-establish a synchronous replication relationship may be carried out, for example, through the use of one or more re-establishment messages. Such re-establishment messages can include, for example, an identification of a pod for which the synchronous replication relationship is to be re-established, information needed to configure one or more data communications links, updated timing information, and so on. In such a way, the storage system (<b>724</b>) may re-establish a synchronous replication relationship in much the same way that the synchronous replication relationship was initially created. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the second storage system (<b>746</b>) may similarly attempt (<b>742</b>) to re-establish the synchronous replication relationship.</p><p id="p-0252" num="0251">Example embodiments are described largely in the context of fully functional storage systems for establishing a synchronous replication relationship between two or more storage systems. Readers of skill in the art will recognize, however, that the present disclosure also may be embodied in a computer program product disposed upon computer readable storage media for use with any suitable data processing system. Such computer readable storage media may be any storage medium for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of such media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method as embodied in a computer program product. Persons skilled in the art will recognize also that, although some of the example embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present disclosure.</p><p id="p-0253" num="0252">Embodiments can include be a system, a method, and/or a computer program product. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present disclosure.</p><p id="p-0254" num="0253">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0255" num="0254">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0256" num="0255">Computer readable program instructions for carrying out operations of the present disclosure may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ I/O or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present disclosure.</p><p id="p-0257" num="0256">Aspects of the present disclosure are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to some embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0258" num="0257">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0259" num="0258">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0260" num="0259">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0261" num="0260">Readers will appreciate that the steps described herein may be carried out in a variety ways and that no particular ordering is required. It will be further understood from the foregoing description that modifications and changes may be made in various embodiments of the present disclosure without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present disclosure is limited only by the language of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>receiving, by at least one of a plurality of storage systems across which a dataset will be synchronously replicated, timing information for at least one of the plurality of storage systems; and</claim-text><claim-text>establishing, based on the timing information, a synchronous replication lease describing a period of time during which the synchronous replication relationship is valid, wherein a request to modify the dataset may only be acknowledged after a copy of the dataset has been modified on each of the storage systems.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the synchronous replication lease is calculated in dependence upon a value of a local clock that was received from another storage system.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising wherein establishing the synchronous replication lease further comprises further comprises exchanging uncoordinated clocks between a plurality of storage systems.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:<claim-text>detecting that the synchronous replication lease has expired; and</claim-text><claim-text>re-establishing a synchronous replication relationship.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:<claim-text>detecting that the synchronous replication lease has expired; and</claim-text><claim-text>attempting to take over I/O processing for the dataset.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein at least one of the plurality of storage systems is a cloud-based storage system.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the timing information for at least one of the plurality of storage systems includes a value which serves as a proxy for a clock value.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising delaying the processing of I/O requests received after the synchronous replication lease has expired.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising establishing a cluster membership lease.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. An apparatus comprising a computer processor, a computer memory operatively coupled to the computer processor, the computer memory having disposed within it computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the steps of:<claim-text>receiving, by at least one of a plurality of storage systems across which a dataset will be synchronously replicated, timing information for at least one of the plurality of storage systems; and</claim-text><claim-text>establishing, based on the timing information, a synchronous replication lease describing a period of time during which the synchronous replication relationship is valid, wherein a request to modify the dataset may only be acknowledged after a copy of the dataset has been modified on each of the storage systems.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the synchronous replication lease is calculated in dependence upon a value of a local clock that was received from another storage system.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein establishing the synchronous replication lease further comprises further comprises exchanging uncoordinated clocks between a plurality of storage systems.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref> further comprising computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the steps of:<claim-text>detecting that the synchronous replication lease has expired; and</claim-text><claim-text>re-establishing a synchronous replication relationship.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref> further comprising computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the steps of:<claim-text>detecting that the synchronous replication lease has expired; and</claim-text><claim-text>attempting to take over I/O processing for the dataset.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein at least one of the plurality of storage systems is a cloud-based storage system.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A storage system comprising a computer processor and a computer memory operatively coupled to the computer processor, the computer memory having disposed within it computer program instructions that, when executed by the computer processor, cause the storage system to carry out the steps of:<claim-text>sending, to a second storage system, timing information for the storage system;</claim-text><claim-text>receiving, from the second storage system, timing information for the second storage system; and</claim-text><claim-text>establishing a synchronous replication lease, the synchronous replication lease identifying a period of time during which the synchronous replication relationship is valid, wherein a request to modify the dataset may only be acknowledged after a copy of the dataset has been modified on each of the storage systems.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The storage system of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising computer program instructions that, when executed by the computer processor, cause the storage system to carry out the step of setting, in dependence upon the timing information for the second storage system, a clock value in the storage system.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The storage system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein the storage system is a cloud-based storage system.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The storage system of <claim-ref idref="CLM-00016">claim 16</claim-ref> wherein sending, to the second storage system, timing information for the storage system includes sending, to the second storage system, a most recently received value of a clock in the second storage system.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The storage system of <claim-ref idref="CLM-00016">claim 16</claim-ref> further comprising computer program instructions that, when executed by the computer processor, cause the storage system to carry out the step of:<claim-text>detecting that the synchronous replication lease has expired; and</claim-text><claim-text>attempting to take over I/O processing for the dataset.</claim-text></claim-text></claim></claims></us-patent-application>