<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006936A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006936</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17930765</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>2483</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>2441</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>51</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>2483</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>166</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>2441</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>51</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0428</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">INTELLIGENT DATAFLOW-BASED SERVICE DISCOVERY AND ANALYSIS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16560002</doc-number><date>20190904</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11444878</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17930765</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>YAHOO AD TECH LLC</orgname><address><city>Dulles</city><state>VA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>LAHTIRANTA</last-name><first-name>Atte</first-name><address><city>Los Altos</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>OIKARINEN</last-name><first-name>Matti</first-name><address><city>Los Altos</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The disclosed embodiments are directed toward monitoring and classifying encrypted network traffic. In one embodiment, a method is disclosed comprising intercepting an encrypted network request, the network request transmitted by a client device to a network endpoint; identifying a network service associated with the network endpoint based on unencrypted properties of the encrypted network request; identifying, based on the encrypted network request and a series of subsequent network requests issued by the client device, an action taken by the client device, the action comprising an activity performed during a session established with the network service; and updating a catalog of network interactions using the network service and the action.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="201.85mm" wi="98.72mm" file="US20230006936A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="203.45mm" wi="113.96mm" file="US20230006936A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="216.66mm" wi="100.75mm" file="US20230006936A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="176.28mm" wi="72.64mm" file="US20230006936A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="221.83mm" wi="169.25mm" file="US20230006936A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="211.41mm" wi="156.55mm" file="US20230006936A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of, and claims the benefit of, U.S. application Ser. No. 16/560,002, filed Aug. 28, 2017 and incorporated by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">COPYRIGHT NOTICE</heading><p id="p-0003" num="0002">This application includes material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent disclosure, as it appears in the Patent and Trademark Office files or records, but otherwise reserves all copyright rights whatsoever.</p><heading id="h-0003" level="1">TECHNICAL FIELD</heading><p id="p-0004" num="0003">The disclosed embodiments are directed to the field of computer network traffic analysis and, more particularly, to identifying network service usage despite the use of encrypted communications protocols.</p><heading id="h-0004" level="1">BACKGROUND</heading><p id="p-0005" num="0004">Historically, an Internet service provider (ISP) and other parties who have access to a user's data stream (e.g., network requests) have analyzed datagrams of this stream to determine what network services users use. With the introduction and widespread adoption of encrypted connections via transport layer security (TLS) and secure sockets layer (SSL) (TLS/SSL) protocols, ISPs were unable to simply inspect network datagrams as the datagrams were encrypted and thus unreadable.</p><p id="p-0006" num="0005">In response, ISPs began inspecting domain name system (DNS) resolution queries as an alternative means to assign network activity to specific network services. By inspecting DNS name resolutions, ISPs could identify the Internet Protocol (IP) associated with a network request which could then be used to roughly assign a network request to a given network service. However, as cloud computing and distributed computing became more prevalent, many different network services were frequently serviced by a single IP address of a given infrastructure-as-a-service (IaaS) provider. Thus, it became impossible to classify network requests based solely on destination IP addresses. Relatedly, ISPs frequently inspected DNS queries to determine host names associated with network requests which solved some of the problem of many network services being provided by a single IaaS IP space. However, the introduction of encrypted DNS queries (e.g., DNS over TLS or DNS Crypt) prevented ISPs from inspecting these DNS queries as encounter, similarly, in the introduction of TLS/SSL discussed above.</p><p id="p-0007" num="0006">Currently, there is a significant push to ensure encryption of all aspects of network communications, thus the above problems have rendered most techniques for identifying network service usages obsolete. The disclosed embodiments below solve these and other problems faced by ISPs and other network operators.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0008" num="0007">The disclosed embodiments describe a set of techniques that can be utilized to classify network transactions despite these transactions being encrypted. Examples of such transaction include Secure Hypertext Transfer Protocol (HTTPS) requests, lower-level transmission control protocol (TCP) requests, DNS queries, and any other potentially encrypted requests and responses. The disclosed embodiments can be implemented by an ISP provider, a virtual private network (VPN) provider, or generally any network operator that has access to encrypted network requests.</p><p id="p-0009" num="0008">At a high level, five core techniques (and variations thereof) are described. First, the disclosed embodiments describe a technique for extracting a domain and host from an encrypted network request by identifying leaked data during a TLS handshake. Second, the disclosed embodiments describe techniques for modeling network transactions to generate a fingerprint of a given transaction which can be used (for example, in combination with TLS leakage extraction) to classify transactions. Third, a mapping between IP addresses and services can be created and updated for quickly classifying network requests. Fourth, a mapping between response sizes, response times, network routes, and other aspects of a request and services can be created and updated for quickly classifying network requests. Fifth, uniform resource identifier (URI) headers can be modeled for quickly classifying network requests.</p><p id="p-0010" num="0009">Various combinations of these techniques can be used to classify network transactions without accessing the plaintext content of the requests. These combinations are difficult to circumvent as they combine industry standards (e.g., a TLS handshake), data probability (e.g., type of packets, target IP addresses, payload size, timing), point-in-time discovery (checking IP addresses of top sites with reverse DNS), and other factors etc. Thus, the combinations can reliably identify network services used by users even when DNS is encrypted and TLS/SSL are in use.</p><p id="p-0011" num="0010">In one embodiment, a method is disclosed comprising intercepting an encrypted network request, the network request transmitted by a client device to a network endpoint; identifying a network service associated with the network endpoint based on unencrypted properties of the encrypted network request; identifying, based on the encrypted network request and a series of subsequent network requests issued by the client device, an action taken by the client device, the action comprising an activity performed during a session established with the network service; and updating a catalog of network interactions using the network service and the action.</p><p id="p-0012" num="0011">In another embodiment, a non-transitory computer readable storage medium for tangibly storing computer program instructions capable of being executed by a computer processor is disclosed, the computer program instructions defining the steps of: intercepting an encrypted network request, the network request transmitted by a client device to a network endpoint; identifying a network service associated with the network endpoint based on unencrypted properties of the encrypted network request; identifying, based on the encrypted network request and a series of subsequent network requests issued by the client device, an action taken by the client device, the action comprising an activity performed during a session established with the network service; and updating a catalog of network interactions using the network service and the action.</p><p id="p-0013" num="0012">In another embodiment, a device is disclosed comprising a processor; and a storage medium for tangibly storing thereon program logic for execution by the processor, the stored program logic causing the processor to perform the operations of: intercepting an encrypted network request, the network request transmitted by a client device to a network endpoint, identifying a network service associated with the network endpoint based on unencrypted properties of the encrypted network request, identifying, based on the encrypted network request and a series of subsequent network requests issued by the client device, an action taken by the client device, the action comprising an activity performed during a session established with the network service, and updating a catalog of network interactions using the network service and the action.</p><p id="p-0014" num="0013">The resulting data can then be used for generating network utilization insights, behavioral targeting, personalization, and monetization. Further, the resulting data can also be used to determine hacked Internet of things (IoT) devices and backdoored components connecting to control servers etc. Specifically, the disclosed embodiments can detect anomalous access to services that are unexpected (e.g., IoT thermostats access unknown IP addresses or IP address not controlled by the thermostat manufacturer).</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a network environment according to some embodiments of the disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating a method for associating encrypted network requests with hosts according to some embodiments of the disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating a method for datagram and connection modeling according to some embodiments of the disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating a method for building an IP to network service mapping based on monitored network requests according to some embodiments of the disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram illustrating a method for building a mapping of network transaction properties to network services according to some embodiments of the disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating a method for classifying network transactions according to some embodiments of the disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram illustrating a client device showing an example embodiment of a client or server device that may be used within the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION</heading><p id="p-0022" num="0021">The present disclosure will now be described more fully hereinafter with reference to the accompanying drawings, which form a part hereof, and which show, by way of non-limiting illustration, certain example embodiments. Subject matter may, however, be embodied in a variety of different forms and, therefore, covered or claimed subject matter is intended to be construed as not being limited to any example embodiments set forth herein; example embodiments are provided merely to be illustrative. Likewise, a reasonably broad scope for claimed or covered subject matter is intended. Among other things, for example, subject matter may be embodied as methods, devices, components, or systems. Accordingly, embodiments may, for example, take the form of hardware, software, firmware or any combination thereof (other than software per se). The following detailed description is, therefore, not intended to be taken in a limiting sense.</p><p id="p-0023" num="0022">Throughout the specification and claims, terms may have nuanced meanings suggested or implied in context beyond an explicitly stated meaning. Likewise, the phrase &#x201c;in one embodiment&#x201d; as used herein does not necessarily refer to the same embodiment and the phrase &#x201c;in another embodiment&#x201d; as used herein does not necessarily refer to a different embodiment. It is intended, for example, that claimed subject matter include combinations of example embodiments in whole or in part.</p><p id="p-0024" num="0023">In general, terminology may be understood at least in part from usage in context. For example, terms, such as &#x201c;and&#x201d;, &#x201c;or&#x201d;, or &#x201c;and/or,&#x201d; as used herein may include a variety of meanings that may depend at least in part upon the context in which such terms are used. Typically, &#x201c;or&#x201d; if used to associate a list, such as A, B, or C, is intended to mean A, B, and C, here used in the inclusive sense, as well as A, B, or C, here used in the exclusive sense. In addition, the term &#x201c;one or more&#x201d; as used herein, depending at least in part upon context, may be used to describe any feature, structure, or characteristic in a singular sense or may be used to describe combinations of features, structures, or characteristics in a plural sense Similarly, terms, such as &#x201c;a,&#x201d; &#x201c;an,&#x201d; or &#x201c;the,&#x201d; again, may be understood to convey a singular usage or to convey a plural usage, depending at least in part upon context. In addition, the term &#x201c;based on&#x201d; may be understood as not necessarily intended to convey an exclusive set of factors and may, instead, allow for existence of additional factors not necessarily expressly described, again, depending at least in part on context.</p><p id="p-0025" num="0024">The present disclosure is described below with reference to block diagrams and operational illustrations of methods and devices. It is understood that each block of the block diagrams or operational illustrations, and combinations of blocks in the block diagrams or operational illustrations, can be implemented by means of analog or digital hardware and computer program instructions. These computer program instructions can be provided to a processor of a general-purpose computer to alter its function as detailed herein, a special purpose computer, ASIC, or other programmable data processing apparatus, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, implement the functions/acts specified in the block diagrams or operational block or blocks. In some alternate implementations, the functions/acts noted in the blocks can occur out of the order noted in the operational illustrations. For example, two blocks shown in succession can in fact be executed substantially concurrently or the blocks can sometimes be executed in the reverse order, depending upon the functionality/acts involved.</p><p id="p-0026" num="0025">For the purposes of this disclosure a non-transitory computer readable medium (or computer-readable storage medium/media) stores computer data, which data can include computer program code (or computer-executable instructions) that is executable by a computer, in machine readable form. By way of example, and not limitation, a computer readable medium may comprise computer readable storage media, for tangible or fixed storage of data, or communication media for transient interpretation of code-containing signals. Computer readable storage media, as used herein, refers to physical or tangible storage (as opposed to signals) and includes without limitation volatile and non-volatile, removable, and non-removable media implemented in any method or technology for the tangible storage of information such as computer-readable instructions, data structures, program modules or other data. Computer readable storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid-state memory technology, CD-ROM, DVD, or other optical storage, cloud storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other physical or material medium which can be used to tangibly store the desired information or data or instructions and which can be accessed by a computer or processor.</p><p id="p-0027" num="0026">For the purposes of this disclosure the term &#x201c;server&#x201d; should be understood to refer to a service point which provides processing, database, and communication facilities. By way of example, and not limitation, the term &#x201c;server&#x201d; can refer to a single, physical processor with associated communications and data storage and database facilities, or it can refer to a networked or clustered complex of processors and associated network and storage devices, as well as operating software and one or more database systems and application software that support the services provided by the server. Cloud servers are examples.</p><p id="p-0028" num="0027">For the purposes of this disclosure a &#x201c;network&#x201d; should be understood to refer to a network that may couple devices so that communications may be exchanged, such as between a server and a client device or other types of devices, including between wireless devices coupled via a wireless network, for example. A network may also include mass storage, such as network attached storage (NAS), a storage area network (SAN), a content delivery network (CDN) or other forms of computer or machine-readable media, for example. A network may include the Internet, one or more local area networks (LANs), one or more wide area networks (WANs), wire-line type connections, wireless type connections, cellular or any combination thereof. Likewise, sub-networks, which may employ differing architectures or may be compliant or compatible with differing protocols, may interoperate within a larger network.</p><p id="p-0029" num="0028">For purposes of this disclosure, a &#x201c;wireless network&#x201d; should be understood to couple client devices with a network. A wireless network may employ stand-alone ad-hoc networks, mesh networks, Wireless LAN (WLAN) networks, cellular networks, or the like. A wireless network may further employ a plurality of network access technologies, including Wi-Fi, Long Term Evolution (LTE), WLAN, Wireless Router (WR) mesh, or 2nd, 3rd, 4th or 5th generation (2G, 3G, 4G or 5G) cellular technology, Bluetooth, 802.11b/g/n, or the like. Network access technologies may enable wide area coverage for devices, such as client devices with varying degrees of mobility, for example.</p><p id="p-0030" num="0029">In short, a wireless network may include virtually any type of wireless communication mechanism by which signals may be communicated between devices, such as a client device or a computing device, between or within a network, or the like.</p><p id="p-0031" num="0030">A computing device can send or receive signals, such as via a wired or wireless network, or may be capable of processing or storing signals, such as in memory as physical memory states, and may, therefore, operate as a server. Thus, devices capable of operating as a server may include, as examples, dedicated rack-mounted servers, desktop computers, laptop computers, set top boxes, integrated devices combining various features, such as two or more features of the foregoing devices, or the like.</p><p id="p-0032" num="0031">For purposes of this disclosure, a client (or consumer or user) device may include a computing device capable of sending or receiving signals, such as via a wired or a wireless network. A client device may, for example, include a desktop computer or a portable device, such as a cellular telephone, a smart phone, a display pager, a radio frequency (RF) device, an infrared (IR) device an Near Field Communication (NFC) device, a Personal Digital Assistant (PDA), a handheld computer, a tablet computer, a phablet, a laptop computer, a set top box, a wearable computer, smart watch, an integrated or distributed device combining various features, such as features of the forgoing devices, or the like.</p><p id="p-0033" num="0032">A client device may vary in terms of capabilities or features. Claimed subject matter is intended to cover a wide range of potential variations, such as a web-enabled client device or previously mentioned devices may include a high-resolution screen (HD or 4K for example), one or more physical or virtual keyboards, mass storage, one or more accelerometers, one or more gyroscopes, global positioning system (GPS) or other location-identifying type capability, or a display with a high degree of functionality, such as a touch-sensitive color 2D or 3D display, for example.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a network environment according to some embodiments of the disclosure.</p><p id="p-0035" num="0034">The illustrated network environment (<b>100</b>) includes a plurality of client devices (<b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>n</i>; collectively, <b>102</b>) communicatively coupled to an ISP (<b>104</b>). The client devices (<b>102</b>) communicate with network endpoints (<b>108</b><i>a</i>, <b>108</b><i>b</i>, <b>108</b><i>n</i>; collectively, <b>108</b>) via the ISP (<b>104</b>) and over a network (<b>106</b>). <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows components of one network environment in which the systems and methods discussed herein may be practiced. Not all the components may be required to practice the disclosure, and variations in the arrangement and type of the components may be made without departing from the spirit or scope of the disclosure.</p><p id="p-0036" num="0035">Client devices (<b>102</b>) can include any type of computing device that issues network requests. For example, client devices (<b>102</b>) includes personal computing devices, mobile devices, tablets, desktop computers, video game consoles, smart watches, and other consumer electronic devices. Client devices (<b>102</b>) also includes IoT and machine-to-machine devices such as thermostats, door locks, and other semi-autonomous devices. Client devices (<b>102</b>) may also include autonomous vehicles such as automobiles, drones, and other devices. Client devices (<b>102</b>) in some embodiments may also include server devices. As used herein, a server device in the context of client devices (<b>102</b>) refers to a server issuing network requests (versus endpoints which receive and response to such requests). The foregoing is meant to provide examples of the types of client devices (<b>102</b>) operable in the environment (<b>100</b>). Generally, any device that issues network requests (e.g., HTTPS or TCP requests) may comprise a client device.</p><p id="p-0037" num="0036">As illustrated, client devices (<b>102</b>) are communicatively coupled to an ISP (<b>104</b>). Although the ISP (<b>104</b>) is illustrated as a single component, an ISP (<b>104</b>) generally includes many computing devices, networks, and other components and the ISP (<b>104</b>) is illustrated as a single component only to ease discussion. The ISP (<b>104</b>) can comprise a wired ISP (e.g., a cable or fiber ISP) or a wireless ISP (e.g., a cellular or satellite ISP). In general, the ISP (<b>104</b>) receives network requests from the client devices (<b>102</b>). Such requests can be, and often are, encrypted using TLS/SSL (references to TLS also refer to SSL when appropriate). The requests can comprise HTTPS requests, DNS queries, and any other type of network request. ISP (<b>102</b>) routes these requests to an appropriate endpoint (<b>108</b>) over network (<b>106</b>). As will be described in more detail herein, ISP (<b>104</b>) can additionally analyze the requests to associate or assign the requests to one or more known network services.</p><p id="p-0038" num="0037">In the illustrated embodiment, network (<b>106</b>) comprises an internet; that is, a network of networks and is not limited to a single network, a single network type, or single network topology. In general, however, network (<b>106</b>) is generally a wide area network (WAN). As illustrated, network (<b>106</b>) may be separate from ISP (<b>104</b>) and may be provided by multiple other network operators (e.g., long-haul lines, other ISPs etc.). In some embodiments, the network (<b>106</b>) can be provided by the ISP (<b>104</b>) itself. For example, a given network endpoint and a client device may both be customers of the ISP and thus all communications may travel within a network owned and operated by the ISP.</p><p id="p-0039" num="0038">Multiple network endpoints (<b>108</b>) are connected to the network (<b>106</b>). Although not illustrated, each of these network endpoints (<b>108</b>) can comprise client devices or server devices. As used herein, a server device refers to a networked computing device that responds to network requests issued by client devices (<b>102</b>). The network endpoints (<b>108</b>) can comprise application servers, DNS resolvers, and generally any device providing a network service on the network (<b>106</b>). In some embodiments, network endpoints (<b>108</b>) are connected to the network (<b>106</b>) via separate ISPs (not illustrated). Alternatively, or in conjunction with the foregoing, network endpoints (<b>106</b>) can be connected to the network (<b>106</b>) via a network proxy, VPN, or other enterprise network element. In some embodiments, such a proxy, VPN, or network element can implement the same methods described herein with respect to the ISP (<b>104</b>).</p><p id="p-0040" num="0039">In previous systems, network traffic between client devices (<b>102</b>) and endpoints (<b>108</b>) is encrypted end-to-end (E2E). In these systems, the role of ISP (<b>104</b>) is to ferry packets between the client devices (<b>102</b>) and endpoints (<b>108</b>). The ISP (<b>104</b>) is generally unable to decrypt the packets as they pass through its network elements. Further, since many services are hosted on single IP addresses, the unencrypted portions of the datagrams are of minimal use beyond classifying traffic to given IaaS providers. Thus, the ISP (<b>104</b>) can glean no insight into the activity that client devices (<b>102</b>) and endpoints (<b>108</b>) are engaged in. The following methods may be implemented alone or in combination by the ISP (<b>104</b>) to assign network transactions to network services.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating a method for associating encrypted network requests with hosts according to some embodiments of the disclosure. The illustrated embodiment depicts techniques for classifying network requests by hostnames even when such requests are encrypted using TLS. The method accomplishes this by extracting host and domain data from a TLS handshake that utilizes the sever name identification (SNI) extension of TLS.</p><p id="p-0042" num="0041">In block <b>202</b>, the method detects the start of a TLS handshake. Generally, a TLS handshake includes multiple network interactions between a client and server. The specifics of a handshake vary depending on the key exchange algorithm used and the cipher suites supported by the client and the server. In all scenarios however, a client issues a &#x201c;client hello&#x201d; message to initiate the handshake. The client hello message includes various fields such as a TLS protocol version, session ID, random string, cipher suite listing, compression method, and zero or more extensions. As illustrated, this client hello message is used to detect the start of a TLS handshake. Thus, the method can identify a TLS handshake by matching the form of the TLS client hello to network requests received.</p><p id="p-0043" num="0042">In block <b>204</b>, the method determines if SNI is enabled in the client hello. In one embodiment, extensions in the client hello are transmitted in plaintext. Thus, in block <b>204</b> the method can analyze the plaintext of the client hello and determine if the SNI extension is present. If no SNI extension is present, the method ends since the hostname cannot be extracted via the extension. In generally, nearly all clients support SNI and thus, it will be rare (but possible) that block <b>204</b> will fail. However, for malicious clients SNI may potentially not be implemented. This results in malicious traffic being excluded from traffic modeling which increases the utility of the results discussed in more detail herein.</p><p id="p-0044" num="0043">In block <b>206</b>, the method extracts a domain and host from the client hello message. Specifically, the method analyzes the datagram comprising the TLS client hello and identifies the start of the SNI extension. The method can then use pattern matching to extract a host (e.g., example) and domain (e.g., .com) included in the SNI extension. In some embodiments, the method concatenates these values to form the domain name of the client hello.</p><p id="p-0045" num="0044">In optional block <b>214</b>, the method verifies that the TLS handshake succeeds. In some circumstances, the domain name included in the SNI extension may not be recognized by the endpoint. In this case, the domain name is of limited value for modeling traffic since it represents a failed transaction. Thus, in some embodiments, the method monitors the remaining transactions in the TLS handshake to confirm that the handshake succeeds, which indicates that the domain name was valid. In other embodiments, the method bypasses block <b>214</b> and simply records the existing of a request to the extracted domain name.</p><p id="p-0046" num="0045">In block <b>208</b>, the method adds the extracted domain and host to a training set. Additionally, the method may add the IP address, a fingerprint of the server's certificate, and the entire request datagram to the training data set. These items may be associated as a tuple for later processing. This processing is described more fully in other figures. In general, the method uses the domain and host as a label and the remaining data as a payload. In this manner, the method generates a training data set of labeled examples that can be used to train a machine learning model (e.g., classifier) alone or in conjunction with other methods described herein.</p><p id="p-0047" num="0046">In block <b>210</b>, the method records interactions with the extracted host for a given TLS session. In block <b>212</b>, the method determines if the client continues to issue requests for a given TLS session. If so, the method continues to record interactions with the host for the session (block <b>210</b>). Upon detecting a timeout or a session teardown, the method ends.</p><p id="p-0048" num="0047">In some embodiments, the method monitors sessions of clients with a given host after the TLS handshake succeeds. Each datagram in the session is used to refine the training data set generated in block <b>208</b>. Thus, in some embodiments, each datagram is labeled as described in block <b>208</b>. An example of this operation (and previous operations) is provided below with respect to an email server.</p><p id="p-0049" num="0048">In the client hello, the method identifies an IP address of 3.3.3.3 and a domain name (host and domain) as mail.example.com. The method records this data as an initial training example. While the client is connected to mail.example.com, the client will issue numerous requests to the server. For example, the client will issue an initial request to mail.example.com to load an inbox and the server returns a lengthy response. The client may then issue a GET request for a single email, to which the server returns a smaller response body. The client may then issue a POST request with a significant data payload to send a reply to the message. The server may then reply with an HTTP 200 message and no body. With TLS enabled, existing systems were unable to classify these transactions to a given host. However, in the illustrated method, each request can be tagged as belonging to a given host.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating a method for datagram and connection modeling according to some embodiments of the disclosure. The illustrated method depicts embodiments for modeling network transactions to generate fingerprints of data types and request patterns associated with a given endpoint. The fingerprints are formed based on metadata and do not rely upon identifying information (either personal or connection) to generate a fingerprint.</p><p id="p-0051" num="0050">In block <b>302</b>, the method identifies an endpoint for a given set of network transactions.</p><p id="p-0052" num="0051">In one embodiment, the method described in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be used to identify the endpoint. In an alternative embodiment, the method can identify endpoints by simulating network traffic with known clients. In this embodiment, the method utilizes one or more client devices to issue network requests to known endpoints. Since the method is controlling the client devices, the method can label the resulting request/response pairs reliably. In this manner, the method can generate a training set without relying on TLS handshake leakage as described in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0053" num="0052">In block <b>304</b>, the method identifies a transaction burst.</p><p id="p-0054" num="0053">During normal network interactions, transactions are generally issued in short &#x201c;bursts&#x201d; of multiple transactions followed by a relatively longer period of inactivity. For example, when requesting a web page comprising an email inbox the initial request will include many additional requests for assets and other resources. These requests will be issued immediately after one another and generally in a matter of seconds (or quicker depending on network latency). After this initial &#x201c;burst&#x201d; of activity, the session remains relatively silent for a significantly longer period (e.g., 20 seconds, 1 minute, etc.). When a user performs a second action (e.g., selecting an email), a similar burst of transactions is initiated again finishing in a short amount of time. This process is repeated generally for each interaction. Thus, in block <b>304</b>, the method detects the start of these bursts to determine when to begin grouping network transactions into a user interaction.</p><p id="p-0055" num="0054">In block <b>306</b>, the method captures network transactions associated with the transaction burst.</p><p id="p-0056" num="0055">In one embodiment, the method can monitor a session for inactivity. The method can then monitor transactions to determine when multiple transactions are issued is rapid succession. This process can avoid capturing heartbeat interactions or other intermittent requests issued by clients. Upon detecting that a threshold number of transactions were issued, the method can group the issued transactions and future transactions into a grouping of transactions for modeling.</p><p id="p-0057" num="0056">In block <b>308</b>, the method analyzes the captured network transactions and extracts datagram and connection properties of the requests and responses. Various properties can be extracted, some of which are described below. The various examples can be used independently or, more commonly, in varying permutations.</p><p id="p-0058" num="0057">In one embodiment, TCP port numbers can be extracted from network requests. In general, TCP port numbers are semi-deterministic and thus can be used to fingerprint the requests within a given transaction burst.</p><p id="p-0059" num="0058">In one embodiment, the IP address space in the network requests can be used to identify a company providing the network service. In general, IP address spaces are static and can thus be used to preliminarily assign a given set of network requests to a given company based on this IP address space.</p><p id="p-0060" num="0059">In one embodiment, the size of the datagrams in both the requests and responses can be extracted and used for fingerprinting. Generally, datagram size is variable and not a strong independent indicator of a network service identifier. However, when providing (for example) static assets, a given network service will frequently transmit identically sized assets (and thus datagram sizes) during transactions bursts.</p><p id="p-0061" num="0060">In one embodiment, the response time of a given transaction can be used to fingerprint the transaction. In some embodiments, since the response time varies based on network latency, the trace route to the target IP address (i.e., network service IP address) can be used to normalize the response time to obtain a normalized response time for each of the network requests. In some embodiments, the total response time for a transaction burst can be used as the response time (i.e., the time between the first and last transaction) can be used.</p><p id="p-0062" num="0061">In one embodiment, the number of requests in the transaction burst can be used to fingerprint the transaction burst. For example, certain types of burst will tend to have a similar (or identical) number of transactions, thus this number can be used as one signal to fingerprint the burst. Additionally, the ordering of these transactions can be used as another fingerprinting signal. As one example, an HTML page generally includes a fixed or semi-fixed structure which defines how a client will retrieve external assets (e.g., stylesheets, JavaScript, etc.). Thus, the ordering of requests is semi-deterministic and can be used as a fingerprint. The destination IP address, size of the request/response, and timing can all be used in the ordering to fingerprint the transaction burst.</p><p id="p-0063" num="0062">Finally, in one embodiment, network route tracing can be used to fingerprint a given transaction burst. In this embodiment, the method can trace the destination IP addresses between the client and the endpoint and identify, for each IP address in the route, the companies involved in the route. For example, many large companies own their own datacenters and thus many &#x201c;hops&#x201d; on the trace route will include identifying data (e.g., a hostname) that clearly identify the provider of the ultimate network service.</p><p id="p-0064" num="0063">The various signals described above can all be used to form a fingerprint of a given transaction burst. The disclosed embodiments are not limited to a specific combination and any permutation of the above signals may be utilized to fingerprint a transaction burst.</p><p id="p-0065" num="0064">In block <b>310</b>, the method labels the extracted data. In some embodiments (described below), this labelling is optional or partially optional.</p><p id="p-0066" num="0065">As discussed, the output of the method in <figref idref="DRAWINGS">FIG. <b>3</b></figref> is a trained model that can be used to classify future extracted data. In one embodiment, the method trains a classifier and thus requires labeled data. In this example (i.e., a supervised learning model), the labeled data can be generated by performing the above process with a known client device. That is, bots or scripts can be used to simulate network activity with various services. In other embodiments, users who opt-in to training a system can be used to perform the same actions. In either embodiment, the method knows in advance what the transaction burst is associated with (both a network service as well as the type of action taken). For example, a script can be configured to login to an email client (burst #1), select an email (burst #2), respond to the email (burst #3), and create and send a new email (burst #4). Since the method controls the operation of the bot/script, the method can apply appropriate labels to the recorded burst data in block <b>310</b>.</p><p id="p-0067" num="0066">In some embodiments, unsupervised learning methods can be used to cluster transaction bursts. In these embodiments, the method may cluster transactions bursts for a given network service. For example, the four bursts described above would generally be capable of being clustered into four separate groups. After this clustering, the properties of the aggregate clusters may be analyzed to label the clusters and thus individual transactions. For example, a large request datagram size for bursts #3 and #4 can be used as evidence that these bursts are associated with sending email. Further, fewer requests/responses in burst #2 as compared to burst #1 can be evidence that burst #2 is associated with reading an individual email. Finally, the ordering of bursts can be used as evidence that burst #1 is indicative of an initial burst (i.e., loading an inbox).</p><p id="p-0068" num="0067">As another example, the above fingerprinting can be used to identify individual content items provided by network services. Each content item on a website has different pictures, descriptions of different lengths, etc. If a first user downloads the product image, the response size over an HTTPS connection is same as a second (or third, etc.) user. Even with larger collections of content items, a 1000-byte variance in image sizes reduces the potential set of candidate content viewed by the user. This pruning of options, combined with the other signals described above, increases the confidence level of identifying an individual content item. Thus, a bot/script can be used to identify and label images and the combination of image sizes, datagram sizes, and other signals can be used to identify future unlabeled requests on a content item-level basis.</p><p id="p-0069" num="0068">Using these approaches, the method generates a training data set that comprises a set of n-dimensional transaction burst vectors, each labeled with a tuple comprising the network service and, if available, an action performed with respect to the service. In some embodiments, the method utilizes fingerprints instead of raw data organized as vectors. In this scenario, the method may perform various operations on the underlying data (e.g., hashing, etc.) to generate the fingerprint. In other embodiments, the raw vectorized data can comprise the fingerprint itself.</p><p id="p-0070" num="0069">In block <b>312</b>, the method then trains a model using the labeled data. In the illustrated embodiment, any suitable type of supervised learning model may be used to generate the model. For example, a support vector machine (SVM) model or neural network may be used to generate the resulting model based on the extracted training data. Alternatively, decision trees or similar methods can be used to generate the model.</p><p id="p-0071" num="0070">In one embodiment, models (or model layers) may be shared or re-used across network services. For example, multiple network services may provide email or e-commerce services. Despite comprising different network services, these categories generally perform similar actions (e.g., sending and reading email or viewing products and completing a purchase). Thus, in some embodiments, the models generated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> can be created for a known service (e.g., YAHOO MAIL) and then applied to an unknown network service of the same type (e.g., GMAIL). In this manner, the method can utilize a bot or script on a single service and extrapolate the model to other similar services without negatively impacting the operation of the similar services.</p><p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating a method for building an IP to network service mapping based on monitored network requests according to some embodiments of the disclosure.</p><p id="p-0073" num="0072">In block <b>402</b>, the method receives a network request. Details of network requests have been described previously and are not repeated herein for the sake of clarity.</p><p id="p-0074" num="0073">In block <b>404</b>, the method identifies an endpoint and an IP address associated with the network request.</p><p id="p-0075" num="0074">In one embodiment, the method identifies an IP address of the network request by extracting it from the IP header of the network request. In one embodiment, identifying the endpoint of the request comprises identifying a network service associated with the IP address. In some embodiments, this can be done by employing the methods described in the description of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Alternatively, in some embodiments, the method may utilize the trained model described in the description of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In either event, the method identifies the IP address and an identifier of the network service.</p><p id="p-0076" num="0075">In some embodiments, the method may further predict the action taken with respect to the network service. In these embodiment, the method can also employ the predictive models generated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0077" num="0076">In block <b>406</b>, the method generates a mapping of IP addresses to endpoints.</p><p id="p-0078" num="0077">In some embodiments, this mapping can also include a mapping from IP addresses to both endpoints (network services) and actions taken with respect to these network services. In some embodiments, the method may record additional data such as the frequency in which the network services (and actions) are accessed, the location of client devices, the most recent access, and various other metrics.</p><p id="p-0079" num="0078">In some embodiments the method further stores in the mapping an identification of the cloud service provider. In general, cloud service (IaaS) providers (e.g., GOOGLE CLOUD, AMAZON AWS, and MICROSOFT AZURE) host many different network services within a single address space. As described above, simply looking at an IP address thus does not provide any insight into the individual networks services in use on those IaaS platforms. In one embodiment, by storing the cloud provider associated with an IP address, the method can create a mapping not only of IP addresses to individual network services, but also a mapping of network services to cloud service providers.</p><p id="p-0080" num="0079">In some embodiments, the method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> can be executed in real-time. That is, block <b>406</b> can be executed for every request on the network. In this manner, the method can provide a real-time mapping of network services and their cloud service providers. This mapping can then be used to quickly classify future network requests. For example, in some embodiments, the mapping can be used to identify IP address spaces for given network services and this mapping can be used to classify incoming requests to IP addresses within this address space. Thus, the method in <figref idref="DRAWINGS">FIG. <b>4</b></figref> can be utilized identify network endpoints in, for example, block <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram illustrating a method for building a mapping of network transaction properties to network services according to some embodiments of the disclosure.</p><p id="p-0082" num="0081">In block <b>502</b>, the method receives a network request. Details of network requests have been described previously and are not repeated herein for the sake of clarity.</p><p id="p-0083" num="0082">In block <b>504</b>, the method extracts a response size, response time, network route, URI header length, or combination thereof from the network request. In some embodiments, the method may extract various other parameters of the network request (e.g., datagram size, TCP port, etc.) discussed above as part of block <b>504</b>.</p><p id="p-0084" num="0083">In block <b>506</b>, the method builds or updates a mapping of the extracted properties to endpoints and cloud providers.</p><p id="p-0085" num="0084">The illustrated method in <figref idref="DRAWINGS">FIG. <b>5</b></figref> is similar to that in <figref idref="DRAWINGS">FIG. <b>4</b></figref> and the details of <figref idref="DRAWINGS">FIG. <b>4</b></figref> are not repeated herein for <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Generally, the method in <figref idref="DRAWINGS">FIG. <b>5</b></figref> generates mapping of various properties of the network requests (beyond IP addresses) that can be used to classify future requests without knowing the IP address of a response.</p><p id="p-0086" num="0085">In some embodiments, the various properties extracted in block <b>504</b> are used to create per-property mappings. That is, the method creates a response size to endpoint mapping, a response time to endpoint mapping, etc. In this manner, the mappings can be used in a cascading fashion to classify network requests. This cascading may be useful to narrow down a list of potential endpoints based solely on network request properties.</p><p id="p-0087" num="0086">For example, when receiving a network request the method may first identify a set of 1000 endpoints that have similar response sizes. In some embodiments, the method may perform a &#x201c;fuzzy&#x201d; match, in that an exact response size match is not required (due to fluctuations in data transmitted). The method can then identify a second set of 750 endpoints that (fuzzily) match the URI header length. The method can then identify the intersection of these sets and use the intersection as a candidate set of network services for further inspection. In some embodiments, this intersection may comprise a single network service. In this case, the method can assume the network request is associated with the network service.</p><p id="p-0088" num="0087">In other embodiments, the intersection may comprise multiple network services. In this embodiment, the method may utilize the predictive models described in <figref idref="DRAWINGS">FIG. <b>3</b></figref> to make a final determination as to the network service. Thus, the process in <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> can be used to refine the confidence of the model output of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating a method for classifying network transactions according to some embodiments of the disclosure.</p><p id="p-0090" num="0089">In block <b>602</b>, the method receives a network transaction.</p><p id="p-0091" num="0090">In one embodiment, the network transaction comprises a network request, response, or both. In some embodiments, block <b>602</b> further comprises receiving a transaction burst as described in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0092" num="0091">In block <b>604</b>, the method classifies the network transaction by network service and action within that network service. That is, the method identifies a network service for the network transaction and, if possible, identifies an action taken by the client with the network service.</p><p id="p-0093" num="0092">The preceding methods in <figref idref="DRAWINGS">FIGS. <b>3</b> through <b>5</b></figref> may be used alone or in any permutation to performed block <b>604</b>. Various non-limiting examples are given herein below.</p><p id="p-0094" num="0093">In one embodiment, the methods in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be used alone in block <b>604</b>. In this scenario, the method can classify network requests based on an associated hostname and thus network service.</p><p id="p-0095" num="0094">In another embodiment, the methods in <figref idref="DRAWINGS">FIG. <b>3</b></figref> can be used alone in block <b>604</b>. In this embodiment, the pretrained model is used to predict the network service and actions taken thereon by inputting the transaction into the model. In another embodiment, the methods in <figref idref="DRAWINGS">FIGS. <b>2</b> and <b>3</b></figref> can be combined. In this embodiment, the method may first identify a hostname using the method in <figref idref="DRAWINGS">FIG. <b>2</b></figref> and use this hostname as an input to the model generated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In this manner, the output of the model is further refined given the explicitly identification of a hostname.</p><p id="p-0096" num="0095">In another embodiment, <figref idref="DRAWINGS">FIG. <b>2</b> or <b>3</b></figref> can be combined with <figref idref="DRAWINGS">FIG. <b>4</b> or <b>5</b></figref>. In these embodiments, the method can identify a network service (using the methods in <figref idref="DRAWINGS">FIGS. <b>2</b> and <b>3</b></figref>). The method can then execute the methods in <figref idref="DRAWINGS">FIG. <b>4</b> or <b>5</b></figref> to associate an IP address or request property (respectively) with the identified network service.</p><p id="p-0097" num="0096">In block <b>606</b>, the method updates a catalog of network service interactions.</p><p id="p-0098" num="0097">In one embodiment, the operator of the method may maintain a database of interactions with network service (in addition to the mapping tables described above). This database can be used for downstream analytics, personalization, marketing, and various other purposes.</p><p id="p-0099" num="0098">As one example, the database can be used to increase a quality of service for specific network services and actions taken thereon on a per-client basis. Thus, if the database indicates that a given client device users certain network services more than others, an ISP operating the method can increase the throughput for that client and those services while reducing the throughput for other services.</p><p id="p-0100" num="0099">As another example, the database can be used to obtain a holistic picture of how an ISP's users are accessing network services. This picture can be used by network engineers to improve packet handling to these network services.</p><p id="p-0101" num="0100">In another embodiment, an ISP operating the method can share the data with the network services themselves such that the network services can improve services for users.</p><p id="p-0102" num="0101">As another example, the database can be used to identify clients that are acting maliciously. For example, clients can be identified by MAC addresses which can in turn be used to classify devices as client devices, IoT devices, control servers, etc. The network service access by these devices can then be examined to identify malicious acts. For example, if a smart thermostat is sending large amount of email, or accessing inappropriate sites, it may indicate that the device was compromised and is acting as part of a botnet.</p><p id="p-0103" num="0102">As another example, in one embodiment, the methods can be used to identify purchases made by users from e-commerce sites. These purchases can then be used to target advertisements to the user.</p><p id="p-0104" num="0103">The above examples are not intended to be limiting and other use cases may exist.</p><p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram illustrating a client device showing an example embodiment of a client or server device that may be used within the present disclosure.</p><p id="p-0106" num="0105">Computing device (<b>700</b>) may include more or fewer components than those shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. For example, a server computing device may not include audio interfaces, displays, keypads, illuminators, haptic interfaces, GPS receivers and cameras or sensors.</p><p id="p-0107" num="0106">As shown in the figure, device (<b>700</b>) includes a processing unit (CPU) (<b>722</b>) in communication with a mass memory (<b>730</b>) via a bus (<b>724</b>). Computing device (<b>700</b>) also includes one or more network interfaces (<b>750</b>), an audio interface (<b>752</b>), a display (<b>754</b>), a keypad (<b>756</b>), an illuminator (<b>758</b>), an input/output interface (<b>760</b>), a haptic interface (<b>762</b>), an optional global positioning systems (GPS) receiver (<b>764</b>) and a camera(s) or other optical, thermal, or electromagnetic sensors (<b>766</b>). Device (<b>700</b>) can include one camera/sensor (<b>766</b>), or a plurality of cameras/sensors (<b>766</b>), as understood by those of skill in the art. The positioning of the camera(s)/sensor(s) (<b>766</b>) on device (<b>700</b>) can change per device (<b>700</b>) model, per device (<b>700</b>) capabilities, and the like, or some combination thereof.</p><p id="p-0108" num="0107">Computing device (<b>700</b>) may optionally communicate with a base station (not shown), or directly with another computing device. Network interface (<b>750</b>) is sometimes known as a transceiver, transceiving device, or network interface card (NIC).</p><p id="p-0109" num="0108">Audio interface (<b>752</b>) is arranged to produce and receive audio signals such as the sound of a human voice. For example, audio interface (<b>752</b>) may be coupled to a speaker and microphone (not shown) to enable telecommunication with others and/or generate an audio acknowledgement for some action. Display (<b>754</b>) may be a liquid crystal display (LCD), gas plasma, light emitting diode (LED), or any other type of display used with a computing device. Display (<b>754</b>) may also include a touch sensitive screen arranged to receive input from an object such as a stylus or a digit from a human hand.</p><p id="p-0110" num="0109">Keypad (<b>756</b>) may comprise any input device arranged to receive input from a user. Illuminator (<b>758</b>) may provide a status indication and/or provide light.</p><p id="p-0111" num="0110">Computing device (<b>700</b>) also comprises input/output interface (<b>760</b>) for communicating with external. Input/output interface (<b>760</b>) can utilize one or more communication technologies, such as USB, infrared, Bluetooth&#x2122;, or the like. Haptic interface (<b>762</b>) is arranged to provide tactile feedback to a user of the client device.</p><p id="p-0112" num="0111">Optional GPS transceiver (<b>764</b>) can determine the physical coordinates of computing device (<b>700</b>) on the surface of the Earth, which typically outputs a location as latitude and longitude values. GPS transceiver (<b>764</b>) can also employ other geo-positioning mechanisms, including, but not limited to, triangulation, assisted GPS (AGPS), E-OTD, CI, SAI, ETA, BSS, or the like, to further determine the physical location of computing device (<b>700</b>) on the surface of the Earth. In one embodiment, however, computing device may through other components, provide other information that may be employed to determine a physical location of the device, including for example, a MAC address, Internet Protocol (IP) address, or the like.</p><p id="p-0113" num="0112">Mass memory (<b>730</b>) includes a RAM (<b>732</b>), a ROM (<b>734</b>), and other storage means. Mass memory (<b>730</b>) illustrates another example of computer storage media for storage of information such as computer readable instructions, data structures, program modules or other data. Mass memory (<b>730</b>) stores a basic input/output system (&#x201c;BIOS&#x201d;) (<b>740</b>) for controlling low-level operation of computing device (<b>700</b>). The mass memory also stores an operating system (<b>741</b>) for controlling the operation of computing device (<b>700</b>)</p><p id="p-0114" num="0113">Applications (<b>742</b>) may include computer executable instructions which, when executed by computing device (<b>700</b>), transmit, receive, and/or otherwise process network messages such as HTTPS messages. Applications (<b>742</b>) may further include networking library (<b>745</b>) that is configured to send, to receive, and/or to otherwise process network requests and responses. The device (<b>700</b>) can be configured to perform any of the methods (or portions of the methods) described previously in the description of the preceding Figures.</p><p id="p-0115" num="0114">In some embodiments, the software and/or programs implementing the method embodiments can be read from hard disk drive (not illustrated) and temporarily stored in RAM (<b>732</b>) by CPU (<b>722</b>). CPU (<b>722</b>) may then read the software and/or data from RAM (<b>732</b>), process them, and store them to RAM (<b>732</b>) again.</p><p id="p-0116" num="0115">For the purposes of this disclosure a module is a software, hardware, or firmware (or combinations thereof) system, process or functionality, or component thereof, that performs or facilitates the processes, features, and/or functions described herein (with or without human interaction or augmentation). A module can include sub-modules. Software components of a module may be stored on a computer readable medium for execution by a processor. Modules may be integral to one or more servers, or be loaded and executed by one or more servers. One or more modules may be grouped into an engine or an application.</p><p id="p-0117" num="0116">For the purposes of this disclosure the term &#x201c;user&#x201d;, &#x201c;subscriber&#x201d; &#x201c;consumer&#x201d; or &#x201c;customer&#x201d; should be understood to refer to a user of an application or applications as described herein and/or a consumer of data supplied by a data provider. By way of example, and not limitation, the term &#x201c;user&#x201d; or &#x201c;subscriber&#x201d; can refer to a person who receives data provided by the data or service provider over the Internet in a browser session, or can refer to an automated software application which receives the data and stores or processes the data.</p><p id="p-0118" num="0117">Those skilled in the art will recognize that the methods and systems of the present disclosure may be implemented in many manners and as such are not to be limited by the foregoing exemplary embodiments and examples. In other words, functional elements being performed by single or multiple components, in various combinations of hardware and software or firmware, and individual functions, may be distributed among software applications at either the client level or server level or both. In this regard, any number of the features of the different embodiments described herein may be combined into single or multiple embodiments, and alternate embodiments having fewer than, or more than, all the features described herein are possible.</p><p id="p-0119" num="0118">Functionality may also be, in whole or in part, distributed among multiple components, in manners now known or to become known. Thus, myriad software/hardware/firmware combinations are possible in achieving the functions, features, interfaces, and preferences described herein. Moreover, the scope of the present disclosure covers conventionally known manners for carrying out the described features and functions and interfaces, as well as those variations and modifications that may be made to the hardware or software or firmware components described herein as would be understood by those skilled in the art now and hereafter.</p><p id="p-0120" num="0119">Furthermore, the embodiments of methods presented and described as flowcharts in this disclosure are provided by way of example to provide a more complete understanding of the technology. The disclosed methods are not limited to the operations and logical flow presented herein. Alternative embodiments are contemplated in which the order of the various operations is altered and in which sub-operations described as being part of a larger operation are performed independently.</p><p id="p-0121" num="0120">While various embodiments have been described for purposes of this disclosure, such embodiments should not be deemed to limit the teaching of this disclosure to those embodiments. Various changes and modifications may be made to the elements and operations described above to obtain a result that remains within the scope of the systems and processes described in this disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>identifying a transaction burst, the transaction burst comprising a series of encrypted network requests issued by a client device to a network endpoint during a secure session;</claim-text><claim-text>extracting one or more transaction properties from the transaction burst;</claim-text><claim-text>assigning labels to the one or more transaction properties, a given label comprising one or more of a network service and an action; and</claim-text><claim-text>training a predictive model with the labels and the one or more transaction properties.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the one or more transaction properties comprising a property selected from the group consisting of:<claim-text>a transmission control protocol (TCP) port;</claim-text><claim-text>an Internet Protocol (IP) address space;</claim-text><claim-text>a size of a datagram;</claim-text><claim-text>a response time;</claim-text><claim-text>a number of requests in the transaction burst; and</claim-text><claim-text>a network route trace.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising combining the one or more transaction properties to form a fingerprint prior to training the predictive model.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein assigning labels to the one or more transaction properties comprises executing a script to access the network service.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein assigning labels to the one or more transaction properties further comprises executing the script to perform a known action with the network service.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein assigning labels to the one or more transaction properties comprises clustering a set of unlabeled transaction bursts and applying labels to each transaction burst within each cluster.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predictive model comprises one of a neural network or support vector machine.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory computer-readable storage medium for tangibly storing computer program instructions capable of being executed by a computer processor, the computer program instructions defining the steps of:<claim-text>identifying a transaction burst, the transaction burst comprising a series of encrypted network requests issued by a client device to a network endpoint during a secure session;</claim-text><claim-text>extracting one or more transaction properties from the transaction burst;</claim-text><claim-text>assigning labels to the one or more transaction properties, a given label comprising one or more of a network service and an action; and</claim-text><claim-text>training a predictive model with the labels and the one or more transaction properties.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, the one or more transaction properties comprising a property selected from the group consisting of:<claim-text>a transmission control protocol (TCP) port;</claim-text><claim-text>an Internet Protocol (IP) address space;</claim-text><claim-text>a size of a datagram;</claim-text><claim-text>a response time;</claim-text><claim-text>a number of requests in the transaction burst; and</claim-text><claim-text>a network route trace.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising combining the one or more transaction properties to form a fingerprint prior to training the predictive model.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein assigning labels to the one or more transaction properties comprises executing a script to access the network service.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein assigning labels to the one or more transaction properties further comprises executing the script to perform a known action with the network service.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein assigning labels to the one or more transaction properties comprises clustering a set of unlabeled transaction bursts and applying labels to each transaction burst within each cluster.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the predictive model comprises one of a neural network or support vector machine.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A device comprising:<claim-text>a processor; and</claim-text><claim-text>a storage medium for tangibly storing thereon logic for execution by the processor, the logic comprising instructions for:<claim-text>identifying a transaction burst, the transaction burst comprising a series of encrypted network requests issued by a client device to a network endpoint during a secure session,</claim-text><claim-text>extracting one or more transaction properties from the transaction burst,</claim-text><claim-text>assigning labels to the one or more transaction properties, a given label comprising one or more of a network service and an action, and</claim-text><claim-text>training a predictive model with the labels and the one or more transaction properties.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the one or more transaction properties comprising a property selected from the group consisting of:<claim-text>a transmission control protocol (TCP) port;</claim-text><claim-text>an Internet Protocol (IP) address space;</claim-text><claim-text>a size of a datagram;</claim-text><claim-text>a response time;</claim-text><claim-text>a number of requests in the transaction burst; and</claim-text><claim-text>a network route trace.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the instructions further comprising combining the one or more transaction properties to form a fingerprint prior to training the predictive model.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein assigning labels to the one or more transaction properties comprises executing a script to access the network service.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The device of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein assigning labels to the one or more transaction properties further comprises executing the script to perform a known action with the network service.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein assigning labels to the one or more transaction properties comprises clustering a set of unlabeled transaction bursts and applying labels to each transaction burst within each cluster.</claim-text></claim></claims></us-patent-application>