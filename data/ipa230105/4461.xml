<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004462A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004462</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364068</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>14</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1435</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1464</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1469</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1451</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2201</main-group><subgroup>80</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">PERSISTENTLY STORING METADATA ASSOCIATED WITH A BACKUP OF DATA IN A SOURCE DATABASE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Microsoft Technology Licensing, LLC</orgname><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SHAO</last-name><first-name>Min</first-name><address><city>Bellevue</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>DEAL</last-name><first-name>Austin</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>TAWADE</last-name><first-name>Manish</first-name><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>JAUHARI</last-name><first-name>Ankur</first-name><address><city>Bothell</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>LEASON</last-name><first-name>Max</first-name><address><city>Kirkland</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>PARCHANI</last-name><first-name>Sonia Kripasagar</first-name><address><city>Bellevue</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system for persistently storing metadata associated with a backup of data in a source database. The system includes a cloud storage system and a source database. The source database includes a memory including data and a first electronic processor. The first electronic processor is configured to write a backup of the data included in the memory of the source database to the cloud storage system. The first electronic processor is also configured to write metadata associated with the backup of the data (&#x201c;backup metadata&#x201d;) to a table included in the memory of the source database. The backup metadata is used to retrieve the data when a target database is restored to a previous state of the source database.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="117.43mm" wi="152.40mm" file="US20230004462A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="201.59mm" wi="154.35mm" orientation="landscape" file="US20230004462A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="170.94mm" wi="152.40mm" orientation="landscape" file="US20230004462A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="230.46mm" wi="157.40mm" file="US20230004462A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.75mm" wi="157.06mm" orientation="landscape" file="US20230004462A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="194.14mm" wi="155.02mm" file="US20230004462A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="154.43mm" wi="151.64mm" orientation="landscape" file="US20230004462A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="247.90mm" wi="158.24mm" orientation="landscape" file="US20230004462A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="202.52mm" wi="157.40mm" file="US20230004462A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="236.81mm" wi="148.76mm" file="US20230004462A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="218.02mm" wi="148.76mm" file="US20230004462A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="234.19mm" wi="153.84mm" orientation="landscape" file="US20230004462A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="236.81mm" wi="153.84mm" orientation="landscape" file="US20230004462A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="242.15mm" wi="155.19mm" orientation="landscape" file="US20230004462A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">SUMMARY</heading><p id="p-0002" num="0001">In many information systems, performing backups for both user-initiated and system-initiated restores requires storing metadata about each individual backup in cloud storage. Currently, performing restores of source databases involves several high cost transactions. Many, if not all, of these high cost transactions involve reading and writing to cloud storage. During the backing up and restoration of a source database, every operation that requires metadata needs to read from or write to cloud storage. An example of metadata that is saved for a backup of a source database is illustrated in table <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The backup metadata includes, for example, the time when the backup took place, the location of the backup data, the size of the backup data, and the like. The backup metadata may be used to develop a restore plan for restoring a source database to the state it existed at a previous point in time. For example, the time of the backup may be used to determine if the data included in the backup needs to be retrieved to restore the source database to the state it was in at a point in time selected by a user.</p><p id="p-0003" num="0002">In some traditional deployments of a source database (for example, a Structured Query Language (SQL) database), backup metadata is retrieved by querying a system database (for example, a main storage database (MSDB)). However, in some implementations of a source database (for example, an Azure&#xae; SQL database), the system database is not resilient to failovers and the metadata may be lost. Therefore, in these implementations, the metadata is stored in a cloud storage system.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example of how a backup of data in a source database <b>200</b> is often performed in implementations where metadata cannot be stored persistently in a system database. A computer or electronic processor (not shown) associated with the source database <b>200</b> receives a request to backup the data in the source database <b>200</b> from a backup service <b>202</b> (step &#x201c;1. backup request&#x201d; in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). The electronic processor transfers the data in local memory to the cloud storage system <b>205</b> (step &#x201c;2. write backup to the cloud storage system&#x201d; in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). The electronic processor writes metadata regarding the backup to a system database (for example, a MSDB) (step &#x201c;3. write metadata to MSDB&#x201d; in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). The electronic processor then sends confirmation to the backup service that the backup has been completed (step &#x201c;4. backup completes&#x201d; in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). The electronic processor also sends the metadata associated with the backup to the backup service <b>202</b> (step &#x201c;5. read backup metadata from MSDB&#x201d; in <figref idref="DRAWINGS">FIG. <b>2</b></figref>). The backup service <b>202</b> sends the metadata associated with the backup to the cloud storage system <b>205</b> for storage (step &#x201c;6. Stamp metadata on blob file&#x201d; in <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a method and system for restoring data from a source database when the data is backed up using the system and method illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Restoration of a source database occurs when a management service <b>300</b> receives a request from a user device <b>305</b> to restore a target database <b>310</b> to a point in time selected by a user. The management service <b>300</b> validates the restore request and sends a restore flag to an application programing interface (API) or communication layer (for example, a WinFab service fabric). The target database <b>310</b> calls the restore service <b>315</b>. The restore service <b>315</b> retrieves metadata from the cloud storage system <b>205</b> and uses the retrieved metadata to generate a restore plan. The restore service <b>315</b> sends a T-SQL statement including the restore plan to the target database <b>310</b>. The target database <b>310</b> uses the restore plan to retrieve, from the cloud storage system <b>205</b>, the data needed to restore the target database <b>310</b> to the state it was in at the point in time selected by the user. It should be understood that the functionality described above as being performed by the backup service <b>202</b>, management service <b>300</b>, and restore service <b>315</b> is performed by an electronic processor executing the backup service <b>202</b>, management service <b>300</b>, and restore service <b>315</b>. Additionally, source databases and target databases described herein may be user databases that store data associated with users or subscribers to a database service.</p><p id="p-0006" num="0005">Among other things and benefits, embodiments described herein save computer resources by limiting the number of read and write operations (&#x201c;reads&#x201d; and &#x201c;writes&#x201d;) to and from the cloud storage system <b>205</b> that are performed during database backup and restoration. Some embodiments described herein accomplish this by writing metadata regarding backups to an internal table included in the source database <b>410</b> rather than to the cloud storage system <b>205</b>. In some embodiments, the internal table may be used to allow users to view the backup history of their database. The embodiments described herein also allow erroneous restore requests to fail quickly, preserve backup data, allow for the restoration of geo-primary and geo-secondary databases, and extend restoration functionality by, for example, highlighting gaps in backup data in a restored (or target) database and corrupted backup data in a restored (or target) database.</p><p id="p-0007" num="0006">In particular, one embodiment provides a system for persistently storing metadata associated with a backup of data in a source database. The system includes a cloud storage system and a source database. The source database includes a memory including data and a first electronic processor. The first electronic processor is configured to write a backup of the data included in the memory of the source database to the cloud storage system. The first electronic processor is also configured to write metadata associated with the backup of the data (&#x201c;backup metadata&#x201d;) to a table included in the memory of the source database. The backup metadata is used to retrieve the data when a target database is restored to a previous state of the source database.</p><p id="p-0008" num="0007">Another embodiment provides a method of persistently storing metadata associated with a backup of data in a source database. The method includes sending, with a first electronic processor, a backup of data included in memory of a source database to a cloud storage system. The method further includes sending, with the first electronic processor, metadata associated with the backup of the data (&#x201c;backup metadata&#x201d;) to a table included in the memory of the source database. The backup metadata is used to retrieve the data when a target database is restored to a previous state of the source database.</p><p id="p-0009" num="0008">Yet another embodiment provides a non-transitory computer-readable medium including instructions executable by an electronic processor to perform a set of functions. The set of functions include writing, with a first electronic processor, a backup of data included in memory of a source database to a cloud storage system. The set of functions also include writing, with the first electronic processor, metadata associated with the backup of the data (&#x201c;backup metadata&#x201d;) to a table included in the memory of the source database. The backup metadata is used to retrieve the data when a target database is restored to a previous state of the source database.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of metadata that is saved for a backup of a source database.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example system and method for backing up data in a source database where metadata cannot be stored persistently in a system database.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example system and method of restoring data from a source database when the data is backed up using the method illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> schematically illustrates a system for persistently storing metadata associated with a backup of data according to some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart illustrating a method performed by the system of <figref idref="DRAWINGS">FIG. <b>4</b></figref> for storing metadata associated with a backup of data according to some embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example graphical illustration of the method of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> schematically illustrates a system for database restoration with a reduced number of reads and writes to and from a cloud storage system performed according to some embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart illustrating a method performed by the system of <figref idref="DRAWINGS">FIG. <b>7</b></figref> for restoring a target database to a previous state of a source database according to some embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is an example graphical illustration of the method of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example system and method for restoring a target database to a previous state when the source database is unresponsive according to some embodiments.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates examples of systems and methods for periodically deleting backup data and backup metadata according to some embodiments.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates examples of systems and methods for detecting and restoring missing backup metadata according to some embodiments.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates examples of systems and methods for billing users using the system of <figref idref="DRAWINGS">FIG. <b>4</b></figref> according to some embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION</heading><p id="p-0023" num="0022">One or more embodiments are described and illustrated in the following description and accompanying drawings. These embodiments are not limited to the specific details provided herein and may be modified in various ways. Furthermore, other embodiments may exist that are not described herein. Also, the functionality described herein as being performed by one component may be performed by multiple components in a distributed manner. Likewise, functionality performed by multiple components may be consolidated and performed by a single component. Similarly, a component described as performing particular functionality may also perform additional functionality not described herein. For example, a device or structure that is &#x201c;configured&#x201d; in a certain way is configured in at least that way, but may also be configured in ways that are not listed. Furthermore, some embodiments described herein may include one or more electronic processors configured to perform the described functionality by executing instructions stored in non-transitory, computer-readable medium. Similarly, embodiments described herein may be implemented as non-transitory, computer-readable medium storing instructions executable by one or more electronic processors to perform the described functionality. As used in the present application, &#x201c;non-transitory computer-readable medium&#x201d; comprises all computer-readable media but does not consist of a transitory, propagating signal. Accordingly, non-transitory computer-readable medium may include, for example, a hard disk, a CD-ROM, an optical storage device, a magnetic storage device, a ROM (Read Only Memory), a RAM (Random Access Memory), register memory, a processor cache, or any combination thereof.</p><p id="p-0024" num="0023">In addition, the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. For example, the use of &#x201c;including,&#x201d; &#x201c;containing,&#x201d; &#x201c;comprising,&#x201d; &#x201c;having,&#x201d; and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items. The terms &#x201c;connected&#x201d; and &#x201c;coupled&#x201d; are used broadly and encompass both direct and indirect connecting and coupling. Further, &#x201c;connected&#x201d; and &#x201c;coupled&#x201d; are not restricted to physical or mechanical connections or couplings and can include electrical connections or couplings, whether direct or indirect. In addition, electronic communications and notifications may be performed using wired connections, wireless connections, or a combination thereof and may be transmitted directly or through one or more intermediary devices over various types of networks, communication channels, and connections. Moreover, relational terms such as first and second, top and bottom, and the like may be used herein solely to distinguish one entity or action from another entity or action without necessarily requiring or implying any actual such relationship or order between such entities or actions.</p><p id="p-0025" num="0024">As noted above, various embodiments of systems and methods for limiting the number of reads and writes required to be made to a cloud storage system during database back up and restoration are described. Some embodiments persistently store metadata associated with a backup of data in a source database. Currently, metadata regarding backups of a source database are stored in a system database (for example, a MSDB) or in a cloud storage system. However, in some database configurations (for example, Azure&#xae; SQL), a MSDB does not provide persistent storage for backup metadata. Therefore, in such database implementations, it is necessary to write backup metadata to and read backup metadata from the cloud storage system. Reading from and writing to the cloud storage system is costly, for example, in terms of both processing and bandwidth requirements.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>4</b></figref> provides an example illustration of a system <b>400</b> for persistently storing metadata associated with a backup of data in a source database. The system <b>400</b> includes a fourth electronic computing device <b>405</b>, a source database <b>410</b>, and a cloud storage system <b>205</b>. It should be understood that the system <b>400</b> is provided as one example and, in some embodiments, the system <b>400</b> includes fewer or additional components in various configurations. Furthermore, in some embodiments, the system <b>400</b> may include a different number of source databases.</p><p id="p-0027" num="0026">The fourth electronic computing device <b>405</b>, source database <b>410</b>, and cloud storage system <b>205</b> are communicatively coupled via a communication network <b>420</b>. The communication network <b>420</b> may be implemented using a wide area network (for example, the Internet), a local area network (for example, an Ethernet or Wi-Fi&#x2122; network), a cellular data network (for example, a Long Term Evolution (LTE&#x2122;) network), and combinations or derivatives thereof. In some embodiments, components of the system <b>400</b> communicate through one or more intermediary devices, such as routers, gateways, or the like (not illustrated).</p><p id="p-0028" num="0027">The fourth electronic computing device <b>405</b> includes a fourth electronic processor <b>425</b> (for example, a microprocessor, application-specific integrated circuit (ASIC), or another suitable electronic device), a fourth memory <b>427</b> (for example, a non-transitory, computer-readable storage medium), and a fourth communication interface <b>429</b>, such as a transceiver, for communicating over the communication network <b>420</b> and, optionally, one or more additional communication networks or connections. It should be understood that the fourth electronic computing device <b>405</b> may include additional components than those illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> in various configurations and may perform additional functionality than the functionality described in the present application.</p><p id="p-0029" num="0028">The fourth electronic processor <b>425</b>, the fourth memory <b>427</b>, and the fourth communication interface <b>429</b> included in the fourth electronic computing device <b>405</b> are communicatively coupled wirelessly, over one or more communication lines or buses, or a combination thereof. The fourth electronic processor <b>425</b> is configured to retrieve from the fourth memory <b>427</b> and execute, among other things, software to perform the methods described herein. For example, in the embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the fourth memory <b>427</b> includes a backup service <b>430</b>. It should be understood that the fourth memory <b>427</b> may store additional software and the software stored in the fourth memory <b>427</b> (or other memory modules included in the fourth electronic computing device <b>405</b>) may be distributed and combined in various configurations.</p><p id="p-0030" num="0029">The source database <b>410</b> includes a first electronic processor <b>435</b>, a first memory <b>440</b>, and a first communication interface <b>445</b> similar to the fourth electronic processor <b>425</b>, the fourth memory <b>427</b>, and the fourth communication interface <b>429</b> described above. It should be understood that the source database <b>410</b> may include additional components than those illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> in various configurations and may perform additional functionality than the functionality described in the present application.</p><p id="p-0031" num="0030">The first electronic processor <b>435</b>, the first memory <b>440</b>, and the first communication interface <b>445</b> included in the source database <b>410</b> are communicatively coupled wirelessly, over one or more communication lines or buses, or a combination thereof. In the embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the first memory <b>440</b> includes data <b>450</b> and a table <b>455</b> that will be described in further detail below. It should be understood that the first memory <b>440</b> may store additional software and data and that the software and data stored in the first memory <b>440</b> may be distributed and combined in various configurations.</p><p id="p-0032" num="0031">The cloud storage system <b>205</b> includes one or more computing devices (for example, servers) that include memory or cloud storage space on which backup data <b>465</b> from one or more source databases (for example, the source database <b>410</b>) is stored.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example method <b>500</b> for storing metadata associated with a backup of data. In some embodiments, the method <b>500</b> begins when the first electronic processor <b>435</b> receives a request to back up the data <b>450</b> included in the source database <b>410</b> (block <b>505</b>). In some embodiments, the request is sent by the fourth electronic computing device <b>405</b> when the fourth electronic processor <b>425</b> executes the backup service <b>430</b>. In response to receiving the request to back up the data <b>450</b> included in the source database <b>410</b>, the first electronic processor <b>435</b> writes or sends a backup of the data <b>450</b> included in the first memory <b>440</b> of the source database <b>410</b> to the cloud storage system <b>205</b> (block <b>510</b>). The first electronic processor <b>435</b> writes or sends metadata associated with the backup of the data <b>450</b> to a table <b>455</b> included in the first memory <b>440</b> of the source database <b>410</b> (block <b>515</b>). At a future time, the backup metadata included in the table <b>455</b> is used to retrieve the data <b>450</b> and restore a target database to a previous state of the source database <b>410</b>. In some embodiments, the table <b>455</b> is an internal table which is not accessible to the user. In some embodiments, a user is able to view the backup metadata included in the table <b>455</b> but is unable to edit the table <b>455</b>. When the backup is complete, the first electronic processor <b>435</b> generates a notification of completion of the backup of the source database <b>410</b> (block <b>520</b>). In other embodiments, the first electronic processor <b>435</b> does not receive a request to backup the source database <b>410</b>. Instead, the first electronic processor <b>435</b> periodically backs up the data <b>450</b> included in the source database <b>410</b> by performing blocks <b>510</b> and <b>515</b>. For example, the first electronic processor <b>435</b> may perform blocks <b>510</b> and <b>515</b> every twenty-four hours.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a graphical illustration of the method <b>500</b> that visually illustrates differences between existing systems and methods for performing database backups and the solution described herein. Unlike traditional systems and methods, in the system and method illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> and <figref idref="DRAWINGS">FIG. <b>6</b></figref>, backup metadata is written to the table <b>455</b> rather than to a system database (for example, MSDB). Because the backup metadata is written to the table <b>455</b>, <figref idref="DRAWINGS">FIG. <b>5</b></figref> and <figref idref="DRAWINGS">FIG. <b>6</b></figref> do not include the steps of reading the backup metadata from the MSDB and writing the metadata to the cloud storage system <b>205</b> (steps &#x201c;5. read backup metadata from the MSDB&#x201d; and &#x201c;6. Stamp metadata on blob file&#x201d; in <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>7</b></figref> provides an example illustration of a system <b>700</b> for database restoration with a reduced number of reads and writes to and from a cloud storage system. Similar to the system <b>400</b>, the system <b>700</b> includes the source database <b>410</b> and cloud storage system <b>205</b>. The system <b>700</b> also includes a central management server <b>705</b>, a management service <b>710</b>, a target database <b>715</b>, a restore service <b>720</b>, and a user device <b>725</b>. The central management server <b>705</b>, management service <b>710</b>, target database <b>715</b>, restore service <b>720</b>, user device <b>725</b>, source database <b>410</b>, and cloud storage system <b>205</b> are communicatively coupled via a communication network <b>420</b>. The central management server <b>705</b> and the management service <b>710</b> are illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref> as being included in a control ring <b>730</b>. In some embodiments, the control ring <b>730</b> includes devices which may communicate with the electronic devices of multiple tenants or multiple tenant rings (for example the tenant ring <b>735</b>). In some embodiments, the tenant ring <b>735</b> includes electronic computing devices associated with a single tenant. In some embodiments, the control ring <b>730</b> may communicate with the target database <b>715</b> through the use of one or more APIs (for example, a WinFab <b>740</b> service fabric). In some embodiments, the target database <b>715</b> is created or allocated as a result of a restore request and is populated with backup data that the cloud storage system <b>205</b> received from the source database <b>410</b>. In some embodiments, when the target database <b>715</b> is created, the restore service <b>720</b> is activated. In some embodiments, other services are also activated when the target database <b>715</b> is created. The single tenant ring <b>735</b> shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref> is merely illustrative and the system <b>700</b> may include multiple tenant rings associated with a variety of tenants. It should be understood that the tenant ring <b>735</b>, control ring <b>730</b>, or both may include different components than those illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. In some embodiments, the restore service <b>720</b> and management service <b>710</b> may be stored and executed on electronic computing devices similar to the fourth electronic computing device <b>405</b> that executes the backup service <b>430</b>.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example method <b>800</b> for restoring a target database (for example, the target database <b>715</b>) to a previous state of the source database <b>410</b>. The method <b>800</b> begins when a second electronic processor <b>745</b> executing the management service <b>710</b> receives a request to restore the target database <b>715</b> to the previous state from a user device (for example, the user device <b>725</b>) (block <b>805</b>). The request may include a selected time or date (for example, 3 days ago or Mar. 2, 2021) and the previous state of the source database <b>410</b> may be the data that source database <b>410</b> included at the selected time. The second electronic processor <b>745</b> determines whether the source database <b>410</b> is responsive (block <b>810</b>). For example, in some embodiments, the second electronic processor <b>745</b>, when executing the management service <b>710</b>, may query the central management server <b>705</b> to determine or check whether the source database <b>410</b> is in an unresponsive state (for example, the source database <b>410</b> is in an unresponsive state if the source database <b>410</b> has been deleted). In other embodiments, the second electronic processor <b>745</b>, when executing the management service <b>710</b>, may query the source database <b>410</b> to determine or check whether the source database <b>410</b> is in an unresponsive state (for example, the source database <b>410</b> is in an unresponsive state if the source database <b>410</b> is in a process hung state). The source database <b>410</b> is responsive when the source database <b>410</b> responds to communications sent via the communications network <b>420</b>. When the source database <b>410</b> is responsive, the second electronic processor <b>745</b> retrieves the backup metadata from the table <b>455</b> included in the source database <b>410</b> (block <b>815</b>). The second electronic processor <b>745</b> sends the backup metadata, a restore flag, or both to an API or a communication layer between the control ring <b>730</b> and the tenant ring <b>735</b> (for example, a WinFab <b>740</b> service fabric) (block <b>817</b>). When a third electronic processor (for example, the third electronic processor <b>750</b>) executing a restore service <b>720</b> detects the presence of the backup metadata, a restore flag, or both in the WinFab <b>740</b> service fabric, the third electronic processor <b>750</b> executing the restore service <b>720</b> reads the backup metadata from the WinFab <b>740</b> service fabric and generates a restore plan based on the backup metadata. The target database <b>715</b> receives the restore plan based on the backup metadata from the third electronic processor <b>750</b> executing a restore service <b>720</b> (block <b>825</b>). The restore plan may include which backups need to be retrieved from the cloud storage system <b>205</b> in order to restore the target database <b>715</b> to the previous state of the source database <b>410</b>. In some embodiments, each backup taken of the source database <b>410</b> may not include all of the data <b>450</b> included in the source database <b>410</b>. For example, a backup may only preserve the portions of the data <b>450</b> included in the source database <b>410</b> that have been changed since the most recent backup. Therefore, data preserved during multiple backups may need to be retrieved in order to restore the target database <b>715</b> to its previous state. Based on the restore plan, the target database <b>715</b> retrieves the backup of the data (the backup data <b>465</b>) from the cloud storage system <b>205</b> (block <b>830</b>).</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a graphical illustration of the method <b>800</b> that visually illustrates the differences between existing systems and methods for performing database restores and the solution described herein. Unlike existing systems and methods, the system and method illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> and <figref idref="DRAWINGS">FIG. <b>9</b></figref> include the steps of checking to see whether the source database <b>410</b> is responsive and, when the source database <b>410</b> is responsive, retrieving the backup data from the table <b>455</b> included in the source database <b>410</b> (steps &#x201c;2. Check source db state&#x201d; and &#x201c;3. Get filtered backup metadata from the Source User DB&#x201d; in <figref idref="DRAWINGS">FIG. <b>9</b></figref>). However, unlike the systems and methods illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> and <figref idref="DRAWINGS">FIG. <b>9</b></figref>, existing systems and methods include the step of reading backup metadata from the cloud storage system <b>205</b> (for example, step &#x201c;4. reads metadata from cloud storage system, generates plan, run restore-headeronly if needed&#x201d; in <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example system and method for restoring a target database to a previous state when the source database <b>410</b> is unresponsive. In this case, when the second electronic processor <b>745</b> determines whether the source database <b>410</b> is responsive at block <b>810</b>, the second electronic processor <b>745</b> receives an indication that the source database <b>410</b> is not responsive. When the second electronic processor <b>745</b> determines that the source database <b>410</b> is unresponsive, the second electronic processor <b>745</b> does not query the source database <b>410</b> for metadata. Instead, a third electronic processor <b>750</b>, executing the restore service <b>720</b>, triggers a restore program (for example, &#x201c;restore-headeronly&#x201d;) included in the cloud storage system <b>205</b>. The restore program has the capability to restore unavailable or lost metadata.</p><p id="p-0039" num="0038">When executing the backup service <b>430</b> the fourth electronic processor <b>425</b> is configured to periodically delete backup data and backup metadata. For example, the fourth electronic processor <b>425</b> may be configured to delete backup data and backup metadata once every twenty-four hours. The fourth electronic processor <b>425</b> begins deleting backup data and backup metadata by retrieving backup metadata from the source database <b>410</b>. Based on the backup metadata, the fourth electronic processor <b>425</b> determines a subset of backup metadata to delete from the table <b>455</b> and a subset of the backup data <b>465</b> to delete from the cloud storage system <b>205</b>. For example, the fourth electronic processor <b>425</b> may be configured to delete backup data and backup metadata saved or written over a month ago and may use the backup metadata to determine backup data and backup metadata that was stored over a month ago. The fourth electronic processor <b>425</b> deletes the subset of backup data from the cloud storage system <b>205</b> and deletes the subset of backup metadata from the table <b>455</b> in the source database <b>410</b>. <figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates the above described method as system and method <b>1100</b> and the traditional data backup and backup metadata deletion method as system and method <b>1105</b>. As can be seen, by comparing the system and method <b>1100</b> to the system and method <b>1105</b> the system and method <b>1100</b> does not require reading backup metadata from the cloud storage system <b>205</b> while the traditional system and method <b>1105</b> does.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates systems and methods for detecting and restoring missing backup metadata. System and method <b>1200</b> follow the traditional method of detecting and restoring missing backup metadata. In the traditional method, the fourth electronic processor <b>425</b> retrieves backup metadata associated with the two most recent backup chains. A backup chain is a sequence in which back up data is backed up from the source database <b>410</b>. The fourth electronic processor <b>425</b> determines whether any metadata is missing from the retrieved backup metadata. If metadata is missing from the metadata chains the fourth electronic processor <b>425</b> executes a restore program to restore the metadata. The system and method <b>1205</b> illustrate detecting and restoring missing backup metadata using table <b>455</b> described herein. Unlike in the traditional method, when system and method <b>1205</b> is employed backup metadata does not need to be retrieved from the cloud storage system <b>205</b>. Instead backup metadata can be retrieved from the table <b>455</b> in the source database <b>410</b>.</p><p id="p-0041" num="0040">In some embodiments, to ensure that there is enough space in the first memory <b>440</b> of the source database <b>410</b> for the backup metadata, a predetermined amount of the first memory <b>440</b> (for example, one gigabyte) is initially filled with dummy data. When backup metadata needs to be written to the first memory <b>440</b>, the at least a portion of the dummy data is deleted and replaced with backup metadata.</p><p id="p-0042" num="0041">The systems and methods described herein also allow for easier billing of customers or users. Users are billed based on the amount of cloud storage space their backup data occupies in the cloud storage system <b>205</b>. <figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates the differences between billing users in a traditional system and billing users using the system <b>400</b> described herein. Diagram <b>1300</b> illustrates a method for billing users in a traditional database system. To determine the amount of cloud storage space that a user's backup data is occupying, the traditional system requires backup data to be read from a cloud storage system <b>205</b> and a write to a table (for example, an Azure&#xae; table). These operations are expensive. In contrast, diagram <b>1305</b> illustrates a method for billing users using the systems and methods described herein. Billing using the table <b>455</b> included in the source database <b>410</b> does not require these expensive operations to be performed because the amount of cloud storage space the backup data is occupying in the cloud storage system <b>205</b> can be retrieved directly from the table <b>455</b>.</p><p id="p-0043" num="0042">Thus, embodiments described herein provide, among other things, methods and systems for a system and method for limiting the number of reads and writes required to be made to a cloud storage system during database back up and restoration by persistently storing metadata associated with a backup of data in a source database.</p><p id="p-0044" num="0043">Various features and advantages of some embodiments are set forth in the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system for persistently storing metadata associated with a backup of data in a source database, the system comprising:<claim-text>a cloud storage system; and</claim-text><claim-text>a source database comprising<claim-text>a memory including data; and</claim-text><claim-text>a first electronic processor configured to<claim-text>write a backup of the data included in the memory of the source database to the cloud storage system; and</claim-text><claim-text>write metadata associated with the backup of the data (&#x201c;backup metadata&#x201d;) to a table included in the memory of the source database, wherein the backup metadata is used to retrieve the data when a target database is restored to a previous state of the source database.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first electronic processor is configured to<claim-text>receive a request to backup the data included in the source database;</claim-text><claim-text>in response to receiving the request to backup the data included in the source database,<claim-text>write the backup of the data included in the memory of the source database to the cloud storage system; and</claim-text><claim-text>write the backup metadata to the table included in the memory of the source database; and</claim-text></claim-text><claim-text>when the backup is complete, generate a notification of completion of the backup of the source database.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, the system comprising<claim-text>the target database; and</claim-text><claim-text>a second electronic processor configured to<claim-text>receive a request to restore the target database to the previous state;</claim-text><claim-text>determine whether the source database is responsive;</claim-text><claim-text>when the source database is responsive, retrieve the backup metadata from the table included in the source database; and</claim-text><claim-text>send the backup metadata to an API; and</claim-text></claim-text><claim-text>wherein the target database is configured to<claim-text>receive a restore plan based on the backup metadata from a third electronic processor executing a restore service; and</claim-text><claim-text>based on the restore plan, retrieve the backup of the data from the cloud storage system.</claim-text></claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the system includes a third electronic processor and the third electronic processor is configured to, when the source database is unresponsive, retrieve and execute a restore program from the cloud storage system.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the table is an internal table that is not accessible by a user.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first electronic processor is configured to<claim-text>fill a predetermined amount of the memory of the source database with dummy data; and</claim-text><claim-text>when the backup metadata is written to the memory of the source database, replace at least a portion of the dummy data with the backup metadata.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the system includes a fourth electronic processor configured to periodically delete a subset of backup data and a subset of backup metadata by<claim-text>retrieving backup metadata from the source database;</claim-text><claim-text>based on the retrieved backup metadata, determining the subset of backup metadata to delete from the table and the subset of backup data to delete from the cloud storage system; and</claim-text><claim-text>deleting the subset of backup data from the cloud storage system and the subset of backup metadata from the table in the source database.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the fourth electronic processor is configured to detect and restore missing backup metadata by<claim-text>retrieving backup metadata associated with a most recent backup chain from the table in the source database;</claim-text><claim-text>determining whether backup metadata is missing from the retrieved backup metadata; and</claim-text><claim-text>when backup metadata is missing from the retrieved backup metadata, executing a restore program to restore the missing backup metadata.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A method of persistently storing metadata associated with a backup of data in a source database, the method comprising:<claim-text>sending, with a first electronic processor, a backup of data included in memory of a source database to a cloud storage system; and</claim-text><claim-text>sending, with the first electronic processor, metadata associated with the backup of the data (&#x201c;backup metadata&#x201d;) to a table included in the memory of the source database, wherein the backup metadata is used to retrieve the data when a target database is restored to a previous state of the source database.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, the method further comprising<claim-text>receiving, with the first electronic processor, a request to backup the data included in the source database;</claim-text><claim-text>in response to receiving the request to backup the data included in the source database,<claim-text>sending the backup of the data included in the memory of the source database to the cloud storage system; and</claim-text><claim-text>sending the backup metadata to the table included in the memory of the source database; and</claim-text></claim-text><claim-text>when the backup is complete, generating a notification of completion of the backup of the source database.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, the method comprising<claim-text>receiving, with a second electronic processor, a request to restore the target database to the previous state;</claim-text><claim-text>determining whether the source database is responsive;</claim-text><claim-text>when the source database is responsive, retrieving the backup metadata from the table included in the source database;</claim-text><claim-text>sending, with the second electronic processor, the backup metadata to an API;</claim-text><claim-text>receiving, with the target database a restore plan based on the backup metadata from a third electronic processor executing a restore service; and</claim-text><claim-text>based on the restore plan, retrieving, with the target database, the backup of the data from the cloud storage system.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, the method further comprising<claim-text>when the source database is unresponsive, retrieving and executing, with a third electronic processor, a restore program from the cloud storage system.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the table is an internal table that is not accessible by a user.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, the method further comprising<claim-text>filling a predetermined amount of the memory of the source database with dummy data; and</claim-text><claim-text>when the backup metadata is sent to the memory of the source database, replacing at least a portion of the dummy data with the backup metadata.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the method further comprising<claim-text>periodically deleting, with a fourth electronic processor, a subset of backup data and a subset of backup metadata by<claim-text>retrieving backup metadata from the source database;</claim-text><claim-text>based on the retrieved backup metadata, determining the subset of backup metadata to delete from the table and the subset of backup data to delete from the cloud storage system; and</claim-text><claim-text>deleting the subset of backup data from the cloud storage system and the subset of backup metadata from the table in the source database.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, the method further comprising<claim-text>retrieving backup metadata associated with a most recent backup chain from the table in the source database;</claim-text><claim-text>determining whether backup metadata is missing from the retrieved backup metadata; and</claim-text><claim-text>when backup metadata is missing from the retrieved backup metadata, executing a restore program to restore the missing backup metadata.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A non-transitory, computer-readable medium storing instructions that, when executed by an electronic processor, perform a set of functions, the set of functions comprising:<claim-text>writing, with a first electronic processor, a backup of data included in memory of a source database to a cloud storage system; and</claim-text><claim-text>writing, with the first electronic processor, metadata associated with the backup of the data to a table included in the memory of the source database, wherein the backup metadata is used to retrieve the data when a target database is restored to a previous state of the source database.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory, computer-readable medium according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, the set of functions further comprising<claim-text>receiving, with the first electronic processor, a request to backup the data included in the source database;</claim-text><claim-text>in response to receiving the request to backup the data included in the source database,<claim-text>writing the backup of the data included in the memory of the source database to the cloud storage system; and</claim-text><claim-text>writing the backup metadata to the table included in the memory of the source database; and</claim-text></claim-text><claim-text>when the backup is complete, generating a notification of completion of the backup of the source database.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory, computer-readable medium according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the table is an internal table that is not accessible by a user.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory, computer-readable medium according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, the set of functions further comprising<claim-text>fill a predetermined amount of the memory of the source database with dummy data; and</claim-text><claim-text>when the backup metadata is written to the memory of the source database, replacing at least a portion of the dummy data with the backup metadata.</claim-text></claim-text></claim></claims></us-patent-application>