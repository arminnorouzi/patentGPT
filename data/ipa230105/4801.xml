<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004802A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004802</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17930874</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>B</section><class>25</class><subclass>J</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>B</section><class>25</class><subclass>J</subclass><main-group>9</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>B</section><class>25</class><subclass>J</subclass><main-group>9</main-group><subgroup>0003</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>B</section><class>25</class><subclass>J</subclass><main-group>9</main-group><subgroup>1671</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Sharing Learned Information Among Robots</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15855329</doc-number><date>20171227</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11475291</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17930874</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>X Development LLC</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Rajkumar</last-name><first-name>Nareshkumar</first-name><address><city>Cupertino</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Leger</last-name><first-name>Patrick</first-name><address><city>Belmont</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Hudson</last-name><first-name>Nicolas</first-name><address><city>San Mateo</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Shankar</last-name><first-name>Krishna</first-name><address><city>Los Altos</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Hessmer</last-name><first-name>Rainer</first-name><address><city>Los Gatos</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods, systems, and apparatus, including computer programs encoded on computer storage media, for sharing learned information among robots. In some implementations, a robot obtains sensor data indicating characteristics of an object. The robot determines a classification for the object and generates an embedding for the object using a machine learning model stored by the robot. The robot stores the generated embedding and data indicating the classification for the object. The robot sends the generated embedding and the data indicating the classification to a server system. The robot receives, from the server system, an embedding generated by a second robot and a corresponding classification. The robot stores the received embedding and the corresponding classification in the local cache of the robot. The robot may then use the information in the cache to identify objects.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="113.79mm" wi="158.75mm" file="US20230004802A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="236.64mm" wi="170.26mm" orientation="landscape" file="US20230004802A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="224.28mm" wi="165.02mm" orientation="landscape" file="US20230004802A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="236.22mm" wi="170.26mm" orientation="landscape" file="US20230004802A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="233.43mm" wi="170.77mm" orientation="landscape" file="US20230004802A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="226.31mm" wi="164.34mm" orientation="landscape" file="US20230004802A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="223.44mm" wi="150.62mm" file="US20230004802A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="234.02mm" wi="164.93mm" orientation="landscape" file="US20230004802A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="233.76mm" wi="169.16mm" orientation="landscape" file="US20230004802A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="238.17mm" wi="171.28mm" orientation="landscape" file="US20230004802A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="220.05mm" wi="145.20mm" file="US20230004802A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="224.71mm" wi="145.46mm" file="US20230004802A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="223.77mm" wi="170.10mm" orientation="landscape" file="US20230004802A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="232.49mm" wi="174.50mm" file="US20230004802A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="219.71mm" wi="135.30mm" file="US20230004802A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED DISCLOSURE</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 15/855,329, filed on Dec. 27, 2017, which is incorporated herein by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">This specification relates generally to sharing learned information among robots.</p><p id="p-0004" num="0003">Robots can be configured to perform a variety of tasks. Robots generally need some form of perception to complete a task, such as the recognition or identification of an object. Robots may encounter objects and situations that their programming or training does not prepare them to handle appropriately. For example, although a robot may be able to recognize many different types of objects, it is likely that the robot will likely encounter new objects that it does not recognize.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">In some implementations, robots can perform processes to learn new information and new abilities from situations they encounter. Techniques disclosed herein can enable a robot to incorporate new information so that the robot learns almost instantaneously from user feedback or other sources of information. For example, a robot can have a local cache where certain types of learned information is stored. When the robot acquires new information, such as the classification for a previously unknown object, the robot can store a representation of the new information in the cache to make the information immediately available for the robot to use. This technique can allow near-instantaneous learning by a robot since the computational demands for incorporating new information, e.g., generating the representation and saving it in a cache accessed by robot systems, are extremely low. For example, the representation may have already been computed as part of the continuous onboard inference process of the robot. As a result, when a user provides a robot with a classification for a previously unknown object, the robot may store the information and apply it to current and future tasks with minimal delay.</p><p id="p-0006" num="0005">In addition, individual robots can share learned information with other robots, allowing each robot in a fleet of robots to quickly acquire the combined learning from all of the robots in the fleet. Learned information can be distributed frequently to the robots, and without re-training or modifying machine learning models used by the robots. For example, each robot in a fleet may communicate with a server system to upload representations of recently learned information, such as classifications of objects that the robots observed and previously could not identify but have since learned to classify appropriately. The server system collects the representations, processes them, and distributes the combined set of representations to the robots in the fleet. This process of learning, uploading, and distributing representations of information learned by robots can be performed on an ongoing basis, for example, periodically on an hourly, daily, or weekly basis, or on a continuous basis with representations being distributed among robots as soon as they are learned. The process of sharing representations among robots allows fleet-wide learning in a rapid and efficient manner. In particular, newly learned information may be distributed and used by the robots in much less time than it would take to update a machine learning model to reflect the same information.</p><p id="p-0007" num="0006">The learned information collected from multiple robots can be used to re-train or update machine learning models, which can then be distributed to each of the robots. For example, the server can periodically update a machine learning model used by the robots, at an interval significantly longer than the interval for sharing learning representations among robots. For example, if representations are shared daily among robots, the machine learning model may be updated each week, every two weeks, or each month. The updated machine learning model can incorporate the combined set of robot learning that occurred across the fleet over the previous interval, e.g., the last week or month.</p><p id="p-0008" num="0007">In some implementations, the server can transmit the updated machine learning model to the fleet at a weekly or a fortnightly basis. The server can also provide update learned information more frequently, as embeddings or in other representations, each time a new set of robot learning is received by the server. Robots in the fleet can store this learned information in a cache and use it alongside the most recent version of the machine learning model. The receipt of new information for the cache can fine-tune the behavior of an overall perception system for each robot in the fleet on a daily basis or each time a new set of robot learning is provided to the robot. Thus, robots can use the updated machine learning model to incorporate the learning from the fleet, and can clear their local caches since the cached information has been incorporated into the model.</p><p id="p-0009" num="0008">In general, many aspects of robot's knowledge and abilities may be provided by trained machine learning models, such as neural networks. Although these models are powerful and often efficient to run, training or updating machine learning models is often a time-consuming and computationally-intensive process, and the training process frequently requires large sets of training data to be effective. As an example, neural networks are often trained with an iterative process that uses many training examples to determine appropriate neural network parameters. In some cases, a complex neural network model, such as one configured to identify thousands of different types of items, may require days or even weeks to train, even when using distributed computing techniques. In many instances, individual robots simply do not have the battery power or computational power to update the training of a machine learning model in a reasonable amount of time, much less in real time. If a user provides a robot with the classification of a new object, it would be ideal for the robot to retain and use that classification going forward without delay, especially since the user may subsequently issue commands to the robot regarding the object.</p><p id="p-0010" num="0009">As discussed above and further below, the present techniques may enable a robot to encode learned information, such as object characteristics and a corresponding classification, as a discrete representation in a cache of the robot. The robot can be designed to use the cache in its perception processing or other processing, so that saving the representation allows the robot to immediately apply the new information to tasks. Thus, individual robots may be able to learn and expand their capabilities in real time. In addition, the representations can be shared among robots to allow all robots in a fleet to quickly and efficiently acquire and use the new information. In the meantime, while the robots use the shared representations and thus already benefit from the collective learning of the fleet, a remote computing system can update the machine learning models based on the newly learned information for the fleet. From time to time, the computing system distributes updated models to the robots, where the updated models incorporate the learning compiled across the fleet over a period of time. Nevertheless, due to the ongoing sharing of representations, the robots can apply the learned information long before it has been incorporated into a model update.</p><p id="p-0011" num="0010">In some implementations, the representation of information learned by a robot can be an embedding generated using a machine learning model. For example, the embedding may represent information derived from an output layer of a neural network model or from a hidden layer of the neural network model. When a set of input information, such as sensor data describing an object, is provided to the machine learning model, the processing of the machine learning model may encode the information in a form that is used directly as an embedding, or is further processed to generate the embedding. As a result, the embedding may be a compressed representation of an object or other observation, where the specific values of the embedding may depend on the structure and training state of the machine learning model used to generate the embedding.</p><p id="p-0012" num="0011">In one general aspect, a method includes: obtaining, by a robot, sensor data indicating characteristics of an object; determining, by the robot, a classification for the object; generating, by the robot, a first embedding for the object using a machine learning model stored by the robot; storing, by the robot, the generated first embedding and data indicating the classification for the object in a local cache of the robot; sending, by the robot, the generated first embedding and the data indicating the classification to a server system over a communication network; receiving, by the robot, a second embedding and a corresponding classification from the server system over the communication network, where the received second embedding is generated by a second robot and corresponds to a second object; and storing, by the robot, the received second embedding and a corresponding classification in the local cache of the robot.</p><p id="p-0013" num="0012">The foregoing and other embodiments can each optionally include one or more of the following features, alone or in combination. For example, one embodiment includes all the following features in combination.</p><p id="p-0014" num="0013">In some implementations, the method includes, using, by the robot, the first embedding or the second embedding in the local cache to recognize one or more objects in an environment of the robot.</p><p id="p-0015" num="0014">In some implementations, the method further includes generating, by the robot, sensor data describing a particular object in the environment of the robot.</p><p id="p-0016" num="0015">In some implementations, the method includes generating, by the robot, an embedding for the particular object using the machine learning model and the sensor data describing the particular object. The method includes comparing, by the robot, the embedding for the particular object with the first embedding and the second embedding.</p><p id="p-0017" num="0016">In some implementations, the method includes assigning, by the robot, a classification for the particular object based on the comparison of the embedding for the particular object with the first embedding and the second embedding.</p><p id="p-0018" num="0017">In some implementations, the method includes receiving, by the robot, a second machine learning model from the server system over the communication network.</p><p id="p-0019" num="0018">In some implementations, the method includes using, by the robot, the second machine learning model to recognize one or more objects.</p><p id="p-0020" num="0019">In some implementations, the method includes removing, from the local cache of the robot, embeddings generated using the first machine learning model.</p><p id="p-0021" num="0020">In some implementations, the method includes designating the generated embedding for sharing with other robots.</p><p id="p-0022" num="0021">In some implementations, the method includes sending the generated embedding with a label or metadata designating that the embedding should be shared or sending the generated embedding using an application programming interface for sharing embeddings.</p><p id="p-0023" num="0022">In some implementations, the method further includes storing, by the robot, the sensor data used to generate input to the machine learning model used to generate the embedding.</p><p id="p-0024" num="0023">In some implementations, the method includes generating the first embedding based on processing feature data, extracted from the sensor data for the object, using the machine learning model.</p><p id="p-0025" num="0024">In some implementations, the machine learning model is a neural network model, and the first embedding is derived from output at an output layer of the neural network mode.</p><p id="p-0026" num="0025">In some implementations, the machine learning model is a neural network model, the first embedding is derived from data indicating activations at a hidden layer of the neural network model.</p><p id="p-0027" num="0026">In another general aspect, a method includes: receiving, by the one or more computers, object classification examples from a plurality of robots, where each object classification example includes (i) an embedding that a robot generated using a machine learning model, and (ii) an object classification corresponding to the embedding; evaluating, by the one or more computers, the object classification examples based on a similarity of the embeddings of the received object classification examples with other embeddings; selecting, by the one or more computers, a subset of the object classification examples based on the evaluation of the quality of the embeddings; and distributing, by the one or more computers, the subset of the object classification examples to the robots in the plurality of robots.</p><p id="p-0028" num="0027">Implementations may include one or more of the following features. For example, in some implementations, for each of the object classification examples, the embedding is generated by a robot based on sensor data generated by the robot describing an object detected by sensors of the robot, and the corresponding object classification for the embedding indicates a classification for the detected object. The embeddings of the respective classification examples include embeddings generated by different robots that each use a particular machine learning model having a particular training state to generate the embeddings. Distributing the subset of the classification examples includes distributing the classifications to multiple robots that each store a copy of the same particular machine learning model having the particular training state.</p><p id="p-0029" num="0028">In some implementations, distributing the subset of the classification examples includes transmitting, to each of the robots in the plurality of robots, the classification examples in the subset and designating the transmitted classification examples to be stored in a local cache of each of the robots.</p><p id="p-0030" num="0029">In some implementations, distributing the subset of the classification examples includes synchronizing local caches of the robots in the plurality of robots so that each of the plurality of robots stores each of the classification examples in the selected subset in a local cache of the robot.</p><p id="p-0031" num="0030">In some implementations, the method includes: training a second machine learning model using the selected subset of the classification examples and distributing the trained machine learning model to the robots in the plurality of robots.</p><p id="p-0032" num="0031">In some implementations, training the second machine learning model includes generating an updated version of the machine learning model used to generate the embeddings. Distributing the trained machine learning model includes distributing the updated version of the machine learning model as a replacement to a machine learning model stored at each of the robots in the plurality of robots.</p><p id="p-0033" num="0032">In some implementations, the method includes providing, to each robot in the plurality of robots, an instruction to remove the distributed classification examples from a local cache of the robot.</p><p id="p-0034" num="0033">In some implementations, the method includes receiving, for each of the object classification examples, sensor data that describes the object corresponding to the object classification example. Training the second machine learning model includes training the second machine learning model based on the received sensor data received for the object classification examples.</p><p id="p-0035" num="0034">In some implementations, the method includes receiving, for each of the object classification examples, sensor data, generated by a robot, that describes the object corresponding to the object classification example. Evaluating the object classification examples includes evaluating the quality of a classification example based on the received sensor data.</p><p id="p-0036" num="0035">In some implementations, evaluating the object classification examples includes determining, for a particular embedding of a particular object classification example, a level of similarity of the particular embedding with respect to one or more other embeddings having a same object classification as the particular object classification example. Selecting the subset of the object classification examples includes selecting the particular object classification example to be included in the subset based on determining that the level of similarity satisfies a threshold.</p><p id="p-0037" num="0036">In some implementations, evaluating the object classification examples includes determining, for a particular embedding of a particular object classification example, a level of similarity of the particular embedding with respect to one or more other embeddings having a different object classification from the particular object classification example. Selecting the subset of the object classification examples includes excluding the particular object classification example from subset based on determining that the level of similarity satisfies a threshold.</p><p id="p-0038" num="0037">In some implementations, evaluating the object classification examples includes determining, for a particular embedding of a particular object classification example, a level of similarity of the particular embedding with respect to one or more other embeddings, where the level of similarity indicates a distance between the particular embedding and the one or more other embeddings in a vector space.</p><p id="p-0039" num="0038">In some implementations, evaluating the object classification examples includes determining, for a particular embedding of a particular object classification example, a quality score representing a likelihood that the object classification matches the object corresponding to the particular object classification example. Selecting the subset of the object classification examples includes selecting the particular object classification example to include in the subset based on the quality score satisfying a threshold.</p><p id="p-0040" num="0039">In some implementations, evaluating the object classification examples includes determining, for a particular embedding of a particular object classification example, a quality score based on: analyzing a level quality of sensor data provided by the plurality of robots; analyzing how the object classification examples adjust an overall accuracy of the machine learning model; and analyzing previous levels of quality of other object classification examples provided by the plurality of robots.</p><p id="p-0041" num="0040">In some implementations, analyzing the level of quality of the sensor data provided by the plurality of robots further includes: determining a match between the sensor data and the embedding by providing the sensor data to the machine learning model; comparing an output embedding from the machine learning model to the embedding; comparing an output classification label from the machine learning model to the object classification corresponding to the embedding; and in response to determining that the output classification label from the machine learning model does not match the object classification corresponding to the embedding, retraining the machine learning model to detect the embedding and produce a correct classification label that matches the object classification.</p><p id="p-0042" num="0041">In another general aspect, a method includes: storing, by a robot, first embeddings generated using a first machine learning model, where the robot stores the first embeddings in a cache of the robot, where the first embeddings include one or more first private embeddings that are not shared with other robots; receiving, by the robot, a second machine learning model from a server system over a communication network; generating, by the robot, a second private embedding for each of the one or more first private embeddings in the cache, where each of the second private embeddings is generated using the second machine learning model; adding, by the robot, the second private embeddings to the cache of the robot; and removing, by the robot, the one or more first private embeddings from the cache of the robot.</p><p id="p-0043" num="0042">Implementations may include one or more of the following features. For example, in some implementations, the first embeddings include one or more public embeddings that are shared with a server system. The method includes: determining that a particular embedding is a public embedding; and after receiving the second machine learning model, removing the particular embedding from the cache of the robot based on determining that the particular embedding is a public embedding.</p><p id="p-0044" num="0043">In some implementations, the method includes storing, by the robot, sensor data used to generate the one or more first private embeddings. Generating the second private embedding for each of the one or more first private embeddings in the cache includes generating, using the second machine learning model, each of the second private embeddings from the stored sensor data used to generate the one or more first private embeddings. The method further includes storing the second private embeddings in the cache of the robot.</p><p id="p-0045" num="0044">In some implementations, generating the second private embeddings from the stored sensor data includes generating a second private embedding for an object by inputting, to the second machine learning model, feature values derived from the sensor data used to generate the first private embedding for the object.</p><p id="p-0046" num="0045">In some implementations, the method includes: accessing, by the robot, metadata associated with a particular embedding of the first embeddings; and determining that the particular embedding is a private embedding that is not shared with the server system by analyzing the metadata associated with the particular embedding against one or more sharing rules that are stored by the robot.</p><p id="p-0047" num="0046">In some implementations, the first embeddings include one or more first public embeddings in addition to the one or more first private embeddings. The method includes providing, by the robot, the one or more first public embeddings to the server system and not providing the one or more first private embeddings to the server system.</p><p id="p-0048" num="0047">In some implementations, the method includes: determining, for each of the first embeddings, whether to store sensor data used to generate the first embedding, where the determination whether to store sensor data used to generate a first embedding is based on whether the first embedding is private or public; and based on the determining, storing, by the robot, sensor data for each of the one or more first private embeddings, and not storing sensor data for the one or more first public embeddings.</p><p id="p-0049" num="0048">In some implementations, the first embeddings generated by a first machine learning model include one or more received embeddings that were received by the robot from the server system over a communication network. The method further includes determining that a particular embedding of the first embeddings is one of the received embeddings; and after receiving the second machine learning model, removing the particular embedding from the cache based on determining that the particular embedding is one of the received embeddings.</p><p id="p-0050" num="0049">In some implementations, the cache is a local cache stored on a data storage device of the robot.</p><p id="p-0051" num="0050">In some implementations, the first machine learning model is a first neural network model, and the second machine learning model is a second neural network model.</p><p id="p-0052" num="0051">In some implementations, the method includes: obtaining, by the robot, sensor data describing an object; generating, by the robot, an embedding for the object based on the sensor data; determining, by the robot, whether to designate the embedding as a private embedding or a public embedding; and storing, by the robot, the embedding and data designating whether the embedding is a private embedding or a public embedding.</p><p id="p-0053" num="0052">In some implementations, determining whether to designate the embedding as a private embedding or a public embedding includes: determining a location of the object or the robot; determining that the location is within a predetermined area for which information is not shared; and based on determining that the location is within the predetermined area, designating the embedding as a private embedding.</p><p id="p-0054" num="0053">In some implementations, determining whether to designate the embedding as a private embedding or a public embedding includes: determining an object type for the object observed by the robot; determining that the object type is one of a predetermined set of object types; and determining whether to designate the embedding as a private embedding based on determining that the object type is one of the predetermined set of object types.</p><p id="p-0055" num="0054">In some implementations, determining whether to designate the embedding as a private embedding or a public embedding includes: accessing a sharing rule indicating one or more restrictions on the sharing of information obtained by the robot, where the one or more restrictions limit sharing of information (i) observed by the robot at a time or place, or (ii) describing objects having an object type or object characteristic; determining, based on the sensor data for the object, that the sharing rules restrict sharing of information for the object described by the sharing data; and based on determining that the sharing rules restrict sharing of information for the object, designating the embedding for the object as a private embedding.</p><p id="p-0056" num="0055">In some implementations, the method includes receiving user input indicating one or more criteria comprising a time, place, object type, or object characteristic for which sharing of information is restricted; and storing a sharing rule that designates embeddings for objects meeting the one or more criteria as private embeddings. Determining whether to designate the embedding as a private embedding or a public embedding includes determining whether the embedding satisfies the one or more criteria.</p><p id="p-0057" num="0056">Other embodiments of these and other aspects of the disclosure include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices. A system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions. One or more computer programs can be so configured by virtue having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.</p><p id="p-0058" num="0057">The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram that illustrates an example of a system for sharing learned information among robots.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram that illustrates an example of a system for training a robot to recognize an object.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram that illustrates an example of a robot recognizing an object.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram that illustrates an example of another system for sharing learned information among robots.</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram that illustrates an example of a system for providing updated machine learning models to robots.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram that illustrates an example of a process for sharing learned information among robots.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram that illustrates an example of a system for selectively sharing learned information among robots.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram that illustrates an example of a system for assessing the quality of information learned by robots.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram that illustrates an example of a system for testing a machine learning model.</p><p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flowchart that illustrates an example of a process for assessing and sharing information learned by robots.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram that illustrates an example system for enhancing robot learning.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram that illustrates an example system for selectively sharing information among a fleet of robots.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram that illustrates an example system for regeneration and storage of embeddings by a robot.</p><p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flow chart that illustrates a process for enhancing robot learning.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0073" num="0072">Like reference numbers and designations in the various drawings indicate like elements.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram that illustrates an example of a system <b>100</b> for sharing learned information among robots. The system <b>100</b> includes a robots <b>104</b>A-<b>104</b>D, a client device <b>108</b>, a network <b>110</b>, a server system <b>112</b>, and a database <b>114</b>. The server system <b>112</b> may include one or more computers connected locally or over a network, where the network may include one or more public or private networks and may include the Internet. The example shows a human user <b>106</b> who interacts with the robots <b>104</b>A-<b>104</b>D. The example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows the robots <b>104</b>A-<b>104</b>D in a house <b>102</b>, but the robots <b>104</b>A-<b>104</b>D may be alternatively located in different houses or in other types of buildings or areas. <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates various operations in stages (A) to (E) which can be performed in the sequence indicated or in another sequence.</p><p id="p-0075" num="0074">In general, a robot refers to a programmable machine that can be capable of performing a series of actions at least partially autonomously. For example, a robot may be capable of carrying out tasks that involve interacting with or changing the physical surroundings of the robot (e.g., arranging or manipulating objects). Besides responding to inputs and commands from humans, robots may initiate actions of their own accord, based on their programming and the conditions they detect. A robot may include components for interacting with (e.g., physically manipulating) objects in its environment. For example, a robot may include an arm with actuator to grasp or otherwise move objects. For example, the actuator may be a robotic hand with finger-like elements to grasp objects. A robot can also include components to allow locomotion. Examples include motorized elements, such as wheels, legs, continuous tracks, and so on, to allow the robot to travel from one location to another. The robot may include navigation components allowing it to set a course and travel along a self-directed path. The robot may include sensory capabilities allowing the robot to perceive its surrounding environment. The robot can include body components such as a chassis and other connecting components. The body components may allow various types of motion of robot components relative to each other, such as rotating, swiveling, shifting, etc. Robots can include various other components, such as batteries to power the robot, transmitters, receivers, sensors, data processors, and memory to store programmed instructions for the robot.</p><p id="p-0076" num="0075">In the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a fleet of robots uses distributed learning in order to learn to identify new objects. The robot fleet does not require that every robot in the fleet to be trained individually to identify new objects. Rather, the robot fleet employs a distributed learning technique, where one robot can learn to identify an object and produce an embedding that corresponds to the object. That robot can share the embedding with the other robots over the communication network in a manner that allows all robots in the fleet to identify the newly identified object. Providing the embedding and corresponding classification information allows robots that receive the data to instantly learn to classify the object. The technique can use machine learning models to produce an embedding describing the characteristics of the identified object. This may be beneficial because user need only train one robot to identify an object rather than each robot. In addition, sharing embeddings among robots preserves processing resources by allowing robots to learn without having to retrain the machine learning model on each robot.</p><p id="p-0077" num="0076">Any of various types of machine learning models can be used. Examples include neural networks, maximum-entropy classifiers, decision trees, random forest classifiers, boost trees, logistic regression models, and reinforcement learning models. Machine learning models can be trained using supervised or unsupervised training. Machine learning models can have parameters learned or trained based on various different examples, which may come from a variety of sources.</p><p id="p-0078" num="0077">In some implementations, sharing can be performed to all robots in the fleet. Alternatively, sharing can be performed to robots within a particular organization. For example, robot <b>104</b>A may be associated with a house and robot <b>104</b>B may be associated with a factory. In addition, the sharing can be performed to robots in a particular domain. For example, robot <b>104</b>C may be a hospital robot and robot <b>104</b>D may be a hotel robot. In some implementations, sharing can be performed among specific groups of robots via access controlled lists managed by the server system <b>112</b>. In other words, the server system <b>112</b> may selectively share learned information only among robots that have certain commonalities, e.g., the same hardware model, the same role or responsibility, the same type of location, the same owner, the same group or fleet identifier, and so on.</p><p id="p-0079" num="0078">In some implementations, each robot in the robot fleet is located in a single location, such as a house <b>102</b> or a factory. In other implementations, the robots in the robot fleet are located in different locations or settings. For example, robot <b>104</b>A may be located at house <b>102</b>; robot <b>104</b>B may be located at a house across the street from house <b>102</b>; robot <b>104</b>C may be located at a grocery store; and, robot <b>104</b>D may be located at an airport. The robots located at different locations can communicate with one another through communication network <b>110</b>. The robots in a fleet may be represent a large group of robots distributed across many locations, such as all robots provided by a vendor, with the robots owned or used by many different users in different settings.</p><p id="p-0080" num="0079">In some implementations, robots in the robot fleet are programmed to assist humans in the home. For example, a human may issue an instructional command to a first robot to request for the retrieval of the human's cell phone. In response, the first robot can search through the home for the human's cell phone, identify the cell phone by distinguishing it from other household items, and return the cell phone to the human. While the robots may include object recognition models that enable the robots to recognize household items, the trained model may not be able to classify some types of objects. When object recognition models do not enable a robot to identify an object, a human user may train the first robot on characteristics of the object to allow the first robot to be able locate and return the object. Once the first robot has learned to identify an object, it can share the learned information with other robots. Then, if a user asks a second robot to retrieve the same object or the same type of object, the second robot may use the data received from the first robot to identify that object. This way, even if the second robot's perception models did not recognize the object and even if the second robot was never directly trained to recognize the object, the second robot can still recognize the object based on the shared learning from the first robot.</p><p id="p-0081" num="0080">The process of distributed learning among a robot fleet can be performed rapidly by sharing embeddings among the robots. An embedding may be a set of values, such as a vector, code, file, or other data, that represents characteristics of or a kind of fingerprint for an object. The embedding can be generated by providing data describing the object (e.g., features extracted from sensor data describing the object) to a perception model, such as a machine learning object recognition model. For example, the embedding may be a multi-dimensional vector or numbers representing an encoded form of characteristics of the object, where the encoding is based on processing of object feature data with a trained machine learning. A robot that encounters a new object and learns the correct classification shares the embedding for the object with the rest of the fleet, so that each robot does not need to be individually trained to identify the object. As a result, when a human trains a single robot to identify an object, the system enables the other robots to also be able to identify the object, due to receiving the corresponding embedding and classification information.</p><p id="p-0082" num="0081">For instance, a human may train the first robot to identify a coffee mug. The human can hold up the coffee mug in front of the first robot for the first robot's sensors to capture the characteristics of the coffee mug. The first robot can acquire images of the coffee mug from various angles to determine characteristics of the coffee mug. The first robot can then use these characteristics to produce an embedding that is stored in a local cache of the first robot along with data specifying that the embedding represents a coffee mug. Once the embedding and classification are stored, the first robot will be able to instantly use the new information to recognize the mug in the future. As a result, the next time a human requests the first robot to retrieve a coffee mug, the first robot can identify and retrieve the coffee mug by comparing the stored embedding for the coffee mug with embeddings that first robot produces from live sensor data describing the first robot's current environment.</p><p id="p-0083" num="0082">In general, the robot learning techniques allow for immediate local learning by a single robot, as well as sharing learning with other robots. A user can unlock object types from a master list of items, e.g., a knowledge graph, for use on a single robot. If, after unlocking an object type, the robot still cannot correctly identify an object, the user can teach the robot to classify an object. This process can involve showing the robot an example or &#x201c;instance&#x201d; of the object type. This learned example is referred to as a &#x201c;teaching&#x201d; and can be expressed as an embedding and corresponding classification. The teaching is immediately functioning on the robot that was taught. In addition, the robot periodically uploads the teachings it receives to a server. Other robots do the same. Teachings from all robots are aggregated by the server and existing models are fine-tuned. The fine-tuning occurs in two ways. First, sets of teachings, e.g., embeddings and classifications, can be pushed fleet-wide to all robots daily. All robots in the fleet can now detect newer objects based on teachings from individual robots. Second, fully retrained models, e.g., machine learning models re-trained on aggregated teachings from all robots, may be pushed to robots weekly or fortnightly.</p><p id="p-0084" num="0083">When a robot encounters an unknown object, a user may interact with the robot to unlock (e.g., make available for use) an object type from a master list of known object types. The user associates this unlocked object type to the unknown object that the robot encountered. The robot can now detect objects of this new unlocked object-type. Generally, robots may use a perception system that is designed to classify many types of objects. To reduce the risk of false positives, however, individual robots may be configured to initially detect only a subset of the total set of object types. For example, a master list of object types could include ten thousand or more different object types, while an individual robot may have a subset, e.g., only one hundred or one thousand of those object types, unlocked and available to readily detect. If the robot does not correctly detect an object, the user can be shown an interface to select the appropriate item from the master list, so it will be unlocked and made available for the robot to detect. This can allow users to expand the range of objects their robot can detect through a remote interface, such as an application or web page.</p><p id="p-0085" num="0084">In some instances, simply unlocking the object type may not be sufficient to allow the robot to reliably detect the object and avoid false positives, however. To improve performance, especially to correct errors by a robot, a user can identify an instance of the object type and enable sample images or other sensor data to be acquired. For example, the user can use his cell phone to capture images of the object from different sides, while tracking the camera positions for each image. As another example, after a user points out the object to the robot, and the robot acquires appropriate images. During teaching of a new object, the robot can ensure that the object is seen from all sides, at various distances, and under varying lighting conditions. To do this, the robot may need to: drive to different positions around the object to see different sides of the object, and with different illumination; pan and tilt the robot's head (e.g., sensor assembly) to capture the object in different parts of the image, which causes changes in the object's 2D appearance due to perspective distortion; pan and tilt the head to capture variation in color/brightness due to overall image exposure.</p><p id="p-0086" num="0085">Image snapshots and corresponding embeddings may be continually generated until the robot determines that the object can be identified again conclusively. Embeddings can be saved as new learned information when the information is sufficiently different from the existing performance of a model. For example, an embedding can be saved as a new learned example after the vector distance between the object's standard embedding vector and the embedding vector for the nearest taught example exceeds a threshold. At this point, a new embedding vector is added as a taught example, whether for a new object type not in the master list, for an object type that is locked, or to refine an error for an already unlocked object type.</p><p id="p-0087" num="0086">The user can indicate to the robot to stop identifying one or more previously learned object types from the provided list. The user may de-select any previously learned object types as shown in the provided list. For example, the user can issue a voice command, interact with the display of client device <b>108</b> that communicates with the robot, or interact with a screen of a robot to de-select any previously learned object types for non-identification. The user may de-select a previously learned object type because that object no longer exists in the house <b>102</b>. In addition, the user may want to de-select one or more previously learned object types because the house <b>102</b> includes a new version of the object type. For example, the user may de-select a shovel from the provided list because the user brought a newer shovel to the house <b>102</b>. The newer shovel includes a different looking head and handle shape that the robot may not be able to detect with information from the previously learned shovel object.</p><p id="p-0088" num="0087">In response to receiving a de-selection from the user, the robot can lock the de-selected object types. In some implementations, the robot may store in memory a locked list of the previously learned object types. The robot will not identify any of the objects listed in the locked list. For example, if the robot retrieves the older shovel model, the robot will not be able to identify the older shovel model as a shovel.</p><p id="p-0089" num="0088">In some implementations, the user can unlock a previously locked learned object type. The user can request the robot provide a list of the previously learned object types that include the locked and unlocked object types. The robot can provide the list to a local display or to the display of client device <b>108</b>. The user can select to unlock previously learned object types so that the robot can identify the previously learned object types. The user may seek to unlock previously learned object types when the user brings those object types to house <b>102</b>. For example, the user may determine the older shovel model performs better than the newer shovel model and as a result, discards the newer shovel model. In this case, the user unlocks the robots identification of the older shovel model in the provided list. The robot stores the updated list in memory.</p><p id="p-0090" num="0089">In some implementations, the selection and de-selection of previously learned object types applies only to a single robot. The robot's list of previously learned object types is local to each particular robot and each local list is not transmitted to the other robots. The list remains local so that each user can personalize each individual robot to detect and identify the object types that are most applicable for the setting of that robot. The personalization allows the user to be specific in instructing particular robots to identify particular items of interest.</p><p id="p-0091" num="0090">In addition, the first robot can transmit embeddings in its local cache over the communication network so that the embeddings can be shared with other robots to allow the other robots to be able to identify similar objects. For instance, the first robot can transmit the embedding stored in its local cache that allows the first robot to identify a coffee mug to a second robot and a third robot. After the second robot and the third robot receive the embedding for identifying the coffee mug, the second and third robot can instantly identify a coffee mug if one is observed in the robot's environment. Similarly, the second robot may transfer an embedding to the first robot and the third robot that allows the robots to identify an object, such as a hat. As a result, once the first robot and third robot receive and store the embedding describing the hat in their respective local caches, the first and third robot will be able to identify and a retrieve a hat if requested by a user.</p><p id="p-0092" num="0091">In some implementations, each robot in the fleet stores a machine learning model that can be used to produce embeddings. The machine learning model can receive input of characteristics of the object and will output an embedding that represents a compact, encoded representation describing the object. The embedding is generated based on the propagation of data through the machine learning, and so the embedding generated in response to a set of input data is a function of the structure and training state of the machine learning model. As a result, in order for each of the robots to use embeddings generated by other robots, the machine learning model in each robot can be the same, e.g., having the same structure and training state. This allows robots to compare embeddings that the robots generate with the embeddings that other robots provide and have a meaningful result. Otherwise, if two robots use different machine learning models, the two robots may produce very different embeddings for the exact same object, and the robots would not be able to correctly interpret the received embeddings.</p><p id="p-0093" num="0092">The system may include a server, separate from the robots, that manages training and version control for the machine learning models of the robots. The server can periodically transmit updated machine learning models to the robots and make sure the robots have identical models. In some implementations, the server may update the machine learning model upon receiving new embeddings from the robots. The server can transmit the updated machine learning model to each of the robots. Updated machine learning models can be provided at regular intervals, e.g., every two weeks, every month, etc., or updated models can be provided as needed. Having the same machine learning model in common among many robots can provide a number of advantages. For example, the computational expense of training the model can be done once, at the server, for each model update, which avoids the need for individual robots to expend power and computing resources for model training. Distributing the same updated model also shares the combined learning of the robot fleet with the robots. All of the robots receive an updated model that provide greater recognition ability, allowing the performance of each robot to improve in a standardized and predictable way.</p><p id="p-0094" num="0093">The system <b>100</b> illustrates the technique of sharing object identification abilities between robots. For instance, the example illustrates a robot <b>104</b>B identifying an object, generating an embedding <b>118</b> representing the object, and sharing the embedding <b>118</b> and additional data with other robots <b>104</b>A, <b>104</b>C, and <b>104</b>D. The example also shows a server system <b>112</b> training a machine learning model to add the capability to identify the object represented by the shared embedding, and the server system <b>112</b> distributing the trained machine learning model <b>130</b> to the robots <b>104</b>A-<b>104</b>D.</p><p id="p-0095" num="0094">The processing shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> achieves two important tasks. First, unlike systems that require a user to individually train each robot how to identify an object, the server system <b>112</b> aggregates and shares embeddings from each of the robots <b>104</b>A-<b>104</b>D such that only one robot is required to learn to identify a new object. In response, the server system <b>112</b> distributes the aggregated embeddings among the robots so that each robot <b>104</b>A-<b>104</b>D can identify the new object represented by the aggregated embeddings, even if a human never trained the other robots <b>104</b>A-<b>104</b>D to identify the newly identified object.</p><p id="p-0096" num="0095">Second, the server system <b>112</b> can distribute a newly trained machine learning model <b>130</b> to each of the robots <b>104</b>A-<b>104</b>D without each robot having to retrain its own local machine learning model. As a result, the system <b>100</b> allows learning while avoiding the need for each robot <b>104</b>A-<b>104</b>D to perform the computation required to train a machine learning model.</p><p id="p-0097" num="0096">In some implementations, the server system <b>112</b> can store a copy of the machine learning model locally on each of the robots <b>104</b>A-<b>104</b>D. The robots <b>104</b>A-<b>104</b>D and the server system <b>112</b> each have the same machine learning model to ensure distributed learning of objects is uniform across the robot fleet. If a user trains robot <b>104</b>A to identify a new object, such as a pen, the robot <b>104</b>A inputs the characteristics of the pen into a local machine learning that produces an embedding as output. The embedding output represents a characterization or fingerprint for the pen object. In addition, the user may provide the robot <b>104</b>A with a classification label describing the type of object represented by the embedding. The classification label may be an auditory or textual input tagging the embedding as a &#x201c;pen.&#x201d; The classification label is stored with the embedding in a local cache of the robot <b>104</b>A. Alternatively, the robot <b>104</b>A may determine the classification label of the embedding from previously identified pen objects stored in the local cache of the robot <b>104</b>A.</p><p id="p-0098" num="0097">In some implementations, the robot <b>104</b>A transmits the produced embedding and the classification label to the server system <b>112</b> to store in a database <b>114</b>. The database <b>114</b> may include a table of classification labels corresponding to embeddings produced by the robots. The database <b>114</b> may also include sensor data, feature data extracted from sensor data, or other information used to generate the embeddings. The server system <b>112</b> can utilize the newly received feature data to train the machine learning model. The server system <b>112</b> trains its copy of the machine learning to be able to recognize the new object in subsequent processes. After training with the embeddings of various robots <b>104</b>A-<b>104</b>D, the server system <b>112</b> transmits the trained machine learning model <b>130</b> to each of the robots <b>104</b>A-<b>104</b>D. Each of the robots <b>104</b>A-<b>104</b>D erases their currently locally stored machine learning model and replaces it with the updated, newly trained machine learning model <b>130</b> from the server system <b>112</b> and clears their respective local caches. Examples of this system <b>100</b> are described further below.</p><p id="p-0099" num="0098">During stage (A), a user <b>106</b> instructs the robot <b>104</b>B to retrieve a cup <b>116</b>. The user <b>106</b> speaks a command to the robot <b>104</b>B, e.g., &#x201c;Robot, please retrieve my cup&#x201d;. The spoken utterance can include various types of phrases and/or instructions directed towards each robot <b>104</b>. If the robot <b>104</b>B does not understand the spoken utterance, the robot <b>104</b>B may ask the user <b>106</b> to repeat the instruction. For instance, the robot <b>104</b>B may process the spoken utterance using speech recognition to determine the context of the instruction.</p><p id="p-0100" num="0099">The robot <b>104</b>B first uses its perception models to attempt to identify a cup. If the robot <b>104</b>B finds the cup in its immediate environment or in its map of contents of the house, the robot <b>104</b>B may locate the cup <b>116</b> and carry out the requested command. However, if the robot <b>104</b>B determines that it cannot find the cup <b>116</b>, or that its classification model does not have the ability to recognize the object mentioned, the robot <b>104</b>B may respond to the user <b>106</b> reciting &#x201c;Which object is &#x2018;my cup&#x2019;?&#x201d; In response, the user <b>106</b> can take one or more actions to train robot <b>104</b>B to identify a cup <b>116</b>.</p><p id="p-0101" num="0100">In some implementations, the user <b>106</b> can train the robot <b>104</b>B to identify the cup <b>116</b>. For example, the user may point to the cup <b>116</b>, and the robot <b>104</b>B may move to capture images from different sides of the cup <b>116</b>. As another example, the user <b>106</b> can hold up the cup <b>116</b> in front of the robot <b>104</b>B so the robot's sensors capture and learn the characteristics of the cup <b>116</b>. The robot <b>104</b>B can observe the cup <b>116</b> from various angles to learn various characteristics of the cup <b>116</b>. These characteristics may include the shape, color, size, contour, and texture of the cup, to name a few examples. Additionally, the robot <b>104</b>B may utilize RGBD sensors that capture red, blue, green, and depth data. This information, potentially combined with LIDAR, 3D depth data, or radar data captured by the robot, may allow the robot <b>104</b>D to determine the three-dimensional shape and volume of the cup <b>116</b>. The robot <b>104</b>B can also capture audio data or other data while analyzing the cup <b>116</b>. The robot <b>104</b>B may include sensors such as a camera, a LIDAR sensor, a proximity sensor, an infrared sensor, an accelerometer, a touch sensor, a microphone, a depth camera, and a position sensor, to name a few examples. Other types of sensors may be used, and the previously mentioned sensor types are described as examples.</p><p id="p-0102" num="0101">During stage (B), the robot <b>104</b>B processes sensor data for an object. For example, after the user has identified the cup <b>116</b> for the robot <b>104</b>B and the robot has captured images or other sensor data for the cup <b>116</b>, the robot <b>104</b>B processes the sensor data to identify characteristics of the object. The robot <b>104</b>B generates feature data <b>122</b> from the obtained characteristics of the object. The feature data <b>122</b> may include a representation of the shape, color, size, contour, depth, and texture data from the sensors. The robot <b>104</b>B provides the feature data <b>122</b> as input to its local machine learning object recognition model.</p><p id="p-0103" num="0102">The local machine learning object recognition model may be a neural network that includes an input layer, an output layer, and one or more hidden layers. In some implementations, the primary purpose of the object recognition model is to recognize objects, not simply to produce embeddings. For example, the object recognition model may be configured to provide scores that represent a probability distribution over many types of objects the model is configured to recognize. For example, if the model is trained to recognize 10,000 different types of items, the model may have an output layer with 10,000 elements, each corresponding to a different type of item. The value generated for each element at the output layer can indicate a probability that the input feature data provided to the model represents the corresponding object type. Other model configurations may also be used, including dedicated encoding networks that have the primary or sole purpose of generating embeddings.</p><p id="p-0104" num="0103">As the machine learning model processes input feature data, the model generates information that can be used to derive an embedding <b>118</b> for the object described by the input feature data. For example, the embedding <b>118</b> may be the set of values provided at the output layer of a neural network. As another example, the embedding <b>118</b> may be a set of values representing the activations at a hidden layer of a neural network, such as the set of activations of nodes at a final hidden layer. As another example, a function or transformation may be applied to information derived from the output layer and/or hidden layers of the model to generate the embedding <b>118</b>. Outputs of other types of machine learning models, besides neural networks, may also be used to generate embeddings.</p><p id="p-0105" num="0104">The embedding <b>118</b> represents an encoded representation of the characteristics of the cup <b>116</b>. In general, embeddings for different objects may each have a common format and size, for example, each embedding can be a 128-unit vector, for example, where each unit includes 64-bit data values. In another example, the embedding can be a 256-unit embedding that represents an object. A 256-unit embedding may indicate a higher fidelity embedding representing an object than a 128-unit embedding, but at the expense of utilizing more memory. An embedding may be generated using the local machine learning for each object observed by the robot <b>104</b>B. However, the robot <b>104</b>B does not store embeddings in its cache for objects that the object recognition model can already recognize. Rather, the cache is used to store embeddings for newly learned objects, or received embeddings representing newly learned objects from other robots, when the object recognition model cannot appropriately recognize the object. Thus, the cache is used generally to store embeddings for objects that the object recognition model is not trained to detect, or to correct errors in which the object recognition model incorrectly classifies an object. The embeddings and classification information in the cache can supplement the recognition ability of the trained machine learning model, and even over-ride incorrect classifications by the model.</p><p id="p-0106" num="0105">In some implementations, the user <b>106</b> may provide a classification label <b>120</b> for the embedding <b>118</b> produced by the robot <b>104</b>B. For instance, the robot <b>104</b>B may request that the user <b>106</b> provide a classification label <b>120</b> for an object that the robot does not recognize. The user <b>106</b> may provide the classification label <b>120</b>, in any of various ways, e.g., voice input to the robot, or entering the information to a client device <b>108</b>, such as a phone or computer that communicates with each of the robots <b>104</b>. The client device <b>108</b> may communicate with the robots <b>104</b>A-<b>104</b>D over any communication protocol, such as Bluetooth or Wi-Fi. For example, the user <b>106</b> may type in the classification label <b>120</b> &#x201c;cup&#x201d; into the client device <b>108</b>. Alternatively, the user may speak an utterance detected by the client device <b>108</b>, as illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, reciting, &#x201c;This is a &#x2018;Cup&#x2019;&#x201d;. In other implementations, the user <b>106</b> may communicate directly with the robot <b>104</b>B to provide the classification label <b>120</b> using a text input or speaking to the robot <b>104</b>B.</p><p id="p-0107" num="0106">In some implementations, the user <b>106</b> may provide an auditory teaching to the robots <b>104</b>A-<b>104</b>D. The auditory teaching may incorporate previously known classification labels that the robot <b>104</b>A, for example, comprehends in order to understand the auditory teaching. For example, the robot <b>104</b>A may include an embedding corresponding to a &#x201c;beer glass&#x201d; and another embedding corresponding to a &#x201c;beer stein&#x201d; object. If user <b>106</b> instructs robot <b>104</b>A to retrieve the &#x201c;beer stein,&#x201d; the robot <b>104</b>A will know to associate &#x201c;beer glass&#x201d; with &#x201c;beer stein&#x201d; and retrieve the &#x201c;beer stein&#x201d; object.</p><p id="p-0108" num="0107">In response, the robot <b>104</b>B stores the produced embedding <b>118</b>, the corresponding classification label <b>120</b>, and the feature data <b>122</b> in a local cache of the robot <b>104</b>B. In some implementations, multiple embeddings may be stored for a single classification label <b>121</b>, to show different examples of the same type of item. The robot <b>104</b>B may capture sensor data that shows characteristics of an object from various angles. Each angle the robot captures of the object produces different sensor data, which could be provided to the local machine learning to produce a different embedding. As another example, multiple views of an object may be used to generate a single embedding that represents a three-dimensional aspects of the object. In some implementations, a robot may observe multiple objects of the same type, and use the different instances of the object type to produce different embeddings. For instance, the house <b>102</b> may have multiple pens of differing shapes and sizes, but each of which is still a valid example of the &#x201c;pen&#x201d; classification. As a result, the robot <b>104</b>B may store multiple embeddings for the &#x201c;pen&#x201d; classification, with each embedding representing a different physical pen observed by the robot <b>104</b>B.</p><p id="p-0109" num="0108">In addition, the robot <b>104</b>B can store additional metadata corresponding to the classification label <b>120</b> and the embedding <b>118</b>. The robot <b>104</b>B can store a version code for the current machine learning model stored on the robot <b>104</b>B. The version code number describes a state of the current machine learning used to generate the embedding <b>118</b>. For example, the version may be version number &#x201c;1.0&#x201d; or a date corresponding to when the machine learning model was installed. The robot <b>104</b>B can also store location information corresponding to where the object corresponding to the embedding was located. The location information can include a type of location (e.g., home, store, library, etc., or within a home, living room, kitchen, dining room, etc.), a GPS coordinate of the location, and a date/time of day. For instance, the user <b>106</b> may provide the type of location to the robot <b>104</b>B using the client device <b>108</b> or directly interacting with the robot <b>104</b>B. For example, the type of location may be the &#x201c;kitchen.&#x201d;</p><p id="p-0110" num="0109">In some implementations, the additional metadata can also include a description of how the robot <b>104</b>B determined the classification of the identified object. For instance, the classification may be determined with user input, such as user <b>106</b> inputting the classification label <b>120</b> to the robot. Alternatively, the classification may be determined by the robot <b>104</b>B itself. For instance, the robot <b>104</b>B may scan one or more objects as it moves through each room of house <b>102</b>. When scanning an object, the robot <b>104</b>B provides as input the characteristics of the object to the robot <b>104</b>B's local machine learning model. The output of the local machine learning model produces an embedding, such as an embedding <b>118</b>, which describes a representation of the object. The robot <b>104</b>B can compares the embedding <b>118</b> output to the stored embeddings in its local cache. If the robot <b>104</b>B determines the produced embedding similarly matches at least one of the embeddings in the local storage, the robot <b>104</b>B may store the produced embedding with the classification label from the local cache in the local cache. This process will be further described below.</p><p id="p-0111" num="0110">In some implementations, the additional metadata may include identifications corresponding to the robot <b>104</b>B that identified the object. For instance, the identification of the robot <b>104</b>B may include an identification number, such as &#x201c;0001,&#x201d; to identify the robot <b>104</b>B. The additional metadata may include a group ID and owner ID number of robot <b>104</b>B. The group ID number designates that the robot <b>104</b>B belongs to a group that may include other robots. For instance, group ID number 2 may designate robot <b>104</b>B is in a group with robot <b>104</b>A and robot <b>104</b>C. The owner ID number designates robot <b>104</b>B to a particular owner.</p><p id="p-0112" num="0111">In some implementations, the additional metadata may also include a robot type. The robot type may indicate a physical model of the robot, a role of the robot, or a description of the robot's purpose. Even if the robots are physically identical or similar, their programming and function may be different. For example, user <b>106</b> may designate robot <b>104</b>B to be a &#x201c;kitchen robot&#x201d; and robot <b>104</b>A to be a &#x201c;golf robot&#x201d;. Other robot types are possible, such as a &#x201c;hotel robot,&#x201d; a &#x201c;hospital robot,&#x201d; a &#x201c;warehouse robot,&#x201d; and a &#x201c;car garage robot.&#x201d; These robots may be trained differently, to better fulfill their respective roles. Because they perform different types of tasks, the information and abilities that one type of robot learns may not always be applicable or helpful for another type of robot. By labelling the embeddings with the corresponding robot type, the server system <b>112</b> may selectively share the embeddings, so that robots receive applicable embeddings for their robot type (e.g., those generated by other robots in the same robot type) and do not receive embeddings that are not applicable.</p><p id="p-0113" num="0112">During stage (C), the robot <b>104</b>B transmits the embedding <b>118</b> and the corresponding classification label <b>120</b> to the server system <b>112</b> over the network <b>110</b>. The robot <b>104</b>B may also transmit the corresponding feature data <b>122</b> or raw sensor data used to generate the embedding <b>118</b>, as well as any metadata about the embedding <b>118</b> or the robot <b>104</b>B. The robot <b>104</b>B may tag the embedding <b>118</b> with an indication of the destination for the server system <b>112</b>. For instance, the tag may include an indication that the embedding is &#x201c;new,&#x201d; e.g., represents a newly learned classification that the model is not able to recognize, and that the information should be shared with other robots. The server system <b>112</b> determines that the new embedding and classification can to be distributed to the other robots <b>104</b>A, <b>104</b>C, and <b>104</b>D. As another example, the robot <b>104</b>B's tag may include an indication that the embedding is &#x201c;known,&#x201d; e.g., that the embedding is a further example of an already-known classification, which can be used to refine the model. The server system <b>112</b> can use the feature data <b>122</b> provided with the embeddings to refine and train the machine learning model stored by the server system <b>112</b>.</p><p id="p-0114" num="0113">In some implementations, the server system <b>112</b> may store the received embedding <b>118</b>, the received corresponding classification label <b>120</b>, and the feature data <b>122</b> in the database <b>114</b>. The database <b>114</b> can include one or more tables that include classification labels, feature data or sensor data describing the object, and corresponding embeddings produced by the robots in the system <b>100</b>. The database <b>114</b> may additionally store the metadata generated by each robot corresponding to each embedding. The server system <b>112</b> may retrieve the classification labels, the feature data, and the corresponding additional metadata from the database <b>114</b> when training the local machine learning model.</p><p id="p-0115" num="0114">During stage (D), the server system <b>112</b> distributes the received embeddings, corresponding classification labels, and feature data to the other robots. After the server system <b>112</b> receives the embedding <b>118</b>, corresponding classification label <b>120</b>, and the feature data <b>122</b> from robot <b>104</b>B, the server system <b>112</b> may determine that the embedding <b>118</b> and the corresponding classification label <b>120</b> represents new learning that can be distributed to the other robots. For instance, the server system <b>112</b> may determine the embedding <b>118</b> and the corresponding classification label <b>120</b> should be distributed to the other robots based on the indication tag provided by the robot <b>104</b>B. For example, if the indication tag reads &#x201c;new,&#x201d; the server system <b>112</b>'s next action is to distribute the embedding <b>118</b> and the corresponding classification label <b>120</b> to robots <b>104</b>A, <b>104</b>C, and <b>104</b>D. Additionally, the server system <b>112</b> may transmit the additional metadata to the robots <b>104</b>A, <b>104</b>C, and <b>104</b>D along with the embedding <b>118</b> and the corresponding classification label <b>120</b>.</p><p id="p-0116" num="0115">In some implementations, the server system <b>112</b> may determine the embedding <b>118</b> should be transmitted to the other robots based on the received classification label <b>120</b> alone. For instance, the server system <b>112</b> can compare the received classification label <b>120</b> to the stored classification labels in the database <b>114</b>. If the server system <b>112</b> determines the received classification label <b>120</b> does not match any of the stored classification labels in the database <b>114</b>, or contextually no match occurs, then the server system <b>112</b> stores the newly received embedding <b>118</b> and the received classification label <b>120</b> in the database <b>114</b>.</p><p id="p-0117" num="0116">In some implementations, a contextual match occurs when the server system <b>112</b> receives a classification label <b>120</b> of &#x201c;a cup&#x201d; and the server system <b>112</b> finds a classification label in the database <b>114</b> of &#x201c;a coffee mug,&#x201d; for example. Although, the classification labels have different string characters, the context of &#x201c;a cup&#x201d; and &#x201c;a coffee mug&#x201d; have similar characteristics. If a contextual match does occur, the server system <b>112</b> may transmit a notification to the device <b>108</b> to notify the user <b>106</b> that two embeddings correspond to different or similar objects. Alternatively, the server system <b>112</b> can store and distribute new embeddings each time a new embedding is received from a robot, regardless of whether the new embedding is different from the stored embeddings in the database <b>114</b>.</p><p id="p-0118" num="0117">During stage (E), after collecting embeddings from the robots <b>104</b>A-<b>104</b>D, the server system <b>112</b> updates the machine learning model and transmits the updated machine learning model <b>130</b> to each of the robots <b>104</b>A-<b>104</b>D. In some implementations, the server system <b>112</b> may train its copy of the machine learning model using any newly received feature data from robots <b>104</b>A-<b>104</b>D. In the meantime, while training is ongoing at the server system <b>112</b>, the robots <b>104</b>A-<b>104</b>D are nevertheless able to use the learning being incorporated through the model training. The server system <b>112</b> has already shared the embeddings and classifications that describe the examples being used in the model training process. Accordingly, the robots <b>104</b>A-<b>104</b>D are able to recognize or classify the new objects by the embeddings, even before receiving an updated model.</p><p id="p-0119" num="0118">In one example, robot <b>104</b>D may learn to identify an object <b>124</b> in the house <b>102</b>. After capturing sensor data describing the object <b>124</b> and learning a classification <b>132</b>, the robot <b>104</b>D can convert the characteristics to feature data <b>128</b> and provide the feature data <b>128</b> as input to its local machine learning model. From output of the local machine learning model, the robot <b>104</b>D produces an embedding <b>126</b>. The robot <b>104</b>D also determines a classification label <b>132</b> of &#x201c;Camera&#x201d; corresponding to the embedding <b>126</b>, e.g., based on input from the user <b>106</b>. The robot <b>104</b>D uploads the embedding <b>126</b>, the feature data <b>128</b> used to generate the embedding <b>126</b>, and the classification label <b>132</b> to the server system <b>112</b>. The server system <b>112</b> distributes the embedding <b>126</b> and classification label <b>132</b> to the other robots <b>104</b>A-<b>104</b>C, which store the information in their local caches. The server system <b>112</b> also uses the embedding <b>126</b>, classification label <b>132</b>, and feature data <b>128</b> to further train the object recognition model.</p><p id="p-0120" num="0119">The server system <b>112</b> may train a machine learning model using the feature data and classification labels from each of the robots <b>104</b>A-<b>104</b>D. For instance, the server system <b>112</b> may train a neural network on the feature data <b>122</b> and the classification label <b>120</b> from robot <b>104</b>B as well as the feature data <b>128</b> and classification label <b>132</b>. By training a machine learning model with the examples and learning from each of the robots <b>104</b>A-<b>104</b>D, the server system <b>112</b> can improve the machine learning model to correctly recognize objects that any of the robots <b>104</b>A-<b>104</b>D have learned to recognize.</p><p id="p-0121" num="0120"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram that illustrates an example of a system for training a robot to detect an object. In some implementations, a user <b>106</b> may train a robot, such as robot <b>104</b>A, to identify and detect an object, such as a cup in the example of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Training a robot <b>104</b>A-<b>104</b>D to identify and detect an object allows the user <b>106</b> to request the robot <b>104</b>A-<b>104</b>D to retrieve the object at a later point in time.</p><p id="p-0122" num="0121">In some implementations, each robot <b>104</b>A-<b>104</b>D may include the components illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. For instance, as previously mentioned, robot <b>104</b>A includes robot sensors <b>202</b>. The robot sensors <b>202</b> provides the robot with a method to interpret its environment. For instance, the robot sensors <b>202</b> may include a camera, a LIDAR sensor, a proximity sensor, an infrared sensor, an accelerometer, a touch sensor, a microphone, and a position sensor, to name some examples. The robot <b>104</b>A may utilize each of these sensors to avoid obstacles while moving through house <b>102</b>, to understand an encountered object the robot <b>104</b>A grasps, and to receive requests from the user <b>106</b>.</p><p id="p-0123" num="0122">In some implementations, the robot sensors <b>202</b> produce sensor data <b>204</b>. The sensor data <b>204</b> includes image data <b>206</b> and depth information <b>208</b>, and may include other sensor data. Additionally, the sensor data <b>204</b> may include contour, shape, and texture data. The image data <b>206</b> can include one or more videos and/or one or more still images of an object. The image data <b>206</b> may include color information (e.g., red, green, and blue or RGB information) and/or monochrome image data.</p><p id="p-0124" num="0123">In some implementations, the depth information <b>208</b> is determined using a camera module. This information may be generated using a stereo camera, in which differences between the images between two image sensors are used to determine the distance of the object from the camera. In addition, or as an alternative, the depth information <b>208</b> may be generated using a LIDAR system, a radar system, or other depth sensor of the robot <b>104</b>A.</p><p id="p-0125" num="0124">In some implementations, the robot <b>104</b>A can generate feature data <b>212</b> from the sensor data <b>204</b>. The feature data <b>212</b> may be a representation of the sensor data <b>204</b> that the machine learning model <b>214</b> is configured to receive as input.</p><p id="p-0126" num="0125">The robot <b>104</b>A includes a local machine learning model <b>214</b>. The local machine learning model <b>214</b> can be stored in memory of the robot <b>104</b>A, optionally separate from the local cache <b>218</b>. The server system <b>112</b> may provide the machine learning model <b>214</b> for the robot <b>104</b>A over a network, and can ensure that each robot <b>104</b>A-<b>104</b>D uses the same machine learning model <b>214</b>, e.g., the most current version.</p><p id="p-0127" num="0126">The robot <b>104</b>A determines an embedding <b>118</b> that represents an encoded representation of the cup described by the image data <b>206</b>, the depth information <b>208</b>, and any other sensor data produced by the robot <b>104</b>A. The embedding <b>118</b> is stored in robot <b>104</b>A's local cache <b>218</b> along with a classification label <b>120</b> provided by user <b>106</b>. The user <b>106</b> can provide the classification label <b>120</b> through interaction with the client device <b>108</b>. Alternatively, the user <b>106</b> can provide the classification label <b>120</b> through direct interaction with the robot <b>104</b>A, by either speaking to a microphone on the robot <b>104</b>A or entering text through a terminal on the robot <b>104</b>A.</p><p id="p-0128" num="0127">In some implementations, the local cache <b>218</b> stores a set of data <b>220</b> for each object. For instance, a set of data <b>220</b>A for the recently trained &#x201c;cup&#x201d; object includes an embedding <b>118</b>, a classification label <b>120</b> corresponding to the embedding <b>118</b>, and sensor data <b>204</b> corresponding to the embedding. By storing the set of data <b>220</b> in a local cache <b>218</b>, the robot <b>104</b>A can quickly access the data sets to use in recognizing objects it encounters. The robot <b>104</b>A may store any embeddings and classification labels received from the server system <b>112</b> in the local cache.</p><p id="p-0129" num="0128">In some implementations, when a robot receives embeddings and classification labels from the server system <b>112</b>, only the embedding and the classification label are received, without the corresponding sensor data or feature data. The embedding is the data element used for comparison in the object recognition process, discussed further with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. As long as the machine learning model used to generated the received embedding is the same machine learning model used by the robot <b>104</b>A receiving the embedding, the sensor data or feature data used to generate the embedding is not needed.</p><p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram that illustrates an example of a system <b>300</b> of a robot detecting an object. In some implementations, each robot <b>104</b>A-<b>104</b>D performs the following steps to detect and identify object.</p><p id="p-0131" num="0130">In some implementations, the robot <b>104</b>D may find an object, such as camera, in house <b>102</b>. The robot <b>104</b>D captures sensor data <b>302</b> describing of the camera using the sensors <b>202</b>. The robot <b>104</b>D may scan the object <b>124</b> at various angles and distances to get a full view of the object <b>124</b>. The sensor data <b>302</b> may include image data <b>304</b> and depth information <b>306</b>, as well as other information describing of the object <b>124</b>.</p><p id="p-0132" num="0131">The robot <b>104</b>D provides the sensor data <b>302</b>, or feature data generated from the sensor data <b>302</b>, to the machine learning model <b>214</b>, which is stored locally at the robot <b>104</b>D. The model <b>214</b> used by the robot <b>104</b>D can be a copy of the same machine learning model <b>214</b> stored and used by the other robots <b>104</b>A-<b>104</b>C. The machine learning model <b>214</b> is configured to produce information indicating the likelihood that the input data represents different types of objects. For example, the model <b>214</b> may output a set of values that form a probability distribution across a set of object types, for example, with one value indicating a likelihood that the input data describes a &#x201c;spoon,&#x201d; another value indicating a likelihood that the input data describes a &#x201c;book,&#x201d; and so on. From the outputs of the model <b>214</b>, the robot <b>104</b>D may select the object type that the model outputs indicate is most likely to describe the observed object <b>124</b>. For example, the robot <b>104</b>D may identify the model output indicating the highest probability, and select the classification corresponding to that output. In the example, the model <b>214</b> indicates, based on its training, that the observed object <b>124</b> is most likely a &#x201c;Box,&#x201d; represented by classification label <b>312</b>, and that the confidence score <b>310</b> for the classification is 50%. The confidence score <b>310</b> indicates a level of confidence that the classification label <b>312</b> accurately describes the object <b>124</b>, and may be determined based on output of the machine learning model <b>214</b> or based on another evaluation of the model's output.</p><p id="p-0133" num="0132">In addition to using the machine learning model <b>214</b> to predict a classification for the object <b>124</b>, the robot <b>104</b>D also uses the processing of the machine learning model <b>214</b> to generate an embedding <b>314</b> for the object <b>124</b>. For example, the embedding may be derived from activations at one or more hidden layers of the model <b>214</b> and/or from data at an output layer of the model <b>214</b>.</p><p id="p-0134" num="0133">The robot <b>104</b>D compares the embedding <b>314</b> generated for the object <b>124</b> with the embeddings stored in the robot's local cache <b>218</b>. The robot <b>104</b>D may separately compare the embedding <b>314</b> with each embedding in the local cache <b>218</b>. For example, the robot <b>104</b>D compares the embedding <b>314</b> to the embedding in data set <b>220</b>A through <b>220</b>N and generates data, such as a confidence score, indicating how closely the cached embeddings match the embedding <b>314</b>. To perform the comparison, the robot <b>104</b>D may perform bitwise comparisons, vector distance determinations, or other comparisons to generate a measure of similarity between embeddings.</p><p id="p-0135" num="0134">In some implementations, each comparison may produce a confidence score. For example, the comparison between embedding <b>314</b> and the embedding in the dataset <b>220</b>A produces a confidence score <b>320</b> of 10%. The comparison between embedding <b>314</b> and the embedding in the dataset <b>220</b>B produces a confidence score <b>322</b> of 30%. The comparison between embedding <b>314</b> and the embedding in the dataset <b>220</b>C produces a confidence score <b>324</b> of 90%. The comparison between embedding <b>314</b> and the embedding in the dataset <b>220</b>D produces a confidence score <b>326</b> of 50%. The comparison between embedding <b>314</b> and the embedding in the dataset <b>220</b>N produces a confidence score <b>328</b> of 50%.</p><p id="p-0136" num="0135">The robot <b>104</b>D then identifies which the embedding had the highest confidence score or measure of similarity with the embedding <b>314</b>. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, this is the embedding in dataset <b>220</b>C, which has a corresponding classification label <b>330</b> of &#x201c;camera.&#x201d;</p><p id="p-0137" num="0136">The robot <b>104</b>D then selects whether to use the classification predicted by the machine learning model <b>214</b> or the classification determined using the cache <b>218</b>. For example, the robot <b>104</b>D compares the compares the confidence score <b>324</b> of 90% to the confidence score <b>310</b> of 50% produced by the machine learning model <b>214</b>. The robot <b>104</b>D choses classification corresponding to the higher of the confidence scores. In this example, the robot <b>104</b>D selects the classification label in the dataset <b>220</b>C to correspond with the embedding <b>314</b> because the confidence score <b>324</b> of 90% is greater than the confidence score <b>310</b> of 50%. This allows the local cache <b>218</b> to provide new or higher-quality classification results than what is provided by the machine learning model <b>214</b>.</p><p id="p-0138" num="0137">In some implementations, the robot <b>104</b>D may apply a threshold to ensure that classifications have at least a minimum confidence score before using a classification. For example, a classification may be required to have a confidence score of at least 70% before the robot <b>104</b>D accepts the classification result.</p><p id="p-0139" num="0138">Having selected the classification of &#x201c;camera&#x201d; as the most likely classification for the object <b>124</b>, based on finding a close match using the local cache <b>218</b>, the robot <b>104</b>D may provide that classification to other models and modules of the robot <b>104</b>D to carry out tasks. For example, the robot <b>104</b>D may retrieve the camera when a user asks for the object.</p><p id="p-0140" num="0139">The robot <b>104</b>D can repeat the process discussed in <figref idref="DRAWINGS">FIG. <b>3</b></figref> for each object observed by the robot <b>104</b>D in order to classify the objects the robot <b>104</b>D encounters. This recognition or classification process may be done very frequently, e.g., on an almost continuous basis as the robot observes its surroundings, and for multiple objects that may be in view at any given time. As a result, it is important for the process to be computationally efficient and power efficient. The architecture discussed here provides these benefits, since processing of the machine learning model can be very fast and efficient, and the lookup and comparison process for using datasets in the local cache can similarly be fast and efficient.</p><p id="p-0141" num="0140">Generally, the embedding <b>314</b> and the sensor data <b>302</b> for an observed object <b>124</b> are discarded after recognizing the object <b>124</b>. Nevertheless, in some implementations, this information can be saved and provided to the server system <b>112</b> as additional example data for an object type, and the server system <b>112</b> may use this information when training the machine learning model <b>214</b> further.</p><p id="p-0142" num="0141"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram that illustrates an example of another system <b>400</b> for sharing learned information among robots. <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of sharing perception information among robots <b>104</b>A, <b>104</b>B, and <b>104</b>C. Each robot <b>104</b>A, <b>104</b>B, and <b>104</b>C stores and uses a copy of the same machine learning model <b>402</b>. As a result, each robot <b>104</b>A-<b>104</b>C produces similar embeddings when observing similar objects. Each of the robots <b>104</b>A-<b>104</b>C has a local cache <b>404</b>A-<b>404</b>C in which embeddings and corresponding classifications are stored.</p><p id="p-0143" num="0142">The local cache <b>406</b>A for the robot <b>104</b>A initially includes a dataset <b>406</b>A, which was generated by the robot <b>104</b>A based on sensor data that the robot <b>104</b>A captured. The dataset <b>406</b>A can include at least an embedding and a corresponding classification label. The robot <b>104</b>A may also transmit sensor data and metadata corresponding to the embedding in the data set <b>406</b>A. The robot <b>104</b>A transmits the dataset <b>406</b>A to the server system <b>112</b> over the network <b>110</b>. The robot <b>104</b>A may designate that the dataset <b>406</b>A should be shared with other robots. Similarly, the robot <b>104</b>A may indicate that the dataset <b>406</b>A is new, or that it represents a classification example that addresses an inadequacy or error of the machine learning model <b>402</b>.</p><p id="p-0144" num="0143">The local cache <b>404</b>B of the robot <b>104</b>B initially includes dataset <b>406</b>B, which is based on sensor data that the robot <b>104</b>B captured. The dataset <b>406</b>B includes an embedding and classification, but for a different object than the one represented by data set <b>406</b>A. The robot <b>104</b>B transmits the data set <b>406</b>B to the server system <b>112</b> over the network <b>110</b>.</p><p id="p-0145" num="0144">The server system <b>112</b> distributes the data sets <b>406</b>A and <b>406</b>B so that each of the robots receives the information for its local cache. For example, the server system <b>112</b> sends the data set <b>406</b>B, generated by the robot <b>104</b>B, to the robot <b>104</b>A. The server system <b>112</b> sends the data set <b>406</b>A, generated by the robot <b>104</b>A, to the robot <b>104</b>B. The server system <b>112</b> sends the data sets <b>406</b>A and <b>406</b>B to the robot <b>104</b>C.</p><p id="p-0146" num="0145">As a result of the distribution by the server system <b>112</b>, the robot <b>104</b>C will be able to identify the objects represented by each of the embeddings in the datasets <b>406</b>A and <b>406</b>B without having to be trained by user <b>106</b> to detect those objects. Additionally, robot <b>104</b>B will be able to identify the object represented by the embedding in dataset <b>406</b>A without being trained by user <b>106</b> to detect the object. Likewise, robot <b>104</b>A will be able to identify the object represented by the embedding in dataset <b>406</b>B without having to be trained by user <b>106</b> to detect the object. The sharing of information in datasets (e.g., embeddings) between robots across a network <b>110</b> decreases the time required to train the robots to recognize new objects.</p><p id="p-0147" num="0146">The server system <b>112</b> may also store the datasets <b>406</b>A and <b>406</b>B in the database <b>114</b>. The server system <b>112</b> collects the data sets from robots over a period of time, and further trains a copy of the machine learning model <b>402</b> to be able to recognize the objects indicated in the datasets <b>406</b>A and <b>406</b>B. When the</p><p id="p-0148" num="0147">In some implementations, the server system <b>112</b> may perform periodic synchronizations between robots <b>104</b>A through <b>104</b>C to ensure each robot includes the latest set of embeddings. For instance, the periodic synchronizations may occur at a predefined rate, such as hourly, daily, weekly, etc., and the synchronization may be initiated by a robot or by the server system <b>112</b>. The periodic synchronizations may include a request from the server system <b>112</b> to each of the robots <b>104</b>A-<b>104</b>D to upload any new embeddings since the last synchronization. Each robot <b>104</b>A-<b>104</b>D may also provide a list of identifiers for datasets in its cache, so that the server system <b>112</b> can determine specifically which datasets should be sent and which are already present. The server system <b>112</b> determines which embeddings to provide to the robots <b>104</b>A-<b>104</b>D so that each robot <b>104</b>A-<b>104</b>D includes the latest embeddings in their local cache from each of the other robots <b>104</b>A-<b>104</b>D.</p><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram that illustrates an example of a system <b>500</b> for providing updated machine learning models to robots. Periodically, for example, monthly, the server system <b>112</b> can generate and distribute an updated machine learning model that incorporates the combined learning from the various datasets that the robots <b>104</b>A-<b>104</b>D have provided. <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an exemplary distribution of providing updated machine learning models to robots <b>104</b>A, <b>104</b>B, and <b>104</b>C. As previously illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, each robot <b>104</b>A, <b>104</b>B, and <b>104</b>C included the same machine learning model <b>402</b>. In addition, each robot <b>104</b>A, <b>104</b>B, and <b>104</b>C has its own separate local cache <b>404</b>A, <b>404</b>B, and <b>404</b>C.</p><p id="p-0150" num="0149">The server system <b>112</b> includes a model trainer <b>502</b> that iteratively trains a machine learning model <b>504</b>. Prior to training, this model <b>504</b> may be the same model <b>402</b> that the robots <b>104</b>A-<b>104</b>D are using, or it may represent a different model. The result of the training process is an updated machine learning model <b>506</b> that incorporates what the various robots <b>104</b>A-<b>104</b>D have learned over a time period. The model trainer <b>502</b> may update the machine learning model <b>504</b> based on each received dataset that a robot designates as a newly learned classification. In some implementations, the model trainer <b>502</b> may train the machine learning model <b>504</b> using data representing additional examples of classifications that the model <b>402</b> can already accurately recognize, e.g., using reinforcement learning. By training the machine learning model <b>504</b> on &#x201c;new&#x201d; and &#x201c;known&#x201d; datasets, the server system <b>112</b> can create an updated machine learning model <b>506</b> to accurately recognize objects from real-world observations, for both new object types and object types already predicted by the model.</p><p id="p-0151" num="0150">In some implementations, the server system <b>112</b> transmits the updated machine learning model <b>506</b> to each robot <b>104</b>A, <b>104</b>B, and <b>104</b>C over the network <b>110</b>. In response to a robot <b>104</b>A-<b>104</b>D receiving the updated machine learning model <b>506</b>, the robot <b>104</b>A-<b>104</b>D will remove the machine learning model <b>402</b> and use the updated machine learning model <b>506</b> in its place. From that point on, the robots <b>104</b>A-<b>104</b>D use the updated machine learning model <b>506</b> and benefit from the improved accuracy that it provides.</p><p id="p-0152" num="0151">When the robots <b>104</b>A-<b>104</b>D receive the updated machine learning model <b>506</b>, the robots <b>104</b>A-<b>104</b>D clear their local caches <b>404</b>A-<b>404</b>D. For example, the datasets <b>406</b>A and <b>406</b>B are deleted. The classifications represented by the datasets in the caches are now predicted directly by the updated model <b>506</b>, and so the stored datasets are not needed. Further, since the datasets in the caches were generated using the old machine learning model <b>402</b>, the embeddings from those datasets would be incompatible with the updated machine learning model <b>506</b>. If there are some datasets that have not been shared by robots but have not yet been incorporated into the training of the updated machine learning model <b>506</b>, the server system <b>112</b> may use the sensor data that the robots provided to generate embeddings using the updated machine learning model <b>506</b>. The server system <b>112</b> can then send the updated data sets, having embeddings compatible for the updated model <b>506</b>, to the robots <b>104</b>A-<b>104</b>D for storage in the local caches and use alongside the updated model <b>506</b>.</p><p id="p-0153" num="0152"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram that illustrates an example of a process <b>600</b> for sharing learned information among robots. A first robot, such as robot <b>104</b>A, may perform the process <b>600</b>.</p><p id="p-0154" num="0153">In the process <b>600</b>, a first robot obtains sensor data indicating characteristics of an object (<b>602</b>). The robot may include sensors such as a camera, a LIDAR sensor, a proximity sensor, an infrared sensor, an accelerometer, a touch sensor, a microphone, and a position sensor, to name a few examples. For example, a robot can capture and learn the characteristics of the object from several different angles. The robot may move itself, or its sensors, to different positions to obtain these different views. The obtained characteristics may include shape, color, contour, texture, and depth information regarding the object. The robot can convert the obtained sensor data of the object to feature data in order for a machine learning model to process the feature data.</p><p id="p-0155" num="0154">The robot determines a classification for the object (<b>604</b>). For example, a user may provide a classification for the object. The user can provide the classification of the object with voice input or text input to a client device <b>108</b>. Alternatively, the user can provide the classification for the object by interacting with the robot itself. The classification can be a text label tagged to the object.</p><p id="p-0156" num="0155">The robot generates an embedding for the object using a machine learning model stored by the first robot (<b>606</b>). The robot extracts feature data <b>122</b> from the sensor data for the object. The feature data may include a digital version of the sensor data, such as scores or values representing aspects of the sensor data, as understood by the machine learning model. For instance, the robot <b>104</b>B provides the feature data <b>122</b> as input to its local machine learning model. The machine learning model processes the feature data to produce an embedding.</p><p id="p-0157" num="0156">In some implementations, the machine learning model is a neural network model, and the embedding can be derived from output at an output layer of the neural network model. In other implementations, the embedding is derived from data indicating activations at a hidden layer of the neural network model. The specific values of the embedding can depend on the structure and training state of the machine learning model.</p><p id="p-0158" num="0157">The robot stores the generated first embedding and data indicating the classification for the object in a local cache of the first robot (<b>608</b>). For example, the robot stores the generated first embedding and the classification label for the object in the local cache of the robot. In addition, the robot may store the corresponding sensor data of the identified object in the local cache with the generated first embedding and the classification label.</p><p id="p-0159" num="0158">The robot sends the generated first embedding and the data indicating the classification to a server system over a communication network (<b>610</b>). The robot may also send metadata to the server system. The metadata may designate, for example, whether the first embedding is to be shared with other robots. The metadata may also information, such as a version code or identifier for the machine learning model used to generate the first embedding. As another example, the metadata may indicate a robot identifier for the robot, an identifier for a type or model of the robot or a role of the robot, and/or data indicating a group of robots that the robot belongs to. The server system can use this information to select which robots should receive the shared embedding, e.g., potentially limiting sharing to take place among robots in the same group, or robots of the same type, model, or role. In some implementations, the first embedding can be sent using an application programming interface (API) for sharing, so that first embedding and other data sent using that API are designated to be shared by virtue of being sent through the API.</p><p id="p-0160" num="0159">The robot receives a second embedding and a corresponding classification from the server system over the communication network (<b>612</b>). The second embedding can be one that a second robot generated. For example, the embedding and corresponding classification that the second robot generated can be for an object that the first robot has not yet learned to recognize.</p><p id="p-0161" num="0160">The robot stores the received embedding and the corresponding classification in the local cache of the robot (<b>614</b>). The robot can then use the embeddings and classifications in the cache, both for objects observed by the robot and for received data representing objects not observed by the robot, to recognize objects when performing tasks.</p><p id="p-0162" num="0161">In some implementations, the robot can subsequently use the first embedding or the second embedding in the local cache to recognize one or more objects in an environment of the robot. When the robot uses the generated first embedding or the generated second embedding to recognize one or more objects in an environment, the robot generates sensor data describing a particular object that the robot observes in the environment of the robot. The robot generates an embedding for the particular object using the second machine learning model and the sensor data describing the particular object. The robot then compares the newly generated embedding for the particular object with the first embedding and the second embedding. The robot assigns a classification for the particular object based on the comparison of the embedding for the particular object with the generated first embedding and the generated second embedding. As noted above, if the embedding for the particular object is not within a threshold level of similarity (e.g., a vector distance between the embeddings is less than a maximum threshold) for any of the embeddings in the cache, the classification indicated by the machine learning model is used. On the other hand, if the embedding for the particular object is within the threshold level of similarity, or at least is similar enough that a confidence score indicates a better match than what the machine learning model indicates, the robot can use the classification corresponding to the most similar embedding in the cache as the classification for the particular object.</p><p id="p-0163" num="0162">In some implementations, the robot can receive a second machine learning model from the server system over the communication network. The received second machine learning model can be one generated by the server system. The second machine learning model can be an updated machine learning model that has been updated based on the combined set of robot learning that occurred across the fleet over a previous time interval, e.g., the last week or month. The robot can use the second machine learning model to recognize one or more additional objects and previously identified objects. Additionally, the robot can remove embeddings generated using the first machine learning model from its local cache.</p><p id="p-0164" num="0163"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram that illustrates an example of a system <b>700</b> for selectively sharing learned information among robots. As discussed above, it is advantageous for robots to share information they learned, so that all the robots in a fleet can learn more rapidly and improve their abilities. However, some information that robots learn may be of low quality, for example, incorrect or conflicting information. Propagating low-quality information throughout a fleet of robots could diminish performance or introduce errors in robot perception. Similarly, training machine learning models with low-quality information could degrade model accuracy. To ensure that the sharing of robot learning improves performance, a computing system can evaluate the information that robots learn and limit sharing of information to items that are beneficial to the fleet. The computing system can also set quality thresholds and quality checks for the training of machine learning models, so that updates to the models improve performance and are based on valid examples. These evaluation and filtering steps can also provide a measure of security by blocking malicious or intentionally incorrect information from propagating between robots and degrading robot performance.</p><p id="p-0165" num="0164">In <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the server system <b>112</b> evaluates the datasets that robots <b>104</b>A-<b>104</b>D have uploaded. The server system <b>112</b> only distributes datasets that pass certain quality tests. Similar to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, each robot <b>104</b>A-<b>104</b>C includes a local cache <b>404</b>A-<b>404</b>C, respectively. Each robot <b>104</b>A-<b>104</b>C also stores and uses the same machine learning model <b>402</b>. Unlike <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the server system <b>112</b> does not automatically share uploaded datasets with the other robots, but instead verifies the quality (e.g., accuracy) of a dataset before distributing it to other robots.</p><p id="p-0166" num="0165">In the example, robot <b>104</b>A transmits newly acquired datasets <b>406</b>A and <b>406</b>B to the server system <b>112</b> over the network <b>110</b>. The robot <b>104</b>A can designate each dataset <b>406</b>A and <b>406</b>B as information that can be shared with the server and with other robots. The server system <b>112</b> will evaluate these datasets <b>406</b>A and <b>406</b>B to determine whether they should be shared, e.g., transmitted to the other robots <b>104</b>B and <b>104</b>C. In some implementations, sharing can be performed to a group of robots using an access control list, to robots within a domain, or to each of the robots in the fleet. To avoid tampering, the robots <b>104</b>A-<b>104</b>D may encrypt the datasets <b>406</b> or securely sign the datasets <b>406</b>, so that the server system <b>112</b> can securely receive the transmitted datasets <b>406</b>.</p><p id="p-0167" num="0166">Before the server system <b>112</b> distributes the datasets <b>406</b>A and <b>406</b>B to the other robots <b>104</b>B and <b>104</b>C, the server system <b>112</b> can assess the quality of the datasets <b>406</b>A and <b>406</b>B, based at least in part on the embeddings in the datasets. The server system <b>112</b> can also store the datasets <b>406</b>A and <b>406</b>B in the database <b>114</b>.</p><p id="p-0168" num="0167">The server system <b>112</b> can include a quality assurance system <b>702</b> that provides a quality assessment of each dataset received from the robots <b>104</b>A-<b>104</b>D. The quality assurance system <b>702</b> includes a quality analysis module <b>704</b> that analyzes each embedding received from the robots <b>104</b>A-<b>104</b>D. The quality analysis module <b>704</b> produces a quality score that indicates the quality of the embedding in the dataset <b>406</b>. How the quality analysis module <b>704</b> analyzes the embedding in the dataset <b>406</b> and produces a quality score that indicates the quality of the embedding will be further explained below. For example, the quality analysis module <b>704</b> produces a quality score of &#x201c;82&#x201d; for the dataset <b>406</b>A. Additionally, the quality analysis module <b>704</b> produces a quality score of &#x201c;46&#x201d; for the dataset <b>406</b>B. In response to determining the quality scores corresponding to the embedding in the dataset, the quality analysis module <b>704</b> compares each of the determined quality scores to a quality threshold.</p><p id="p-0169" num="0168">The quality assurance system <b>702</b> can store and apply a quality threshold to the datasets being assessed. The quality threshold may be predefined or may be dynamically set according to the data assessed. As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the quality analysis module <b>704</b> sets the quality threshold to &#x201c;70,&#x201d; meaning that individual datasets may be required to have a quality score of at least this minimum value before they can be distributed to other robots.</p><p id="p-0170" num="0169">The quality analysis module <b>704</b> compares the quality score of each dataset <b>406</b> to the quality threshold. If the quality analysis module <b>704</b> determines that the quality score is greater than or equal to the quality threshold value, then the quality analysis module <b>704</b> allows the server system <b>112</b> to transmit the dataset to other robots <b>104</b>A-<b>104</b>D. If the quality analysis module <b>704</b> determines that the quality score is less than the quality threshold value, the dataset is not transmitted. In some implementations, the quality analysis module <b>704</b>'s indication to share or not share the dataset <b>406</b> is stored in the database <b>114</b>.</p><p id="p-0171" num="0170">For example, the quality analysis module <b>704</b> compares the quality score of &#x201c;82&#x201d; for dataset <b>406</b>A to the quality threshold &#x201c;70.&#x201d; The quality analysis module <b>704</b> determines that the quality score of &#x201c;82&#x201d; for the dataset <b>406</b>A is greater than the quality threshold of &#x201c;70.&#x201d; As a result, the quality analysis module <b>704</b> indicates to the server system <b>112</b> to share the dataset <b>406</b>A.</p><p id="p-0172" num="0171">The quality analysis module <b>704</b> also compares the quality score of 46 for dataset <b>406</b>B to the quality threshold &#x201c;70.&#x201d; The quality analysis module <b>704</b> determines that the quality score of &#x201c;46&#x201d; for the dataset <b>406</b>B is less than the quality threshold of &#x201c;70.&#x201d; As a result, the quality analysis module <b>704</b> indicates to the server system <b>112</b> to not share the dataset <b>406</b>B.</p><p id="p-0173" num="0172">According to the evaluation of the datasets, the server system <b>112</b> selectively transmits the datasets to the robots <b>104</b>B and <b>104</b>C. For example, the quality analysis module <b>704</b> determines to share the dataset <b>406</b>A and not to share the dataset <b>406</b>B based on the comparison of their respective quality scores to the quality threshold. As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the server system <b>112</b> transmits the dataset <b>406</b>A to the robots <b>104</b>B and <b>104</b>C. Each robot <b>104</b>B and <b>104</b>C then stores the dataset <b>406</b>A in a respective local cache <b>404</b>B, <b>404</b>C. In some implementations, the quality analysis module <b>704</b> can provide an indication, to the robot <b>104</b>A that transmitted it, that the transmitted embedding was of a particular quality. For example, the indication can indicate that the transmitted embedding was of a low quality or of a high quality. By indicating the quality level or a quality score, the robots <b>104</b>A-<b>104</b>D can appropriately weight the dataset <b>406</b>A, e.g., to give more or less credibility to the classification it specifies.</p><p id="p-0174" num="0173">The server system <b>112</b> can instruct the robots <b>104</b>A-<b>104</b>D to store the dataset <b>406</b>A in its local cache. For example, the designation could include a data flag, a label, an instruction, a version number of a local cache, and an indicator in a message header that is transmitted to the robots <b>104</b>A-<b>104</b>D. Version numbers can be provided for individual datasets, for the state of the cache as a whole, and/or to indicate the state of the machine learning model used to generate the embedding in a dataset. By specifying the appropriate version of cache contents, if a robot cancels an update or loses connectivity partway through, the server system can check the version of the most recently completed cache update to determine what updates are needed for a robot. In other examples, the server system <b>112</b> specifies that the dataset <b>406</b>A should be cached by transmitting the dataset <b>406</b>A over a certain source, port, or particular API. The version number of the local cache allows the robots <b>104</b>A-<b>104</b>D to track what embeddings should included in the local cache. The server system <b>112</b> can verify the embeddings stored in the local cache of each robot <b>104</b>A-<b>104</b>D based on the version number of the local cache.</p><p id="p-0175" num="0174">The server system <b>112</b> may synchronize the datasets in the local caches between each of the robots <b>104</b>A-<b>104</b>D. The server system <b>112</b> can periodically synchronize the local caches between each of the robots <b>104</b>A-<b>104</b>D on a daily basis, weekly basis, or a monthly basis. The server system <b>112</b> synchronizes the local caches by retrieving the datasets from each of the robots <b>104</b>A-<b>104</b>D. The server system <b>112</b> distributes the retrieved datasets from each of the robots <b>104</b>A-<b>104</b>D such that each of the robots <b>104</b>A-<b>104</b>D includes datasets from each of the other robots <b>104</b>A-<b>104</b>D. As a result, each of the robots <b>104</b>A-<b>104</b>DA through <b>104</b>D, include the same datasets after each synchronization.</p><p id="p-0176" num="0175"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram that illustrates an example of a quality analysis module <b>704</b> to assess the quality of the information from robots. The quality analysis module <b>704</b> assesses the quality of the received embedding information from the robots <b>104</b>A-<b>104</b>D. The quality analysis module <b>704</b> assesses the datasets by evaluating and filtering the datasets using various criteria. For instance, the various criteria may include accuracy of classification, consistency with reference data, and redundancy with respect to other datasets, to name a few examples.</p><p id="p-0177" num="0176">One technique that the quality analysis module <b>704</b> can use to evaluate datasets is to map embeddings to a high-dimensional space, e.g., a vector space, and assess the relative positions of the embeddings in the space. In general, embeddings encode characteristics of objects, and so embeddings for the same type of object should be similar. This will generally result in the embeddings for the same type of object being roughly clustered together in the high-dimensional space. The separation between clusters can be indicative of discrimination between the object types represented by embeddings in the clusters. These properties can be used to evaluate the quality of datasets that robots <b>104</b>A-<b>104</b>D upload to the server system <b>112</b>. For example, an embedding for an object may be assessed to determine whether the embedding is appropriately close to other embeddings for the same object type, and at least a reasonable distance away from embeddings for different object types.</p><p id="p-0178" num="0177">The quality analysis module <b>704</b> maps the received embeddings in the datasets <b>406</b> to the high-dimensional space <b>802</b>. The high-dimensional space <b>802</b> may be an N-dimensional space, where N represents the number of dimensions (e.g., number of values) in each embedding. For example, each embedding in a dataset may be a 128-element array of 64-bit values, and so may be compared to other embeddings in a 128-dimensional space. Other N-dimensional spaces are possible, depending on the number of dimensions provided in the embedding.</p><p id="p-0179" num="0178">The illustration provided in <figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a legend <b>801</b> to explain plotted elements. The illustration of the high-dimensional space <b>802</b> shows mapped embeddings with each embedding represented by an &#x201c;X&#x201d;. Reference points &#x201c;&#x2022;&#x201d; are also shown to represent the positions of embeddings verified as representing a certain object type. To obtain reference data for assessing quality of newly learned classifications, training data or other high-quality examples can be provided to a machine learning model and used to generate embeddings. For example, an image known to show a cup and accurately classified by the machine learning model to be a cup can be used to generate an embedding for the &#x201c;cup&#x201d; object classification. This embedding, known to be a correct representation for a cup, can serve as a reference point in the high-dimensional space <b>802</b> against which other embeddings can be compared.</p><p id="p-0180" num="0179">When the server system <b>112</b> receives a dataset from a robot, the quality analysis module <b>704</b> performs various steps to assess the quality of the dataset. For example, the quality analysis module <b>704</b> can compare the received embedding <b>825</b> with other embeddings, whether from datasets uploaded by other robots or reference embeddings having known correct classifications.</p><p id="p-0181" num="0180">The quality analysis module <b>704</b> can filter the received embedding <b>825</b> for redundancy in step <b>808</b>, filter the received embedding <b>825</b> for maliciousness in step <b>810</b>, filter the received embedding <b>825</b> for sensor data quality in step <b>812</b>, and filter the received embedding <b>825</b> for the machine learning model version in step <b>814</b>. Finally, the quality analysis module <b>704</b> applies a threshold comparison in step <b>816</b> on the received embedding <b>825</b>.</p><p id="p-0182" num="0181">For example, the received embedding <b>825</b> to the embeddings generated using the machine learning model. The high-dimensional space <b>802</b> includes regions that correspond to various objects. For example, the high-dimensional space <b>802</b> includes a region <b>818</b> that includes embeddings for object type &#x201c;Watch,&#x201d; a region <b>822</b> that includes embeddings for object type &#x201c;Mug,&#x201d; a region <b>826</b> that includes embeddings for object type &#x201c;Shoe,&#x201d; a region <b>830</b> that includes embeddings for object type &#x201c;Pen,&#x201d; and a region <b>836</b> that includes embeddings for object type &#x201c;Paper.&#x201d;</p><p id="p-0183" num="0182">The quality analysis module <b>704</b> maps the received embedding <b>825</b> to a location in the high dimensional space <b>802</b>. The closer the quality analysis module <b>704</b> maps the received embedding <b>825</b> to one of the regions in the high-dimensional space <b>802</b>, the higher likelihood that the received embedding <b>825</b> represents the object described by that region in the high dimensional space <b>802</b>. For example, the quality analysis module <b>704</b> maps the received embedding <b>825</b> in a location nearest to the region <b>822</b> that includes embeddings for object type &#x201c;Mug.&#x201d; Due to the received embedding <b>825</b>'s proximity to the center of the region <b>822</b>, a greater likelihood exists that the received embedding <b>825</b> represents a &#x201c;Mug.&#x201d;</p><p id="p-0184" num="0183">In some implementations, the received embedding <b>825</b> is compared to a reference embedding derived from the machine learning model <b>402</b> stored on the server system <b>112</b>. For example, the reference point &#x201c;&#x2022;&#x201d; in the region <b>822</b> that represents a &#x201c;Mug&#x201d; object illustrates a verified accurate embedding for the object &#x201c;Mug.&#x201d; This reference point represents an embedding derived from the machine learning model <b>402</b> stored on the server system <b>112</b>. The quality analysis module may determine one or more reference embeddings for each object type that the machine learning model <b>402</b> the ideal embedding for each object defined in the high dimensional space <b>802</b> produced by the machine learning model <b>402</b> on the server system <b>112</b>. Specifically, the criteria check <b>804</b> determines the ideal embedding through analyzing various embeddings stored on the database <b>114</b> that represents the same object, such as a &#x201c;Mug.&#x201d; For instance, the criteria check <b>804</b> may use an average of the various embedding outputs to determine the ideal embedding. In another instance, the criteria check <b>804</b> may select one of the various embeddings to represent the ideal embedding. In another instance, the criteria check <b>804</b> may use a heuristic, Bayesian, or any other type of statistical model to determine the ideal embedding. The quality analysis module <b>704</b> stores the ideal embedding in the database <b>114</b> for further comparison.</p><p id="p-0185" num="0184">In some implementations, the quality analysis module <b>704</b> determines which ideal embedding the received embedding <b>825</b> most closely corresponds to in the high dimensional space <b>802</b>. For example, the quality analysis module <b>704</b> can employ a nearest neighbor algorithm to determine which ideal embedding the received embedding <b>825</b> is in nearest proximity to in the high dimensional space <b>802</b>. The quality analysis module <b>704</b> compares the received embedding <b>825</b> to the ideal embedding for a &#x201c;Watch&#x201d; <b>818</b>, to the ideal embedding for a &#x201c;Mug&#x201d; <b>822</b>, to the ideal embedding for a &#x201c;Shoe&#x201d; <b>826</b>, and to the ideal embedding for a &#x201c;Pen&#x201d; <b>830</b>. As a result, the quality analysis module <b>704</b> determines the received embedding <b>825</b> is in nearest proximity to the ideal embedding for a &#x201c;Mug&#x201d; <b>822</b>.</p><p id="p-0186" num="0185">In some implementations, the quality analysis module <b>704</b> compares the classification label corresponding to the received embedding to the label corresponding to the ideal embedding in nearest to the received embedding. For instance, the ideal embedding for the classification label of a &#x201c;Mug&#x201d; may be in nearest proximity to the received embedding <b>825</b> that includes a classification label of &#x201c;Mug.&#x201d; Alternatively, the quality analysis module <b>704</b> may compare the received embedding with one or more other embeddings that correspond to two different classification labels. In response, the quality analysis module <b>704</b> may omit one or both of these embeddings considering that both embeddings are within proximity to one another and yet include different classification labels. The quality analysis module <b>704</b> may omit one or both of these embeddings by not sharing with the other robots <b>104</b>A-<b>104</b>D, not storing in the database <b>114</b>, or not using to train the machine learning model <b>506</b>.</p><p id="p-0187" num="0186">Then, the quality analysis module <b>704</b> measures and compares the distance <b>824</b> between the received embedding <b>825</b> and the ideal embedding point <b>821</b> to a threshold value. For example, the quality analysis module <b>704</b> uses a vector measurement to determine the vector distance <b>824</b> between the received embedding <b>825</b> and the ideal embedding point <b>821</b>. If the quality analysis module <b>704</b> determines the vector distance <b>824</b> is greater than the threshold value, the quality analysis module <b>704</b> discards the received embedding <b>825</b> and waits for the next received embedding from a robot <b>104</b> or the database <b>114</b>. Otherwise, the quality analysis module <b>704</b> proceeds to the next process.</p><p id="p-0188" num="0187">In some implementations, the quality analysis module <b>704</b> filters the received embedding <b>825</b> for redundancy in <b>808</b>. Rather, it is important for the database <b>114</b> to store different embeddings to ensure the robots <b>104</b>A-<b>104</b>D have a more diverse set of data to improve identification of similar and varying objects.</p><p id="p-0189" num="0188">In some implementations, the quality analysis module <b>704</b> filters the received embedding <b>825</b> to avoid insecure or malicious inputs in step <b>810</b>. For example, the quality analysis module <b>704</b> may determine whether an embedding has been tampered with or assigned an incorrect classification. The user <b>106</b> may have entered the wrong classification label for an object, for example, may have taught a robot to provide an erroneous classification for an object. In some instances, a dataset may be falsified, in which the correct embedding may be replaced with a different one. The quality analysis module <b>704</b> may detect these errors or mis-classifications in datasets by comparing the received embedding with a reference embedding for the same classification. For example, if the received embedding is classified as a cup, but the vector distance from an embedding for a cup that is known to be correct, the dataset can be determined to be in error. Similarly, the server system <b>112</b> can use sensor data uploaded with a dataset to generate a corresponding embedding. If the embedding does not match the embedding that was uploaded, then the server system <b>112</b> may determine that the embedding may have been falsified.</p><p id="p-0190" num="0189">In some implementations, the quality analysis module <b>704</b> filters the received embedding <b>825</b> for sensor data quality (step <b>812</b>). The quality analysis module <b>704</b> checks for sensor data quality by analyzing whether an image is too dark, too bright, out of focus, or if the image is not included in the feature data of the dataset. Additionally, the quality analysis module <b>704</b> checks for an obstruction of a detected object in the image and any inconsistencies between shape of depth information and the image data. The quality analysis module <b>704</b> also checks for missing sensor information, time stamps, GPS location information in the additional metadata, and an existence of the additional metadata.</p><p id="p-0191" num="0190">In some implementations, the quality analysis module <b>704</b> may assess whether the image is too dark or too bright, for example, by determining a mean luminance. In some implementations, the quality analysis module <b>704</b> may execute assess whether the image data is out of focus or blurry. For example, the application may perform edge detection or perform a discrete Fourier transform (DFT) to assess image quality. If these processes show poor edge contrast or a low amount of high frequencies, the image data and the dataset as a whole may be considered unsatisfactory and not used for training the model.</p><p id="p-0192" num="0191">In some implementations, the quality analysis module <b>704</b> may utilize an external server for external validation of the image data. For instance, the external server may execute an image recognition process or shape recognition process to classify an object in the image data. The quality analysis module <b>704</b> may transmit the image data and corresponding classification label from the dataset <b>406</b> to the external server to see if the results of the image recognition process or the shape recognition process agrees with the corresponding classification label. If the results of the image recognition process or the shape recognition process matches with the corresponding classification label, the quality analysis module <b>704</b> may pass the dataset <b>406</b> to the process in <b>814</b>. If the results of the image recognition process or the shape recognition process do not match with the corresponding classification label, then the server system <b>112</b> may send a notification to the client device <b>108</b> of the user <b>106</b> that an incorrect classification label exists for the embedding. As such, the server system <b>112</b> may request an edit to the classification label from the user <b>106</b>. Alternatively, the server system <b>112</b> can provide updates to the image recognition process or the shape recognition process if their results are incorrect and the classification label provided in the dataset <b>406</b> is correct.</p><p id="p-0193" num="0192">In some implementations, the quality analysis module <b>704</b> filters the received embedding <b>825</b> for the machine learning model version number in <b>814</b>. For instance, the quality analysis module <b>704</b> analyzes the additional metadata in the dataset <b>406</b>. As previously mentioned, the additional metadata in the dataset <b>406</b> includes a version code number of the current machine learning model stored on the robot <b>104</b> that transmitted the dataset <b>406</b>. The additional metadata can also include locational information corresponding to whether the robot <b>104</b> identified the object represented by the embedding. Additionally, the additional metadata can also include a description of how the robot <b>104</b> determined the classification of the identified object, such as with user input or with comparison to other classification labels and corresponding embeddings stored in the local cache of robot <b>104</b>.</p><p id="p-0194" num="0193">In some implementations, the quality analysis module <b>704</b> compares the retrieved version code number of the current machine learning model stored on the robot <b>104</b> to the version number of the machine learning model stored on the machine learning model <b>402</b> on the server system <b>112</b>. If the quality analysis module <b>704</b> determines the version numbers between the two machine learning models (e.g., the machine learning model on the robot <b>104</b> and the machine learning model on the server system <b>112</b>) matches (e.g., indicating the same machine learning model exists on both the robot <b>104</b> and the server system <b>112</b>), then the quality analysis module <b>704</b> proceeds to the next process. Otherwise, the quality analysis module <b>704</b> indicates that the robot <b>104</b>, such as robot <b>104</b>A that transmitted dataset <b>406</b>A, does not include the latest machine learning model <b>402</b> to the server system <b>112</b>. As such, the criteria check <b>804</b> discards the dataset <b>406</b>A. Additionally, the server system <b>112</b> transmits the machine learning model <b>402</b> to the robot <b>104</b>A. In response, the robot <b>104</b>A will remove its machine learning model <b>402</b> from memory and erase the datasets in its local cache <b>404</b>A. In some implementations, the server system <b>112</b> transmits an instruction to the each robot <b>104</b> to erase the datasets in their respective local cache. The instruction may be included with the transmitted machine learning model <b>402</b>. In other implementations, the server system <b>112</b> transmits the instruction as an individual message. In response to a robot <b>104</b> receiving the instruction, the robot <b>104</b> erases the contents of its local cache.</p><p id="p-0195" num="0194">In some implementations, the quality analysis module <b>704</b> filters the received embedding <b>825</b> by comparing a location of the received embedding <b>825</b> in the high dimensional space <b>802</b> to a threshold value in <b>816</b>. For instance, each region in the high dimensional space <b>802</b> that defines an object, such as region <b>822</b> that defines a &#x201c;Mug,&#x201d; region <b>818</b> that defines a &#x201c;Watch,&#x201d; region <b>836</b> that defines a &#x201c;Paper,&#x201d; region <b>830</b> that defines a &#x201c;Pen,&#x201d; and region <b>826</b> that defines a &#x201c;Shoe.&#x201d; Each of the regions include a threshold region for filtering purposes. For example, threshold region <b>827</b> for the &#x201c;Mug&#x201d; object, threshold region <b>829</b> for the &#x201c;Shoe&#x201d; object, threshold region <b>831</b> for the &#x201c;Pen&#x201d; object, threshold region <b>833</b> for &#x201c;Paper&#x201d; object, and threshold region <b>835</b> for &#x201c;Watch&#x201d; object. Each threshold region defines an N-dimensional region surrounding the ideal embedding for the object type, which allows for an acceptable embedding of the same object type.</p><p id="p-0196" num="0195">In some implementations, the quality analysis module <b>704</b> measures a vector distance between a location of the received embedding <b>825</b> to a location of the ideal embedding closest in proximity to the location of the received embedding <b>825</b> in the high dimensional space <b>802</b>. This procedure allows the quality analysis module <b>704</b> to determine which ideal embedding is in closest proximity to the received embedding <b>825</b> in the high dimensional space <b>802</b>. Once the ideal embedding is determined that is closest to a location of the received embedding <b>825</b>, the quality analysis module <b>704</b> determines whether the location of the received embedding <b>825</b> falls within the threshold region corresponding to the ideal embedding. For example, the quality analysis module <b>704</b> determines the received embedding <b>825</b> is in nearest proximity to the region <b>822</b> that defines a &#x201c;Mug.&#x201d; As a result, the quality analysis module <b>704</b> determines whether the location of the received embedding falls within the threshold region <b>827</b> for the &#x201c;Mug.&#x201d; As illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the received embedding <b>825</b> falls within the threshold region <b>827</b> and passes step <b>816</b>. Alternatively, if the embedding fell outside of the threshold region corresponding to the closest ideal embedding, the quality analysis module <b>704</b> discards the dataset <b>406</b> that includes that embedding.</p><p id="p-0197" num="0196">In other implementations, the quality analysis module <b>704</b> may designate the embeddings that fall within a threshold region, such as threshold region <b>827</b>, as embeddings to transmit to the robots <b>104</b>A-<b>104</b>D. This is because these embeddings indicate a higher likelihood of representing an object inside the threshold region <b>827</b>. As a result, quality analysis module <b>704</b> selects the embeddings found outside the threshold region <b>827</b> to be stored in the database <b>114</b>. In some implementations, the quality analysis module <b>704</b> designates the embeddings found outside the threshold region, such as threshold region <b>827</b>, to not be used train the machine learning model <b>506</b>. In some implementations, the quality analysis module <b>704</b> will discard any embeddings that exist outside a threshold distance from the ideal embedding. For example, the location of embedding <b>837</b> exists outside of a threshold distance from each region in the high dimensional space <b>802</b>. The distance <b>828</b> between the ideal embedding of a &#x201c;shoe&#x201d; region and the embedding <b>837</b> makes As such, the quality analysis module <b>704</b> will discard the dataset corresponding to embedding <b>837</b>.</p><p id="p-0198" num="0197">In some implementations, the quality analysis module <b>704</b> produces a quality score indicative of the quality of the embedding of the received embedding <b>825</b> passes each of the steps <b>806</b> through <b>816</b> in the quality analysis module <b>704</b>. The quality score represents how confident the quality analysis module <b>704</b> is that the received embedding represents an object, such as a &#x201c;Mug&#x201d; or &#x201c;Pen.&#x201d;</p><p id="p-0199" num="0198">In some implementations, the quality analysis module <b>704</b> produces the quality score based on the processes performed by the quality analysis module <b>704</b> to assess the quality of the embedding. For example, as discussed in <b>806</b>, the quality analysis module <b>704</b> utilizes the closeness of the location of the received embedding <b>825</b> to a region in the high dimensional space <b>802</b> that defines on object type to generate a proximity score. The closer the location of the received embedding <b>825</b> to the location of the ideal embedding for that region, the higher the proximity score. Likewise, the farther away the location of the received embedding <b>825</b> to the location of the ideal embedding for that region, the lower the proximity score. The quality analysis module <b>704</b> provides the proximity score as a quality score to the quality assurance system <b>702</b> for further comparison to the quality threshold.</p><p id="p-0200" num="0199">In other examples, the quality analysis module <b>704</b> produces the quality score based on other criteria. The other criteria includes a level quality of feature or sensor data provided by the robot <b>104</b> for the corresponding dataset <b>406</b>. The other criteria can also include the consistency of embeddings in proximity to the received embedding <b>825</b> in the high dimensional space <b>802</b>. For example, how close the embedding values are to one another; how close the characteristics of the feature data corresponding to each embedding in proximity to the received embedding <b>825</b> corresponds to one another, and an identification of the robot that provided the embedding.</p><p id="p-0201" num="0200">In some implementations, the quality analysis module <b>704</b> can produce the quality score of the received embedding <b>825</b> based on how the received embedding <b>825</b> changes the accuracy of the machine learning model <b>506</b>. If the received embedding <b>825</b> increases the accuracy of the machine learning model <b>506</b>, then the quality analysis module <b>704</b> may generate a higher value quality score. Alternatively, if the received embedding <b>825</b> decreases the accuracy of the machine learning model <b>506</b>, then the quality analysis module <b>704</b> may generate a lower value quality score. In some implementations, the accuracy of the machine learning model <b>506</b> may adjust for a particular object type as received by the embedding <b>825</b>.</p><p id="p-0202" num="0201">In some implementations, the quality analysis module <b>704</b> may adjust the quality score of the received embedding <b>825</b> if the corresponding classification label includes personalized information. For instance, if the classification label of the received embedding <b>825</b> includes personalized aspects such as &#x201c;my favorite spoon,&#x201d; &#x201c;john's toy,&#x201d; or &#x201c;Brian's glasses.&#x201d; The quality analysis module <b>704</b> may search for key phrases in the classification label such as &#x201c;my&#x201d; or any name that indicates a personalized aspect of the object represented by the received embedding <b>825</b>. The quality analysis module <b>704</b> may adjust the quality score by increasing a value of the quality score if a personalized aspect is recognized.</p><p id="p-0203" num="0202">In some implementations, a robot <b>104</b> may have a history corresponding to the type of dataset <b>406</b> provided. For instance, robot <b>104</b>C may have a history of providing higher quality embeddings while robot <b>104</b>A may have a history of providing lower quality embeddings. The lower quality embeddings provided by robot <b>104</b>A over time may indicate that the robot <b>104</b>A includes a bad component, such as a broken camera. Alternatively, the lower quality embeddings provided by robot <b>104</b>A may indicate a required update to its locally stored machine learning model <b>402</b>. As a result, the quality analysis module <b>704</b> adjusts the quality score for that received embedding <b>825</b> based on a determination of the robot <b>104</b>'s history for providing high or low quality datasets <b>406</b>.</p><p id="p-0204" num="0203"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram that illustrates an example of a system <b>900</b> for testing a machine learning model <b>506</b>. The machine learning model <b>506</b> represents an updated version of the machine learning model <b>402</b> used in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. Once a set of high-quality datasets is identified, and the machine learning model <b>506</b> is trained to incorporate the classification information represented in those datasets. The machine learning model <b>506</b> is tested after training, or as a part of training. The testing has the general purpose of verifying the accuracy of the machine learning model <b>506</b>. For example, testing can assess whether training effectively achieved the goal of teaching the machine learning model to classify the new types of objects indicated in the datasets uploaded by the robots. If the machine learning model <b>506</b> does not provides an accurate classification in response to the input data for a data set (e.g., provides a classification that is different from the one learned by the robot), then the training may continue until the machine learning model <b>506</b> can accurately classify the object.</p><p id="p-0205" num="0204">As another example, testing can determine whether the machine learning model <b>506</b> maintains an appropriate level of accuracy for classifying objects that it could previously classify. Training the model should improve accuracy not diminish it, so the server system <b>112</b> can enforce rules that training should not degrade performance with some or all categories of objects. If training has decreased the ability of the machine learning model to accurately classify objects of a particular type, the server system <b>112</b> may continue training and use examples of the particular type. This testing and continued training can provide a well-rounded model that is not improperly swayed by new training examples. This way, the performance of a model can steadily improve over time, since users would not want object recognition performance to diminish over time or fluctuate depending on the object type from one update to the next.</p><p id="p-0206" num="0205">The system tests the quality of the machine learning model <b>506</b> in a training module <b>902</b> and an evaluation/testing module <b>904</b>. The system tests the machine learning model <b>506</b>'s quality by providing data from datasets <b>406</b> to the machine learning model <b>506</b> stored on the server system <b>112</b> and in response, assessing the output of the machine learning model <b>506</b>.</p><p id="p-0207" num="0206">In some implementations, the system provides data from the datasets <b>406</b> provided by the robots <b>104</b>A-<b>104</b>D each time the robot learns of a new object. A robot, such as robot <b>104</b>C, may learn of an object, such as a &#x201c;picture,&#x201d; that its local machine learning model <b>402</b> has not yet learned to identify. The output of the machine learning model <b>402</b>, or a layer of the machine learning model <b>402</b>, can produce a new embedding that the robot <b>104</b>C does not yet understand. This is because the robot <b>104</b>C is learning a &#x201c;picture&#x201d; object for the first time. The robot <b>104</b>C requests for a classification label for this new object from the user <b>106</b>. The user <b>106</b> provides a classification label &#x201c;picture&#x201d; for the object &#x201c;picture&#x201d; and the robot <b>104</b>C corresponds the newly received classification label with the newly produced embedding and feature data captured by the robot <b>104</b>C in a dataset <b>406</b>. The robot <b>104</b>C provides the dataset <b>406</b> to the server system <b>112</b> to provide to the other robots and to update the machine learning model <b>506</b> stored on the server system <b>112</b>.</p><p id="p-0208" num="0207">In some implementations, the system provides data from the datasets <b>406</b> retrieved from the database <b>114</b> to test the output or a hidden layer of the machine learning model <b>506</b> stored on the server system <b>112</b>. After the server system <b>112</b> trains the machine learning model <b>506</b> to detect the new datasets <b>406</b> provided by the robots <b>104</b>A-<b>104</b>D, the server system <b>112</b> verifies the datasets <b>406</b> derived from the machine learning model <b>506</b>. The server system <b>112</b> performs this verification with the datasets <b>406</b> from the database <b>114</b> to ensure the correct embedding and classification output can be derived from the machine learning model <b>506</b>. In some implementations, once the server system <b>112</b> determines the correct output can be properly derived from the machine learning model <b>506</b>, the server system <b>112</b> provides the machine learning model <b>506</b> to the robots <b>104</b>A-<b>104</b>D.</p><p id="p-0209" num="0208">In some implementations, training module <b>902</b> seeks to train the machine learning model <b>506</b> with newly received datasets <b>406</b>. For example, robot <b>104</b>A provides a dataset <b>406</b>C for a &#x201c;bicycle&#x201d; object and robot <b>104</b>B provides a dataset <b>406</b>D for a &#x201c;glasses&#x201d; object. The dataset <b>406</b>C includes feature data <b>908</b>, an embedding <b>910</b>, and a classification label <b>912</b> representing the &#x201c;bicycle&#x201d; object. The dataset <b>406</b>D includes feature data <b>914</b>, an embedding <b>916</b>, and a classification label <b>918</b> representing the &#x201c;glasses&#x201d; object.</p><p id="p-0210" num="0209">In some implementations, the server system <b>112</b> provides feature data from each of the datasets <b>406</b> to the machine learning model <b>506</b>. For example, the server system <b>112</b> provides the feature data <b>914</b> of the &#x201c;glasses&#x201d; object to the machine learning model <b>506</b>. As illustrated in the training module <b>902</b>, a layer of the machine learning model <b>506</b> can produce an output that includes an embedding <b>920</b> and a corresponding classification label <b>922</b>. The server system <b>112</b> compares the output classification label <b>922</b> denoting a &#x201c;pencil&#x201d; to the corresponding classification label <b>918</b> provided in the dataset <b>406</b>D. The results of the comparison do not match, as the classification label <b>922</b> denoting a &#x201c;pencil&#x201d; is not the same as the classification label <b>918</b> denoting &#x201c;glasses.&#x201d; In response, the training module <b>902</b> updates the machine learning model <b>506</b>.</p><p id="p-0211" num="0210">In some implementations, the training module <b>902</b> updates the machine learning model <b>506</b> by providing the received feature data <b>914</b> of &#x201c;glasses&#x201d; and the classification label <b>918</b> denoting &#x201c;glasses&#x201d; as input to the machine learning model <b>506</b>. In response, the machine learning model <b>506</b> produces an embedding <b>920</b> that corresponds to the classification label <b>918</b> denoting &#x201c;glasses.&#x201d; The server system <b>112</b> stores the feature data <b>914</b>, the produced embedding <b>920</b>, and the classification label <b>918</b> denoting &#x201c;glasses&#x201d; in the database <b>114</b>. Then, the training module <b>902</b> provides the next subsequent dataset, dataset <b>406</b>C, to the machine learning model <b>506</b> to evaluate its output at a particular layer.</p><p id="p-0212" num="0211">In some implementations, the evaluation module <b>904</b> evaluates the output at a particular layer of a machine learning model <b>506</b>. After the training module <b>902</b> trains the machine learning model <b>506</b>, the evaluation module <b>904</b> evaluates the newly machine learning model <b>506</b> with data stored in the database <b>114</b>. The data stored in the database <b>114</b> includes reference data that is trusted and verified by previous machine learning model versions. The reference data includes a classification label corresponding to an embedding and feature data. For example, reference data can include a classification label for a &#x201c;cup&#x201d; object, an embedding of the &#x201c;cup&#x201d; object, and feature data captured by a robot <b>104</b> describing the &#x201c;cup&#x201d; object. The evaluation model <b>904</b> is required to evaluate the machine learning model <b>506</b> because the machine learning model <b>506</b> must be backwards compatible. For instance, the machine learning model <b>506</b> can identify a &#x201c;cup&#x201d; object, a &#x201c;plate&#x201d; object, and a &#x201c;fork&#x201d; object. The training module <b>902</b> may then train the machine learning model <b>506</b> to identify a &#x201c;camera&#x201d; object. After the training module <b>902</b> trains the machine learning model <b>506</b> to recognize the &#x201c;camera&#x201d; object, the newly machine learning model <b>506</b> needs to be evaluated to ensure it can still recognize the &#x201c;cup&#x201d; object, the &#x201c;plate&#x201d; object, the &#x201c;fork&#x201d; object, and now the &#x201c;camera&#x201d; object.</p><p id="p-0213" num="0212">In some implementations, the reference data can include a high quality data set. The high quality data set can include a high quality embedding that nearly represents the ideal embedding. The high quality embedding can be indicated in the database <b>114</b> by an indicator. The high quality embedding can include high quality image data, high quality RGBD data, a high quality embedding, or a combination of data.</p><p id="p-0214" num="0213">In some implementations, the evaluation module <b>904</b> retrieves feature data <b>924</b> of data <b>906</b> from the database <b>114</b>. The data <b>906</b> includes similar data found in the dataset <b>406</b> for a particular object. For instance, the data <b>906</b> for a particular object such as &#x201c;utensils&#x201d; includes feature data describing of utensils, a classification label <b>922</b> of &#x201c;utensils&#x201d;, and an embedding <b>923</b> that represents utensils. In another example, the data <b>906</b> for a &#x201c;cup&#x201d; object includes feature data <b>924</b> of a cup, classification label <b>926</b> of a &#x201c;cup&#x201d;, and an embedding <b>927</b> that represents a cup. The evaluation module <b>904</b> provides the feature data <b>924</b> of a cup as input to the machine learning model <b>506</b>. The trained machine learning model <b>506</b> produces an embedding <b>928</b> and a corresponding classification label <b>930</b>.</p><p id="p-0215" num="0214">In some implementations, in order to evaluate the machine learning model <b>506</b>, the evaluation model <b>904</b> performs tests under comparison module <b>932</b> to compare the embedding <b>928</b> produced by the machine learning model <b>506</b> to one or more embeddings of a similar object type stored in the database <b>114</b>. If the results match, the evaluation model <b>904</b> may determine the machine learning model <b>506</b> can properly recognize the particular object and proceed to test the next object from the database <b>114</b>.</p><p id="p-0216" num="0215">In some implementations, the comparison module <b>932</b> includes a test for the evaluation module <b>904</b> to evaluate the quality of the machine learning model <b>506</b> using heuristic models <b>919</b>. In addition, the comparison module <b>932</b> includes a test for the evaluation module <b>904</b> that utilizes a threshold comparison <b>921</b>. For instance, the evaluation model <b>904</b> may compare the embedding <b>928</b> with the embeddings stored in the database <b>114</b> using one or more heuristic models. The database <b>114</b> may store multiple embeddings for the &#x201c;cup&#x201d; object. The evaluation model <b>904</b> may use the one or more heuristic models to compare the embedding <b>928</b> produced by the machine learning model <b>506</b> to the multiple embeddings in the database <b>114</b>. As a result, the evaluation module <b>904</b> can determine whether the machine learning model <b>506</b> produced a correct embedding <b>928</b>.</p><p id="p-0217" num="0216">In some implementations, the evaluation model <b>904</b> may use a threshold comparison <b>921</b> to determine whether the machine learning model <b>506</b> produced a correct embedding <b>928</b>. For instance, the evaluation model <b>904</b> may use a vector comparison to compare the bits or bytes between the embedding <b>928</b> and each embedding in the database <b>114</b> that represents a &#x201c;cup&#x201d; object. The evaluation model <b>904</b> may set a threshold, such as no more than 10 rows between the two embeddings can be different for example, in order for the embedding <b>928</b> to pass the assessment test. The evaluation model <b>904</b> can set other threshold comparison values. The evaluation model <b>904</b> utilizes the threshold comparison test <b>921</b> to determine whether the machine learning model <b>506</b> produced a correct embedding <b>928</b>.</p><p id="p-0218" num="0217">In some implementations, the evaluation model <b>904</b> provides an indication <b>934</b> to the server system <b>112</b> after evaluating the machine learning model <b>506</b>. The indication <b>934</b> can indicate the machine learning model <b>506</b> is properly trained. As a result, the server system <b>112</b> can transmit the machine learning model <b>506</b> to the robots <b>104</b>A-<b>104</b>D for storage.</p><p id="p-0219" num="0218">Alternatively, the indication <b>934</b> can indicate the machine learning model <b>506</b> did not recognize one or more objects from the database <b>114</b>. For example, the machine learning model <b>506</b> recognized the &#x201c;cup&#x201d; and the &#x201c;utensils&#x201d; objects but did not recognize the &#x201c;glasses&#x201d; object. As a result, the server system <b>112</b> provides the machine learning model <b>506</b> to the training module <b>902</b> to retrain the machine learning model <b>506</b> to detect the &#x201c;glasses&#x201d; object. In addition, the machine learning model <b>506</b> may not recognize multiple objects, and the training module <b>902</b> can be used to retrain the machine learning model <b>506</b> to detect each of the multiple objects. Once the evaluation module <b>904</b> creates an indication <b>934</b> that the machine learning model <b>506</b> is properly trained, then the server system <b>112</b> transmits the machine learning model <b>506</b> to the robots <b>104</b>A-<b>104</b>D.</p><p id="p-0220" num="0219">In some implementations, the server system <b>112</b> transmits the machine learning model <b>506</b> to each of the robots <b>104</b>A-<b>104</b>D to replace a machine learning model <b>504</b> stored on each of the robots <b>104</b>A-<b>104</b>D. The robots <b>104</b>A-<b>104</b>D remove their previous machine learning model <b>504</b> in response to receiving the machine learning model <b>506</b> from the server system <b>112</b>. In addition, the robots <b>104</b>A-<b>104</b>D clear the datasets <b>406</b> from their respective caches.</p><p id="p-0221" num="0220"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flowchart that illustrates an example of a process <b>1000</b> for assessing and sharing information learned by robots. The process <b>1000</b> may be performed by one or more computers. For simplicity, the process is described as being performed by the server system <b>112</b>, but any appropriate computing system or combination of computing systems can be used.</p><p id="p-0222" num="0221">In the process <b>1000</b>, the server system <b>112</b> receives object classification examples from a plurality of robots (<b>1002</b>). Each object classification example can include (i) an embedding that a robot generated using a machine learning model, and (ii) an object classification corresponding to the embedding. Each robot <b>104</b>A designates each dataset <b>406</b> as &#x201c;new,&#x201d; indicating to the server system <b>112</b> to distribute each dataset <b>406</b> to the other robots. In some implementations, each dataset <b>406</b> can include an embedding, a corresponding classification label, corresponding feature or sensor data, and additional metadata corresponding to the embedding.</p><p id="p-0223" num="0222">In each of the object classification examples, the embedding a robot generated using its machine learning model is based on sensor data generated by the robot describing an object detected by sensors of the robot. For example, the robot captures sensor data of a &#x201c;cup&#x201d; object using sensors of the robot. The robot provides the sensor data as input to the local machine learning model to generate an embedding from the sensor data. The corresponding object classification for the embedding indicates a classification for the detected object. For example, a user may provide the classification label of &#x201c;cup&#x201d; for the &#x201c;cup&#x201d; object by interacting with a client device <b>108</b> or with the robot itself.</p><p id="p-0224" num="0223">In some implementations, the embeddings of the respective classification examples include embeddings generated by different robots that each use a particular machine learning model having a particular training state to generate the embeddings. For example, each robot <b>104</b>A-<b>104</b>D includes the same machine learning model <b>402</b> that includes the same structure and training state. This allows the robots <b>104</b>A-<b>104</b>D to compare embeddings that the robots generate with the embeddings those other robots provide. If two robots use different machine learning models, the two robots may produce different embeddings for the same object, causing a misclassification of the object.</p><p id="p-0225" num="0224">In some implementations, the server system <b>112</b> receives, for each of the received object classification examples, sensor data, generated by a robot that describes the object corresponding to the object classification example. For example, the server system <b>112</b> receives sensor data that includes data indicating the shape, color, size, contour, and texture of the object. The server system <b>112</b> evaluates the quality of a classification example based on the received sensor data from each of the robots <b>104</b>A-<b>104</b>D.</p><p id="p-0226" num="0225">The server system <b>112</b> evaluates the object classification examples based on a similarity of the embeddings of the received object classification examples with other embeddings (<b>1004</b>). The server system <b>112</b>'s quality assurance system <b>702</b> provides a quality assessment of an embedding received from each of the robots <b>104</b>A-<b>104</b>D. The quality analysis module <b>704</b>, included in the quality assurance system <b>702</b>, produces a quality score that indicates the quality of embedding in the dataset <b>406</b> received from each robot <b>104</b>. The quality analysis module <b>704</b> assesses the embedding information by evaluating and filtering the embedding information using various criteria, including comparing distances between embeddings when mapped to a high-dimensional space.</p><p id="p-0227" num="0226">The server system <b>112</b> evaluates the object classification examples by determining a quality score for the particular embedding of a particular object classification example. The server system <b>112</b> determines the quality score by analyzing a level quality of sensor data provided by the plurality of robots. The server system <b>112</b> analyzes the level quality by determining a match between the sensor data and the embedding by providing the sensor data to the machine learning model stored on the server system <b>112</b>. The machine learning model provides an output embedding that the server system <b>112</b> compares to the received particular embedding. Additionally, the server system <b>112</b> compares an output classification label from the machine learning model to an object classification corresponding to the particular embedding from the particular object classification example. The server system <b>112</b> retrains the machine learning model to detect the particular embedding and to produce a correct classification label that matches the object classification in response to the server system <b>112</b> determining that the output classification label from the machine learning model does not match the object classification corresponding to the particular embedding.</p><p id="p-0228" num="0227">Additionally, the server system <b>112</b> determines the quality score by analyzing how the object classification examples adjust an overall accuracy of the machine learning model. For example, if the object classification example improves the overall accuracy of the machine learning model, the server system increases the quality score corresponding to that particular embedding.</p><p id="p-0229" num="0228">The server system <b>112</b> also determines the quality score by analyzing previous levels of quality of other object classification examples provided by the plurality of robots. For example, the server system <b>112</b> analyzes previous sensor data, classification examples, and corresponding quality scores from robots <b>104</b>A-<b>104</b>D when analyzing a particular embedding received from robot <b>104</b>B. The server system <b>112</b> can use this previous data for determining a quality score for a particular embedding from robot <b>104</b>B, for example. Additionally, the server system <b>112</b> can use this previous data for determining a quality score for a particular embedding from any robot <b>104</b>A-<b>104</b>D of a similar object type. The greater the similarities between the current data and any past data from any of the robots <b>104</b>A-<b>104</b>D that produce a high quality score, the greater the quality score will be for the particular embedding.</p><p id="p-0230" num="0229">In some implementations, the quality score represents a likelihood that the object classification matches the object corresponding to the particular object classification example. For example, the quality score represents a likelihood that the object classification of a &#x201c;cup&#x201d; matches the actual object corresponding to the received embedding (e.g., the received embedding represents the &#x201c;cup&#x201d; object). The higher the likelihood that the object classification matches the object corresponding to the received embedding from a robot, such as robot <b>104</b>A, the greater the quality score.</p><p id="p-0231" num="0230">In some implementations, the server system <b>112</b>'s quality assurance system <b>702</b> determines, for a particular embedding of a particular object classification example, a level of similarity of the particular embedding with respect to one or more other embeddings having a same object classification as the particular object classification example. For example, the quality assurance system <b>702</b> determines a level of similarity of a received embedding for a &#x201c;cup&#x201d; object to one or more other embeddings for a &#x201c;cup&#x201d; object. The quality assurance system <b>702</b> may determine the level of similarity by comparing a distance between the two embeddings mapped in a high dimensional space <b>802</b>. The closer the distance (e.g., vector distance) between the two embeddings, the higher level of similarity between the two embeddings.</p><p id="p-0232" num="0231">The server system <b>112</b> selects a subset of the object classification examples based on the evaluation of the quality of the embeddings (<b>1006</b>). For example, the quality analysis module <b>704</b> may designate the embeddings that fall within a threshold region as embeddings to transmit to the robots <b>104</b>A-<b>104</b>D. Being inside the threshold region indicates a higher likelihood of the embedding representing an object. On the other hand, the quality analysis module <b>704</b> stores the embeddings existing outside the threshold region <b>827</b> in the database <b>114</b>. In other implementations, the quality analysis module <b>704</b> discards any embeddings that exist outside a threshold distance from the ideal embedding. By discarding the embedding, the corresponding dataset is also discarded.</p><p id="p-0233" num="0232">The server system <b>112</b> selects the particular object classification example to include in the subset based on the quality score satisfying a threshold. In some implementations, the server system <b>112</b> selects the particular object classification example, such as an embedding representing a &#x201c;cup&#x201d; object, based on the quality score being greater than a threshold value of 60. If the server system <b>112</b> determines the quality score of the particular object classification example is not greater than the threshold value, the server system <b>112</b> does not include the particular object classification example in the subset. Additionally, the server system <b>112</b> may store that particular object classification example in the database <b>114</b>. Alternatively, the server system <b>112</b> may discard that particular object classification example.</p><p id="p-0234" num="0233">In some implementations, the server system <b>112</b> evaluates the object classification example by determining, for a particular embedding of a particular object classification example, a level of similarity of the particular embedding with respect to one or more other embeddings having a different object classification from the particular object classification example. For example, the server system <b>112</b> can compare a distance in the high dimensional space between the received embedding that represents a &#x201c;cup&#x201d; object to a mapped embedding that represents a &#x201c;pencil&#x201d; object. In addition, the server system <b>112</b> can compare a distance in the high dimensional space between the received embedding that represents a &#x201c;cup&#x201d; object to a mapped embedding that represents a &#x201c;hat&#x201d; object. The distances between the received embedding and another mapped embeddings can be measured in the high dimensional spaces as vector distances. As a result, the server system <b>112</b> determines the level of similarity between the received embedding and the one or more other embeddings based on how close they exist in the high dimensional space to one another.</p><p id="p-0235" num="0234">The server system <b>112</b> distributes the subset of the object classification examples to the robots in the plurality of robots (<b>1008</b>). The server system <b>112</b> transmits, to each of the robots in the plurality of robots, the subset of the object classification examples and designates the transmitted classification examples to be stored in a local cache of each of the robots. For example, the server system <b>112</b> tags the subset of the object classification examples with a label such as &#x201c;store&#x2019; to indicate to the robots to store in their respective caches. While the cache is described as being local to the robots, the robots may also take advantage of network-based or &#x201c;cloud&#x201d; storage in some instances. Accordingly, the robots may store some or all of the cached data locally or remotely, dependent on the implementation. Further, using remote storage for a cache can be separate from sharing embeddings for distribution, since each robot may have a private cache or network storage account specifically for that robot.</p><p id="p-0236" num="0235">The server system <b>112</b> distributes the subset of the object classification examples to the robots <b>104</b>A-<b>104</b>D that each store a copy of the same machine learning model <b>402</b>. Each machine learning model <b>402</b> includes the same training state and a similar structure. The server system <b>112</b> distributes the subset of the object classification examples in response to the quality analysis module <b>704</b> analyzing the received embedding.</p><p id="p-0237" num="0236">In some implementations, the server system <b>112</b> synchronizes the caches of the robots in the plurality of robots so that each of the plurality of robots stores the classification examples in the selected subset in a local cache of the robot. For example, the server system <b>112</b> can periodically synchronize the local caches between each of the robots <b>104</b>A-<b>104</b>D on a daily basis, weekly basis, or a monthly basis. After synchronization, each robot in the plurality of robots include the same classification examples in their respective local caches.</p><p id="p-0238" num="0237">In some implementations, the quality analysis module <b>704</b> produces a quality score that indicates a quality of the analyzed embedding. The quality score represents how confident the quality analysis module <b>704</b> is that the received embedding represents a particular object.</p><p id="p-0239" num="0238">In some implementations, the quality threshold <b>704</b> compares the quality score of each dataset <b>406</b> to the quality threshold. If the quality analysis module <b>704</b> determines that the quality score is greater than the quality threshold, then the quality analysis module <b>704</b> allows the server system <b>112</b> to transmit the dataset to each robot <b>104</b>. The robots <b>104</b>A-<b>104</b>D stores the new dataset in a respective local cache <b>404</b>.</p><p id="p-0240" num="0239">In some implementations, the quality analysis module <b>704</b>'s indication to share or not share the dataset <b>406</b> is stored in the database <b>114</b> with the dataset <b>406</b>. The server system <b>112</b> will use the stored indication in the database <b>114</b> to determine whether to use that particular embedding to generate an updated machine learning model <b>506</b>. For example, if the database <b>114</b> stores an indication that the embedding is not to be shared, then the server system <b>112</b> will not use that embedding to generate the updated machine learning model <b>506</b>.</p><p id="p-0241" num="0240">In some implementations, the server system <b>112</b> trains a second machine learning model using the selected subset of the classification examples. For example, the server system generates the updated machine learning model <b>506</b> with the selected subset of the classification examples. The server system <b>112</b> receives, for each of the object classification examples, sensor data that describes the object corresponding to the object classification example. The server system <b>112</b> can receive sensor data from each of the robots <b>104</b>A-<b>104</b>D. For example, the sensor data may include the shape, color, size, contour, and texture of the object. Additionally, the sensor data may include red, blue, green, and depth data provided by RGBD sensors.</p><p id="p-0242" num="0241">During training, the server system <b>112</b> generates an updated version of the machine learning model <b>504</b>. For example, the server system <b>112</b> updates the training state and the structure of the machine learning model <b>504</b> to produce the updated machine learning model <b>506</b>. Once training has progressed to the point that the server system <b>112</b> determines the correct output can be properly derived from the updated machine learning model <b>506</b>, the server system <b>112</b> provides the machine learning model <b>506</b> to the robots <b>104</b>A-<b>104</b>D.</p><p id="p-0243" num="0242">The server system <b>112</b> distributes the trained second machine learning model <b>506</b> to the robots in the plurality of robots. The trained second machine learning model <b>506</b> replaces the machine learning model stored at each of the robots in the plurality of robots. In addition, the server system <b>112</b> provides an instruction to each of the robot in the plurality of robots to remove the distributed classification examples from a local cache of the robot. The trained second machine learning model <b>506</b> includes the ability to detect the objects represented by the removed distributed classification examples. As a result, the distributed classification examples are not required to be stored by the local cache in each of the robots.</p><p id="p-0244" num="0243"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram that illustrates an example system <b>1100</b> for enhancing robot learning. As discussed above, robots can quickly acquire knowledge about their environment by associating information with embeddings that represent observations made by a robot. For example, a robot may capture image data showing an object that is not known to the robot. The robot can use a machine learning model, such as a neural network object classification model, to process sensor data that describes the object and generate an embedding, e.g., a vector or set of values, that represents the object in an encoded form. If the object classification model cannot determine the correct classification of the object, a human user or another robot or system may be able to supply the correct classification. The robot may then store the embedding for the object in association with the classification for the object, in order to quickly learn to recognize the object. When the object is observed again, the robot can process the sensor data and compare the resulting embedding with stored embeddings. When a generated embedding matches or is sufficiently similar to a stored embedding, the robot can determine that the classification for the stored embedding is appropriate.</p><p id="p-0245" num="0244">The ability to generate, store, and use embeddings for object classification and other tasks can allow a robot to quickly and efficiently learn to function in new environments and situations. For example, generating and storing an embedding requires a very small amount of time and computation, and allows the robot to almost instantly expand its knowledge base. By contrast, re-training the machine learning model often requires many training examples as well as computationally demanding iterative training processes.</p><p id="p-0246" num="0245">A further advantage of robot learning using embeddings is the ability for robots to easily exchange embeddings with other robots using the same machine learning model. This allows learned information to be quickly disseminated among a fleet of robots. However, it may not be desirable for a robot to share all of the embeddings that it generates with the remote server system or with other robots in the fleet, especially if the embeddings represent private or confidential information. For example, the robot may share with the server system embeddings related to generic objects (e.g., a chair, a kitchen implement), but it may not share generated embeddings related to proprietary objects (e.g., a proprietary machine), personal objects (e.g., a user's favorite mug), objects that contain personally-identifiable information (e.g., a credit card), or other sensitive objects (e.g., a valuable painting or other object). To control the use of information learned by a robot, some embeddings can be designated as &#x201c;public embeddings&#x201d; that are shared and other embeddings can be designated as &#x201c;private embeddings&#x201d; that are not shared. Although the robot does not share private embeddings with other robots or with a central server system for distribution, the robot may retain the private embeddings in a local cache so that it retains the benefit of the learned information represented by the embeddings. When the embeddings and associated classifications represent learned objects, the private embeddings can enable the robot to recognize the corresponding objects when it encounters them.</p><p id="p-0247" num="0246">The robot may determine the sharing status (e.g., public, private, or limited sharing) of an embedding by analyzing information related to that embedding (e.g., a classification, metadata, tag, label, sensor data, or the embedding itself) using a set of sharing rules. In some cases, the sharing rules may be predetermined and may be based on any of various factors, including the classification of the embedding, the location of the object associated with the embedding, or other factors. In some implementations, a user of the robot may customize the sharing rules. In some examples, a user may instruct the robot that a particular object is private, so that its embedding is not to be shared with the server system or other robots in the fleet. Similarly, a robot may be configured to share embeddings relating to objects observed while the robot is in certain locations, e.g., public places, but not to share embeddings related to object observed in other locations, e.g., in a private residence. In some cases, a robot may be configured to share particular embeddings with only a limited subset of other robots. For example, a robot may share certain embeddings only with other robots in a similar location (e.g., sharing among robots in a factory) or in a similar role (e.g., sharing among robots that are home assistants).</p><p id="p-0248" num="0247">Generally, an embedding generated using a machine learning model has a unique meaning tied to the training state of the machine learning model. The embedding may represent a result of processing input data using the machine learning model, for example, in the case of a neural network model, information generated at an output layer of the neural network or at a hidden layer of the neural network. For a given observation (e.g., an object detected in image data), different machine learning model parameters would produce a different embeddings for the same set of input data. As a result, changing from a first machine learning model to a second machine learning model would mean that the previously stored embeddings, generated using the first machine learning model, would no longer be useful to compare with embeddings generated by the second machine learning model. In other words, changing the machine learning model would potentially cause the learning represented by the cached embeddings to be lost.</p><p id="p-0249" num="0248">For this reason, an updated machine learning model that was not trained with data about an object may not be able to correctly classify the object, even with an embedding generated by a previous model. However, a robot may maintain the set of knowledge represented by embeddings by re-generating new embeddings when an updated machine learning model is received. The robot can generate a new embedding for an object, using the new machine learning model, and use the new embedding in order to continue to recognize the object when using the new network model.</p><p id="p-0250" num="0249">In some implementations, the robot may store raw or processed sensor data associated with a generated private embedding. For example, the robot may store features, statistics, or scores extracted from sensor data related to the private embedding. When the robot receives an updated machine learning model, the robot may regenerate each private embedding in its local cache using the updated machine learning model and stored raw or processed sensor data associated with each private embedding. The robot may then store the regenerated private embeddings, along with the associated classification and the raw or processed sensor data, in its local cache. The robot may subsequently use a regenerated private embedding to recognize and classify the related private object using its updated machine learning model.</p><p id="p-0251" num="0250">In some implementations, after updating the machine learning model or regenerating the private embedding, the robot may remove from its local cache a private embedding generated by a previous version of the machine learning model. In some implementations, the robot may retain information associated with a private embedding, including metadata, raw or processed sensor data, object classification, and sharing status, and associate that information with the regenerated private embedding.</p><p id="p-0252" num="0251">These techniques may provide one or more of the following advantages. By designating some embeddings as private embeddings that are not shared with the server system or other robots in the fleet, individual robots may each protect the privacy of the robot's user while still allowing the robot fleet to benefit from shared learning of information that is not private or confidential. A robot may receive and use embeddings shared by other robots, while still using its own private embeddings to recognize and classify private objects in its surroundings. Further, the particular robot may share generated embeddings that are not private (i.e., embeddings that are limited or public) with the server system for distribution, so that other robots in the fleet may receive and use those public or limited embeddings without compromising the privacy of the particular robot's user. By allowing a user to customize the sharing rules used to determine the sharing status of an embedding, the user can tailor the privacy applied to embeddings according his preference. For example, a user that prefers an increased level of privacy may set sharing rules that allow fewer embeddings to be shared with other robots in the fleet. By storing raw or processed sensor data related to a private embedding, the robot may regenerate private embeddings after the robot receives an updated machine learning model. By storing regenerated private embeddings in its local cache, the robot may recognize and classify objects related to the private embeddings using its updated machine learning model, which may not have been trained on the those particular objects.</p><p id="p-0253" num="0252">Referring still to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, in the system <b>1100</b>, a robot <b>1110</b> receives data from one or more sensors of the robot <b>1110</b>. The computer system of the robot <b>1110</b> uses the sensor data to identify and classify one or more objects in the robot's surroundings. In some implementations, the computer system of the robot <b>1110</b> may include a machine learning model that generates an embedding that is related to an object identified by the robot <b>1110</b>. In some cases, a user may teach the robot the classification of the object. For example, the robot may be located in a user's home and may identify an object that is a mug. The machine learning model of the robot <b>1110</b> may generate an embedding that is related to the mug and the user may teach the robot that the identified object is the mug belonging to a particular resident of the home (i.e., &#x201c;Joe's mug&#x201d;). The robot <b>1110</b> may then store the embedding associated with the object, as well as the classification &#x201c;Joe's mug&#x201d; in a local cache of the robot <b>1110</b>. By storing the embedding and classification in the robot's local cache, the robot can identify the object as &#x201c;Joe's mug&#x201d; in the future, without retraining the machine learning model.</p><p id="p-0254" num="0253">In some implementations, the robot may share embeddings stored in its cache with a remote server system, which may then distribute those embeddings to other robots in the fleet. In some cases, the robot may wish to share only some of the embeddings stored in its cache with other robots. For example, the robot may not share with other robots embeddings it determines to be related to proprietary or personal objects, objects that contain personally-identifiable information, or other sensitive objects. To indicate which embeddings it will share and which it will not share, the robot may designate the embeddings as &#x201c;public&#x201d; (to be shared), &#x201c;private&#x201d; (not to be shared), or &#x201c;limited (to be shared with a subset of robots). For example, a robot located in a home may store an embedding associated with an object classified as a &#x201c;tea cup.&#x201d; Because &#x201c;tea cup&#x201d; is a generic object, the robot may determine that the embedding associated with &#x201c;tea cup&#x201d; may be shared with the robot fleet and so designate the &#x201c;tea cup&#x201d; embedding as &#x201c;public.&#x201d; Alternatively, the robot may also store an embedding associated with an object classified as &#x201c;Joe's mug.&#x201d; Because &#x201c;Joe's mug&#x201d; is a personal object, the robot may determine that the embedding associated with &#x201c;Joe's mug&#x201d; may not be shared with the robot fleet and so designate the &#x201c;Joe's mug&#x201d; embedding as &#x201c;private.&#x201d;</p><p id="p-0255" num="0254">In some implementations, the robot may designate an embedding as &#x201c;limited,&#x201d; where the robot shares the embedding with a subset of other robots (e.g., shares only with robots in a particular location or role). For example, a robot located in a home may determine that even though &#x201c;Joe's mug&#x201d; is a personal object, the embedding associated with it ought to be shared with other robots in the home so that they may also identify it. In this case, the robot may designate &#x201c;Joe's mug&#x201d; as a limited embedding that can only be shared with other robots in the home.</p><p id="p-0256" num="0255">The system <b>1100</b> includes a robot <b>1110</b>, which can have the same features as any of the robots <b>104</b>A-<b>104</b>D discussed above. For example, the robot <b>1110</b> may be a device with computing capabilities that is capable of moving or interacting with its surroundings. The robot <b>1110</b> may include a computing system that includes computer hardware, such as one or more processors, chipsets, general-purpose computing systems, memory systems, and data storage systems. In some cases, the robot <b>1110</b> may include application specific computing hardware, including, but not limited to, microcontrollers, field programmable gate arrays (FPGAs), or application specific integrated circuits (ASICs). The computer hardware of the robot <b>1110</b> may be configured to execute software that controls the movements and processes of the robot <b>1110</b>.</p><p id="p-0257" num="0256">The computer system of the robot <b>1110</b> may also include a local cache <b>1150</b>. The local cache <b>1150</b> may be a memory system or a portion of a memory system of the robot <b>1110</b> that stores data used by the computer system of the robot <b>1110</b> for various computing functions.</p><p id="p-0258" num="0257">The robot <b>1110</b> may also include sensors that collect data from the robot's surroundings. For example, the robot <b>1110</b> may be equipped with one or more cameras that capture images of the robot's surroundings. The sensors may also include LIDAR, radar, proximity sensors, light detectors, or other sensors that enable the robot <b>1110</b> to detect and identify objects in its surroundings. In some implementations, the sensor data <b>1115</b> collected by the sensors may include images of the surroundings of the robot <b>1110</b> captured by one or more cameras of the robot <b>1110</b>.</p><p id="p-0259" num="0258">The surroundings of the robot <b>1110</b> may include one or more objects <b>1120</b>, <b>1121</b>, <b>1130</b> that can be identified by the robot <b>1110</b>. Robots <b>1110</b> located in different environments may identify different objects <b>1120</b>, <b>1121</b>, <b>1130</b> in their surroundings. For example, a robot <b>1110</b> in a home may identify objects <b>1120</b>, <b>1121</b>, <b>1130</b> that include furniture (e.g., table, chair), decorative items (e.g., a vase, a painting), and personal belongings (e.g., a user's favorite mug, a particular child's bed, a pet's favorite toy). A robot <b>1110</b> in a factory may identify objects <b>1120</b>, <b>1121</b>, <b>1130</b> that include equipment (e.g., a machine, a tool), protective gear (e.g., a hardhat, safety glasses), or output products (e.g., an individual manufactured widget, a box of widgets, etc.). A robot <b>1110</b> may identify any of various objects in its surroundings. In example system <b>1100</b>, the objects <b>1120</b>, <b>1121</b>, <b>1130</b> of the robot's local surroundings include a mug (<b>1121</b>), a diamond ring, and a doll (<b>1120</b>), as well as a tea cup and a baseball cap (<b>1130</b>).</p><p id="p-0260" num="0259">The robot <b>1110</b> may identify an object <b>1120</b>, <b>1121</b>, <b>1130</b> in its surroundings by analyzing sensor data <b>1115</b> collected by sensors of the robot <b>1110</b>. For example, the cameras of the robot <b>1110</b> may capture sensor data images <b>1115</b> that depict one or more objects <b>1120</b>, <b>1121</b>, <b>1130</b> in the robot's surroundings. The computer system of the robot <b>1110</b> may analyze the sensor data images <b>1115</b> to determine that there is an object <b>1120</b>, <b>1121</b>, <b>1130</b> in the robot's local surroundings. The computer system of the robot <b>1110</b> may use any of various techniques to identify the object <b>1120</b>, <b>1121</b>, <b>1130</b>. For example, the computer system may process the sensor data image <b>1115</b> that contains an image of the object, then generate a bounding box within the image that follows the contour of the identified object. In the example system <b>1100</b>, the sensor data <b>1115</b> includes images that depict the object <b>1122</b>, which is a doll.</p><p id="p-0261" num="0260">In some implementations, the computer system of the robot <b>1110</b> may process the sensor data <b>1115</b> to extract features related to the identified object <b>1122</b>. For example, the computer system may process the sensor data <b>1115</b> to determine physical features of the object <b>1122</b>, such as location, size, dimension, shape, material composition, orientation, or other physical features. In some cases, the processed sensor data <b>1115</b> data may include extracted physical features, extracted statistical features or scores, or other measures related to the object <b>1122</b> as determined from the collected sensor data <b>1115</b>. The computer system of the robot <b>1110</b> may also analyze or process the sensor data <b>1115</b> in other ways, including, but not limited to, filtering, transforming, truncating, annotating, or augmenting the sensor data <b>1115</b>. In some implementations, the processed sensor data <b>1115</b> may include extracted features that are required as input by a machine learning model <b>1140</b>.</p><p id="p-0262" num="0261">In some implementations, the robot <b>1110</b> may collect or generate additional data related to an identified object <b>1122</b>. For example, the computer system of the robot <b>1110</b> may collect or generate metadata related to an object <b>1122</b> that includes the location of the object <b>1122</b>, the time and date at which the object <b>1122</b> was identified, or other information related to the object <b>1122</b>. The metadata may also include other information related to the object <b>1122</b>, for instance, the metadata may indicate the user with whom the object <b>1122</b> is associated. The metadata may describe the object's size, shape, material, composition or other properties.</p><p id="p-0263" num="0262">In some implementations, the computer system of the robot <b>1110</b> may input the raw or processed sensor data <b>1115</b> into the machine learning model <b>1140</b>. The machine learning model <b>1140</b> may be a part of the computer system of the robot <b>1110</b> and may be implemented in hardware, software, or any combination of hardware and software. The machine learning model <b>1140</b> accepts as input raw or processed sensor data <b>1115</b>, as well as any other data provided to it by the computer system of the robot <b>1110</b>, and outputs an embedding <b>1142</b> that corresponds to the object <b>1122</b> identified from the sensor data <b>1115</b>. For example, the machine learning model <b>1140</b> may accept as input processed sensor data <b>1115</b> that includes extracted features of the object <b>1122</b>. The machine learning model <b>1140</b> may also accept as input metadata associated with the sensor data <b>1115</b> or the object <b>1122</b>, for instance, location information indicating where the sensor data <b>1115</b> was collected. Based on the input sensor data <b>1115</b> and metadata, the machine learning model <b>1140</b> may generate an embedding <b>1142</b> related to the identified object <b>1122</b>.</p><p id="p-0264" num="0263">In some implementations, the machine learning model <b>1140</b>, like the other machine learning models discussed herein, may include a neural network or other type of classifier. For example, the machine learning model <b>1140</b> may be a parametric, non-parametric, or semi-parametric model. It may be a statistical model or empirical model. The machine learning model <b>1140</b> may include various probabilistic classifiers, including Bayes classifiers. The machine learning model <b>1140</b> may be implemented in any combination of hardware, firmware, and/or software.</p><p id="p-0265" num="0264">The embedding <b>1142</b> may be, for instance, a multidimensional vector representation of the output of the machine learning model <b>1140</b>. For example, one embedding representation may represent a 128-element vector, where each element is a 64-bit integer. For clarity in illustration, the embedding <b>1142</b> is represented as a 12-digit integer. In the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the computer system of the robot <b>1110</b> provides sensor data <b>1115</b> related to the doll <b>1122</b> to the machine learning model <b>1140</b>. Based on the input sensor data <b>1115</b>, the machine learning model <b>1140</b> outputs an embedding <b>1142</b> of &#x201c;129057892039&#x201d; related to the doll <b>1122</b>.</p><p id="p-0266" num="0265">In general, the embeddings <b>1142</b> generated by the machine learning model <b>1140</b> are a unique function of the raw or processed sensor data <b>1115</b> related to the object <b>1122</b> and the particular training state of the machine learning model <b>1140</b>. For example, two machine learning models <b>1140</b> that use different parameters or model structures would, in general, generate two different embeddings <b>1142</b> for the same input sensor data <b>1115</b> related to an object <b>1122</b>. As a result, the embeddings <b>1142</b> are generally only useful or meaningful when used with a machine learning model <b>1140</b> that uses the same parameters and training state as the one with which the embedding <b>1142</b> was generated.</p><p id="p-0267" num="0266">In some implementations, the machine learning model <b>1140</b> may also generate a classification related to the object <b>1122</b>. For example, based on the embedding <b>1142</b>, the machine learning model <b>1140</b> may generate a classification for the object <b>1122</b> from a set of known classifications. However, for some objects <b>1122</b>, the user may desire the robot <b>1110</b> to assign a classification to the object <b>1122</b> that is different than the classification generated by the machine learning model <b>1140</b>. For example, the user may wish to correct an incorrect classification generated by the machine learning model <b>1140</b> (e.g., the machine learning model <b>1140</b> classifies an object <b>1122</b> as a &#x201c;pencil&#x201d; when it is actually a &#x201c;pen&#x201d;). As another example, a user may wish to classify the object <b>1122</b> more specifically or differently than the classification generated by the machine learning model <b>1140</b> (e.g., the machine learning model <b>1140</b> classifies an object <b>1122</b> as a &#x201c;mug,&#x201d; and the user would like the robot <b>1110</b> to classify the object <b>1122</b> as &#x201c;Joe's mug.&#x201d;)</p><p id="p-0268" num="0267">In cases where the user desires the robot <b>1110</b> to classify the object <b>1122</b> differently than the generated classification, the user may teach the robot <b>1110</b> to associate a new classification <b>1147</b> with the object <b>1122</b> by providing user input <b>1145</b> to the robot <b>1110</b>. The user may provide the user input <b>1145</b> to the robot <b>1110</b> by any of various means, including, for example, through voice commands, through a peripheral device that communicates with the robot <b>1110</b> (e.g., a keyboard, a mouse, a touchscreen), or through a wireless or wired network connection. In example system <b>1100</b>, the user wishes the robot <b>1110</b> to classify the object <b>1122</b> not simply as a &#x201c;doll,&#x201d; but as &#x201c;Suzy the doll.&#x201d; Accordingly, the user provides user input <b>1145</b> to the robot <b>1110</b> indicating that the object <b>1122</b> is &#x201c;Suzy the doll,&#x201d; and the computer system of the robot associates the classification <b>1147</b> &#x201c;Suzy the doll&#x201d; with the embedding <b>1142</b> related to the object <b>1122</b>.</p><p id="p-0269" num="0268">The computer system of the robot <b>1110</b> may then store the embedding <b>1142</b> and the user-input classification <b>1147</b> related to the object <b>1122</b> in the local cache <b>1150</b> of the robot <b>1110</b>. By storing the embedding <b>1142</b> and the classification <b>1147</b> in the robot's local cache <b>1150</b>, the computing system of the robot <b>1110</b> can identify the object <b>12</b> as the user-provided classification <b>1147</b> in the future without retraining the machine learning model <b>1140</b>. In some implementations, the computer system of the robot <b>1110</b> may also store some or all of the raw or processed sensor data <b>1115</b> and metadata related to an embedding <b>1142</b>, as well as the version identifier of the machine learning model used to generate the embedding <b>1142</b>, in the local cache <b>1150</b>.</p><p id="p-0270" num="0269">In the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the computer system of the robot <b>1110</b> stores the embedding <b>1142</b> of &#x201c;129057892039,&#x201d; the classification <b>1147</b> of &#x201c;Suzy the doll,&#x201d; the sensor data <b>1115</b>, and the version of the machine learning model (version &#x201c;1.0&#x201d;) used by the machine learning model <b>1140</b> to generate the embedding <b>1142</b> in entry &#x201c;3&#x201d; of the local cache <b>1150</b>. Having stored the embedding <b>1142</b> and the classification <b>1147</b> in the local cache <b>1150</b>, the next time the robot <b>1110</b> encounters the object <b>1122</b>, it will be able to identify the object <b>1122</b> as &#x201c;Suzy the doll.&#x201d;</p><p id="p-0271" num="0270">In some implementations, when the robot <b>1110</b> is part of a fleet of robots, the robot <b>1110</b> may share embeddings <b>1142</b> from its local cache <b>1150</b> with a remote server system that distributes the embeddings <b>1142</b> to other robots in the fleet. In some cases, the robot <b>1110</b> may share only some of the embeddings <b>1142</b> stored in its cache <b>1150</b> with other robots. For example, the robot <b>1110</b> may share embeddings <b>1142</b> that represent generic objects, such as a chair, or a book, but the robot <b>1110</b> may not share embeddings <b>1142</b> that represent personal objects&#x2014;such as a driver's license or a user's favorite toy, or valuable objects, such as a piece of jewelry or an expensive painting.</p><p id="p-0272" num="0271">A robot <b>1110</b> may not share the embedding <b>1142</b> associated with an object <b>1122</b> for any of various reasons. For example, the robot <b>1110</b> may not share an embedding <b>1142</b> if the associated object <b>1122</b> is considered restricted or confidential. For example, a robot <b>1110</b> in a factory may not share an embedding <b>1142</b> associated with a proprietary machine or instrument. A robot <b>1110</b> in a hospital may not share an embedding associated with an object <b>1122</b> in a patient's room. A robot <b>1110</b> may not share an embedding <b>1142</b> that contains personally-identifiable information (e.g., a driver's license or ID card). In some implementations, the robot <b>1110</b> may not share an embedding <b>1142</b> if it is associated with a personal object <b>1122</b>. For example, a robot <b>1110</b> in a home may not share an embedding <b>1142</b> associated the homeowner's house key or with a resident's favorite mug.</p><p id="p-0273" num="0272">In some cases, the robot <b>1110</b> may not share an embedding <b>1142</b> because the user instructs the robot <b>1110</b> not to share information related to an object or class of objects. For example, a user may instruct the robot <b>1110</b> not to share any embedding <b>1142</b> related to valuable jewelry in the user's home or the user may instruct the robot <b>1110</b> not to share any embedding related to an object located in the user's bedroom. Generally, the user may instruct the robot <b>1110</b> not to share a particular embedding <b>1142</b> associated with any object <b>1122</b> they wish to remain private.</p><p id="p-0274" num="0273">In some cases, the robot <b>1110</b> may share an embedding <b>1142</b> with only a limited subset of other robots. For example, the robot <b>1110</b> may share a particular embedding <b>1142</b> with other robots in the same organization (e.g., all robots of a given company or at a given restaurant), with other robots of a particular type or domain (e.g., all hospital robots or all kitchen-service robots), or other robots at a given location (e.g., all robots at a home). In other cases, the robot <b>1110</b> may share an embedding <b>1142</b> with all other robots in the fleet.</p><p id="p-0275" num="0274">To indicate which embeddings <b>1142</b> the robot <b>1110</b> will share and which it will not share, the robot <b>1110</b> may associate each embedding <b>1142</b> with a sharing status <b>1162</b>. In some implementations, the robot <b>1110</b> may determine the sharing status <b>1162</b> of each embedding <b>1142</b> as &#x201c;public&#x201d; (those that are shared), &#x201c;private&#x201d; (those that are not shared), or &#x201c;limited&#x201d; (those that are shared with a subset of robots). To determine the sharing status <b>1162</b> of an embedding <b>1142</b>, the computer system of the robot <b>1110</b> may analyze information related to the embedding <b>1142</b> against a set of sharing rules <b>1160</b>.</p><p id="p-0276" num="0275">Sharing of limited embeddings <b>1142</b> to a subset or group of robots may be accomplished via access controlled lists, where the computer system of the robot <b>1110</b> maintains a list of robots with which one or more limited embeddings <b>1142</b> may be shared. In some implementations, the computer system of the robot <b>1110</b> may maintain different access control lists for different limited embeddings <b>1142</b>.</p><p id="p-0277" num="0276">The computer system of the robot <b>1110</b> may use any of various information related to the embedding <b>1142</b> to determine the sharing status <b>1162</b> of the embedding <b>1142</b>. For example, the computer system may use the embedding <b>1142</b>, itself, the classification <b>1147</b> associated with the embedding <b>1142</b>, or metadata associated with the embedding <b>1142</b>. In some cases, the computer system may use metadata that indicates where the object related to the embedding <b>1142</b> was located or when the embedding <b>1142</b> was generated. The computer system of the robot <b>1110</b> may also use other data or metadata associated with the embedding <b>1142</b> to determine the sharing status <b>1162</b> of the embedding <b>1142</b>. For example, the computer system may use sensor data <b>1115</b>, a classification generated by the machine learning model <b>1140</b>, the location of the robot <b>1110</b> (e.g., from GPS), other data from sensors of the robot <b>1110</b>, information provided by a user, or other information to determine the sharing status of an embedding <b>11422</b>.</p><p id="p-0278" num="0277">The sharing rules <b>1160</b> provide criteria that enable the robot <b>1110</b> to determine the sharing status of a particular embedding <b>1142</b>. The sharing rules <b>1160</b> may, for instance, be stored in a memory system of the robot <b>1110</b> and be accessed by a processor of the computing system of the robot <b>1110</b>. In some implementations, the sharing rules <b>1160</b> may be predetermined (e.g., &#x201c;default&#x201d; rules). In some implementations, the sharing rules <b>1160</b> may be learned by the robot <b>1110</b> over time.</p><p id="p-0279" num="0278">Different robots <b>1110</b> may utilize different sharing rules <b>1160</b>. For example, a robot <b>1110</b> in a factory may use one set of sharing rules <b>1160</b>, while a robot <b>1110</b> in a hospital may use a different set of sharing rules <b>1160</b>. In some implementations, the robot <b>1110</b> may utilize different sharing rules <b>1160</b> for objects <b>1122</b> associated with different users.</p><p id="p-0280" num="0279">The sharing rules <b>1160</b> may include rules that consider any of various factors that impact whether the robot <b>1110</b> will share the embedding <b>1142</b>. For example, the sharing rules <b>1160</b> may include rules that consider the location of the object <b>1142</b> (e.g., in a bedroom, in a kitchen, outdoors), the type of the object <b>1142</b> (e.g., a garden tool, a piece of furniture, a personal item, a machine), the classification of the object <b>1142</b> (e.g., a personal item such as &#x201c;Joe's mug&#x201d;), the location of the robot <b>1110</b> (e.g., a home, a factory, a restaurant, a hospital), or other factors. For example, a sharing rule may be that any embedding <b>1142</b> associated with an object <b>1122</b> located in a user's home is a limited embedding to be shared only with other robots in the home, or that any embedding <b>1142</b> associated with an object <b>1122</b> containing personally identifiable information is a private embedding.</p><p id="p-0281" num="0280">In some examples, the robot <b>1110</b> may request the user to determine the sharing status <b>1162</b> of the embedding <b>1142</b> associated with an object <b>1122</b>, where the robot <b>1110</b> designates the sharing status <b>1162</b> of the embedding <b>1142</b> according to the user's response. Here, the user may teach the robot <b>1110</b> the sharing status <b>1162</b> of the embedding by providing input to the robot <b>1110</b> by, for example, providing a voice command to the robot or entering data into a robot through a peripheral device (e.g., a keyboard, mouse, or touchscreen).</p><p id="p-0282" num="0281">In some implementations, a user of the robot <b>1110</b> may customize, modify, or add to the sharing rules <b>1160</b>. For example, a robot <b>1110</b> may have a default sharing rule <b>1160</b> that indicates any embedding <b>1142</b> related to an object <b>1122</b> located in a user's office has a private sharing status <b>1162</b>. In some cases, the user may modify the sharing rule <b>1160</b> to indicate that only embeddings associated with an object <b>1122</b> on the user's desk will have a private sharing status <b>1162</b>, while an embedding <b>1142</b> associated with any object <b>1122</b> that is in the user's office but not on his desk will have a public sharing status <b>1162</b>.</p><p id="p-0283" num="0282">In some implementations, a user of the robot <b>1110</b> may specify the group of robots with which a limited embedding <b>1142</b> is shared. For example, the user of the robot <b>1110</b> may specify that the embedding <b>1142</b> may only be shared with other robots in the same location, or with other robots in the same organization.</p><p id="p-0284" num="0283">Based on the sharing rules <b>1160</b> and/or input from the user, the computer system of the robot <b>1110</b> determines the sharing status <b>1162</b> each embedding <b>1142</b> as either public or private. The computer system of the robot <b>1110</b> associates the sharing status <b>1162</b> with the embedding <b>1142</b> and stores the sharing status <b>1162</b> in the local cache <b>1150</b>. In some implementations, the computer system of the robot <b>1110</b> determines the sharing status <b>1162</b> of an embedding <b>1142</b> when the embedding <b>1142</b> is generated by the machine learning model <b>1140</b>.</p><p id="p-0285" num="0284">In some implementations, the computer system of the robot <b>1110</b> may maintain one or more caches that store the embeddings (e.g., one cache that stores public embeddings and a second cache that stores limited and private embeddings). In some examples, the computer system of the robot <b>1110</b> may allot a particular portion of a cache to store public, private, or limited embeddings and related information.</p><p id="p-0286" num="0285">In the example system <b>1100</b>, the surroundings of the robot <b>1110</b> include private objects <b>1120</b> (&#x201c;diamond ring&#x201d; and &#x201c;Suzy the doll&#x201d;), a limited object <b>1121</b> (&#x201c;Joe's mug&#x201d;) and public objects <b>1130</b> (&#x201c;tea cup&#x201d; and &#x201c;baseball cap&#x201d;). For each object <b>1120</b>, <b>1121</b>, <b>1130</b>, the robot <b>1110</b> has generated an embedding from the machine learning model <b>1140</b> (based on sensor data) and determined a classification (based on user input). For each identified object <b>1120</b>, <b>1121</b>, <b>1130</b>, the computer system determined a sharing status by analyzing information related to the object <b>1120</b>, <b>1121</b>, <b>1130</b> against the set of sharing rules <b>1160</b> and stored that sharing status, associated with the generated embedding, in the local cache <b>1150</b>. Here, for example, the user designated that &#x201c;Joe's mug&#x201d; is to be a limited embedding, shared only with other objects in the home.</p><p id="p-0287" num="0286">Particularly, in the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the metadata associated with the embedding <b>1142</b> indicates that the doll <b>1122</b> was identified in a user's home. The sharing rules <b>1160</b> include a rule that states any object <b>1122</b> located in a user's home, unless otherwise designated by a user, is private. Based on the sharing rules <b>1160</b>, the computer system determines that the embedding <b>1142</b> related to the doll <b>1122</b> is private. Accordingly, the computer system of the robot <b>1110</b> stores in the local cache <b>1150</b> the sharing status <b>1162</b> of &#x201c;private&#x201d; associated with the embedding <b>1142</b>.</p><p id="p-0288" num="0287">In some implementations, the computer system of the robot <b>1110</b> may determine whether to store additional information associated with each embedding <b>1142</b> based on the sharing status <b>1162</b> of the embedding <b>1142</b>. For example, the computer system may only store raw or processed sensor data <b>1115</b> associated with an embedding <b>1142</b> if that embedding <b>1142</b> is private or limited.</p><p id="p-0289" num="0288"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram that illustrates an example system <b>1200</b> for selectively sharing embeddings among a fleet of robots. In the system <b>1200</b>, one or more robots in a fleet of robots share public embeddings from their local caches with a remote server system, but do not share private embeddings. In some cases, the robots may share limited embeddings with a subset of robots in the fleet. Here, the robots use the same machine learning model, so that the embeddings generated by one robot may be used by another robot. The remote server system then distributes the shared embeddings to one or more robots in the fleet of robots. In this way, robots in the fleet are able to leverage the learning of other robots by using public and/or embeddings generated by another robot, enabling each robot to recognize the object associated with an embedding without first encountering the object itself and without retraining the machine learning model. <figref idref="DRAWINGS">FIG. <b>12</b></figref> includes stages (A) and (B), which represent a flow of data.</p><p id="p-0290" num="0289">System <b>1200</b> includes the robot <b>1110</b> of system <b>1100</b>, which has in its local cache <b>1150</b> a set of embeddings generated by the robot <b>1110</b>. In example system <b>1200</b>, the local cache <b>1150</b> initially contains the private, limited, and private embeddings generated by the robot <b>1110</b>, specifically, the limited embedding designated &#x201c;1&#x201d; in the local cache (&#x201c;Joe's mug&#x201d;), the private embeddings designated &#x201c;2&#x201d; and &#x201c;3&#x201d; in the local cache <b>1150</b> (&#x201c;diamond ring&#x201d; and &#x201c;Suzy the doll&#x201d;), and the public embeddings designated &#x201c;4,&#x201d; and &#x201c;5&#x201d; in the local cache <b>1150</b> (&#x201c;tea cup,&#x201d; &#x201c;baseball cap&#x201d;).</p><p id="p-0291" num="0290">System <b>1200</b> also includes one or more other robots <b>1210</b>. The one or more robots <b>1210</b> may be the same type of robot as robot <b>1110</b> or a different type of robot than 1110. Regardless of whether the robots <b>1110</b> and <b>1210</b> are of the same or different types, they can use copies of the same machine learning model for classifying objects.</p><p id="p-0292" num="0291">System <b>1200</b> also includes a remote server system <b>1270</b>. The remote server system <b>1270</b> may be, for example, one or more computer systems, servers, distributed computing platforms, or other processing system. In some implementations, the remote server system <b>1270</b> may be a cloud computing system.</p><p id="p-0293" num="0292">The robot <b>1110</b> and the one or more other robots <b>1210</b> exchange electronic information with the remote server system <b>1270</b>, possibly through a network <b>1280</b>. The network <b>1280</b> may be any communication infrastructure that supports the two way exchange of data between the remote server system <b>1270</b> and the robots <b>1110</b>, <b>1210</b>. The network <b>1280</b> may include a local area network (LAN), a wide area network (WAN), the Internet, or other network topology. The network <b>1280</b> may be any one or combination of wireless or wired networks and may include Ethernet, cellular telephony, and Wi-Fi technologies. Communications through the network <b>1280</b> may be implemented through any one or combination of various protocols, including 802.11, Bluetooth, GSM, 3G, 4G, 5G, LTE, or other custom or standard communication protocol. In some implementations, the network <b>1280</b> may include optical data links.</p><p id="p-0294" num="0293">In stage (A), the robots <b>1110</b>, <b>1210</b> send information related to the shared (public and limited) embeddings stored in their local caches to the server system <b>1270</b>. The robots <b>1110</b>, <b>1210</b> may send various information related to the shared embeddings to the server system <b>1270</b>. For example, the robots <b>1110</b>, <b>1210</b> may send the embedding itself, the classification, the version of the machine learning model used to generate the embedding, and any other information or metadata related to the shared embedding. However, the robots <b>1110</b>, <b>1210</b> do not send information related to private embeddings stored in their local caches to the server system <b>1270</b>.</p><p id="p-0295" num="0294">In example system <b>1200</b>, the robot <b>1110</b> sends, to the server system <b>1270</b>, information associated with the limited embedding &#x201c;1&#x201d; and the public embeddings &#x201c;4&#x201d; and &#x201c;5&#x201d; which are related to the &#x201c;Joe's mug,&#x201d; &#x201c;tea cup,&#x201d; and &#x201c;baseball cap,&#x201d; respectively. The robot <b>1110</b> does not send to the server system <b>1270</b> information associated with the private embeddings &#x201c;2&#x201d; and &#x201c;3,&#x201d; which are related to the private objects &#x201c;diamond ring&#x201d; and &#x201c;Suzy the doll,&#x201d; respectively.</p><p id="p-0296" num="0295">Similarly, during stage (A) the robots <b>1210</b> send to the server system <b>1270</b> information associated with the public and/or limited embeddings stored in their local caches. The robots <b>1210</b> may not send to the server system <b>1270</b> information associated with any private embeddings stored in their local caches.</p><p id="p-0297" num="0296">In stage (B), the robots <b>1110</b>, <b>1210</b> receive from the server system <b>1270</b> embeddings provided to the server system <b>1270</b> by the other robots. A robot <b>1110</b>, <b>1210</b> may receive information related to some or all of the shared embeddings provided to the server system <b>1270</b> by the other robots. The robots <b>1110</b>, <b>1210</b> may store the information associated with these received embeddings in their local caches, and they may use the received embeddings for object identification and classification in the same manner that they use their generated private and public embeddings.</p><p id="p-0298" num="0297">In some implementations, the server system <b>1270</b> may share public embeddings with all robots <b>1110</b>, <b>1210</b> in the fleet, but may share limited embeddings with only a specified subset of robots <b>1110</b>, <b>1210</b> in the fleet. For example, the server system <b>1270</b> may send to the robot <b>1110</b> those public embeddings shared by other robots <b>1210</b>, as well as those limited embeddings shared by robots that operate in similar settings to the robot <b>1110</b> (e.g., share limited embeddings among robots that operate indoors) or that operate in similar roles to the robot <b>1110</b> (e.g., share limited embeddings only among robots that work in factories). The subset of robots <b>1110</b>, <b>1210</b> with which a particular embedding is shared may be specified by the user of the robot that generated the embedding, by the server system <b>1270</b>, by a system administrator, or by another means.</p><p id="p-0299" num="0298">In the example system <b>1200</b>, the robot <b>1110</b> receives information related to a public embedding associated with one received object <b>1235</b> that is classified as &#x201c;elm tree.&#x201d; Particularly, in the example of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the robot <b>1110</b> receives the embedding, classification, and machine learning model version used to generate the embedding associated with the elm tree <b>1235</b>. The computer system of the robot <b>1110</b> adds the information associated with the received &#x201c;elm tree&#x201d; embedding to the local cache <b>1150</b> of the robot <b>1110</b>. In some implementations, the computer system of the robot <b>1110</b> may determine the sharing status of the received embedding to be &#x201c;public,&#x201d; since it was generated as a public embedding by another robot <b>1210</b>. In some implementations, the computer system of the robot <b>1110</b> may determine the sharing status of the received embedding to be &#x201c;received,&#x201d; indicating the embedding was received by the robot <b>1110</b> and generated by a different robot <b>1210</b>. The computer system of the robot <b>1110</b> may store additional metadata with the received embedding, for instance, the date and time the embedding was received, the other robot <b>1210</b> that generated the embedding, the location in which the embedding was generated, or any other information related to the received embedding.</p><p id="p-0300" num="0299">Similarly during stage (B), in the example system <b>1200</b>, the other robots <b>1210</b> receive information related to the public embeddings sent by the robot <b>1110</b> to the server system <b>1270</b>. In the example of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the information associated with the public embeddings related to the &#x201c;tea cup&#x201d; and &#x201c;baseball cap&#x201d; embeddings generated by the robot <b>1110</b> are distributed by the server system <b>1270</b> to the robots <b>1210</b>. The robots <b>1210</b> then store the information associated with the &#x201c;tea cup&#x201d; and &#x201c;baseball cap&#x201d; public embeddings in their local caches. In example system <b>1200</b>, none of the robots <b>1210</b> are in the group of robots authorized to receive the limited embedding associated with &#x201c;Joe's mug&#x201d; (i.e., none of the robots <b>1210</b> are in the same home as the robot <b>1110</b>). As a result, the server system <b>1270</b> does not share the limited embedding &#x201c;Joe's mug&#x201d; with the robots <b>1210</b>.</p><p id="p-0301" num="0300">After adding a received embedding to its local cache, a robot will be able to use the embedding to identify and classify the objects associated with the received embedding. For example, in system <b>1200</b>, though the robot <b>1110</b> has not previously encountered an elm tree and its machine learning model has not been trained to recognize an elm tree, the next time the robot <b>1110</b> encounters an elm tree, it will be able to identify it as an &#x201c;elm tree&#x201d; based on the received embedding. In this way, the robot <b>1110</b> is able to leverage the learning of other robots <b>1210</b> in the fleet to improve its object identification and classification performance.</p><p id="p-0302" num="0301"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram that illustrates an example system <b>1300</b> for regeneration and storage of embeddings by a robot. In some implementations, a robot that has private and/or limited embeddings stored in its local cache may receive, e.g., from a remote server system, an update to its machine learning model. Because embeddings are unique to a given machine learning model, the private and/or limited embeddings stored in the robot's local cache, which were generated using a previous machine learning model, are not compatible with the updated machine learning model, which was trained on the public embeddings. As a result, to enable the robot to continue to identify and classify the objects associated with the private embeddings using the updated machine learning model, the computer system of the robot may generate new, updated private embeddings. The computer system of the robot may generate updated private embeddings by inputting to the updated machine learning model the raw and/or processed sensor data associated with the private embedding. The computer system of the robot then stores the regenerated private embeddings in its local cache, along with associated the raw and/or processed sensor data. In some implementations, the computer system removes the private and/or limited embeddings associated with the previous machine learning model from the cache. <figref idref="DRAWINGS">FIG. <b>13</b></figref> includes stages (A) through (C), which represent a flow of data.</p><p id="p-0303" num="0302">System <b>1300</b> includes the same robot <b>1110</b> of systems <b>1100</b> and <b>1200</b>, as well as the remote server system <b>1270</b> from system <b>1200</b>. The computing system of the robot <b>1110</b> includes a machine learning model <b>1340</b>, as well as a local cache <b>1150</b>. In <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the local cache of the robot <b>1110</b> is shown both before and after regeneration of the private embeddings, as indicated.</p><p id="p-0304" num="0303">In stage (A), the robot <b>1110</b> maintains embeddings in its local cache. Initially, the robot <b>1110</b> maintains the local cache <b>1150</b> (&#x201c;Local Cache Before Regeneration&#x201d;), which stores the private and public embeddings generated by the robot <b>1110</b>, as well as the received public embeddings distributed to the robot <b>1110</b> by the server system <b>1270</b>. In example system <b>1300</b>, the robot's local cache <b>1150</b> stores one limited embedding generated by the robot <b>1110</b> (embedding &#x201c;1&#x201d; classified as &#x201c;Joe's mug&#x201d;), two private embeddings generated by the robot <b>1110</b> (embeddings &#x201c;2&#x201d; and &#x201c;3,&#x201d; classified as &#x201c;diamond ring&#x201d; and &#x201c;Suzy the doll,&#x201d; respectively), two public embeddings generated by the robot <b>1110</b> (embeddings &#x201c;4&#x201d; and &#x201c;5&#x201d;, classified as &#x201c;tea cup&#x201d; and &#x201c;toy blocks,&#x201d; respectively) and one received public embedding (embedding &#x201c;6&#x201d;, classified as &#x201c;elm tree&#x201d;). These embeddings were all generated using version 1.0 of the machine learning model, as indicated in the table of the local cache <b>1150</b>.</p><p id="p-0305" num="0304">In stage (B), the robot <b>1110</b> receives, from the server system <b>1270</b>, an updated machine learning model <b>1343</b>. In some cases, the updated machine learning model <b>1343</b> may have been updated and trained by the server system <b>1270</b> using the public embedding information shared with the server system <b>1270</b> by the robot <b>1110</b> and other robots in the fleet. As a result, a robot <b>1110</b> implementing the updated machine learning model <b>1343</b> may be able to correctly classify objects related to the shared public embeddings without referring to embeddings in its local cache <b>1150</b>. However, because updated machine learning model <b>1343</b> was trained only on public embeddings, in order to continue to correctly classify the objects associated with the private and/or limited embeddings, the robot <b>1110</b> must update and regenerate these embeddings using the updated machine learning model <b>1343</b>.</p><p id="p-0306" num="0305">In some implementations, the server system <b>1270</b> may send the updated machine learning model <b>1343</b> to the robot <b>1110</b> via a network, such as network <b>1280</b> of <figref idref="DRAWINGS">FIG. <b>12</b></figref>. In some examples, the updated machine learning model <b>1343</b> may be a full replacement for the model implemented by the machine learning model <b>1340</b> stored in the computing system of the robot <b>1110</b>. In some examples, the updated machine learning model <b>1343</b> may replace only some of the previous model implemented by the machine learning model <b>1340</b>. For example, the server system <b>1270</b> may send some or all of node weights, interlayer node connectivity information, or intralayer node connectivity information to update the machine learning model. In some examples, the server system <b>1270</b> may update the robot's machine learning model <b>1340</b> by sending only those parameters of the machine learning model <b>1343</b> (e.g., node weights, node interconnectivity) that have changed from the previous model implemented by the machine learning model <b>1340</b>. In example system <b>1300</b>, the machine learning model <b>1340</b> of the robot <b>1110</b> previously implemented version 1.0 of the machine learning model and the server system <b>1270</b> sent to the robot <b>1110</b> the updated version 2.0 of the machine learning model <b>1343</b>.</p><p id="p-0307" num="0306">After receiving the updated machine learning model <b>1343</b> from the server system <b>1270</b>, the computer system of the robot <b>1110</b> updates (e.g., replaces) the machine learning model <b>1340</b> with the updated machine learning model <b>1343</b>. In some implementations, the computer system of the robot <b>1110</b> may update the machine learning model <b>1340</b> by storing one or more parameters associated with the updated machine learning model <b>1343</b> in a memory system of the robot <b>1110</b>. In some examples, the robot <b>1110</b> may overwrite or remove the previous version of the machine learning model from the memory of the robot's computer system.</p><p id="p-0308" num="0307">In stage (C), the computer system of the robot <b>1110</b> regenerates the private and limited embeddings stored in its local cache <b>1150</b>. To regenerate a private embedding <b>1142</b>, the computer system of the robot <b>1110</b> inputs to the updated machine learning model <b>1340</b> the raw and/or processed sensor data <b>1115</b> associated with the original embedding <b>1142</b>. In some examples, the sensor data <b>1115</b> includes the same raw or processed data <b>1115</b> used by the computer system of the robot <b>1110</b> to generate the original embedding <b>1142</b> using a previous version of the machine learning model. The data used by the updated machine learning model <b>1140</b> may include raw sensor data <b>1115</b> collected by sensors on the robot <b>1142</b>, processed sensor data <b>1115</b> that may include features of the object <b>1122</b> extracted by the computer system of the robot <b>1110</b>, as well as other data, including metadata related to the embedding <b>1142</b>. In some cases, the sensor data <b>1115</b> may be stored in the local cache <b>1150</b> of the robot.</p><p id="p-0309" num="0308">Based on inputting the data <b>1115</b> to the updated machine learning model <b>1340</b>, the machine learning model <b>1340</b> generates a new private and/or limited embedding <b>1342</b>. The computer system of the robot <b>1110</b> associates this new embedding <b>1342</b> with the classification <b>1147</b> and sharing status <b>1162</b> associated with the previous embedding <b>1142</b>. The new embedding <b>1342</b> may be different from the previous embedding <b>1142</b> stored in the local cache <b>1150</b> before the update. For example, the new embedding <b>1342</b> may contain different values, or be of a different dimension, than the previous embedding <b>1142</b>.</p><p id="p-0310" num="0309">The computer system of the robot <b>1110</b> then stores the regenerated embedding data <b>1355</b>, which includes the new embedding <b>1342</b>, as well as the classification <b>1147</b>, sharing status <b>1162</b>, and sensor data <b>1115</b> associated with the embedding <b>1342</b>, in the local cache <b>1150</b>. In some implementations, the computer system of the robot <b>1110</b> may also save the version of the machine learning model <b>1343</b> used to generate the new private and/or limited embeddings.</p><p id="p-0311" num="0310">In some implementations, after receiving the updated machine learning model <b>1343</b> or after regenerating the previous private and/or limited embeddings, the computer system of the robot <b>1110</b> may remove from the local cache embeddings associated with a previous version of the machine learning model. For example, the computer system of the robot <b>1110</b> may remove from the local cache information related to private, public, limited, and received embeddings generated by a previous version of the machine learning model.</p><p id="p-0312" num="0311">For example, in system <b>1300</b>, after updating the machine learning model <b>1340</b> with the updated version 2.0 machine learning model <b>1343</b>, the computer system of the robot <b>1110</b> generates three new embeddings to replace the three previous limited and private embeddings (embeddings &#x201c;1&#x201d;, &#x201c;2&#x201d;, and &#x201c;3&#x201d;) in its local cache <b>1150</b> (&#x201c;Local Cache Before Regeneration&#x201d;) that were generated using version 1.0 of the machine learning model. The computer system of the robot <b>1110</b> then associates the classifications, sensor data, and sharing statuses of the previous embeddings with the new embeddings and stores the regenerated embedding data <b>1355</b> into its local cache <b>1150</b> (&#x201c;Local Cache After Regeneration&#x201d;).</p><p id="p-0313" num="0312">The example of <figref idref="DRAWINGS">FIG. <b>13</b></figref> shows the regeneration of private embedding &#x201c;3&#x201d; (<b>1142</b>), which is associated with object <b>1122</b>, &#x201c;Suzy the Doll.&#x201d; The computer system of the robot <b>1110</b> generates a new embedding for the object <b>1122</b> by inputting sensor data <b>1115</b> related to the original embedding <b>1142</b> to the updated machine learning model <b>1340</b>. Here, the machine learning model <b>1340</b> implements the updated version 2.0 of the machine learning model <b>1343</b>, which was provided to the robot <b>1110</b> by the server system <b>1270</b>.</p><p id="p-0314" num="0313">The updated machine learning model <b>1340</b> generates a new private embedding <b>1342</b> of &#x201c;554039487109&#x201d; related to the object <b>1122</b>. Here, the new private embedding <b>1342</b> of &#x201c;554039487109&#x201d; generated using machine learning model version 2.0 (<b>1343</b>) is different than the private embedding <b>1142</b> of &#x201c;129057892039&#x201d; generated using the previous machine learning model version 1.0, even though the embeddings are related to the same object <b>1122</b> and derived using the same data <b>1115</b>.</p><p id="p-0315" num="0314">In the example of <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the computer system of the robot <b>1110</b> associates the new embedding <b>1342</b> with the classification <b>1147</b> (&#x201c;Suzy the doll&#x201d;), sharing status <b>1162</b> (&#x201c;private&#x201d;), and sensor data <b>1115</b> of the previous private embedding <b>1142</b> and then stores the new private embedding <b>1342</b>, as well as the classification <b>1147</b>, the sharing status <b>1162</b>, the sensor data <b>1115</b>, and the version of the machine learning model used to generate the embedding (&#x201c;2.0&#x201d;), in the local cache <b>1150</b> (&#x201c;Local Cache After Regeneration&#x201d;). The computer system of the robot <b>1110</b> also removes from the local cache <b>1150</b> information related to any embeddings generated using the previous machine learning model version 1.0. Here, the computer system of the robot <b>1110</b> removes from the local cache <b>1150</b> information related to the previous embeddings for the private objects <b>1120</b> and limited objects <b>1121</b>, as well as information related to the public embeddings (entries &#x201c;4&#x201d; and &#x201c;5,&#x201d; related to the &#x201c;tea cup&#x201d; and &#x201c;baseball cap,&#x201d; respectively) and the received embedding (entry &#x201c;6&#x201d;, related to the &#x201c;elm tree&#x201d;).</p><p id="p-0316" num="0315">In some implementations, the server system <b>1270</b> may generate the updated the machine learning model <b>1343</b> using both the public and limited embeddings provide by the robot <b>1110</b> (e.g., the updated model was trained using both public and limited embeddings). In this case, the robot <b>1110</b> may be able to identify both public and limited objects using the updated machine learning model <b>1343</b> and the computer system of the robot <b>1110</b> may regenerate and store only the private embeddings.</p><p id="p-0317" num="0316">The system <b>1300</b> may repeat stages (A) through (C) as new machine learning models are provided to the robot <b>1110</b> by the server system <b>1270</b>. For example, the server system <b>1270</b> may send to the robot <b>1110</b> an updated machine learning model version 3.0. In this case, the robot <b>1110</b> would update its machine learning model <b>1140</b> to implement the updated machine learning model version 3.0 and generate new private and/or limited embeddings to replace the embedding data <b>1355</b> that was generated using machine learning model version 2.0. The robot <b>1110</b> may also generate new embeddings for any additional private or limited embeddings that were generated with machine learning model version 2.0.</p><p id="p-0318" num="0317"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flow chart that illustrates a process <b>1400</b> for regeneration and storage of private embeddings by a robot. Briefly, the process <b>1400</b> includes storing, by the robot in a local cache of the robot, first embeddings generated using a first machine learning model, wherein those first embeddings include one or more first private embeddings (<b>1402</b>); receiving, by the robot, a second machine learning model from a server system over a communication network (<b>1404</b>); generating, by the robot, a second private embedding for each of the one or more first private embeddings using the second machine learning model (<b>1406</b>); adding, by the robot, the second private embeddings to a cache of the robot (<b>1408</b>); and removing, by the robot, the one or more first private embeddings from a cache of the robot (<b>1410</b>). This process may be repeated each time a machine learning model of the robot is updated.</p><p id="p-0319" num="0318">In more detail, the process <b>1400</b> includes storing, by the robot, first embeddings generated using a first machine learning model (<b>1402</b>). In some implementations, the first machine learning model may be a model for classifying objects identified by the robot. The machine learning model may include information that describes node arrangement, layer arrangement, node interconnectivity, layer connectivity, interconnection or node weights (e.g., synaptic weights), or other parameters that describe the architecture and function of the machine learning model. The machine learning model may be implemented in any combination of hardware and software. In some implementations, one or more robots in a fleet of robots may implement the same machine learning model. In some implementations, the first machine learning model may have been provided to the robot by a server system. In some implementations, the robot may store a copy of the first machine learning model locally in the hardware of the robot (e.g., in a cache of the robot). In some implementations, the robot may access a copy of the first machine learning model stored on a remote server system (e.g., a cloud computing system).</p><p id="p-0320" num="0319">The robot may store the first embeddings, which are generated using the first machine learning model, in a cache of the robot. An embedding may be, for example, an output of the first machine learning model that represents an object. In some implementations, the embedding may be a multi-dimensional numeric value, one or more numeric values, a vector, tensor, matrix, array, or another numeric representation.</p><p id="p-0321" num="0320">In some implementations, the robot may generate an embedding for an object by inputting, to the machine learning model, sensor data related to the object. In some implementations, the sensor data may be collected by sensors of the robot and may include image or video data, depth data, LIDAR, radar, IR, or proximity sensor data. In some implementations, the robot may process the sensor data before inputting it to the machine learning model to generate an embedding. For example, the robot may process the sensor data to extract statistical or numeric feature values related to the object. The robot may also filter or transform the sensor data. The robot may input some or all of the raw, processed, filtered, or transformed sensor data to the machine learning model to generate an embedding. In some implementations, the robot may store some or all of the sensor data, including raw, processed, filtered, or transformed data, used to generate the one or more first embeddings.</p><p id="p-0322" num="0321">The first embeddings may include one or more first private embeddings, where the first private embeddings are not shared with other robots or the server system. For example, a first private embedding may be represent a private object that a user of the robot does not want to be shared with other robots or the server system (e.g., a personal object, a proprietary or confidential object, a valuable object, etc.).</p><p id="p-0323" num="0322">The robot may determine that a first embedding is a first private embedding by any of various techniques. For example, the robot may determine that a first embedding is a first private embedding by accessing a sharing status associated with the first embedding.</p><p id="p-0324" num="0323">In some implementations, the robot may access metadata associated with the embedding and, based on analyzing the metadata against one or more sharing rules, the robot may determine that the embedding is a private embedding. The metadata may be, for example, the embedding's classification, location, a date or time stamp, another tag or label associated with the embedding or the object the embedding represents. The metadata may also include other information about the embedding or the related object generated or received by the robot. For example, the metadata may include information describing the object's size, shape, material, composition or other properties. In some implementations, the robot may store the metadata associated with the one or more first embeddings in a cache of the robot.</p><p id="p-0325" num="0324">In some implementations, the robot may store the one or more sharing rules in a local memory or cache of the robot. The robot may use the one or more sharing rules to determine whether an identified embedding associated with an object is private. In some examples, the sharing rules may be predetermined (e.g., default rules). In some examples, the robot may receive the sharing rules from the server system. In some examples, a user of the robot may customize or set the sharing rules. In some examples, the robot may learn the sharing rules over time (e.g., through machine learning or other automated learning techniques). The sharing rules may be based on any of various factors, including metadata associated with the embedding, the classification of the embedding, the location of the object associated with the embedding, the user of the robot associated with the embedding, or other factors.</p><p id="p-0326" num="0325">In some implementations, the first embeddings stored in a cache of the robot may include one or more public embeddings that are shared with a server system. The public embeddings may, for example, be embeddings that represent public objects that a user of the robot wants to share with other robots in the fleet of robots.</p><p id="p-0327" num="0326">Similarly to private embeddings, the robot may determine that a particular embedding is a public embedding by any of various techniques. For example, the robot may analyze metadata associated with a particular embedding against one or more sharing rules to determine that the embedding is a public embedding.</p><p id="p-0328" num="0327">In some implementations, where the first embeddings include one or more first private embeddings and one or more first private embeddings, the robot may provide the one or more first public embeddings to the server system and not provide the one or more first private embeddings to the server system.</p><p id="p-0329" num="0328">In some implementations, the robot may determine whether to store sensor data related to one or more first embeddings based on whether a particular embedding is private or public. For example, the robot may determine to store sensor data for each of the one or more first private embeddings, but not to store sensor data for the one or more first public embeddings.</p><p id="p-0330" num="0329">The robot may receive a second machine learning model from a server system over a communication network (<b>1404</b>). The second machine learning model may provide the same functionality as the first machine learning model. In some examples, the second machine learning model may be an updated or retrained version of the first machine learning model. The second machine learning model may have been updated or trained using data provided by one or more robots in the fleet. In some implementations, the second machine learning model may be a one-to-one replacement for the first machine learning model.</p><p id="p-0331" num="0330">Using the second machine learning model, the robot may generate a second private embedding for each of the one or more first private embeddings in the robot's cache (<b>1406</b>). In some implementations, the robot may generate a second private embedding from the stored sensor data used to generate the one or more first private embeddings. For example, the robot may generate a second private embedding by inputting to the second machine learning model raw or processed sensor data used to generate a first private embedding. In some cases, the robot may generate the second private embedding for an object by inputting, to the second machine learning model, feature values derived from the sensor data used to generate the first private embedding for the object.</p><p id="p-0332" num="0331">After generating the second private embeddings, the robot may add the second private embeddings to the cache of the robot (<b>1408</b>). In some examples, the robot may also remove the one or more first private embeddings from the cache of the robot (<b>1410</b>).</p><p id="p-0333" num="0332">In some implementations, the first embeddings in the local cache may include one or more public embeddings. After receiving the second machine learning model, the robot may remove one or more public embeddings from the cache of the robot based on determining that an embedding is a public embedding.</p><p id="p-0334" num="0333">In some implementations, the first embeddings in the local cache may include one or more received embeddings that were received by the robot from the server system over a communication network. For example, the received embedding may have been generated by a different robot in the fleet of robots and shared, by that different robot, with the server system. The robot may determine that a particular embedding of the first embeddings is a received embedding, and, after receiving the second machine learning model, it may remove the particular embedding from the cache based on determining that the particular embedding is one of the received embeddings.</p><p id="p-0335" num="0334">A robot can use various techniques to determine whether to designate information about an observed object as public or private. For example, when a robot obtains sensor data describing an object, the robot can generate an embedding for the object based on the sensor data. The robot determines whether to designate the embedding as a private embedding or a public embedding, then stores the embedding and data designating whether the embedding is a private embedding or a public embedding.</p><p id="p-0336" num="0335">To determine whether information about an observed object should be public (e.g., shared with a server system and other robots) or private, the robot can use sharing rules indicating one or more restrictions on the sharing of information obtained by the robot. The restrictions may limit sharing of information observed by the robot at a time or place, or may limit information describing objects having an object type or object characteristic. Similarly, the restrictions may limit sharing of information that has certain labels applied, for example, personal designations such as a user specifying that an item is a person's personal &#x201c;favorite&#x201d; item. In some instances, a user may provide specific instructions that information about an object should or should not be shared. In general, the restrictions and sharing rules may be set by a user, or may be set by the robot or the server system that facilitates sharing.</p><p id="p-0337" num="0336">For example, objects observed in some places (e.g., outdoors and in public places) may be set a public, while objects observed in private places (e.g., private residences, or places that a user designates as private) may be kept private. When a robot observes an item, the robot can determine a location of the object or the robot. The robot can then determine whether the location is within a predetermined area for which information is not shared, e.g., a room of a residence that the user may have marked as private, or a public place where observations can be shared. Based on determining that the location is within the predetermined area, the robot designating the embedding as public or private accordingly.</p><p id="p-0338" num="0337">As another example, a robot can determine an object type for an object observed by the robot, determine that the object type is one of a predetermined set of object types which have been designated for private or public status, and the robot can determine whether to designate the embedding as a private embedding based on the object type determination.</p><p id="p-0339" num="0338">In general, a robot can access sharing rules and then determine, based on the sensor data for the object or results of processing the sensor data, that the sharing rules restrict sharing of information for the object described by the sharing data. Based on determining that the sharing rules restrict sharing of information for the object, the robot designates the embedding for the object as a private embedding. User input can indicating one or more criteria comprising a time, place, object type, or object characteristic for which sharing of information is restricted. In response to this input, the robot can store a sharing rule that designates embeddings for objects meeting the one or more criteria as private embeddings. Determining whether to designate the embedding as a private embedding or a public embedding can include determining whether the embedding satisfies the one or more criteria.</p><p id="p-0340" num="0339">Embodiments of the invention and all of the functional operations described in this specification may be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the invention may be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer-readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable medium may be a non-transitory computer readable storage medium, a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them. The term &#x201c;data processing apparatus&#x201d; encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus may include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.</p><p id="p-0341" num="0340">A computer program (also known as a program, software, software application, script, or code) may be written in any form of programming language, including compiled or interpreted languages, and it may be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program may be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program may be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p><p id="p-0342" num="0341">The processes and logic flows described in this specification may be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows may also be performed by, and apparatus may also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).</p><p id="p-0343" num="0342">Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer may be embedded in another device, e.g., a tablet computer, a mobile telephone, a personal digital assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name just a few. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media, and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in, special purpose logic circuitry.</p><p id="p-0344" num="0343">To provide for interaction with a user, embodiments of the invention may be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input.</p><p id="p-0345" num="0344">Embodiments of the invention may be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the invention, or any combination of one or more such back end, middleware, or front end components. The components of the system may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (&#x201c;LAN&#x201d;) and a wide area network (&#x201c;WAN&#x201d;), e.g., the Internet.</p><p id="p-0346" num="0345">The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.</p><p id="p-0347" num="0346">Although a few implementations have been described in detail above, other modifications are possible. For example, while a client application is described as accessing the delegate(s), in other implementations the delegate(s) may be employed by other applications implemented by one or more processors, such as an application executing on one or more servers. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other actions may be provided, or actions may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.</p><p id="p-0348" num="0347">While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a sub combination.</p><p id="p-0349" num="0348">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p><p id="p-0350" num="0349">Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method comprising:<claim-text>receiving, over a communication network by a server system from a first robot, a first embedding for a first object generated using a machine learning model stored by the first robot;</claim-text><claim-text>receiving, over the communication network by the server system from the first robot, data indicating a classification for the first object, wherein the first embedding and the data indicating the classification for the first object are stored in a local cache of the first robot; and</claim-text><claim-text>sending, over the communication network by the server system to the first robot, a second embedding and a corresponding classification for storage in the local cache of the first robot, wherein the second embedding is generated by a second robot and corresponds to a second object.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising providing, by the server system to the first robot, an updated machine learning model to replace the machine learning model stored by the first robot.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein updated machine learning models are provided by the server system to the first robot periodically at a first interval larger than a second interval at which embeddings from one or more other robots are provided to the first robot.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the updated machine learning model is determined based on embeddings received by the server system from one or more other robots.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving, by the server system, a plurality of embeddings from a plurality of robots; and</claim-text><claim-text>transmitting, by the server system to the first robot, aggregated embeddings comprising the plurality of embeddings received from the plurality of robots.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising storing, by the server system, a database including a table of classification labels corresponding to embeddings generated by a plurality of robots.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the database further comprises sensor data used to generate the embedding stored in the database.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computer-implemented method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising determining whether to share a particular embedding with one or more robots based on comparing a classification label received with the particular embedding with classification labels in the database.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising;<claim-text>labelling, by the server system, embeddings with corresponding robot type; and</claim-text><claim-text>selectively sharing, by the server system, embeddings with robots based on the corresponding robot type associated with each embedding.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising performing, by the server system, periodic synchronizations in which the server system requests each of a plurality of robots to upload any new embeddings since a last synchronization.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining, by the server system, which of a plurality of robots should receive one or more shared embeddings based on a role currently assigned to each of the plurality of robots.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising evaluating, by the server system, a quality of the data received from the first robot before distributing the data to one or more other robots.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the machine learning model is a neural network model, and wherein the first embedding is derived from output at an output layer of the neural network model.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the machine learning model is a neural network model, and wherein the first embedding is derived from data indicating activations at a hidden layer of the neural network model.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A server system comprising:<claim-text>one or more processors; and</claim-text><claim-text>one or more machine-readable media storing instructions that, when executed by the one or more processors, cause the server system to perform operations comprising:</claim-text><claim-text>receiving, over a communication network by the server system from a first robot, a first embedding for a first object generated using a machine learning model stored by the first robot;</claim-text><claim-text>receiving, over the communication network by the server system from the first robot, data indicating a classification for the first object, wherein the first embedding and the data indicating the classification for the first object are stored in a local cache of the first robot; and</claim-text><claim-text>sending, over the communication network by the server system to the first robot, a second embedding and a corresponding classification for storage in the local cache of the first robot, wherein the second embedding is generated by a second robot and corresponds to a second object.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The server system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the operations further comprising providing, by the server system to the first robot, an updated machine learning model to replace the machine learning model stored by the first robot.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The server system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein updated machine learning models are provided by the server system to the first robot periodically at a first interval larger than a second interval at which embeddings from one or more other robots are provided to the first robot.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The server system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the updated machine learning model is determined based on embeddings received by the server system from one or more other robots.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The server system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the operations further comprising:<claim-text>receiving, by the server system, a plurality of embeddings from a plurality of robots; and</claim-text><claim-text>transmitting, by the server system to the first robot, aggregated embeddings comprising the plurality of embeddings received from the plurality of robots.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. One or more machine-readable media storing instructions that, when executed by one or more processors, cause the one or more processors to perform operations comprising:<claim-text>receiving, over a communication network by a server system from a first robot, a first embedding for a first object generated using a machine learning model stored by the first robot;</claim-text><claim-text>receiving, over the communication network by the server system from the first robot, data indicating a classification for the first object, wherein the first embedding and the data indicating the classification for the first object are stored in a local cache of the first robot; and</claim-text><claim-text>sending, over the communication network by the server system to the first robot, a second embedding and a corresponding classification for storage in the local cache of the first robot, wherein the second embedding is generated by a second robot and corresponds to a second object.</claim-text></claim-text></claim></claims></us-patent-application>