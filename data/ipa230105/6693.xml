<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006694A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006694</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17367195</doc-number><date>20210702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>11</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>116</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>1114</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>1134</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>13</main-group><subgroup>6522</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">LOW-LATENCY SEGMENTED QUASI-CYCLIC LOW-DENSITY PARITY-CHECK (QC-LDPC) DECODER</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Hong Kong Applied Science and Technology Research Institute Co., Ltd.</orgname><address><city>Shatin</city><country>HK</country></address></addressbook><residence><country>HK</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Lam</last-name><first-name>Hing-Mo</first-name><address><city>Tseung Kwan O</city><country>HK</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Chan</last-name><first-name>Hin-Tat</first-name><address><city>Quarry Bay</city><country>HK</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Tsue</last-name><first-name>Ying-Lun</first-name><address><city>Ma On Shan Nt</city><country>HK</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Zhonghui</first-name><address><city>Shatin</city><country>HK</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Kwan</last-name><first-name>Man-Wai</first-name><address><city>Ma On Shan</city><country>HK</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Tsang</last-name><first-name>Kong-Chau</first-name><address><city>KLN</city><country>HK</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems and methods which provide parallel processing of multiple message bundles for a codeword undergoing a decoding process are described. Embodiments provide low-latency segmented quasi-cyclic low-density parity-check (QC-LDPC) decoder configurations in which decoding process tasks are allocated to different segments of the low-latency segmented QC-LDPC decoder for processing multiple bundles of messages in parallel. A segmented shifter of a low-latency segmented QC-LDPC decoder implementation may be configured to process multiple bundles of a plurality of edge paths in parallel. Multiple bundles of messages of a same check node cluster (CNC) are processed in parallel. Additionally, multiple bundles of messages of a plurality of CNCs are processed in parallel.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="120.57mm" wi="142.92mm" file="US20230006694A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="136.14mm" wi="144.95mm" file="US20230006694A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="168.49mm" wi="63.50mm" orientation="landscape" file="US20230006694A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="166.71mm" wi="75.44mm" orientation="landscape" file="US20230006694A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="244.35mm" wi="150.54mm" orientation="landscape" file="US20230006694A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="251.54mm" wi="166.20mm" orientation="landscape" file="US20230006694A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="186.01mm" wi="134.62mm" file="US20230006694A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="215.14mm" wi="158.67mm" file="US20230006694A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="217.25mm" wi="137.24mm" orientation="landscape" file="US20230006694A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="261.28mm" wi="169.08mm" orientation="landscape" file="US20230006694A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="110.49mm" wi="168.49mm" file="US20230006694A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="77.98mm" wi="89.75mm" file="US20230006694A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="90.93mm" wi="113.20mm" file="US20230006694A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="254.59mm" wi="141.90mm" orientation="landscape" file="US20230006694A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="251.21mm" wi="129.54mm" orientation="landscape" file="US20230006694A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="253.07mm" wi="168.57mm" orientation="landscape" file="US20230006694A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="254.51mm" wi="168.49mm" orientation="landscape" file="US20230006694A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="257.73mm" wi="168.40mm" orientation="landscape" file="US20230006694A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="210.65mm" wi="156.29mm" orientation="landscape" file="US20230006694A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="259.42mm" wi="164.34mm" file="US20230006694A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="206.42mm" wi="157.14mm" file="US20230006694A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="209.04mm" wi="157.56mm" file="US20230006694A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="241.81mm" wi="154.26mm" orientation="landscape" file="US20230006694A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="210.31mm" wi="152.23mm" file="US20230006694A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="188.13mm" wi="137.08mm" file="US20230006694A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The present invention relates generally to data communication and, more specifically, to decoding correction encoded data.</p><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0003" num="0002">Data communications are widely relied upon in today's society for a variety of purposes, such as messaging between individuals, broadcast communications, controlling machinery, networking of processor-based systems, etc. The data may be communicated through various channels, including wireline, wireless, and optical channels, and may be subject to various sources of noise, interference, and/or other signal degradation. In cellular radio systems, for example, wireless transmission is used to convey bits of information between various forms of user equipment (e.g., handsets) and base stations. However, the received bits often differ from the transmitted bits, owing to communication errors caused by noise, interference, or poor signal strength.</p><p id="p-0004" num="0003">Accordingly, a number of forms of data encoding techniques have been developed in an attempt to render the data (e.g., data transmissions of high data rate applications) more resilient to the effects of transmission through various channels (e.g., unreliable or noisy channels). For example, error correction codes (ECCs), such as turbo codes, low-density parity-check (LDPC) codes, etc., have been implemented to encode data for data communication.</p><p id="p-0005" num="0004">A LDPC code is a linear error correcting code. LDPC uses a layered decoding technique, wherein a single block row of parity equations is evaluated in each of a plurality of iterations (the bit values are updated every iteration). A valid codeword is indicated by all parity equations being satisfied. LDPC codes are finding increasing use in applications requiring reliable and highly efficient information transfer over bandwidth-constrained or return-channel-constrained links in the presence of corrupting noise.</p><p id="p-0006" num="0005">In order to solve problems with respect to signal degradation the 5G cellular standard specifies use of LDPC code as the data channel code for cellular communications. In particular, the 5G standard uses quasi-cyclic LDPC (QC-LDPC) coding for data correction code. The 5G QC-LDPC decoder supports 51 different sizes of input codeword. Accordingly, the QC-LDPC decoder comprises a hardware configuration supporting the maximum codeword size. Traditional QC-LDPC decoders can only decode one code block of any size at a time (see e.g., U.S. patent numbers 8,739,001 and 9,112,530, the disclosures of which are incorporated herein by reference). If the input codeword size is not the maximum, the traditional QC-LDPC decoder design has some hardware stay in idle in the decoding process.</p><p id="p-0007" num="0006">Base stations in a 5G network support the communications of multiple users simultaneously. Accordingly, a 5G base station receiver operates to decode multiple codewords (e.g., the QC-LDPC encoded data of multiple user transmissions) with different sizes from various connected terminals. A base station serving multiple users should nevertheless provide high throughput QC-LDPC decoding. The iterative decoding techniques typically implemented with respect to QC-LDPC encoded data are relatively logic intensive, and thus often result in the decoder logic consuming almost half the receiver (e.g., base station) computational power. In operation of traditional QC-LDPC decoder designs, in which decoding is performed separately for the multiple codewords for the connected terminals (e.g., performed by multiple instances of the decoder logic and/or processed serially by repeated operation of an instance of decoder logic), high throughput QC-LDPC decoding is accomplished by an inefficient and resource intensive implementation.</p><p id="p-0008" num="0007">A more recent, non-traditional QC-LDPC decoder design described in U.S. Pat. No. 10,826,529 (the disclosure of which is incorporated herein by reference) provides for more efficient and flexible decoding. In particular, this non-traditional QC-LDPC decoder design facilitates decoding of multiple codewords in parallel (e.g., parallel processing of codewords from multiple different users). Nevertheless, appreciable latencies can be experienced in the decoding process of each codeword as a result of the plurality of message processing steps implemented by the QC-LDPC decoder.</p><heading id="h-0003" level="1">BRIEF SUMMARY OF THE INVENTION</heading><p id="p-0009" num="0008">The present invention is directed to systems and methods which provide parallel processing of multiple message bundles for a codeword undergoing a decoding process. Embodiments of the invention provide low-latency segmented quasi-cyclic low-density parity-check (QC-LDPC) decoder configurations in which decoding process tasks (e.g., message processing performed by various nodes) are allocated to different segments of the low-latency segmented QC-LDPC decoder for processing multiple bundles of messages in parallel. A low-latency segmented QC-LDPC decoder of embodiments may utilize a segmented shifter implementation configured for bundling edges (e.g., connections between variable nodes (VNs) and check nodes (CNs)) of one or more check node clusters (CNCs) of the low density segmented QC-LDPC decoder.</p><p id="p-0010" num="0009">A segmented shifter of a low-latency segmented QC-LDPC decoder implementation may be configured to process multiple bundles of a plurality of edge paths (e.g., bundles of Z number of edges) in parallel, wherein a sum of the edge paths of the multiple bundles of edge paths in the low-latency segmented QC-LDPC decoder implementation is less than or equal to the segmented shifter size (e.g., Z<sub>1</sub>+Z<sub>2</sub>+ . . . Z<sub>M</sub>&#x2264;Zmax). Embodiments of the invention may thus be well suited for small size signaling data which uses small codeword size, such as various instances of vehicle-to-everything (V2X) communications requiring low-latency and reliable communication services.</p><p id="p-0011" num="0010">In operation of a low-latency segmented QC-LDPC of embodiments, multiple bundles of messages of a same CNC are processed in parallel. Accordingly, a plurality of decoding processing steps that are traditionally performed serially are instead processed in parallel, reducing the decoding latency for decoding codeword data (e.g., small size signaling data which uses small codeword size). Additionally, in operation according to some embodiments of a low-latency segmented QC-LDPC, multiple bundles of messages of a plurality of CNCs are processed in parallel. Such embodiments further increase the number of decoding processing steps that are processed in parallel, and thus may further reduce the decoding latency for decoding codeword data.</p><p id="p-0012" num="0011">Low-latency segmented QC-LDPC decoders of embodiments are configured to provide an efficient and flexible design for parallel processing. For example, in addition to which provide parallel processing of multiple message bundles for a codeword, embodiments of a low-latency segmented QC-LDPC decoder may process multiple bundles of edges of a plurality of codewords in parallel.</p><p id="p-0013" num="0012">Embodiments of low-latency segmented QC-LDPC decoders may utilize configurations which an efficient hardware implementation that supports partitioning and allocating decoding process tasks to different segments while nevertheless facilitating scalability with respect to the sizes of codewords supported. For example, a sectioned configuration of a segmented shifter, in which each of the left shift and right shift portions are divided into multiple sections sharing the same control signals, may be utilized by a low-latency segmented QC-LDPC decoder of some embodiments. Such configurations may accommodate a satisfactory tradeoff between the number of segments supported and the hardware cost.</p><p id="p-0014" num="0013">The foregoing has outlined rather broadly the features and technical advantages of the present disclosure in order that the detailed description that follows may be better understood. Additional features and advantages will be described hereinafter which form the subject of the claims herein. It should be appreciated by those skilled in the art that the conception and specific embodiments disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present designs. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope as set forth in the appended claims. The novel features which are believed to be characteristic of the designs disclosed herein, both as to the organization and method of operation, together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood, however, that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0015" num="0014">For a more complete understanding of the present disclosure, reference is now made to the following descriptions taken in conjunction with the accompanying drawing, in which:</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a portion of a wireless network in which low-latency segmented quasi-cyclic low-density parity-check (QC-LDPC) decoder configurations of embodiments of the present invention may be utilized;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref> show examples of existing QC-LDPC decoder configurations;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> shows a base graph (BG) matrix and a Tanner graph construction for an example of a QC-LDPC decoder;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> shows operation according to an iterative QC-LDPC decoding process;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIGS. <b>3</b>C and <b>3</b>D</figref> show min stage operation with respect to a QC-LDPC decoder utilizing the min-sum algorithm, showing variable node to check node (V2C) operation of a QC-LDPC decoder;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIGS. <b>3</b>E and <b>3</b>F</figref> show sum stage operation with respect to a QC-LDPC decoder utilizing the min-sum algorithm, showing check node to variable node (C2V) operation of a QC-LDPC decoder;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows BG matrix and a Tanner graph constructions for examples of QC-LDPC decoders implementing higher order lifting parameters;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>C</figref> show slice views for respective Tanner graph constructions of example LDPC codes;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a slice view of a QC-LDPC decoder configuration;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows scalable operation of a typical reconfigurable shifter implementation of a QC-LDPC decoder;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIGS. <b>8</b> and <b>9</b></figref> show examples of reconfigurable segmented scalable shifters as may be utilized according to embodiments of the invention for partitioning into multiple segments of different sizes to perform cyclic shifts of different shift values in parallel;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a slice view of a QC-LDPC decoder configuration utilizing a reconfigurable segmented scalable shifter configuration implementing parallel codeword decoding;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIGS. <b>11</b>, <b>12</b>, and <b>13</b></figref> show slice views of low-latency segmented QC-LDPC decoder configurations utilizing a reconfigurable segmented scalable shifter configuration implementing multi-segment codeword parallel edge bundle processing according to embodiments of the invention;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows a sectioned shifter stage configuration as may be utilized in a low-latency segmented QC-LDPC decoder of embodiments of the present invention; and</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. <b>15</b>A-<b>1</b>, <b>15</b>A-<b>2</b>, and <b>15</b>B-<b>15</b>E</figref> show detail with respect to an implementation of a low-latency segmented QC-LDPC decoder of embodiments of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a portion of a wireless network (e.g., a portion of a 5G cellular network) in which a base station supports the communications of multiple users simultaneously. In particular, <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows base station <b>110</b> supporting wireless communication with user devices <b>115</b><i>a</i>-<b>115</b><i>f</i>. User devices <b>115</b><i>a</i>-<b>115</b><i>f </i>may, for example, comprise various forms of user equipment (e.g., user devices <b>115</b><i>a</i>-<b>115</b><i>e </i>provided in the form of smart phone handsets, user device <b>115</b><i>f </i>provided in the form of a smart vehicle, etc.).</p><p id="p-0032" num="0031">Devices communicating within the wireless network illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> implement a quasi-cyclic low-density parity-check (QC-LDPC) data encoding technique to provide data correction coding rendering the data more resilient to the effects of transmission through the often noisy wireless channels. Accordingly, base station <b>110</b> of the illustrated example is shown implementing QC-LDPC decoder <b>100</b> configured to decode QC-LDPC encoded data of the user transmissions. For example, codewords (e.g., code blocks that may be corrupted due to noise and/or other degradation experienced in the wireless channel) as received from user devices <b>115</b><i>a</i>-<b>115</b><i>f </i>by base station <b>110</b> are input to QC-LDPC decoder <b>100</b> as soft bits or log-likelihood ratio (LLR) values at input <b>101</b>. QC-LDPC decoder <b>100</b> performs an iterative decoding technique in which a block row of parity equations is evaluated in each of a plurality of iterations to converge on a decoded codeword. The hard bits of a decoded codeword are output by QC-LDPC decoder <b>100</b> at output <b>102</b>.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref> show examples of existing QC-LDPC configurations that may be implemented to decode QC-LDPC encoded data of the transmissions within the wireless network illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In particular, as described in further detail below, single codeword QC-LDPC decoder <b>200</b><i>a </i>of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> comprises a traditional QC-LDPC decoder configuration (e.g., corresponding to decoder configurations shown in U.S. patent numbers 8,739,001 and 9,112,530) and parallel codeword QC-LDPC decoder <b>200</b><i>b </i>of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> comprises a more recent QC-LDPC decoder configuration (e.g., corresponding to decoder configurations shown in U.S. Pat. No. 10,826,529). Single codeword QC-LDPC decoder <b>200</b><i>a </i>or parallel codeword QC-LDPC coder <b>200</b><i>b </i>may, for example, be utilized in an implementation of QC-LDPC decoder <b>100</b> in the wireless network of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0034" num="0033">Referring first to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, a traditional QC-LDPC decoder commonly used by receivers in 5G cellular networks to decode data encoded using QC-LDPC code for data correction is shown. Single codeword QC-LDPC decoder <b>200</b><i>a </i>of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> comprises a 5G QC-LDPC error correction code decoder operable to receive encoded bits provided by received noisy signal <b>210</b><i>a </i>(e.g., in LLR), and output decoded bits as decoded result <b>220</b><i>a</i>. In operation, single codeword AC-LDPC decoder <b>200</b><i>a </i>implements layered decoding logic for iteratively processing parity equations with respect to a single code block (e.g., codeword) of the encoded bits, wherein a valid codeword is indicated by all parity equations being satisfied.</p><p id="p-0035" num="0034">The input to single codeword QC-LDPC decoder <b>200</b><i>a </i>is a code block having a size dependent upon various factors. In 5G cellular networks according to current standards, base graph (BG) matrixes BG1 and BG2 are the two sizes of BG matrixes, wherein BG1=46&#xd7;68 and BG2=42&#xd7;52. BG1 has eight different matrixes for different values of lifting parameter Z and BG2 has another eight different matrixes for different values of lifting parameter Z, as shown in the table below. As can be seen from the table below, the lifting parameter Z={2, . . . , 384} in this 5G cellular network example. The bit-width (K) of LLR is often 6 or 8 bits, although other bit-widths may be used. The code block size in 5G cellular network implementations is proportional to the value of lifting parameter Z (e.g., the size of the lifting parameter Z is small if the codeword size is small). Using the 5G BG1 and K=8 bits configuration as an example, the code block size of the single codeword QC-LDPC decoder input=K*68*Z, wherein the code block may generally range from 816 bits (e.g., where LLR bit-width K=6 and lifting parameter Z=2) to 208,896 bits (e.g., where LLR bit-width K=8 and lifting parameter Z=384).</p><p id="p-0036" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="70pt" align="center"/><colspec colname="2" colwidth="147pt" align="center"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>Set index (i<sub>LS</sub>)</entry><entry>Set of lifting parameter sizes (Z)</entry></row><row><entry>(Index of BG Matrix)</entry><entry>(Value of Z Corresponding to BG Matrix Index)</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>0</entry><entry>{2, 4, 8, 16, 32, 64, 128, 256}</entry></row><row><entry>1</entry><entry>{3, 6, 12, 24, 48, 96, 192, 384}</entry></row><row><entry>2</entry><entry>{5, 10, 20, 40, 80, 160, 320}</entry></row><row><entry>3</entry><entry>{7, 14, 28, 56, 112, 224}</entry></row><row><entry>4</entry><entry>{9, 18, 36, 72, 144, 288}</entry></row><row><entry>5</entry><entry>{11, 22, 44, 88, 176, 352}</entry></row><row><entry>6</entry><entry>{13, 26, 52, 104, 208}</entry></row><row><entry>7</entry><entry>{15, 30, 60, 120, 240}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0037" num="0035">The output of single codeword QC-LDPC decoder <b>200</b><i>a </i>comprises decoded bits (hard bit) derived from a code block input, wherein this output is also proportional to the value of lifting parameter Z. Continuing with the 5G BG1 example, output (D bits) of the single codeword QC-LDPC decoder (hard bit)=68*Z (e.g., D=136 bits where the lifting parameter Z=2 to D=26,112 bits where the lifting parameter Z=384). Accordingly, implementations of single codeword QC-LDPC decoder <b>200</b><i>a </i>configured for use with respect to 5G BG1 must be configured to accommodate lifting parameter Z=384, although QC-LDPC decoding of code blocks using smaller lifting parameters (i.e., lifting parameter Z&#x3c;384) may nevertheless be processed with the remaining capacity of the single codeword QC-LDPC decoder remaining idle (e.g., the idle portion of a traditional QC-LDPC decoder is almost inversely proportional to the value of the lifting parameter Z used).</p><p id="p-0038" num="0036">It can be appreciated from the foregoing that single codeword QC-LDPC decoder <b>200</b><i>a </i>can only decode one code block or codeword at a time. Additional code blocks are separately decoded (e.g., by multiple instances of single codeword QC-LDPC decoder <b>200</b><i>a </i>and/or by repeated operation of single codeword QC-LDPC decoder <b>200</b><i>a</i>) by this traditional configuration (e.g., one code block of any size of Z={<b>2</b>, . . . , 384}). Accordingly, in order to decode codewords for the communications of multiple devices (e.g., user devices <b>115</b><i>a</i>-<b>115</b><i>f </i>of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), multiple codes words may be processed serially by single codeword QC-LDPC decoder <b>200</b><i>a </i>and/or multiple instances of single codeword QC-LDPC decoder <b>200</b><i>a </i>may be implemented in parallel. Supporting the communications of multiple users simultaneously (e.g., base station <b>110</b> serving a plurality of user devices of user devices <b>115</b><i>a</i>-<b>115</b><i>f</i>) often requires high throughput of the QC-LDPC decoder. Accordingly, many usage scenarios may necessitate the hardware and/or processor intensive solution of implementing multiple instances of the single codeword QC-LDPC decoder.</p><p id="p-0039" num="0037">Referring now to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, a more recent QC-LDPC decoder configuration as may be used by receivers in 5G cellular networks to decode data encoded using QC-LDPC code for data correction is shown. Parallel codeword QC-LDPC decoder <b>200</b><i>b </i>is configured to receive encoded bits provided by a plurality of received signals <b>210</b><i>b</i>-<b>1</b> through <b>210</b><i>b</i>-<i>n </i>(e.g., bits in the LLR domain transmitted by a plurality of connected terminals, such as user devices <b>115</b><i>a</i>-<b>115</b><i>f </i>of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), and output decoded bits (e.g., hard bits) as decoded results <b>220</b>-<b>1</b> through <b>220</b>-<i>n </i>(e.g., corresponding to the decoded code blocks for a plurality of connected terminals).</p><p id="p-0040" num="0038">The codewords decoded in parallel by parallel codeword QC-LDPC decoder <b>200</b><i>b </i>have a total combined or aggregated lifting parameter size that is less than or equal to the maximum lifting parameter size utilized with respect to the encoded data. For example, in a 5G BG1 configuration where Z=384, the n codewords decoded by parallel codeword QC-LDPC decoder <b>200</b><i>b </i>have a total combined lifting parameter size (e.g., ZIN_1+ZIN_2+ . . . ZIN_n) that is less than or equal to Z (i.e., <b>384</b> in this example). The overall input of the parallel codeblock QC-LDPC decoder may be formed by combining code blocks that are using the same BG matrix index (e.g., the table above), wherein such code blocks may be of the same or different sizes. For example, to use the same BG matrix, code blocks with value of Z from the same BG matrix index set may be used (e.g., combine code blocks with Z={15, 30, 60, 120 and 240}, where all those code blocks use the BG matrix index <b>7</b>).</p><p id="p-0041" num="0039">It can be appreciated from the foregoing that parallel codeword QC-LDPC decoder <b>200</b><i>b </i>facilitates higher QC-LDPC decoder throughput than a single instance of single codeword QC-LDPC decoder <b>200</b><i>a</i>, such as for simultaneously supporting the communications of multiple users. However, as will be better understood from the description below, appreciable latencies can be experienced in the decoding process of each codeword as a result of the plurality of message processing steps implemented by the QC-LDPC decoder. Accordingly, neither single codeword QC-LDPC decoder <b>200</b><i>a </i>nor parallel codeword QC-LDPC decoder <b>200</b><i>b </i>may be particularly well suited for applications requiring low latency, such as vehicle-to-everything (V2X) communications. Low-latency segmented QC-LDPC decoder configurations, in which decoding process tasks are allocated to different segments of the low-latency segmented QC-LDPC decoder for processing multiple bundles of messages in parallel, provided in accordance with concepts of the present invention facilitate low-latency decoding of codewords (e.g., speeding up the decoding process by implementing parallel processing of bundles of messages of a codeword being decoded).</p><p id="p-0042" num="0040">To aid in understanding concepts of the present invention, it is helpful to understand LDPC decoding operation. LDPC is a linear block code that uses a layered decoding technique, wherein a single block row of parity equations is evaluated in each of a plurality of iterations (the bit values are still updated every iteration) and a valid codeword is indicated by all parity equations being satisfied. Being a linear block code, LDPC codes may be descried via matrices. LDPC codes may also be described using graphical representations (e.g. Tanner graphs).</p><p id="p-0043" num="0041">LDPC codes used according to current 5G cellular standards comprise quasi-cyclic LDPC (QC-LDPC) codes. QC-LDPC codes are characterized by two parameters, namely lifting factor (Z) and base graph (BG) matrix. <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> shows both a BG matrix and corresponding Tanner graph construction for an example of a QC-LDPC code using 2 check nodes (CNs) and 4 variable nodes (VNs). It should be appreciated that the LDPC code of the illustrated example includes only 2 CNs and 4 VNs to simplify the description. The LDPC codes for which parallel LDPC decoding may be provided by embodiments of the invention are likely to be much larger than this example. For example, in the 5G cellular communication standard the size of BG1 is currently 46&#xd7;68 (e.g., 46 check nodes and 68 variable nodes) and the size of BG2 is currently 42&#xd7;52 (e.g., 42 check nodes and 52 variable nodes).</p><p id="p-0044" num="0042">It can be seen that Tanner graph <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> represents the same LDPC code as matrix of BG matrix wherein the BG matrix rows</p><p id="p-0045" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mn>390</mn>   <mo>&#x2062;</mo>   <mrow>    <mo>(</mo>    <mrow>     <mi>BG</mi>     <mo>=</mo>     <mtext>&#x205f;</mtext>     <mrow>      <mo>(</mo>      <mtable>       <mtr>        <mtd>         <mn>1</mn>        </mtd>        <mtd>         <mn>0</mn>        </mtd>        <mtd>         <mn>1</mn>        </mtd>        <mtd>         <mrow>          <mo>-</mo>          <mn>1</mn>         </mrow>        </mtd>       </mtr>       <mtr>        <mtd>         <mn>0</mn>        </mtd>        <mtd>         <mn>2</mn>        </mtd>        <mtd>         <mn>0</mn>        </mtd>        <mtd>         <mn>1</mn>        </mtd>       </mtr>      </mtable>      <mo>)</mo>     </mrow>    </mrow>    <mo>)</mo>   </mrow>  </mrow>  <mo>,</mo> </mrow></math></maths></p><p id="p-0046" num="0000">wherein the BG matrix rows correspond to the Tanner graph CNs (shown as CNs <b>301</b> and <b>302</b>, wherein row i=1 corresponds to CN <b>301</b> and row i=2 corresponds to CN <b>302</b>) and the BG matrix columns correspond to the Tanner graph VNs (shown as VNs <b>331</b>-<b>334</b>, wherein column j=1 corresponds to VN <b>331</b>, column j=2 corresponds to VN <b>332</b>, column j=3 corresponds to VN <b>333</b>, and column j=4 corresponds to VN <b>334</b>). Tanner graph <b>300</b> includes edges (e.g., shown as edges <b>311</b>-<b>313</b> and <b>321</b>-<b>324</b>) providing connections between the nodes of the different node sets over which messages are passed in operation of the codeword decoding processing. In particular, CN<sub>i </sub>is connected to VN<sub>j </sub>if the element BG<sub>ij </sub>is non-negative (i.e., a negative entry in BG matrix <b>390</b> corresponds to no connection or edge between the respective VN and CN in the Tanner graph). The messages passed between the nodes of the Tanner graph are indicated as M<sub>i,j</sub><sup>(t)</sup>, representing a VN to CN message passing from VN<sub>j </sub>to CN<sub>i </sub>at iteration t, and E<sub>i,j</sub><sup>(t)</sup>, representing a CN to VN message passing from CN<sub>i </sub>to VN<sub>j </sub>at iteration t. The value of the elements of BG matrix <b>390</b> represent the cyclic shift value utilized in the iterative decoding process (e.g., a BG matrix value of 0 corresponds to no shift, a BG matrix value of 1 corresponds to a cyclic shift of 1 place, a BG matrix value of 2 corresponds to a cyclic shift of 2 places, etc.).</p><p id="p-0047" num="0043">In operation according to a traditional LDPC decoding process (e.g., QC-LDPC decoding), decoding is done by sequentially passing messages (e.g., M<sub>i,j</sub><sup>(t)</sup>)) from VN to CN (V2C), then messages (e.g., E<sub>i,j</sub><sup>(t)</sup>) from CN to VN (C2V), one CN by one CN. This LDPC decoding operation is illustrated in the Tanner graph instances of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, wherein one iteration of a LDPC decoding operation is shown. In the illustrated LDPC decoding iteration instance, in providing operation for message passing with respect to a first one of the CNs, Tanner graph <b>300</b>-<b>1</b> shows V2C operation passing the messages from VNs <b>331</b>-<b>333</b> to CN <b>301</b> (e.g., message passing steps whereby message M<sub>1,1</sub><sup>(t) </sup>is passed from VN <b>331</b> to CN <b>301</b>, message M<sub>1,2</sub><sup>(t) </sup>is passed from VN <b>332</b> to CN <b>301</b>, and then message M<sub>1.1</sub><sup>(t) </sup>is passed from VN <b>333</b> to CN <b>301</b>) and Tanner graph <b>300</b>-<b>2</b> shows a C2V operation passing the massage from CN <b>301</b> to VNs <b>331</b>-<b>333</b> (e.g., message passing steps whereby message E<sub>1,1</sub><sup>(t) </sup>is passed from CN <b>301</b> to VN <b>331</b>, message E<sub>1,2</sub><sup>(t) </sup>is passed from CN <b>301</b> to VN <b>332</b>, and then message E<sub>1,3</sub><sup>(t) </sup>is passed from CN <b>301</b> to VN <b>333</b>). It should be appreciated that either a C2V operation to initially pass the message from CN <b>301</b> to VNs <b>311</b>-<b>333</b> or a prior iteration of LDPC decoding has been performed with respect to the LDPC decoding operation shown in Tanner graph <b>300</b>-<b>1</b>. In providing operation for message passing with respect to the next one of the CNs, Tanner graph <b>300</b>-<b>3</b> shows V2C operation passing the message from VNs <b>331</b>-<b>334</b> to CN <b>302</b> (e.g., message passing steps whereby message M<sub>2,1</sub><sup>(t) </sup>is passed from VN <b>331</b> to CN <b>302</b>, message M<sub>2,2</sub><sup>(t) </sup>is passed from VN <b>332</b>) to CN <b>302</b>, message M<sub>2,3</sub><sup>(t) </sup>is passed from VN <b>333</b> to CN <b>302</b>, and then message M<sub>2,4</sub><sup>(t) </sup>is passed from VN <b>334</b> to CN <b>302</b>) and Tanner graph <b>300</b>-<b>4</b> shows a C2V operation passing the massage from CN <b>302</b> to VNs <b>331</b>-<b>334</b> (e.g., message passing steps whereby message E<sub>2,1</sub><sup>(t) </sup>is passed from CN <b>302</b> to VN <b>331</b>, message E<sub>2,2</sub><sup>(t) </sup>is passed from CN <b>302</b> to VN <b>332</b>, message is passed from CN <b>302</b> to VN <b>333</b>, and then message E<sub>2,4</sub><sup>(t) </sup>is passed from CN <b>302</b> to VN <b>334</b>).</p><p id="p-0048" num="0044">Logic of the LDPC decoder implements algorithms to decode the LDPC codes in the aforementioned C2V and V2C operations. A LDPC decoder algorithm utilized by a LDPC decoder may, for example, comprise the min-sum algorithm, the sum-product algorithm, the belief propagation algorithm, or the message passing algorithm. To aid in understanding concepts of the present invention, examples utilizing the min-sum algorithm will be discussed. It should be appreciated, however, that the concepts herein are not limited to application with respect to the LDPC decoder algorithm of this example.</p><p id="p-0049" num="0045">In operation of a LDPC decoder utilizing the min-sum algorithm, a min stage is utilized in the V2C operation when passing messages (e.g., M<sub>i,j</sub><sup>(t+1)</sup>) from the VNs to the CNs, as shown in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>. As shown in the illustrated embodiment, logic of the LDPC decoder (e.g., using comparator logic) may determine a first minimum with respect to the messages passed from the VNs connected to a CN (e.g., MIN1<sub>1</sub><sup>(t+1</sup>)=1<sup>st </sup>minimum of abs M<sub>1,1</sub><sup>(t+1)</sup>, M<sub>1,2</sub><sup>(t+1)</sup>, M<sub>1,3</sub><sup>(t+1)</sup>)) and a second minimum with respect to the messages passed from the VNs connected to the CN (e.g., MIN2<sub>1</sub><sup>(t+1)</sup>=2<sup>nd </sup>minimum of abs (M<sub>1,1</sub><sup>(t+1)</sup>, M<sub>1,2</sub><sup>(t+1)</sup>, M<sub>1,3 </sub><sup>(t+1)</sup>)). Logic of the LDPC decoder (e.g., using XOR gate logic) may further determine a sign for the messages passed from the VNs connected to the CN (e.g., SIGN_ALL<sub>1</sub><sup>(t+1)</sup>=sign (M<sub>1,1</sub><sup>(t+1)</sup>) XOR sign(M<sub>1,2</sub><sup>(t+1)</sup>) XOR sign (M<sub>1,3</sub><sup>(t+1)</sup>), wherein sign=1 means negative). The messages passed from the connected VNs may be computed by logic of the LDPC decoder (e.g., using arithmetic logic) from the data previously provided in the messages passed from the CN in a prior iteration of the decoding.</p><p id="p-0050" num="0046">The V2C messages may be computed as follows:</p><p id="p-0051" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <msubsup>   <mi>M</mi>   <mrow>    <mi>i</mi>    <mo>,</mo>    <mi>j</mi>   </mrow>   <mrow>    <mo>(</mo>    <mi>t</mi>    <mo>)</mo>   </mrow>  </msubsup>  <mo>=</mo>  <mrow>   <msub>    <mi>LLR</mi>    <mi>j</mi>   </msub>   <mo>+</mo>   <mrow>    <munder>     <mo>&#x2211;</mo>     <mrow>      <mrow>       <msup>        <mi>i</mi>        <mo>&#x2032;</mo>       </msup>       <mo>&#x2208;</mo>      </mrow>      <mo>&#x2228;</mo>      <mrow>       <mo>&#x2216;</mo>       <mrow>        <mo>{</mo>        <mi>i</mi>        <mo>}</mo>       </mrow>      </mrow>     </mrow>    </munder>    <msubsup>     <mi>E</mi>     <mrow>      <msup>       <mi>i</mi>       <mo>&#x2032;</mo>      </msup>      <mo>,</mo>      <mi>j</mi>     </mrow>     <mrow>      <mo>(</mo>      <mi>t</mi>      <mo>)</mo>     </mrow>    </msubsup>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0052" num="0000">As shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, the message passed from VN <b>331</b> to CN <b>301</b> may, for example, be computed as M<sub>1,1</sub><sup>(t+1)</sup>=LLR<sub>1</sub>+E<sub>2,1</sub><sup>(t)</sup>=SUM<sub>1</sub><sup>(t)</sup>&#x2212;E<sub>1,1</sub><sup>(t)</sup>, wherein SUM<sub>1</sub><sup>(t)</sup>=LLR<sub>1</sub>+E<sub>1,1</sub><sup>(t)</sup>+E<sub>2,1</sub><sup>(t) </sup>and SUM<sub>1</sub><sup>(t+1)</sup>=SUM<sub>1</sub><sup>(t)</sup>&#x2212;E<sub>1,1</sub><sup>(t+1) </sup>(initially all E<sub>i,j</sub><sup>(t)</sup>=0 and all SUM<sub>j</sub>=LLR<sub>j</sub>). The messages passed from each of the other connected VNs may be similarly computed.</p><p id="p-0053" num="0047">A sum stage is utilized in the C2V operation of the LDPC decoder of this example when passing the message from the CNs to the VNs, as shown in <figref idref="DRAWINGS">FIG. <b>3</b>E</figref>. As shown in the illustrated embodiment, logic of the LDPC decoder (e.g., using comparator logic) may determine a magnitude with respect to the messages passed from a CN to the connected VNs as follows:</p><p id="p-0054" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <mrow>   <mi>abs</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <msubsup>    <mi>E</mi>    <mrow>     <mi>i</mi>     <mo>,</mo>     <mi>j</mi>    </mrow>    <mrow>     <mo>(</mo>     <mrow>      <mi>t</mi>      <mo>+</mo>      <mn>1</mn>     </mrow>     <mo>)</mo>    </mrow>   </msubsup>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>[</mo>   <mtable>    <mtr>     <mtd>      <mrow>       <mrow>        <mi>MIN</mi>        <mo>&#x2062;</mo>        <msubsup>         <mn>1</mn>         <mi>i</mi>         <mrow>          <mo>(</mo>          <mrow>           <mi>t</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </msubsup>       </mrow>       <mo>,</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mrow>        <mi>if</mi>        <mo>&#x2062;</mo>        <mtext>   </mtext>        <msubsup>         <mi>M</mi>         <mrow>          <mi>i</mi>          <mo>,</mo>          <mi>j</mi>         </mrow>         <mrow>          <mo>(</mo>          <mrow>           <mi>t</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </msubsup>       </mrow>       <mo>!=</mo>       <mrow>        <mi>MIN</mi>        <mo>&#x2062;</mo>        <msubsup>         <mn>1</mn>         <mi>i</mi>         <mrow>          <mo>(</mo>          <mrow>           <mi>t</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </msubsup>       </mrow>      </mrow>     </mtd>    </mtr>    <mtr>     <mtd>      <mrow>       <mrow>        <mi>MIN</mi>        <mo>&#x2062;</mo>        <msubsup>         <mn>2</mn>         <mi>i</mi>         <mrow>          <mo>(</mo>          <mrow>           <mi>t</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </msubsup>       </mrow>       <mo>,</mo>      </mrow>     </mtd>     <mtd>      <mrow>       <mrow>        <mi>if</mi>        <mo>&#x2062;</mo>        <mtext>   </mtext>        <msubsup>         <mi>M</mi>         <mrow>          <mi>i</mi>          <mo>,</mo>          <mi>j</mi>         </mrow>         <mrow>          <mo>(</mo>          <mrow>           <mi>t</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </msubsup>       </mrow>       <mo>==</mo>       <mrow>        <mi>MIN</mi>        <mo>&#x2062;</mo>        <msubsup>         <mn>1</mn>         <mi>i</mi>         <mrow>          <mo>(</mo>          <mrow>           <mi>t</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>          <mo>)</mo>         </mrow>        </msubsup>       </mrow>      </mrow>     </mtd>    </mtr>   </mtable>  </mrow> </mrow></math></maths></p><p id="p-0055" num="0000">For example, the magnitude of message E<sub>1,1</sub><sup>(t+1) </sup>passed from CN <b>301</b> to VN <b>331</b> may be computed as Magnitude of E<sub>1,1</sub><sup>(t+1)</sup>=MIN1<sub>1</sub><sup>(t+1) </sup>if abs (M<sub>1,1</sub><sup>(t+1)</sup>!=MIN1<sub>1,1</sub><sup>(t+1)</sup>, else Magnitude of E<sub>1,1</sub><sup>(t+1)</sup>=MIN2<sub>1</sub><sup>(t+1)</sup>). Logic of the LDPC decoder (e.g., using XOR gate logic) may further determine a sign for the messages passed from the CN to the connected VNs as follows:</p><p id="p-0056" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>sign(<i>E</i><sub>i,j</sub><sup>(t+1)</sup>)=SIGN_ALL<sub>i</sub><sup>(t+1)</sup>XOR sign(<i>M</i><sub>i,j</sub><sup>(t+1)</sup>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0057" num="0000">For example, the sign of message E<sub>1,1</sub><sup>(t+1) </sup>passed from CN <b>301</b> to VN <b>331</b> may be computed as Sign of E<sub>1,1</sub><sup>(t+1)</sup>=SIGN_ALL<sub>1</sub><sup>(t+1)</sup>XOR sign(M<sub>i,j</sub><sup>(t+1)</sup>), wherein sign=1 means negative). The messages passed from the CN may be used by logic of the LDPC decoder (e.g., using arithmetic logic) in computing a message to be provided to the CN in a V2C operation in a subsequent iteration of the decoding. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>F</figref>, the message passed from CN <b>301</b> may, for example, be used to compute SUM<sub>1</sub><sup>(t+2)</sup>=E<sub>1,1</sub><sup>(t+1)</sup>+E<sub>2,1</sub><sup>(t+1)</sup>+LLR<sub>1</sub>=SUM<sub>1</sub><sup>(t+1)</sup>&#x2212;E<sub>1,1</sub><sup>(t+1) </sup>for a subsequent message passed from VN <b>331</b> to CN <b>301</b>. This computation may be stated more generally as follows:</p><p id="p-0058" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mrow>  <msubsup>   <mi>SUM</mi>   <mi>j</mi>   <mrow>    <mo>(</mo>    <mrow>     <mi>t</mi>     <mo>+</mo>     <mn>1</mn>    </mrow>    <mo>)</mo>   </mrow>  </msubsup>  <mo>=</mo>  <mrow>   <msub>    <mi>LLR</mi>    <mi>j</mi>   </msub>   <mo>+</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>i</mi>      <mo>=</mo>      <mn>1</mn>     </mrow>     <mn>2</mn>    </munderover>    <msubsup>     <mi>E</mi>     <mrow>      <mi>i</mi>      <mo>,</mo>      <mi>j</mi>     </mrow>     <mrow>      <mo>(</mo>      <mrow>       <mi>t</mi>       <mo>+</mo>       <mn>1</mn>      </mrow>      <mo>)</mo>     </mrow>    </msubsup>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0059" num="0000">Computations similar to those set forth above may be made for each of the other connected VNs.</p><p id="p-0060" num="0048">Multiple iterations (e.g., repeated processing in accordance with the Tanner graphs of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, wherein the iteration designators (t) shown for the messages are incremented in each iteration) of the forgoing min-sum algorithm may be performed by the LDPC decoder and the parity equations evaluated in each iteration evaluated. The message processing steps implemented by the QC-LDPC decoder in performing the foregoing sequential min-sum decoding procedure may be represented as the following message sequence (wherein the bolded steps implement min-stage calculation and the un-bolded steps implement sum-stage calculation):</p><p id="p-0061" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i><sub>1,1</sub><sup>(1)</sup><i>&#x2192;M</i><sub>1,2</sub><sup>(1)</sup><i>&#x2192;M</i><sub>1,3</sub><sup>(1)</sup><i>&#x2192;E</i><sub>1,1</sub><sup>(1)</sup><i>&#x2192;E</i><sub>1,2</sub><sup>(1)</sup><i>&#x2192;E</i><sub>1,3</sub><sup>(1)</sup><i>&#x2192;M</i><sub>2,1</sub><sup>(1)</sup><i>&#x2192;M</i><sub>2,2</sub><sup>(1)</sup><i>&#x2192;M</i><sub>2,3</sub><sup>(1)</sup><i>&#x2192;M</i><sub>2,4</sub><sup>(1)</sup><i>&#x2192;E</i><sub>2,1</sub><sup>(1)</sup><i>&#x2192;E</i><sub>2,2</sub><sup>(1)</sup><i>&#x2192;E</i><sub>2,3</sub><sup>(1)</sup><i>&#x2192;E</i><sub>2,4</sub><sup>(1)</sup><i>&#x2192;M</i><sub>1,1</sub><sup>(2)</sup>&#x2192; . . . <b>1</b>,<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0062" num="0000">This iterative processing may be ended, and a valid codeword of the code block being decoded is indicated, when all the parity equations are satisfied.</p><p id="p-0063" num="0049">BG matrix <b>390</b> of the foregoing example may be represented more generally by matrix entries B<sub>i,j</sub>, as follows:</p><p id="p-0064" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mrow>  <mi>BG</mi>  <mo>=</mo>  <mrow>   <mrow>    <mo>(</mo>    <mtable>     <mtr>      <mtd>       <mn>1</mn>      </mtd>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>1</mn>      </mtd>      <mtd>       <mrow>        <mo>-</mo>        <mn>1</mn>       </mrow>      </mtd>     </mtr>     <mtr>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>2</mn>      </mtd>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>1</mn>      </mtd>     </mtr>    </mtable>    <mo>)</mo>   </mrow>   <mo>=</mo>   <mrow>    <mo>(</mo>    <mtable>     <mtr>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>1</mn>         <mo>,</mo>         <mn>1</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>1</mn>         <mo>,</mo>         <mn>2</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>1</mn>         <mo>,</mo>         <mn>3</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>1</mn>         <mo>,</mo>         <mn>4</mn>        </mrow>       </msub>      </mtd>     </mtr>     <mtr>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>2</mn>         <mo>,</mo>         <mn>1</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>2</mn>         <mo>,</mo>         <mn>2</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>2</mn>         <mo>,</mo>         <mn>3</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>2</mn>         <mo>,</mo>         <mn>4</mn>        </mrow>       </msub>      </mtd>     </mtr>    </mtable>    <mo>)</mo>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0065" num="0000">Using the above general BG matrix representation, the sequential min-sum decoding procedure may be represented, considering only the connection edge, as follows (wherein the bolded steps implement min-stage calculation and the un-bolded steps implement sum-stage calculation):</p><p id="p-0066" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>B</i><sub>1,1</sub><i>&#x2192;B</i><sub>1,2</sub><i>&#x2192;B</i><sub>1,3</sub><i>&#x2192;B</i><sub>1,1</sub><i>&#x2192;B</i><sub>1,2</sub><i>&#x2192;B</i><sub>1,3</sub><i>&#x2192;B</i><sub>2,1</sub><i>&#x2192;B</i><sub>2,2</sub><i>&#x2192;B</i><sub>2,3</sub><i>&#x2192;B</i><sub>2,4</sub><i>&#x2192;B</i><sub>2,1</sub><i>&#x2192;B</i><sub>2,2</sub><i>&#x2192;B</i><sub>2,3</sub><i>&#x2192;B</i><sub>2,4</sub><i>&#x2192;B</i><sub>1,1</sub>&#x2192;. . ..<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0067" num="0050">The above example shows a simplified QC-LDPC decoding process where the lifting parameter Z=1. Higher order lifting parameters (also referred lifting value, lifting size, or expansion factor) may be utilized with respect to QC-LDPC codes to improve the decoding reliability. <figref idref="DRAWINGS">FIG. <b>4</b></figref> shows BG matrix <b>490</b> and corresponding Tanner graph <b>400</b> for an example implementing a higher order lifting parameter (e.g., Z&#x3e;1, such as Z={2, . . . , 384} for a 5G network implementation). In the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, Tanner graph <b>400</b> represents the same LDPC code as matrix of BG matrix <b>490</b>, wherein the BG matrix is represented according to the following:</p><p id="p-0068" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mrow>  <mi>BG</mi>  <mo>=</mo>  <mrow>   <mrow>    <mo>(</mo>    <mtable>     <mtr>      <mtd>       <mn>1</mn>      </mtd>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>1</mn>      </mtd>      <mtd>       <mrow>        <mo>-</mo>        <mn>1</mn>       </mrow>      </mtd>     </mtr>     <mtr>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>2</mn>      </mtd>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>1</mn>      </mtd>     </mtr>    </mtable>    <mo>)</mo>   </mrow>   <mo>=</mo>   <mrow>    <mo>(</mo>    <mtable>     <mtr>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>1</mn>         <mo>,</mo>         <mn>1</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>1</mn>         <mo>,</mo>         <mn>2</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>1</mn>         <mo>,</mo>         <mn>3</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>1</mn>         <mo>,</mo>         <mn>4</mn>        </mrow>       </msub>      </mtd>     </mtr>     <mtr>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>2</mn>         <mo>,</mo>         <mn>1</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>2</mn>         <mo>,</mo>         <mn>2</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>2</mn>         <mo>,</mo>         <mn>3</mn>        </mrow>       </msub>      </mtd>      <mtd>       <msub>        <mi>B</mi>        <mrow>         <mn>2</mn>         <mo>,</mo>         <mn>4</mn>        </mrow>       </msub>      </mtd>     </mtr>    </mtable>    <mo>)</mo>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0069" num="0051">Like Tanner graph <b>300</b> discussed above, Tanner graph <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> includes two different sets of nodes (CNs and VNs). Implementation of the higher order lifting parameter provides for node clusters comprising a number of nodes corresponding to the lifting parameter value implemented (e.g., check node clusters (CNCs) <b>401</b> and <b>402</b> comprise clusters of Z CNs each and variable node clusters (VNCs) <b>431</b>-<b>434</b> comprise clusters of Z VNs each). As in the example above, the edges only connect nodes of the different node sets. Each entry of the BG matrix, however, is expanded by [Z&#xd7;Z] identity matrix. Accordingly, as can be seen in the illustration of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, each bundle of edges (e.g., B<sub>1,1</sub>, B<sub>1,2</sub>, B<sub>1,3</sub>, B<sub>1,4</sub>, B<sub>2,1</sub>, B<sub>2,2</sub>, B<sub>2,3</sub>, and B<sub>2,4</sub>) connecting the VNCs with the CNCs includes a number of edges corresponding to the lifting parameter being implemented (Z, where Z={2, . . . , 384} for a 5G network implementation). That is, where edges connect the CNCs to respective ones of the VNCs of Tanner graph <b>400</b> there are Z edges, and correspondingly each input of VNCs <b>431</b>-<b>434</b> includes Z number of LLRs.</p><p id="p-0070" num="0052">In operation of QC-LDPC decoding according to Tanner graph <b>400</b>, there are Z number of messages passed between the CNCs and connected ones of the VNCs, wherein a predefined cyclic shift. For example, a cyclic shift (represented for edge bundle B<sub>1,1 </sub>by cyclic shift ring <b>461</b>) may be implemented by a shifter (not shown in the illustration of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) provided with respect to V2C messages and an anti-cyclic shift (represented for edge bundle B<sub>1,1 </sub>by anti-cyclic shift ring <b>462</b>) is provided with respect to the messages of the bundle groups when passing messages between the CNs and VNs. The value of elements of the BG matrix represent the cyclic shift value utilized in the LDPC decoding process (negative values of BG indicate no connection and thus no cyclic shift). Accordingly, the cyclic and anti-cyclic shifts provided in the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref> have values in accordance with the non-negative values of BG matrix <b>490</b>. That is operation according to the illustrated example provides a cyclic shift of 1 when passing messages from VNC <b>431</b> to CNC <b>401</b> and an anti-cyclic shift of 1 when passing messages from CNC <b>401</b> to VNC <b>431</b>, a cyclic shift of 0 when passing messages from VNC <b>432</b> to CNC <b>401</b> and an anti-cyclic shift of 0 when passing messages from CNC <b>401</b> to VNC <b>432</b>, a cyclic shift of 1 when passing messages from VNC <b>433</b> to CNC <b>401</b> and an anti-cyclic shift when passing messages from CNC <b>401</b> to VNC <b>433</b>, a cyclic shift of 0 when passing messages from VNC <b>431</b> to CNC <b>402</b> and an anti-cyclic shift of 0 when passing messages from CNC <b>402</b> to VNC <b>431</b>, a cyclic shift of 2 when passing messages from VNC <b>432</b> to CNC <b>402</b> and an anti-cyclic shift of 2 when passing messages from CNC <b>402</b> to VNC <b>432</b>, a cyclic shift of 0 when passing messages from VNC <b>433</b> to CNC <b>402</b> and an anti-cyclic shift of 0 when passing messages from CNC <b>402</b> to VNC <b>433</b>, and a cyclic shift of 1 when passing messages from VNC <b>434</b> to CNC <b>402</b> and an anti-cyclic shift of 1 when passing messages from CNC <b>402</b> to VNC <b>434</b>.</p><p id="p-0071" num="0053">As discussed with respect to Tanner graph <b>300</b>, traditional LDPC decoding operation in accordance with Tanner graph <b>400</b> sequentially passes messages from VNC to CNC (V2C), then from CNC to VNC (C2V), one CNC by one CNC. However, as the messages are passed between the CNCs and VNCs, cyclic shifting is provided in accordance with the values of corresponding elements of the BG matrix. Algorithms, such as the aforementioned min-sum algorithm, sum-product algorithm, belief propagation algorithm, and message passing algorithm, may be utilized by logic of the LDPC decoder with respect to the appropriately shifted messages to decode the LDPC codes.</p><p id="p-0072" num="0054"><figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>C</figref> show slice views for respective Tanner graph constructions of example LDPC codes to aid in understating operation of QC-LDPC decoders, wherein <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> shows an example for lifting parameter Z=1, <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> shows an example for lifting parameter Z=3, and <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> shows an example for lifting parameter Z=384 (e.g., Z=Z<sub>max </sub>in a 5G network implementation). As shown in the example of <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, a Tanner graph construction for an example of a LDPC code corresponding to that of Tanner graph <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be implemented in 1 slice (i.e., the number of slices corresponding to lifting parameter Z=1), wherein no data cyclic/anti-cyclic shift is provided when messages pass between CNs and VNs. However, as shown in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, a Tanner graph construction for an example of LDPC code corresponding an instance of that of Tanner graph <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> with lifting parameter Z=3 may be implemented in 3 slices (i.e., the number of slices corresponding to lifting parameter Z=3), wherein data is cyclically/anti-cyclically shifted among the different slices when messages pass between CNCs and VNCs using shifter <b>540</b>. Similarly, as shown in <figref idref="DRAWINGS">FIG. <b>5</b>C</figref> a Tanner graph construction for an example of LDPC code corresponding to another instance of that of Tanner graph <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> with lifting parameter Z=384 may be implemented in 384 slices (i.e., the number of slices corresponding to lifting parameter Z=384), wherein data is cyclically/anti-cyclically shifted among the different slices when messages pass between CNCs and VNCs using shifter <b>540</b>.</p><p id="p-0073" num="0055">Traditional LDPC decoders can only decode one code block of any size at a time. Referring to the lifting parameter Z=384 example of <figref idref="DRAWINGS">FIG. <b>5</b>C</figref> for instance, the hardware of the LDPC decoder is configured to accommodate Z=384 (i.e., provides a 384 slice implementation). If, however, the lifting parameter is small (e.g., lifting parameter Z=16) only a small portion of the slices will be activated, with the other slices idle, throughout the iterations of the LDPC decoding operation. This is illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, wherein for the case of lifting parameter Z=16 slices 1-16 comprise the active slice and slices 17-384 remain idle throughout decoding the code block in operation according to a traditional LDPC decoder.</p><p id="p-0074" num="0056">A reconfigurable scalable shifter configuration as traditionally implemented to accommodate data shifting with respect to data of different bit sizes for LDPC decoders, such as single codeword QC-LDPC decoder <b>200</b><i>a </i>of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, is shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. In particular, <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates scalable operation of a typical reconfigurable shifter implementation for an example in which the shifter accommodates up to eight-bit data shifting and an instance of data shifting involves five-bit data (e.g., Z=5, Z<sub>max</sub>=8). Logic circuitry of such traditional reconfigurable scalable shifters is designed based on the longest bit length of input data that the shifter can handle. In operation, portions of the logic circuitry are idle when processing input data with shorter bit lengths. For example, as shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, although the shifter is reconfigurable to accommodate data shifting with respect to less than the full complement of data bits supported by the shifter, that portion of the shifter not needed for data shifting with respect to the scaled-down input remains idle during the particular instance of data shifting (e.g., circuitry with respect to data bit positions [7:5] remain idle while circuitry with respect to data bit positions [4:0] perform shifting with respect to 5-bit input data).</p><p id="p-0075" num="0057">A more recent configuration of data shifter, as shown in U.S. Pat. No. 10,877,729 (the disclosure of which is incorporated herein by reference), provides a reconfigurable segmented scalable shifter supporting data shifting of differing bit lengths in parallel. For example, messages of differing bit lengths may be provided individual data shifting in parallel. An example of such a reconfigurable segmented scalable shifter, such as may be utilized in parallel codeword QC-LDPC decoder <b>200</b><i>b </i>of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, is shown as reconfigurable segmented scalable shifter <b>840</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0076" num="0058">Reconfigurable segmented scalable shifter <b>840</b> of the example of <figref idref="DRAWINGS">FIG. <b>8</b></figref> is implemented in a <b>2</b> segment (M=2) configuration. In particular, <figref idref="DRAWINGS">FIG. <b>8</b></figref> shows reconfigurable segmented scalable shifter <b>840</b> configured as an 8 bit <b>2</b> segment implementation wherein segment <b>1</b> provides a 3 bit cyclic shift to the right and segment <b>2</b> provides a 2 bit cyclic shift to the right (e.g., shifter size N=8, number of segments M=2, segment <b>1</b> size N_1=5, segment <b>1</b> shift value S_1=3, segment <b>1</b> shift direction D 1=Right, and segment <b>1</b> shift type T 1=Cyclic, segment <b>2</b> size N_2=3, segment <b>2</b> shift value S_2=2, segment <b>2</b> shift direction D 2=Right, and segment <b>2</b> shift type T 2=Cyclic). The input data (X) of the example of <figref idref="DRAWINGS">FIG. <b>8</b></figref> comprises 8 bits, wherein the input data may be represented as X[7:0] (e.g., X[7:0]={X[7], X[6], X[5], X[4], X[3], X[2], X[1], X[0]}) and the output data may be represented as Y[7:0] (e.g., Y[7:0]={Y[7], Y[6], Y[5], Y[4], Y[3], Y[2], Y[1], Y[0]}). In the example of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the number of segments (M) is 2, wherein segment <b>1</b> comprises 5 bits and segment <b>2</b> comprises 3 bits such that X_1[4:0] is the input of segment <b>1</b> and X_2[2:0] is the input of segment <b>2</b>, and Y_1[4:0] is the output data of segment <b>1</b> and Y_2[2:0] is the output data of segment <b>2</b>. Accordingly, X[7:0]={X[7], X[6], X[5], X[4], X[3], X[2], X[1], X[0]}={X_2[2:0], X_1[4:0]}, wherein X_1[4:0]={X[4], X[3], X[2], X[1], X[0]} and X_2[2:0]={X[7], X[6], X[5]}. Similarly, Y[7:0]={Y[7], Y[6], Y[5], Y[4], Y[3], Y[2], Y[1], Y[0]}={Y_2[2:0], Y_1[4:0]}, wherein Y_1[4:0]={Y[4], Y[3], Y[2], Y[1], Y[0]}, and Y_2[2:0]={Y[7], Y[6], Y[5]}.</p><p id="p-0077" num="0059"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows further detail with respect to a reconfigurable segmented scalable shifter configuration as may be utilized according to embodiments of the invention for partitioning into multiple segments of different sizes to perform cyclic shifts of different shift values in parallel. In particular, reconfigurable segmented scalable shifter <b>940</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> includes input stage <b>910</b>, shifter stage <b>920</b>, and output stage <b>930</b> implementing a segmentation configuration.</p><p id="p-0078" num="0060">Input stage <b>910</b> may comprise configurable memory elements (e.g., random access memory (RAM), flash memory, magnetic memory, optical memory, etc.) and/or controllable data paths (e.g., controllable data path elements) suitable for storage of the data of messages input to reconfigurable segmented scalable shifter <b>940</b> for which shifting is provided and for controllably associating such data with reconfigurable segments of shifter stage <b>920</b>. Input stage <b>910</b> may be utilized to associate the one or more messages (e.g., X_1, X_2, . . . X_M) of the input data (X) with corresponding segments of shifter stage <b>920</b>. For example, in the illustrated example, the input data (X) includes messages X_1, X_2, X_3, . . . X_M, wherein input stage <b>910</b> facilitates correspondence of the N_1 number of bits of message X_1 (e.g., bits 0 to N_1-1 of message X_1) to segment <b>1</b> of shifter stage <b>920</b>, correspondence of the N 2 number of bits of message X_2 (e.g., bits 0 to N_2-1 of message X_2) to segment <b>2</b> of shifter stage <b>920</b>, correspondence of the N_3 number of bits of message X_3 (e.g., bits 0 to N_3-1 of message X_3) to segment <b>3</b> of shifter stage <b>920</b>, and correspondence of the N_M number of bits of message X_M (e.g., bits 0 to N_M-1 of message X_M) to segment M of shifter stage <b>920</b>.</p><p id="p-0079" num="0061">Shifter stage <b>920</b> may comprise controllable data path elements (e.g., multiplexers and associated control elements) suitable for implementing data shifts. Such data path elements of embodiments may implement various shifter architectures, such as logarithmic shifter configurations, barrel shifter configurations, combinational shifter configurations, etc. Shifter stage <b>920</b> provides reconfigurable, scalable segments that may be utilized in implementing data shifting in parallel with respect to multiple messages of input data. Controller <b>921</b> of shifter stage <b>920</b> is shown in the illustrated embodiment for providing shifting commands to the segments of shifter stage <b>920</b> in accordance with data shift commands (e.g., CMD_1, CMD_2, . . . CMD_M) provided in association with the input data (e.g., X=X_1, X_2, X_3, . . . X_M). Data shifting is independently provided by segments (e.g., left cyclic by segment <b>1</b>, left cyclic by segment <b>2</b>, and right cyclic by segment M) of shifter stage <b>920</b> in accordance with the respective data shift commands to thereby implement multiple individual different data shifts at a time in parallel.</p><p id="p-0080" num="0062">It should be appreciated that, although implementation of cyclic shifts are illustrated in the example of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, one or more segments may be configured so as to provide no data shifting operation in any instance of data shifting by reconfigurable segmented scalable shifter <b>940</b>. For example, segment <b>3</b> shown in the exemplary embodiment of <figref idref="DRAWINGS">FIG. <b>9</b></figref> is unused for data shifting (e.g., idle or configured to pass data bits straight through without shifting) in the data shifting instance illustrated. The location of such unused segments may be anywhere within the reconfigurable segmented scalable shifter of embodiments, such as to conveniently accommodate various message lengths, to facilitate a segment starting with the least significant bit (LSB) of a respective message, etc.</p><p id="p-0081" num="0063">Reconfigurable segmented scalable shifter <b>940</b> is configured to be reconfigurable with respect to data width and/or shift command of each message of input data. For example, shifter stage <b>920</b> is reconfigurable with respect to the number of segments (M) (e.g., 1&#x2264;M&#x2264;N), the size of each segment (N_m) (e.g., N&#x2265;N_m&#x2265;2), the shift value (S) of each segment (S_m) (0&#x2264;S_m&#x2264;N), the shift direction (D) of each segment (D_m) (e.g., D_m is left or right), and/or the shift type (T) of each segment (T_m) (e.g., T_m is logical, arithmetic, or cyclic), any or all of which may be controlled by controller <b>921</b>. The individual data shift commands (e.g., CMD_1, CMD_2, . . . CMD_M) provided to reconfigurable segmented scalable shifter <b>940</b> (e.g., to controller <b>921</b>) of embodiments may include various such information (e.g., the size of the respective segment (N_m), the shift value of the respective segment (S_m), the shift direction of the respective segment (D_m), the shift type of the respective segment (T_m), etc.). Additionally or alternatively, one or more general data shift commands (e.g., CMD, not shown in the illustrated embodiment) including various such information (e.g., the number of segments (M), the size of each segment (N_m), a globally applicable shift value (S), a globally applicable shift direction (D), a globally applicable shift type (T), etc.) may be provided to reconfigurable segmented scalable shifter <b>940</b> (e.g., to controller <b>921</b>) of embodiments for controlling aspects generally applicable to the shifter and/or segments thereof.</p><p id="p-0082" num="0064">Output stage <b>930</b> may comprise configurable memory elements (e.g., RAM, flash memory, magnetic memory, optical memory, etc.) and/or controllable data paths (e.g., controllable data path elements) suitable for controllably associating reconfigurable segments of shifter stage <b>920</b> with messages of output data for storage of the shifted data of the messages for which shifting is provided. Output stage <b>930</b> may be utilized to associate segments of shifter stage <b>920</b> with the one or more messages (e.g., Y_1, Y_2, . . . Y_M) of the output data (Y). For example, in the illustrated example, the output data (Y) includes messages Y_1, Y_2, Y_3, . . . Y_M, wherein output stage <b>910</b> facilitates correspondence of the N_1 number of the shifted bits of message Y_1 (e.g., bits 0 to N_1-1 of message Y_1) to segment <b>1</b> of shifter stage <b>920</b>, correspondence of the N 2 number of shifted bits of message Y_2 (e.g., bits 0 to N_2-1 of message Y_2) to segment <b>2</b> of shifter stage <b>420</b>, correspondence of the N_3 number of un-shifted bits of message Y_3 (e.g., bits 0 to N_3-1 of message Y_3) to segment <b>3</b> (idle in this illustrated example) of shifter stage <b>920</b>, and correspondence of the N_M number of shifted bits of message Y_M (e.g., bits 0 to N_M-1 of message Y_M) to segment M of shifter stage <b>20</b>.</p><p id="p-0083" num="0065">Use of a reconfigurable segmented scalable shifter (e.g., configurations of reconfigurable segmented scalable shifter <b>840</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> and reconfigurable segmented scalable shifter <b>940</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>) in a parallel codeword QC-LDPC decoder (e.g., parallel codeword QC-LDPC decoder <b>200</b><i>b </i>of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>) implementation is shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>. In particular, <figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a slice view of a parallel codeword QC-LDPC decoder configuration utilizing a reconfigurable segmented scalable shifter configuration for decoding multiple code blocks in parallel. In the example of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, parallel codeword QC-LDPC decoder <b>1000</b> provides parallel processing of a plurality of code blocks having a total combined lifting parameter size (e.g., ZIN_1+ZIN_2+ . . . ZIN_M) that is less than or equal to Z (i.e., <b>384</b> in this example) using reconfigurable segmented scalable shifter <b>1040</b>. Reconfigurable segmented scalable shifter <b>1040</b> of the illustrated example is configured to provide active portions <b>1001</b>-<b>1003</b> configured for parallel processing of code blocks from a plurality of input signals, shown as IN_1, IN_2, and IN_3 (e.g., as may correspond to signals from a plurality of connected terminals served by a base station hosting a receiver utilizing the parallel codeword QC-LDPC decoder, etc.).</p><p id="p-0084" num="0066">In operation, each active region of parallel codeword QC-LDPC shifter <b>1000</b> processes a respective code block (e.g., active portion <b>1001</b> processes a code block of IN_1, active portion <b>1002</b> processes a code block of IN_2, and active portion <b>1003</b> processes a code block of IN_3) in parallel. For example, a code block of IN_1 having lifting parameter Z=16 may be provided to slices 1 through 16 of parallel LDPC decoder <b>1000</b> for providing appropriate data cyclic and anti-cyclic shifting when messages pass between CNCs and VNCs. Since lifting parameter Z=16 is less than the total lifting parameter Z=384 accommodated by parallel codeword QC-LDPC decoder <b>1000</b>, other code blocks are provided decoding operation using portions of parallel codeword QC-LDPC decoder <b>1000</b> that are unused by decoding operation of the code block of IN_1. In the illustrated example, a code block of IN_2 having lifting parameter Z=(X&#x2212;17+1) is provided to slices 17 through X of parallel codeword QC-LDPC decoder <b>1000</b> for providing appropriate data cyclic and anti-cyclic shifting when messages pass between CNCs and VNCs. Similarly, a code block of IN_3 having lifting parameter Z=(379&#x2212;Y+1) is provided to slices Y through <b>379</b> of parallel codeword QC-LDPC decoder <b>1000</b> for providing appropriate data cyclic and anti-cyclic shifting when messages pass between CNCs and VNCs.</p><p id="p-0085" num="0067">The code block inputs of each active portion of parallel codeword QC-LDPC decoder <b>1000</b> go through the same series of message processing steps implemented by the QC-LDPC decoder. That is, in the illustrated example wherein code blocks are provided at inputs IN_1, IN_2, and IN_3 of parallel codeword QC-LDPC decoder <b>1000</b>, the three code blocks are each processed according to the same decoding procedure comprising a plurality of serially performed decoding processing steps. For example, when performing a min-sum decoding procedure, a codeword at input IN_1 (codeword<sub>1</sub>) would undergo a series of decoding processing steps as follows (wherein the bolded steps implement min-stage calculation and the un-bolded steps implement sum-stage calculation):</p><p id="p-0086" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i><sub>1,1</sub><sup>(1)</sup><i>&#x2192;M</i><sub>1,2</sub><sup>(1)</sup><i>&#x2192;M</i><sub>1,3</sub><sup>(1)</sup><i>&#x2192;E</i>1<sub>1,1</sub><sup>(1)</sup><i>&#x2192;E</i>1<sub>1,2</sub><sup>(1)</sup><i>&#x2192;E</i>1<sub>1,3</sub><sup>(1)</sup><i>&#x2192;M</i>1<sub>2,1</sub><sup>(1)</sup><i>&#x2192;M</i>1<sub>2,2</sub><sup>(1)</sup><i>&#x2192;M</i>1<sub>2,4</sub><sup>(1)</sup><i>&#x2192;E</i>1<sub>2,1</sub><sup>(1)</sup><i>&#x2192;E</i>1<sub>2,2</sub><sup>(1)</sup><i>&#x2192;E</i>1<sub>2,3</sub><sup>(1)</sup><i>&#x2192;E</i>1<sub>2,4</sub><sup>(1)</sup><i>&#x2192;M</i>1<sub>1,1</sub><sup>(2)</sup>&#x2192;. . ..<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0087" num="0000">wherein the iterative processing for codeword<sub>1 </sub>is ended when all the parity equations are satisfied. Similarly, a codeword at input IN_2 (codeword<sub>2</sub>) would undergo a series of decoding processing steps as follows:</p><p id="p-0088" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i>2<sub>1,1</sub><sup>(1)</sup><i>&#x2192;M</i>2<sub>1,2</sub><sup>(1)</sup><i>&#x2192;M</i>2<sub>1,3</sub><sup>(1)</sup><i>&#x2192;E</i>2<sub>1,1</sub><sup>(1)</sup><i>&#x2192;E</i>2<sub>1,2</sub><sup>(1)</sup><i>&#x2192;E</i>2<sub>1,3</sub><sup>(1)</sup><i>&#x2192;M</i>2<sub>2,1</sub><sup>(1)</sup><i>&#x2192;M</i>2<sub>2,2</sub><sup>(1)</sup><i>&#x2192;M</i>2<sub>2,3</sub><sup>(1)</sup><i>&#x2192;M</i>2<sub>2,4</sub><sup>(1)</sup><i>&#x2192;E</i>2<sub>2,1</sub><sup>(1)</sup><i>&#x2192;E</i>2<sub>2,2</sub><sup>(1)</sup><i>&#x2192;E</i>2<sub>2,3</sub><sup>(1)</sup><i>&#x2192;E</i>2<sub>2,4</sub><sup>(1)</sup><i>&#x2192;M</i>2<sub>1,1</sub><sup>(2) </sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0089" num="0000">wherein the iterative processing for codeword<sub>2 </sub>is ended when all the parity equations are satisfied. Likewise, a codeword at input IN_3 (codeword<sub>3</sub>) would undergo a series of decoding processing steps as follows:</p><p id="p-0090" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>M</i>3<sub>1,1</sub><sup>(1)</sup><i>&#x2192;M</i>3<sub>1,2</sub><sup>(1)</sup><i>&#x2192;M</i>3<sub>1,3 </sub><sup>(1)</sup><i>&#x2192;E</i>3<sub>1,1</sub><sup>(1)</sup><i>&#x2192;E</i>3<sub>1,2</sub><sup>(1)</sup><i>&#x2192;E</i>3<sub>1,3</sub><sup>(1)</sup><i>&#x2192;M</i>3<sub>2,1</sub><sup>(1)</sup><i>&#x2192;M</i>3<sub>2,2</sub><sup>(1)</sup><i>&#x2192;M</i>3<sub>2,3</sub><sup>(1)</sup><i>&#x2192;M</i>3<sub>2,4</sub><sup>(1)</sup><i>&#x2192;E</i>3<sub>2,1</sub><sup>(1)</sup><i>&#x2192;E</i>3<sub>2,2</sub><sup>(1)</sup><i>&#x2192;E</i>3<sub>2,3</sub><sup>(1)</sup><i>&#x2192;E</i>3<sub>2,4</sub><sup>(1)</sup><i>&#x2192;M</i>3<sub>1,1</sub><sup>(2)</sup>&#x2192;. . ..<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0091" num="0000">wherein the iterative processing for codeword<sub>3 </sub>is ended when all the parity equations are satisfied.</p><p id="p-0092" num="0068">It can be appreciated from the foregoing that, although the three code block inputs of the example are decoded simultaneously by three segments of the parallel codeword QC-LDPC decoder, appreciable latencies may nevertheless be experienced in the decoding process of each codeword as a result of the plurality of message processing steps implemented by the parallel codeword QC-LDPC decoder. In contrast, low-latency segmented QC-LDPC decoders of embodiments of the invention implement a QC-LDPC decoder configured to be divided into multiple segments and to process multiple bundles of edges for a codeword simultaneously to speed up the decoding process of the codeword. A low-latency segmented QC-LDPC decoder of some embodiments may, for example, be utilized in facilitating low latency communications with respect to vehicle-to-everything (V2X) communications requiring low-latency and reliable communication services.</p><p id="p-0093" num="0069"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a slice view of low-latency segmented QC-LDPC decoder <b>1100</b> implementing reconfigurable segmented scalable shifter <b>1140</b> for parallel processing of multiple bundles of edges connecting a CNC and corresponding VNCs for a codeword. In the illustrated example, low-latency segmented QC-LDPC decoder <b>1100</b> provides a multi-segment codeword parallel edge bundle processing configuration, such as may be utilized to speed up the decoding process by implementing parallel processing of bundles of messages of a codeword being decoded. For example, the multi-segment codeword parallel edge bundle processing configuration of <figref idref="DRAWINGS">FIG. <b>11</b></figref> facilitates simultaneous processing with respect to edge bundle B<sub>1,1 </sub>connecting CNC<sub>1 </sub>and VNC<sub>1</sub>, edge bundle B<sub>1,2 </sub>connecting CNC<sub>1 </sub>and VNC<sub>2</sub>, and edge bundle B<sub>1,3 </sub>connecting CNC<sub>1 </sub>and VNC<sub>3 </sub>(e.g., corresponding to the above example BG matrix and corresponding Tanner graph of <figref idref="DRAWINGS">FIG. <b>4</b></figref> wherein the negative entry in BG matrix position 1=1, j=4 corresponds to no connection or edge between CNC<sub>1 </sub>and VNC<sub>v </sub>in the Tanner graph). That is, Segment1 (e.g., active portion <b>1101</b>) of low-latency segmented QC-LDPC decoder <b>1100</b> provides decode processing with respect to the messages of edge bundle B<sub>1,1 </sub>connecting CNC<sub>1 </sub>and VNC<sub>1</sub>, Segment2 (e.g., active portion <b>1102</b>) provides decode processing with respect to messages of edge bundle B<sub>1,2 </sub>connecting CNC<sub>1 </sub>and VNC<sub>2</sub>, and Segment3 (e.g., active portion <b>1103</b>) provides decode processing with respect to messages edge bundle B<sub>1,3 </sub>connecting CNC<sub>1 </sub>and VNC<sub>3</sub>, wherein each of Segment1, Segment2, and Segment <b>3</b> are of size Z (i.e., comprising Z edges). Reconfigurable segmented scalable shifter <b>1140</b> of embodiments thus comprises a shifter configured for dividing into multiple segments supporting simultaneous processing of decoding tasks for a codeword undergoing decoding processing. In accordance with some embodiments, reconfigurable segmented scalable shifter <b>1140</b> may comprise an instance of reconfigurable segmented scalable shifter <b>940</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> configured to process multiple bundles of edges of a codeword simultaneously.</p><p id="p-0094" num="0070">In accordance with embodiments of the invention, decode processing tasks for a codeword are partitioned and allocated to different segments of a low-latency segmented QC-LDPC decoder such that the low-latency segmented QC-LDPC decoder processes multiple bundles of messages (or edges) in parallel. Parallel processing of multiple bundles of edges for a codeword according to concepts herein is illustrated in the table below. In particular, the table below provides both the message processing steps implemented by a QC-LDPC decoder in performing the traditional sequential min-sum decoding procedure (e.g., the message sequence described above with respect to the example of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>) and the message processing steps implemented by a low-latency segmented QC-LDPC decoder in performing the min-sum decoding procedure in which messages of multiple bundles of edges with respect to a same CNC are processed simultaneously (e.g., the three segment message sequences corresponding to the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>).</p><p id="p-0095" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="42pt" align="left"/><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="119pt" align="center"/><colspec colname="3" colwidth="7pt" align="center"/><tbody valign="top"><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row><row><entry/><entry>Traditional</entry><entry>Parallel Processing of Multiple</entry><entry/></row><row><entry/><entry>Sequential</entry><entry>Message Bundles for a Codeword</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="42pt" align="left"/><colspec colname="4" colwidth="42pt" align="left"/><colspec colname="5" colwidth="42pt" align="left"/><tbody valign="top"><row><entry>Step</entry><entry>Processing</entry><entry>Segment1</entry><entry>Segment2</entry><entry>Segment3</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="1" colwidth="42pt" align="char" char="."/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="42pt" align="left"/><colspec colname="4" colwidth="42pt" align="left"/><colspec colname="5" colwidth="42pt" align="left"/><tbody valign="top"><row><entry>1</entry><entry><b>M</b><sub>1,1</sub><sup>(1)</sup></entry><entry><b>M</b><sub>1,1</sub><sup>(1)</sup></entry><entry><b>M</b><sub>1,2</sub><sup>(1)</sup></entry><entry><b>M</b><sub>1,3</sub><sup>(1)</sup></entry></row><row><entry>2</entry><entry><b>M</b><sub>1,2</sub><sup>(1)</sup></entry><entry>E<sub>1,1</sub><sup>(1)</sup></entry><entry>E<sub>1,2</sub><sup>(1)</sup></entry><entry>E<sub>1,3</sub><sup>(1)</sup></entry></row><row><entry>3</entry><entry><b>M</b><sub>1,3</sub><sup>(1)</sup></entry><entry><b>M</b><sub>2,1</sub><sup>(1)</sup></entry><entry><b>M</b><sub>2,2</sub><sup>(1)</sup></entry><entry><b>M</b><sub>2,3</sub><sup>(1)</sup></entry></row><row><entry>4</entry><entry>E<sub>1,1</sub><sup>(1)</sup></entry><entry><b>M</b><sub>2,4</sub><sup>(1)</sup></entry></row><row><entry>5</entry><entry>E<sub>1,2</sub><sup>(1)</sup></entry><entry>E<sub>2,1</sub><sup>(1)</sup></entry><entry>E<sub>2,2</sub><sup>(1)</sup></entry><entry>E<sub>2,3</sub><sup>(1)</sup></entry></row><row><entry>6</entry><entry>E<sub>1,3</sub><sup>(1)</sup></entry><entry>E<sub>2,4</sub><sup>(1)</sup></entry></row><row><entry>7</entry><entry><b>M</b><sub>2,1</sub><sup>(1)</sup></entry></row><row><entry>8</entry><entry><b>M</b><sub>2,2</sub><sup>(1)</sup></entry></row><row><entry>9</entry><entry><b>M</b><sub>2,3</sub><sup>(1)</sup></entry></row><row><entry>10</entry><entry><b>M</b><sub>2,4</sub><sup>(1)</sup></entry></row><row><entry>11</entry><entry>E<sub>2,1</sub><sup>(1)</sup></entry></row><row><entry>12</entry><entry>E<sub>2,2</sub><sup>(1)</sup></entry></row><row><entry>13</entry><entry>E<sub>2,3</sub><sup>(1)</sup></entry></row><row><entry>14</entry><entry>E<sub>2,4</sub><sup>(1)</sup></entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0096" num="0071">The message processing steps in the table above represent a single iteration of decode message processing for the previously described example BG matrix (BG=</p><p id="p-0097" num="0000"><maths id="MATH-US-00007" num="00007"><math overflow="scroll"> <mrow>  <mrow>   <mrow>    <mo>(</mo>    <mtable>     <mtr>      <mtd>       <mn>1</mn>      </mtd>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>1</mn>      </mtd>      <mtd>       <mrow>        <mo>-</mo>        <mn>1</mn>       </mrow>      </mtd>     </mtr>     <mtr>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>2</mn>      </mtd>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mn>1</mn>      </mtd>     </mtr>    </mtable>    <mo>)</mo>   </mrow>   <mo>)</mo>  </mrow>  <mo>,</mo> </mrow></math></maths></p><p id="p-0098" num="0000">wherein the steps provide processing with respect to the bundles of edges connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>(B<sub>1,1</sub>), CNC<sub>1 </sub>and VNC<sub>2 </sub>(B<sub>1,2</sub>), CNC<sub>1 </sub>and VNC<sub>3 </sub>(B<sub>1,3</sub>), CNC<sub>2 </sub>and VNC<sub>1 </sub>(B<sub>2,1</sub>), CNC<sub>1=2 </sub>and VNC<sub>2 </sub>(B<sub>2,2</sub>), CNC<sub>2 </sub>and VNC<sub>3 </sub>(B<sub>2,3</sub>), and CNC<sub>2 </sub>and VNC<sub>4 </sub>(B<sub>2,4</sub>). As with the various message flows described above, the bold message notations of the table above correspond to steps implementing min-stage calculation and the un-bolded notations correspond to steps implementing sum-stage calculation.</p><p id="p-0099" num="0072">In the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the decode processing tasks for the codeword are partitioned and allocated to different segments of the low-latency segmented QC-LDPC decoder so that parallel processing of multiple message bundles with respect to a CNC for a codeword is provided, as shown by the exemplary message processing steps of the table above. The multi-segment (e.g., three segment) codeword parallel edge bundle processing of this example low-latency segmented QC-LDPC decoder configuration performs decode processing for the decode message processing iteration in six steps. In contrast, the sequential message processing of the traditional QC-LDPC decoder performs decode processing for the decode message processing iteration in fourteen steps. Accordingly, it can be seen that latencies experienced in the decoding process of each codeword can be appreciably reduced (e.g., on the order of 40% in the above example) by implementations of a low-latency segmented QC-LDPC decoder according to concepts of the present invention.</p><p id="p-0100" num="0073">The decode processing tasks for the codeword of this example have been partitioned and allocated to different segments of the low-latency segmented QC-LDPC decoder so that the messages of multiple edge bundles with respect to a same CNC are processed in parallel. For example, in an implementation in which the low-latency segmented QC-LDPC decoder utilizes the min-sum algorithm, min-stage calculations for a plurality of message bundles are performed in parallel and sum-stage calculations for a plurality of message bundles are performed in parallel. The example parallel message bundle processing configuration provides operation in which the calculations that typically utilize results of other calculations (e.g., sum-stage calculations utilizing results of min-stage calculation) may nevertheless utilize those calculations. Although calculations are performed in parallel by the example low-latency segmented QC-LDPC decoder configuration, the results of the calculations for the various edge bundles equate to results of the corresponding calculations performed in the traditional sequential decoding procedure. That is, the results of the min-stage calculations and the sum-stage calculations in the message processing steps represented for the sequential message processing steps in the above table are the same as the results of the corresponding min-stage calculations and the corresponding sum-stage calculations in the message processing steps represented for the parallel message processing steps. Thus, low-latency segmented QC-LDPC decoder operation according to embodiments of the invention converges on a decoded codeword (i.e., all parity equations are satisfied) in the same number of decode processing iterations. However, as shown above, each decode processing iteration of the low-latency segmented QC-LDPC decoder implements fewer message processing steps than the traditional sequential message decoding process.</p><p id="p-0101" num="0074">It should be appreciated that, although the exemplary low-latency segmented QC-LDPC decoder illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref> is shown as being divided into three segments, various numbers of segments may be implemented in accordance with the concepts herein (e.g., with or without idle portions between). For example, according to embodiments in which the decoding tasks for a single codeword are partitioned for simultaneous processing using a plurality of segments of a low-latency segmented QC-LDPC decoder, a total of M segments may be implemented, wherein M=floor[Zmax/Z], Zmax=maximum codeword size (e.g., <b>384</b> in the above 5G example), and Z=size of each segment. Accordingly, message bundles of two or more of edge bundles B<sub>1,1</sub>, B<sub>1,2</sub>, B<sub>1,3</sub>, B<sub>1,3</sub>, B<sub>1,4</sub>, . . . may be processed in parallel, message bundles of two or more of edge bundles B<sub>2,1</sub>, B<sub>2,2</sub>, B<sub>2,3</sub>, B<sub>2,4</sub>, . . . may be processed in parallel, etc. by low-latency segmented QC-LDPC decoder <b>1100</b> of embodiments where the number of segments M utilized in the parallel processing is in accordance with the foregoing. Such segmented parallel processing may be particularly well suited to application with respect to relatively small input codewords (e.g., codewords associated with V2X communications), wherein the resources of a low-latency segmented QC-LDPC decoder are sufficient to support the partitioning and allocation of the tasks.</p><p id="p-0102" num="0075">Further, although the example of parallel processing of multiple message bundles for a codeword above allocates decode processing tasks so that the messages of multiple edge bundles with respect to a same CNC are processed in parallel, it should be appreciated that other schemes for partitioning and allocating decode processing tasks for a codeword may be implemented according to concepts herein. For example, the decode processing tasks for a codeword may be partitioned and allocated to different segments of a low-latency segmented QC-LDPC decoder of some embodiments so that the messages of edge bundles with respect to a plurality of CNCs are processed in parallel. Accordingly, message bundles of one or more of edge bundles B<sub>1,1</sub>, B<sub>1,2</sub>, B<sub>1,3</sub>, B<sub>1,4</sub>, . . . may be processed in parallel with message bundles of one or more of edge bundles B<sub>2,1</sub>, B<sub>2,2</sub>, B<sub>2,3</sub>, B<sub>2,4</sub>, . . . , etc. where the number of segments M is in accordance with the foregoing.</p><p id="p-0103" num="0076"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a slice view of low-latency segmented QC-LDPC decoder <b>1200</b> implementing reconfigurable segmented scalable shifter <b>1240</b> for parallel processing of multiple bundles of edges connecting a plurality of CNCs and corresponding VNCs for a codeword. As with the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref> above, low-latency segmented QC-LDPC decoder <b>1200</b> provides a multi-segment codeword parallel edge bundle processing configuration, such as may be utilized to speed up the decoding process by implementing parallel processing of bundles of messages of a codeword being decoded. The multi-segment codeword parallel edge bundle processing configuration of <figref idref="DRAWINGS">FIG. <b>12</b></figref> facilitates simultaneous processing with respect to edge bundle B<sub>1,1 </sub>connecting CNC<sub>1 </sub>and VNC<sub>1</sub>, edge bundle B<sub>1,2 </sub>connecting CNC<sub>1 </sub>and VNC<sub>2</sub>, edge bundle B<sub>1,3 </sub>connecting CNC<sub>1 </sub>and VNC<sub>3</sub>, and edge bundle B<sub>2,1 </sub>connecting CNC<sub>2 </sub>and VNC<sub>1 </sub>(e.g., corresponding to the above example BG matrix and corresponding Tanner graph of <figref idref="DRAWINGS">FIG. <b>4</b></figref> wherein the negative entry in BG matrix position i=1, j=4 corresponds to no connection or edge between CNC<sub>1 </sub>and VNC<sub>V </sub>in the Tanner graph). That is, Segment1 (e.g., active portion <b>1201</b>) of low-latency segmented QC-LDPC decoder <b>1200</b> provides decode processing with respect to the messages of edge bundle B<sub>1,1 </sub>connecting CNC<sub>1 </sub>and VNC<sub>1</sub>, Segment2 (e.g., active portion <b>1202</b>) provides decode processing with respect to messages of edge bundle B<sub>1,2 </sub>connecting CNC<sub>1 </sub>and VNC<sub>2</sub>, Segment3 (e.g., active portion <b>1203</b>) provides decode processing with respect to messages edge bundle B<sub>1,3 </sub>connecting CNC<sub>1 </sub>and VNC<sub>3</sub>, and Segment4 (e.g., active portion <b>1204</b>) provides decode processing with respect to the messages of edge bundle B<sub>2,1 </sub>connecting CNC<sub>2 </sub>and VNC<sub>1</sub>. Reconfigurable segmented scalable shifter <b>1240</b> of embodiments thus comprises a shifter configured for dividing into multiple segments supporting simultaneous processing of decoding tasks for a codeword undergoing decoding processing. In accordance with some embodiments, reconfigurable segmented scalable shifter <b>1240</b> may comprise an instance of reconfigurable segmented scalable shifter <b>940</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> configured to process multiple bundles of edges of a codeword simultaneously.</p><p id="p-0104" num="0077">The table below provides both the message processing steps implemented by a QC-LDPC decoder in performing the traditional sequential min-sum decoding procedure (e.g., the message sequence described above with respect to the example of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>) and the message processing steps implemented by a low-latency segmented QC-LDPC decoder in performing the min-sum decoding procedure in which messages of multiple bundles of edges with respect to a plurality of CNCs are processed simultaneously (e.g., the four segment message sequences corresponding to the example of <figref idref="DRAWINGS">FIG. <b>12</b></figref>).</p><p id="p-0105" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="147pt" align="center"/><tbody valign="top"><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Traditional</entry><entry>Parallel Processing of Multiple</entry></row><row><entry/><entry>Sequential</entry><entry>Message Bundles for a Codeword</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="28pt" align="center"/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="42pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><colspec colname="5" colwidth="35pt" align="left"/><colspec colname="6" colwidth="35pt" align="left"/><tbody valign="top"><row><entry>Step</entry><entry>Processing</entry><entry>Segment1</entry><entry>Segment2</entry><entry>Segment3</entry><entry>Segment4</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="28pt" align="char" char="."/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="42pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><colspec colname="5" colwidth="35pt" align="left"/><colspec colname="6" colwidth="35pt" align="left"/><tbody valign="top"><row><entry>1</entry><entry><b>M</b><sub>1,1</sub><sup>(1)</sup></entry><entry><b>M</b><sub>1,1</sub><sup>(1)</sup></entry><entry><b>M</b><sub>1,2</sub><sup>(1)</sup></entry><entry><b>M</b><sub>1,3</sub><sup>(1)</sup></entry><entry>E<sub>1,1</sub><sup>(1)</sup></entry></row><row><entry>2</entry><entry><b>M</b><sub>1,2</sub><sup>(1)</sup></entry><entry>E<sub>1,2</sub><sup>(1)</sup></entry><entry>E<sub>1,3</sub><sup>(1)</sup></entry><entry><b>M</b><sub>2,1</sub><sup>(1)</sup></entry><entry><b>M</b><sub>2,2</sub><sup>(1)</sup></entry></row><row><entry>3</entry><entry><b>M</b><sub>1,3</sub><sup>(1)</sup></entry><entry><b>M</b><sub>2,3</sub><sup>(1)</sup></entry><entry><b>M</b><sub>2,4</sub><sup>(1)</sup></entry><entry>E<sub>2,1</sub><sup>(1)</sup></entry><entry>E<sub>2,2</sub><sup>(1)</sup></entry></row><row><entry>4</entry><entry>E<sub>1,1</sub><sup>(1)</sup></entry><entry>E<sub>2,3</sub><sup>(1)</sup></entry><entry>E<sub>2,4</sub><sup>(1)</sup></entry></row><row><entry>5</entry><entry>E<sub>1,2</sub><sup>(1)</sup></entry></row><row><entry>6</entry><entry>E<sub>1,3</sub><sup>(1)</sup></entry></row><row><entry>7</entry><entry><b>M</b><sub>2,1</sub><sup>(1)</sup></entry></row><row><entry>8</entry><entry><b>M</b><sub>2,2</sub><sup>(1)</sup></entry></row><row><entry>9</entry><entry><b>M</b><sub>2,3</sub><sup>(1)</sup></entry></row><row><entry>10</entry><entry><b>M</b><sub>2,4</sub><sup>(1)</sup></entry></row><row><entry>11</entry><entry>E<sub>2,1</sub><sup>(1)</sup></entry></row><row><entry>12</entry><entry>E<sub>2,2</sub><sup>(1)</sup></entry></row><row><entry>13</entry><entry>E<sub>2,3</sub><sup>(1)</sup></entry></row><row><entry>14</entry><entry>E<sub>2,4</sub><sup>(1)</sup></entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0106" num="0078">As with the previous table, the message processing steps in the table above represent a single iteration of decode message processing for the previously described example</p><p id="p-0107" num="0000"><maths id="MATH-US-00008" num="00008"><math overflow="scroll"> <mrow>  <mrow>   <mo>(</mo>   <mrow>    <mrow>     <mi>B</mi>     <mo>&#x2062;</mo>     <mi>G</mi>    </mrow>    <mo>=</mo>    <mtext>&#x205f;</mtext>    <mrow>     <mo>(</mo>     <mtable>      <mtr>       <mtd>        <mn>1</mn>       </mtd>       <mtd>        <mn>0</mn>       </mtd>       <mtd>        <mn>1</mn>       </mtd>       <mtd>        <mrow>         <mo>-</mo>         <mn>1</mn>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mn>0</mn>       </mtd>       <mtd>        <mn>2</mn>       </mtd>       <mtd>        <mn>0</mn>       </mtd>       <mtd>        <mn>1</mn>       </mtd>      </mtr>     </mtable>     <mo>)</mo>    </mrow>   </mrow>   <mo>)</mo>  </mrow>  <mo>,</mo> </mrow></math></maths></p><p id="p-0108" num="0079">BG matrix wherein the steps provide processing with respect to the bundles of edges connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>(B<sub>1,1</sub>), CNC<sub>1 </sub>and VNC<sub>2 </sub>(B<sub>1,2</sub>), CNC<sub>1 </sub>and VNC<sub>3 </sub>(B<sub>1,3</sub>), CNC<sub>2 </sub>and VNC<sub>1 </sub>(B<sub>2,1</sub>), CNC<sub>1=2 </sub>and VNC<sub>2 </sub>(B<sub>2,2</sub>), CNC<sub>2 </sub>and VNC<sub>3 </sub>(B<sub>2,3</sub>), and CNC<sub>2 </sub>and VNC<sub>4 </sub>(B<sub>2,4</sub>). As with the various message flows described above, the bold message notations of the table above correspond to steps implementing min-stage calculation and the un-bolded notations correspond to steps implementing sum-stage calculation.</p><p id="p-0109" num="0080">In the example of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the decode processing tasks for the codeword are partitioned and allocated to different segments of the low-latency segmented QC-LDPC decoder so that parallel processing of multiple message bundles with respect to a plurality of CNCs for a codeword is provided, as shown by the exemplary message processing steps of the table above. In particular, the example of <figref idref="DRAWINGS">FIG. <b>12</b></figref> provides parallel processing of multiple message bundles with respect to a first CNC (e.g., message bundles of edge bundles B<sub>1,1</sub>, B<sub>1,2</sub>, B<sub>1,3 </sub>connected to CNC<sub>1</sub>) and parallel processing of multiple message bundles with respect to a plurality of CNCs (e.g., message bundles of edge bundles B<sub>1,1</sub>, B<sub>1,2</sub>, B<sub>1,3 </sub>connected to CNC<sub>1 </sub>and message bundles of edge bundle B<sub>2,1 </sub>connected to CNC<sub>2</sub>). The multi-segment (e.g., four segment) codeword parallel edge bundle processing of this example low-latency segmented QC-LDPC decoder configuration performs decode processing for the decode message processing iteration in four steps. As discussed above, the sequential message processing of the traditional QC-LDPC decoder performs decode processing for the decode message processing iteration in fourteen steps. Accordingly, it can be seen that latencies experienced in the decoding process of each codeword can be appreciably reduced (e.g., on the order of 60% in the above example) by implementations of a low-latency segmented QC-LDPC decoder according to concepts of the present invention.</p><p id="p-0110" num="0081">The decode processing tasks for the codeword of this example have been partitioned and allocated to different segments of the low-latency segmented QC-LDPC decoder so that the messages of multiple edge bundles with respect to a plurality of CNCs are processed in parallel. Accordingly, in an implementation in which the low-latency segmented QC-LDPC decoder utilizes the min-sum algorithm, not only may min-stage calculations for a plurality of message bundles be performed in parallel and sum-stage calculations for a plurality of message bundles be performed in parallel, but min-stage calculations for one or more message bundles may be performed in parallel with one or more sum-stage message bundles. The example parallel message bundle processing configuration provides operation in which the calculations that typically utilize results of other calculations (e.g., sum-stage calculations utilizing results of min-stage calculation) may be performed in some instances before the other calculations have been performed. Accordingly, the results of some calculations for the various edge bundles may not equate to results of the corresponding calculations performed in the traditional sequential decoding procedure. That is, the results of the min-stage calculations and the sum-stage calculations in the message processing steps represented for the sequential message processing steps in the above table may not be the same as all instances of the results of the corresponding min-stage calculations and the corresponding sum-stage calculations in the message processing steps represented for the parallel message processing steps. Nevertheless, low-latency segmented QC-LDPC decoder operation according to embodiments of the invention is expected to converge on a decoded codeword (i.e., all parity equations are satisfied) in approximately (e.g., &#xb1;5%) the same number of decode processing iterations. However, as shown above, each decode processing iteration of the low-latency segmented QC-LDPC decoder implements significantly fewer message processing steps than the traditional sequential message decoding process. Accordingly, even in a situation where slightly more iterations of decode processing are utilized by the multi-segment codeword parallel edge bundle processing configuration, the decoding process of codewords would be appreciably reduced.</p><p id="p-0111" num="0082">It should be appreciated that, although the exemplary low-latency segmented QC-LDPC decoders illustrated in <figref idref="DRAWINGS">FIGS. <b>11</b> and <b>12</b></figref> are shown as providing multi-segment codeword parallel edge bundle processing with respect to a single codeword, low-latency segmented QC-LDPC decoders of embodiments are scalable to accommodate various numbers of codewords for decode processing. For example, codewords from a plurality of input signals (e.g., as may correspond to signals from a plurality of connected terminals served by a base station hosting a receiver utilizing the parallel codeword QC-LDPC decoder, etc.) may be processed in parallel, wherein the parallel processing of the codewords may implement multi-segment codeword parallel edge bundle processing.</p><p id="p-0112" num="0083"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a slice view of low-latency segmented QC-LDPC decoder <b>1300</b> implementing reconfigurable segmented scalable shifter <b>1340</b> for parallel processing of multiple bundles of edges connecting a CNC and corresponding VNCs for a plurality of codewords. As with the examples of <figref idref="DRAWINGS">FIGS. <b>11</b> and <b>12</b></figref> above, low-latency segmented QC-LDPC decoder <b>1300</b> provides a multi-segment codeword parallel edge bundle processing configuration, such as may be utilized to speed up the decoding process by implementing parallel processing of bundles of messages of a codeword being decoded. The multi-segment codeword parallel edge bundle processing configuration of <figref idref="DRAWINGS">FIG. <b>13</b></figref> facilitates simultaneous processing with respect to edge bundle B<sub>1,1 </sub>for a first codeword (e.g., IN_1, B<sub>1,1 </sub>corresponding to a code block from a first input signal of a plurality of input signals) connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>for the first codeword, edge bundle B<sub>1,2 </sub>for the first codeword (e.g., IN_1, B<sub>1,2 </sub>corresponding to the code block from the first input signal) connecting CNC<sub>1 </sub>and VNC<sub>2 </sub>for the first codeword, edge bundle B<sub>1,1 </sub>for a second codeword (e.g., IN_2, B<sub>1,1 </sub>corresponding to a code block from a second input signal of the plurality of input signals) connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>for the second codeword, and edge bundle B<sub>1,2 </sub>for the second codeword (e.g., IN_2, B<sub>1,2 </sub>corresponding to the code block from the second input signal) connecting CNC<sub>1 </sub>and VNC<sub>2 </sub>for the second codeword. That is, Segment1 (e.g., active portion <b>1301</b>) of low-latency segmented QC-LDPC decoder <b>1300</b> provides decode processing with respect to the messages of edge bundle B<sub>1,1 </sub>connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>for the first codeword, Segment2 (e.g., active portion <b>1302</b>) provides decode processing with respect to messages of edge bundle B<sub>1,2 </sub>connecting CNC<sub>1 </sub>and VNC<sub>2 </sub>for the first codeword, Segment3 (e.g., active portion <b>1303</b>) provides decode processing with respect to messages edge bundle B<sub>1,1 </sub>connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>for the second codeword, and Segment4 (e.g., active portion <b>1304</b>) provides decode processing with respect to the messages of edge bundle B<sub>1,2 </sub>connecting CNC<sub>1 </sub>and VNC<sub>2 </sub>for the second codeword. Reconfigurable segmented scalable shifter <b>1340</b> of embodiments thus comprises a shifter configured for dividing into multiple segments supporting simultaneous processing of decoding tasks for a plurality of codewords undergoing decoding processing. In accordance with some embodiments, reconfigurable segmented scalable shifter <b>1340</b> may comprise an instance of reconfigurable segmented scalable shifter <b>940</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> configured to process multiple bundles of edges of a plurality of codewords simultaneously.</p><p id="p-0113" num="0084">The decode processing tasks for the plurality of codewords of this example have been partitioned and allocated to different segments of the low-latency segmented QC-LDPC decoder so that the messages of multiple edge bundles with respect to a same CNC for each of a plurality of codewords are all processed in parallel. Accordingly, as with the multi-segment codeword parallel edge bundle processing configurations of <figref idref="DRAWINGS">FIGS. <b>11</b> and <b>12</b></figref>, fewer steps the steps are implemented in each iteration of decode message processing.</p><p id="p-0114" num="0085">Segmentation may be implemented for data shifting by reconfigurable segmented scalable shifters <b>1140</b>, <b>1240</b>, and <b>1340</b> of the above examples by providing individual data shift control with respect to each path of a data shifter stage to implement different data shift commands for the segments and control multiple data shifts in parallel. It should be appreciated, however, that low-latency segmented QC-LDPC decoders of embodiments of the invention may be constructed with different shifter core configurations. For example, embodiments of a low-latency segmented QC-LDPC decoder, and a reconfigurable segmented scalable shifter thereof, may be implemented to accommodate relatively large lifting parameters (e.g., Z=384 for a 5G QC-LDPC decoder implementation) and/or relatively large number of segments (e.g., a total of M segments, where M=floor[384/Z] and Z=size of each segment in the 5G example). Accordingly, the control signal structure of shifter core configurations implementing individual data shift control with respect to each path of a data shifter stage may become relatively complicated in some situations. Embodiments may thus implement a less complicated reconfigurable segmented scalable shifter configuration which nevertheless is reconfigurable for supporting data shifting with respect to various multi-segment codeword parallel edge bundle processing configurations.</p><p id="p-0115" num="0086"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a reconfigurable segmented scalable shifter configuration which may be utilized in providing parallel processing of bundles of messages of one or more codewords being decoded in accordance with concepts of the present invention. Reconfigurable segmented scalable shifter <b>1440</b> shown in <figref idref="DRAWINGS">FIG. <b>14</b></figref> implements a sectioned configuration in which each of the left shift and right shift portions (either one of which is represented in the illustration) are divided into multiple sections, wherein the data paths of each section share the same control signals. For example, the reconfigurable segmented scalable shifter may be divided into a plurality of sections of equal data widths, different data widths, or a combination thereof where, although each section may be controlled individually to provide different data shifting (e.g., direction and/or shift value), all data of a section is controlled together for same data shifting (e.g., direction and shift value). Such configurations may, for example, be utilized in implementations of reconfigurable segmented scalable shifters <b>1140</b>, <b>1240</b>, and <b>1340</b> to provide a satisfactory tradeoff between the number of segments and hardware cost.</p><p id="p-0116" num="0087">Segmentation for implementing parallel processing of bundles of messages of one or more codewords being decoded may be implemented by configuring a group of one or more sections for each segment, wherein the group of sections for a particular segment provides an aggregate data width equal to or greater than the data width of the segment. Accordingly, bundles of messages for one or more messages may be provided data shifting in each segment as hosted by a respective group of one or more sections, wherein the message bundles may be provided individual data shifting in parallel through appropriately controlling the sections for each segment.</p><p id="p-0117" num="0088">The number of sections (n) and the section data width (W) are preferably related to the shifter data width (N) so that the total data with is sectioned (e.g., N=n*W). In the exemplary embodiment of reconfigurable segmented scalable shifter <b>1440</b> shown in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the shifter data width N=384, the number of sections n=24, and the data width of each section W=16 (e.g., 384=24*16). M number of segments may be hosted by various groups of sections of reconfigurable segmented scalable shifter <b>1440</b>, wherein the number of segments is less than or equal to the shifter data width (e.g., 1&#x2264;M&#x2264;N) and the aggregate size of the segments is less than or equal to the shifter data width (e.g., N_1+N_2+ . . . N_M&#x2264;N).</p><p id="p-0118" num="0089">The example of reconfigurable segmented scalable shifter <b>1440</b> shown in <figref idref="DRAWINGS">FIG. <b>14</b></figref> is configured for use in multi-segment codeword parallel edge bundle processing facilitating simultaneous processing of multiple message bundles with respect to each of a plurality of codewords for which parallel LDPC decoding is provided. In particular, reconfigurable segmented scalable shifter <b>1440</b> provides the requisite shifting with respect to edge bundle B<sub>1,1 </sub>for a first codeword (e.g., IN_1, B<sub>1,1 </sub>corresponding to a code block from a first input signal of a plurality of input signals) connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>for the first codeword, edge bundle B<sub>1,2 </sub>for the first codeword (e.g., IN_1, B<sub>1,2 </sub>corresponding to the code block from the first input signal) connecting CNC<sub>1 </sub>and VNC<sub>2 </sub>for the first codeword, edge bundle B<sub>1,1 </sub>for a second codeword (e.g., IN_2, B<sub>1,1 </sub>corresponding to a code block from a second input signal of the plurality of input signals) connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>for the second codeword, edge bundle B<sub>1,2 </sub>for the second codeword (e.g., IN_2, B<sub>1,2 </sub>corresponding to the code block from the second input signal) connecting CNC<sub>1 </sub>and VNC<sub>2 </sub>for the second codeword, and edge bundle B<sub>1,3 </sub>for the second codeword (e.g., IN_2, B<sub>1,3 </sub>corresponding to the code block from the second input signal) connecting CNC<sub>1 </sub>and VNC<sub>3 </sub>for the second codeword. That is, Segment1 (e.g., active portion <b>1401</b>) of reconfigurable segmented scalable shifter <b>1440</b> provides shifting with respect to the messages of edge bundle B<sub>1,1 </sub>connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>for the first codeword, Segment2 (e.g., active portion <b>1402</b>) provides shifting with respect to messages of edge bundle B<sub>1,2 </sub>connecting CNC<sub>1 </sub>and VNC<sub>2 </sub>for the first codeword, Segment3 (e.g., active portion <b>1403</b>) provides shifting with respect to messages edge bundle B<sub>1,1 </sub>connecting CNC<sub>1 </sub>and VNC<sub>1 </sub>for the second codeword, Segment4 (e.g., active portion <b>1404</b>) provides shifting with respect to the messages of edge bundle B<sub>1,2 </sub>connecting CNC<sub>1 </sub>and VNC<sub>2 </sub>for the second codeword, and Segment5 (e.g., active portion <b>1405</b>) provides shifting with respect to the messages of edge bundle B<sub>1,3 </sub>connecting CNC<sub>1 </sub>and VNC<sub>3 </sub>for the second codeword. Reconfigurable segmented scalable shifter <b>1440</b> of embodiments thus comprises a shifter configured for dividing into multiple segments supporting simultaneous processing of decoding tasks for a plurality of codewords undergoing decoding processing.</p><p id="p-0119" num="0090">Reconfigurable segmented scalable shifter <b>1440</b> of embodiments is configured for dividing into multiple segments by combining a plurality of successive sections to form a data shifter for accommodating data widths larger than the individual sections. For example, in the example of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, sections n=0 and n=1 are combined for Segment1 and sections n=2 and n=3 are combined for Segment2, providing active portions <b>1401</b> and <b>1402</b> for use with respect to message bundles of the first codeword having a data width greater than the respective sections (e.g., Z&#x3e;W). Also in the example of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, section n=5 is used for Segment3, section n=6 is used for Segment4, and n=7 is used for Segment5, providing active portions <b>1403</b>, <b>1404</b>, and <b>1405</b> for use with respect to message bundles of the second codeword having a data width less than or equal to the respective sections (e.g., Z&#x2264;W). Such reconfigurable segmented scalable shifter configurations provide for fully reconfigurable data width and shift command of each message of input data and are well suited for use with respect to embodiments of parallel LDPC decoder <b>200</b>. For example, in operation of a receiver in a 5G network (e.g., implementing 5G BG1), if N=24 and W=16, then parallel LDPC decoder <b>200</b> of embodiments can simultaneously decoding 24 code blocks with lifting parameter Z&#x2264;16.</p><p id="p-0120" num="0091">The foregoing sectioned shifter core configuration implements common data shift control with respect to each path of a section, and thus less control signals are utilized in providing operational control of the shifter core. However, as can be seen in the illustrated example of the sectioned configuration of reconfigurable segmented scalable shifter <b>1440</b>, the unused portion of a section of an otherwise active section stays idle. One or more unused (e.g., idle) sections may be present between the sections forming segments of a codeword or codewords (e.g., section n=4 remaining unused between Segment2 for the first codeword and Segment3 for the second codeword).</p><p id="p-0121" num="0092"><figref idref="DRAWINGS">FIGS. <b>15</b>A-<b>15</b>E</figref> show detail with respect to an implementation of low-latency segmented QC-LDPC decoder <b>1500</b> configured for parallel processing of multiple message bundles for a codeword undergoing a decoding process in accordance with concepts of the present invention. In the illustrations of <figref idref="DRAWINGS">FIGS. <b>15</b>A-<b>15</b>E</figref>, the notation M<sub>i,j</sub><sup>(t) </sup>indicates a V2C message (M<sub>i,j</sub><sup>(t+1</sup>) is a V2C message after an iteration of cyclic shift), E<sub>i,j</sub><sup>(t) </sup>indicates a C2V an message (E<sub>i,j</sub><sup>(t) </sup>a C2V message after iteration of cyclic shift), SUM<sub>j</sub><sup>(t) </sup>indicates a variable node message, (t) indicates the iteration number, i indicates the index of the CNC, and j indicates the index of the VNC.</p><p id="p-0122" num="0093">In accordance with some examples, low-latency segmented QC-LDPC decoder <b>1500</b> may be configured for use with respect to a receiver in a 5G network, and thus may accommodate decoding of code blocks having various lifting parameter sizes up to lifting parameter Z=384. In such a configuration of embodiments, connections in the data paths carry <b>384</b> soft messages. Likewise, various of the components in the embodiment of low-latency segmented QC-LDPC decoder <b>1500</b> shown in <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> (<figref idref="DRAWINGS">FIGS. <b>15</b>A-<b>1</b> and <b>15</b>A-<b>2</b></figref>) may be appropriately scaled. For example, embodiments of low-latency segmented QC-LDPC decoder <b>1500</b> may comprise 384 instances of adder/subtractor logic <b>1501</b>, corresponding to a largest accommodated lifting parameter Z=384.</p><p id="p-0123" num="0094">Low-latency segmented QC-LDPC decoder <b>1500</b> shown in <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> (<figref idref="DRAWINGS">FIGS. <b>15</b>A-<b>1</b> and <b>15</b>A-<b>2</b></figref>) illustrates an example hardware implementation configured for parallel processing of 3 message bundles for a codeword undergoing a decoding process (e.g., an implementation of low-latency segmented QC-LDPC decoder <b>1100</b> of the example of <figref idref="DRAWINGS">FIG. <b>11</b></figref> described above). Accordingly, BG matrix <b>1510</b> utilized in the QC-LDPC decoding operation shown in the example of <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> (<figref idref="DRAWINGS">FIGS. <b>15</b>A-<b>1</b> and <b>15</b>A-<b>2</b></figref>) includes 3 instances of ROM<b>2</b> (e.g., ROM<b>2</b> <b>1512</b><i>a</i>-<b>1512</b><i>c</i>) storing value information for the BG matrix, in addition to ROM<b>1</b> <b>1511</b> storing index information for the BG matrix and ROM<b>3</b> <b>1513</b> storing edge information for the BG matrix. In the illustrated example, the adders (e.g., adder <b>1514</b><i>b </i>corresponding to ROM<b>2</b> <b>1512</b><i>b </i>and adder <b>1514</b><i>c </i>corresponding to ROM<b>2</b> <b>1512</b><i>c</i>) shown in the address paths (e.g., rom_adder<b>2</b>) of instances of ROM<b>2</b> provide for next locations of the memory.</p><p id="p-0124" num="0095">It should be appreciated that implementations of low-latency segmented QC-LDPCs may be configured for parallel processing of various numbers message bundles by including the requisite instances of BG matrix value data, and thus are not limited to the 3 message bundle example of <figref idref="DRAWINGS">FIGS. <b>15</b>A-<b>15</b>E</figref>. For example, parallel processing of 4 message bundles for a codeword undergoing a decoding process, such as in the examples of low-latency segmented QC-LDPC decoders <b>1200</b> and <b>1300</b> of <figref idref="DRAWINGS">FIGS. <b>12</b> and <b>13</b></figref> above, may be provided by including the requisite instances of BG matrix value ROM data (e.g., provided by additional instances of ROM<b>2</b>). The duplication of some memory elements may be avoided or mitigated (e.g., reducing the duplicated instances) in accordance with some embodiments, such as by utilizing multi-port memory supporting simultaneous access capabilities (e.g., multi-port RAM in place of multiple instances of ROM<b>2</b> of the illustrated example).</p><p id="p-0125" num="0096">Low-latency segmented QC-LDPC decoder <b>1500</b> of the illustrated example utilizes multi-port memory supporting simultaneous access capabilities with respect to messages for parallel processing of multiple message bundles for a codeword undergoing decoding. For example, SRAM<b>1</b> <b>1521</b> and SRAM<b>2</b> <b>1522</b> are shown in the illustrated embodiment as comprising dual-port memory configurations. SRAM<b>1</b> <b>1521</b> of the example provides storage of V2C and C2V messages and SRAM<b>2</b> <b>1522</b> of the example provides storage of variable node messages. The multi-port implementations of SRAM<b>1</b> <b>1521</b> and SRAM<b>2</b> <b>1522</b> facilitate concurrent access with respect to various of the messages as may be invoked by the parallel processing of message bundles according to concepts herein.</p><p id="p-0126" num="0097">Reconfigurable segmented scalable shifter <b>1540</b> of embodiments of low-latency segmented QC-LDPC decoder <b>1500</b> comprises a segmented shifter implementation configured for bundling edges of one or more CNCs of the low density segmented QC-LDPC decoder. Reconfigurable segmented scalable shifter <b>1540</b> may, for example, comprise a configuration providing individual data shift control with respect to each path of a data shifter stage, such as described above with respect to reconfigurable segmented scalable shifters <b>1140</b>, <b>1240</b>, and <b>1340</b>. Additionally or alternatively, reconfigurable segmented scalable shifter <b>1540</b> of embodiments may comprise a sectioned configuration in which the data paths of each section share the same control signals, such as described above with respect to reconfigurable segmented scalable shifter <b>1440</b>.</p><p id="p-0127" num="0098">Low-latency segmented QC-LDPC decoder <b>1500</b> of the illustrated embodiment utilizes the min-sum algorithm in decoding code blocks. In operation of low-latency segmented QC-LDPC decoder <b>1500</b>, messages passed from VNCs to a connected CNC may be computed by logic of the low-latency segmented QC-LDPC decoder (e.g., using adder/subtractor logic <b>1501</b>) from the data previously provided in the messages passed from the CNC in a prior iteration of the decoding. Min-sum logic <b>1530</b> of low-latency segmented QC-LDPC decoder <b>1500</b> in the illustrated example includes min-sum logic <b>1530</b> utilized in providing messages passed from the CNC to the connected VNCs.</p><p id="p-0128" num="0099">Operation of abs module <b>1505</b>, min-sum logic <b>1530</b>, comparator module <b>1506</b>, and sign module <b>1507</b> of embodiments provides the check node messages (before cyclic shift) of the decoding processing of low-latency segmented QC-LDPC decoder <b>1500</b>. In operation according to embodiments, MIN1_MIN2 module <b>1531</b> of min-sum logic <b>1530</b> may compute a first minimum (MIN1) and a second minimum (MIN2) with respect to messages passed from VNCs to a connected CNC for determining a magnitude with respect to the messages passed from the CNC to the connected VNCs, as described above with respect to implementation of the min-sum algorithm. <figref idref="DRAWINGS">FIGS. <b>15</b>B and <b>15</b>C</figref> show detail with respect to an example implementation of MIN1_MIN2 module <b>1531</b> of embodiments. In particular, <figref idref="DRAWINGS">FIG. <b>15</b>B</figref> shows a functional block diagram of an implementation of MIN1_MIN2 module <b>1531</b> of an example implementing minimum computation logic and concatenation logic supporting segmentation facilitating parallel processing of message bundles. <figref idref="DRAWINGS">FIG. <b>15</b>C</figref> shows details with respect to minimum computation logic of <figref idref="DRAWINGS">FIG. <b>15</b>B</figref> in which comparison modules are implemented to move the smaller number of (A, B) to the left for minimum computation.</p><p id="p-0129" num="0100">In the illustrated example, data provided by abs module <b>1505</b> (e.g., absolute values determined by abs module <b>1505</b>) and input into MIN1_MIN2 module <b>1531</b> comprises 384 8-bit soft messages (e.g., Z=384 and din_abs_value[383:0][7:0]). In this example, low-latency segmented QC-LDPC decoder <b>1500</b> is configured for parallel processing of 3 message bundles for a codeword undergoing decoding, and thus the input data is divided into 3 segments. For example, segment <b>1</b> (e.g., din_abs_value_segment1[127:0][7:0]=din_abs_value[127:0][7:0]), segment <b>2</b> (e.g., din_abs_value_segment2[127:0][7:0]=din_abs_value[255:128][7:0]), and segment <b>3</b> (e.g., din_abs_value_segment3[127:0][7:0]=din_abs_value[383:256][7:0]) are shown in the example, each occupying 128 8-bit data.</p><p id="p-0130" num="0101">As described above with respect to min-sum algorithm operation, MIN1_MIN2 module <b>1531</b> computes a first minimum with respect to the messages passed from the VNCs connected to a CNC. Here, however, in contrast to traditional min-sum designs where the data of message bundles for a codeword would be provided in sequential manner, the three 128 8-bit data segments are provided in parallel. Therefore, the minimum is not only the minimum among the successively incoming data, but is also the minimum among the segments being processed in parallel. By way of specific example, where the input &#x201c;din_abs_value&#x201d; is 384 8-bit data and is divided into three 128 8-bit data segments in which the first 128 8-bit data is 20, 12, . . . , 100; the second 128 8-bit data is 30, 10, . . . , 1; and the third 128 8-bit data is 9, 70, . . . , 30; the first minimum data is 9, because it is minimum among 20, 30, and 9. In operation according to the example, the first minimum results of the parallel minimum computation are concatenated to provide a first minimum result (e.g., MIN1[383:0][7:0]=(MIN1_128_8bit[127:0][7:0], MIN1_128_8bit[127:0][7:0], MIN1_128_8bit[127:0][7:0]). The MIN1_128_8bit result is the first minimum amounts for segment <b>1</b>, segment <b>2</b>, and segment <b>3</b>. The 128 8-bit data, MIN1_128_8bit, will be duplicated three times respectively for segment <b>1</b>, segment <b>2</b> and segment <b>3</b>, to be MIN1.</p><p id="p-0131" num="0102">Also as described above with respect to min-sum algorithm operation, MIN1_MIN2 module <b>1531</b> computes a second minimum with respect to the messages passed from the VNCs connected to a CNC. Similar to the first minimum discussed above, computation of a second minimum is not only with respect to the minimum among the successively incoming data, but is also the minimum among the segments being processed in parallel. In operation according to the example, the second minimum results of the parallel minimum computation results are concatenated to provide a second minimum result (e.g., MIN2[383:0] [7:0]=(MIN2_128_8bit[127:0][7:0], MIN2_128_8bit[127:0][7:0], MIN2_128_8bit[127:0][7:0]). The MIN2_128_8bit result is the second minimum amounts for segment <b>1</b>, segment <b>2</b>, and segment <b>3</b>. The 128 8-bit data, MIN2_128_8bit, will be duplicated three times respectively for segment <b>1</b>, segment <b>2</b> and segment <b>3</b>, to be MIN2.</p><p id="p-0132" num="0103">In operation according to embodiments, SIGN_ALL module <b>1532</b> of min-sum logic <b>1530</b> may determine a sign (e.g., SIGN_ALL) for the messages passed from the VNCs connected to a CNC, as described above with respect to implementation of the min-sum algorithm. <figref idref="DRAWINGS">FIGS. <b>15</b>D and <b>15</b>E</figref> show detail with respect to an example implementation of SIGN_ALL module <b>1532</b> of embodiments. In particular, <figref idref="DRAWINGS">FIG. <b>15</b>D</figref> shows a functional block diagram of an implementation of SIGN_ALL module <b>1532</b> of an example implementing sign computation logic and concatenation logic supporting segmentation facilitating parallel processing of message bundles. <figref idref="DRAWINGS">FIG. <b>15</b>E</figref> shows details with respect to the sign computation logic of <figref idref="DRAWINGS">FIG. <b>15</b>D</figref> in which XOR gate logic is implemented for sign computation.</p><p id="p-0133" num="0104">In the illustrated example, signs provided by abs module <b>1505</b> (e.g., signs corresponding to the absolute values determined by abs module <b>1505</b>) and input into SIGN_ALL module <b>1532</b> comprises 384 signs (e.g., Z=384 and din_sign[383:0]). In this example, low-latency segmented QC-LDPC decoder <b>1500</b> is configured for parallel processing of 3 message bundles for a codeword undergoing decoding, and thus the input data is divided into 3 segments. For example, segment <b>1</b> (e.g., din_sign_segment<b>1</b> [127:0]=din_sign[127:0]), segment <b>2</b> (e.g., din_sign segment2[127:0]=din_sign[255:128]), and segment <b>3</b> (e.g., din_sign segment3[127:0]=din_sign[383:256]) are shown in the example, each occupying 128 1-bit data (e.g., sign=1 is negative).</p><p id="p-0134" num="0105">As described above with respect to min-sum algorithm operation, SIGN_ALL module <b>1532</b> computes signs with respect to the messages passed from the VNCs connected to a CNC. Here, as with the first and second minimums computed above, sign computation * is not only with respect to the successively incoming data, but is also with respect to the segments being processed in parallel. In operation according to the example, the sign results of the parallel computation are concatenated to provide a sign result (e.g., SIGN_ALL (e.g., SIGN_ALL[383:0]=signal1_128 bit[127:0], signal1_128 bit[127:0], signal1_8 bit[127:0]). The SIGN_ALL_128_1bit result is the signs for segment <b>1</b>, segment <b>2</b>, and segment <b>3</b>. The 128 1-bit data, SIGN_ALL_128_1bit will be duplicated three times respectively for segment <b>1</b>, segment <b>2</b> and segment <b>3</b>, to be SIGN_ALL.</p><p id="p-0135" num="0106">Comparator module <b>1506</b> of embodiments analyzes the first minimum data provided by MIN1_MIN2 module <b>1531</b> with respect to the V2C messages in determining a magnitude of the C2V message (e.g., MIN1 or MIN2), as described above with respect to min-sum algorithm operation. Thereafter, sign module <b>1507</b> appends the corresponding sign to provide the check node messages (before cyclic shift).</p><p id="p-0136" num="0107">It should be appreciated from the foregoing that operation of embodiments of a low-latency segmented QC-LDPC decoder implementing multi-segment codeword parallel edge bundle processing according to concepts of the present invention reduces decoding latency. In particular, decoding latency for small size signaling data which uses small codeword size may be reduced according to implementations of a low-latency segmented QC-LDPC decoder of embodiments. Such reduced latency is advantageous in supporting communications requiring low-latency and reliable communication services, such as V2X communications. Moreover, reduced latency provided by low-latency segmented QC-LDPC decoders of embodiments can help 5G base station or other communication device (e.g., UE) enter low power mode earlier after finishing decoding (e.g., during frame time slots in which no data communication is scheduled for the device). It should be appreciated that decoder logic can consume almost half of computation power of a cellular receiver, and thus the flexibility and efficiencies provided by low-latency segmented QC-LDPC decoders implemented in accordance with concepts herein can help reduce the latency by parallelly processing of multiple edges.</p><p id="p-0137" num="0108">Although the present disclosure and its advantages have been described in detail, it should be understood that various changes, substitutions and alterations can be made herein without departing from the spirit and scope of the design as defined by the appended claims. Moreover, the scope of the present application is not intended to be limited to the particular embodiments of the process, machine, manufacture, composition of matter, means, methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the present disclosure, processes, machines, manufacture, compositions of matter, means, methods, or steps, presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present disclosure. Accordingly, the appended claims are intended to include within their scope such processes, machines, manufacture, compositions of matter, means, methods, or steps.</p><p id="p-0138" num="0109">Moreover, the scope of the present application is not intended to be limited to the particular embodiments of the process, machine, manufacture, composition of matter, means, methods and steps described in the specification.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230006694A1-20230105-M00001.NB"><img id="EMI-M00001" he="5.67mm" wi="76.20mm" file="US20230006694A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230006694A1-20230105-M00002.NB"><img id="EMI-M00002" he="6.69mm" wi="76.20mm" file="US20230006694A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230006694A1-20230105-M00003.NB"><img id="EMI-M00003" he="7.79mm" wi="76.20mm" file="US20230006694A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230006694A1-20230105-M00004.NB"><img id="EMI-M00004" he="8.13mm" wi="76.20mm" file="US20230006694A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230006694A1-20230105-M00005.NB"><img id="EMI-M00005" he="6.01mm" wi="76.20mm" file="US20230006694A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006" nb-file="US20230006694A1-20230105-M00006.NB"><img id="EMI-M00006" he="6.01mm" wi="76.20mm" file="US20230006694A1-20230105-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00007" nb-file="US20230006694A1-20230105-M00007.NB"><img id="EMI-M00007" he="5.67mm" wi="76.20mm" file="US20230006694A1-20230105-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00008" nb-file="US20230006694A1-20230105-M00008.NB"><img id="EMI-M00008" he="5.67mm" wi="76.20mm" file="US20230006694A1-20230105-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system comprising:<claim-text>a low-latency segmented quasi-cyclic low-density parity-check (QC-LDPC) decoder configured to implement multi-segment codeword parallel edge bundle processing to process multiple bundles of edges for a first codeword simultaneously, wherein the multiple bundles of edges for the first codeword comprise a first edge bundle connecting a first check node cluster (CNC) of a plurality of check nodes (CNs) for the first codeword and a first variable node cluster (VNC) of a plurality of variable nodes (VNs) for the first codeword and a second edge bundle connecting the first CNC and a second VNC of a plurality of VNs for the first codeword.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the low-latency segmented QC-LDPC decoder comprises:<claim-text>a reconfigurable segmented shifter having a largest accommodated code block size of Zmax, wherein the multiple bundles of edges for the first codeword processed simultaneously comprise M bundles of edges, and wherein a total number of edges of the M bundles of edges for the first codeword processed simultaneously is less than or equal to Zmax.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein a number of CNs of each CNC for the first codeword and a number of VNs of each VNC for the first codeword is Z<sub>1 </sub>resulting in the bundles of edges connecting the CNCs for the first codeword with the VNCs for the first codeword each comprising Z<sub>1 </sub>edges, and wherein Z<sub>max</sub>&#x2265;M*Z<sub>1</sub>.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the low-latency segmented QC-LDPC decoder processes a plurality of VN to CN message bundles in parallel and a plurality of CN to VN message bundles in parallel, wherein the plurality of VN to CN message bundles comprise a message bundle passed from the first VNC to the first CNC via a first bundle of edges of the multiple bundles of edges and a message bundle passed from the second VNC to the first CNC via a second bundle of edges of the multiple bundles of edges, and wherein the plurality of CN to VN message bundles comprise a message bundle passed from the first CNC to the first VNC via the first bundle of edges and a message bundle passed from the first CNC to the second VNC via the second bundle of edges.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the multiple bundles of edges for the first codeword comprise a third edge bundle connecting a second CNC of a plurality of CNs for the first codeword.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the low-latency segmented QC-LDPC decoder processes a plurality of VN to CN message bundles and one or more CN to VN message bundles in parallel and a plurality of CN to VN message bundles and one or more VN to CN message bundles in parallel, wherein the plurality of VN to CN message bundles comprise a message bundle passed from the first VNC to the first CNC via a first bundle of edges of the multiple bundles of edges and a message bundle passed from the second VNC to the first CNC via a second bundle of edges of the multiple bundles of edges, wherein the one or more CN to VN message bundles comprise a message bundle passed from the second CNC to the first VNC via a third bundle of edges of the multiple bundles of edges, wherein the plurality of CN to VN message bundles comprise a message bundle passed from the first CNC to the first VNC via the first bundle of edges and a message bundle passed from the first CNC to the second VNC via the second bundle of edges, and wherein the one or more VN to CN message bundles comprise a message bundle passed from the first VNC to the second CNC via the third bundle of edges of the multiple bundles of edges.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the low-latency segmented QC-LDPC decoder is configured to implement the multi-segment codeword parallel edge bundle processing to process multiple bundles of edges for the first codeword and one or more bundles of edges for a second codeword simultaneously.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the one or more bundles of edges for the second codeword comprise a first edge bundle connecting a CNC of a plurality of CNs for the second codeword and a VNC of a plurality of VNs for the second codeword.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the low-latency segmented QC-LDPC decoder comprises:<claim-text>a reconfigurable segmented shifter having a largest accommodated code block size of Zmax, wherein the multiple bundles of edges for the first codeword processed simultaneously comprise Ai bundles of edges, wherein the one or more bundles of edges for the second codeword processed simultaneously comprise N bundles of edges, and wherein a total number of edges of the Ai bundles of edges for the first codeword and of the N bundles of edges for the second codeword processed simultaneously is less than or equal to Zmax.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein a number of CNs of each CNC for the first codeword and a number of VNs of each VNC for the first codeword is Z<sub>1 </sub>resulting in the bundles of edges connecting the CNCs for the first codeword with the VNCs for the first codeword each comprising Z<sub>1 </sub>edges, wherein a number of CNs of each CNC for the second codeword and a number of VNs of each VNC for the second codeword is Z<sub>2 </sub>resulting in the bundles of edges connecting the CNCs for the second codeword with the VNCs for the second codeword each comprising Z<sub>2 </sub>edges, and wherein Zmax&#x2265;(M*Z<sub>1</sub>)+(N*Z<sub>2</sub>).</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the low-latency segmented QC-LDPC decoder comprises:<claim-text>a sectioned reconfigurable segmented shifter having a plurality of sections, wherein each data path of a section of the plurality of sections shares a same control signal, and wherein each bundle of edges of the multiple bundles of edges for the first codeword processed simultaneously are processed by one or more different sections of the plurality of sections than are each other bundle of edges of the multiple bundles of edges.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A method comprising:<claim-text>inputting, to a low-latency segmented quasi-cyclic low-density parity-check (QC-LDPC) decoder configured to implement multi-segment codeword parallel edge bundle processing, a first code block for decoding as a first codeword;</claim-text><claim-text>processing, by the low-latency segmented QC-LDPC decoder, multiple bundles of edges for the first codeword simultaneously, wherein the multiple bundles of edges for the first codeword comprise a first edge bundle connecting a first check node cluster (CNC) of a plurality of check nodes (CNs) for the first codeword and a first variable node cluster (VNC) of a plurality of variable nodes VNs) for the first codeword and a second edge bundle connecting the first CNC and a second VNC of a plurality of VNs for the first codeword; and</claim-text><claim-text>outputting, by the low-latency segmented QC-LDPC decoder, a decoded instance of the first codeword.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the processing multiple bundles of edges for the first codeword simultaneously comprises:<claim-text>processing a plurality of VN to CN message bundles in parallel, wherein the plurality of VN to CN message bundles comprise a message bundle passed from the first VNC to the first CNC via a first bundle of edges of the multiple bundles of edges and a message bundle passed from the second VNC to the first CNC via a second bundle of edges of the multiple bundles of edges; and</claim-text><claim-text>processing a plurality of CN to VN message bundles in parallel, wherein the plurality of CN to VN message bundles comprise a message bundle passed from the first CNC to the first VNC via the first bundle of edges and a message bundle passed from the first CNC to the second VNC via the second bundle of edges.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the multiple bundles of edges for the first codeword comprise a third edge bundle connecting a second CNC of a plurality of CNs for the first codeword.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the processing multiple bundles of edges for the first codeword simultaneously comprises:<claim-text>processing a plurality of VN to CN message bundles and one or more CN to VN message bundles in parallel, wherein the plurality of VN to CN message bundles comprise a message bundle passed from the first VNC to the first CNC via a first bundle of edges of the multiple bundles of edges and a message bundle passed from the second VNC to the first CNC via a second bundle of edges of the multiple bundles of edges, wherein the one or more CN to VN message bundles comprise a message bundle passed from the second CNC to the first VNC via a third bundle of edges of the multiple bundles of edges; and</claim-text><claim-text>processing a plurality of CN to VN message bundles and one or more VN to CN message bundles in parallel, wherein the plurality of CN to VN message bundles comprise a message bundle passed from the first CNC to the first VNC via the first bundle of edges and a message bundle passed from the first CNC to the second VNC via the second bundle of edges, and wherein the one or more VN to CN message bundles comprise a message bundle passed from the first VNC to the second CNC via the third bundle of edges of the multiple bundles of edges.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the processing multiple bundles of edges for the first codeword simultaneously comprises:<claim-text>processing one or more bundles of edges for a second codeword simultaneously with processing of the multiple bundles of edges for the first codeword.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the one or more bundles of edges for the second codeword comprise a first edge bundle connecting a CNC of a plurality of CNs for the second codeword and a VNC of a plurality of VNs for the second codeword.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the processing multiple bundles of edges for the first codeword simultaneously comprises:<claim-text>utilizing a reconfigurable segmented shifter to separately provide shifting with respect to each message bundle of the multiple bundles of edges for the first codeword simultaneously.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the reconfigurable segmented shifter comprises a sectioned reconfigurable segmented shifter having a plurality of sections, wherein each data path of a section of the plurality of sections shares a same control signal, and wherein each bundle of edges of the multiple bundles of edges for the first codeword processed simultaneously are processed by one or more different sections of the plurality of sections than are each other bundle of edges of the multiple bundles of edges.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A low-latency segmented quasi-cyclic low-density parity-check (QC-LDPC) decoder configured to implement multi-segment codeword parallel edge bundle processing:<claim-text>a reconfigurable segmented shifter configurable to separately provide shifting with respect to each message bundle of multiple bundles of edges for a first codeword simultaneously, wherein the multiple bundles of edges for the first codeword comprise a first edge bundle connecting a first check node duster (CNC) of a plurality of check nodes (CNs) for the first codeword and a first variable node cluster (VNC) of a plurality of variable nodes (VNs) for the first codeword and a second edge bundle connecting the first CNC and a second VNC of a plurality of VNs for the first codeword; and</claim-text><claim-text>a controller providing control signals to the reconfigurable segmented shifter controlling the shifting with respect to each message bundle of the multiple bundles of edges to process multiple bundles of edges for the first codeword simultaneously for decoding the first codeword.</claim-text></claim-text></claim></claims></us-patent-application>