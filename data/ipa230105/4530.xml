<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004531A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004531</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940313</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>178</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>07</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>182</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1095</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1097</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>11</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>178</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0607</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0712</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1484</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0667</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0665</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>1827</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1095</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1097</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1658</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>2089</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>128</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>256</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYNCHRONIZING CONFIGURATION OF PARTNER OBJECTS ACROSS DISTRIBUTED STORAGE SYSTEMS USING TRANSFORMATIONS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16806083</doc-number><date>20200302</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11442903</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17940313</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15820743</doc-number><date>20171122</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10621146</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16806083</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>14496611</doc-number><date>20140925</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>9836476</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>15820743</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>NetApp Inc.</orgname><address><city>NetApp Inc.</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Vijayan</last-name><first-name>Anoop Chakkalakkal</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A configuration for a component of a primary node is synchronized with a configuration for a component of a partner node in a different cluster by replicating the primary node configuration with the partner node. A baseline configuration replication comprises a snapshot of a component configuration on the primary. The baseline configuration can be generated by traversing through the configuration objects, capturing their attributes and encapsulating them in a package. The baseline package can then be transferred to the partner node. The configuration objects can be applied on the partner node in the order in which they were captured on the primary node. Attributes of the configuration objects are identified that are to be transformed. Values for the identified attributes are transformed from a name space in the primary node to a name space in the partner node.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="112.52mm" wi="158.75mm" file="US20230004531A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="221.91mm" wi="162.90mm" orientation="landscape" file="US20230004531A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="244.26mm" wi="158.24mm" file="US20230004531A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="239.78mm" wi="139.11mm" orientation="landscape" file="US20230004531A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="237.57mm" wi="88.31mm" file="US20230004531A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="223.10mm" wi="128.86mm" orientation="landscape" file="US20230004531A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="242.06mm" wi="159.17mm" file="US20230004531A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="238.08mm" wi="147.24mm" file="US20230004531A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="205.06mm" wi="145.37mm" file="US20230004531A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims priority to and is a continuation of U.S. application Ser. No. 16/806,083, filed on Mar. 2, 2020, now allowed, titled &#x201c;SYNCHRONIZING CONFIGURATION OF PARTNER OBJECTS ACROSS DISTRIBUTED STORAGE SYSTEMS USING TRANSFORMATIONS,&#x201d; which claims priority to and is a continuation of U.S. Pat. No. 10,621,146, filed on Nov. 22, 2017, titled &#x201c;SYNCHRONIZING CONFIGURATION OF PARTNER OBJECTS ACROSS DISTRIBUTED STORAGE SYSTEMS USING TRANSFORMATIONS,&#x201d; which claims priority to and is a continuation of U.S. Pat. No. 9,836,476, filed on Sep. 25, 2014 and titled &#x201c;SYNCHRONIZING CONFIGURATION OF PARTNER OBJECTS ACROSS DISTRIBUTED STORAGE SYSTEMS USING TRANSFORMATIONS,&#x201d; which are incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Aspects of the disclosure generally relate to the field of distributed storage systems, and, more particularly, to synchronizing configurations of partner objects across the distributed storage system.</p><p id="p-0004" num="0003">A networked storage system is a processing system that is used to store and retrieve data on behalf of one or more hosts on a network. One or more storage controllers in the networked storage system operate on behalf of one or more hosts to store and manage data in a set of mass storage devices, such as magnetic or optical storage-based disks or tapes. Some storage controllers are designed to service file-level requests from hosts, as is commonly the case with file servers used in network attached storage (NAS) environments. Other storage controllers are designed to service extent-level requests from hosts, as with storage controllers used in a storage area network (SAN) environment. Still other storage controllers are capable of servicing both file-level requests and extent-level requests.</p><p id="p-0005" num="0004">A networked storage system can be configured to provide high availability (HA) and disaster recovery (DR) capabilities. In such configurations, two or more storage controllers, typically located at different sites, are used to replicate stored data as well as state information such as NVRAM staged I/O requests. Data received from a host by a first controller can be written to storage devices local to the first storage controller. In addition, the first storage controller can replicate the data on a second storage controller by forwarding the data to a second storage controller. The second storage controller then stores a copy of the data on storage devices local to the second controller. In the event of a failure or other problem with the first controller or the storage attached thereto, the replicated data can be retrieved from storage local to the second controller.</p><p id="p-0006" num="0005">Additional HA and DR capabilities can be implemented with respect to clustered storage controller configurations in the networked storage system. In order to provide such HA and DR capability, configuration data is typically replicated across the cluster. Various issues can cause the configuration data to become out of synch. For example, there may be a power outage, error condition, maintenance outage or other reason that can cause a storage controller to not receive replicated configuration data. The configuration data for the storage controller then becomes stale and out of synch with other controllers in the cluster.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006">The aspects of the disclosure may be better understood by referencing the accompanying drawings.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a distributed storage system having distributed configuration replication, according to some features.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a block diagram of a node in a distributed storage system, according to some features.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a block diagram of an example storage virtual machine, according to some features.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart illustrating operations for replicating a configuration across nodes in different cluster according to some features.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example schema illustrating a tagging feature according to some aspects.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart illustrating operations for creating configuration objects according to some features.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart illustrating operations for deleting configuration objects according to some features.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>8</b></figref> depicts an example computer system with a configuration synchronizer.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">The description that follows includes example systems, methods, techniques, instruction sequences and computer program products that embody techniques of the present inventive subject matter. However, it is understood that the described aspects of the disclosure may be practiced without these specific details. For instance, although examples refer to synchronizing configuration objects for a storage virtual machine (SVM) configuration on a first node to an SVM configuration on a partner node, configuration objects for other components can be synchronized from the first node to the partner node. In other instances, well-known instruction instances, protocols, structures and techniques have not been shown in detail in order not to obfuscate the description.</p><p id="p-0017" num="0016">In some aspects, a configuration for a component of a primary node is synchronized with a configuration for a component of a partner node in a different cluster by replicating the primary node configuration with the partner node. Configuration replication can be done in two phases. The first phase is baseline configuration replication which involves taking a snapshot of a component configuration on the primary node (e.g., an SVM configuration) and creating the same configuration for the component on the partner node. The baseline configuration can be generated by traversing through the configuration objects, capturing their attributes and encapsulating them in a package. The baseline package can then be transferred to the partner node. In some aspects, the configuration objects can be applied on the partner node in the order in which they were captured on the primary node. Attributes of the configuration objects are identified that are to be transformed. Values for the identified attributes are transformed from a name space in the primary node to a name space in the partner node.</p><p id="p-0018" num="0017">The above-described replication of a component configuration from a primary node to a partner node typically cannot be a direct copy of the component configuration. For example, assume that a configuration for an SVM on a primary node is to be replicated on a partner node. The SVM on the primary node and the SVM on the partner node will each have an identifier uniquely identifying the SVM within the cluster. Thus the primary node SVM identifier will differ from the partner node SVM identifier. Configuration objects with the replicated configuration will typically include a field for the identifier. This field may be an integer field, a text string field or a UUID (Universally Unique Identifier) field. Thus in order to ensure that the replicated configuration will be valid on the partner node, fields in configuration objects that are used to identify the SVM are transformed from the primary node name space to the partner node name space.</p><p id="p-0019" num="0018">Once the baseline configuration is applied successfully, the second phase of replication can start where the component configuration on the partner node is synchronized by replicating incremental changes that occur to the component configuration on the primary node. The replication of updates can include name space transformations as described above with respect to the baseline configuration update. The updates can be replicated in the order in which they occur at the primary node. A series of updates from a primary node to a partner node can be referred to as a replication stream. Replicating updates in the order they occur on the primary node is desirable because there may be dependencies between objects being update in a configuration. For example, a volume may be created and a snapshot policy may be associated with the new volume. Each operation can result in generation of a configuration update. The snapshot policy update associating the policy with the volume cannot be implemented before applying the volume creation update that because the volume will not exist when the policy association is attempted.</p><p id="p-0020" num="0019">If there is a discontinuity in the replication stream involving a loss of updates, further updates typically cannot be applied due to the dependency issue described above. The discontinuity may occur for several reasons. It can be unintentional in the case of infrastructure failures, for example a network disconnection, a failure to capture a configuration change on the primary cluster, or a corruption or data loss related to underlying internal storage. Alternatively, the discontinuity can be intentional in the case where the relationship between the primary node and the partner node is intentionally broken off and then re-established. Recovery in such cases can be achieved by reconciling the component configuration on the partner node with the component configuration of the primary node.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a distributed storage system having distributed configuration replication, according to some features. <figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a system <b>100</b> that includes multiple clusters (a cluster <b>160</b> and a cluster <b>161</b>). Each cluster can include a number of nodes interconnected that can be configured to provide storage service for data containers or objects (e.g., files) across one or more data volumes. In this example, the cluster <b>160</b> includes a node <b>102</b> and a node <b>104</b> interconnected through a cluster switching fabric <b>150</b>. The cluster <b>161</b> includes a node <b>106</b> and a node <b>108</b> interconnected through a cluster switching fabric <b>151</b>. As an example, the cluster switching fabric <b>150</b> and the cluster switching fabric <b>151</b> can be Gigabit Ethernet switches. The nodes <b>102</b>-<b>108</b> include various functional components that cooperate to provide a distributed storage system architecture of the respective clusters. An example of the nodes <b>102</b>-<b>108</b> is depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, which is described in more detail below.</p><p id="p-0022" num="0021">The nodes <b>102</b>-<b>104</b> can be communicatively coupled to clients <b>180</b> (e.g., over a network). Similarly, the nodes <b>106</b>-<b>108</b> can be communicatively coupled to client <b>181</b> (e.g., over a network). The node <b>102</b> is communicatively coupled to store and retrieve data into and from a data store device <b>130</b>. The node <b>104</b> is communicatively coupled to store and retrieve data into and from a data store device <b>131</b>. The node <b>106</b> is communicatively coupled to store and retrieve data into and from a data store device <b>132</b>. The node <b>108</b> is communicatively coupled to store and retrieve data into and from a data store device <b>133</b>.</p><p id="p-0023" num="0022">The clients <b>180</b> and the clients <b>181</b> may be general-purpose computers configured to interact with the nodes <b>102</b>-<b>104</b> and the nodes <b>106</b>-<b>108</b>, respectively, in accordance with a client/server model of information delivery. That is, each of the clients <b>180</b> may request the services of the nodes <b>102</b>-<b>104</b>, and each of the clients <b>181</b> may request the services of the nodes <b>106</b>-<b>108</b>. The nodes <b>102</b>-<b>108</b> may return the results of the services requested by the clients <b>180</b>-<b>181</b>, by exchanging packets over a network. The clients <b>180</b>-<b>181</b> may issue packets including file-based access protocols, such as the Common Internet File System (CIFS) protocol or Network File System (NFS) protocol, over the Transmission Control Protocol/Internet Protocol (TCP/IP) when accessing information in the form of files and directories. Alternatively, the clients <b>180</b>-<b>181</b> may issue packets including block-based access protocols, such as the Small Computer Systems Interface (SCSI) protocol encapsulated over TCP (iSCSI) and SCSI encapsulated over Fibre Channel (FCP), when accessing information in the form of blocks.</p><p id="p-0024" num="0023">According to some features, data store devices <b>130</b>-<b>133</b> include volumes, which are components of storage of information in disk drives, disk arrays, and/or other data stores (e.g., flash memory) as a file-system for data, for example. In this example, the data store device <b>130</b> includes volume(s) <b>170</b>. The data store device <b>131</b> includes volume(s) <b>171</b>. The data store device <b>132</b> includes volume(s) <b>172</b>. The data store device <b>133</b> includes volume(s) <b>173</b>. According to some features, volumes can span a portion of a data store, a collection of data stores, or portions of data stores, for example, and typically define an overall logical arrangement of file storage on data store space in the distributed file system. According to some features, a volume can comprise stored data containers (e.g., files) that reside in a hierarchical directory structure within the volume. Volumes are typically configured in formats that may be associated with particular file systems, and respective volume formats typically comprise features that provide functionality to the volumes, such as providing an ability for volumes to form clusters. For example, a first file system may utilize a first format for its volumes, and a second file system may utilize a second format for its volumes.</p><p id="p-0025" num="0024">The volumes can include a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number (VBN) space on the volume(s). Each logical volume is generally, although not necessarily, associated with its own file system. The disks within a logical volume/file system are typically organized as one or more groups, wherein each group may be operated as a Redundant Array of Independent (or Inexpensive) Disks (RAID). Most RAID configurations, such as a RAID-4 level configuration, enhance the reliability/integrity of data storage through the redundant writing of data &#x201c;stripes&#x201d; across a given number of physical disks in the RAID group, and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID configuration is a RAID-4 level configuration, although it should be understood that other types and levels of RAID configurations may be used in accordance with some features.</p><p id="p-0026" num="0025">The system <b>100</b> also includes a network <b>190</b> over which nodes in different clusters can communicate. According to some features, a node in one cluster can be defined as a backup to a node in a different cluster, referred to as a primary node. A backup node may also be referred to as a partner node with respect to the primary node. For example, the node <b>104</b> in the cluster <b>160</b> can be a primary storage device, and the node <b>106</b> in the cluster <b>161</b> can be a partner node that provides a backup storage device for the node <b>102</b>. Therefore, data stored in the data store device <b>131</b> can be duplicated in the data store device <b>132</b>. Accordingly, if the node <b>104</b> were to fail or become otherwise nonoperational (e.g., for maintenance), the node <b>106</b> can become active to process data requests for data stored in the data store device <b>132</b>. According to some features, the configuration of a component on node <b>104</b> can be replicated on a partner node such as node <b>106</b>. Some aspects can redundantly create and store initial baseline configurations of one or more components on the partner node <b>106</b>. The initial baseline for the partner node can be derived from the configuration of one or more components of the primary node <b>104</b>. Also during operations, any incremental changes to the configuration of components on the primary node can be transmitted to the partner node. The partner node can then update its configuration for the replicated components based on these incremental changes.</p><p id="p-0027" num="0026">According to some aspects, the configuration of the one or more components on the primary node is not directly copied to be the configuration for the backup node. In particular, the primary node and the partner node can be in two different clusters and/or two different networks. Thus, a direct copy of configuration to the partner node can create a conflict with already existing configuration with other storage nodes in the cluster that includes the partner node. Therefore according to some aspects, replication of the configuration to the partner node includes a filtering to replace and/or delete data in the configuration that is specific to the cluster and/or the network to which the primary node belongs.</p><p id="p-0028" num="0027">As noted above, the components of nodes in system <b>100</b> can include SVMs. An SVM can contain one or more data volumes and one or more network interfaces for serving data to clients. The attributes of a storage cluster can be virtualized and divided among multiple SVMs. An SVM can securely isolate the shared virtualized data storage and network and can appear as a single dedicated server to its clients. Each SVM can have a separate administrator authentication domain and can be managed independently by an SVM administrator. Also, multiple SVMs can coexist in a single cluster without being bound to any node in a cluster. However, the SVMs can be bound to the physical cluster on which they exist.</p><p id="p-0029" num="0028">In the example illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, node <b>104</b> includes SVM <b>185</b>A. SVM component <b>185</b>A on node <b>104</b> is replicated as SVM component <b>1858</b> on node <b>106</b>. Similarly, the configuration <b>195</b>A for SVM <b>185</b>A is replicated as configuration <b>1958</b> on node <b>106</b>. An SVM will be generically referred to as SVM <b>185</b>. SVM <b>185</b>A and SVM <b>1858</b> may be in a partner relationship such that SVM <b>185</b>A is a primary SVM and SVM <b>1858</b> is a partner SVM that can be used in the case of a failover situation. For example, if node <b>104</b> experiences a failure causing SVM <b>185</b>A to become inoperable, the functions performed by SVM <b>185</b>A can be transferred to SVM <b>1858</b>.</p><p id="p-0030" num="0029">A component configuration (e.g., configurations <b>195</b>A and <b>1958</b>) will be generically referred to as a configuration <b>195</b>. A configuration for a component on a primary node may be referred to as a primary configuration or a baseline configuration. A configuration for the component that is replicated on a partner node may be referred to as a partner configuration. Thus in the example illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, configuration <b>195</b>A can be a baseline configuration and configuration <b>1958</b> can be a partner configuration. A configuration <b>195</b> for the component may comprise configuration objects. The configuration objects may be data structures that have fields or attributes that can be assigned values. A configuration object that is to be replicated from a primary node (e.g., node <b>102</b>) to a partner node (e.g., node <b>104</b>) can be referred to as a primary configuration object or a baseline configuration object. A configuration object that is replicated on the partner node from the primary configuration object will be referred to as a partner configuration object.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a block diagram of a node in a distributed storage system, according to some features. In particular, <figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a node <b>200</b> which can be representative of any of the nodes <b>102</b>-<b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The node <b>200</b> includes a network adapter <b>208</b>, a cluster access adapter <b>214</b>, a storage adapter <b>212</b>, a network module <b>206</b>, a data module <b>210</b>, and a management module <b>202</b>.</p><p id="p-0032" num="0031">The network module <b>206</b>, the data module <b>210</b>, and the management module <b>202</b> can be hardware, software, firmware, or a combination thereof. For example, the network module <b>206</b>, the data module <b>210</b>, and the management module <b>202</b> can be software executing on a processor of node <b>200</b>. Alternatively, the network module <b>206</b>, the data module <b>210</b>, and the management module <b>202</b> can each be independent hardware units within node <b>200</b>, with each having their own respective processor or processors. The network module <b>206</b> includes functionality that enables the node <b>200</b> to connect to clients over a network. The data module <b>210</b> includes functionality to connect to one or more storage devices (e.g., data store devices <b>130</b>-<b>133</b>). It should be noted that while there is shown an equal number of network modules and data modules in the illustrative cluster, there may be differing numbers of network modules and/or data modules in accordance with some features. The management module <b>202</b> can include functionality for managing the node <b>200</b>. For example, the management module <b>202</b> can include functionality to update configuration of the node <b>200</b> and its associated data store device. Operations for updating the configuration of a component such as SVM <b>185</b> on the node <b>200</b> and its associated data store device are depicted in <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>7</b></figref> which are described in more detail below.</p><p id="p-0033" num="0032">Each node <b>200</b> can be embodied as a single or dual processor storage system executing a storage operating system that implements a high-level module, such as a file system, to logically organize the information as a hierarchical structure of named directories, files and special types of files called virtual disks (or generally &#x201c;objects&#x201d; or &#x201c;data containers&#x201d;) on the disks. One or more processors can execute the functions of the network module <b>206</b>, while another processor(s) can execute the functions of the data module <b>210</b>.</p><p id="p-0034" num="0033">The network adapter <b>208</b> includes a number of ports adapted to couple the node <b>200</b> to one or more clients <b>180</b> over point-to-point links, wide area networks, virtual private networks implemented over a public network (Internet) or a shared local area network. The network adapter <b>208</b> thus may include the mechanical, electrical and signaling circuitry needed to connect the node <b>200</b> to the network. Illustratively, the network may be embodied as an Ethernet network or a Fibre Channel (FC) network. Each client <b>180</b> may communicate with the node <b>200</b> by exchanging discrete frames or packets of data according to pre-defined protocols, such as TCP/IP.</p><p id="p-0035" num="0034">The storage adapter <b>212</b> can cooperate with a storage operating system executing on the node <b>200</b> to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as optical, magnetic tape, magnetic disks, solid state drives, bubble memory, electronic random access memory, micro-electro mechanical and any other similar media adapted to store information, including data and parity information. The storage adapter <b>212</b> can include a number of ports having input/output (I/O) interface circuitry that couples to the disks over an I/O interconnect arrangement, such as a conventional high-performance, FC link topology.</p><p id="p-0036" num="0035">Management module <b>202</b> can include functionality for an SVM <b>185</b> and can include a replicated database (RDB) <b>204</b> and a configuration synchronizer <b>220</b>. RDB <b>204</b> can be a database that stores configuration objects and relationships between configuration objects in a configuration <b>195</b>. For example, RDB <b>204</b> can store configuration objects related to the configuration of SVM <b>185</b>. Additionally, RDB <b>204</b> can store volume configurations, aggregate configurations, storage configurations, policies, etc.</p><p id="p-0037" num="0036">In addition, RDB <b>204</b> can store schemas related to the configuration objects. The schemas can define attribute labels (also referred to as attribute names or field names), attribute types, attribute metadata, and tags for configuration objects. An example of a schema according to aspects of the disclosure is described in further detail below with respect to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0038" num="0037">Configuration synchronizer <b>220</b> synchronizes performs configuration synchronization for a node <b>200</b>. For example, on a primary node (e.g., node <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), configuration synchronizer <b>220</b> can generate a baseline configuration for a component (e.g., an SVM <b>185</b>A of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) on the primary node and transmit the baseline configuration to a partner node. Configuration synchronizer <b>220</b> can transmit subsequent updates to the component configuration on the primary node to the partner node as part of a replication stream between the primary node and the partner node.</p><p id="p-0039" num="0038">On a partner node (e.g., node <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), configuration synchronizer <b>220</b> can receive the baseline configuration for the component on the primary node and synchronize the configuration for the partner component on the partner node (e.g., node <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Configuration synchronizer <b>220</b> on a partner node can apply subsequent updates received from the primary node. In addition, in the event of a disruption to the replication stream, configuration synchronizer <b>220</b> can perform operations described in further detail below to bring a component configuration on the partner node back into synchronization with a component configuration on a primary node.</p><p id="p-0040" num="0039">While <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows the configuration synchronizer <b>220</b> as residing in the management module <b>202</b>, in alternative aspects, the configuration synchronizer may located in other modules. For example, the configuration synchronizer can be located in an administrative unit for a cluster.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a block diagram of an example SVM, according to some features. A SVM <b>302</b> can include a number of storage volumes <b>316</b> (e.g., a storage volume <b>318</b>, a storage volume <b>320</b>, a storage volume <b>322</b>, a storage volume <b>324</b>, and a storage volume <b>326</b>) storing client data and associated metadata. The SVM <b>302</b> can include a management interface <b>312</b> and a data interface <b>314</b>. The SVM <b>302</b> can serve data to clients <b>306</b>-<b>310</b> through the data interface <b>314</b>. The data interface <b>314</b> can represent one or more types of interfaces to allow the clients <b>306</b>-<b>310</b> to write to and read data from the SVM <b>302</b>. For example, the data interface <b>314</b> can be configured to process interface requests according to the CIFS protocol or NFS protocol, over the Transmission Control Protocol/Internet Protocol (TCP/IP) when accessing information in the form of files and directories, internet Small Computer System Interface (iSCSI), etc.</p><p id="p-0042" num="0041">The SVM <b>302</b> provides a virtualized data storage that can be shared by multiple clients (the clients <b>306</b>-<b>310</b>). Thus, the SVM <b>302</b> securely isolates the shared virtualized data storage and network and appears as a single dedicated server to its clients. The SVM <b>302</b> can include a separate administrator authentication domain and can be managed independently by an SVM administrator. In this example, an administrator unit <b>304</b> can manage the SVM <b>302</b> through the management interface <b>312</b>. Multiple SVMs can coexist in a single cluster without being bound to any node in the cluster. However, the SVMs can be bound to the physical cluster on which they exist.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart <b>400</b> illustrating example operations of a method for replicating a configuration across nodes in different clusters according to some features. The example operations illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be implemented on a node (e.g. nodes <b>102</b>-<b>108</b>, <figref idref="DRAWINGS">FIG. <b>1</b></figref>). According to some features, the example operations may be implemented by a configuration synchronizer <b>220</b> on a management module <b>202</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0044" num="0043">At block <b>402</b>, a primary node generates a baseline primary configuration. According to some features, the baseline primary configuration may include configurations objects for a SVM. The configuration objects can include data describing volumes, interfaces, policies etc. accessed by the SVM. Some aspects traverse the configuration in an ordered manner such that configuration objects that are dependent on other configuration objects are added to the baseline primary configuration following addition of the object they depend on. Further, some aspects lock the configuration objects during the traversal in order to prevent changes. Such locking is advantageous because it provides data consistency in the baseline primary configuration.</p><p id="p-0045" num="0044">At block <b>404</b>, a copy of the baseline primary configuration is transferred by the primary node to a partner node of the primary node. The transfer may take place via any communication mechanism coupling the primary node to the partner node. In some aspects the primary node transmits the baseline primary configurations using cluster switching fabric <b>150</b>. In alternative aspects, network <b>190</b> may be used.</p><p id="p-0046" num="0045">At block <b>406</b>, the partner node receives the baseline primary configuration and transforms identifiers in the baseline primary configuration from an identifier space of the primary node to an identifier space of the partner. As indicated above, a configuration object can include different types of identifiers. For example, an identifier may be a name comprising a string of text, an integer, or a UUID. In some instances, the identifiers for the primary and partner nodes can be different. For example, an identifier in an object that associates the object with a particular SVM will be different for different SVMs. In such cases, the identifier can be transformed by replacing the text string, integer or UUID that refers to a primary SVM with an identifier that refers to the partner SVM. As an example, consider an SVM on a primary node, where the SVM has the identifier &#x201c;SVM1.&#x201d; Further assume that an SVM on a partner node for the primary node has the identifier &#x201c;SVM2.&#x201d; One or more volumes may be associated with SVM on the primary node. Configuration objects for volumes can include an SVM identification field associating the volume with an SVM. The configuration objects for volumes associated with the SVM on the primary node will have a value of &#x201c;SVM1&#x201d; for the SVM identification field. During configuration replication, the identification field values for the configuration objects in the partner node can be transformed to have the value &#x201c;SVM2&#x201d; such that the replicated configuration object (and thus the volume associated with the configuration object) is associated with the correct SVM on the partner node.</p><p id="p-0047" num="0046">As can be appreciated, object attributes that contain identifiers may have different labels and different data types for different object types. Thus in some aspects, a fieldname for an attribute that contains an identifier that is to be transformed is provided with a tag in the configuration schema for the object. The tag may be used to identify the field or fields in the schema that are to be transformed from an identifier in a primary node identifier space to an identifier in a partner node identifier space.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example object schema <b>500</b> having a tag indicating a field to be transformed as described above. In the above example shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a vsID field <b>502</b> is indicated as the field to be transformed using tag <b>504</b>. A schema compiler (not shown) can convert the field name to its index and stores the index as a property of the qos-file-workload object. A configuration synchronizer on a management module of the partner cluster can retrieve the vsID attribute of the partner SVM and can transform the value of the vsID field in the qos-file-workload object before applying it to the partner configuration.</p><p id="p-0049" num="0048">The configuration synchronizer can then access the schema to determine which object attributes are to be transformed. In some aspects, the tag is interpreted and converted to an index that is included as an object property.</p><p id="p-0050" num="0049">During transformation operations, the configuration synchronizer can dynamically determine the data type of the identifier to be transformed and use the data type to perform the appropriate transformation. Thus different transformations can be applied depending on whether the identifier to be transformed is a text string, an integer, a UUID etc.</p><p id="p-0051" num="0050">Returning to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, at block <b>408</b>, the baseline primary configuration is traversed to identify objects that have been created or modified in the primary configuration since a previous replication. The identified objects are created or modified in the partner configuration. Further details on operations associated with the create/modify pass are provided below with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0052" num="0051">At block <b>410</b>, the baseline primary configuration is traversed to identify objects that have been deleted from the primary configuration since a previous replication. Such objects are deleted from the partner configuration. Further details on operations associated with the delete pass are provided below with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0053" num="0052">After blocks <b>402</b>-<b>410</b> have been completed, the partner configuration can be substantially synchronized with the primary configuration.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart <b>600</b> illustrating operations for creating configuration objects according to some features. The operations described in <figref idref="DRAWINGS">FIG. <b>6</b></figref> provide further details regarding the create/modify pass at block <b>408</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0055" num="0054">At block <b>602</b>, a configuration object is accessed from the primary baseline configuration.</p><p id="p-0056" num="0055">At block <b>604</b>, a check is made to determine if the accessed configuration object is currently in the partner configuration. In some aspects, the check may compare a specified set of key attributes of the primary configuration object and the partner configuration object to determine if there is a match.</p><p id="p-0057" num="0056">If the specified set of key values match, then the object exists in the partner configuration. At block <b>606</b>, any modified attribute values from the baseline primary configuration can be copied to the partner configuration. The method then proceeds to block <b>612</b> to determine if any further configuration objects remain in the baseline configuration.</p><p id="p-0058" num="0057">If the check at block <b>604</b> determines that the current baseline primary configuration object does not exist in the partner configuration, then at block <b>608</b>, a configuration object is created and at block <b>610</b>, the object attributes of the current baseline primary configuration object are copied to the newly created partner configuration object. In some aspects, before creating a configuration object for the partner configuration, the configuration synchronizer may determine if the primary configuration object should not be replicated in the partner component. For example, there can be default configuration objects associated with an SVM that is generated as part of SVM creation and thus does not need to be explicitly replicated. Additionally, there can be transient configuration objects such as a temporary volume created as part of volume move operation from one aggregate to another aggregate. Such temporary configuration objects may not be replicated in the partner component configuration. Further, certain types of configuration objects may not be replicated due to system limitations. For example, in some aspects, a configuration object may represent a data protection volume that is already in a data protection relationship at a primary SVM that precludes replication of the relationship to a partner SVM.</p><p id="p-0059" num="0058">At block <b>612</b>, a check is made to determine if there are more configuration objects in the baseline configuration. If so, the method then returns to block <b>602</b> to get the next baseline primary configuration object to consider. Otherwise the method terminates.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart <b>700</b> illustrating operations for deleting configuration objects according to some features. The operations described in <figref idref="DRAWINGS">FIG. <b>7</b></figref> provide further details regarding the delete pass at block <b>410</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In some aspects, the baseline primary configuration and the baseline partner configuration are traversed to compare objects in the two configurations. In some aspects, the traversal is performed in reverse order.</p><p id="p-0061" num="0060">For example, the configuration synchronizer <b>220</b> may traverse objects in the reverse order in which they were created. This can be desirable in order to satisfy dependencies between objects. For example, a volume with a specific snapshot policy cannot be created unless the policy itself is created prior to the volume creation. Thus, in the baseline configuration, a configuration object for the snapshot policy is created before the configuration object for the associated volume. However, a snapshot policy cannot be deleted if it is in use by a volume. Thus a volume that depends on a snapshot policy is deleted before snapshot policy deletion. Thus, in some aspects, the order of object traversal during the delete pass is reversed from the order in the create pass.</p><p id="p-0062" num="0061">At block <b>702</b>, one or more key values for a current primary baseline configuration object are compared to one or more key values for a current partner baseline configuration object. The key comparison can involve a string comparison for text based identifiers or an integer comparison for integer based identifiers. Key values that comprise UUIDs can be compared byte-by-byte.</p><p id="p-0063" num="0062">At block <b>704</b>, a check is made to determine if the key values match. If the key values match, then no action is performed with respect to the partner configuration object. The method proceeds to block <b>706</b> to obtain the next primary baseline configuration object and the next partner baseline configuration object before returning to block <b>702</b>.</p><p id="p-0064" num="0063">If the check at block <b>704</b> determines that the key values do not match, then at block <b>706</b> a check is made to determine if the key values of the partner baseline configuration object are less than the key values of the primary baseline configuration object.</p><p id="p-0065" num="0064">If the check at block <b>708</b> determines that the partner key values are less than the primary key values, then at block <b>710</b>, the method deletes the current object from the partner configuration. The object is deleted because the partner object does not exist in the baseline primary configuration. In order to synchronize the two configurations, the partner object is deleted.</p><p id="p-0066" num="0065">At block <b>712</b>, the method obtains the next partner configuration object and returns to block <b>702</b> to compare the next partner configuration object to the current partner configuration object.</p><p id="p-0067" num="0066">If the check at block <b>708</b> determines that the partner key values are not less than the primary key values (i.e., the partner key values are greater than the primary key values), then at block <b>714</b> the method gets the next primary baseline object and proceeds to block <b>702</b> to compare the next primary baseline object with the current partner object. The method proceeds with the next primary object because it can be assumed that the current primary object was dropped from being replicated.</p><p id="p-0068" num="0067">For example, as discussed above, an object may not be replicated if the object is part of a default configuration associated with an SVM. Such default configuration objects can be generated as part of SVM creation and thus need not be replicated. Alternatively, there can be transient configuration objects such as a temporary volume created as part of volume move operation from one aggregate to another aggregate. Further, as noted above, there can be certain types of configuration objects are may not be replicated due to system limitations. As will be appreciated by one skilled in the art, aspects of the disclosure may be included in a system, method or computer program product. Accordingly, aspects of the disclosure may take the form of entirely hardware, entirely software (including firmware, resident software, micro-code, etc.) or a combination of software and hardware that may all generally be referred to herein as a &#x201c;circuit,&#x201d; &#x201c;module&#x201d; or &#x201c;system.&#x201d; Furthermore, aspects of the disclosure may take the form of a computer program product included in one or more machine readable medium(s) having machine readable program code included thereon.</p><p id="p-0069" num="0068">Any combination of one or more machine readable medium(s) may be utilized. The machine readable medium may be a machine readable signal medium or a machine readable storage medium. A machine readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the machine readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a machine readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.</p><p id="p-0070" num="0069">A machine readable signal medium may include a propagated data signal with machine readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A machine readable signal medium may be any machine readable medium that is not a machine readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.</p><p id="p-0071" num="0070">Program code embodied on a machine readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.</p><p id="p-0072" num="0071">Computer program code for carrying out operations for aspects of the present inventive subject matter may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p><p id="p-0073" num="0072">Aspects of the present inventive subject matter are described with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to aspects of the disclosure. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0074" num="0073">These computer program instructions may also be stored in a machine readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the machine readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0075" num="0074">The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>8</b></figref> depicts an example computer system with a storage cluster based full sync and semi sync propagation engine. A computer system includes a processor unit <b>801</b> (possibly including multiple processors, multiple cores, multiple nodes, and/or implementing multi-threading, etc.). The computer system includes memory <b>807</b>. The memory <b>807</b> may be system memory (e.g., one or more of cache, SRAM, DRAM, zero capacitor RAM, Twin Transistor RAM, eDRAM, EDO RAM, DDR RAM, EEPROM, NRAM, RRAM, SONOS, PRAM, etc.) or any one or more of the above already described possible realizations of machine readable media. The computer system also includes a bus <b>803</b> (e.g., PCI, ISA, PCI-Express, HyperTransport&#xae; bus, InfiniBand&#xae; bus, NuBus, etc.), and a network interface <b>805</b> (e.g., an ATM interface, an Ethernet interface, a Frame Relay interface, SONET interface, wireless interface, iSCSI, Fibre Channel, etc.). The computer system also includes a configuration synchronizer <b>811</b>. The configuration synchronizer <b>811</b> synchronizes a component configuration that is replicated from a primary node to a partner node as described above. Any one of these functionalities may be partially (or entirely) implemented in hardware and/or on the processing unit <b>801</b>. For example, the functionality may be implemented with an application specific integrated circuit, in logic implemented in the processing unit <b>801</b>, in a co-processor on a peripheral device or card, etc. Further, realizations may include fewer or additional components not illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> (e.g., video cards, audio cards, additional network interfaces, peripheral devices, etc.). The processor unit <b>801</b>, the storage device(s) <b>809</b>, and the network interface <b>805</b> are coupled to the bus <b>803</b>. Although illustrated as being coupled to the bus <b>803</b>, the memory <b>807</b> may be coupled to the processor unit <b>801</b>.</p><p id="p-0077" num="0076">While the aspects of the disclosure are described with reference to various implementations and exploitations, it will be understood that these aspects are illustrative and that the scope of the inventive subject matter is not limited to them. In general, techniques for replicating configuration objects across nodes in different cluster having different identifier spaces as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations, modifications, additions, and improvements are possible.</p><p id="p-0078" num="0077">Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general, structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements may fall within the scope of the inventive subject matter.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>performing a baseline configuration replication during a first phase of a two phase replication, wherein a baseline package capturing attributes of configuration objects of a primary virtual machine at a primary node is created and replicated to a partner node;</claim-text><claim-text>performing a second phase of the two phase replication by:<claim-text>creating a replication stream to comprise a series of updates performed upon a component configuration by the primary node; and</claim-text><claim-text>replicating the replication stream to the partner node.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the replication stream captures the series of updates in an order with which the series of updates occurred at the primary node for preserving dependencies between a set of configuration objects in the component configuration.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>detecting a discontinuity in the replication stream based upon a loss of updates within the replication stream.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>refraining from applying subsequent updates based upon identifying a dependency issue resulting from a discontinuity in the replication stream.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>detecting a discontinuity in the replication stream based upon a network disconnection.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>detecting a discontinuity in the replication stream based upon a failure to capture configuration changes at the primary node.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>detecting a discontinuity in the replication stream based upon a break and subsequent re-establishment of a relationship between the primary node and the partner node.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>in response to detecting a discontinuity in the replication stream, reconciling a corresponding component configuration on the partner node with the component configuration of the primary node.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein performing the baseline configuration comprises:<claim-text>applying configuration objects captured by the baseline package to the partner node is an order in which the configuration were captured by the primary node.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein performing the baseline configuration comprises:<claim-text>identifying one or more attributes of the configuration objects that are to be transformed; and</claim-text><claim-text>transforming the one or more attributes from a name space of the primary node to a name space of the partner node.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>identifying a temporary configuration object at the primary node; and</claim-text><claim-text>excluding, by the two phase replication, the temporary configuration object from being replicated to the partner node for including within a corresponding component configuration on the partner node.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>excluding, by the two phase replication, a configuration object from being replicated to the partner node for including within a corresponding component configuration on the partner node based upon a system limitation.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>identifying a default configuration object at the primary node; and</claim-text><claim-text>excluding, by the two phase replication, the default configuration object from being replicated to the partner node for including within a corresponding component configuration on the partner node.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>excluding, by the two phase replication, a configuration object from being replicated to the partner node for including within a corresponding component configuration on the partner node based upon the configuration object representing a data protection volume having an existing data protection relationship.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computing device comprising:<claim-text>a memory comprising machine executable code; and</claim-text><claim-text>a processor coupled to the memory, the processor configured to execute the machine executable code to cause the processor to:<claim-text>perform a baseline configuration replication during a first phase of a two phase replication, wherein a baseline package capturing attributes of configuration objects of a primary virtual machine at a primary node is created and replicated to a partner node;</claim-text><claim-text>perform a second phase of the two phase replication by:<claim-text>creating a replication stream to comprise a series of updates performed upon a component configuration by the primary node; and</claim-text><claim-text>replicating the replication stream to the partner node.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computing device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the replication stream captures the series of updates in an order with which the series of updates occurred at the primary node for preserving dependencies between a set of configuration objects in the component configuration.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computing device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the machine executable code causes the processor to:<claim-text>detect a discontinuity in the replication stream based upon a loss of updates within the replication stream.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computing device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the machine executable code causes the processor to:<claim-text>refraining from applying subsequent updates based upon identifying a dependency issue resulting from a discontinuity in the replication stream.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computing device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the machine executable code causes the processor to:<claim-text>detecting a discontinuity in the replication stream based upon a network disconnection.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory machine readable medium comprising instructions for performing a method, which when executed by a machine, causes the machine to:<claim-text>perform a baseline configuration replication during a first phase of a two phase replication, wherein a baseline package capturing attributes of configuration objects of a primary virtual machine at a primary node is created and replicated to a partner node;</claim-text><claim-text>perform a second phase of the two phase replication by:<claim-text>creating a replication stream to comprise a series of updates performed upon a component configuration by the primary node; and</claim-text><claim-text>replicating the replication stream to the partner node.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>