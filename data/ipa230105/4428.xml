<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004429A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004429</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17929947</doc-number><date>20220906</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>48</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>52</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4881</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>52</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">TASK ALLOCATION METHOD, APPARATUS, ELECTRONIC DEVICE AND COMPUTER-READABLE STORAGE MEDIUM</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>PCT/CN2020/079373</doc-number><date>20200313</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17929947</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Stream Computing Inc.</orgname><address><city>Beijing</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Luo</last-name><first-name>Fei</first-name><address><city>Beijing</city><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Wang</last-name><first-name>Weiwei</first-name><address><city>Beijing</city><state>C</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Stream Computing Inc.</orgname><role>03</role><address><city>Beijing</city><country>CN</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Disclosed is a task allocation method, apparatus, electronic device, and computer-readable storage medium. The task allocation method includes: in response to receiving a synchronization signal, determining, by the microprocessor, whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of a task; in response to the allocation of the task segment to the processing core being required, instructing, by the microprocessor, to allocate the task segment to the processing core; receiving, by the processing core, the task segment; and in response to satisfying a first preset condition, sending, by the processing core, a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="92.71mm" wi="158.75mm" file="US20230004429A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="190.16mm" wi="123.95mm" file="US20230004429A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="153.75mm" wi="111.42mm" file="US20230004429A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="221.06mm" wi="138.43mm" orientation="landscape" file="US20230004429A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="195.75mm" wi="149.86mm" orientation="landscape" file="US20230004429A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="98.81mm" wi="112.78mm" file="US20230004429A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="229.28mm" wi="98.30mm" orientation="landscape" file="US20230004429A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="230.97mm" wi="113.88mm" orientation="landscape" file="US20230004429A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is a continuation application of International Patent Application No. PCT/CN2020/079373, filed on Mar. 13, 2020, the entire contents of which are incorporated herein by reference for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The disclosure relates to the field of processors, and in particular, to a task allocation method, apparatus, electronic device, and computer-readable storage medium.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">With the development of science and technology, human society is rapidly entering an era of intelligence. The important feature of the era of intelligence is that people may acquire more and more types of data, the amount of data that people may acquire is becoming larger and larger, and the demand for the data processing speed is becoming higher and higher. Chips are the cornerstone of task allocation, which essentially determine the ability to process data. From the perspective of application fields, the chips are mainly developed in two routes. One is general-purpose chips, for example, CPU and the like, which can provide great flexibility but have low effective computing power when processing algorithms in a specific field; the other is special-purpose chips, for example, TPU and the like, which have high effective computing power in certain specific fields but are poor in processing capacity or even have no processing capacity in flexible and universal fields. Due to various data types and numerous data volumes in the era of intelligence, the chips are required to not only process changing algorithms in different fields with extremely high flexibility, but also rapidly process a great number of dramatically increasing data volumes with extremely strong processing capacities.</p><p id="p-0005" num="0004">In neural network computing, multi-core or many-core chips are often used. How to efficiently exploit the computing power of the many processing cores is the key to determining the performance of the entire chip. The utilization of computing power of each processing core depends on a variety of factors, such as task scheduling and allocation, chip architecture, processing core structure, and processing core circuitry. Among them, task scheduling and allocation is a very critical factor. If the scheduling and allocation of tasks are reasonable, the effective computing power of each processing core can be fully utilized.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">The summary is provided to introduce concepts in a brief form, which will be described in detail in the Detailed Description that follows. The summary is not intended to identify key features or essential features of the claimed technical solution, nor is it intended to be used to limit the scope of the claimed technical solution.</p><p id="p-0007" num="0006">The embodiments of the present disclosure provide the following technical solutions.</p><p id="p-0008" num="0007">In a first aspect, the embodiments of the present disclosure provide a task allocation method, including:</p><p id="p-0009" num="0008">in response to receiving a synchronization signal, determining, by the microprocessor, whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of a task;</p><p id="p-0010" num="0009">in response to the allocation of the task segment to the processing core being required, instructing, by the microprocessor, to allocate the task segment to the processing core;</p><p id="p-0011" num="0010">receiving, by the processing core, the task segment; and</p><p id="p-0012" num="0011">in response to satisfying a first preset condition, sending, by the processing core, a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal.</p><p id="p-0013" num="0012">Further, in response to receiving the synchronization signal, determining, by the microprocessor, whether the allocation of the task segment to the processing core is required according to the synchronization signal, includes:</p><p id="p-0014" num="0013">executing, by the microprocessor, its own program; and</p><p id="p-0015" num="0014">in response to receiving the synchronization signal, determining, by the microprocessor, the processing core that requires to be allocated the task segment according to the number of the synchronization signals received.</p><p id="p-0016" num="0015">Further, the first preset condition includes: the processing core has received the task segment or executing time taken by the processing core to receive the task segment reaches a preset time threshold.</p><p id="p-0017" num="0016">Further, instructing, by the microprocessor, to allocate the task segment to the processing core, includes:</p><p id="p-0018" num="0017">instructing, by the microprocessor, a memory controller to read the task segment from an external memory and send it to the processing core.</p><p id="p-0019" num="0018">Further, instructing, by the microprocessor, the memory controller to read the task segment from the external memory and send it to the processing core, includes:</p><p id="p-0020" num="0019">obtaining, by the microprocessor, size of storage space of the processing core;</p><p id="p-0021" num="0020">instructing, by the microprocessor, the memory controller to read the task segment that matches the size of the storage space of the processing core from the memory and send it to the processing core.</p><p id="p-0022" num="0021">Further, the method further includes:</p><p id="p-0023" num="0022">in response to the allocation of the task segment to the processing core not being required, executing, by the microprocessor, its own program;</p><p id="p-0024" num="0023">executing, by the processing core, a last received task segment; and</p><p id="p-0025" num="0024">in response to satisfying a second preset condition, sending, by the processing core, the synchronization request signal.</p><p id="p-0026" num="0025">Further, the second preset condition includes: the processing core executes a synchronization request signal sending instruction in the last received task segment, or time taken by the processing core to execute the last received task segment reaches a preset time threshold.</p><p id="p-0027" num="0026">Further, the chip includes at least two processing cores executing the task, and the microprocessor instructs to allocate task segments to the at least two processing cores, respectively.</p><p id="p-0028" num="0027">Further, the synchronization request signal includes the synchronization request signals generated by the at least two processing cores executing the task.</p><p id="p-0029" num="0028">Further, sending, by the processing core, the synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal, includes:</p><p id="p-0030" num="0029">in response to each of the processing cores executing the task having sent the synchronization request signal, triggering the generation of the synchronization signal.</p><p id="p-0031" num="0030">Further, the microprocessor includes a counter, and after receiving the synchronization signal, the method further includes:</p><p id="p-0032" num="0031">starting the counter to record the number of the synchronization signals received by the microprocessor.</p><p id="p-0033" num="0032">Further, the synchronization signal is generated by a synchronization signal generator, wherein the synchronization signal generator is realized by hardware or software.</p><p id="p-0034" num="0033">In a second aspect, the embodiments of the present disclosure provide a chip, including:</p><p id="p-0035" num="0034">a processing core, configured to execute a task;</p><p id="p-0036" num="0035">a microprocessor, configured to, in response to receiving a synchronization signal, determine whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of the task; and configured to, in response to the allocation of the task segment to the processing core being required, instruct to allocate the task segment to the processing core; and</p><p id="p-0037" num="0036">a memory controller, configured to, based on an instruction from the microprocessor, read the task segment corresponding to the instruction from an external memory and send it to the processing core.</p><p id="p-0038" num="0037">Further, the processing core is further configured to: receive the task segment; and in response to satisfying a first preset condition, send a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal.</p><p id="p-0039" num="0038">Further, the microprocessor is further configured to: execute its own program; and in response to receiving the synchronization signal, determine the processing core that requires to be allocated the task segment according to the number of the synchronization signals received.</p><p id="p-0040" num="0039">Further, the first preset condition includes: the processing core has received the task segment or the executing time taken by the processing core to receive the task segment reaches a preset time threshold.</p><p id="p-0041" num="0040">Further, the microprocessor is further configured to instruct the memory controller to read the task segment from the external memory and send it to the processing core.</p><p id="p-0042" num="0041">Further, the microprocessor is further configured to obtain size of storage space of the processing core; and instruct the memory controller to read the task segment that matches the size of the storage space of the processing core from the memory and send it to the processing core.</p><p id="p-0043" num="0042">Further, the microprocessor is further configured to in response to the allocation of the task segment to the processing core not being required, execute its own program; and the processing core is further configured to execute a last received task segment; and in response to satisfying a second preset condition, send the synchronization request signal.</p><p id="p-0044" num="0043">Further, the second preset condition includes: the processing core executes a synchronization request signal sending instruction in the last received task segment, or the time taken by the processing core to execute the last received task segment reaches a preset time threshold.</p><p id="p-0045" num="0044">Further, the chip includes at least two processing cores executing the task, and the microprocessor is configured to instruct to allocate task segments to the at least two processing cores, respectively.</p><p id="p-0046" num="0045">Further, the synchronization request signal includes the synchronization request signals generated by the at least two processing cores executing the task.</p><p id="p-0047" num="0046">Further, the microprocessor includes a counter, and after receiving the synchronization signal, the microprocessor is further configured to start the counter to record the number of the synchronization signals received by the microprocessor.</p><p id="p-0048" num="0047">In a third aspect, the embodiments of the present disclosure provide an electronic device, including: a memory for storing computer-readable instructions; and one or more processors for executing the computer-readable instructions, which, upon execution, cause the processors to implement any one of the task allocation methods in the first aspect.</p><p id="p-0049" num="0048">In a fourth aspect, the embodiments of the present disclosure provide a non-transitory computer-readable storage medium, the non-transitory computer-readable storage medium storing computer instructions for causing a computer to execute any one of the task allocation methods in the first aspect.</p><p id="p-0050" num="0049">In a fifth aspect, the embodiments of the present disclosure provide a computer program product, comprising computer instructions, wherein, when the computer instructions are executed by a computing device, the computing device executes any one of the task allocation methods in the first aspect.</p><p id="p-0051" num="0050">In a sixth aspect, the embodiments of the present disclosure provide a computing apparatus, comprising one or more chips in the second aspect.</p><p id="p-0052" num="0051">The embodiments of the present disclosure provide a task allocation method, apparatus, electronic device and computer-readable storage medium. The task allocation method includes: in response to receiving a synchronization signal, determining, by the microprocessor, whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of a task; in response to the allocation of the task segment to the processing core being required, instructing, by the microprocessor, to allocate the task segment to the processing core; receiving, by the processing core, the task segment; and in response to satisfying a first preset condition, sending, by the processing core, a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal. With the above method, the microprocessor in the chip allocates the task segments executed by the processing cores according to the synchronization signal, at least partially alleviating the technical problems of inflexible task allocation and complex control of the processing cores.</p><p id="p-0053" num="0052">The above description is only an overview of the technical solutions of the present disclosure. For a clearer understanding of the technical means of the present disclosure for implementation according to the content of the specification, and to make the above and other objectives, features, and advantages of the present disclosure clearer and more comprehensible, detailed description is provided as follows with reference to embodiments and the accompanying drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0054" num="0053">The above and other features, advantages, and aspects of embodiments of the present disclosure will become more apparent in conjunction with the accompanying drawings and with reference to the following specific embodiments. Throughout the accompanying drawings, the same or similar reference numerals represent the same or similar elements. It should be understood that the accompanying drawings are schematic and that the originals and elements are not necessarily drawn to scale.</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>1</b><i>a</i>-<b>1</b><i>b </i></figref>are schematic diagrams of the prior art of the present disclosure.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic flowchart of an embodiment of a task allocation method provided by the present disclosure.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic structural diagram of a chip provided by the present disclosure.</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic structural diagram of an embodiment of a chip provided by the present disclosure.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of computing tasks of a neural network executed by an embodiment of a chip provided by the present disclosure.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram of pipelined computation process of processing cores when an embodiment of a chip provided by the present disclosure executes a task allocation method.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a timing diagram of a microprocessor and processing cores when an embodiment of a chip provided by the present disclosure executes a task allocation method.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0062" num="0061">Embodiments of the present disclosure will be described in greater detail below with reference to the accompanying drawings. While some embodiments of the present disclosure are shown in the accompanying drawings, it should be understood that the present disclosure may be implemented in various forms and should not be construed as being limited to the embodiments set forth herein, instead these embodiments are provided for a more thorough and complete understanding of the present disclosure. It should be understood that the accompanying drawings and embodiments of the present disclosure are for exemplary purposes only and are not intended to limit the scope of protection of the present disclosure.</p><p id="p-0063" num="0062">It should be understood that the individual steps documented in the method embodiments of the present disclosure may be performed in a different order, and/or in parallel. In addition, the method embodiments may include additional steps and/or omit the steps illustrated. The scope of the present disclosure is not limited in this regard.</p><p id="p-0064" num="0063">The term &#x201c;include&#x201d; and its variations are used herein as an open inclusion, that is, &#x201c;including, but not limited to&#x201d;. The term &#x201c;based on&#x201d; means &#x201c;based, at least in part, on&#x201d;. The term &#x201c;an embodiment&#x201d; means &#x201c;at least one embodiment&#x201d;. The term &#x201c;another embodiment&#x201d; means &#x201c;at least one additional embodiment&#x201d;. The term &#x201c;some embodiments&#x201d; means &#x201c;at least some embodiments&#x201d;. Relevant definitions of other terms will be given in the descriptions below.</p><p id="p-0065" num="0064">It should be noted that the concepts such as &#x201c;first&#x201d; and &#x201c;second&#x201d; mentioned in the present disclosure are used only to distinguish between different apparatuses, modules or units, and are not intended to define the order or mutual interdependence of the functions performed by these apparatuses, modules or units.</p><p id="p-0066" num="0065">It should be noted that the modifications of &#x201c;one&#x201d;, &#x201c;a&#x201d; and &#x201c;plurality of&#x201d; referred to in the present disclosure are illustrative rather than limiting, and it should be understood by those skilled in the art to mean &#x201c;one or more&#x201d; unless the context clearly indicates otherwise.</p><p id="p-0067" num="0066">The names of messages or information exchanged between the plurality of apparatuses in the embodiments of the present disclosure are used for illustrative purposes only and are not intended to limit the scope of the messages or information.</p><p id="p-0068" num="0067">The following two schemes are generally used to schedule tasks for processing cores.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>1</b><i>a </i></figref>illustrates a scheme for task allocation using a scheduler. In this scheme, the scheduler receives an instruction from an instruction source, and then transmits the instruction to each processing core according to a certain strategy, such as sequence; and each processing core executes the same instruction but processes different data. Each processing core may have a relatively simple structure, such as Single Instruction Multiple Data (SIMD) structure that shares control circuits and registers, or may have a relatively complex structure with a certain degree of autonomy, such as Single Instruction Multiple Threads (SIMT) structure with an independent control circuit and registers. However, in this scheme, the scheduler can only passively receive instructions from the external instruction source, and then assign the instructions to each processing core, which has a single functionality and lacks flexibility; whether it is a SIMD structure or SIMT structure, each processing core can only execute the same instructions, with little degree of freedom for each processing core and simple control.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates a scheme where the processing cores execute tasks independently. In this scheme, each processing core can independently read instructions from the memory and perform computations; and each processing core has a complete control circuit, register group and other circuits. For the scheme, it is difficult for the processing cores to cooperate with each other to accomplish a complete task efficiently. The circuit control is complex, each core is almost a complete CPU, the design is difficult, and the power consumption and chip area are large. Multiple processing cores may frequently access the instruction storage area, resulting in a decrease in storage access efficiency, which in turn affects the utilization of the chip's computing power.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of an embodiment of a task allocation method provided by the present disclosure. The task allocation method provided by the embodiment is used in a chip, where the chip includes a processing core and a microprocessor. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the method includes the following steps:</p><p id="p-0072" num="0071">Step S<b>201</b>, in response to receiving a synchronization signal, determining, by the microprocessor, whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of a task.</p><p id="p-0073" num="0072">In the embodiment, in addition to executing its own program to complete normal functions, the microprocessor is also used to allocate a task segment to the processing core of the chip, where the task segment is a part of a complete task, and the complete task is divided into a plurality of task segments in advance or dynamically to facilitate its storage and execution by the processing core. When the microprocessor receives the synchronization signal, it determines whether allocation of a task segment to the processing core is required in the chip according to the received synchronization signal.</p><p id="p-0074" num="0073">Optionally, the step S<b>201</b> includes: executing, by the microprocessor, its own program; and in response to receiving the synchronization signal, determining, by the microprocessor, the processing core that requires to be allocated the task segment according to the number of the synchronization signals received. In the embodiment, a preloaded allocation strategy is stored in the microprocessor, and it is preset in the allocation strategy that, in a certain synchronization cycle, which processing core or cores need to update the task segment(s) it or they execute. The microprocessor counts the synchronization signals each time it receives the synchronization signal, and determines whether a task segment needs to be allocated to the processing core according to the counting result.</p><p id="p-0075" num="0074">In an embodiment, the microprocessor includes a counter, and after receiving the synchronization signal, the method further includes: starting the counter to record the number of the synchronization signals received by the microprocessor. After that, the microprocessor may determine the processing core that requires to be allocated the task segment according to the number of the synchronization signals.</p><p id="p-0076" num="0075">Step S<b>202</b>, in response to the allocation of the task segment to the processing core being required, instructing, by the microprocessor, to allocate the task segment to the processing core.</p><p id="p-0077" num="0076">Optionally, when determining that a task segment needs to be allocated to the processing core, the microprocessor instructs the memory controller to read the task segment from an external memory and send it to the processing core.</p><p id="p-0078" num="0077">Most of the time, the microprocessor executes its own program to complete other tasks such as computation, and the microprocessor stores a task segment allocation instruction. The task segment allocation instruction can be a general allocation instruction, and during execution, the microprocessor obtains the parameters of the instruction, such as the processing core to be assigned the task as indicated by the task segment allocation instruction, the storage location of the task segment to be assigned in the external memory, etc.</p><p id="p-0079" num="0078">Exemplarily, the memory controller is a DMAC (Direct Memory Access Controller, DMA controller). The microprocessor executes the task segment allocation instruction, and configures the DMAC according to the parameters of the task segment allocation instruction, so that the DMAC directly reads the task segment to be assigned as indicated by the task segment allocation instruction from the external memory and sent it to the corresponding processing core without the involvement of the microprocessor.</p><p id="p-0080" num="0079">Exemplarily, each time the synchronization signal is received, the microprocessor determines, according to the number of synchronization signals, the processing core to be assigned the task, that is, the processing core for which the task segment needs to be updated, and also determines the parameters such as the storage location of the task segment to be updated. The microprocessor interrupts its own program currently executed and calls the task segment allocation instruction, and configures the task segment allocation instruction using the above parameters.</p><p id="p-0081" num="0080">Optionally, the complete task may be pre-divided into a plurality of task segments, that is, the size of each task segment and the head address of each task segment in the memory are obtained in advance. When the task segment allocation instruction is executed, the task segment can be obtained from the external memory according to the size and head address of the task segment.</p><p id="p-0082" num="0081">Optionally, the complete task may be dynamically divided into a plurality of task segments, that is, the quantity and size of the task segments are not determined before allocation. At this time, the microprocessor instructs the memory controller to read the task segment from the external memory and send it to the processing core, including: the microprocessor obtains the size of the storage space of the processing core; and instructs the memory controller to read the task segment that matches the size of the storage space of the processing core from the memory and send it to the processing core. Each processing core has its own storage space, and the available size of the storage space may be different. Therefore, when the microprocessor instructs to allocate a task segment to the processing core, the microprocessor first obtains the size of the storage space of the processing core, and determines the size of the task segment using the size of the storage space. Then, the microprocessor determines the range of the task segment sent to the processing core in the entire task through the head address and the size of the task segment. Once the current task segment is determined, the head address of the next task segment is determined, which is used for the allocation of the next task segment. Optionally, the dynamic allocation can be dynamic allocation each time, that is, the size of the storage space of the processing core is obtained each time the task segment allocation instruction is executed; or the dynamic allocation may be dynamic allocation only for the first time, that is, the size of the storage space of the processing core is considered to be fixed when the task is executed. When the task segment is allocated for the first time, the complete task is divided into a plurality of task segments according to the size of the storage space of the processing core and the size of the complete task; and each time thereafter, the processing core is allocated the task segment according to the size of the task segments divided at the first time.</p><p id="p-0083" num="0082">Step S<b>203</b>, receiving, by the processing core, the task segment.</p><p id="p-0084" num="0083">Exemplarily, in the step, the processing core receives the task segment sent by the memory controller.</p><p id="p-0085" num="0084">Optionally, in the step, the processing core starts to receive the task segment when receiving the synchronization signal in step S<b>201</b>, and at this time, while the synchronization signal is sent to the microprocessor, it is also sent to the processing core to instruct the processing core to be ready to receive the task segment.</p><p id="p-0086" num="0085">Optionally, in the step, the processing core may not receive the synchronization signal. In this case, the reception of the task segment may be instructed in other ways, such as prompting the processing core to receive the task segment by sending a signal from the memory controller, etc., which will not be elaborated here.</p><p id="p-0087" num="0086">Step S<b>204</b>, in response to satisfying a first preset condition, sending, by the processing core, a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal.</p><p id="p-0088" num="0087">When executing the task segment, the processing core sends a synchronization request signal during the execution of the task segment and/or when the execution of the task segment ends, where the synchronization request signal is used to trigger the generation of the synchronization signal.</p><p id="p-0089" num="0088">The first preset condition includes: the processing core has received the task segment or the executing time taken by the processing core to receive the task segment reaches a preset time threshold.</p><p id="p-0090" num="0089">In an implementation of the embodiment, when the processing core finishes receiving the task segment, the processing core calls a synchronization request signal sending instruction, indicating that a new synchronization signal can be generated to instruct the microprocessor to execute the task segment allocation for the next synchronization cycle.</p><p id="p-0091" num="0090">In another implementation of the embodiment, the processing core may take a long time to receive the task segment and cannot finish receiving it in one synchronization cycle. Therefore, in the implementation, a timer is started at the beginning of receiving the task, and the timeout period of the timer is a preset time threshold. When the timer times out, it indicates that the time for receiving the task segment has exceeded the time threshold. At this time, the processing core calls the synchronization request signal sending instruction to send the synchronization request signal, and resets the timer.</p><p id="p-0092" num="0091">It should be understood that the synchronization signal can be generated by the synchronization signal generator in the chip. In this case, the synchronization signal generator is a special component, which triggers the generation of the first synchronization signal at startup, and then triggers the generation of the synchronization signal after receiving the synchronization request signals sent by all processing cores.</p><p id="p-0093" num="0092">Optionally, the synchronization signal generator may be a program unit. In this case, the synchronization signal is generated under the control of the program unit. A program is required to generate the first synchronization signal after startup, and then to trigger the generation of the synchronization signal after receiving message packets of the synchronization request signals sent by all processing cores.</p><p id="p-0094" num="0093">After step S<b>204</b>, when the microprocessor receives the synchronization signal, it calls the task segment allocation instruction, and adds to the task segment allocation instruction the parameters of the next task segment including the processing core, the address or size of the task segment, etc. The task segment allocation instruction is used to instruct to send the next task segment to the processing core determined according to the synchronization signal. The parameters of the next task segment in the task segment allocation instruction are determined by an allocation strategy preset in the microprocessor.</p><p id="p-0095" num="0094">In an embodiment, the above task allocation method further includes:</p><p id="p-0096" num="0095">in response to the allocation of the task segment to the processing core not being required, executing, by the microprocessor, its own program;</p><p id="p-0097" num="0096">executing, by the processing core, a last received task segment; and</p><p id="p-0098" num="0097">in response to satisfying a second preset condition, sending, by the processing core, the synchronization request signal.</p><p id="p-0099" num="0098">In the embodiment, when it is determined in step S<b>201</b> that it is not required to allocate the task segment to the processing core, the microprocessor executes its own program; at this time, the processing core continues to execute the task segment that has not been completed before, that is, to execute the last received task segment.</p><p id="p-0100" num="0099">The second preset condition is: the processing core executes a synchronization request signal sending instruction in the last received task segment, or the time taken by the processing core to execute the last received task segment reaches a preset time threshold.</p><p id="p-0101" num="0100">Optionally, in an implementation of this embodiment, at least one synchronization request signal sending instruction is pre-inserted into the task segment. For the synchronization request signal sending instruction set in the middle of the task segment, when the processing core executes the synchronization request signal sending instruction, the processing core sends the synchronization request signal and continues to execute the task segment; for the synchronization request signal sending instruction set at the end of the task segment, when the processing core executes the synchronization request signal sending instruction, the processing core sends the synchronization request signal and waits to receive a new task segment.</p><p id="p-0102" num="0101">Optionally, in an implementation of the embodiment, the synchronization request signal sending instruction is not inserted into the task segment, but a timer is started when the task segment is executed, and the timeout period of the timer is a preset time threshold. When the timer times out, it indicates that the execution time for the task segment has exceeded the time threshold. At this time, the processing core calls the synchronization request signal sending instruction to send the synchronization request signal, and resets the timer. It should be understood that the time threshold of each task segment may be the same or different, and the time threshold of each task segment may be assigned when allocating the task segment, so that the synchronization signal can be triggered more flexibly.</p><p id="p-0103" num="0102">Optionally, in the task allocation method, the chip includes at least two processing cores executing the task, and the microprocessor instructs to allocate task segments to the at least two processing cores, respectively. For each processing core that executes the task, the steps in steps S<b>201</b> to S<b>204</b> above may be executed between the processing core and the microprocessor, and the microprocessor can determine the processing core that requires to be allocated the task segment in the current synchronization cycle and the storage address of the task segment, etc., according to the synchronization signal.</p><p id="p-0104" num="0103">In the embodiment, when the microprocessor receives the first synchronization signal, which does not need to be triggered by a synchronization request signal, the microprocessor calls and executes the task segment allocation instruction. The task segment allocation instruction may divide different tasks into different numbers of segments and allocate the segments to different processing cores for parallel processing. Exemplarily, there are two processing cores executing the task in the chip, and the task segment allocation instruction may divide the complete task into four segments, which are handed over to one processing core for execution sequentially. It is also possible to first divide the complete task into two parts, each part being executed by one processing core, and each part is divided into four task segments, that is to say, each processing core processes four task segments; when there is no data correlation between the task segments executed by the two processing cores, the two processing cores can process the task segments in parallel.</p><p id="p-0105" num="0104">In this optional embodiment, the synchronization request signal includes the synchronization request signals generated by the at least two processing cores executing the task. That is, when there are a plurality of processing cores, each processing core sends its own synchronization request signal.</p><p id="p-0106" num="0105">Further, the synchronization request signal being configured to trigger the generation of the synchronization signal, includes: in response to each of the processing cores executing the task having sent the synchronization request signal, triggering the generation of the synchronization signal. In the embodiment, the synchronization signal is generated only after each processing core executing the task has sent a synchronization request signal.</p><p id="p-0107" num="0106">Because the task is processed in segments, the microprocessor needs to know when the task is completed in order to assign other tasks to the processing cores. In order to determine whether a task is completed, optionally, in the task allocation method, the microprocessor further includes a task counter, and the processing core corresponds to at least one task counter, wherein after the microprocessor instructs to allocate the task segments, the method further includes: starting, by the microprocessor, the task counter to record the number of the task segments that have been allocated to the processing core that executes the task; and in response to the number of the task segments that have been allocated to the processing core reaches a preset threshold, resetting the task counter. Exemplarily, a task is divided into four task segments to be executed by one processing core, and when the first task segment is allocated to the processing core, the task counter corresponding to the processing core is started, and the value of the task counter is set to 1; and thereafter, after each time a task segment is allocated to the processing core, the value of the task counter is incremented by 1 until the value of the task counter reaches 4, and the task counter is reset to indicate that the task for the processing core has been executed. When multiple processing cores complete a task together, the value of the task counter corresponding to each processing core has to reach its preset threshold to indicate the completion of the entire task. After the task counter corresponding to a certain processing core reaches its preset threshold, it indicates that the part of the task executed by the processing core is completed, and the processing core can be assigned a new task. The microprocessor determines which processing core has completed its task and needs to be allocated a new task segment according to the numbers recorded by the task counters.</p><p id="p-0108" num="0107">Optionally, a preset number of synchronization signals may be used to determine whether the task is completed. Since in the allocation strategy, the processing cores that need to be assigned task segments and the task segments in a certain synchronization cycle are preset, it can be determined in advance that in which synchronization cycle the task ends. When the number of the synchronization signals reaches the determined synchronization cycle, it is determined that the task ends.</p><p id="p-0109" num="0108">The above embodiments disclose a task allocation method for use in a chip, the chip including a processing core and a microprocessor, wherein the task allocation method includes: in response to receiving a synchronization signal, determining, by the microprocessor, whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of a task; in response to the allocation of the task segment to the processing core being required, instructing, by the microprocessor, to allocate the task segment to the processing core; receiving, by the processing core, the task segment; and in response to satisfying a first preset condition, sending, by the processing core, a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal. With the above method, the microprocessor in the chip allocates the task segments executed by the processing cores according to the synchronization signal, at least partially alleviating the technical problems of inflexible task allocation and complex control of the processing cores.</p><p id="p-0110" num="0109">In the above paragraphs, although the steps in the abovementioned method embodiments are described in the abovementioned order, it should be clear to those skilled in the art that the steps in the embodiments of the present disclosure are not necessarily executed in the abovementioned order, and may also be performed in other order, such as in reverse order, in parallel, interleavedly or the like; and on the basis of the abovementioned steps, those skilled in the art may also add other steps. These obvious modifications or equivalent replacement modes should also be included within the protection scope of the present disclosure, and will not be elaborated here.</p><p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic structural diagram of a chip provided by an embodiment of the present disclosure. The chip <b>300</b> as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> includes: processing cores <b>301</b>, a microprocessor <b>302</b> and a memory controller <b>303</b>. The processing core is configured to execute a task; the microprocessor is configured to, in response to receiving a synchronization signal, determine whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of the task; and is configured to, in response to the allocation of the task segment to the processing core being required, instruct to allocate the task segment to the processing core; and the memory controller is configured to, based on an instruction from the microprocessor, read the task segment corresponding to the instruction from an external memory and send it to the processing core. The processing core further includes an internal storage space PRAM, and the internal storage space is used to store the task segment.</p><p id="p-0112" num="0111">The chip <b>300</b> may further include a synchronization signal generator <b>304</b>, which is used to generate a synchronization signal Sync, and the synchronization signal is sent to each processing core and the microprocessor.</p><p id="p-0113" num="0112">Optionally, the synchronization signal generator is a special hardware component, which triggers the generation of the first synchronization signal at startup, and then triggers the generation of the synchronization signal after receiving the synchronization request signals sent by all processing cores.</p><p id="p-0114" num="0113">Optionally, the synchronization signal generator is a program unit. In this case, the synchronization signal is generated under the control of the program unit. A program is required to generate the first synchronization signal after startup, and then to trigger the generation of the synchronization signal after receiving message packets of the synchronization request signals sent by all processing cores.</p><p id="p-0115" num="0114">In an optional implementation, the synchronization signal generator may be only connected to the microprocessor, and the synchronization of the processing cores is achieved by the microprocessor instructing the DMAC, which will not be elaborated here. The following description and illustration are made with reference to the implementation shown in the drawings.</p><p id="p-0116" num="0115">Further, the processing core is further configured to receive the task segment; and in response to satisfying a first preset condition, the processing core sends a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal. The first preset condition in the embodiment is the same as that in the method embodiment, and the process of generating the synchronization signal is also the same, which will not be repeated here. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, when the first preset condition is met, each of the processing cores sends the synchronization request signals Sync_C<b>1</b>, Sync_C<b>2</b>, . . . Sync C_N, respectively, and when the synchronization signal generator receives the synchronization request signals from all the processing cores, it generates the synchronization signal Sync, which is simultaneously sent to each processing core and the microprocessor.</p><p id="p-0117" num="0116">Further, the microprocessor is further configured to: execute its own program; and in response to receiving the synchronization signal, determine the processing core that requires to be allocated the task segment according to the number of the synchronization signals received.</p><p id="p-0118" num="0117">Further, the microprocessor is further configured to: in response to the allocation of the task segment to the processing core not being required, execute its own program; the processing core is further configured to: execute a last received task segment; and in response to satisfying a second preset condition, send the synchronization request signal.</p><p id="p-0119" num="0118">Further, the second preset condition is that: the processing core executes a synchronization request signal sending instruction in the last received task segment, or the time taken by the processing core to execute the last received task segment reaches a preset time threshold.</p><p id="p-0120" num="0119">Further, the chip includes at least two processing cores executing the task, and the microprocessor is configured to instruct to allocate task segments to the at least two processing cores, respectively.</p><p id="p-0121" num="0120">Further, the synchronization request signal includes the synchronization request signals generated by the at least two processing cores executing the task.</p><p id="p-0122" num="0121">Further, the microprocessor includes a counter, and after receiving the synchronization signal, the microprocessor is further configured to start the counter to record the number of the synchronization signals received by the microprocessor.</p><p id="p-0123" num="0122">As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the task segments executed by the processing cores are scheduled by the microprocessor <b>302</b>; the microprocessor allocates tasks to each processing core according to a certain strategy, and the task allocation strategy can be set in advance, typically in an external memory or in other hosts; and during initialization, the microprocessor reads the allocation strategy externally to allocate the corresponding task segment to each processing core. Usually, the microprocessor executes its own program, and the allocation strategy of a complete task starts from the first synchronization cycle. In the first synchronization cycle, the microprocessor obtains the processing core to which the task segment needs to be assigned and the storage address of the task segment in the first synchronization cycle according to the allocation strategy, and then the microprocessor executes the task segment allocation instruction PSend, and instructs the memory controller to allocate the task segment to the corresponding processing core according to the PSend instruction. The microprocessor configures the memory controller to read the corresponding task segment from the external memory and send it to the corresponding processing core.</p><p id="p-0124" num="0123">The processing core includes an internal storage space PRAM for storing the task segment; the task segment consists of a series of instructions. The processing core reads the instructions from the PRAM, decodes the instructions and executes the instructions, and no longer needs to read instructions from the external memory. The PRAM of each processing core has a limited storage space, so a complete task needs to be divided into a plurality of task segments for execution. During the process of executing the task segment or after the execution of the task segment, the processing core executes the synchronization request signal sending instruction to send the synchronization request signal to the synchronization signal generator.</p><p id="p-0125" num="0124">After receiving the synchronization request signal from every processing core, the synchronization signal generator generates a new synchronization signal; and the generated synchronization signal is sent to the microprocessor and each processing core. After the microprocessor receives the synchronization signal, it determines the number of synchronization signals received, determines whether the processing core needs to be allocated a task segment according to the number of synchronization signals, and obtains the parameters required by the task allocation instruction, such as the processing core that needs to be allocated the task segment and the storage address of the corresponding task segment, according to the allocation strategy. After the parameters are acquired, the microprocessor configures the PSend instruction according to the parameters to configure the memory controller to fetch the task segment indicated by the PSend parameter from the external memory and send it to the processing core indicated by the PSend. In other times when the PSend instruction is not executed, the microprocessor may execute other processing without being idle like a dedicated scheduler, which improves the execution efficiency of the microprocessor.</p><p id="p-0126" num="0125">The following illustrates the scheduling process in the present disclosure with a practical application scenario. <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of the chip according to the embodiment of the present disclosure. In the example, the chip includes two processing cores C<b>1</b> and C<b>2</b>, a microprocessor, and a memory controller, wherein the memory controller is connected to an external memory. The chip may further include a synchronization signal generator. It should be understood that the synchronization signal generator may be implemented as hardware inside the chip or as a synchronization signal generation program, which will not be elaborated here.</p><p id="p-0127" num="0126">The microprocessor is used for task scheduling, and the task is a computing task for a two-layer neural network. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the neural network in the example includes two layers, layer1 and layer2, where layer1 receives input data and computes, and it inputs the computation result to layer2; and layer2 performs computation on the data input from layer1 to obtain the final output. The size of the computation program P<b>1</b> of the first layer is 64 KB, and the size of the computation program P<b>2</b> of the second layer is 128 KB; and the entire network may be allocated to two processing cores for pipelined computation according to the task allocation strategy, that is, C<b>1</b> and C<b>2</b> are each responsible for the computation of a layer of the network, and each runs the program of the corresponding layer. The input data is sent to C<b>1</b>. C<b>1</b> processes the input data according to the computation program of the first layer, and sends the processing result to C<b>2</b>; C<b>2</b> takes the processing result of the first layer as input, performs processing according to the computation program of the second layer, and obtains the final result and then outputs.</p><p id="p-0128" num="0127">The pipelined computation process of the network is shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. At time t<b>1</b>, C<b>1</b> receives the first input data, performs processing on the input data according to the computation program of the first layer, and outputs the processing result to C<b>2</b>; it should be noted that, at this time, what C<b>1</b> executes is a part of the computation program, that is, the abovementioned task segment, so its output is only the partial processing result. At time t<b>2</b>, C<b>1</b> continues to receive input data, performs processing on the input data according to the task segment it executes, and outputs the processing result to C<b>2</b>; at time t<b>2</b>, C<b>2</b> performs processing on the output result of C<b>1</b> at time t<b>1</b>, according to the output result of C<b>1</b> at time t<b>1</b> and the task segment executed on C<b>2</b>, to obtain the partial output result; and so on, until the entire task is computed, and the final output result is obtained.</p><p id="p-0129" num="0128">In the example, the size of the PRAM of each core is 32 KB, the computation program of the first layer is 64 KB, and the computation program of the second layer is 128K. Thus, for the computation program of each layer, the program executed by the two cores needs to be allocated according to a certain strategy. Exemplarily, in the example, the computation program of the first layer is divided into 2 parts, and the computation program of the second layer is divided into 4 parts; that is, the processing core C<b>1</b> processes 2 task segments, and the processing core C<b>2</b> processes 4 task segments. The entire two-layer computation program is divided into 6 task segments, each with a size of 32 KB. The two processing cores are independent of each other when executing the task segments, and they are related in data. For example, C<b>2</b> needs to wait for the output data of C<b>1</b> as its input data, but they are independent of each other when receiving the task segments, executing the task segments and updating the task segments.</p><p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a timing diagram of task allocation and execution of the processing cores. As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, initially, the synchronization signal generator generates the first synchronization signal. At this time, the microprocessor interrupts its own program, and starts the counter to prepare to count the synchronization signals Sync. According to the number of Sync and the allocation strategy, the microprocessor determines the processing cores C<b>1</b> and C<b>2</b> that need to be allocated task segments in the first synchronization cycle, and parameters such as the storage address of the task segment that needs to be allocated to each processing core; and the microprocessor calls the task segment allocation instruction PSend to configure the DMAC according to the abovementioned parameters. The DMAC reads the first task segments of C<b>1</b> and C<b>2</b> from the external memory according to the PSend instruction and writes them into the PRAM of C<b>1</b> and C<b>2</b>, that is, in the t<b>0</b> cycle in <figref idref="DRAWINGS">FIGS. <b>7</b></figref>, C<b>1</b> and C<b>2</b> are in the task segment allocation state (U), to receive the task segments. Allocating the task segments requires one synchronization cycle; when finishing receiving the task segments, C<b>1</b> and C<b>2</b> respectively execute the synchronization request signal sending instruction, and send the synchronization request signals to the synchronization signal generator. After receiving the synchronization request signals from both C<b>1</b> and C<b>2</b>, the synchronization signal generator generates the synchronization signal of the synchronization cycle t<b>1</b> and sent it to C<b>1</b>, C<b>2</b> and the microprocessor. In this synchronization cycle, both C<b>1</b> and C<b>2</b> are in the task segment execution state (E), to execute the task segments. Due to the faster execution speed of C<b>2</b>, in the embodiment, C<b>2</b> finishes executing the assigned task segment within the synchronization cycle of t<b>1</b>, and at this time, C<b>2</b> executes the synchronization request signal sending instruction to generate the synchronization request signal and sent it to the synchronization signal generator; C<b>1</b> has a longer execution time and has not finished execution, however, a synchronization request signal sending instruction is inserted in the task segment of C<b>1</b> in advance or a synchronization request signal sending instruction is executed at a preset time threshold according to the execution time of C<b>2</b>, so that when C<b>2</b> finishes execution, C<b>1</b> also executes the synchronization request signal sending instruction to generate the synchronization request signal and sent it to the synchronization signal generator. When the synchronization signal generator receives the synchronization request signals sent by both C<b>1</b> and C<b>2</b>, it generates the synchronization signal of the synchronization cycle t<b>2</b>; according to the number of synchronization signals received, the microprocessor determines that only C<b>2</b> needs to be allocated a task segment in the synchronization cycle t<b>2</b>, and then configures the DMAC to allocate the task segment to C<b>2</b> according to the allocation strategy. The steps of task segment allocation are the same as the aforementioned task segment allocation steps, and thus are not repeated here. Although C<b>1</b> sends the synchronization request signal, the task segment in C<b>1</b> needs to execute for three synchronization cycles. Therefore, C<b>1</b> sends the synchronization request signals respectively when the cycles t<b>1</b>, t<b>2</b> and t<b>3</b> are completed. However, it does not accept new task segment in these cycles, but continues to execute the task received in the cycle to. When the microprocessor receives the synchronization request signal sent by C<b>1</b> when the cycle t<b>3</b> is completed, that is, when the number of the synchronization signals received by the microprocessor is 4, the microprocessor determines that the task of C<b>1</b> is completed, and determines that both C<b>1</b> and C<b>2</b> need to be allocated task segments in the synchronization cycle t<b>4</b>, and then configures the DMAC to allocate task segments for C<b>1</b> and C<b>2</b>. The steps of task segment allocation are the same as the aforementioned task segment allocation methods, and thus are not repeated here.</p><p id="p-0131" num="0130">The allocation of the task segments of the entire task is set in the allocation strategy in advance. In the embodiment, if the microprocessor finds that the number of the current sync is a multiple of 4, it configures the DMAC to allocate corresponding task segments to C<b>1</b> and C<b>2</b>, respectively, such as at the time t<b>0</b>, t<b>4</b>, t<b>8</b>, etc., in <figref idref="DRAWINGS">FIG. <b>7</b></figref>; the allocation of task segments to C<b>1</b> and C<b>2</b> is indicated by dashed arrows in the figure respectively. If the microprocessor finds that the number of the current Sync is an even number but not a multiple of 4, only C<b>2</b> is allocated a task segment, such as at the time t<b>2</b>, t<b>6</b>, etc., in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. As shown in the figure, the allocation of task segments to C<b>2</b> is indicated by dashed arrows.</p><p id="p-0132" num="0131">In the above example, in the first synchronization cycle, it is determined that the task segments need to be allocated to C<b>1</b> and C<b>2</b> according to the allocation strategy. It should be understood that in practical applications, it is also possible to allocate the task segment to only one processing core in the first synchronization cycle. For example, C<b>2</b> needs to wait for the execution result of the first task segment of C<b>1</b> as the input data of the first task segment of C<b>2</b>; and here, C<b>2</b> can perform other tasks or wait idle in the first synchronization cycle. More generally, when a processing core needs to wait for the output result of another processing core as its input, it can perform other tasks or wait idle before obtaining the output result of the other processing core, and this is related to the preset allocation strategy.</p><p id="p-0133" num="0132">The embodiments of the present disclosure provide an electronic device, including: a memory for storing computer-readable instructions; and one or more processors for executing the computer-readable instructions, which, upon execution, cause the processors to implement any one of the task allocation methods in the embodiments.</p><p id="p-0134" num="0133">The embodiments of the present disclosure provide a non-transitory computer-readable storage medium, the non-transitory computer-readable storage medium storing computer instructions for causing a computer to execute any one of the task allocation methods in the embodiments.</p><p id="p-0135" num="0134">The embodiments of the present disclosure further provide a computer program product, including computer instructions, wherein, when the computer instructions are executed by a computing device, the computing device executes any one of the task allocation methods in the embodiments.</p><p id="p-0136" num="0135">The embodiments of the present disclosure further provide a computing apparatus, including any one of the chips in the embodiments.</p><p id="p-0137" num="0136">The flowcharts and block diagrams in the accompanying drawings of the present disclosure show the possible architecture, functions, and operations of a system, the method, and a computer program product according to various embodiments of the present disclosure. In this regard, each block in the flowcharts or block diagrams may represent a module, a task segment or a part of codes, and the module, the task segment or the part of the codes contains one or more executable instructions for implementing the defined logical functions. It should also be noted that in some implementations as alternatives, the functions labeled in the blocks may occur in an order different from the order labeled in the accompanying drawings. For example, two sequentially shown blocks may be substantially executed in parallel in fact, and they sometimes may also be executed in a reverse order, depending on related functions. It should also be noted that each block in the block diagrams and/or the flowcharts and the combination of the blocks in the block diagrams and/or the flowcharts may be implemented by a dedicated system based on hardware for executing defined functions or operations, or may be implemented by a combination of the dedicated hardware and computer instructions.</p><p id="p-0138" num="0137">The units described in the embodiments of the present disclosure may be implemented in a software fashion or may be implemented in a hardware fashion. The names of the units do not constitute a limitation to the units in some cases.</p><p id="p-0139" num="0138">The functions described above herein may be performed, at least in part, by one or more hardware logic components. For example, non-restrictively, exemplary types of hardware logic components that can be used include: a field programmable gate array (FPGA), an application-specific integrated circuit (ASIC), an application-specific standard product (ASSP), a system on chip (SOC), a complex programmable logic device (CPLD), and the like.</p><p id="p-0140" num="0139">In the context of the present disclosure, a machine-readable medium may be a tangible medium that may contain or store a program for use by or in conjunction with an instruction execution system, apparatus or device. The machine-readable medium may be a machine-readable signal medium or a machine-readable storage medium. The machine-readable medium may include, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared or semiconductor system, apparatus or device, or any suitable combination of the foregoing. A more specific example of the machine-readable storage medium includes an electrical connection based on one or more wires, a portable computer disk, a hard disk, a random-access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (an EPROM or a flash memory), an optical fiber, a portable compact disk read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the above content.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A task allocation method for use in a chip, the chip comprising a processing core and a microprocessor, wherein the method comprises:<claim-text>in response to receiving a synchronization signal, determining, by the microprocessor, whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of a task;</claim-text><claim-text>in response to the allocation of the task segment to the processing core being required, instructing, by the microprocessor, to allocate the task segment to the processing core;</claim-text><claim-text>receiving, by the processing core, the task segment; and</claim-text><claim-text>in response to satisfying a first preset condition, sending, by the processing core, a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The task allocation method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, in response to receiving the synchronization signal, determining, by the microprocessor, whether the allocation of the task segment to the processing core is required according to the synchronization signal, comprises:<claim-text>executing, by the microprocessor, its own program; and</claim-text><claim-text>in response to receiving the synchronization signal, determining, by the microprocessor, the processing core that requires to be allocated the task segment according to the number of the synchronization signals received.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The task allocation method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first preset condition comprises: the processing core has received the task segment or executing time taken by the processing core to receive the task segment reaches a preset time threshold.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The task allocation method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, instructing, by the microprocessor, to allocate the task segment to the processing core, comprises:<claim-text>instructing, by the microprocessor, a memory controller to read the task segment from an external memory and send it to the processing core.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The task allocation method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein, instructing, by the microprocessor, the memory controller to read the task segment from the external memory and send it to the processing core, comprises:<claim-text>obtaining, by the microprocessor, size of storage space of the processing core; and</claim-text><claim-text>instructing, by the microprocessor, the memory controller to read the task segment that matches the size of the storage space of the processing core from the memory and send it to the processing core.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The task allocation method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>in response to the allocation of the task segment to the processing core not being required, executing, by the microprocessor, its own program;</claim-text><claim-text>executing, by the processing core, a last received task segment; and</claim-text><claim-text>in response to satisfying a second preset condition, sending, by the processing core, the synchronization request signal.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The task allocation method according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the second preset condition is that: the processing core executes a synchronization request signal sending instruction in the last received task segment, or time taken by the processing core to execute the last received task segment reaches a preset time threshold.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The task allocation method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the chip comprises at least two processing cores executing the task, and the microprocessor instructs to allocate task segments to the at least two processing cores, respectively.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The task allocation method according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the synchronization request signal comprises the synchronization request signals generated by the at least two processing cores executing the task.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The task allocation method according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the synchronization request signal being configured to trigger the generation of the synchronization signal, comprises:<claim-text>in response to each of the processing cores executing the task having sent the synchronization request signal, triggering the generation of the synchronization signal.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The task allocation method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the microprocessor comprises a counter, and after receiving the synchronization signal, the method further comprises:<claim-text>starting the counter to record the number of the synchronization signals received by the microprocessor.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A chip, comprising:<claim-text>a processing core, configured to execute a task;</claim-text><claim-text>a microprocessor, configured to, in response to receiving a synchronization signal, determine whether allocation of a task segment to the processing core is required according to the synchronization signal, wherein the task segment is a part of the task; and configured to, in response to the allocation of the task segment to the processing core being required, instruct to allocate the task segment to the processing core; and</claim-text><claim-text>a memory controller, configured to, based on an instruction from the microprocessor, read the task segment corresponding to the instruction from an external memory and send it to the processing core.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The chip according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the processing core is further configured to:<claim-text>receive the task segment; and in response to satisfying a first preset condition, send a synchronization request signal, wherein the synchronization request signal is configured to trigger the generation of the synchronization signal.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The chip according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the chip comprises at least two processing cores executing the task, and the microprocessor is configured to instruct to allocate task segments to the at least two processing cores, respectively.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. An electronic device, comprising: a memory for storing computer-readable instructions; and one or more processors for executing the computer-readable instructions, which, upon execution, cause the processors to implement the task allocation method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim></claims></us-patent-application>