<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004451A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004451</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17782519</doc-number><date>20201119</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>201911222482.4</doc-number><date>20191203</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>542</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e61">METHOD FOR GENERATING TOPOLOGY DIAGRAM, ANOMALY DETECTION METHOD, DEVICE, APPARATUS, AND STORAGE MEDIUM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>ZTE CORPORATION</orgname><address><city>Shenzhen</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>HAN</last-name><first-name>Jing</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>LIU</last-name><first-name>Jianwei</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>DONG</last-name><first-name>Xinyou</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>LIU</last-name><first-name>Zheng</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/CN2020/130033</doc-number><date>20201119</date></document-id><us-371c12-date><date>20220603</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Provided are a method and apparatus for generating a topological graph, an anomaly detection method and apparatus, a device and a storage medium. The method for generating a topological graph includes acquiring a preset event stream, where the preset event stream corresponds to a normal log execution path; determining a dependent event pair in the preset event stream; determining a range of a transfer interval corresponding to the dependent event pair, where a transfer interval represents the time difference between adjacent occurrences of two events in the dependent event pair; and generating an event topological graph according to the range of the transfer interval and the transfer probability corresponding to the dependent event pair, where the transfer probability represents the conditional probability between the two events in the dependent event pair.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="102.95mm" wi="145.97mm" file="US20230004451A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="115.57mm" wi="148.00mm" file="US20230004451A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="215.82mm" wi="148.08mm" file="US20230004451A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="73.24mm" wi="144.10mm" file="US20230004451A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="168.57mm" wi="153.50mm" file="US20230004451A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="211.75mm" wi="89.75mm" file="US20230004451A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="99.74mm" wi="118.70mm" file="US20230004451A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a National Stage Application filed under 35 U.S.C. 371 based on International Patent Application No. PCT/CN2020/130033, filed on Nov. 19, 2020, which claims priority to Chinese Patent Application No. 201911222482.4 filed on Dec. 3, 2019, the disclosures of both of which are incorporated herein by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present application relates to the field of computer technologies, for example, to a method and apparatus for generating a topological graph, an anomaly detection method, an apparatus, a device, and a storage medium.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">To satisfy the increasingly rich demands of users, modern software systems are becoming larger and more complex. When an anomaly occurs in a software system, it is crucial to detect the problem and find the cause. A system log records important system events and system status, helps system operation and maintenance personnel debug the system performance problems and anomalies and is a valuable resource to understand the system status. However, the system log is unstructured, so it is very difficult to locate a system anomalous event accurately and efficiently from the complex system log according to the experience of the operation and maintenance personnel. The related solutions in the related art can hardly perform the log anomaly detection accurately and thereby need improving.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">The present application provides a method and apparatus for generating a topological graph, an anomaly detection method and apparatus, a device and a storage medium.</p><p id="p-0006" num="0005">Embodiments of the present application provide a method for generating a topological graph. The method includes acquiring a preset event stream, where the preset event stream corresponds to a normal log execution path; determining a dependent event pair in the preset event stream; determining a range of a transfer interval corresponding to the dependent event pair, where a transfer interval in the range of the transfer interval represents a time difference between adjacent occurrences of two events in the dependent event pair; generating an event topological graph according to the range of the transfer interval and a transfer probability corresponding to the dependent event pair, where the transfer probability represents a conditional probability between the two events in the dependent event pair.</p><p id="p-0007" num="0006">Embodiments of the present application provide an anomaly detection method. The method includes acquiring a to-be-detected event stream, where the to-be-detected event stream corresponds to a to-be-detected log execution path; comparing the to-be-detected event stream with an event topological graph, where the event topological graph is generated by using the method for generating a topological graph according to the embodiments of the present application; and determining whether the to-be-detected event stream is anomalous according to a comparison result.</p><p id="p-0008" num="0007">Embodiments of the present application provide an apparatus for generating a topological graph. The apparatus includes a preset event stream acquisition module configured to acquire a preset event stream, where the preset event stream corresponds to a normal log execution path; a dependent event pair determination module configured to determine a dependent event pair in the preset event stream; a transfer interval range determination module configured to determine a range of a transfer interval corresponding to the dependent event pair, where a transfer interval in transfer interval range represents a time difference between the occurrence time of two events in the dependent event pair; and a topological graph generation module configured to generate an event topological graph according to the range of the transfer interval and a transfer probability corresponding to the dependent event pair, where the transfer probability represents a conditional probability between the two events in the dependent event pair.</p><p id="p-0009" num="0008">Embodiments of the present application provide an anomaly detection apparatus. The apparatus includes a to-be-detected event stream acquisition module configured to acquire a to-be-detected event stream, where the to-be-detected event stream corresponds to a to-be-detected log execution path; a comparison module configured to compare the to-be-detected event stream with an event topological graph, where the event topological graph is generated by using the method for generating a topological graph according to the embodiments of the present application; and an anomaly detection module configured to determine whether the to-be-detected event stream is anomalous according to a comparison result.</p><p id="p-0010" num="0009">Embodiments of the present application provide a computer device. The device includes a processor and a memory. The processor is configured to execute a program stored in the memory to perform any method of the embodiments of the present application.</p><p id="p-0011" num="0010">Embodiments of the present application provide a non-transitory storage medium storing a computer program which, when executed by a processor, causes the processor to perform any method of the embodiments of the present application.</p><p id="p-0012" num="0011">The preceding embodiments and other aspects of the present application and implementations thereof are described in more detail in the brief description of drawings, detailed description and claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flowchart of a method for generating a topological graph according to embodiments of the present application.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of another method for generating a topological graph according to embodiments of the present application.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of an anomaly detection method according to embodiments of the present application.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of another anomaly detection method according to embodiments of the present application.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram of an apparatus for generating a topological graph according to embodiments of the present application.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram of an anomaly detection apparatus according to embodiments of the present application.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of a computer device according to embodiments of the present application.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0020" num="0019">Embodiments of the present application are described below in conjunction with drawings.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flowchart of a method for generating a topological graph according to embodiments of the present application. The method is executable by an apparatus for generating a topological graph. The apparatus may be implemented by software and/or hardware and may be generally integrated on a computer device. As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the method includes the steps below.</p><p id="p-0022" num="0021">In S<b>101</b>, a preset event stream is acquired, where the preset event stream corresponds to a normal log execution path.</p><p id="p-0023" num="0022">A system log is unstructured. Different systems often have different log structures, and a software system may execute multiple tasks in parallel, thereby resulting in the output system logs often intertwined. In the process of log operation and maintenance, a system operator can hardly set parameters of this field accurately due to an incomprehensive understanding of the professional knowledge in this field. Second, the system log data is complex and huge, so it is often difficult to achieve a satisfactory accuracy. In the related art, there is a workflow-based solution, but there is a lack of a solution that can accurately mine the workflow graph representing the normal execution process of the system from a large amount of complex log information.</p><p id="p-0024" num="0023">In this embodiment of the present application, the preset event stream (also known as the preset transaction stream) corresponding to the normal log execution path is acquired first, then analysis and mining are performed based on the preset event stream, and an event topological graph for log anomaly analysis is generated finally and can represent the normal execution process of the system accurately.</p><p id="p-0025" num="0024">Exemplarily, a preset log stream (equal to an original log stream) corresponding to the normal log execution path may be acquired first and is then converted to a corresponding preset event stream according to a log template. A system log may be classified into two parts: a fixed part and a variable part. The fixed part is the fixed part of the original log entry and does not change with the change of the system status while the variable part changes with the change of the system status. The log template is abstracted from an original log. For example, the variable part may be replaced by a placeholder *, and each log template may correspond to one log output sentence as much as possible. That is, each log template corresponds to one event or one event type. More than two logs in the preset log stream may correspond to the same log template. That is, the same event may occur more than twice in the preset log stream. For ease of description, an event mentioned in this embodiment of the present application may be regarded as one event type, for example, event A. Each occurrence of event A in the preset event stream may be regarded as one embodiment of event A.</p><p id="p-0026" num="0025">The log template may be preconfigured, or a log in the unstructured preset log stream may be parsed into a structured log template by use of log parsing.</p><p id="p-0027" num="0026">In S<b>102</b>, a dependent event pair in the preset event stream is determined.</p><p id="p-0028" num="0027">In this step, the dependent event pair in the preset event stream is mined. An event pair is the basic unit constituting an event stream graph. For one event pair, the dependency relationship between two events is characterized by the time relationship between the two events. For example, an event pair (A, B) represents that event B always occurs after event A. The dependent event pair may be regarded as an event pair satisfying the set dependency relationship. In the dependent event pair, an event occurring ahead may be called a precursor event while an event occurring behind may be called a subsequent event.</p><p id="p-0029" num="0028">Optionally, the dependent event pair in the preset event stream may be determined according to the conditional probability of two events.</p><p id="p-0030" num="0029">Optionally, the determined dependent event pair may be added to a dependent event pair set.</p><p id="p-0031" num="0030">In S<b>103</b>, the range of the transfer interval corresponding to the dependent event pair is determined, where a transfer interval in the range of the transfer interval represents the time difference between adjacent occurrences of two events in the dependent event pair.</p><p id="p-0032" num="0031">Exemplarily, the transfer interval, that is, the interval of transfer time, may reflect the volatility of the transfer time of a system event effectively, and the time difference between occurrences of all instances corresponding to each dependent event pair in the preset event stream may be analyzed to determine the range of the transfer interval that may represent the normal range of the time difference between adjacent occurrences of two events in the dependent event pair and is determined in unlimited manners.</p><p id="p-0033" num="0032">In S<b>104</b>, an event topological graph is generated according to the range of the transfer interval and the transfer probability corresponding to the dependent event pair, where the transfer probability represents the conditional probability between the two events in the dependent event pair.</p><p id="p-0034" num="0033">Exemplarily, the event topological graph (ETG) having a set structure may be generated according to two dimensions: the transfer probability corresponding to the dependent event pair and the range of the transfer interval corresponding to the dependent event pair, where the set structure may be a tree structure.</p><p id="p-0035" num="0034">In one embodiment, the event topological graph includes multiple nodes, a node represents an event in the dependent event pair, and the connection between two nodes includes the transfer probability and the range of the transfer interval corresponding to the dependent event pair represented by the two nodes. That is, in the event topological graph, a node may be an event in a dependent event pair, and the transfer probability and the range of the transfer interval corresponding to the dependent event pair represented by the two nodes may be marked on the connection line between the two nodes.</p><p id="p-0036" num="0035">In this manner, the generated event topological graph includes the standard information of the normal log event stream in the two dimensions: the conditional probability of event occurrence and the time interval of occurrence and can be detected in these two dimensions to improve the detection accuracy when being used for log anomaly detection.</p><p id="p-0037" num="0036">In the method for generating a topological graph provided by this embodiment of the present application, the preset event stream corresponding to the normal log execution path is acquired, the dependent event pair in the preset event stream is determined, the range of the transfer interval corresponding to the dependent event pair is determined, and the event topological graph is generated according to the range of the transfer interval and the transfer probability corresponding to the dependent event pair, where the transfer probability represents the conditional probability between two events. With the preceding technical solution adopted, the generated event topological graph includes the standard information of the normal log event stream in the two dimensions: the conditional probability of event occurrence and the time interval of occurrence and can be detected in these two dimensions to improve the detection accuracy when being used for log anomaly detection.</p><p id="p-0038" num="0037">In one exemplary embodiment, that the event topological graph is generated according to the range of the transfer interval and the transfer probability corresponding to the dependent event pair includes that the maximum spanning tree is generated by using events included in the dependent event pair as nodes and by using the transfer probability corresponding to the dependent event pair as the edge weight between the nodes, and the range of the transfer interval corresponding to the dependent event pair is added to the edge in the maximum spanning tree to obtain the event topological graph. The advantage of this configuration is that an efficient and reasonable event topological graph can be generated so that the accuracy of log anomaly detection can be improved. Exemplarily, in graph theory, the spanning tree of one graph is a subgraph including all nodes and is generally represented as a tree, and the maximum spanning tree is a spanning tree having a weight value graph having the maximum weight value. In this embodiment of the present application, the maximum transfer probability between paths may be used as the target function to generate the maximum spanning tree, and the corresponding transfer interval range is added to the edge of the maximum spanning tree. That is, for the edge between two nodes, the range of the transfer interval corresponding to a dependent event pair corresponding to the two nodes is marked on the edge.</p><p id="p-0039" num="0038">In one exemplary embodiment, that the preset event stream is acquired includes that a preset log stream is acquired, where the preset log stream corresponds to the normal log execution path; logs in the preset log stream are parsed by using a preset log parsing algorithm to obtain multiple log templates, where each log template corresponds to one event; and the preset log stream is converted into the preset event stream corresponding to the preset log stream according to the multiple log templates. The advantage of this configuration is that the multiple log templates are generated based on the preset log stream so that the multiple log templates can match the logs in the preset log stream better, thereby obtaining the corresponding event stream more accurately. The preset log parsing algorithm may be, for example, Basic Signature Generation (BSG), Log Key Extraction (LKE) and Iterative Partitioning Log Mining (IPLoM).</p><p id="p-0040" num="0039">Exemplarily, the preset log stream may be represented as &#x3c;l<sub>1</sub>, l<sub>2</sub>, . . . l<sub>n</sub>&#x3e; and is assumed as shown in Table 1.</p><p id="p-0041" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Preset log stream</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><tbody valign="top"><row><entry>2018-12-11 20:14:02.825 INFO nan cloudframe.pdman.cmd.worker</entry></row><row><entry>Configuration:</entry></row><row><entry>2018-12-11 20:14:02.829 WARNING nan oslo_config.cfg Option</entry></row><row><entry>&#x201c;&#x201c;rabbit_hosts&#x201d;&#x201d; from group &#x201c;&#x201c;oslo_messaging_rabbit&#x201d;&#x201d; is deprecated</entry></row><row><entry>for removal. Its value may be silently ignored in the future.</entry></row><row><entry>2018-12-11 20:14:02.829 WARNING nan oslo_config.cfg Option</entry></row><row><entry>&#x201c;&#x201c;rabbit_max_retries&#x201d;&#x201d; from group &#x201c;&#x201c;oslo_messaging_rabbit&#x201d;&#x201d; is</entry></row><row><entry>deprecated for removal. Its value may be silently ignored in the future.</entry></row><row><entry>2018-12-11 20:14:03.067 INFO nan sqlalchemy.orm.mapper.Mapper</entry></row><row><entry>(Server|servers)_configure_property(node_list,</entry></row><row><entry>RelationshipProperty)req-f3eaa3dd-321d-44db-b705-937a1c26a01b.</entry></row><row><entry>2018-12-11 20:14:03.068 INFO nan sqlalchemy.orm.mapper.Mapper</entry></row><row><entry>(Server|servers)_configure_property(created_at,</entry></row><row><entry>Column)req-f3eaa3dd-321d-44db-b705-937a1c26a01b</entry></row><row><entry>2018-12-11 20:14:03.069 INFO nan sqlalchemy.orm.mapper.Mapper</entry></row><row><entry>(Server|servers)_configure_property(updated_at,</entry></row><row><entry>Column)req-f3eaa3dd-321d-44db-b705-937a1c26a01b</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0042" num="0040">A corresponding log template &#x3c;e<sub>1</sub>, e<sub>2</sub>, . . . e<sub>m</sub>&#x3e;, m&#x3c;n may be obtained by using a preset log parsing algorithm to parse the preset log stream. Each log template represents one event type. For example, the log template obtained by performing log parsing on the preset log stream of Table 1 is shown in Table 2.</p><p id="p-0043" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="161pt" align="left"/><colspec colname="2" colwidth="56pt" align="center"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>template</entry><entry>Event_id</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>Configuration:</entry><entry>1</entry></row><row><entry>Option * from group &#x201c;oslo_messaging_rabbit&#x201d;</entry><entry>2</entry></row><row><entry>is deprecated for removal.</entry></row><row><entry>Its value may be silently ignored in the future.</entry></row><row><entry>(Server|servers) * RelationshipProperty) &#x3c;req-param&#x3e;</entry><entry>3</entry></row><row><entry>(Server|servers) * Column) &#x3c;req-param&#x3e;</entry><entry>4</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0044" num="0041">Template represents the log template. Eevent_id represents the corresponding event type.</p><p id="p-0045" num="0042">The preset log stream is converted into the preset event stream according to the log template. As shown in the preceding example, a transaction stream corresponding to the preset log stream l<sub>1</sub>, l<sub>2</sub>, l<sub>3</sub>, l<sub>4</sub>, l<sub>5</sub>, l<sub>6 </sub>is e<sub>1</sub>, e<sub>2</sub>, e<sub>2</sub>, e<sub>3</sub>, e<sub>4</sub>, e<sub>4</sub>.</p><p id="p-0046" num="0043">In one exemplary embodiment, that the dependent event pair in the preset event stream is determined includes that for each event occurring in the preset event stream, a candidate subsequent event set corresponding to the current event is determined; whether the first preset dependency relationship is satisfied between the current event and each candidate subsequent event in the candidate subsequent event set corresponding to the current event is determined; and a candidate subsequent event satisfying the first preset dependency relationship is determined as a subsequent event and is added to a subsequent event set, where the current event and one subsequent event form one dependent event pair. The advantage of this configuration is that for the each event, the each event can serve as a precursor event, the corresponding candidate subsequent event set is determined initially, and then whether an event in the candidate subsequent event set can become a corresponding subsequent event is determined so that the determination efficiency of a dependent event pair can be improved.</p><p id="p-0047" num="0044">In one exemplary embodiment, that the candidate subsequent event set corresponding to the current event is determined includes that a first event existing between every two adjacent occurrences of the current event in the preset event stream is added to an initial candidate subsequent event set; the conditional probability between the current event and each first event is calculated; and a second event is removed from the initial candidate subsequent event set to obtain the candidate subsequent event set corresponding to the current event, where the conditional probability between the current event and the second event is less than a preset conditional probability threshold. The conditional probability may be also called the correlation probability, and the preset conditional probability threshold may be disposed according to practical situations. The advantage of this configuration is that the conditional probability can be used for filtering out the noise events, removing the indirect subsequent events of a precursor event as much as possible and retaining the direct subsequent events of the precursor event so that the determination accuracy of a dependent event pair can be improved.</p><p id="p-0048" num="0045">Optionally, the conditional probability between the current event and the each first event may be calculated by using the following formula:</p><p id="p-0049" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>SUP</i><sub>(A|B)</sub><i>=N</i><sub>(A|B)</sub>/min(<i>p</i><sub>A</sub><i>,p</i><sub>B</sub>)*sigmoid(min(<i>p</i><sub>A</sub><i>,p</i><sub>B</sub>)).<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0050" num="0046">A denotes the current event, that is, the precursor event; B denotes the first event in the initial candidate subsequent event set corresponding to A; p<sub>A </sub>denotes the occurrence probability of event A; p<sub>B </sub>denotes the occurrence probability of event B; and N<sub>(A|B) </sub>denotes the number of occurrences of event B in the initial candidate subsequent event set corresponding to event A, that is, the number of occurrences of the first event between every two adjacent occurrences of the current event.</p><p id="p-0051" num="0047">In one exemplary embodiment, that whether the first preset dependency relationship is satisfied between the current event and the each candidate subsequent event in the candidate subsequent event set corresponding to the current event is determined includes that for the each candidate subsequent event in the candidate subsequent event set corresponding to the current event, the unconditional distribution of the waiting time of the current candidate subsequent event is calculated; the conditional distribution of the waiting time of the current candidate subsequent event relative to the current event is calculated; and whether the first preset dependency relationship is satisfied between the current event and the current candidate subsequent event is determined according to the unconditional distribution and the conditional distribution, where the waiting time represents the time difference between the occurrence time of the current event and the occurrence time of the current candidate subsequent event. The advantage of this configuration is that a dependent event pair can be determined more accurately.</p><p id="p-0052" num="0048">Exemplarily, a time sequence corresponding to an event is extracted. The time sequence of occurrence of event A is represented as: S<sub>A</sub>=&#x3c;a<sub>1</sub>, a<sub>2</sub>, . . . , a<sub>m</sub>&#x3e;, where a<sub>i</sub>, 1&#x2264;i&#x2264;m denotes the timestamp of the log entry of the event type A. Assuming that the range of S<sub>A </sub>is between [0, T], given a time point z, the minimum positive distance between z and S<sub>A</sub>, that is, the waiting time, is d(z, S<sub>A</sub>)=min&#x2225;x&#x2212;z&#x2225;, x&#x2208;S<sub>A</sub>, x&#x2265;z. The unconditional distribution of the waiting time of event B is F<sub>B</sub>(r)=P(d(z, S<sub>B</sub>))&#x2264;r, where r denotes a threshold parameter of the time interval, and z here corresponds to any event. The conditional distribution of the waiting time of event B relative to event A is: F<sub>B|A</sub>(r)=P(d(z, S<sub>B</sub>))&#x2264;r, z&#x2208;S<sub>A</sub>, where x denotes any point in the sequence S<sub>A</sub>, z here corresponds to any point in S<sub>A</sub>, and F<sub>B|A </sub>describes the conditional probability of event A in any time point x.</p><p id="p-0053" num="0049">In one exemplary embodiment, that whether the first preset dependency relationship is satisfied between the current event and the current candidate subsequent event is determined according to the unconditional distribution and the conditional distribution includes that the first preset dependency relationship is determined to be satisfied between the current event and the current candidate subsequent event in response to the unconditional distribution and the conditional distribution conforming to the normal distribution. The advantage of this configuration is that whether two events are a dependent event pair can be determined quickly and accurately. Optionally, whether the first preset dependency relationship is satisfied between the current event and the current candidate subsequent event may be also measured according to other distribution other than the normal distribution.</p><p id="p-0054" num="0050">Exemplarily, for the event pair (A, B), whether the dependency relationship exists between event A and event B may be determined by comparing F<sub>B</sub>(r) with F<sub>B|A</sub>(r). If F<sub>B</sub>(r) is noticeably different from F<sub>B|A</sub>(r), event B is determined to be dependent on event A. Whether the dependency relationship exists between event A and event B may be determined by calculating whether M<sub>B </sub>and M<sub>B|A </sub>conform to the normal distribution. M<sub>B </sub>and M<sub>B|A </sub>represent the initial value of F<sub>B</sub>(r) and the initial value of F<sub>B|A</sub>(r) respectively, that is, the first moment. The normal distribution here may be construed as determining whether the dependency relationship exists between events by the point sequence of adjacent events.</p><p id="p-0055" num="0051">In one exemplary embodiment, that the range of the transfer interval corresponding to the dependent event pair is determined includes that for each dependent event pair, the time difference sequence corresponding to the current dependent event pair in the preset event stream is acquired and clustered, and the range of the transfer interval corresponding to the current dependent event pair is determined according to the time distribution in the cluster obtained by the clustering, where the time difference sequence includes the time difference between adjacent occurrences of two events in the current dependent event pair. The advantage of this configuration is that redundant events can be removed quickly and efficiently by clustering so that the determination accuracy of a range of a transfer interval can be improved. Two events C and D in a dependent event pair generally occur in the preset event stream for many times. When C and D first occur adjacently, the first time difference between the two is calculated and becomes the first element in the time difference sequence; when C and D second occur adjacently, the second time difference between the two is calculated and becomes the second element in the time difference sequence. In this manner, the time difference sequence corresponding to the dependent event pair is obtained.</p><p id="p-0056" num="0052">In one exemplary embodiment, that the range of the transfer interval corresponding to the current dependent event pair is determined according to the time distribution in the cluster obtained by the clustering includes that the range of the transfer interval corresponding to the current dependent event pair is determined according to the maximum value and the minimum value in the cluster; or the range of the transfer interval corresponding to the current dependent event pair is determined according to a confidence interval of the time distribution in the cluster. The advantage of this configuration is that the range of the transfer interval corresponding to each dependent event pair can be determined quickly.</p><p id="p-0057" num="0053">Exemplarily, a transfer interval sequence between dependent event pairs is acquired. For example, for each mined dependent event pair &#x3c;T<sub>i</sub>, T<sub>j</sub>&#x3e;, all adjacent T<sub>i </sub>and T<sub>j </sub>in the preset event stream are found, and the time difference between all the adjacent T<sub>i </sub>and T<sub>j </sub>is recorded as the sequence &#x3c;t<sub>1</sub>, t<sub>2</sub>, . . . , t<sub>m</sub>&#x3e;. Clustering algorithms are used for the time difference sequence, and redundant events can be removed by clustering. The clustering algorithms that can be used include AGglomerative NESting (AGNES), Divisive ANAlysis Clustering (DIANA) and density-based spatial clustering of applications with noise (DBSCAN). The maximum value and the minimum values of each cluster are taken as the time interval range of an event pair belonging to the each cluster.</p><p id="p-0058" num="0054">In one exemplary embodiment, that the range of the transfer interval corresponding to the current dependent event pair is determined according to the time distribution in the cluster obtained by the clustering includes that the current dependent event pair is tested by using a preset statistical test method, and the range of the transfer interval corresponding to the current dependent event pair is determined according to the time distribution in the cluster in response to passing the test. The advantage of this configuration is that the dependency relationship of a dependent event pair can be verified in time. The preset statistical test method may include a chi-squared test, a Z-test and a t-test. Exemplarily, the chi-squared test is used for testing each cluster. If the each cluster passes the chi-squared test, the dependency relationship is proven to exist between event pairs, and the time interval calculated in the preceding step is used as the range of the transfer interval of an event pair.</p><p id="p-0059" num="0055">In one exemplary embodiment, after the maximum spanning tree is generated, the method further includes that for two nodes in any dependent event pair in the maximum spanning tree, the detour probability that a detour path that exists between the two current nodes is calculated, and the edge between the two current nodes is completed in response to the detour probability being greater than a preset detour probability threshold. The advantage of this configuration is that the generated maximum spanning tree can be perfected so that the accuracy of an event topological graph can be improved.</p><p id="p-0060" num="0056">Exemplarily, the path length between nodes of a spanning tree is calculated. Two any points (the starting point and the ending point) of the spanning tree are denoted as E<sub>1 </sub>and E<sub>2</sub>. The distance between E<sub>1 </sub>and E<sub>2 </sub>is denoted as path(E<sub>1</sub>, E<sub>2</sub>). The probability that a detour path that exists between E<sub>1 </sub>and E<sub>2 </sub>is: d(E<sub>1</sub>, E<sub>2</sub>)=log(1+path(E<sub>1</sub>, E<sub>2</sub>)). Whether the path from E<sub>1 </sub>to E<sub>2 </sub>is completed is determined by an appropriate preset detour probability threshold configured by a log sequence.</p><p id="p-0061" num="0057">In one exemplary embodiment, that the edge between the two current nodes is completed includes that the edge is completed by using a sum of weights of all edges passed by a target detour path between the two current nodes as the edge weight between the two current nodes, where the target detour path satisfies that the sum of the weights of the all edges passed by the target detour path is larger than the sum of weights of all edges passed by any other detour path between the two current nodes. The advantage of this configuration is that the missing path between nodes having the dependency relationship but no edge in the spanning tree can be completed quickly and accurately.</p><p id="p-0062" num="0058"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of another method for generating a topological graph according to embodiments of the present application. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the method includes the steps below.</p><p id="p-0063" num="0059">In S<b>201</b>, a preset log stream is acquired and converted into the corresponding preset event stream.</p><p id="p-0064" num="0060">In S<b>202</b>, for each event occurring in the preset event stream, a candidate subsequent event set corresponding to the current event is determined, whether the first preset dependency relationship is satisfied between the current event and each candidate subsequent event in the candidate subsequent event set corresponding to the current event is determined, and a dependent event pair is determined according to a determination result.</p><p id="p-0065" num="0061">If the first preset dependency relationship is satisfied between the current event and one candidate subsequent event, the current event and the one candidate subsequent event are determined to be a dependent event pair.</p><p id="p-0066" num="0062">Optionally, a first event existing between every two adjacent occurrences of the current event in the preset event stream is added to an initial candidate subsequent event set, the conditional probability between the current event and each first event is calculated, and a second event whose conditional probability is less than a preset conditional probability threshold is removed from the initial candidate subsequent set to obtain the candidate subsequent event set corresponding to the current event.</p><p id="p-0067" num="0063">Optionally, for the each candidate subsequent event in the candidate subsequent event set corresponding to the current event, the unconditional distribution of the waiting time of the current candidate subsequent event is calculated, the conditional distribution of the waiting time of the current candidate subsequent event relative to the current event is calculated, and the first preset dependency relationship is determined to be satisfied between the current event and the current candidate subsequent event in response to the unconditional distribution and the conditional distribution conforming to the normal distribution. That is, the current event and the current candidate subsequent event are one dependent event pair.</p><p id="p-0068" num="0064">In S<b>203</b>, for each dependent event pair, the time difference sequence corresponding to the current dependent event pair in the preset event stream is acquired and clustered, and the range of the transfer interval corresponding to the current dependent event pair is determined according to the maximum value and the minimum value in the cluster obtained by the clustering.</p><p id="p-0069" num="0065">After the time difference sequence is clustered, the step may further include that a chi-squared test is used for testing the cluster corresponding to the current dependent event pair, and the range of the transfer interval corresponding to the current dependent event pair is determined according to the maximum value and the minimum value in the cluster corresponding to the current dependent event pair in response to passing the test. Optionally, in response to not passing the test, the current dependent event does not have a dependency relationship in time and thereby is deleted from the dependent event pair set.</p><p id="p-0070" num="0066">In S<b>204</b>, the maximum spanning tree is generated by using events included in the dependent event pair as nodes and by using the transfer probability corresponding to the dependent event pair as the edge weight between the nodes.</p><p id="p-0071" num="0067">Exemplarily, a node in a tree represents an event, the edge weight represents the transfer probability between a precursor event and a subsequent event that are connected, and a spanning tree serves as the skeleton of the entire workflow. The available algorithms for generating a spanning tree include Prim's algorithm and Kruskal's algorithm. Modifications may be made to these algorithms. For example, the maximum transfer probability between paths is used as a target function to generate the maximum spanning tree.</p><p id="p-0072" num="0068">In S<b>205</b>, for two nodes in any dependent event pair in the maximum spanning tree, the detour probability that a detour path that exists between the two current nodes is calculated, and the edge between the two current nodes is completed by using a sum of weights of all edges passed by a target detour path between the two current nodes as the edge weight between the two current nodes in response to the detour probability being greater than a preset detour probability threshold.</p><p id="p-0073" num="0069">In S<b>206</b>, a corresponding transfer interval range is added to the edge of the maximum spanning tree having undergone edge completion to obtain an event topological graph for log anomaly detection.</p><p id="p-0074" num="0070">In the method for generating a topological graph according to this embodiment of the present application, the preset log stream corresponding to the normal log execution path is acquired and converted to the preset event stream, the dependent event pair in the preset event stream is mined, the range of the transfer interval corresponding to the dependent event pair is determined by clustering, the maximum spanning tree is generated by using the events included in the dependent event pair as the nodes and by using the transfer probability corresponding to the dependent event pair as the edge weight between the nodes, and after the missing path is completed, the corresponding transfer interval range is added to the edge of the maximum spanning tree to obtain the event topological graph for log anomaly detection. With the preceding technical solution adopted, the generated tree-shaped event topological graph includes the standard information of the normal log event stream in the two dimensions: the conditional probability of event occurrence and the time interval of occurrence and can improve the detection accuracy and the detection efficiency when being used for log anomaly detection.</p><p id="p-0075" num="0071"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of an anomaly detection method according to embodiments of the present application. The method is executable by an anomaly detection apparatus. The apparatus may be implemented by software and/or hardware and may be generally integrated on a computer device. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the method includes the steps below.</p><p id="p-0076" num="0072">In S<b>301</b>, a to-be-detected event stream is required, where the to-be-detected event stream corresponds to a to-be-detected log execution path.</p><p id="p-0077" num="0073">Exemplarily, the to-be-detected event stream may be converted from a log stream newly generated by the system or from a historically generated log stream that needs anomaly detection. The multiple log templates for generating an event topological graph may be used for converting the to-be-detected log stream into a corresponding to-be-detected event stream.</p><p id="p-0078" num="0074">In S<b>302</b>, the to-be-detected event stream is compared with an event topological graph.</p><p id="p-0079" num="0075">The event topological graph is generated by using the method for generating a topological graph according to the embodiments of the present application. The generation process of the event topological graph may be regarded as the offline stage of anomaly detection. After a high-quality event topological graph is generated, the event topological graph may be used for representing the normal execution path of the system. In the online stage, the to-be-detected event stream is compared with the event topological graph to analyze an anomaly.</p><p id="p-0080" num="0076">In S<b>303</b>, whether the to-be-detected event stream is anomalous is determined according to a comparison result.</p><p id="p-0081" num="0077">Exemplarily, the difference between the to-be-detected event stream and the event topological graph is compared so that whether there is a difference between the current to-be-detected log execution path and the normal log execution path can be found, thereby determining whether there is an anomaly.</p><p id="p-0082" num="0078">In the anomaly detection method according to this embodiment of the present application, the to-be-detected event stream corresponding to the to-be-detected log execution path is compared with the event topological graph generated by using the method for generating a topological graph according to the embodiments of the present application so that whether the to-be-detected event stream is anomalous can be detected quickly and accurately according to the comparison result, thereby improving the accuracy and the efficiency of log anomaly detection.</p><p id="p-0083" num="0079">In one exemplary embodiment, the event topological graph includes multiple nodes, a node represents an event in the dependent event pair, and the connection between two nodes includes the transfer probability and the range of the transfer interval corresponding to the dependent event pair represented by the two nodes. That the to-be-detected event stream is compared with the event topological graph, and whether the to-be-detected event stream is anomalous is determined according to the comparison result includes that for the current event in the to-be-detected event stream, a corresponding target event is searched in the event topological graph; and the to-be-detected event stream is determined to be anomalous in response to the next event of the current event not corresponding to a subnode of the target event. The target event may be construed as an event that is of the same type as the current event and exists in the event topological graph. If the type of the next event of the current event is the same as the type of an event in any subnode of the target event, the next event of the current event is regarded as corresponding to the subnode of the target event. The subnode of a node may be construed as a node connected to and located behind the node. Using a tree structure as an example, the subnode of a node is the branch node of the node. The advantage of this configuration is that whether there is an anomaly in the to-be-detected event stream at the event occurrence sequence level may be verified based on the conditional probability of two consecutive events so that anomaly detection can be performed quickly and accurately.</p><p id="p-0084" num="0080">In one exemplary embodiment, the method further includes that the first time interval between the current event and the next event is acquired in response to the next event of the current event corresponding to the first subnode of the target event; the range of the transfer interval corresponding the target event and the first subnode is acquired; and the to-be-detected event stream is determined to be anomalous in response to the first time interval being not within the range of the transfer interval. The advantage of this configuration is that after the verification based on the conditional probability of two consecutive events is passed, whether the time interval of the occurrences of two events is within a reasonable range can be detected so that the accuracy of anomaly detection can be improved.</p><p id="p-0085" num="0081"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of an anomaly detection method according to embodiments of the present application. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, in the online stage of log detection, a transaction stream e1, e2, . . . , en is read. That is, a to-be-detected event stream is acquired. For the current event ei, whether ei exists in an event topological graph is determined. If ei is not in the event topological graph, as the new current event, the next event in the transaction stream is redetermined. If ei is in the event topological graph, whether the next event ei+1 of ei is in a subnode of ei in the event topological graph is determined. If ei+1 is not in the subnode of ei in the event topology, the output execution path is anomalous. If ei+1 is in the subnode of ei in the event topological graph, whether the interval between ei and ei+1 is within the designated time interval is determined. That is, whether the interval between ei and ei+1 is within the corresponding transfer interval range is determined. When the interval between ei and ei+1 is not within the designated time interval, the output execution path is anomalous. When the interval between ei and ei+1 is within the designated time interval, whether other events exist in the transaction stream is determined. If other events exist, ei+1 as the new ei is redetermined. If other events do not exist, the process is ended.</p><p id="p-0086" num="0082"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram of an apparatus for generating a topological graph according to embodiments of the present application. The apparatus may be implemented by software and/or hardware and may be generally integrated on a computer device. The event topological graph may be generated by performing the method for generating a topological graph. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the apparatus includes a preset event stream acquisition module <b>501</b> configured to acquire a preset event stream, where the preset event stream corresponds to a normal log execution path; a dependent event pair determination module <b>502</b> configured to determine a dependent event pair in the preset event stream; a transfer interval range determination module <b>503</b> configured to determine the range of the transfer interval corresponding to the dependent event pair, where a transfer interval in transfer interval range represents the time difference between the occurrence time of two events in the dependent event pair; and a topological graph generation module <b>504</b> configured to generate an event topological graph according to the range of the transfer interval and the transfer probability corresponding to the dependent event pair, where the transfer probability represents the conditional probability between two events in the dependent event pair.</p><p id="p-0087" num="0083">In the apparatus for generating a topological graph provided by this embodiment of the present application, the preset event stream corresponding to the normal log execution path is acquired, the dependent pair in the preset event stream is determined, the range of the transfer interval corresponding to the dependent event pair is determined, and the event topological graph is generated according to the range of the transfer interval and the transfer probability corresponding to the dependent event pair, where the transfer probability represents the conditional probability between two events. With the preceding technical solution adopted, the generated event topological graph includes the standard information of the normal log event stream in the two dimensions: the conditional probability of event occurrence and the time interval of occurrence and can be detected in these two dimensions to improve the detection accuracy when being used for log anomaly detection.</p><p id="p-0088" num="0084">In one exemplary embodiment, the event topological graph includes multiple nodes, a node represents an event in the dependent event pair, and the connection between two nodes includes the transfer probability and the range of the transfer interval corresponding to the dependent event pair represented by the two nodes.</p><p id="p-0089" num="0085">In one exemplary embodiment, that the event topological graph is generated according to the range of the transfer interval and the transfer probability corresponding to the dependent event pair includes that the maximum spanning tree is generated by using events included in the dependent event pair as nodes and by using the transfer probability corresponding to the dependent event pair as the edge weight between the nodes, and the range of the transfer interval corresponding to the dependent event pair is added to the edge in the maximum spanning tree to obtain the event topological graph.</p><p id="p-0090" num="0086">In one exemplary embodiment, that the preset event stream is acquired includes that a preset log stream is acquired, where the preset log stream corresponds to the normal log execution path; logs in the preset log stream are parsed by using a preset log parsing algorithm to obtain multiple log templates, where each log template corresponds to one event; and the preset log stream is converted to the preset event stream corresponding to the preset log stream according to the multiple log templates.</p><p id="p-0091" num="0087">In one exemplary embodiment, that the dependent event pair in the preset event stream is determined includes that for each event occurring in the preset event stream, a candidate subsequent event set corresponding to the current event is determined; whether the first preset dependency relationship is satisfied between the current event and each candidate subsequent event in the candidate subsequent event set corresponding to the current event is determined; and a candidate subsequent event satisfying the first preset dependency relationship is determined as a subsequent event and is added to a subsequent event set, where the current event and one subsequent event form one dependent event pair.</p><p id="p-0092" num="0088">In one exemplary embodiment, that the candidate subsequent event set corresponding to the current event is determined includes that a first event existing between every two adjacent occurrences of the current event in the preset event stream is added to an initial candidate subsequent event set; the conditional probability between the current event and each first event is calculated; and a second event is removed from the initial candidate subsequent event set to obtain the candidate subsequent event set corresponding to the current event, where the conditional probability between the current event and the second event is less than a preset conditional probability threshold.</p><p id="p-0093" num="0089">In one exemplary embodiment, that whether the first preset dependency relationship is satisfied between the current event and the each candidate subsequent event in the candidate subsequent event set corresponding to the current event is determined includes that for the each candidate subsequent event in the candidate subsequent event set corresponding to the current event, the unconditional distribution of the waiting time of the current candidate subsequent event is calculated; the conditional distribution of the waiting time of the current candidate subsequent event relative to the current event is calculated; and whether the first preset dependency relationship is satisfied between the current event and the current candidate subsequent event is determined according to the unconditional distribution and the conditional distribution, where the waiting time represents the time difference between the occurrence time of the current event and the occurrence time of the current candidate subsequent event.</p><p id="p-0094" num="0090">In one exemplary embodiment, that whether the first preset dependency relationship is satisfied between the current event and the current candidate subsequent event is determined according to the unconditional distribution and the conditional distribution includes that the first preset dependency relationship is determined to be satisfied between the current event and the current candidate subsequent event in response to the unconditional distribution and the conditional distribution conforming to the normal distribution.</p><p id="p-0095" num="0091">In one exemplary embodiment, that the range of the transfer interval corresponding to the dependent event pair is determined includes that for each dependent event pair, the time difference sequence corresponding to the current dependent event pair in the preset event stream is acquired and clustered, and the range of the transfer interval corresponding to the current dependent event pair is determined according to the time distribution in the cluster obtained by the clustering, where the time difference sequence includes the time difference between adjacent occurrences of the two events in the current dependent event pair.</p><p id="p-0096" num="0092">In one exemplary embodiment, that the range of the transfer interval corresponding to the current dependent event pair is determined according to the time distribution in the cluster obtained by the clustering includes that the range of the transfer interval corresponding to the current dependent event pair is determined according to the maximum value and the minimum value in the cluster; or the range of the transfer interval corresponding to the current dependent event pair is determined according to a confidence interval of the time distribution in the cluster.</p><p id="p-0097" num="0093">In one exemplary embodiment, that the range of the transfer interval corresponding to the current dependent event pair is determined according to the time distribution in the cluster obtained by the clustering includes that the current dependent event pair is tested by using a preset statistical test method, and the range of the transfer interval corresponding to the current dependent event pair is determined according to the time distribution in the cluster in response to passing the test.</p><p id="p-0098" num="0094">In one exemplary embodiment, the apparatus further includes an edge completion module configured to, after the maximum spanning tree is generated, for two nodes in any dependent event pair in the maximum spanning tree, calculate the detour probability that a detour path that exists between the two current nodes and complete the edge between the two current nodes in response to the detour probability being greater than a preset detour probability threshold.</p><p id="p-0099" num="0095">In one exemplary embodiment, that the edge between the two current nodes is completed includes that the edge is completed by using the sum of weights of all edges passed by a target detour path between the two current nodes as the edge weight between the two current nodes, where the target detour path satisfies that the sum of the weights of the all edges passed by the target detour path is larger than the sum of weights of all edges passed by any other detour path between the two current nodes.</p><p id="p-0100" num="0096"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram of an anomaly detection apparatus according to embodiments of the present application. The apparatus may be implemented by software and/or hardware and may be generally integrated on a server. The log anomaly detection may be implemented by performing the anomaly detection method. As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the apparatus includes a to-be-detected event stream acquisition module <b>601</b> configured to acquire a to-be-detected event stream, where the to-be-detected event stream corresponds to a to-be-detected log execution path; a comparison module <b>602</b> configured to compare the to-be-detected event stream with an event topological graph, where the event topological graph is generated by using the method for generating a topological graph according to the embodiments of the present application; and an anomaly detection module <b>603</b> configured to determine whether the to-be-detected event stream is anomalous according to a comparison result.</p><p id="p-0101" num="0097">In the anomaly detection apparatus according to this embodiment of the present application, the to-be-detected event stream corresponding to the to-be-detected log execution path is compared with the event topological graph generated by using the method for generating a topological graph according to the embodiments of the present application so that whether the to-be-detected event stream is anomalous can be detected quickly and accurately according to the comparison result, thereby improving the accuracy and the efficiency of log anomaly detection.</p><p id="p-0102" num="0098">In one exemplary embodiment, the event topological graph includes multiple nodes, a node represents an event in the dependent event pair, and the connection between two nodes includes the transfer probability and the range of the transfer interval corresponding to the dependent event pair represented by the two nodes; that the to-be-detected event stream is compared with the event topological graph, and whether the to-be-detected event stream is anomalous is determined according to the comparison result includes that for the current event in the to-be-detected event stream, a corresponding target event is searched in the event topological graph; and the to-be-detected event stream is determined to be anomalous in response to the next event of the current event not corresponding to a subnode of the target event.</p><p id="p-0103" num="0099">In one exemplary embodiment, the anomaly detection apparatus <b>603</b> is further configured to acquire the first time interval between the current event and the next event in response to the next event of the current event corresponding to the first subnode of the target event; acquire the range of the transfer interval corresponding to the target event and the first subnode; and determine the to-be-detected event stream to be anomalous in response to the first time interval being not within the range of the transfer interval.</p><p id="p-0104" num="0100">Embodiments of the present application provide a computer device in which the apparatus for generating a topological graph and/or the anomaly detection apparatus according to embodiments of the present application can be integrated. <figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of a computer device according to embodiments of the present application. The computer device <b>700</b> may include a memory <b>701</b>, a processor <b>702</b> and a computer program stored on the memory <b>701</b> and operable on the processor <b>702</b>. The processor <b>702</b> is configured to execute the computer program to perform the method for generating a topological graph and/or the anomaly detection method according to embodiments of the present application.</p><p id="p-0105" num="0101">Embodiments of the present application further provide a non-transitory storage medium including a computer-executable instruction. When executed by a computer processor, the computer-executable instruction is used for causing the computer processor to perform the method for generating a topological graph and/or the anomaly detection method according to any embodiment of the present application.</p><p id="p-0106" num="0102">The method for generating a topological graph, the anomaly detection apparatus, the computer device and the storage medium provided by the preceding embodiments may perform the methods provided in the corresponding embodiments and have functional modules corresponding to the execution methods. For technical details not described in the preceding embodiments, reference may be made to the methods provided by the corresponding embodiments of the present application.</p><p id="p-0107" num="0103">It is to be understood by those skilled in the art that the term computer device encompasses any appropriate type of device capable of performing a computer program, such as a mobile phone, a portable data processing apparatus, a portable web browser or a vehicle-mounted mobile station.</p><p id="p-0108" num="0104">In general, multiple embodiments of the present application may be implemented in hardware or dedicated circuits, software, logics or any combination thereof. For example, some aspects may be implemented in hardware while other aspects may be implemented in firmware or software that may be executed by a controller, a microprocessor or another computing apparatus, though the present application is not limited thereto.</p><p id="p-0109" num="0105">The embodiments of the present application may be implemented by computer program instructions executed by a data processor of a mobile apparatus, for example, implemented in a processor entity, by hardware or by a combination of software and hardware. The computer program instructions may be assembly instructions, instruction set architecture (ISA) instructions, machine instructions, machine-related instructions, microcodes, firmware instructions, status setting data or source or object codes written in any combination of one or more programming languages.</p><p id="p-0110" num="0106">A block diagram of any logic flow among the drawings of the present application may represent program steps, may represent interconnected logic circuits, modules and functions, or may represent a combination of program steps with logic circuits, modules and functions. Computer programs may be stored in the memory. The memory may be of any type suitable for the local technical environment and may be implemented using any suitable data storage technology, such as, but not limited to, a read-only memory (ROM), a random-access memory (RAM) and an optical memory device and system (a digital video disc (DVD) or a compact disc (CD)). The computer-readable medium may include a non-transitory storage medium. The data processor may be of any type suitable for the local technical environment, such as, but not limited to, a general-purpose computer, a special-purpose computer, a microprocessor, a digital signal processing (DSP), an application specific integrated circuit (ASIC), a field-programmable gate array (FPGA), and a processor based on a multi-core processor architecture.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for generating a topological graph, comprising:<claim-text>acquiring a preset event stream, wherein the preset event stream corresponds to a normal log execution path;</claim-text><claim-text>determining a dependent event pair in the preset event stream;</claim-text><claim-text>determining a range of a transfer interval corresponding to the dependent event pair, wherein the transfer interval represents a time difference between adjacent occurrences of two events in the dependent event pair; and</claim-text><claim-text>generating an event topological graph according to the range of the transfer interval and a transfer probability corresponding to the dependent event pair, wherein the transfer probability represents a conditional probability between the two events in the dependent event pair.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event topological graph comprises a plurality of nodes, a node among the plurality of nodes represents an event in the dependent event pair, and a connection between two nodes among the plurality of nodes comprises the range of the transfer interval and the transfer probability corresponding to a dependent event pair represented by the two nodes among the plurality of nodes.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein generating the event topological graph according to the range of the transfer interval and the transfer probability corresponding to the dependent event pair comprises:<claim-text>generating a maximum spanning tree by using events comprised in the dependent event pair as nodes and by using the transfer probability corresponding to the dependent event pair as a weight of an edge between the nodes; and</claim-text><claim-text>adding the range of the transfer interval corresponding to the dependent event pair to the edge in the maximum spanning tree to obtain the event topological graph.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein acquiring the preset event stream comprises:<claim-text>acquiring a preset log stream, wherein the preset log stream corresponds to the normal log execution path;</claim-text><claim-text>parsing logs in the preset log stream by using a preset log parsing algorithm to obtain a plurality of log templates, wherein each of the plurality of log templates corresponds to one event; and</claim-text><claim-text>converting the preset log stream into the preset event stream corresponding to the preset log stream according to the plurality of log templates.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the dependent event pair in the preset event stream comprises:<claim-text>determining a candidate subsequent event set corresponding to each event in the preset event stream; determining whether a first preset dependency relationship is satisfied between the each event and each candidate subsequent event in the candidate subsequent event set corresponding to the each event; and determining a candidate subsequent event satisfying the first preset dependency relationship to be a subsequent event and adding the subsequent event to a subsequent event set, wherein each event and one subsequent event of the each event form one dependent event pair.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein determining the candidate subsequent event set corresponding to the each event in the preset event stream comprises:<claim-text>adding a first event existing between every two adjacent occurrences of the each event in the preset event stream to an initial candidate subsequent event set;</claim-text><claim-text>calculating a conditional probability between the each event and each first event; and</claim-text><claim-text>removing a second event from the initial candidate subsequent event set to obtain the candidate subsequent event set corresponding to the each event, wherein a conditional probability between the each event and the second event is less than a preset conditional probability threshold.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein determining whether the first preset dependency relationship is satisfied between the each event and the each candidate subsequent event in the candidate subsequent event set corresponding to the each event comprises:<claim-text>calculating an unconditional distribution of a waiting time of the each candidate subsequent event in the candidate subsequent event set corresponding to the each event; calculating a conditional distribution of a waiting time of the each candidate subsequent event relative to the each event; and determining whether the first preset dependency relationship is satisfied between the each event and the each candidate subsequent event according to the unconditional distribution and the conditional distribution, wherein the waiting time represents a time difference between an occurrence time of the each event and an occurrence time of the each candidate subsequent event.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein determining whether the first preset dependency relationship is satisfied between the each event and the each candidate subsequent event according to the unconditional distribution and the conditional distribution comprises:<claim-text>determining that the first preset dependency relationship is satisfied between the each event and the each candidate subsequent event in response to the unconditional distribution and the conditional distribution conforming to a normal distribution.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein in a case of a plurality of dependent event pairs, determining the range of the transfer interval corresponding to the dependent event pair comprises:<claim-text>acquiring a time difference sequence corresponding to each dependent event pair of the plurality of dependent event pairs in the preset event stream, clustering the time difference sequence to obtain a cluster, and determining the range of the transfer interval corresponding to each dependent event pair according to a time distribution in the cluster, wherein the time difference sequence comprises a time difference between adjacent occurrences of two events in each dependent event pair.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein determining the range of the transfer interval corresponding to the each of the plurality of the dependent event pairs according to the time distribution in the cluster comprises:<claim-text>determining the range of the transfer interval corresponding to the each of the plurality of the dependent event pairs according to a maximum value and a minimum value in the cluster; or</claim-text><claim-text>determining the range of the transfer interval corresponding to the each of the plurality of the dependent event pairs according to a confidence interval of the time distribution in the cluster.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein determining the range of the transfer interval corresponding to the each of the plurality of the dependent event pairs according to the time distribution in the cluster comprises:<claim-text>testing the each of the plurality of dependent event pairs by using a preset statistical test method, and determining the range of the transfer interval corresponding to the each of the plurality of the dependent event pairs according to the time distribution in the cluster in a case where the testing is past.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, after generating the maximum spanning tree, the method further comprising:<claim-text>calculating a detour probability of a detour path that exists between two nodes in any dependent event pair in the maximum spanning tree, and completing an edge between the two nodes in response to the detour probability being greater than a preset detour probability threshold.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein completing the edge between the two nodes comprises:<claim-text>completing the edge by using a sum of weights of all edges passed by a target detour path between the two nodes as a weight of an edge between the two nodes, wherein the target detour path satisfies that the sum of the weights of the all edges passed by the target detour path is larger than a sum of weights of all edges passed by any other detour path between the two nodes.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. An anomaly detection method, comprising:<claim-text>acquiring a to-be-detected event stream, wherein the to-be-detected event stream corresponds to a to-be-detected log execution path;</claim-text><claim-text>comparing the to-be-detected event stream with an event topological graph, wherein the event topological graph is generated by using the method for generating a topological graph according to <claim-ref idref="CLM-00001">claim 1</claim-ref>; and</claim-text><claim-text>determining whether the to-be-detected event stream is anomalous according to a comparison result.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the event topological graph comprises a plurality of nodes, a node among the plurality of nodes represents an event in a dependent event pair, and a connection between two of the plurality of nodes comprises a range of a transfer interval and a transfer probability corresponding to a dependent event pair represented by the two of the plurality of nodes; and<claim-text>comparing the to-be-detected event stream with the event topological graph and determining whether the to-be-detected event stream is anomalous according to the comparison result comprise:</claim-text><claim-text>searching, in the event topological graph, for a target event corresponding to each event in the to-be-detected event stream; and</claim-text><claim-text>determining the to-be-detected event stream to be anomalous in response to a next event of the each event not corresponding to a subnode of the target event.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>acquiring a first time interval between the each event and the next event in response to the next event of the each event corresponding to a first subnode of the target event;</claim-text><claim-text>acquiring a range of a transfer interval corresponding to the target event and the first subnode; and</claim-text><claim-text>determining the to-be-detected event stream to be anomalous in response to the first time interval being not within the range of the transfer interval.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. An apparatus for generating a topological graph, comprising:<claim-text>a processor and a memory storing processor-executable instructions which, when executed by the processor, cause the processor to:</claim-text><claim-text>acquire a preset event stream, wherein the preset event stream corresponds to a normal log execution path;</claim-text><claim-text>determine a dependent event pair in the preset event stream;</claim-text><claim-text>determine a range of a transfer interval corresponding to the dependent event pair, wherein a transfer interval in the range of the transfer interval represents a time difference between adjacent occurrences of two events in the dependent event pair; and</claim-text><claim-text>generate an event topological graph according to the range of the transfer interval and a transfer probability corresponding to the dependent event pair, wherein the transfer probability represents a conditional probability between the two events in the dependent event pair.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. An anomaly detection apparatus, comprising:<claim-text>a processor and a memory storing processor-executable instructions which, when executed by the processor, cause the processor to:</claim-text><claim-text>acquire a to-be-detected event stream, wherein the to-be-detected event stream corresponds to a to-be-detected log execution path;</claim-text><claim-text>compare the to-be-detected event stream with an event topological graph, wherein the event topological graph is generated by using the method for generating a topological graph according to <claim-ref idref="CLM-00001">claim 1</claim-ref>; and</claim-text><claim-text>determine whether the to-be-detected event stream is anomalous according to a comparison result.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A computer device, comprising a processor and a memory,<claim-text>wherein the processor is configured to execute a program stored in the memory to perform the method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory storage medium storing a computer program which, when executed by a processor, causes the processor to perform the method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim></claims></us-patent-application>