<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004578A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004578</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17897901</doc-number><date>20220829</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>275</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>401</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Distributed Ledger Object Router Using Nested Time Signals</invention-title><us-related-documents><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>17537125</doc-number><date>20211129</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11477022</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17897901</doc-number></document-id></child-doc></relation></continuation-in-part><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>16993038</doc-number><date>20200813</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11188523</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17537125</doc-number></document-id></child-doc></relation></continuation-in-part><us-provisional-application><document-id><country>US</country><doc-number>62888011</doc-number><date>20190816</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>GoKnown LLC</orgname><address><city>Shreveport</city><state>LA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Harold</last-name><first-name>Michael D.</first-name><address><city>Shreveport</city><state>LA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system, method and apparatus in which a client computer initiates and communicates a distributed ledger transaction, which transaction is labeled with a timestamp. A first hashing algorithm are applied to the transaction data and timestamp data to create a first hash value, and the first hash value is associated with the transaction data. When a second distributed ledger transaction is initiated, a second hashing algorithm is applied to the second transaction data to generate a second hash value, and a third hashing algorithm is applied to the to the first and second hash values to create a third hash value which is associated with the second transaction data. The procedure is implemented with each additional transaction data submission. The transaction data is processed in a first-in-first-out sequence based upon the hash values associated with the transaction data.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="220.64mm" wi="158.75mm" file="US20230004578A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="238.68mm" wi="165.78mm" file="US20230004578A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="238.68mm" wi="165.78mm" file="US20230004578A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="238.59mm" wi="165.78mm" file="US20230004578A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="238.68mm" wi="165.78mm" file="US20230004578A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="238.76mm" wi="191.01mm" file="US20230004578A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="217.85mm" wi="158.16mm" file="US20230004578A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE INVENTION</heading><p id="p-0002" num="0001">The present invention relates generally to methods for electronically receiving and transmitting distributed ledger transactions and messages between and among a multiplicity of computing nodes in a distributed ledger network.</p><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0003" num="0002">In an increasingly globalized economy in which transactions are required to traverse both public and private networks of individuals, corporations, national boundaries and continents at speeds and volumes that continue to increase by orders of magnitude, distributed ledgers and their associated blockchain technologies have emerged as a preferred solution. In 2008, Satoshi Nakamoto published the Bitcoin White Paper which described a decentralized, distributed, peer-to-peer, public network of nodes able to provide secure, anonymous, automated payment services between two parties. On Jan. 3, 2009 the bitcoin network became operational when Satoshi Nakamoto mined the genesis (i.e., first) block of bitcoin. One of the key features of the system was and remains the ability to incentivize operators of the nodes by providing them a means to acquire bitcoin currency by being the first to mine (i.e., process) transactions in groups or &#x201c;blocks&#x201d; of transactions. Each group of transactions and each transaction within each block is linked together using a one-way cryptographic function that converts plain text to a unique fixed-length text message called a hash. Since there is no way to reverse the hash process to recover the original text, these hashes are used to immutably link all of the transactions processed by the distributed ledger beginning with the first transaction. Because the hashing process is computationally intensive, block mining normally consists of solving a hashing problem of predetermined complexity in order to receive credit for mining the next block in the chain. The creation of a new block requires the approval of other nodes on the network, each of which has a complete and identical copy of the blockchain/ledger record beginning with the first transaction and continuing to the most recent block. This voting approval process makes it difficult to alter completed transactions without the alteration being discovered by the other nodes, greatly increasing the security of the system and the integrity of its data. The computationally intensive nature of the block mining process results in a slower operation of the system than would be possible without block mining. Since transactions are completed in blocks of multiple transactions and since no new group of transactions can be considered completed until the most recent block is recorded, each block in the ledger is essentially a &#x201c;tick&#x201d; of the blockchain clock. This &#x201c;tick&#x201d; of the blockchain clock is an implicit yet distinct function, separate and apart in purpose from the operator incentive which is block mining. Since the original bitcoin ledger was implemented in 2009, new distributed ledger and blockchain architectures have proliferated. The majority of distributed ledger implementations to date have continued to provide similar incentives for block mining. From a transaction processing point of view, block mining is a batch process. This has proven a major impediment to increasing the speed and transactional throughput of blockchain technology. What is needed to replace this batch process is a means of processing individual transactions in time order across the network. Such an approach to distributed ledger transaction processing is much faster, provides higher throughput and more closely conforms to standard database processes, especially as they relate to concurrency control as a means of ensuring both transactional and data integrity.</p><p id="p-0004" num="0003">None of the presently known methods of distributed ledger transaction processing, however, are able to provide highly secure and scalable transactions while at the same time providing all of the important key features of the underlying blockchain technology which include immutability, decentralization, consensus, security and automation. Specifically, the prior art fails to demonstrate any system or method in which a client computer initiates and communicates a distributed ledger transaction, smart contract or data, hereinafter referred to collectively as &#x201c;transaction&#x201d;, to an individual node in a network of distributed ledger nodes or to the network itself, which transaction is labeled with a timestamp which is able to accurately preserve its time order and first-in, first-out (i.e., FIFO) position across all nodes in the network, each of which nodes may also receive and process incoming transactions in like manner. Additionally, the prior art fails to describe a cryptographically linked series of transactions that derive their time order from an algorithmic process associated with an ordered set of values determined by a cryptographic hash generated from the timestamp and the data record received, such that for the distributed ledger can distinguish between different time sequenced transactions that may occur within a millisecond or microsecond scale time period. Furthermore, none of the prior art describes a system, method and apparatus that can be easily integrated with existing, blockchain-based distributed ledger networks as a way to improve the speed, volume and security of their transactions.</p><p id="p-0005" num="0004">In particular, timestamp ordering is currently dependent on a network time signal. Many network service providers provide a network time signal with a time tick of 1 millisecond. In large scale applications with many users, it is possible that hundreds or thousands of transactions may be received in the same 1 millisecond time period. In such case, it may not be possible to time order the hundreds or thousands of transactions if network time is the controlling time signal.</p><p id="p-0006" num="0005">There is, therefore, a present need to provide an improved paradigm for managing distributed ledger transactions that overcomes the aforementioned constraints.</p><heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0007" num="0006">A system and method in which a client initiates and communicates a distributed ledger transaction to an individual node in a network of distributed ledger nodes or to the network itself, which transaction is first labeled with a timestamp and a cryptographic hash generated from the timestamp and the data record received before it is encrypted using quantum event generated random binary digits and then securely transmitted to the other ledger nodes in the network. This allows the highly secure and time ordered communication of all transactions and transaction-related messages to the system with minimal risk of collision or race conditions.</p><p id="p-0008" num="0007">In contrast to the traditional distributed ledger transaction processing model, the present invention permits the secure and rapid transfer of transactions among multiple distributed ledger nodes in a network. To accomplish this, the present invention combines the time ordering of transactions as they are received in real or near-real time, the secure communications of those transactions between ledger nodes, the minimization of network latencies associated with each transaction and the minimization of server and network operating costs associated with each transaction. The present invention is accordingly designed for use as a hardware and software system, method and apparatus capable of transmitting and receiving high volumes of distributed ledger transactions in an automated, peer-to-peer, replicated and decentralized computing environment. Specifically, the decentralized computing environment has as one of its key features a guarantee of first in, first out FIFO transaction processing that removes the need for traditional block-based transaction processing. This is made possible through the use of a timestamp and a hash which is added to each new incoming transaction at the point at which it enters the network. This operation maintains the time order among all transactions being processed by all ledger nodes in the network. In a 1 Gbps network, this translates to thousands of distributed ledger transactions per second. Higher bandwidth capacity (e.g., 10 Gbps, 100 Gbps, etc.) provides a commensurably higher rate of message transmission. Another feature is the encryption of each transaction message between ledger nodes. A further feature is the ability to use the present invention to create distributed ledger networks that receive data or attributes from blockchains, secure data stores, decentralized exchanges, or immutable, general purpose distributed databases.</p><p id="p-0009" num="0008">In accordance with one embodiment of the invention, a method for processing distributed ledger transactions and a decentralized distributed ledger system include the following features. Initiating a distributed ledger transaction using a client device in electronic communication with a distributed ledger object router by entering input data to generate transaction data (D1), generating timestamp data (T1) for the transaction, the timestamp data (T1) identifying a time when the transaction data was acquired, the timestamp data (T1) being a network time signal, or being obtained or derived from a network time signal, then applying a first hashing algorithm to the timestamp data (T1) and the transaction data (D1) to create a hash value (H1), and associating the hash value (H1) with the transaction data (D1), and optionally, associating the timestamp data (T1) with the transaction data (D1). Initiating a second distributed ledger transaction using the client device or another client device in electronic communication with the distributed ledger object router by entering input data to generate transaction data (D2), and applying a second hashing algorithm to the transaction data (D2) to create a hash value (H2), and applying a third hashing algorithm to the hash value (H1) and the hash value (H2) to create a hash value (H3), and associating one or both of the hash values (H2) and (H3) with the transaction data (D2). Initiating a third distributed ledger transaction using the client device or another client device in electronic communication with the distributed ledger object router by entering input data to generate transaction data (D3); applying a fourth hashing algorithm to the transaction data (D2) to create a hash value (H4); applying a fifth hashing algorithm to the hash value (H3) and the hash value (H4) to create a hash value (H5); and associating one or both of the hash values (H4) and (H5) with the transaction data (D3).</p><p id="p-0010" num="0009">The transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5) is encrypted and the encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5) is transmitted to a distributed ledger validator node. The distributed ledger validator node unencrypts the received encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5), and then determines the validity of the transaction data (D1), (D2), (D3). The distributed ledger validator node determination of the validity of the transaction data (D1), (D2), (D3) is transmitted to the distributed ledger object router and to other distributed ledger validator nodes. If the distributed ledger validator nodes obtain a consensus majority threshold to validate the transaction data (D1), (D2), and/or (D3), the validated transaction data is added to an immutable persistent ledger data store. The distributed ledger validator node processes the transaction data independently using a first-in-first-out sequence based upon one or more of the hash values (H1), (H2), (H3), (H4), and (H5)</p><p id="p-0011" num="0010">The foregoing processes are repeated for each additional instance of transaction data until the next tick of the network time signal.</p><p id="p-0012" num="0011">At the next tick of the network time signal, the timestamp data is updated to a new time (T2) and the first hashing algorithm is applied to the new timestamp data (T2) and the new transaction data to create a new hash value which is processed as discussed herein with respect to transaction data (D1), (D2), and (D3) and the associated hash values (H1), (H2), (H3), (H4), and (H5).</p><p id="p-0013" num="0012">It is, accordingly, an object of the present invention to set forth an improved paradigm for distributed ledger transaction processing.</p><p id="p-0014" num="0013">It is another object of the present invention to provide a system, method and apparatus able to maximize the speed and throughput of distributed ledger transactions.</p><p id="p-0015" num="0014">It is a further object of the present invention to provide a system, method and apparatus by which transactions can be securely transmitted using multiple encryption methods that include public keys, private keys and nonces composed wholly or in part of quantum event based random binary digits.</p><p id="p-0016" num="0015">It is a further object of the present invention to provide a system, method and apparatus able to create an edge computing network using 5G wireless communications as a means of placing the routing, logic and messaging components of a distributed ledger network node in close proximity to the client devices originating transactions.</p><p id="p-0017" num="0016">It is a further object of the present invention to enable the creation of a distributed ledger using handheld wireless devices, including smartphones and Internet of Things (IoT) devices, as distributed ledger nodes in a network.</p><p id="p-0018" num="0017">It is a further object of the present invention to provide a system, method and apparatus that is able to transmit transaction-related messages between ledger nodes in a distributed ledger network using the same systems and methods as those used to transmit the original transactions.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0019" num="0018">A more complete understanding of the system, method and apparatus of the present invention may be obtained by reference to the following Detailed Description when taken in conjunction with the accompanying Drawings.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates the operation of the distributed ledger object router in a distributed ledger network.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates the operation of a distributed ledger network comprised of client devices each containing a distributed ledger object router and distributed ledger node.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> illustrates the operation of an any-to-any network of distributed ledger object routers, ledger nodes and storage nodes.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates the operation of the distributed ledger object router and its associated distributed ledger node using a smartphone or other small form factor wireless device such as an IoT device in a 5G wireless implementation of the distributed ledger network comprised of small form factor 5G wireless devices.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates the operation of the distributed ledger object router, its associated distributed ledger validator node and one or more service nodes in which validator nodes communicate directly with one another using a validator messaging service and validator nodes communicate with their respective service nodes using a service node messaging service.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates the operation of the distributed ledger object router and its associated distributed ledger node using nested time signal devices and methods for the purpose of increasing the total number of time sequenced transactions that may occur within a specified time period.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0026" num="0025">The following detailed description is presented to enable any person skilled in the art to make and use the invention. For purposes of explanation, specific nomenclature is set forth to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that these specific details are not required to practice the invention. Descriptions of specific applications are provided only as examples. Various modifications to the preferred embodiments will be readily apparent to one skilled in the art, and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention. The present invention is not intended to be limited to the embodiments shown, but is to be accorded the widest possible scope consistent with the principles and features disclosed herein.</p><p id="p-0027" num="0026">With reference now to <figref idref="DRAWINGS">FIG. <b>1</b></figref> of the Drawings, a distributed communications network, generally designated by the reference numeral <b>100</b>, is shown. In particular, a user <b>110</b> of the network <b>100</b> uses any of a variety of client devices, including a desktop, laptop, tablet, smartphone, or any other personal computing wireline or wireless computing device, generally designated by the reference number <b>115</b>, that has as part of its function the ability to initiate and/or participate in multi-party transactions over the network. As shown in the figure, the user <b>110</b> uses said client device <b>115</b> to initiate a transaction with the distributed ledger object router <b>200</b> over the network <b>100</b>. In the present example, the distributed ledger object router <b>200</b> communicates directly with at least one ledger node <b>300</b> on the network. The distributed ledger object router <b>200</b> first timestamps the transaction. The timestamp is provided by a grandmaster time server <b>210</b> able to maintain its accuracy using network signals, including GPS signals received from one or more GPS satellites <b>10</b>. The term &#x201c;GPS&#x201d; as used in the specification and claims in this application is defined as any geospatial positioning system (including the combined use of multiple geospatial positioning systems) such as GNSS, especially the US GPS system and other government sponsored systems such as GLONASS (Russia), Galileo (EU), Beidou (China), as well as commercially launched systems such as Iridium, SpaceX, or other future systems. Each grandmaster time server <b>210</b> in each distributed ledger object router <b>200</b> operates in the same manner. Some preferable embodiments include a physical GPS receiver locked to Universal Coordinated Time able to receive GPS signals from the GPS satellite(s).</p><p id="p-0028" num="0027">Following the addition of the timestamp to the transaction, the transaction is encrypted by an encryption service <b>230</b>. Encryption service <b>230</b> optionally is based on a physical quantum random number generator or QRNG <b>235</b> to create public encryption keys, private encryption keys, nonces and one time key pads in any combination that meet the entropy and other security requirements defined by standards that include, but are not limited to, A1531 PTG.3. In the case of transactions having smaller length transactions, such as payment transactions, a one time key pad is used to encrypt transactions the size of which is equal to or smaller than the Ethernet maximum transmission unit (MTU) size of 1500 bytes. This allows the transaction to be transmitted by the distributed ledger object router <b>200</b> in a single network layer transaction.</p><p id="p-0029" num="0028">Following the encryption of the transaction data, a messaging service <b>250</b> communicates the transaction data to its associated ledger node <b>300</b> and to other distributed ledger object routers <b>201</b> on the network <b>100</b>. As part of their transaction processing workflow, each ledger node <b>300</b> receiving the transaction processes the transaction as follows: It first verifies the input data <b>310</b>. If the verification is successful, the node executes the transaction logic <b>320</b> associated with the transaction. Following the execution of the transaction logic, the ledger node <b>300</b> votes to either confirm or deny the transaction <b>330</b>. If the verification of the input data <b>310</b> or the execution of the transaction logic <b>320</b> does not meet the requirements for a successful vote, the vote result is &#x201c;NO&#x201d;. Otherwise, the vote result is &#x201c;YES&#x201d;. The vote result is transmitted to that ledger node's <b>300</b> object router <b>200</b> where it is communicated via the messaging service <b>250</b> to the other ledger nodes in the network. Once the number of &#x201c;YES&#x201d; votes reaches the consensus majority vote threshold (ex. 51% or higher) for approval of the transaction, the transaction is added to each ledger node's persistent data store <b>340</b> as part of the immutable record of all transactions maintained separately by all ledger nodes in the network.</p><p id="p-0030" num="0029">With reference now to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> of the Drawings, a distributed ledger network comprised of client devices of any type, each consisting of a distributed ledger object router and ledger node and each of which operates within a distributed communications network, said network generally designated by the reference numeral <b>100</b>, is shown.</p><p id="p-0031" num="0030">In particular, a user <b>110</b> of the network <b>100</b> uses the client device <b>115</b> to interoperate with same or dissimilar client devices <b>116</b>. Said client devices <b>116</b> include but are not limited to a desktop, laptop, tablet, smartphone or other handheld device, or any other computing wireline or wireless computing device, that has as part of its function the ability to initiate and/or participate in any type of multi-party transaction over the network. Additionally, client devices <b>115</b>/<b>116</b> may take the form of automated and/or embedded devices including but not limited to home automation devices, smart city monitoring and automation devices, manufacturing devices, supply chain monitoring and control devices, virtual reality and augmented reality devices, GIS surveillance and mapping devices such as drones, and ground and air personnel or material transport devices of any type.</p><p id="p-0032" num="0031">Each client device's <b>115</b>/<b>116</b> distributed ledger object router <b>200</b> communicates directly with its corresponding ledger node <b>300</b> which is contained in the same device <b>115</b>/<b>116</b>. In all cases, the distributed ledger object router <b>200</b> first timestamps the transaction using a nanosecond scale time stamp accurate to 100 nanoseconds or less. The grandmaster time server <b>210</b> in each distributed ledger object router <b>200</b> operates in the same manner. Depending on the size, power and other operating characteristics of each client device <b>115</b>/<b>116</b>, the grandmaster time server <b>210</b> may take the form of a component assembly, chip assembly or single chip. Following the addition of the timestamp to the transaction, the transaction is encrypted by an encryption service <b>230</b>. Following the encryption of the transaction data, a messaging service <b>250</b> communicates the transaction data to its client device's <b>115</b> associated ledger node <b>300</b> and to other client devices <b>116</b> on the network. At the completion of each transaction, the client device's <b>115</b>/<b>116</b> ledger node <b>300</b> adds the transaction to that ledger node's <b>300</b> persistent data store <b>340</b> as part of the immutable record of all transactions maintained separately by all ledger nodes in the network.</p><p id="p-0033" num="0032">With reference now to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> of the Drawings, any-to-any communications between distributed ledger object routers, distributed ledger nodes, and distributed ledger storage, is shown. The availability of cloud and intercloud computing, 5G wireless edge clouds and other types of distributed, virtualized computing networks provides an opportunity to enable shortest path routing, load balancing and other methods of maximizing the throughput of distributed ledger transactions using any-to-any communications between system services and components.</p><p id="p-0034" num="0033">In particular, a user <b>110</b> of the network <b>100</b> uses a client device <b>115</b> to initiate a transaction with a distributed ledger object router <b>200</b> over the network <b>100</b>. In the present example, the distributed ledger object router <b>200</b> uses its messaging service <b>250</b> to transmit the client device <b>115</b> transaction to the other ledger nodes <b>300</b> on the network. As part of their transaction processing workflow, each ledger node <b>300</b> receiving the transaction processes the transaction, and communicates the resulting vote to the other ledger nodes <b>300</b> by communicating said result through one of the distributed ledger object routers <b>200</b>. In order to secure, decentralize and scale the storage of the distributed ledger's immutable transaction record, following completion of the vote and approval of the transaction, each distributed ledger node storage service <b>341</b> writes the completed transaction to one or more distributed ledger storage locations <b>340</b>. Multiple storage locations <b>340</b> may be used by each ledger node <b>300</b> for purposes of scale, performance and security.</p><p id="p-0035" num="0034">With reference now to <figref idref="DRAWINGS">FIG. <b>3</b></figref> of the Drawings, the operation of a distributed ledger object router and its associated distributed ledger node using a 5G smartphone or other small form factor 5G wireless device, all of which operate within a 5G wireless distributed communications network, said network generally designated by the reference numeral <b>103</b>, is shown.</p><p id="p-0036" num="0035">In particular, a user <b>110</b> of the network <b>103</b> uses any one of a variety of 5G enabled devices including smartphones, snapons (i.e, dongles), remote controlled IoT devices, automated and/or embedded IoT devices, and mobile devices of any type, generally designated by the reference numbers <b>116</b> and <b>117</b>, each of which has as part of its function the ability to initiate and/or participate in any type of multi-party transaction over the 5G network <b>103</b>. As shown in the figure, the user <b>110</b> uses said client device <b>116</b> to initiate a transaction with the distributed ledger object router <b>200</b> over the network <b>103</b>.</p><p id="p-0037" num="0036">All incoming and outgoing communications to and from any 5G mobile device <b>116</b> and <b>117</b>, is processed by the 5G RF processing block <b>150</b> which consists of a mm wave antenna array <b>151</b>, a sub-6 GHz antenna array <b>152</b>, a 5G modem <b>153</b>, a multi-mode RF transceiver <b>154</b> and an RF front end module <b>155</b> or FEM.</p><p id="p-0038" num="0037">The distributed ledger object router <b>200</b> communicates directly with at least one ledger node <b>300</b> on the network <b>103</b>. The distributed ledger object router <b>200</b> timestamps the transaction. Following the addition of the timestamp to the transaction, the transaction is encrypted using an encryption service <b>230</b>. Following the encryption of the transaction data, a messaging service <b>250</b> communicates the transaction data to its associated ledger node <b>300</b> and to other client devices <b>117</b> in the network <b>103</b>, each of which other client devices <b>117</b> contains the same or similar components and services as the client device <b>116</b> originating the transaction. The ledger node <b>300</b> verifies the input data <b>310</b>, executes the transaction logic <b>320</b>, votes to either confirm or deny the transaction <b>330</b> and communicates the results to the other client devices <b>117</b> in the network <b>103</b>. Once the vote reaches the consensus majority vote threshold for approval of the transaction, the transaction is added to each ledger node's persistent data store <b>340</b> as part of the immutable record of all transactions maintained separately by all ledger nodes in the network.</p><p id="p-0039" num="0038">With reference now to <figref idref="DRAWINGS">FIG. <b>4</b></figref> of the Drawings, a distributed communications network, generally designated by the reference numeral <b>100</b> is shown. In particular, a user <b>110</b> of the network <b>100</b> uses any of a variety of client devices, including a desktop, laptop, tablet, smartphone, or any other personal computing wireline or wireless computing device or, alternatively, a server computer located on-site, in a data center, in a 5G edge cloud or other private or public cloud, generally designated by the reference number <b>115</b>, that has as part of its function the ability to initiate and/or participate in multi-party transactions over the network. As shown in the figure, the user <b>110</b> uses said client device <b>115</b> to initiate a transaction with the distributed ledger object router <b>200</b> over the network <b>100</b>. In the present example, the distributed ledger object router <b>200</b> communicates directly with at least one or more distributed ledger validator nodes <b>302</b> on the network <b>100</b>. A distributed ledger validator node <b>302</b> is distinct from other types of distributed ledger nodes in that it is the only type of node that is able to participate in consensus voting. A distributed ledger validator node <b>302</b> is responsible for verifying, voting on and maintaining an immutable record of all transactions validated by the distributed ledger.</p><p id="p-0040" num="0039">The distributed ledger object router <b>200</b> first timestamps the transaction with a timestamp is provided by a grandmaster time server <b>210</b>. Each grandmaster time server <b>210</b> in each distributed ledger object router <b>200</b> operates in the same manner.</p><p id="p-0041" num="0040">Following the addition of the timestamp to the transaction, the transaction is encrypted by an encryption service <b>230</b>. In the case of transactions having smaller length transactions, such as payment transactions, a one time key pad is used to encrypt transactions the size of which is equal to or smaller than the Ethernet maximum transmission unit (MTU) size of 1500 bytes. This allows the transaction to be transmitted by the distributed ledger object router <b>200</b> in a single network layer transaction. Following the encryption of the transaction data, a messaging service <b>250</b> communicates the transaction data to its associated distributed ledger validator node <b>302</b> and to other distributed ledger object routers <b>201</b> on the network <b>100</b> through a validator messaging service <b>202</b>. The validator messaging service <b>202</b> uses a messaging protocol that communicates directly and independently with the other distributed ledger validator nodes <b>302</b> in the distributed ledger network <b>100</b>. As part of their transaction processing workflow, each distributed ledger validator node <b>302</b> receiving the transaction processes the transaction as follows: It first verifies the input data <b>310</b>. If the verification is successful, the node executes the transaction logic <b>320</b> associated with the transaction. Following the execution of the transaction logic, the distributed ledger validator node <b>300</b> votes to either confirm or deny the transaction <b>330</b>. If the verification of the input data <b>310</b> or the execution of the transaction logic <b>320</b> does not meet the requirements for a successful vote, the vote result is &#x201c;NO&#x201d;. Otherwise, the vote result is &#x201c;YES&#x201d;. The vote result is transmitted to that distributed ledger validator node's <b>302</b> object router <b>200</b> where it is communicated via the validator messaging service <b>202</b> to the other distributed ledger validator nodes <b>304</b> in the network. Once the number of &#x201c;YES&#x201d; votes reaches the consensus majority vote threshold (ex. 51% or higher) for approval of the transaction, the transaction is added to each distributed ledger validator node's immutable ledger store <b>342</b> as part of the immutable record of all transactions maintained separately by all distributed ledger validator nodes <b>302</b>, <b>304</b> in the network.</p><p id="p-0042" num="0041">Following the recording of the transaction in the immutable ledger store <b>342</b>, the resulting transaction record is communicated by the distributed ledger validator node <b>302</b> to the distributed ledger object router <b>200</b> using the validator messaging service <b>202</b>. The validator messaging service <b>202</b> then turn transmits the completed immutable transaction record to the service node messaging service <b>204</b>.</p><p id="p-0043" num="0042">The service node messaging service <b>204</b> uses a messaging protocol that communicates asynchronously with one or more distributed ledger service nodes <b>306</b> using a publish-subscribe messaging protocol. Publish-subscribe messaging, also called pub-sub messaging, is any messaging protocol in which a message is broadcast by a &#x201c;publisher&#x201d; to one or more &#x201c;subscribers&#x201d; using a uniquely named &#x201c;topic&#x201d; or &#x201c;channel&#x201d;. A publisher may create multiple channels to transmit data to that publisher's subscribers. The publisher does not need to know the machine identities of subscribers. Subscribers do not need to know the machine identity of the publisher. The only information required by a subscriber is the information identifying the channel or topic. Publish-subscribe messaging allows events, transactions and other messages to be securely communicated to many subscribers on a network in real or near real-time at scale. It also guarantees receipt of the published messages by all subscribers to the channel or topic. Subscribers to the topic may perform different functions with the received messages. This type of communication has a broad range of applications including supply chain management, streaming analytics, data pipelining and event-driven machine learning.</p><p id="p-0044" num="0043">With reference now to <figref idref="DRAWINGS">FIG. <b>5</b></figref> of the Drawings, there is illustrated therein an embodiment of the present invention, which operates within a distributed communications network generally designated by the reference numeral <b>100</b>. Embodiments of distributed communications network <b>100</b> include the distributed networks shown in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref> as well as the embodiment shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0045" num="0044">A user <b>110</b> of the network <b>100</b> uses any of a variety of client devices, including a desktop, laptop, tablet, smartphone, or any other personal computing wireline or wireless computing device or, alternatively, a server computer located on-site, in a data center, in a 5G edge cloud or other private or public cloud, generally designated by the reference number <b>115</b>, that has as part of its function the ability to initiate and/or participate in multi-party transactions over the network. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the user <b>110</b> uses said client device <b>115</b> to initiate a transaction with the distributed ledger object router <b>200</b> over the network <b>100</b>. In the present example, the distributed ledger object router <b>200</b> communicates directly with at least one or more distributed ledger validator nodes <b>302</b> on the network <b>100</b>. A distributed ledger validator node <b>302</b> is distinct from other types of distributed ledger nodes in that it is the only type of node able to participate in consensus voting. A distributed ledger validator node <b>302</b> is responsible for verifying, voting on and maintaining an immutable record of all transactions validated by the distributed ledger. This requires that all distributed ledger object routers <b>200</b>, <b>201</b> and distributed ledger validator nodes <b>302</b>, <b>304</b> in the network <b>100</b> must use the same type of device or devices and method or methods to process transactions.</p><p id="p-0046" num="0045">While it would be desirable to use a network time service providing a time tick of 100 nanoseconds or less, preferably 10 nanoseconds or less, because having a finely granular time signal allows timestamps to be applied to each incoming transaction to time order received transactions, such network time signals are not commonly available. Therefore, the likelihood of a duplicate timestamp between two or more transactions becomes more and more likely, with resulting risk of transaction collisions and race conditions, which are often difficult to identify and resolve.</p><p id="p-0047" num="0046">Infrastructure-as-a-Service cloud vendors often provide uniform decentralized network time services accurate to milliseconds or microseconds across the vendor's entire cloud infrastructure. This allows servers anywhere in the network to access a time service that is accurate to a specific time measurement and duration, one millisecond (ms) for example.</p><p id="p-0048" num="0047">Global cloud vendors traditionally isolate computing resources in data centers. Multiple data centers in turn are geographically organized into zones. Zones in turn are organized into regions. Allowing computing resources to be distributed geographically across data centers, zones and regions increases isolation, redundancy and the overall security of each object router <b>200</b>, <b>201</b> and validator node <b>302</b>, <b>304</b> in the network <b>100</b>.</p><p id="p-0049" num="0048">The goal of the present invention is to obtain a timestamp and time ordering accuracy comparable to the time ordering accuracy that would be available from a network time service providing a time tick of 100 nanoseconds or less, preferably 10 nanoseconds or less. In this way, the possibility of a duplicate timestamp on two or more transactions is eliminated, eliminating the risk of collisions and race conditions. The timestamp is preferably appended to header information associated with the transaction, preferably with an identifier, but may be applied to the transaction in other known ways as well.</p><p id="p-0050" num="0049">As example and not by way of limitation, a one millisecond UTC time service such as those provided by cloud vendors can be used to demonstrate the nested time signal method and apparatus of the present invention.</p><p id="p-0051" num="0050">The distributed ledger object router's <b>200</b> nested time service <b>212</b> first timestamps a new, incoming transaction using the cloud's UTC time service <b>214</b> which provides a Coordinated Universal Time or UTC time stamp with a fixed, predetermined time measurement. In a typical embodiment, the Coordinated Universal Time or UTC time stamp is accurate to 1 ms. This is the first step in a process that creates an ordered set of transactions that describe the order in which new, incoming transactions were received by a given node. Following the attachment of the UTC timestamp to the transaction, a predefined number of additional new, incoming transactions can be sequentially connected to the timestamped transaction through the use of cryptographic hashes.</p><p id="p-0052" num="0051">The following table describes the use of timestamps and cryptographic hashes to timestamp and sequentially order three consecutive transactions received by a single node:</p><p id="p-0053" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Object Router</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="84pt" align="left"/><tbody valign="top"><row><entry/><entry>Data Record</entry><entry>D1</entry></row><row><entry/><entry>Timestamp (ms)</entry><entry>T1</entry></row><row><entry/><entry>Hash</entry><entry>H1(T1 + D1)</entry></row><row><entry/><entry>Data Record</entry><entry>D2</entry></row><row><entry/><entry>Hash</entry><entry>H2(D2)</entry></row><row><entry/><entry>Hash</entry><entry>H3(H1 + H2)</entry></row><row><entry/><entry>Data Record</entry><entry>D3</entry></row><row><entry/><entry>Hash</entry><entry>H4(D3)</entry></row><row><entry/><entry>Hash</entry><entry>H5(H3 + H4)</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0054" num="0052">Referencing both <figref idref="DRAWINGS">FIG. <b>5</b></figref> and the above table, following the distributed ledger object router's <b>200</b> receipt of a new, incoming data record (D1), a nested time service <b>212</b> timestamps the transaction using the cloud's UTC time service <b>214</b> which provides a Coordinated Universal Time or UTC timestamp (T1) with a fixed, predetermined time measurement (in this case, 1 ms). The sequencing protocol <b>216</b> then creates a cryptographic hash (H1) from the concatenated timestamp (T1) and data record (D1). The next data record is processed by first creating a cryptographic hash (H2) from the data record (D2) using the sequencing protocol <b>216</b> and creating another cryptographic hash (H3) from the concatenation of the previous transaction's cryptographic hash (H1) and the current transaction's first cryptographic hash (H2), again using the sequencing protocol <b>216</b>. This cryptographically and sequentially links the second transaction's data record (D2) to the first transaction's data record (D1) and timestamp (T1). To continue the example, a third data record (D3) is sequentially linked to the second data record (D2) by first creating a cryptographic hash (H4) from the third data record (D3) using the sequencing protocol <b>216</b> and creating another cryptographic hash (H5) from the concatenation of the previous transaction's second cryptographic hash (H3) and the current transaction's first cryptographic hash (H4), again using the sequencing protocol <b>216</b>. The result is a cryptographically linked series of transactions that derive their time order from the timestamp (T1) associated with the ordered set of values {(D1, T1, H1), (D2, H2, H3), (D3, H4, H5)}.</p><p id="p-0055" num="0053">Although the foregoing example provides an example of three transactions, it is to be appreciated that the method of the invention can be applied to any number of transactions received in a time period associated with the timestamp (T1), and that the description and claims are not limited to only three transactions. The only limitation is the ability of a node to execute n transactions in a given time period.</p><p id="p-0056" num="0054">In most embodiments, the same hashing function will be used at each hash generation step to create e.g. (H1), (H2), (H3), (H4), (H5), . . . etc. Thus the first hashing algorithm, the second hashing algorithm, the third hashing algorithm, the fourth hashing algorithm, and the fifth hashing algorithm, etc. will be the same hashing algorithm, however, having different inputs.</p><p id="p-0057" num="0055">The hashing function used in the present invention is desirably the simplest, fastest hash available. Therefore SHA-2 is a desirable choice for the hashing function. However, other hashing functions may be used, such as SHA-3, SHA-12, and also SHA-256, and other Merkle Trie data structures and/or quantum-safe cryptographic hash functions approved by the National Institute of Standards and Technology (NIST) for use in quantum-safe cryptographic algorithms.</p><p id="p-0058" num="0056">The same process can be applied to the processing of any number of distributed ledger object routers <b>200</b>, <b>201</b> and their corresponding distributed ledger validator nodes <b>302</b>, <b>304</b>.</p><p id="p-0059" num="0057">The following table shows the use of round-robin transaction processing, normally a form of load balancing, among three distinct object routers <b>200</b>, <b>201</b> and their corresponding distributed ledger validator nodes <b>302</b>, <b>304</b>:</p><p id="p-0060" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="49pt" align="left"/><colspec colname="4" colwidth="56pt" align="left"/><thead><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>Object Routers</entry><entry>OR 1</entry><entry>OR 2</entry><entry>OR 3</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>Data Record</entry><entry>D1</entry><entry>D4</entry><entry>D7</entry></row><row><entry>Timestamp (ms)</entry><entry>T1</entry><entry>T2</entry><entry>T3</entry></row><row><entry>Hash</entry><entry>H1(T1 + D1)</entry><entry>H6(T2 + D4)</entry><entry>H11(T3 + D7)</entry></row><row><entry>Tx Record</entry><entry>D2</entry><entry>D5</entry><entry>D8</entry></row><row><entry>Hash</entry><entry>H2(D2)</entry><entry>H7(D5)</entry><entry>H12(D5)</entry></row><row><entry>Hash</entry><entry>H3(H1 + H2)</entry><entry>H8(H6 + H7)</entry><entry>H13(H11 + H12)</entry></row><row><entry>Tx Record</entry><entry>D3</entry><entry>D6</entry><entry>D9</entry></row><row><entry>Hash</entry><entry>H4(D3)</entry><entry>H9(D6)</entry><entry>H14(D9)</entry></row><row><entry>Hash</entry><entry>H5(H3 + H4)</entry><entry>H10(H8 + H9)</entry><entry>H15(H13 + H14)</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0061" num="0058">The resulting cryptographically linked series of transactions that derive their time order from this process is described by the ordered set of values:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0059">{(D1, T1, H1), (D2, H2, H3), (D3, H4, H5), (D4, T2, H6), (D5, H7, H8), (D6, H9, H10), (D7, T3, H11), (D8, H12, H13), (D9, H14, H15)}.</li>    </ul>    </li></ul></p><p id="p-0062" num="0060">Another example showing the use of random selection without replacement of object routers <b>200</b>, <b>201</b> and their corresponding distributed ledger validator nodes <b>302</b>, <b>304</b> is contained in the following table:</p><p id="p-0063" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="49pt" align="left"/><colspec colname="4" colwidth="56pt" align="left"/><thead><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>Object Routers</entry><entry>OR 2</entry><entry>OR 1</entry><entry>OR 3</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>Data Record</entry><entry>D1</entry><entry>D4</entry><entry>D7</entry></row><row><entry>Timestamp (ms)</entry><entry>T1</entry><entry>T2</entry><entry>T3</entry></row><row><entry>Hash</entry><entry>H1(T1 + D1)</entry><entry>H6(T2 + D4)</entry><entry>H11(T3 + D7)</entry></row><row><entry>Tx Record</entry><entry>D2</entry><entry>D5</entry><entry>D8</entry></row><row><entry>Hash</entry><entry>H2(D2)</entry><entry>H7(D5)</entry><entry>H12(D8)</entry></row><row><entry>Hash</entry><entry>H3(H1 + H2)</entry><entry>H8(H6 + H7)</entry><entry>H13(H11 + H12)</entry></row><row><entry>Tx Record</entry><entry>D3</entry><entry>D6</entry><entry>D9</entry></row><row><entry>Hash</entry><entry>H4(D3)</entry><entry>H9(D6)</entry><entry>H14(D9)</entry></row><row><entry>Hash</entry><entry>H5(H3 + H4)</entry><entry>H10(H8 + H9)</entry><entry>H15(H13 + H14)</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0064" num="0061">The resulting cryptographically linked series of transactions that derive their time order from this process is the same as that described in the previous example:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0062">{(D1, T1, H1), (D2, H2, H3), (D3, H4, H5), (D4, T2, H6), (D5, H7, H8), (D6, H9, H10), (D7, T3, H11), (D8, H12, H13), (D9, H14, H15)}.</li>    </ul>    </li></ul></p><p id="p-0065" num="0063">Although the foregoing example provides an example of nine transactions, it is to be appreciated that the method of the invention can be applied to any number of transactions received in a time period associated with the timestamp (T1), and that the description and claims are not limited to only nine transactions. The only limitation is the ability of a node or nodes to execute n transactions in a given time period.</p><p id="p-0066" num="0064">The same or similar process can be applied to other methods of time ordering sets of transactions within and between any number of distributed ledger object routers <b>200</b>, <b>201</b> and their corresponding distributed ledger validator nodes <b>302</b>, <b>304</b>.</p><p id="p-0067" num="0065">The foregoing example provides a transaction ordering procedure, based on the hash, for transactions received within the 1 millisecond time period of timestamp (T1). With the next time tick of network time, transactions received in the new 1 millisecond time period are identified with a new timestamp (T2) and the sequencing protocol <b>216</b> operates as previously described, using (T2) as the new time input. The protocol <b>216</b> creates a cryptographic hash (H<sub>n</sub>) from the concatenated timestamp (T2) and data record (D<sub>n</sub>). The next data record is processed by creating a cryptographic hash (H<sub>n+1</sub>) from the data record (D<sub>n+1</sub>) and another cryptographic hash (H<sub>n+2</sub>) from the concatenation of the previous transaction's cryptographic hash (H<sub>n+1</sub>).</p><p id="p-0068" num="0066">Following the addition of a timestamp or cryptographic hash identifier to each transaction, the transaction is encrypted by an encryption service <b>230</b>. Desirably, encryption service <b>230</b> uses, as part of its operation, a physical quantum random number generator or QRNG <b>235</b> to create public encryption keys, private encryption keys, nonces and one time key pads in any combination that meet the entropy and other security requirements defined by standards that include, but are not limited to, AIS31 PTG.3. Following the encryption of the transaction data, a messaging service <b>250</b> communicates the transaction data to its associated distributed ledger validator node <b>302</b> and to other distributed ledger object routers <b>201</b> on the network <b>100</b> through a validator messaging service <b>202</b>. The validator messaging service <b>202</b> uses a messaging protocol that communicates directly and independently with the other distributed ledger validator nodes <b>302</b> in the distributed ledger network <b>100</b>. As part of their transaction processing workflow, each distributed ledger validator node <b>302</b> receiving the transaction processes the transaction as follows: It first verifies the input data <b>310</b>. If the verification is successful, the node executes the transaction logic <b>320</b> associated with the transaction. Following the execution of the transaction logic, the distributed ledger validator node <b>300</b> votes to either confirm or deny the transaction <b>330</b>. If the verification of the input data <b>310</b> or the execution of the transaction logic <b>320</b> does not meet the requirements for a successful vote, the vote result is &#x201c;NO&#x201d;. Otherwise, the vote result is &#x201c;YES&#x201d;. The vote result is transmitted to that distributed ledger validator node's <b>302</b> object router <b>200</b> where it is communicated via the validator messaging service <b>202</b> to the other distributed ledger validator nodes <b>304</b> in the network. Once the number of &#x201c;YES&#x201d; votes reaches the consensus majority vote threshold (ex. 51% or higher) for approval of the transaction, the transaction is added to each distributed ledger validator node's immutable ledger store <b>342</b> as part of the immutable record of all transactions maintained separately by all distributed ledger validator nodes <b>302</b>, <b>304</b> in the network.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for processing distributed ledger transactions comprising the steps of:<claim-text>initiating a distributed ledger transaction using a client device in electronic communication with a distributed ledger object router by entering input data to generate transaction data (D1);</claim-text><claim-text>generating timestamp data (T1) for the transaction, the timestamp data (T1) identifying a time when the transaction data was acquired, said timestamp data (T1) being derived from a network time signal;</claim-text><claim-text>applying a first hashing algorithm to the timestamp data (T1) and the transaction data (D1) to create a hash value (H1);</claim-text><claim-text>associating the hash value (H1) with the transaction data (D1).</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising: associating the timestamp data (T1) with the transaction data (D1).</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>initiating a second distributed ledger transaction using the client device or another client device in electronic communication with the distributed ledger object router by entering input data to generate transaction data (D2);</claim-text><claim-text>applying a second hashing algorithm to the transaction data (D2) to create a hash value (H2);</claim-text><claim-text>associating the hash value (H2) with the transaction data (D2).</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>initiating a second distributed ledger transaction using the client device or another client device in electronic communication with the distributed ledger object router by entering input data to generate transaction data (D2);</claim-text><claim-text>applying a second hashing algorithm to the transaction data (D2) to create a hash value (H2);</claim-text><claim-text>applying a third hashing algorithm to the hash value (H1) and the hash value (H2) to create a hash value (H3);</claim-text><claim-text>associating one or both of the hash values (H2) and (H3) with the transaction data (D2).</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>initiating a third distributed ledger transaction using the client device or another client device in electronic communication with the distributed ledger object router by entering input data to generate transaction data (D3);</claim-text><claim-text>applying a fourth hashing algorithm to the transaction data (D3) to create a hash value (H4);</claim-text><claim-text>associating the hash value (H4) with the transaction data (D3).</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>initiating a third distributed ledger transaction using the client device or another client device in electronic communication with the distributed ledger object router by entering input data to generate transaction data (D3);</claim-text><claim-text>applying a fourth hashing algorithm to the transaction data (D2) to create a hash value (H4);</claim-text><claim-text>applying a fifth hashing algorithm to the hash value (H3) and the hash value (H4) to create a hash value (H5);</claim-text><claim-text>associating one or both of the hash values (H4) and (H5) with the transaction data (D3).</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:<claim-text>individually or group encrypting the transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5);</claim-text><claim-text>transmitting the encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5) to a distributed ledger validator node;</claim-text><claim-text>the distributed ledger validator node receiving the encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5);</claim-text><claim-text>the distributed ledger validator node unencrypting the encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5).</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:<claim-text>the distributed ledger validator node determining the validity of the transaction data (D1), (D2), (D3);</claim-text><claim-text>transmitting the distributed ledger validator node determination of the validity of the transaction data (D1), (D2), (D3) to the distributed ledger object router and to other distributed ledger validator nodes;</claim-text><claim-text>if the distributed ledger validator nodes obtain a consensus majority threshold to validate the transaction data (D1), (D2), and/or (D3) adding the validated transaction data to an immutable persistent ledger data store;</claim-text><claim-text>wherein the distributed ledger validator node processes the transaction data independently using a first-in-first-out sequence based upon one or more of the hash values (H1), (H2), (H3), (H4), and (H5).</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the transaction data (D1), (D2), (D3) are processed in order according to the hash values.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:<claim-text>initiating a fourth distributed ledger transaction using the client device or another client device in electronic communication with another distributed ledger object router by entering input data to generate transaction data (D4);</claim-text><claim-text>generating timestamp data (T2) for the transaction, the timestamp data (T2) identifying a time when the transaction data was acquired, said timestamp data (T2) being derived from a network time signal;</claim-text><claim-text>applying a fifth hashing algorithm to the transaction data (D4) and the timestamp data (T2) to create a hash value (H6);</claim-text><claim-text>associating the hash value (H6) with the transaction data (D4).</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:<claim-text>initiating a fifth distributed ledger transaction using the client device or another client device in electronic communication with the another distributed ledger object router by entering input data to generate transaction data (D5);</claim-text><claim-text>applying a sixth hashing algorithm to the transaction data (D5) to create a hash value (H7);</claim-text><claim-text>applying a seventh hashing algorithm to the hash value (H6) and the hash value (H7) to create a hash value (H8);</claim-text><claim-text>associating one or both of the hash values (H7) and (H8) with the transaction data (D5).</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A decentralized computing system for processing distributed ledger transactions comprising:<claim-text>a distributed ledger object router having a timestamp module, an encryption module, and a communication module;</claim-text><claim-text>one or more client devices having a distributed ledger transaction module to receive input data and generate transaction data, which is in electronic communication with the distributed ledger object router;</claim-text><claim-text>a distributed ledger validator node associated with the distributed ledger object router;</claim-text><claim-text>a persistent, immutable data store;</claim-text><claim-text>the timestamp module operating to generate timestamp data identifying when transaction data is received by the distributed ledger transaction module;</claim-text><claim-text>one or more hashing modules for hashing transaction data, timestamp data, and/or hashing values;</claim-text><claim-text>wherein when one of the one or more client devices receives input data and initiates a transaction and generates transaction data (D1), the timestamp module generates timestamp data (T1) derived from a network time signal, and the one or more hashing modules apply a first hashing algorithm to the timestamp data (T1) and the transaction data (D1) to create a hash value (H1);</claim-text><claim-text>wherein the distributed ledger object router associates the hash value (H1) with the transaction data (D1);</claim-text><claim-text>wherein the encryption module encrypts the transaction data (T1) and hash value (H1), and optionally the timestamp data (T1), and transmits the encrypted transaction data (T1), hash value (H1), and optionally the timestamp data (T1), to a distributed ledger validator node.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The decentralized computing system of <claim-ref idref="CLM-00012">claim 12</claim-ref>:<claim-text>wherein when one of the one or more client devices receives input data and initiates a second transaction and generates transaction data (D2), the one or more hashing modules apply a second hashing algorithm to the transaction data (D2) to create a hash value (H2) and apply a third hashing algorithm to the hash value (H1) and the hash value (H2) to create a hash value (H3);</claim-text><claim-text>wherein the distributed ledger object router associates one or both of the hash values (H2) and (H3) with the transaction data (D2).</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The decentralized computing system of <claim-ref idref="CLM-00013">claim 13</claim-ref>:<claim-text>wherein when one of the one or more client devices receives input data and initiates a third transaction and generates transaction data (D3), the one or more hashing modules apply a fourth hashing algorithm to the transaction data (D3) to create a hash value (H4) and apply a fifth hashing algorithm to the hash value (H3) and the hash value (H4) to create a hash value (H5);</claim-text><claim-text>wherein the distributed ledger object router associates one or both of the hash values (H4) and (H5) with the transaction data (D3).</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The decentralized computing system of <claim-ref idref="CLM-00012">claim 12</claim-ref>:<claim-text>wherein the distributed ledger validator node receives the encrypted transaction data and associated hash values and unencrypts the transaction data and hash values;</claim-text><claim-text>wherein the distributed ledger validator node determines the validity of the transaction data;</claim-text><claim-text>wherein the distributed ledger validator node determination of the validity of the transaction data is transmitted to the distributed ledger object router and to other distributed ledger validator nodes;</claim-text><claim-text>wherein if the distributed ledger validator nodes obtain a consensus majority threshold to validate the transaction data, the transaction data is added to the immutable persistent ledger data store;</claim-text><claim-text>wherein the distributed ledger validator node processes the transaction data independently using a first-in-first-out sequence based upon the hash values.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The decentralized computing system of <claim-ref idref="CLM-00014">claim 14</claim-ref>:<claim-text>wherein the distributed ledger validator node receives the encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5);</claim-text><claim-text>wherein the distributed ledger validator node unencrypts the encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5);</claim-text><claim-text>wherein the distributed ledger validator node determines the validity of the transaction data (D1), (D2), (D3);</claim-text><claim-text>wherein the distributed ledger validator node determination of the validity of the transaction data (D1), (D2), (D3) is transmitted to the distributed ledger object router and to other distributed ledger validator nodes;</claim-text><claim-text>wherein if the distributed ledger validator nodes obtain a consensus majority threshold to validate the transaction data (D1), (D2), and/or (D3), the transaction data (D1), (D2), and/or (D3) is added to the immutable persistent ledger data store;</claim-text><claim-text>wherein the distributed ledger validator node processes the transaction data independently using a first-in-first-out sequence based upon one or more of the hash values (H1), (H2), (H3), (H4), and (H5).</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A method for processing distributed ledger transactions comprising the steps of:<claim-text>initiating a distributed ledger transaction using a client device in electronic communication with a distributed ledger object router by entering input data to generate transaction data (D1);</claim-text><claim-text>generating timestamp data (T1) for the transaction, the timestamp data (T1) identifying a time when the transaction data was acquired, said timestamp data (T1) being derived from a network time signal;</claim-text><claim-text>applying a first hashing algorithm to the timestamp data (T1) and the transaction data (D1) to create a hash value (H1);</claim-text><claim-text>associating the hash value (H1) with the transaction data (D1), and optionally, associating the timestamp data (T1) with the transaction data (D1);</claim-text><claim-text>initiating a second distributed ledger transaction using the client device or another client device in electronic communication with the distributed ledger object router by entering input data to generate transaction data (D2);</claim-text><claim-text>applying a second hashing algorithm to the transaction data (D2) to create a hash value (H2);</claim-text><claim-text>applying a third hashing algorithm to the hash value (H1) and the hash value (H2) to create a hash value (H3);</claim-text><claim-text>associating one or both of the hash values (H2) and (H3) with the transaction data (D2);</claim-text><claim-text>initiating a third distributed ledger transaction using the client device or another client device in electronic communication with the distributed ledger object router by entering input data to generate transaction data (D3);</claim-text><claim-text>applying a fourth hashing algorithm to the transaction data (D2) to create a hash value (H4);</claim-text><claim-text>applying a fifth hashing algorithm to the hash value (H3) and the hash value (H4) to create a hash value (H5);</claim-text><claim-text>associating one or both of the hash values (H4) and (H5) with the transaction data (D3);</claim-text><claim-text>encrypting the transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5);</claim-text><claim-text>transmitting the encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5) to a distributed ledger validator node;</claim-text><claim-text>the distributed ledger validator node unencrypting received encrypted transaction data (D1), (D2), and (D3) and any associated hash values (H1), (H2), (H3), (H4), and (H5);</claim-text><claim-text>the distributed ledger validator node determining the validity of the transaction data (D1), (D2), (D3);</claim-text><claim-text>the distributed ledger validator node transmitting the distributed ledger validator node determination of the validity of the transaction data (D1), (D2), (D3) to the distributed ledger object router and to other distributed ledger validator nodes;</claim-text><claim-text>if the distributed ledger validator nodes obtain a consensus majority threshold to validate the transaction data (D1), (D2), and/or (D3) adding the validated transaction data to an immutable persistent ledger data store;</claim-text><claim-text>wherein the distributed ledger validator node processes the transaction data independently using a first-in-first-out sequence based upon one or more of the hash values (H1), (H2), (H3), (H4), and (H5).</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the transaction data (D1), (D2), (D3) are processed in order according to the hash values.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, further comprising:<claim-text>initiating a fourth distributed ledger transaction using the client device or another client device in electronic communication with another distributed ledger object router by entering input data to generate transaction data (D4);</claim-text><claim-text>generating timestamp data (T2) for the transaction, the timestamp data (T2) identifying a time when the transaction data was acquired, said timestamp data (T2) being derived from a network time signal;</claim-text><claim-text>applying a fifth hashing algorithm to the transaction data (D4) and the timestamp data (T2) to create a hash value (H6);</claim-text><claim-text>associating the hash value (H6) with the transaction data (D4).</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising:<claim-text>initiating a fifth distributed ledger transaction using the client device or another client device in electronic communication with the another distributed ledger object router by entering input data to generate transaction data (D5);</claim-text><claim-text>applying a sixth hashing algorithm to the transaction data (D5) to create a hash value (H7);</claim-text><claim-text>applying a seventh hashing algorithm to the hash value (H6) and the hash value (H7) to create a hash value (H8);</claim-text><claim-text>associating one or both of the hash values (H7) and (H8) with the transaction data (D5).</claim-text></claim-text></claim></claims></us-patent-application>