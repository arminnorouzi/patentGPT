<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004416A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004416</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17779764</doc-number><date>20200819</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>201911403018.5</doc-number><date>20191230</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>45558</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5055</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2009</main-group><subgroup>4557</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">CPU Resource Reservation Method and Apparatus, and Related Device Thereof</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>INSPUR ELECTRONIC INFORMATION INDUSTRY CO., LTD.</orgname><address><city>Jinan, Shandong</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>YAN</last-name><first-name>Bingheng</first-name><address><city>Jinan, Shandong</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/CN2020/109935</doc-number><date>20200819</date></document-id><us-371c12-date><date>20220525</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Provided are a Central Processing Unit (CPU) resource reservation method, apparatus, and device, and a computer-readable memory medium. The method includes: selecting a target working node according to a received Virtual Machine (VM) startup request; obtaining a total number of virtual cores and a number of allocatable physical cores in the target working node statistically; performing calculation to obtain an available CPU quota according to the total number of virtual cores and the number of allocatable physical cores; and performing CPU resource reservation configuration on the target working node by use of the available CPU quota. According to the CPU resource reservation method, the reservation of CPU resources in a VM system may be implemented more flexibly and efficiently.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="155.87mm" wi="120.06mm" file="US20230004416A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="174.41mm" wi="122.09mm" file="US20230004416A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="190.67mm" wi="125.90mm" file="US20230004416A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">The present application claims priority to China Patent Application No. 201911403018.5, filed to the Patent Office of the People's Republic of China on Dec. 30, 2019, and entitled &#x201c;CPU Resource Reservation Method and Apparatus, and Related Device Thereof&#x201d;, the contents of which are hereby incorporated by reference in its entirety.</p><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present application relates to the technical field of Virtual Machines (VMs), and particularly to a Central Processing Unit (CPU) resource reservation method, as well as a CPU resource reservation apparatus and device, and a computer-readable memory medium.</p><heading id="h-0003" level="1">BACKGROUND ART</heading><p id="p-0004" num="0003">As an important service mode of cloud computing, Infrastructure as a Service (IaaS) is a main form of a public cloud and a private cloud nowadays, which implements service encapsulation of computing, storage and network resources and other basic resources, and provides VMs to complete the supply and delivery of the resources. A VM is a main resource carrier for customer service, and each performance index thereof is quite important to the customer service, wherein the CPU computing performance is the most important. Therefore, certain CPU resources are usually needed to be reserved for VMs disposing important services to ensure the operation of key VMs.</p><p id="p-0005" num="0004">In the prior art, CPU resources are usually reserved by CPU binding. However, in this implementation mode, after CPU binding is completed, a bound CPU is only allowed to be used by a corresponding VM, and cannot be used effectively by other VMs. Therefore, it is necessary to perform CPU binding for each VM to implement CPU resource reservation, which increases the complexity of a CPU resource reservation mechanism and makes the flexibility relatively low.</p><p id="p-0006" num="0005">Therefore, how to implement the effective reservation of CPU resources in a VM system flexibly is a problem urgent to be solved by those skilled in the art.</p><heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0007" num="0006">An objective of the present application is to provide a CPU resource reservation method, which may implement the reservation of CPU resources in a VM system more flexibly and efficiently. Another objective of the present application is to provide a CPU resource reservation apparatus, system, and device, and a computer-readable memory medium, which also have the above-mentioned beneficial effect.</p><p id="p-0008" num="0007">In order to solve the foregoing technical problem, the present application provides a CPU resource reservation method, including:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0008">selecting a target working node according to a received VM startup request;</li>        <li id="ul0002-0002" num="0009">obtaining a total number of virtual cores and a number of allocatable physical cores in the target working node statistically;</li>        <li id="ul0002-0003" num="0010">performing calculation to obtain an available CPU quota according to the total number of virtual cores and the number of allocatable physical cores; and</li>        <li id="ul0002-0004" num="0011">performing CPU resource reservation configuration on the target working node by use of the available CPU quota.</li>    </ul>    </li></ul></p><p id="p-0009" num="0012">Preferably, the selecting a target working node according to a received VM startup request includes:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0013">calling a preset node selection strategy in case that the VM startup request is received; and</li>        <li id="ul0004-0002" num="0014">selecting the target working node from all working nodes according to the preset node selection strategy.</li>    </ul>    </li></ul></p><p id="p-0010" num="0015">Preferably, the preset node selection strategy is a load balancing strategy.</p><p id="p-0011" num="0016">Preferably, before the selecting the target working node from all working nodes according to the preset node selection strategy, the method further includes:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0017">sequencing each working node according to a sequence from low to high CPU usages.</li>    </ul>    </li></ul></p><p id="p-0012" num="0018">Preferably, the obtaining a total number of virtual cores in the target working node statistically includes:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0019">determining an operating VM in operation in the target working node;</li>        <li id="ul0008-0002" num="0020">obtaining a number of virtual cores of each operating VM statistically; and</li>        <li id="ul0008-0003" num="0021">calculating a sum of the numbers of virtual cores of each operating VM to obtain the total number of virtual cores.</li>    </ul>    </li></ul></p><p id="p-0013" num="0022">Preferably, the obtaining a number of allocatable physical cores in the target working node statistically includes:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0023">obtaining the number of available physical cores in the target working node statistically;</li>        <li id="ul0010-0002" num="0024">obtaining a number of reserved physical cores in the target working node statistically; and</li>        <li id="ul0010-0003" num="0025">calculating a difference between the number of available physical cores and the number of reserved physical cores to obtain the number of allocatable physical cores.</li>    </ul>    </li></ul></p><p id="p-0014" num="0026">Preferably, the performing CPU resource reservation configuration on the target working node by use of the available CPU quota includes:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0027">performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</li>    </ul>    </li></ul></p><p id="p-0015" num="0028">In order to solve the foregoing technical problem, the present application also provides a CPU resource reservation apparatus, including:<ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0029">a working node selection module, configured to select a target working node according to a received VM startup request;</li>        <li id="ul0014-0002" num="0030">a core number statistics module, configured to obtain the total number of virtual cores and the number of allocatable physical cores in the target working node statistically;</li>        <li id="ul0014-0003" num="0031">a core number calculation module, configured to perform calculation to obtain an available CPU quota according to the total number of virtual cores and the number of allocatable physical cores; and</li>        <li id="ul0014-0004" num="0032">a resource reservation configuration module, configured to perform CPU resource reservation configuration on the target working node by use of the available CPU quota.</li>    </ul>    </li></ul></p><p id="p-0016" num="0033">In order to solve the foregoing technical problem, the present application also provides a CPU resource reservation device, including:<ul id="ul0015" list-style="none">    <li id="ul0015-0001" num="0000">    <ul id="ul0016" list-style="none">        <li id="ul0016-0001" num="0034">a memory, configured to store a computer program; and</li>        <li id="ul0016-0002" num="0035">a processor, configured to execute the computer program to implement any steps of the above-mentioned CPU resource reservation method.</li>    </ul>    </li></ul></p><p id="p-0017" num="0036">In order to solve the foregoing technical problem, the present application also provides a computer-readable memory medium, storing a computer program which is executed by a processor to implement any steps of the above-mentioned CPU resource reservation method.</p><p id="p-0018" num="0037">The CPU resource reservation method provided in the present application includes: selecting a target working node according to a received VM startup request; obtaining a total number of virtual cores and a number of allocatable physical cores in the target working node statistically; performing calculation to obtain an available CPU quota according to the total number of virtual cores and the number of allocatable physical cores; and performing CPU resource reservation configuration on the target working node by use of the available CPU quota.</p><p id="p-0019" num="0038">It can be seen that, according to the CPU resource reservation method provided in the present application, after the target working node is determined, the total number of virtual cores and the number of allocatable physical cores therein are obtained statistically, wherein the total number of virtual cores is the total number of virtual cores of all VMs in operation in the target working node, and the number of allocatable physical cores is the total number of freely allocatable physical cores in the target working node. Finally, calculation is performed to obtain the available CPU quota based on the two numbers, and CPU resource reservation configuration is performed on the target working node based on the available CPU quota. As such, CPU resource reservation is implemented according to a present operating state of the target working node. Compared with a common CPU binding mode, this implementation mode has the advantages that all VMs in the target working node are allowed to use a reserved CPU resource effectively, so that the flexibility is improved, and meanwhile, the complexity in CPU resource reservation is reduced.</p><p id="p-0020" num="0039">All of the CPU resource reservation apparatus and device and computer-readable memory medium provided in the present application have the above-mentioned beneficial effects. Elaborations are omitted herein.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0021" num="0040">In order to describe the technical solutions in the embodiments of the present application or the prior art more clearly, the drawings needed to be used in descriptions about the embodiments or the conventional art will be introduced simply below. Clearly, the drawings in the following descriptions are only the embodiments of the present application. Other drawings may further be obtained by those ordinarily skilled in the art according to the provided drawings without creative work.</p><p id="p-0022" num="0041"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flowchart of a CPU resource reservation method according to the present application.</p><p id="p-0023" num="0042"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic structural diagram of a server virtualization system according to the present application.</p><p id="p-0024" num="0043"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic structural diagram of a CPU resource reservation apparatus according to the present application.</p><p id="p-0025" num="0044"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic structural diagram of a CPU resource reservation device according to the present application.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0026" num="0045">A core of the present application is to provide a CPU resource reservation method, which may implement performance evaluation on an Artificial Intelligence (AI) application more effectively and improves the performance evaluation efficiency while ensuring relatively high accuracy. Another core of the present application is to provide a CPU resource reservation apparatus and device and a computer-readable memory medium, which also have the above-mentioned beneficial effects.</p><p id="p-0027" num="0046">In order to make the objectives, technical solutions, and advantages of the embodiments of the present application clearer, the technical solutions in the embodiments of the present application will be described clearly and completely below in combination with the drawings in the embodiments of the present application. Clearly, the described embodiments are not all but part of embodiments of the present application. All other embodiments obtained by those ordinarily skilled in the art based on the embodiments in the present application without creative work shall fall within the scope of protection of the present application.</p><p id="p-0028" num="0047">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flowchart of a CPU resource reservation method according to the present application. The CPU resource reservation method may include the following steps.</p><p id="p-0029" num="0048">In S<b>101</b>, a target working node is selected according to a received VM startup request.</p><p id="p-0030" num="0049">This step aims to implement the determination of the target working node. The target working node is a working node requiring CPU resource reservation configuration. The VM startup request is a request of starting up a VM. Specifically, a virtualization system mainly includes a control node, working nodes, and a shared storage pool. The control node is a central control node in the virtualization system, generally as well as an entry for a customer operation, and is configured to complete global resource management and scheduling. The working node is a node configured to operate a VM in the virtualization system, and may receive an instruction of the control node and execute a specific VM operation. The shared storage pool is a storage pool accessible for multiple working nodes at the same time, and is mainly configured to store service data of VMs, e.g., virtual disks. Therefore, when the control node receives the VM startup request, the target working node is selected and determined from many working nodes of the virtualization system.</p><p id="p-0031" num="0050">Preferably, the operation that a target working node is selected according to a received VM startup request may include that: a preset node selection strategy is called in case that the VM startup request is received; and the target working node is selected from all working nodes according to the preset node selection strategy.</p><p id="p-0032" num="0051">The present preferred embodiment provides a relatively specific method for selecting the target working node, namely selecting based on a preset node selection strategy. Specifically, a node selection strategy may be pre-established and stored in a preset storage space for calling. Therefore, when the VM startup request is received, the preset node selection strategy is called immediately, and the target working node is selected by use of the preset node selection strategy. A specific content of the preset node selection strategy is preset non-uniquely by a technician according to an actual situation as long as the target working node may be selected. No limits are made thereto in the present application.</p><p id="p-0033" num="0052">Preferably, the preset node selection strategy may be a load balancing strategy.</p><p id="p-0034" num="0053">The present preferred embodiment provides a preset node selection strategy of a specific type, i.e., a load-balancing strategy. That is, the target working node is determined according to a present load condition of each working node. Certainly, the selection strategy is non-unique but only an implementation mode provided in the preferred embodiment of the present application, and for example, may also be a focus strategy or a positive-negative association strategy.</p><p id="p-0035" num="0054">Preferably, before the operation that the target working node is selected from all working nodes according to the preset node selection strategy, the method may further include that: each working node is sequenced according to a sequence from low to high CPU usages.</p><p id="p-0036" num="0055">The present preferred embodiment provides a more specific method for selecting the target working node. Specifically, before the target working node is selected by use of the preset node selection strategy, each working node may be sequenced first, namely sequenced according to a sequence from low to high CPU usages, and then the target working node is selected and determined from all the sequenced working nodes. Therefore, the efficiency of selecting the target working node is improved effectively.</p><p id="p-0037" num="0056">In S<b>102</b>, the total number of virtual cores and the number of allocatable physical cores in the target working node are obtained statistically.</p><p id="p-0038" num="0057">This step aims to implement the statistical acquisition of the total number of virtual cores and the number of allocatable physical cores in the target working node. The total number of virtual cores is the total number of virtual cores of all VMs in operation in the target working node. The number of allocatable physical cores is the total number of freely allocatable physical cores in the target working node.</p><p id="p-0039" num="0058">Preferably, the operation that the total number of virtual cores in the target working node is obtained statistically may include that: an operating VM in operation in the target working node is determined; the number of virtual cores of each operating VM is obtained statistically; and a sum of the numbers of virtual cores of each VM is calculated to obtain the total number of virtual cores.</p><p id="p-0040" num="0059">The present preferred embodiment provides a relatively specific method for calculating the total number of virtual cores. Specifically, each VM in operation, i.e., the above-mentioned operating VM, in the target working node is determined first. Furthermore, virtual cores in each operating VM are counted to obtain the above-mentioned number of virtual cores. Finally, the numbers of virtual cores of each operating VM are summed, namely the numbers of virtual cores in each operating VM are added, so as to obtain the total number of virtual cores.</p><p id="p-0041" num="0060">Preferably, the operation that the number of allocatable physical cores in the target working node is obtained statistically may include that: the number of available physical cores in the target working node is obtained statistically; the number of reserved physical cores in the target working node is obtained statistically; and a difference between the number of available physical cores and the number of reserved physical cores is calculated to obtain the number of allocatable physical cores.</p><p id="p-0042" num="0061">The present preferred embodiment provides a relatively specific method for calculating the number of allocatable physical cores. Specifically, available physical cores, i.e., idle physical cores, in the target working node are counted first to obtain the number of available physical cores. Reserved physical cores in the target working node are counted to obtain the number of reserved physical cores, wherein the reserved physical core corresponds to a physical core requested to be reserved for a VM. Finally, the number of reserved physical cores is subtracted from the number of available physical cores so as to obtain the number of allocatable physical cores.</p><p id="p-0043" num="0062">In S<b>103</b>, calculation is performed to obtain an available CPU quota according to the total number of virtual cores and the number of allocatable physical cores.</p><p id="p-0044" num="0063">In S<b>104</b>, CPU resource reservation configuration is performed on the target working node by use of the available CPU quota.</p><p id="p-0045" num="0064">The above step aims to implement CPU resource reservation configuration, specifically by use of a CPU resource reservation factor, i.e., the above-mentioned available CPU quota, obtained by performing calculation based on the total number of virtual cores and the number of allocatable physical cores. As such, an available CPU quota for a VM is set to control a CPU resource upper limit available for the VM, which is equivalent to regulating a resource reservation degree elastically according to a situation of a VM system. Therefore, the balance between the flexibility and the reservation effectiveness is ensured. Hereto, CPU resource reservation configuration is completed.</p><p id="p-0046" num="0065">Preferably, the operation that CPU resource reservation configuration is performed on the target working node by use of the available CPU quota may include that: CPU resource reservation configuration is performed on each VM in the target working node by use of the available CPU quota.</p><p id="p-0047" num="0066">Specifically, performing CPU resource reservation configuration on the target working node means performing CPU resource reservation configuration on each VM in the target working node, thereby configuring a CPU resource upper limit available for each VM.</p><p id="p-0048" num="0067">According to the CPU resource reservation method provided in the present application, after the target working node is determined, the total number of virtual cores and the number of allocatable physical cores therein are obtained statistically, wherein the total number of virtual cores is the total number of virtual cores of all VMs in operation in the target working node, and the number of allocatable physical cores is the total number of freely allocatable physical cores in the target working node. Finally, calculation is performed to obtain the available CPU quota based on the two numbers, and CPU resource reservation configuration is performed on the target working node based on the available CPU quota. As such, CPU resource reservation is implemented according to a present operating state of the target working node. Compared with a common CPU binding mode, this implementation mode has the advantages that all VMs in the target working node are allowed to use a reserved CPU resource effectively, so that the flexibility is improved, and meanwhile, the complexity in CPU resource reservation is reduced.</p><p id="p-0049" num="0068">Based on each of the above-mentioned embodiments, an embodiment of the present application provides a more specific CPU resource reservation method.</p><p id="p-0050" num="0069">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, <figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic structural diagram of a server virtualization system according to the present application, and a node composition and VM startup process of a present mainstream server virtualization system are shown. First, a control node selects a proper working node (target working node) according to a set strategy (preset node selection strategy). Then, an instruction is given to the working node to start up a VM. Meanwhile, a CPU resource reservation mechanism is added to an existing VM startup process, and a CPU resource reservation factor is introduced to obtain CPUQuota (available CPU quota) by calculation, thereby regulating a resource reservation degree elastically according to a situation of the system and ensuring the balance between the flexibility and the reservation effectiveness. For example, CPUQuota=50% represents that a resource upper limit for a present process (or VM) is a half of calculation power of physical cores, and CPUQuota=200% represents that a resource upper limit for the present process (or VM) is double calculation power of physical cores.</p><p id="p-0051" num="0070">First, for ease of description of the solution, the following definitions are made:<ul id="ul0017" list-style="none">    <li id="ul0017-0001" num="0000">    <ul id="ul0018" list-style="none">        <li id="ul0018-0001" num="0071">pCPU: it represents the number of physical cores available for an operating VM in a working node;</li>        <li id="ul0018-0002" num="0072">vCPU (VMj): it represents the number of virtual cores requested by a j<sup>th </sup>VM operating in a working node;</li>        <li id="ul0018-0003" num="0073">rCPU (VMj): it represents the number of reserved physical cores requested by a j<sup>th </sup>VM operating in a working node; and</li>        <li id="ul0018-0004" num="0074">rCPU: it represents the number of all reserved physical cores for a VM in operation in a working node, and rCPU&#x3c;=pCPU</li>    </ul>    </li></ul></p><p id="p-0052" num="0075">It can be seen that a CPU resource requested by a VM may be represented as two parts, i.e., the number of non-reserved virtual cores and the number of reserved physical cores, represented as VM (v, r).</p><p id="p-0053" num="0076">Furthermore, concepts of reservation factors are defined as follows:<ul id="ul0019" list-style="none">    <li id="ul0019-0001" num="0000">    <ul id="ul0020" list-style="none">        <li id="ul0020-0001" num="0077">K: it is a CPU resource reservation factor of the virtualization system with a value range of [0%, 100%], wherein a usage of a reserved CPU resource is regarded as 100% in the present application, so as to satisfy resource reservation; and</li>        <li id="ul0020-0002" num="0078">R: it is a CPU resource reservation ratio of a working node, defined as a ratio of the number of logically reserved physical cores to the number of available physical cores: K*rCPU/pCPU.</li>    </ul>    </li></ul></p><p id="p-0054" num="0079">In such case, a CPU usage of a node after resource reservation is an average value between &#x201c;a non-reserved physical core usage&#x201d; and &#x201c;a reserved physical core usage&#x201d;. However, during practical implementation, a CPU usage of a working node is defined as: Usage=monitored average CPU usage of the system*(1&#x2212;R)+R.</p><p id="p-0055" num="0080">It can be seen that, if more physical cores are reserved, a CPU usage of a working node is higher, and the probability that the working node is selected is lower under a selection strategy of the control node.</p><p id="p-0056" num="0081">Based on the above definitions, a specific implementation process of the CPU resource reservation method provided in the embodiment of the present application is as follows.</p><p id="p-0057" num="0082">At <b>1</b>, a control node selects a working node.</p><p id="p-0058" num="0083">The control node sequences all available working nodes from low to high usages, and then selects a specific working node in combination with another strategy.</p><p id="p-0059" num="0084">At <b>2</b>, CPU resource allocation is performed on the working node.</p><p id="p-0060" num="0085">(1) The number of virtual cores in the working node, i.e., a sum of the numbers of virtual cores of all VMs in operation (total number of virtual cores), is calculated:</p><p id="p-0061" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>v</i>CPU=&#x3a3;<i>v</i>CPU(VM<i>j</i>).<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0062" num="0086">(2) The number of freely allocatable physical cores (the number of allocatable physical cores) in the working node is calculated:</p><p id="p-0063" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>fp</i>CPU=<i>p</i>CPU&#x2212;<i>K*r</i>CPU.<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0064" num="0087">(3) For any VM (v, r), an available CPU quota CPUQuota is calculated and set:</p><p id="p-0065" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mi>CPUQuota</mi>  <mo>=</mo>  <mrow>   <mfrac>    <mrow>     <mi>v</mi>     <mo>*</mo>     <mi>fpCPU</mi>    </mrow>    <mi>vCPU</mi>   </mfrac>   <mo>+</mo>   <mrow>    <mi>K</mi>    <mo>*</mo>    <msub>     <mrow>      <mi>r</mi>      <mtext>   </mtext>     </mrow>     <mo>&#x2218;</mo>    </msub>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0066" num="0088">Hereto, CPU resource reservation is completed.</p><p id="p-0067" num="0089">Furthermore, a specific method for implementing CPU resource allocation of a working node will be described below with a specific example. For example, a 32-Core (32C) physical server is set to implement hypervisor operation with 6C, and then the number of available physical cores is pCPU=26. It is assumed that four VMs are in operation thereon, i.e., A (4, 4,), B (8, 0), C (12, 4), and D (16, 0) respectively. That is, 8 cores and 4 cores are requested and reserved respectively for VM A, 8 cores are requested for VM B, 16 cores and 4 cores are requested and reserved respectively for VM C, and 16 cores are requested for VM D. Therefore, for the working node, rCPU=8. Meanwhile, K=100% is set. Then, a calculation process is as follows.</p><p id="p-0068" num="0090">(1) The number of virtual cores in the working node is: vCPU=4+8+12+16=40.</p><p id="p-0069" num="0091">(2) The number of freely allocatable physical cores in the working node is:<ul id="ul0021" list-style="none">    <li id="ul0021-0001" num="0000">    <ul id="ul0022" list-style="none">        <li id="ul0022-0001" num="0092">fpCPU=26&#x2212;8=18.</li>    </ul>    </li></ul></p><p id="p-0070" num="0093">(3) CPU resource reservation configuration is performed on each VM:<ul id="ul0023" list-style="none">    <li id="ul0023-0001" num="0000">    <ul id="ul0024" list-style="none">        <li id="ul0024-0001" num="0094">VM A: CPUQuota=4&#xd7;18/40+4=580%;</li>        <li id="ul0024-0002" num="0095">VM B: CPUQuota=8&#xd7;18/40=360%;</li>        <li id="ul0024-0003" num="0096">VM C: CPUQuota=12&#xd7;18/40+4=940%; and</li>        <li id="ul0024-0004" num="0097">VM D: CPUQuota=16&#xd7;18/40=720%.</li>    </ul>    </li></ul></p><p id="p-0071" num="0098">It can be seen that, according to the CPU resource reservation method provided in the embodiment of the present application, after the target working node is determined, the total number of virtual cores and the number of allocatable physical cores therein are obtained statistically, wherein the total number of virtual cores is the total number of virtual cores of all VMs in operation in the target working node, and the number of allocatable physical cores is the total number of freely allocatable physical cores in the target working node. Finally, calculation is performed to obtain the available CPU quota based on the two numbers, and CPU resource reservation configuration is performed on the target working node based on the available CPU quota. As such, CPU resource reservation is implemented according to a present operating state of the target working node. Compared with a common CPU binding mode, this implementation mode has the advantages that all VMs in the target working node are allowed to use a reserved CPU resource effectively, so that the flexibility is improved, and meanwhile, the complexity in CPU resource reservation is reduced.</p><p id="p-0072" num="0099">In order to solve the foregoing problem, referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, <figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic structural diagram of a CPU resource reservation apparatus according to the present application. The CPU resource reservation apparatus may include:<ul id="ul0025" list-style="none">    <li id="ul0025-0001" num="0000">    <ul id="ul0026" list-style="none">        <li id="ul0026-0001" num="0100">a working node selection module <b>100</b>, configured to select a target working node according to a received VM startup request;</li>        <li id="ul0026-0002" num="0101">a core number statistics module <b>200</b>, configured to obtain the total number of virtual cores and the number of allocatable physical cores in the target working node statistically;</li>        <li id="ul0026-0003" num="0102">a core number calculation module <b>300</b>, configured to perform calculation to obtain an available CPU quota according to the total number of virtual cores and the number of allocatable physical cores; and</li>        <li id="ul0026-0004" num="0103">a resource reservation configuration module <b>400</b>, configured to perform CPU resource reservation configuration on the target working node by use of the available CPU quota.</li>    </ul>    </li></ul></p><p id="p-0073" num="0104">It can be seen that, according to the CPU resource reservation apparatus provided in the embodiment of the present application, after the target working node is determined, the total number of virtual cores and the number of allocatable physical cores therein are obtained statistically, wherein the total number of virtual cores is the total number of virtual cores of all VMs in operation in the target working node, and the number of allocatable physical cores is the total number of freely allocatable physical cores in the target working node. Finally, calculation is performed to obtain the available CPU quota based on the two numbers, and CPU resource reservation configuration is performed on the target working node based on the available CPU quota. As such, CPU resource reservation is implemented according to a present operating state of the target working node. Compared with a common CPU binding mode, this implementation mode has the advantages that all VMs in the target working node are allowed to use a reserved CPU resource effectively, so that the flexibility is improved, and meanwhile, the complexity in CPU resource reservation is reduced.</p><p id="p-0074" num="0105">As a preferred embodiment, the working node selection module <b>100</b> may include:<ul id="ul0027" list-style="none">    <li id="ul0027-0001" num="0000">    <ul id="ul0028" list-style="none">        <li id="ul0028-0001" num="0106">a strategy calling unit, configured to call a preset node selection strategy in case that the VM startup request is received; and</li>        <li id="ul0028-0002" num="0107">a node selection unit, configured to select the target working node from all working nodes according to the preset node selection strategy.</li>    </ul>    </li></ul></p><p id="p-0075" num="0108">As a preferred embodiment, the working node selection module <b>100</b> may further include a node sequencing unit, configured to, before the target working node is selected from all working nodes according to the preset node selection strategy, sequence each working node according to a sequence from low to high CPU usages.</p><p id="p-0076" num="0109">As a preferred embodiment, the core number statistics module <b>200</b> may include:<ul id="ul0029" list-style="none">    <li id="ul0029-0001" num="0000">    <ul id="ul0030" list-style="none">        <li id="ul0030-0001" num="0110">a VM determination unit, configured to determine an operating VM in operation in the target working node;</li>        <li id="ul0030-0002" num="0111">a VM statistics unit, configured to obtain the number of virtual cores of each operating VM statistically; and</li>        <li id="ul0030-0003" num="0112">a sum calculation unit, configured to calculate a sum of the numbers of virtual cores of each operating VM to obtain the total number of virtual cores.</li>    </ul>    </li></ul></p><p id="p-0077" num="0113">As a preferred embodiment, the core number statistics module <b>200</b> may include:<ul id="ul0031" list-style="none">    <li id="ul0031-0001" num="0000">    <ul id="ul0032" list-style="none">        <li id="ul0032-0001" num="0114">a first statistics unit, configured to obtain the number of available physical cores in the target working node statistically;</li>        <li id="ul0032-0002" num="0115">a second statistics unit, configured to obtain the number of reserved physical cores in the target working node statistically; and</li>        <li id="ul0032-0003" num="0116">a difference calculation unit, configured to calculate a difference between the number of available physical cores and the number of reserved physical cores to obtain the number of allocatable physical cores.</li>    </ul>    </li></ul></p><p id="p-0078" num="0117">As a preferred embodiment, the resource reservation configuration module <b>400</b> may specifically be configured to perform CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</p><p id="p-0079" num="0118">Introductions about the apparatus provided in the present application refer to the method embodiment, and elaborations are omitted in the present application.</p><p id="p-0080" num="0119">In order to solve the foregoing problem, referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic structural diagram of a CPU resource reservation device according to the present application. The CPU resource reservation device may include:<ul id="ul0033" list-style="none">    <li id="ul0033-0001" num="0000">    <ul id="ul0034" list-style="none">        <li id="ul0034-0001" num="0120">a memory <b>1</b>, configured to store a computer program; and</li>        <li id="ul0034-0002" num="0121">processor <b>2</b>, configured to execute the computer program to implement any steps of the above-mentioned CPU resource reservation method.</li>    </ul>    </li></ul></p><p id="p-0081" num="0122">Introductions about the device provided in the present application refer to the method embodiment, and elaborations are omitted in the present application.</p><p id="p-0082" num="0123">In order to solve the foregoing problem, the present application also provides a computer-readable memory medium, storing a computer program which is executed by a processor to implement any steps of the above-mentioned CPU resource reservation method.</p><p id="p-0083" num="0124">The computer-readable memory medium may include various media capable of storing program codes such as a U disk, a mobile hard disk, a Read-Only Memory (ROM), a Random Access Memory (RAM), a magnetic disk, or an optical disk.</p><p id="p-0084" num="0125">Introductions about the computer-readable memory medium provided in the present application refer to the method embodiment, and elaborations are omitted in the present application.</p><p id="p-0085" num="0126">Each embodiment in the specification is described progressively. Descriptions made in each embodiment focus on differences from the other embodiments, and the same or similar parts in each embodiment refer to the other embodiments. The apparatus disclosed in the embodiments corresponds to the method disclosed in the embodiments, and thus is described relatively simply, and related parts refer to part of descriptions about the method.</p><p id="p-0086" num="0127">Professionals may further realize that the units and algorithm steps of each example described in combination with the embodiments disclosed herein may be implemented by electronic hardware, computer software, or a combination thereof. In order to describe the interchangeability of hardware and software clearly, the compositions and steps of each example have been generally described in the foregoing descriptions according to functions. Whether these functions are executed by hardware or software depends on specific applications and design constraints of the technical solutions. Professionals may realize the described functions for each specific application by use of different methods, but such realization shall fall within the scope of the present application.</p><p id="p-0087" num="0128">The steps of the method or algorithm described in combination with the embodiments disclosed herein may directly be implemented by hardware, a software module executed by the processor, or a combination thereof. The software module may be arranged in a RAM, a memory, a ROM, an electrically programmable ROM, an electrically erasable programmable ROM, a register, a hard disk, a mobile disk, a Compact Disc Read-Only Memory (CD-ROM), or a memory medium in any form well known in this art.</p><p id="p-0088" num="0129">The CPU resource reservation method, apparatus, and device and computer-readable memory medium provided in the present application are introduced above in detail. The principle and implementation modes of the present application are described herein with specific examples, and the descriptions about the above embodiments are only for helping in understanding the method and core idea of the present application. It is to be pointed out that those ordinarily skilled in the art may further make a plurality of improvements and modifications to the present application without departing from the principle of the present application, and these improvements and modifications shall also fall within the scope of protection of the claims of the present application.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004416A1-20230105-M00001.NB"><img id="EMI-M00001" he="5.67mm" wi="76.20mm" file="US20230004416A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A Central Processing Unit (CPU) resource reservation method, comprising:<claim-text>selecting a target working node according to a received Virtual Machine (VM) startup request;</claim-text><claim-text>obtaining a total number of virtual cores and a number of allocatable physical cores in the target working node statistically;</claim-text><claim-text>performing calculation to obtain an available CPU quota according to the total number of virtual cores and the number of allocatable physical cores; and</claim-text><claim-text>performing CPU resource reservation configuration on the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The CPU resource reservation method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the selecting a target working node according to a received VM startup request comprises:<claim-text>calling a preset node selection strategy in case that the VM startup request is received; and</claim-text><claim-text>selecting the target working node from all working nodes according to the preset node selection strategy.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The CPU resource reservation method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the preset node selection strategy is a load balancing strategy.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The CPU resource reservation method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, before the selecting the target working node from all working nodes according to the preset node selection strategy, further comprising:<claim-text>sequencing each working node according to a sequence from low to high CPU usages.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The CPU resource reservation method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the obtaining a total number of virtual cores in the target working node statistically comprises:<claim-text>determining an operating VM in operation in the target working node;</claim-text><claim-text>obtaining a number of virtual cores of each operating VM statistically; and</claim-text><claim-text>calculating a sum of the numbers of virtual cores of each operating VM to obtain the total number of virtual cores.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The CPU resource reservation method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the obtaining a number of allocatable physical cores in the target working node statistically comprises:<claim-text>obtaining a number of available physical cores in the target working node statistically;</claim-text><claim-text>obtaining a number of reserved physical cores in the target working node statistically; and</claim-text><claim-text>calculating a difference between the number of available physical cores and the number of reserved physical cores to obtain the number of allocatable physical cores.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The CPU resource reservation method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the performing CPU resource reservation configuration on the target working node by use of the available CPU quota comprises:<claim-text>performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. (canceled)</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A Central Processing Unit (CPU) resource reservation device, comprising:<claim-text>a memory, configured to store a computer program; and</claim-text><claim-text>a processor, configured to execute the computer program to implement steps of:</claim-text><claim-text>selecting a target working node according to a received Virtual Machine (VM) startup request;</claim-text><claim-text>obtaining a total number of virtual cores and a number of allocatable physical cores in the target working node statistically;</claim-text><claim-text>performing calculation to obtain an available CPU quota according to the total number of virtual cores and the number of allocatable physical cores; and</claim-text><claim-text>performing CPU resource reservation configuration on the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A computer-readable memory medium, storing a computer program which is executed by a processor to implement steps of:<claim-text>selecting a target working node according to a received Virtual Machine (VM) startup request;</claim-text><claim-text>obtaining a total number of virtual cores and a number of allocatable physical cores in the target working node statistically;</claim-text><claim-text>performing calculation to obtain an available Central Processing Unit (CPU) quota according to the total number of virtual cores and the number of allocatable physical cores; and</claim-text><claim-text>performing CPU resource reservation configuration on the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The CPU resource reservation method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the performing CPU resource reservation configuration on the target working node by use of the available CPU quota comprises:<claim-text>performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The CPU resource reservation method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the performing CPU resource reservation configuration on the target working node by use of the available CPU quota comprises:<claim-text>performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The CPU resource reservation method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the performing CPU resource reservation configuration on the target working node by use of the available CPU quota comprises:<claim-text>performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The CPU resource reservation method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the performing CPU resource reservation configuration on the target working node by use of the available CPU quota comprises:<claim-text>performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The CPU resource reservation method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the performing CPU resource reservation configuration on the target working node by use of the available CPU quota comprises:<claim-text>performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The CPU resource reservation device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the device, when executing the computer program to select the target working node according to the received VM startup request, is further configured to execute the computer program to implement steps of:<claim-text>calling a preset node selection strategy in case that the VM startup request is received, wherein the preset node selection strategy is a load balancing strategy; and</claim-text><claim-text>selecting the target working node from all working nodes according to the preset node selection strategy, by virtue of sequencing each working node according to a sequence from low to high CPU usages.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The CPU resource reservation device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the device, when executing the computer program to obtain the total number of virtual cores in the target working node statistically, is further configured to execute the computer program to implement steps of:<claim-text>determining an operating VM in operation in the target working node;</claim-text><claim-text>obtaining a number of virtual cores of each operating VM statistically; and</claim-text><claim-text>calculating a sum of the numbers of virtual cores of each operating VM to obtain the total number of virtual cores;</claim-text><claim-text>or</claim-text><claim-text>obtaining a number of available physical cores in the target working node statistically;</claim-text><claim-text>obtaining a number of reserved physical cores in the target working node statistically; and</claim-text><claim-text>calculating a difference between the number of available physical cores and the number of reserved physical cores to obtain the number of allocatable physical cores.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The CPU resource reservation device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the device, when executing the computer program to perform CPU resource reservation configuration on the target working node by use of the available CPU quota, is further configured to execute the computer program to implement steps of:<claim-text>performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer-readable memory medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the computer program which is executed by the processor to select the target working node according to the received VM startup request, further implements steps of:<claim-text>calling a preset node selection strategy in case that the VM startup request is received, wherein the preset node selection strategy is a load balancing strategy; and</claim-text><claim-text>selecting the target working node from all working nodes according to the preset node selection strategy, by virtue of sequencing each working node according to a sequence from low to high CPU usages.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer-readable memory medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the computer program which is executed by the processor to obtain the total number of virtual cores in the target working node statistically, further implements steps of:<claim-text>determining an operating VM in operation in the target working node;</claim-text><claim-text>obtaining a number of virtual cores of each operating VM statistically; and</claim-text><claim-text>calculating a sum of the numbers of virtual cores of each operating VM to obtain the total number of virtual cores;</claim-text><claim-text>or</claim-text><claim-text>obtaining a number of available physical cores in the target working node statistically;</claim-text><claim-text>obtaining a number of reserved physical cores in the target working node statistically; and</claim-text><claim-text>calculating a difference between the number of available physical cores and the number of reserved physical cores to obtain the number of allocatable physical cores.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The computer-readable memory medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the computer program which is executed by the processor to perform CPU resource reservation configuration on the target working node by use of the available CPU quota, further implements steps of:<claim-text>performing CPU resource reservation configuration on each VM in the target working node by use of the available CPU quota.</claim-text></claim-text></claim></claims></us-patent-application>