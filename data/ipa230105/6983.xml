<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006984A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006984</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17896363</doc-number><date>20220826</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>60</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0485</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>602</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>105</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2221</main-group><subgroup>0704</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Digital Rights Management DRM Method, Apparatus, and System</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>PCT/CN2020/077341</doc-number><date>20200229</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17896363</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Huawei Technologies Co., Ltd.</orgname><address><city>Shenzhen</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Liang</last-name><first-name>Zhijian</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Wu</last-name><first-name>Di</first-name><address><city>Shanghai</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Embodiments of this application provide a digital rights management DRM method, apparatus, and system, to implement a DRM interworking operation between DRM servers and clients of different vendors. The method includes: A DRM server encrypts a first media file by using a first encryption method to obtain a first encrypted media file; the DRM server generates content protection description information of the first encrypted media file, where the content protection description information includes a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies the first encryption method; the DRM server performs first formatting on the content protection description information to generate formatted content protection data; the DRM server encapsulates the formatted content protection data to generate a content protection data packet.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="176.36mm" wi="154.77mm" file="US20230006984A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="188.21mm" wi="156.80mm" file="US20230006984A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="244.18mm" wi="132.59mm" orientation="landscape" file="US20230006984A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="122.68mm" wi="93.81mm" file="US20230006984A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="224.71mm" wi="153.25mm" file="US20230006984A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of International Application No. PCT/CN2020/077341, filed on Feb. 29, 2020, the disclosure of which is hereby incorporated by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This application relates to the field of digital rights management technologies, and in particular, to a digital rights management DRM method, apparatus, and system in the field of digital rights management technologies.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Digital rights management (DRM) refers to some technologies used by publishers to control use rights of protected objects. These technologies protect digital media content (for example, software, music, and movies) and hardware, and handle use restrictions of an instance of a digital product.</p><p id="p-0005" num="0004">A DRM system may include a DRM server and a client. The DRM server can provide services such as encryption and authorization of digital media content for the client. When playing encrypted media content encrypted by the DRM server, the client needs to request the DRM server to grant permission to play the encrypted media content, obtain a key for decryption, and then properly decrypt the encrypted media content by using the key and play the media content.</p><p id="p-0006" num="0005">However, because interfaces used for DRM interactions between DRM servers and clients of different vendors are incompatible, and formats of messages used for the DRM interactions are not uniform, a proper DRM interworking operation cannot be performed.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">Embodiments of this application provide a digital rights management DRM method, apparatus, and system, to implement a DRM interworking operation between DRM servers and clients of different vendors.</p><p id="p-0008" num="0007">According to a first aspect, an embodiment of this application provides a digital rights management DRM method. The method includes: A DRM server encrypts a first media file by using a first encryption method to obtain a first encrypted media file; the DRM server generates content protection description information of the first encrypted media file, where the content protection description information includes a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies the first encryption method; the DRM server performs first formatting on the content protection description information to generate formatted content protection data; the DRM server encapsulates the formatted content protection data to generate a content protection data packet; and the DRM server packages the content protection data packet and the first encrypted media file, and sends to a client.</p><p id="p-0009" num="0008">It should be noted that the DRM server described in this embodiment of this application refers to an apparatus that can provide a DRM service for the client. The DRM service includes services such as encryption and authorization of a (digital) media file.</p><p id="p-0010" num="0009">It should be further noted that the DRM server may be deployed on a server. For example, the DRM server may be deployed on a cloud server.</p><p id="p-0011" num="0010">According to the DRM method provided in this embodiment of this application, an entire-process solution based on content protection data packets in a uniform format is provided for the DRM server and the DRM client. The DRM server and the DRM client that use the solution can implement an accurate and effective interworking operation. Further, because the formatted content protection data in packaged data sent by the DRM server is obtained by performing the first formatting on content protection data, after receiving the packaged data, the client may parse the packaged data to obtain the formatted content protection data based on the first formatting. Therefore, the DRM server and the client can transmit data in a uniform format to perform a DRM interworking operation.</p><p id="p-0012" num="0011">Optionally, the first media file may include a plurality of types. This is not limited in this embodiment of this application.</p><p id="p-0013" num="0012">For example, the first media file may be in a moving picture experts group (MPEG) format, an MP4 (MPEG-4) format, or the like.</p><p id="p-0014" num="0013">For another example, the first media file may be an audio file, a video file, or the like.</p><p id="p-0015" num="0014">For another example, the first media file may be a streaming media file or a media fragment file in a streaming media file.</p><p id="p-0016" num="0015">It should be noted that the streaming media file may include one media description file and a plurality of media segment files. The media description file describes a feature of the streaming media file, for example, a storage address, a playing sequence, playing time, and an obtaining manner of the plurality of media fragment files.</p><p id="p-0017" num="0016">It should be noted that, in this embodiment of this application, an &#x201c;encryption method&#x201d; (for example, the first encryption method) is also referred to as an &#x201c;encryption manner&#x201d; or an &#x201c;encrypted schema&#x201d;. The several terms have a same meaning. In other words, the several terms are interchangeable in embodiments of this application.</p><p id="p-0018" num="0017">Optionally, the first encryption method may include a plurality of types of algorithms. This is not limited in this embodiment of this application.</p><p id="p-0019" num="0018">In a possible implementation, the encryption method may be a state cryptography algorithm (a state cryptography algorithm designated by the State Cryptography Administration), for example, an SM4 state cryptography algorithm.</p><p id="p-0020" num="0019">In another possible implementation, the encryption method may be an advanced encryption standard (AEC) algorithm, for example, an AEC cipher block chaining (AEC CBC) algorithm, and for another example, an AEC counter (AEC CTR) algorithm.</p><p id="p-0021" num="0020">Optionally, before the DRM server encrypts the first media file by using the first encryption method to obtain the first encrypted media file, the DRM may determine a first key for encrypting the first encrypted media file and determine the first encryption method.</p><p id="p-0022" num="0021">Optionally, after the DRM server encrypts the first media file by using the first encryption method to obtain the first encrypted media file, the DRM server may store a correspondence among the content identifier, the encryption method information, and key information of the first encrypted media file. The key information of the first encrypted media file includes the first key and a key identifier of the first key. The key identifier identifies the key. This facilitates subsequent authorization of a license request from a terminal.</p><p id="p-0023" num="0022">Optionally, there may be one or more first keys. This is not limited in this embodiment of this application.</p><p id="p-0024" num="0023">In a possible implementation, the DRM server may determine a quantity of the first keys based on different security level requirements.</p><p id="p-0025" num="0024">In another possible implementation, the DRM server may determine a quantity of the first keys according to different encryption rules.</p><p id="p-0026" num="0025">In still another possible implementation, when the first encrypted media file is a streaming media file, the first key may include a key of each streaming media fragment in the streaming media file.</p><p id="p-0027" num="0026">Optionally, the first formatting may be a plurality of types of formatting. This is not limited in this embodiment of this application.</p><p id="p-0028" num="0027">In a possible implementation, the first formatting may be javascript object notation JSON formatting.</p><p id="p-0029" num="0028">In other words, the &#x201c;formatted content protection data&#x201d; and the &#x201c;content protection data&#x201d; include same content except that the &#x201c;formatted content protection data&#x201d; is content protection data in a JSON format.</p><p id="p-0030" num="0029">It should be noted that, in this embodiment of this application, the &#x201c;formatted content protection data&#x201d; is also referred to as &#x201c;protection system specific header data&#x201d;, namely, pssh data. The two terms have a same meaning. In other words, the two terms are interchangeable in this embodiment of this application.</p><p id="p-0031" num="0030">In a possible implementation, the formatted content protection data includes a content identifier field and an encrypted schema field. The content identifier field is used to carry the content identifier. The encrypted schema field is used to carry the encryption method information.</p><p id="p-0032" num="0031">In another possible implementation, the formatted content protection data further includes a version number field. The version number field indicates a version number of the formatted content protection data.</p><p id="p-0033" num="0032">In still another possible implementation, the formatted content protection data includes the content identifier field, the encrypted schema field, the version number field, and at least one of an extension field, a key identifier field, or a current playing location index field. The extension field is used to carry extension data. The key identifier field indicates the identifier of the first key. The first key is a key for encrypting the first media file. The current playing location index field indicates a current playing location of the first encrypted media file.</p><p id="p-0034" num="0033">It should be noted that the JSON format has concise and clear layers, facilitates data identification and parsing, and also facilitates extension. The JSON format is a data exchange language that is easy to read and write, and easy for a machine to parse and generate.</p><p id="p-0035" num="0034">Therefore, the formatted data encryption description information obtained through the JSON formatting in this embodiment of this application also facilitates data identification and parsing, and facilitates extension. In addition, the JSON format is easy for a machine to parse and generate and therefore can improve data transmission efficiency.</p><p id="p-0036" num="0035">It should be noted that the first formatting may alternatively be another formatting having a feature similar to that of the JSON format. This is not limited in this application.</p><p id="p-0037" num="0036">Optionally, that the DRM server encapsulates the formatted content protection data to generate a content protection data packet may be understood as that the DRM server performs second formatting on the formatted content protection data to generate the content protection data packet.</p><p id="p-0038" num="0037">It should be noted that, in this embodiment of this application, the &#x201c;content protection data packet&#x201d; is also referred to as a pssh box. The two terms have a same meaning. In other words, the two terms are interchangeable in this embodiment of this application.</p><p id="p-0039" num="0038">Optionally, the DRM may encapsulate the formatted content protection data in a plurality of manners. This is not limited in this embodiment of this application.</p><p id="p-0040" num="0039">In a possible implementation, the DRM may add a data packet header to the formatted content protection data to generate the content protection data packet.</p><p id="p-0041" num="0040">In a possible implementation, the content protection data packet includes a formatted data field and a data size field. The formatted data field is used to carry the formatted content protection data. The data size field indicates a size of the formatted data field.</p><p id="p-0042" num="0041">Optionally, the content protection data packet further includes at least one of a length field, a type field, a version field, a flag field, or a system identifier field. The length field indicates a length of the content protection data packet. The type field indicates a type of the content protection data packet. The version field indicates a version number of the content protection data packet. The flag field indicates a default value. The system identifier field indicates a standard used by the DRM server.</p><p id="p-0043" num="0042">For example, the pssh box includes a protection system specific header and the pssh data.</p><p id="p-0044" num="0043">Optionally, the DRM server may package the content protection data packet and the first encrypted media file and send to the client in a plurality of manners. This is not limited in this embodiment of this application.</p><p id="p-0045" num="0044">In a first possible implementation, the DRM server adds the content protection data packet to a media description file of the first encrypted media file.</p><p id="p-0046" num="0045">For example, the DRM server adds the content protection data packet to a media presentation description MPD file of the first encrypted media file when the first encrypted media file meets a dynamic adaptive streaming over HTTP DASH standard.</p><p id="p-0047" num="0046">For another example, the DRM server adds the content protection data packet to an M3U8 file of the first encrypted media file when the first encrypted media file meets an HTTP live streaming HIS standard or a common media application format CMAF standard.</p><p id="p-0048" num="0047">It should be noted that, in the DASH/HIS standard, the first encrypted media file may be a streaming media file or a media fragment file in a streaming media file. When the first encrypted media file is a media fragment file in a streaming media file, the media description file of the first encrypted media file may be understood as a media description file of the streaming media file to which the media fragment file belongs. When the first encrypted media file is a streaming media file, the first key may include a key of each media fragment file in the streaming media file and a key identifier of each streaming media fragment file.</p><p id="p-0049" num="0048">In a second possible implementation, the DRM server adds the content protection data packet to an unencrypted field. The first encrypted media file includes the unencrypted field.</p><p id="p-0050" num="0049">For example, the DRM server adds the content protection data packet to the unencrypted field of the first encrypted media file when a format of the first encrypted media file is a moving picture experts group MP4 or a fragmented moving picture experts group FMP4.</p><p id="p-0051" num="0050">Optionally, the DRM server may determine, in a plurality of manners, the key information of the first encrypted media file based on the content protection data packet carried in a license request sent by the client and a pre-stored mapping relationship, and send a license to the client. The license is used to grant permission to play the first encrypted media file. The license carries the key information of the first encrypted media file.</p><p id="p-0052" num="0051">In a first possible implementation, the DRM server may determine the key information of the first encrypted media file based on the content protection data packet and the pre-stored mapping relationship, where the key information includes the first key and the key identifier of the first key, the key identifier identifies the key, and the mapping relationship indicates the correspondence among the content identifier, the encryption method, and the key information; and send the license to the client, where the license is used to grant permission to play the first encrypted media file, and the license carries the key information of the first encrypted media file.</p><p id="p-0053" num="0052">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, only the authorization license of the encrypted media file requested by the client. In this way, security of DRM can be improved, and because the license has a small data size, authorization efficiency is high.</p><p id="p-0054" num="0053">In a second possible implementation, when the formatted content protection data in the content protection data packet includes the content identifier and the encryption method information, the license may further carry key information of each of at least one encrypted media file that has the same content identifier and encryption method information as those of the first encrypted media file. The license is further used to grant permission to play the at least one encrypted media file.</p><p id="p-0055" num="0054">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, both of the authorization license of the encrypted media file requested by the client and an authorization license of the at least one encrypted media file that has the same content identifier and encryption information as those of the first encrypted media file, and the client controls use of the authorization license of the at least one encrypted media file.</p><p id="p-0056" num="0055">For example, when the first encrypted media file is a media fragment file in a streaming media file, the at least one encrypted media file may be a streaming media fragment file that belongs to the same streaming media file as the first encrypted media file.</p><p id="p-0057" num="0056">Therefore, when decrypting and playing the at least one encrypted media file, the client does not need to request an authorization license of another encrypted media file. This can improve authorization efficiency. In addition, if the at least one encrypted media file and the first encrypted media file have continuous playing locations, playing smoothness of the client can be further improved. In addition, time shift and playback functions of a media file are supported.</p><p id="p-0058" num="0057">In a third possible implementation, when the formatted content protection data in the content protection data packet includes the current playing location index field, the license in the first possible implementation may further carry key information of each of at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file. The license is further used to grant permission to play the at least one adjacent encrypted media file.</p><p id="p-0059" num="0058">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, both of the authorization license of the encrypted media file requested by the client and an authorization license of the at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file, and the client controls use of an authorization license of another encrypted media file.</p><p id="p-0060" num="0059">Therefore, when decrypting and playing the foregoing encrypted media files with the continuous playing locations, the client does not need to request the authorization license of the another encrypted media file. This can improve authorization efficiency and improve playing smoothness of the client. In addition, time shift and playback functions of a media file are supported.</p><p id="p-0061" num="0060">According to the DRM method provided in this embodiment of this application, the first encryption method may be a state cryptography algorithm. In other words, the DRM server supports encryption by using the state cryptography algorithm. The terminal can correctly parse the content protection data packet to obtain the state cryptography algorithm.</p><p id="p-0062" num="0061">In a possible implementation, the license request includes a first content protection data packet field. The content protection data packet field is used to carry the content protection data packet.</p><p id="p-0063" num="0062">In a possible implementation, the license includes a key information field. The key information field is used to carry the key information of the first encrypted media file.</p><p id="p-0064" num="0063">Optionally, the key information field is further used to carry key information of another encrypted media file authorized by the DRM server.</p><p id="p-0065" num="0064">Optionally, the license request further includes a permission type information field. The permission type information field is used to carry permission type information. The permission type information indicates at least one of online playing permission or offline playing permission.</p><p id="p-0066" num="0065">Optionally, the license further includes a permission type information field. The permission type information field is used to carry permission type information. The permission type information indicates at least one of online playing permission or offline playing permission.</p><p id="p-0067" num="0066">According to the DRM method provided in this embodiment of this application, the permission type information field is extended in the license request and the license, so that offline playing can be authorized, and time shift and playback functions of offline playing are supported.</p><p id="p-0068" num="0067">According to a second aspect, an embodiment of this application further provides a digital rights management DRM method. The method includes: A client receives packaged data sent by a DRM server, where the packaged data includes a content protection data packet and a first encrypted media file, formatted content protection data is encapsulated in the content protection data packet, the formatted content protection data is obtained by performing first formatting on content protection description information of the first encrypted media file, the content protection description information includes a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies a first encryption method for encrypting a first media file; the client obtains the content protection data packet from the packaged data; the client decrypts the first encrypted media file based on the content protection data packet to obtain the first media file; and the client plays the first media file.</p><p id="p-0069" num="0068">It should be further noted that the client described in this embodiment of this application refers to an apparatus that supports a media playing function and a DRM function. The DRM function includes functions such as decryption and authorization of an encrypted (digital) media file.</p><p id="p-0070" num="0069">It should be further noted that the client may be deployed in a terminal.</p><p id="p-0071" num="0070">The terminal in this embodiment of this application may also be referred to as terminal equipment, user equipment, or the like. For example, the terminal may be a set-top box, a mobile phone, a tablet computer, a laptop computer, a personal digital assistant, a point of sales, a vehicle-mounted computer, a smart speaker, an augmented reality device, a virtual reality device, a wearable device, a vehicle-mounted terminal, a smart vehicle, or the like. This is not limited in this embodiment of this application.</p><p id="p-0072" num="0071">According to the DRM method provided in this embodiment of this application, an entire-process solution based on content protection data packets in a uniform format is provided for the DRM server and the DRM client. The DRM server and the DRM client that use the solution can implement an accurate and effective interworking operation. Further, because the formatted content protection data in the packaged data sent by the DRM server is obtained by performing the first formatting on content protection data, after receiving the packaged data, the client may parse the packaged data to obtain the formatted content protection data based on the first formatting. Therefore, the DRM server and the client can transmit data in a uniform format to perform a DRM interworking operation.</p><p id="p-0073" num="0072">It should be noted that, in this embodiment of this application, an &#x201c;encryption method&#x201d; (for example, the first encryption method) is also referred to as an &#x201c;encryption manner&#x201d; or an &#x201c;encrypted schema&#x201d;. The several terms have a same meaning. In other words, the several terms are interchangeable in this embodiment of this application.</p><p id="p-0074" num="0073">Optionally, the first encryption method may include a plurality of types of algorithms. This is not limited in this embodiment of this application.</p><p id="p-0075" num="0074">In a possible implementation, the encryption method may be a state cryptography algorithm (a state cryptography algorithm designated by the State Cryptography Administration), for example, an SM4 state cryptography algorithm.</p><p id="p-0076" num="0075">In another possible implementation, the encryption method may be an AEC algorithm, for example, an AEC CBC algorithm, and for another example, an AEC CTR algorithm.</p><p id="p-0077" num="0076">Optionally, the first formatting may be a plurality of types of formatting. This is not limited in this embodiment of this application.</p><p id="p-0078" num="0077">In a possible implementation, the first formatting may be javascript object notation JSON formatting.</p><p id="p-0079" num="0078">In other words, the &#x201c;formatted content protection data&#x201d; and the &#x201c;content protection data&#x201d; include same content except that the &#x201c;formatted content protection data&#x201d; is content protection data in a JSON format.</p><p id="p-0080" num="0079">It should be noted that, in this embodiment of this application, the &#x201c;formatted content protection data&#x201d; is also referred to as &#x201c;protection system specific header data&#x201d;, namely, pssh data. The two terms have a same meaning. In other words, the two terms are interchangeable in this embodiment of this application.</p><p id="p-0081" num="0080">In a possible implementation, the formatted content protection data includes a content identifier field and an encrypted schema field. The content identifier field is used to carry the content identifier. The encrypted schema field is used to carry the encryption method information.</p><p id="p-0082" num="0081">In another possible implementation, the formatted content protection data further includes a version number field. The version number field indicates a version number of the formatted content protection data.</p><p id="p-0083" num="0082">In still another possible implementation, the formatted content protection data includes the content identifier field, the encrypted schema field, the version number field, and at least one of an extension field, a key identifier field, or a current playing location index field. The extension field is used to carry extension data. The key identifier field indicates an identifier of a first key. The first key is a key for encrypting the first media file. The current playing location index field indicates a current playing location of the first encrypted media file.</p><p id="p-0084" num="0083">It should be noted that the JSON format has concise and clear layers, facilitates data identification and parsing, and also facilitates extension. The JSON format is a data exchange language that is easy to read and write, and easy for a machine to parse and generate.</p><p id="p-0085" num="0084">Therefore, the formatted data encryption description information obtained through the JSON formatting in this embodiment of this application also facilitates data identification and parsing, and facilitates extension. In addition, the JSON format is easy for a machine to parse and generate and therefore can improve data transmission efficiency.</p><p id="p-0086" num="0085">It should be noted that the first formatting may alternatively be another formatting having a feature similar to that of the JSON format. This is not limited in this application.</p><p id="p-0087" num="0086">In a possible implementation, the content protection data packet includes a formatted data field and a data size field. The formatted data field is used to carry the formatted content protection data. The data size field indicates a size of the formatted data field.</p><p id="p-0088" num="0087">Optionally, the content protection data packet further includes at least one of a length field, a type field, a version field, a flag field, or a system identifier field. The length field indicates a length of the content protection data packet. The type field indicates a type of the content protection data packet. The version field indicates a version number of the content protection data packet. The flag field indicates a default value. The system identifier field indicates a standard used by the DRM server.</p><p id="p-0089" num="0088">For example, a pssh box includes a protection system specific header and the pssh data.</p><p id="p-0090" num="0089">Optionally, the client may obtain the content protection data packet from the packaged data in a plurality of manners. This is not limited in this embodiment of this application.</p><p id="p-0091" num="0090">In a possible implementation, the client may obtain the content protection data packet from a description file of the first encrypted media file.</p><p id="p-0092" num="0091">In another possible implementation, the client may obtain the content protection data packet from an unencrypted field. The first encrypted media file includes the unencrypted field.</p><p id="p-0093" num="0092">Optionally, the client may decrypt, in a plurality of manners, the first encrypted media file based on the content protection data packet to obtain the first media file. This is not limited in this embodiment of this application.</p><p id="p-0094" num="0093">In a first possible implementation, the client may send a license request to the DRM server, where the license request is used to request permission to play the first encrypted media file, and the license request message carries the content protection data packet; receive a license sent by the DRM server, and decrypt the first encrypted media file based on key information of the first encrypted media file to obtain the first media file.</p><p id="p-0095" num="0094">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, only the authorization license of the encrypted media file requested by the client. In this way, security of DRM can be improved, and because the license has a small data size, authorization efficiency is high.</p><p id="p-0096" num="0095">In a second possible implementation, when the formatted content protection data in the content protection data packet includes the content identifier and the encryption method information, the license may further carry key information of each of at least one encrypted media file that has the same content identifier and encryption method information as those of the first encrypted media file. The license is further used to grant permission to play the at least one encrypted media file. The client may further decrypt each encrypted media file based on the key information of each of the at least one encrypted media file to obtain at least one media file, and play the at least one media file.</p><p id="p-0097" num="0096">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, both of the authorization license of the encrypted media file requested by the client and an authorization license of the at least one encrypted media file that has the same content identifier and encryption information as those of the first encrypted media file, and the client controls use of the authorization license of the at least one encrypted media file.</p><p id="p-0098" num="0097">For example, when the first encrypted media file is a media fragment file in a streaming media file, the at least one encrypted media file may be a streaming media fragment file that belongs to the same streaming media file as the first encrypted media file.</p><p id="p-0099" num="0098">Therefore, when decrypting and playing the at least one encrypted media file, the client does not need to request an authorization license of another encrypted media file. This can improve authorization efficiency. In addition, if the at least one encrypted media file and the first encrypted media file have continuous playing locations, playing smoothness of the client can be further improved. In addition, time shift and playback functions of a media file are supported.</p><p id="p-0100" num="0099">In a third possible implementation, when the formatted content protection data in the content protection data packet includes the current playing location index field, the license in the first possible implementation may further carry key information of each of at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file. The license is further used to grant permission to play the at least one adjacent encrypted media file. The client may further decrypt each encrypted media file based on the key information of each of the at least one adjacent encrypted media file to obtain at least one adjacent media file, and play the at least one adjacent media file.</p><p id="p-0101" num="0100">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, both of the authorization license of the encrypted media file requested by the client and an authorization license of the at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file, and the client controls use of an authorization license of another encrypted media file.</p><p id="p-0102" num="0101">Therefore, when decrypting and playing the foregoing encrypted media files with the continuous playing locations, the client does not need to request the authorization license of the another encrypted media file. This can improve authorization efficiency and improve playing smoothness of the client. In addition, time shift and playback functions of a media file are supported.</p><p id="p-0103" num="0102">Optionally, that the client decrypts the first encrypted media file based on the key information of the first encrypted media file specifically includes: parsing the content protection data packet to obtain the formatted content protection data; obtaining the first encryption method from the formatted content protection data; and decrypting the first encrypted media file based on the key information of the first encrypted media file and the first encryption method to obtain the first media file.</p><p id="p-0104" num="0103">According to the DRM method provided in this embodiment of this application, the first encryption method may be a state cryptography algorithm. In other words, the DRM server supports encryption by using the state cryptography algorithm. The terminal can correctly parse the content protection data packet to obtain the state cryptography algorithm.</p><p id="p-0105" num="0104">In a possible implementation, the license request includes a first content protection data packet field. The content protection data packet field is used to carry the content protection data packet.</p><p id="p-0106" num="0105">In a possible implementation, the license includes a key information field. The key information field is used to carry the key information of the first encrypted media file.</p><p id="p-0107" num="0106">Optionally, the key information field is further used to carry key information of another encrypted media file authorized by the DRM server.</p><p id="p-0108" num="0107">Optionally, the license request further includes a permission type information field. The permission type information field is used to carry permission type information. The permission type information indicates at least one of online playing permission or offline playing permission.</p><p id="p-0109" num="0108">Optionally, the license further includes a permission type information field. The permission type information field is used to carry permission type information. The permission type information indicates at least one of online playing permission or offline playing permission.</p><p id="p-0110" num="0109">It should be noted that the permission type information field is extended in the license request and the license, so that offline playing can be authorized, and time shift and playback functions of offline playing are supported.</p><p id="p-0111" num="0110">According to a third aspect, an embodiment of this application further provides a digital rights management DRM apparatus. The apparatus includes a processor and a transceiver coupled to the processor. The processor is configured to encrypt a first media file by using a first encryption method to obtain a first encrypted media file; generate content protection description information of the first encrypted media file, where the content protection description information includes a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies the first encryption method; perform first formatting on the content protection description information to generate formatted content protection data; encapsulate the formatted content protection data to generate a content protection data packet; and package the content protection data packet and the first encrypted media file to generate packaged data. The transceiver is configured to send the packaged data to a client.</p><p id="p-0112" num="0111">In a possible implementation, the first formatting is javascript object notation JSON formatting.</p><p id="p-0113" num="0112">In a possible implementation, the formatted content protection data includes a content identifier field and an encrypted schema field. The content identifier field is used to carry the content identifier. The encrypted schema field is used to carry the encryption method information.</p><p id="p-0114" num="0113">In a possible implementation, the formatted content protection data further includes a version number field and at least one of an extension field, a key identifier field, or a current playing location index field. The version number field indicates a version number of the formatted content protection data. The extension field is used to carry extension data. The key identifier field indicates an identifier of a first key. The first key is a key for encrypting the first media file. The current playing location index field indicates a current playing location of the first encrypted media file.</p><p id="p-0115" num="0114">In a possible implementation, the content protection data packet includes a formatted data field and a data size field. The formatted data field is used to carry the formatted content protection data. The data size field indicates a size of the formatted data field.</p><p id="p-0116" num="0115">In a possible implementation, the transceiver is further configured to receive a license request sent by the client. The license request is used to request permission to play the first encrypted media file. The license request carries the content protection data packet. The processor is further configured to determine key information of the first encrypted media file based on the content protection data packet and a pre-stored mapping relationship. The key information includes the first key and a key identifier of the first key. The key identifier identifies the key. The mapping relationship indicates a correspondence among the content identifier, the encryption method, and the key information. The transceiver is further configured to send a license to the client. The license is used to grant permission to play the first encrypted media file. The license carries the key information of the first encrypted media file.</p><p id="p-0117" num="0116">In a possible implementation, when the formatted content protection data in the content protection data packet further includes the current playing location index field, and the current playing location index field indicates the current playing location of the first encrypted media file, the processor is further configured to: parse the content protection data packet to obtain the current playing location; and determine, based on the current playing location, key information of at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file, where the key information of the at least one adjacent encrypted media file includes a key of each of the at least one adjacent encrypted media file and a key identifier of each adjacent encrypted media file. The transceiver is further configured to send the license to the client. The license further carries key information of each of the at least one adjacent encrypted media file. The license is further used to grant permission to play the at least one adjacent encrypted media file.</p><p id="p-0118" num="0117">In a possible implementation, the license request further includes a permission type information field. The permission type information field is used to carry permission type information. The permission type information indicates at least one of online playing permission or offline playing permission.</p><p id="p-0119" num="0118">In a possible implementation, the processor is specifically configured to: add the content protection data packet to a media description file of the first encrypted media file; or add the content protection data packet to an unencrypted field, where the first encrypted media file includes the unencrypted field.</p><p id="p-0120" num="0119">In a possible implementation, that a DRM server packages the content protection data packet and the first encrypted media file, and sends to the client includes: adding the content protection data packet to a media presentation description MPD file of the first encrypted media file when the first encrypted media file meets a dynamic adaptive streaming over HTTP DASH standard; adding the content protection data packet to an M3U8 file of the first encrypted media file when the first encrypted media file meets an HTTP live streaming HIS standard or a common media application format CMAF standard; or adding the content protection data packet to the unencrypted field of the first encrypted media file when a format of the first encrypted media file is a moving picture experts group MP4 or a fragmented moving picture experts group FMP4.</p><p id="p-0121" num="0120">In a possible implementation, the first encryption method includes an SM state cryptography algorithm.</p><p id="p-0122" num="0121">According to a DRM system provided in this embodiment of this application, by using an entire-process solution based on content protection data packets in a uniform format, the DRM server and the DRM client can implement an accurate and effective interworking operation. Further, because the formatted content protection data in the packaged data sent by the DRM server is obtained by performing the first formatting on content protection data, after receiving the packaged data, the client may parse the packaged data to obtain the formatted content protection data based on the first formatting. Therefore, the DRM server and the client can transmit data in a uniform format to perform a DRM interworking operation.</p><p id="p-0123" num="0122">According to a fourth aspect, an embodiment of this application further provides a digital rights management DRM apparatus. The apparatus includes a processor and a transceiver coupled to the processor. The transceiver is configured to receive packaged data sent by a DRM server. The packaged data includes a content protection data packet and a first encrypted media file. Formatted content protection data is encapsulated in the content protection data packet. The formatted content protection data is obtained by performing first formatting on content protection description information of the first encrypted media file. The content protection description information includes a content identifier and encryption method information. The content identifier identifies the first encrypted media file. The encryption method information identifies a first encryption method for encrypting a first media file. The processor is configured to: obtain the content protection data packet from the packaged data; decrypt the first encrypted media file based on the content protection data packet to obtain the first media file; and play the first media file.</p><p id="p-0124" num="0123">In a possible implementation, the first formatting is javascript object notation JSON formatting.</p><p id="p-0125" num="0124">In a possible implementation, the formatted content protection data includes a content identifier field and an encrypted schema field. The content identifier field is used to carry the content identifier. The encrypted schema field is used to carry the encryption method information.</p><p id="p-0126" num="0125">In a possible implementation, the formatted content protection data further includes a version number field and at least one of an extension field, a key identifier field, or a current playing location index field. The version number field indicates a version number of the formatted content protection data. The key identifier field indicates an identifier of a first key. The first key is a key for encrypting the first media file. The current playing location index field indicates a current playing location of the first encrypted media file.</p><p id="p-0127" num="0126">In a possible implementation, the content protection data packet includes a formatted data field and a data size field. The formatted data field is used to carry the formatted content protection data. The data size field indicates a size of the formatted data field.</p><p id="p-0128" num="0127">In a possible implementation, the transceiver is further configured to: send a license request to the DRM server, where the license request is used to request permission to play the first encrypted media file, and the license request message carries the content protection data packet; and receive a license sent by the DRM server, where the license is used to grant permission to play the first encrypted media file, the license carries key information of the first encrypted media file, the key information includes the first key and the key identifier of the first key, and the key identifier identifies the key. The processor is further configured to decrypt the first encrypted media file based on the key information of the first encrypted media file to obtain the first media file.</p><p id="p-0129" num="0128">In a possible implementation, when the formatted content protection data in the content protection data packet further includes the current playing location index field, and the current playing location index field indicates the current playing location of the first encrypted media file, the license further carries key information of at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file. The key information of the at least one adjacent encrypted media file includes a key of each of the at least one adjacent encrypted media file and a key identifier of each adjacent encrypted media file. The license is further used to grant permission to play the at least one adjacent encrypted media file. The processor is further configured to: decrypt each encrypted media file based on key information of each of the at least one adjacent encrypted media file to obtain at least one adjacent media file; and play the at least one adjacent media file.</p><p id="p-0130" num="0129">In a possible implementation, the processor is specifically configured to: parse the content protection data packet to obtain the formatted content protection data; obtain the first encryption method from the formatted content protection data; and decrypt the first encrypted media file based on the key information of the first encrypted media file and the first encryption method to obtain the first media file.</p><p id="p-0131" num="0130">In a possible implementation, the license request further includes a permission type information field. The permission type information field is used to carry permission type information. The permission type information indicates at least one of online playing permission or offline playing permission.</p><p id="p-0132" num="0131">In a possible implementation, the processor is specifically configured to: obtain the content protection data packet from a media description file of the first encrypted media file; or obtain the content protection data packet from an unencrypted field, where the first encrypted media file includes the unencrypted field.</p><p id="p-0133" num="0132">In a possible implementation, the processor is specifically configured to: obtain the content protection data packet from a media presentation description MPD file of the first encrypted media file when the first encrypted media file meets a dynamic adaptive streaming over HTTP DASH standard; obtain the content protection data packet from an M3U8 file of the first encrypted media file when the first encrypted media file meets an HTTP live streaming HIS standard or a common media application format CMAF standard; or obtain the content protection data packet from the unencrypted field of the first encrypted media file when a format of the first encrypted media file is a moving picture experts group MP4 or a fragmented moving picture experts group FMP4, where the first encrypted media file includes the unencrypted field.</p><p id="p-0134" num="0133">In a possible implementation, the first encryption method includes an SM state cryptography algorithm.</p><p id="p-0135" num="0134">According to a fifth aspect, an embodiment of this application further provides a DRM system. The DRM system includes a DRM server and a client. The DRM server includes an encryption service module, a key service module, and an authorization service module. The client includes a media playing module, a DRM processing module, a decryption module, and an authorization module.</p><p id="p-0136" num="0135">It should be noted that the DRM processing module, the decryption module, and the authorization module in the client form a DRM module. The DRM module and the media playing module may be two independent apparatuses or integrated into one apparatus. This is not limited in this embodiment of this application.</p><p id="p-0137" num="0136">It should be further noted that the foregoing apparatus may be understood as a virtual apparatus, and the foregoing integration may be logical integration.</p><p id="p-0138" num="0137">For example, the media playing module and the DRM module are two independent applications.</p><p id="p-0139" num="0138">For another example, the media playing module and the DRM module are different functional modules of one application.</p><p id="p-0140" num="0139">It should be further noted that formatted content protection data may be understood as pssh data, and a content protection data packet may be understood as a pssh box.</p><p id="p-0141" num="0140">The encryption service module is configured to determine a first encryption method for a first media file.</p><p id="p-0142" num="0141">The key service module is configured to determine a first key for the first media file.</p><p id="p-0143" num="0142">The encryption service module or the key service module is further configured to: encrypt the first media file by using the first encryption method to obtain a first encrypted media file; generate content protection description information of the first encrypted media file, where the content protection description information includes a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies the first encryption method; perform first formatting on the content protection description information to generate the formatted content protection data (the pssh data), namely, step (1); and encapsulate the formatted content protection data to generate the content protection data packet (the pssh box).</p><p id="p-0144" num="0143">In a possible implementation, the formatted content protection data includes a version number field, a content identifier field, an encrypted schema field, and at least one of a key identifier field, a current playing location index field, or an extension field.</p><p id="p-0145" num="0144">It should be noted that, regardless of whether the encryption service module or the key service module performs the foregoing steps to generate the pssh data and the pssh box, both the encryption service module and the key service module need to synchronize the pssh data and the pssh box that are obtained in the process of performing the foregoing steps.</p><p id="p-0146" num="0145">The key service module is further configured to store the correspondence among the content identifier, the encryption method information, and key information of the first encrypted media file. The key information includes the first key and a key identifier of the first key. The key identifier identifies the key.</p><p id="p-0147" num="0146">The encryption service module is further configured to: package the content protection data packet and the first encrypted media file to obtain packaged data, and send the packaged data to the media playing module of the client, namely, step (2).</p><p id="p-0148" num="0147">The media playing module is configured to: receive the packaged data sent by the encryption service module, where the packaged data includes the content protection data packet and the first encrypted media file; obtain the content protection data packet from the packaged data; and send DRM information to the DRM processing module, where the DRM information includes the content protection data packet, namely, step (3).</p><p id="p-0149" num="0148">In a possible implementation, the DRM information includes a DRM information field. The DRM information field is used to carry the content protection data packet.</p><p id="p-0150" num="0149">The DRM processing module is configured to: receive the DRM information sent by the media playing module; and send the content protection data packet in the DRM information to the authorization module, namely, step (4).</p><p id="p-0151" num="0150">The authorization module is configured to: receive the content protection data packet sent by the DRM processing module; and send a license request to the authorization service module in the server, where the license request is used to request permission to play the first encrypted media file, and the license request message carries the content protection data packet, namely, step (5).</p><p id="p-0152" num="0151">The authorization service module is configured to: receive the license request sent by the authorization module; determine the key information of the first encrypted media file based on the content protection data packet and a pre-stored mapping relationship, where the mapping relationship indicates the correspondence among the content identifier, the encryption method, and the key information; and send a license to the authorization module in the client, where the license is used to grant permission to play the first encrypted media file, and the license carries the key information of the first encrypted media file, namely, step (7).</p><p id="p-0153" num="0152">In a possible implementation, because the key service module stores the mapping relationship indicating the correspondence among the content identifier, the encryption method information, and the key information, the authorization service module is specifically configured to: obtain the mapping relationship from the key service module, namely, step (6); and determine the key information of the first encrypted media file based on the content protection data packet and the pre-stored mapping relationship.</p><p id="p-0154" num="0153">Optionally, step (5) may be replaced with the following path: the authorization module-the DRM processing module-the media playing module-the authorization service module; and step (7) may be replaced with the following path: the authorization service module-the media playing module-the DRM processing module-the authorization module.</p><p id="p-0155" num="0154">The media playing module is further configured to invoke a decryption interface of the DRM module, and send the first encrypted media file to the decryption module, namely, step (8).</p><p id="p-0156" num="0155">Optionally, when the formatted content protection data includes the key identifier of the first encrypted media file, the media playing module is further configured to: parse the content protection data packet to obtain the formatted content protection data; obtain the key identifier of the first encrypted media file from the formatted content protection data; and invoke the decryption interface, and send the key identifier of the first encrypted media file to the decryption module.</p><p id="p-0157" num="0156">Optionally, the media playing module is further configured to: parse the content protection data packet to obtain the formatted content protection data; obtain the first encryption method from the formatted content protection data; and send the encryption method information to the decryption module through the decryption interface.</p><p id="p-0158" num="0157">The DRM processing module is further configured to: parse the content protection data packet in the DRM information to obtain the formatted content protection data; obtain the first encryption method from the formatted content protection data; and send the encryption method information to the decryption module, namely, step (9-1).</p><p id="p-0159" num="0158">It should be noted that both the media playing module and the DRM processing module may parse the content protection data packet to obtain the encryption method information. However, in a conventional technology, the media playing module cannot correctly parse a state cryptography algorithm. When the encryption method of the first encrypted media file is the state cryptography algorithm, the media playing module cannot correctly parse the content protection data packet to obtain the state cryptography algorithm. Therefore, a priority of the encryption method information parsed by the DRM processing module may be set to be higher than that of the encryption method information parsed by the media playing module. In this way, the client can support the state cryptography algorithm.</p><p id="p-0160" num="0159">The decryption module is configured to: receive the key identifier that is of the first encrypted media file and that is sent by the media playing module; request the key information of the first encrypted media file from the authorization module based on the key identifier; and receive the key information that is of the first encrypted media file and that is sent by the authorization module, namely, step (9-2).</p><p id="p-0161" num="0160">It should be noted that when the license carries key information of a plurality of encrypted media files, the decryption module may request the key information of the plurality of encrypted media files from the authorization module at a time; or may request the key information of the plurality of encrypted media files from the authorization module in batches, for example, request one piece of key information when using one piece of key information.</p><p id="p-0162" num="0161">The decryption module is further configured to: receive the first encrypted media file sent by the media playing module, step (8); receive the encryption method information sent by the DRM processing module or the media playing module, step (9-1); receive the key information of the first encrypted media file sent by the authorization module, step (9-2); decrypt the first encrypted media file based on the key of the first encrypted media file and the encryption method information to obtain the first media file; and send the first media file to the media playing module, step (10).</p><p id="p-0163" num="0162">The media playing module is further configured to receive the first media file sent by the decryption module, and play the first media file.</p><p id="p-0164" num="0163">It should be noted that for an implementation process of step (1) to step (9), refer to descriptions corresponding to each step in the foregoing aspects and the possible implementations of the aspects, where step (9) includes step (9-1) and step (9-2). To avoid repetition, details are not described herein again.</p><p id="p-0165" num="0164">According to a sixth aspect, an embodiment of this application further provides a number classification apparatus. The apparatus includes units configured to perform the method in any one of the foregoing aspects or the possible implementations of the foregoing aspects.</p><p id="p-0166" num="0165">According to a seventh aspect, an embodiment of this application further provides a chip apparatus, including a communication interface and a processor. The communication interface and the processor communicate with each other through an internal connection path. The processor is configured to implement the method in any one of the foregoing aspects or the possible implementations of the foregoing aspects.</p><p id="p-0167" num="0166">According to an eighth aspect, an embodiment of this application further provides a computer-readable storage medium, configured to store a computer program. The computer program includes instructions used to implement the method in any one of the foregoing aspects or the possible implementations of the foregoing aspects.</p><p id="p-0168" num="0167">According to a ninth aspect, an embodiment of this application further provides a computer program product. The computer program product includes instructions. When the instructions are run on a computer, the computer is enabled to implement the method in any one of the foregoing aspects or the possible implementations of the foregoing aspects.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0169" num="0168"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic flowchart of a DRM method <b>100</b> according to an embodiment of this application;</p><p id="p-0170" num="0169"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of a DRM system <b>200</b> according to an embodiment of this application;</p><p id="p-0171" num="0170"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic flowchart of a DRM apparatus <b>300</b> according to an embodiment of this application;</p><p id="p-0172" num="0171"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic flowchart of a DRM apparatus <b>400</b> according to an embodiment of this application; and</p><p id="p-0173" num="0172"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic flowchart of a terminal <b>500</b> according to an embodiment of this application.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS</heading><p id="p-0174" num="0173">The following describes technical solutions of this application with reference to accompanying drawings.</p><p id="p-0175" num="0174">It should be noted that a DRM server described in embodiments of this application refers to an apparatus that can provide a DRM service for a client. The DRM service includes services such as encryption and authorization of a (digital) media file.</p><p id="p-0176" num="0175">It should be further noted that the DRM server may be deployed on a server. For example, the DRM server may be deployed on a cloud server.</p><p id="p-0177" num="0176">It should be further noted that the client described in embodiments of this application refers to an apparatus that supports a media playing function and a DRM function. The DRM function includes functions such as decryption and authorization of an encrypted (digital) media file.</p><p id="p-0178" num="0177">It should be further noted that the client may be deployed in a terminal.</p><p id="p-0179" num="0178">The terminal in embodiments of this application may also be referred to as terminal equipment, user equipment (UE), or the like. For example, the terminal may be a set-top box, a mobile phone, a tablet computer (pad), a laptop computer, a personal digital assistant (PDA), a point of sales (POS), a vehicle-mounted computer, a smart speaker, an augmented reality (AR) device, a virtual reality (VR) device, a wearable device, a vehicle-mounted terminal, a smart vehicle, or the like. This is not limited in embodiments of this application.</p><p id="p-0180" num="0179"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic flowchart of a DRM method <b>100</b> according to an embodiment of this application.</p><p id="p-0181" num="0180">S<b>110</b>: A DRM server encrypts a first media file by using a first encryption method to obtain a first encrypted media file.</p><p id="p-0182" num="0181">Optionally, the first media file may include a plurality of types. This is not limited in this embodiment of this application.</p><p id="p-0183" num="0182">For example, the first media file may be in a moving picture experts group (MPEG) format, an MP4 (MPEG-4) format, or the like.</p><p id="p-0184" num="0183">For another example, the first media file may be an audio file, a video file, or the like.</p><p id="p-0185" num="0184">For another example, the first media file may be a streaming media file or a media fragment file in a streaming media file.</p><p id="p-0186" num="0185">It should be noted that the streaming media file may include one media description file and a plurality of media segment files. The media description file describes a feature of the streaming media file, for example, a storage address, a playing sequence, playing time, and an obtaining manner of the plurality of media fragment files.</p><p id="p-0187" num="0186">For example, in dynamic adaptive streaming over HTTP (DASH), a media presentation description (MPD) file is a media description file of DASH streaming media data.</p><p id="p-0188" num="0187">For another example, in hyper text transfer protocol (HTTP) live streaming (HIS), an M3U8 file is a media description file of HIS streaming media data.</p><p id="p-0189" num="0188">It should be noted that, in this embodiment of this application, an &#x201c;encryption method&#x201d; (for example, the first encryption method) is also referred to as an &#x201c;encryption manner&#x201d; or an &#x201c;encrypted schema&#x201d;. The several terms have a same meaning. In other words, the several terms are interchangeable in this embodiment of this application.</p><p id="p-0190" num="0189">Optionally, the first encryption method may include a plurality of types of algorithms. This is not limited in this embodiment of this application.</p><p id="p-0191" num="0190">In a possible implementation, the encryption method may be a state cryptography algorithm (a state cryptography algorithm designated by the State Cryptography Administration), for example, an SM4 state cryptography algorithm.</p><p id="p-0192" num="0191">In another possible implementation, the encryption method may be an advanced encryption standard (AEC) algorithm, for example, an AEC cipher block chaining (AEC CBC) algorithm, and for another example, an AEC counter (AEC CTR) algorithm.</p><p id="p-0193" num="0192">Optionally, before S<b>110</b>, the DRM may determine a first key for encrypting the first encrypted media file and determine the first encryption method.</p><p id="p-0194" num="0193">Optionally, after S<b>110</b>, the DRM server may store a correspondence among a content identifier, encryption method information, and key information of the first encrypted media file. The key information of the first encrypted media file includes the first key and a key identifier of the first key. The key identifier identifies the key. This facilitates subsequent authorization of a license request from a terminal.</p><p id="p-0195" num="0194">Optionally, there may be one or more first keys. This is not limited in this embodiment of this application.</p><p id="p-0196" num="0195">In a possible implementation, the DRM server may determine a quantity of the first keys based on different security level requirements.</p><p id="p-0197" num="0196">In another possible implementation, the DRM server may determine a quantity of the first keys according to different encryption rules.</p><p id="p-0198" num="0197">In still another possible implementation, when the first encrypted media file is a streaming media file, the first key may include a key of each streaming media fragment in the streaming media file.</p><p id="p-0199" num="0198">S<b>120</b>: The DRM server generates content protection description information of the first encrypted media file, where the content protection description information includes the content identifier and the encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies the first encryption method.</p><p id="p-0200" num="0199">S<b>130</b>: The DRM server performs first formatting on the content protection description information to generate formatted content protection data.</p><p id="p-0201" num="0200">It should be noted that, in this embodiment of this application, the &#x201c;formatted content protection data&#x201d; is also referred to as &#x201c;protection system specific header (PSSH) data&#x201d;, namely, pssh data. The two terms have a same meaning. In other words, the two terms are interchangeable in this embodiment of this application.</p><p id="p-0202" num="0201">Optionally, the first formatting may be a plurality of types of formatting. This is not limited in this embodiment of this application.</p><p id="p-0203" num="0202">In a possible implementation, the first formatting maybe javascript object notation JSON formatting.</p><p id="p-0204" num="0203">In other words, the &#x201c;formatted content protection data&#x201d; and &#x201c;content protection data&#x201d; include same content except that the &#x201c;formatted content protection data&#x201d; is content protection data in a JSON format.</p><p id="p-0205" num="0204">It should be noted that the JSON format, namely, the javascript object notation (JSON) format, is a lightweight data exchange format. This format is based on a subset of a European Computer Manufacturers Association (ECMA) script (namely, js specifications formulated by the European Computer Manufacturers Association). JSON uses a text format that is entirely independent of programming languages to store and represent data. The JSON format has concise and clear layers, facilitates data identification and parsing also facilitates extension. The JSON format is a data exchange language that is easy to read and write, and easy for a machine to parse and generate.</p><p id="p-0206" num="0205">Therefore, the formatted data encryption description information obtained through the JSON formatting in this embodiment of this application also facilitates data identification and parsing, and facilitates extension. In addition, the JSON format is easy for a machine to parse and generate and therefore can improve data transmission efficiency.</p><p id="p-0207" num="0206">In a possible implementation, the formatted content protection data includes a content identifier field and an encrypted schema field. The content identifier field is used to carry the content identifier. The encrypted schema field is used to carry the encryption method information.</p><p id="p-0208" num="0207">In another possible implementation, the formatted content protection data further includes a version number field. The version number field indicates a version number of the formatted content protection data.</p><p id="p-0209" num="0208">In still another possible implementation, the formatted content protection data includes the content identifier field, the encrypted schema field, the version number field, and at least one of an extension field, a key identifier field, or a current playing location index field. The extension field is used to carry extension data. The key identifier field indicates the identifier of the first key. The first key is a key for encrypting the first media file. The current playing location index field indicates a current playing location of the first encrypted media file.</p><p id="p-0210" num="0209">For example, a definition of pssh data in the JSON format is described in the following Table 1. The JSON format describes data in a manner of a JSON key/value.</p><p id="p-0211" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="63pt" align="left"/><colspec colname="4" colwidth="49pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="4" rowsep="1">TABLE 1</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry>Parameter</entry><entry>JSON key</entry><entry>Value type</entry><entry>Description</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>Version</entry><entry>version</entry><entry>String (String)</entry><entry>Mandatory</entry></row><row><entry/><entry>ContentID</entry><entry>contentID</entry><entry>String</entry><entry>Mandatory</entry></row><row><entry/><entry>Kids</entry><entry>kids</entry><entry>String array</entry><entry>Optional</entry></row><row><entry/><entry>EnSchema</entry><entry>enschema</entry><entry>String</entry><entry>Mandatory</entry></row><row><entry/><entry>PlayIndex</entry><entry>playIndex</entry><entry>String</entry><entry>Optional</entry></row><row><entry/><entry>Extensions</entry><entry>Exts</entry><entry>String</entry><entry>Optional</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0212" num="0210">Parameter fields in Table 1 are described as follows:</p><p id="p-0213" num="0211">(1) A Version field is a version number field and indicates a version number of the pssh data. For example, a current version is V1.0 by default. It should be understood that the pssh data of different versions has the same format except that data carried by each field is different.</p><p id="p-0214" num="0212">(2) A ContentID field is a content identifier field, indicates a content identifier of an encrypted media file, and is encoded using Base64.</p><p id="p-0215" num="0213">It should be noted that Base64 encoding refers to an algorithm for encoding any byte of data based on 64 printable American Standard Code for Information Interchange (ASCII) characters.</p><p id="p-0216" num="0214">(3) A Kids field is a key identifier field, is used to carry a key identifier array of the encrypted media file, and is encoded using Base64.</p><p id="p-0217" num="0215">(4) An EnSchema field indicates an encrypted schema field, and is used to carry an encrypted schema of the encrypted media file, for example, &#x201c;sm4c&#x201d;, &#x201c;sm4s&#x201d;, &#x201c;cenc&#x201d;, &#x201c;cens&#x201d;, &#x201c;cbc1&#x201d;, and &#x201c;cbcs&#x201d;.</p><p id="p-0218" num="0216">It should be noted that sm4c represents SM4-CBC sample encryption, sm4s represents SM4-CBC subsample encryption, cenc represents AES-CTR sample encryption, cens represents AES-CTR subsample encryption, cbc1 represents AES-CBC sample encryption, and cbcs represents AES-CBC subsample encryption.</p><p id="p-0219" num="0217">It should be noted that, in this embodiment of this application, the &#x201c;encrypted schema&#x201d; is also referred to as the &#x201c;encryption method&#x201d;. The two terms have a same meaning. In other words, the two terms are interchangeable in this embodiment of this application.</p><p id="p-0220" num="0218">(5) A PlayIndex field is used to carry an index of the current playing location. The value is an unsigned integer.</p><p id="p-0221" num="0219">(6) An Extensions field is used to carry extended information.</p><p id="p-0222" num="0220">In a possible implementation, an example of the pssh data format is as follows:</p><p id="p-0223" num="0221">{</p><p id="p-0224" num="0222">&#x201c;version&#x201d;: &#x201c;V1.0&#x201d;,</p><p id="p-0225" num="0223">&#x201c;contentID&#x201d;: &#x201c;base64_string&#x201d;,</p><p id="p-0226" num="0224">&#x201c;kids&#x201d;: [&#x201c;base64_string&#x201d;, &#x201c;base64_string&#x201d;, . . . ],</p><p id="p-0227" num="0225">&#x201c;enschema&#x201d;: &#x201c;string&#x201d;,</p><p id="p-0228" num="0226">&#x201c;playIndex&#x201d;: &#x201c;string&#x201d;,</p><p id="p-0229" num="0227">&#x201c;exts&#x201d;: &#x201c;string&#x201d;</p><p id="p-0230" num="0228">}</p><p id="p-0231" num="0229">An example of the pssh data is as follows:</p><p id="p-0232" num="0230">{&#x201c;version&#x201d;: &#x201c;V1.0&#x201d;, &#x201c;contentID&#x201d;: &#x201c;MTAwMDAxMDEyMzQ1Njc4OQ==&#x201d;, &#x201c;kids&#x201d;: [&#x201c;NzZINzRiNzcoZDAxNDRiMWIxODNmNTgoMDE4ZmQ3MTk=&#x201d;], &#x201c;enschema&#x201d;: &#x201c;cenc&#x201d; }</p><p id="p-0233" num="0231">It should be noted that the first formatting may alternatively be another formatting having a feature similar to that of the JSON format. This is not limited in this application.</p><p id="p-0234" num="0232">S<b>140</b>: The DRM server encapsulates the formatted content protection data to generate a content protection data packet.</p><p id="p-0235" num="0233">In other words, the DRM server performs second formatting on the formatted content protection data to generate the content protection data packet.</p><p id="p-0236" num="0234">It should be noted that, in this embodiment of this application, the &#x201c;content protection data packet&#x201d; is also referred to as a pssh box. The two terms have a same meaning. In other words, the two terms are interchangeable in this embodiment of this application.</p><p id="p-0237" num="0235">Optionally, the DRM may encapsulate the formatted content protection data in a plurality of manners. This is not limited in this embodiment of this application.</p><p id="p-0238" num="0236">In a possible implementation, the DRM may add a data packet header to the formatted content protection data to generate the content protection data packet.</p><p id="p-0239" num="0237">In a possible implementation, the content protection data packet includes a formatted data field and a data size field. The formatted data field is used to carry the formatted content protection data. The data size field indicates a size of the formatted data field.</p><p id="p-0240" num="0238">Optionally, the content protection data packet further includes at least one of a length field, a type field, a version field, a flag field, or a system identifier field. The length field indicates a length of the content protection data packet. The type field indicates a type of the content protection data packet. The version field indicates a version number of the content protection data packet. The flag field indicates a default value. The system identifier field indicates a standard used by the DRM server.</p><p id="p-0241" num="0239">It should be noted that the pssh box includes a protection system specific header and the pssh data.</p><p id="p-0242" num="0240">For example, the pssh box includes key information required by a content protection system to play content of a media file. According to the ISO/IEC 23001-7:2016 CENC standard [2], a definition of the pssh box is described in the following Table 2.</p><p id="p-0243" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="49pt" align="center"/><colspec colname="3" colwidth="63pt" align="left"/><colspec colname="4" colwidth="63pt" align="left"/><thead><row><entry namest="1" nameend="4" rowsep="1">TABLE 2</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>Parameter</entry><entry>Quantity of bits</entry><entry>Type</entry><entry>Description</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="49pt" align="char" char="."/><colspec colname="3" colwidth="63pt" align="left"/><colspec colname="4" colwidth="63pt" align="left"/><tbody valign="top"><row><entry>Size</entry><entry>32</entry><entry>Unsigned integer</entry><entry>Variable</entry></row><row><entry/><entry/><entry>(Uimsbf)</entry></row><row><entry>Type</entry><entry>32</entry><entry>Uimsbf</entry><entry>0x70 73 73 68</entry></row><row><entry>Version</entry><entry>8</entry><entry>Uimsbf</entry><entry>0x00</entry></row><row><entry>Flags</entry><entry>24</entry><entry>Uimsbf</entry><entry>0x00 00 00</entry></row><row><entry>SystemID</entry><entry>128</entry><entry>Uimsbf</entry><entry>0x3d5e6d359b9a41e</entry></row><row><entry/><entry/><entry/><entry>8b843dd3c6e72c42c</entry></row><row><entry>DataSize</entry><entry>32</entry><entry>Uimsbf</entry><entry>Variable</entry></row><row><entry>Data</entry><entry>DataSize*8</entry><entry>Uimsbf</entry><entry>Variable</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0244" num="0241">Parameter fields in Table 2 are described as follows:</p><p id="p-0245" num="0242">(1) A Size field is a length field, indicates a length of the entire pssh box, and includes a length of the Size field.</p><p id="p-0246" num="0243">(2) A Type field is a type field, and indicates a type, namely, a &#x2018;pssh&#x2019; (a protection system specific header), of the pssh box.</p><p id="p-0247" num="0244">(3) A Version field is a version field, and indicates a version number of the pssh box.</p><p id="p-0248" num="0245">(4) A Flags field has a fixed value, for example, 0.</p><p id="p-0249" num="0246">(5) A SystemId field is a system identifier field, and identifies a solution or a standard used by the DRM server, for example, a universally unique identifier (UUID) for China digital rights management (ChinaDRM).</p><p id="p-0250" num="0247">(6) A DataSize field is a data length field, and indicates a length of a Data field (unit: byte).</p><p id="p-0251" num="0248">(7) A Data field is a formatted data field, and is used to carry pssh data in a JSON format.</p><p id="p-0252" num="0249">An example of the pssh box is as follows: 000000a370737368000000003d5e6d359b9a41e8b843dd3c6e72c42c000000837b 2276657273696f6e223a2256312e30222c22636f6e74656e744944223a224d5441774d4441784d4 445794d7a51314e6a63344f513d3d222c226b696473223a5b224e7a5a6c4e7a52694e7a63305a44 41784e4452694d5749784f444e6d4e5467304d4445345a6d51334d546b3d225d2c22656e736368 656d61223a2263656e63227d</p><p id="p-0253" num="0250">It should be noted that the foregoing pssh box is exemplified based on a sequence of the parameters in Table 2 and a quantity of bits of each parameter. The 4-byte Size field carries &#x201c;000000a3&#x201d;. The 4-byte Type field carries &#x201c;70737368&#x201d;. The 1-byte Version field carries &#x201c;00&#x201d;. The 3-byte Flags field carries &#x201c;000000&#x201d;. The 16-byte SystemID field carries &#x201c;3d5e6d359b9a41e8b843dd3c6e72c42c&#x201d;. The 4-byte DataSize field carries &#x201c;00000083&#x201d;. The Data field carries &#x201c;7b2276657273696f6e223a2256312e30222c22636f6e74656e74494 4223a224d5441774d4441784d4445794d7a51314e6a63344f513d3d222c226b696473223a5b224e 7a5a6c4e7a52694e7a63305a4441784e4452694d5749784f444e6d4e5467304d4445345a6d5133 4d546b3d225d2c22656e736368656d61223a2263656e63227d&#x201d;.</p><p id="p-0254" num="0251">The foregoing example is encoded using Base64. An example of the encoded pssh box is as follows: AAAA03Bzc2gAAAAAPV5tNZuaQei4Q908bnLELAAAAIN7InZlcnNpb24iOiJWMS4 wIiwiY29udGVudElEIjoiTVRBdo1EQXhNREV5TXpRMU5qYzRPUTo9Iiwia2lkcyI6WyJOelpsT npSaU56YzBaREF4TkRSaU1XSXhPRE5tT1RnME1ERTRabVEzTVRrPSJdLCJlbnNjaGVtYSI6I mNlbmMifQ==</p><p id="p-0255" num="0252">S<b>150</b>: The DRM server packages the content protection data packet and the first encrypted media file and sends to a client; and correspondingly, the client receives packaged data sent by the DRM server, where the packaged data includes the content protection data packet and the first encrypted media file.</p><p id="p-0256" num="0253">Optionally, the DRM server may package the content protection data packet and the first encrypted media file and send to the client in a plurality of manners. This is not limited in this embodiment of this application.</p><p id="p-0257" num="0254">In a possible implementation, the DRM server may add the content protection data packet to a description file of the first encrypted media file.</p><p id="p-0258" num="0255">In another possible implementation, the DRM server may add the content protection data packet to an unencrypted field, where the first encrypted media file includes the unencrypted field.</p><p id="p-0259" num="0256">The following describes, by using an example, that the first encrypted media file complies with a definition of a pssh box in a common encryption in International Organization for Standardization (ISO) base media format files (CENC) format, a DASH format, an HIS protocol format, and a common media application format (CMAF).</p><p id="p-0260" num="0257">In a first possible implementation, when the first encrypted media file is in an MP4 or FMP4 format, the first encrypted media file meets a CENC standard. The first encrypted media file includes an unencrypted field. The unencrypted field includes a pssh field. The pssh field is used to carry the pssh box.</p><p id="p-0261" num="0258">For example, according to the ISO 23001-7:2016 CENC standard and the ChinaDRM standard, definitions of some unencrypted fields of the first encrypted media file are as follows:</p><p id="p-0262" num="0259">(1) In the protection system specific header (&#x2018;pssh&#x2019;) box, the 16-byte SystemID field is set to 0x3d5e6d359b9a41e8b843dd3c6e72c42c.</p><p id="p-0263" num="0260">(2) A format of &#x2018;pssh&#x2019; is the pssh box defined in Table 2.</p><p id="p-0264" num="0261">(3) A default_IsEncypted field in TrackEncryptionBox (&#x2018;tenc&#x2019;) or an IsEncypted field in SampleGroup-DescriptionBox (&#x2018;sgpd&#x2019;) is defined as follows: oxo indicates that the media file is not encrypted, 0x1 indicates that the media file is encrypted, and 0x000002-0xFFFFFF are reserved. It should be understood that the default_IsEncypted field and the IsEncypted field are unencrypted fields in an encrypted media file, and the two fields indicate whether the encrypted media file is encrypted.</p><p id="p-0265" num="0262">(4) For different encrypted schemas, a definition of a scheme type scheme_type character string in a scheme type box (&#x2018;schm&#x2019;) in a protection mode information box (&#x2018;sinf&#x2019;) is described in Table 3.</p><p id="p-0266" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="126pt" align="left"/><colspec colname="2" colwidth="70pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 3</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Encrypted schema</entry><entry>scheme_type</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>SM4-CBC sample encryption</entry><entry>sm4c</entry></row><row><entry/><entry>SM4-CBC subsample encryption</entry><entry>sm4s</entry></row><row><entry/><entry>AES-CTR sample encryption</entry><entry>cenc</entry></row><row><entry/><entry>AES-CTR subsample encryption</entry><entry>cens</entry></row><row><entry/><entry>AES-CBC sample encryption</entry><entry>cbc1</entry></row><row><entry/><entry>AES-CBC subsample encryption</entry><entry>cbcs</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0267" num="0263">In a second possible implementation, when the first encrypted media file meets the DASH standard, the media description file of the first encrypted media file is an MPD file for describing a transmission feature of a plurality of media fragment files included in the first encrypted media file. The MPD file includes a ContentProtection field. The ContentProtection field includes a cenc:pssh field. The cenc:pssh field is used to carry a pssh box obtained through Base64 encoding.</p><p id="p-0268" num="0264">For example, the ISO/IEC 23001-7[2] standard defines ISO/IEC 23009-1 DASH[3] support, to support a content protection (ContentProtection) function. According to the standard, a definition of ContentProtection is as follows:</p><p id="p-0269" num="0265">(1) A value attribute (namely, a value attribute) field in ContentProtection carries the scheme type character string defined in Table 3. When a schemeIdUri (namely, a uniform resource identifier) field carries &#x201c;urn:mpeg:dash:mp4protection:2011&#x201d;, correspondingly, a cenc:default_KID (namely, a key identifier) field carries an identifier KID of a key for encrypting a media file, and a character string in a UUID format is used, where cenc:default_KID is optional.</p><p id="p-0270" num="0266">For example, the following is an example of ContentProtection:</p><p id="p-0271" num="0267">&#x3c;ContentProtection value=&#x201c;cenc&#x201d; schemeIdUri=&#x201c;urn:mpeg:dash:mp4protection:2011&#x201d; cenc:default_KID=&#x201c;76e74b77-4d01-44b1-b183-f584018fd719&#x201d;/&#x3e;</p><p id="p-0272" num="0268">(2) When a schemeIdUri attribute field in ContentProtection carries &#x201c;3d5e6d35-9b9a-41e8-b843-dd3c6e72c42c&#x201d;, correspondingly, the cenc:pssh field carries the character string that is defined in Table 2 and that is obtained after Base64 encoding is performed on the pssh box.</p><p id="p-0273" num="0269">For example, the following is an example of ContentProtection: &#x3c;ContentProtection schemeIdUri=&#x201c;urn:uuid:3d5e6d35-9b9a-41e8-b843-dd3c6e72c42c&#x201d;&#x3e;&#x3c;cenc:pssh&#x3e;AAAA03Bzc2gAAAAAPV5tNZuaQei4Q908bnLELAAAAIN7InZ1cnNpb24iOiJWMS 4wIiwiY29udGVudElEIjoiTVRBd01EQXhNREV5TXpRMU5qYzRPUT09Iiwia2lkcyI6WyJOelps TnpSaU56YzBaREF4TkRSaU1XSXhPRE5tIRnME1ERTRabVEzTVRrPSJdLCJlbnNjaGVtYSI6I mNlbmMifQ==&#x3c;/cenc:pssh&#x3e;&#x3c;/ContentProtection&#x3e;</p><p id="p-0274" num="0270">It should be noted that, in the DASH standard, the first encrypted media file may be a streaming media file or a media fragment file in a streaming media file. When the first encrypted media file is a media fragment file in a streaming media file, the media description file of the first encrypted media file may be understood as a media description file of the streaming media file to which the media fragment file belongs. When the first encrypted media file is a streaming media file, the first key may include a key of each media fragment file in the streaming media file and a key identifier of the key of each streaming media fragment file.</p><p id="p-0275" num="0271">In a third possible implementation, when the first encrypted media file meets the HTTP live streaming HIS standard or the common media application format CMAF standard, the media description file of the first encrypted media file is an M3U8 file for describing a transmission feature of a plurality of media fragment files included in the first encrypted media file. The M3U8 file includes a #EXT-X-KEY field. The #EXT-X-KEY field includes a URI field. The URI field is used to carry a pssh box obtained through Base64 encoding.</p><p id="p-0276" num="0272">It should be noted that encryption key information of an encrypted media fragment in HLS[3] m3u8 is specified based on *EXT-X-KEY. Apple extends CMAF[4] and HLS[5] to support fMP4 fragment encryption in a cbcs scheme in the CENC standard. In an m3u8 file corresponding to audio and video, the encryption key information of the encrypted media fragment is specified based on EXT-X-KEY. The encrypted schemas in two HIS protocols, namely, HIS+TS and CMAF (CENC standard+fMP4), are supported.</p><p id="p-0277" num="0273">For example, a definition of a *EXT-X-KEY format is described in Table 4. An attribute list of #*EXT-X-KEY, namely, attributes in &#x3c;attribute-list&#x3e;, include: a method (METHOD), a uniform resource identifier (uniform resource identifier, URI), a key identifier (KEYID), an initialization vector (initialization vector, MV, and a key format (KEYFORMAT).</p><p id="p-0278" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="133pt" align="left"/><colspec colname="3" colwidth="98pt" align="left"/><thead><row><entry namest="1" nameend="3" rowsep="1">TABLE 4</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Attribute</entry><entry>Description</entry><entry>Definition</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>METHOD</entry><entry>Media encryption methods: NONE, SM4-</entry><entry>Mandatory field. A</entry></row><row><entry/><entry>CBC, SAMPLE-SM4, SAMPLE-AES,</entry><entry>correspondence to the scheme</entry></row><row><entry/><entry>SAMPLE-AES-CTR, AES-CBC, and AES-</entry><entry>type character string defined</entry></row><row><entry/><entry>CTR</entry><entry>in Table 3 and meanings are as</entry></row><row><entry/><entry/><entry>follows:</entry></row><row><entry/><entry/><entry>NONE: unencrypted;</entry></row><row><entry/><entry/><entry>SM4-CBC: sm4c;</entry></row><row><entry/><entry/><entry>SAMPLE-SM4: sm4s;</entry></row><row><entry/><entry/><entry>SAMPLE-AES: cbcs;</entry></row><row><entry/><entry/><entry>SAMPLE-AES-CTR: cens;</entry></row><row><entry/><entry/><entry>AES-CBC: cbc1; and</entry></row><row><entry/><entry/><entry>AES-CTR: cenc.</entry></row><row><entry>URI</entry><entry>URI character string for obtaining a</entry><entry>Mandatory when METHOD is</entry></row><row><entry/><entry>license, in a format of</entry><entry>not NONE</entry></row><row><entry/><entry>&#x201c;data:text/plain; base64, [character string</entry></row><row><entry/><entry>obtained after the pssh box data is encoded</entry></row><row><entry/><entry>using Base64]&#x201d;</entry></row><row><entry>KEYID</entry><entry>Key identifier, in a format of a hexadecimal</entry><entry>Optional</entry></row><row><entry/><entry>string.</entry></row><row><entry>IV</entry><entry>Encrypted initialization vector, in a format</entry><entry>Optional</entry></row><row><entry/><entry>of a hexadecimal string.</entry></row><row><entry>KEYFORMAT</entry><entry>Key format. If a bitstream format is CMAF</entry><entry>Mandatory when METHOD is</entry></row><row><entry/><entry>(CENC standard + fMP4), a value is</entry><entry>not NONE</entry></row><row><entry/><entry>ChinaDRM UUID, namely,</entry></row><row><entry/><entry>&#x201c;urn:uuid:3d5e6d35-9b9a-41e8-b843-</entry></row><row><entry/><entry>dd3c6e72c42c&#x201d;. If the bitstream format is</entry></row><row><entry/><entry>HLS + TS, the value is &#x201c;ChinaDRM</entry></row><row><entry/><entry>version/ChinaDRM solution</entry></row><row><entry/><entry>provider/Extended information&#x201d; that are</entry></row><row><entry/><entry>distinguished by slashes (/), for example,</entry></row><row><entry/><entry>&#x201c;ChinaDRM</entry></row><row><entry/><entry>V2.0/CompanyName/Extended</entry></row><row><entry/><entry>Information&#x201d;.</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0279" num="0274">An example of EXT-X-KEY is as follows:</p><p id="p-0280" num="0275">#EXT-X-KEY:MEMHOD=AES-CTR, URI=&#x201c;data:text/plain;base64, AAAA03Bzc2g AAAAAPV5tNZuaQei4Q908bnLELAAAAIN7InZIlcnNpb24iOiJWMS4wIiwiY29udGVudEIEI joiTVRBdoiEQXhNREV5TXpRMU5QYzRPUTo9Iiwia2lkcyI6WyJOelpsTnpSaU56YzBaREF4Tk RSaUiXSXhPRE5tT1RnMEiERTRabVEzTVRrPSTdLCJlbnNjaGVtYSI6ImNlbmMifQ==&#x201d;,KEYID=0x76e74b774d0144b1b183f584018fd719,IV=0x6c3369747530627476796a7679366d6c,KEYFO RMAT=&#x201c;urn:uuid:3d5e6d35-ga-4ie8-b843-dd3c6e72c42c&#x201d;</p><p id="p-0281" num="0276">It should be noted that, in the HIS/CMAF standard, the first encrypted media file may be a streaming media file or a media fragment file in a streaming media file. When the first encrypted media file is a media fragment file in a streaming media file, the media description file of the first encrypted media file may be understood as a media description file of the streaming media file to which the media fragment file belongs. When the first encrypted media file is a streaming media file, the first key may include a key of each media fragment file in the streaming media file and a key identifier of the key of each streaming media fragment file.</p><p id="p-0282" num="0277">S<b>160</b>: The client obtains the content protection data packet from the packaged data.</p><p id="p-0283" num="0278">Optionally, the client may obtain the content protection data packet from the packaged data in a plurality of manners. This is not limited in this embodiment of this application.</p><p id="p-0284" num="0279">In a possible implementation, the client may obtain the content protection data packet from the description file of the first encrypted media file.</p><p id="p-0285" num="0280">In another possible implementation, the client may obtain the content protection data packet from the unencrypted field. The first encrypted media file includes the unencrypted field.</p><p id="p-0286" num="0281">S<b>170</b>: The client decrypts the first encrypted media file based on the content protection data packet to obtain the first media file.</p><p id="p-0287" num="0282">Optionally, the client may decrypt, in a plurality of manners, the first encrypted media file based on the content protection data packet to obtain the first media file. This is not limited in this embodiment of this application.</p><p id="p-0288" num="0283">In a first possible implementation, the client may send a license request to the DRM server. The license request is used to request permission to play the first encrypted media file. The license request message carries the content protection data packet.</p><p id="p-0289" num="0284">Correspondingly, the DRM server determines the key information of the first encrypted media file based on the content protection data packet and the pre-stored mapping relationship, where the key information includes the first key and the key identifier of the first key, the key identifier identifies the key, and the mapping relationship indicates the correspondence among the content identifier, the encryption method, and the key information; and send a license to the client, where the license is used to grant permission to play the first encrypted media file, and the license carries the key information of the first encrypted media file.</p><p id="p-0290" num="0285">Correspondingly, the client receives the license sent by the DRM server, and decrypts the first encrypted media file based on the key information of the first encrypted media file to obtain the first media file.</p><p id="p-0291" num="0286">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, only the authorization license of the encrypted media file requested by the client. In this way, security of DRM can be improved, and because the license has a small data size, authorization efficiency is high.</p><p id="p-0292" num="0287">It should be noted that, in the foregoing first possible implementation, if the DRM server uses a same key (namely, the first key) to encrypt each of at least one media file (including the first media file) belonging to the content identifier by using the first encryption method, the mapping relationship pre-stored in the DRM server includes the correspondence among the content identifier, the encryption method information, and the key information of the first encrypted media file. In this case, the formatted content protection data in the content protection data packet includes the content identifier and the encryption method information.</p><p id="p-0293" num="0288">Correspondingly, the DRM server determines the key information of the first encrypted media file based on the mapping relationship, the content identifier, and the encryption method information.</p><p id="p-0294" num="0289">It should be further noted that, in the foregoing first possible implementation, if the DRM server uses different keys (the first media file is encrypted by using the first key) to encrypt each of a plurality of media files (including the first media file) belonging to the content identifier by using the first encryption method, the mapping relationship pre-stored in the DRM server includes a correspondence among the content identifier, the encryption method information, and key information of each of a plurality of encrypted media files. The key information of each encrypted media file includes a key of each encrypted media file and a key identifier of each encrypted media file. In this case, the formatted content protection data in the content protection data packet includes the content identifier, the encryption method information, and at least one of the identifier or a current playing location index of the first key.</p><p id="p-0295" num="0290">Correspondingly, the DRM server determines the key information of the first encrypted media file based on the mapping relationship, the content identifier, the encryption method information, and at least one of the identifier or the current playing location index of the first key.</p><p id="p-0296" num="0291">In a second possible implementation, when the formatted content protection data in the content protection data packet includes the content identifier and the encryption method information, the license may further carry key information of each of at least one encrypted media file that has the same content identifier and encryption method information as those of the first encrypted media file. The license is further used to grant permission to play the at least one encrypted media file.</p><p id="p-0297" num="0292">Correspondingly, the client may further decrypt each encrypted media file based on the key information of each of the at least one encrypted media file to obtain at least one media file, and play the at least one media file.</p><p id="p-0298" num="0293">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, both of the authorization license of the encrypted media file requested by the client and an authorization license of the at least one encrypted media file that has the same content identifier and encryption information as those of the first encrypted media file, and the client controls use of the authorization license of the at least one encrypted media file.</p><p id="p-0299" num="0294">For example, when the first encrypted media file is a media fragment file in a streaming media file, the at least one encrypted media file may be a streaming media fragment file that belongs to the same streaming media file as the first encrypted media file.</p><p id="p-0300" num="0295">Therefore, when decrypting and playing the at least one encrypted media file, the client does not need to request an authorization license of another encrypted media file. This can improve authorization efficiency. In addition, if the at least one encrypted media file and the first encrypted media file have continuous playing locations, playing smoothness of the client can be further improved. In addition, time shift and playback functions of a media file are supported.</p><p id="p-0301" num="0296">It should be noted that, in the foregoing second possible implementation, the formatted content protection data may include the content identifier and the encryption method information. Correspondingly, the DRM server may parse the content protection data packet to obtain the formatted content protection data, and determine the key information of the first encrypted media file based on the mapping relationship and the content identifier and the encryption method information in the formatted content protection data.</p><p id="p-0302" num="0297">It should be further noted that, in the foregoing second possible implementation, the formatted content protection data may include the content identifier, the encryption method information, and at least one of the key identifier or the current playing location index of the first encrypted media file. Correspondingly, the DRM server may parse the content protection data to obtain the formatted content protection data; and determine the key information of the first encrypted media file based on the mapping relationship, the content identifier and the encryption method information in the formatted content protection data, and at least one of the key identifier or the current playing location index of the first encrypted media file.</p><p id="p-0303" num="0298">In a third possible implementation, when the formatted content protection data in the content protection data packet includes the current playing location index field, the license in the first possible implementation may further carry key information of each of at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file. The license is further used to grant permission to play the at least one adjacent encrypted media file.</p><p id="p-0304" num="0299">Correspondingly, the client may further decrypt each encrypted media file based on the key information of each of the at least one adjacent encrypted media file to obtain at least one adjacent media file, and play the at least one adjacent media file.</p><p id="p-0305" num="0300">It should be noted that if the client requests an authorization license of an encrypted media file from the DRM server, the DRM server sends, to the client, both of the authorization license of the encrypted media file requested by the client and an authorization license of the at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file, and the client controls use of the authorization license of the another encrypted media file.</p><p id="p-0306" num="0301">Therefore, when decrypting and playing the foregoing encrypted media files with the continuous playing locations, the client does not need to request the authorization license of the another encrypted media file. This can improve authorization efficiency and improve playing smoothness of the client. In addition, time shift and playback functions of a media file are supported.</p><p id="p-0307" num="0302">Optionally, that the client decrypts the first encrypted media file based on the key information of the first encrypted media file specifically includes: parsing the content protection data packet to obtain the formatted content protection data; obtaining the first encryption method from the formatted content protection data; and decrypting the first encrypted media file based on the key information of the first encrypted media file and the first encryption method to obtain the first media file.</p><p id="p-0308" num="0303">It should be noted that, in the foregoing three possible implementation, the first encrypted media file may be a streaming media file or a media fragment file in a streaming media file. When the first encrypted media file is a streaming media file, the first key may include a key of each media fragment file in the streaming media file and a key identifier of the key of each streaming media fragment file.</p><p id="p-0309" num="0304">It should be further noted that the first encryption method may be a state cryptography algorithm. In other words, the DRM server supports encryption by using the state cryptography algorithm. The terminal can correctly parse the content protection data packet to obtain the state cryptography algorithm.</p><p id="p-0310" num="0305">In a possible implementation, the license request includes a first content protection data packet field. The content protection data packet field is used to carry the content protection data packet.</p><p id="p-0311" num="0306">In a possible implementation, the license includes a key information field. The key information field is used to carry the key information of the first encrypted media file.</p><p id="p-0312" num="0307">Optionally, the key information field is further used to carry key information of another encrypted media file authorized by the DRM server.</p><p id="p-0313" num="0308">Optionally, the license request further includes a permission type information field. The permission type information field is used to carry permission type information. The permission type information indicates at least one of online playing permission or offline playing permission.</p><p id="p-0314" num="0309">Optionally, the license further includes a permission type information field. The permission type information field is used to carry permission type information. The permission type information indicates at least one of online playing permission or offline playing permission.</p><p id="p-0315" num="0310">It should be noted that the permission type information field is extended in the license request and the license, so that offline playing can be authorized, and time shift and playback functions of offline playing are supported.</p><p id="p-0316" num="0311">In a possible implementation, in the ChinaDRM standard, the license request is generated by using a CDRMC_GetLicenseRequest function, a pu8DrmInfo parameter in the CDRMC_GetLicenseRequest function includes a DRM information field and an extension field. The DRM information field is used to carry the content protection data packet. The extension field is used to carry the permission type indication information.</p><p id="p-0317" num="0312">For example, an example of the CDRMC_GetLicenseRequest function is as follows:</p><p id="p-0318" num="0313">int CDRMC_GetLicenseRequest (CDRMC_SessionHandle hSession, unsigned char*pu8DrmInfo, unsigned int u32DrmInfoLen, unsigned char*pu8LicenseRequest, unsigned int*pu32LicenseRequestLen)</p><p id="p-0319" num="0314">A format definition of the foregoing example is as follows:</p><p id="p-0320" num="0315">(1) Function: a license obtaining request message (namely, the license request in this embodiment of this application).</p><p id="p-0321" num="0316">(2) Parameters:</p><p id="p-0322" num="0317">hSession: an input parameter and a DRM session handle;</p><p id="p-0323" num="0318">pu8DrmInfo: an input parameter and DRM information, in a format of &#x201c;[Base64 encoding of the content identifier or Base64 encoding of the pssh box] &#x201c;extensions&#x201d;: [extensions data]&#x201d;, where [extensions data] is a definable field, and extended data may be stored in an Extension field of the license obtaining request message;</p><p id="p-0324" num="0319">u32DrmInfoLen: an input parameter and a DRM information length;</p><p id="p-0325" num="0320">pu8LicenseRequest: an output parameter and a license request data buffer; and</p><p id="p-0326" num="0321">pu32LicenseRequestLen: an input and output parameter, an input license request data buffer length, and an output license request data length.</p><p id="p-0327" num="0322">(3) Return: int, 0 indicates success, and other values indicate failure.</p><p id="p-0328" num="0323">(4) Description offline request: supports an offline license, where according to the ChinaDRM standard, {&#x201c;keyType&#x201d;:&#x201c;KEY_TYPE_OFFLINE&#x201d; } may be extended in the Extension field in the license request message, and is placed into an authenticationData field after BASE64 encoding. An example is as follows:</p><p id="p-0329" num="0324">&#x201c;extensions&#x201d;:{&#x201c;authenticationData&#x201d;:&#x201c;eyJrZXUeXBIjoiSoVZX1RZUEVfToZGTElOR SJ9&#x201d;}</p><p id="p-0330" num="0325">For example, an example of a pu8DrmInfo field in the CDRMC_GetLicenseRequest function is as follows:</p><p id="p-0331" num="0326">AAAA03Bzc2gAAAAAPV5tNZuaQei4Q908bnLELAAAAIN7InZIcnNpb24iOiJWMS4 wIiwiY29udGVudElEIjoiTVRBdo1EQXhNREV5TXpRMU5qYzRPUTo9Iiwia2lkcyI6WyJOelpsT npSaU56YzBaREF4TkRSaU1XSXhPRE5tlRnME1ERTRabVEz TVRrPSJdLCJlbnNjaGVtYSI6I mNlbmMifQ==&#x201c;extensions&#x201d;:{&#x201c;authenticationData&#x201d;:&#x201c;eyJrZXMUeXBIjoiSoVZXiRZUEVfToZGTE lORSJ9&#x201d;}&#x201d;</p><p id="p-0332" num="0327">Optionally, the method further includes: The client plays the first media file.</p><p id="p-0333" num="0328">According to the DRM method provided in this embodiment of this application, an entire-process solution based on content protection data packets in a uniform format is provided for the DRM server and the DRM client. The DRM server and the DRM client that use the solution can implement an accurate and effective interworking operation. Further, because the formatted content protection data in the packaged data sent by the DRM server is obtained by performing the first formatting on the content protection data, after receiving the packaged data, the client may parse the packaged data to obtain the formatted content protection data based on the first formatting. Therefore, the DRM server and the client can transmit data in a uniform format to perform a DRM interworking operation.</p><p id="p-0334" num="0329">In other words, in all DRM processes performed between the DRM server and the client, the pssh data and the pssh box in a uniform format are used. This can ensure that messages transmitted between the DRM server and the client have a uniform format, and both the DRM server and the client can correctly parse the messages in the uniform format and therefore can perform a proper DRM interworking operation.</p><p id="p-0335" num="0330">The foregoing describes the DRM method <b>100</b> provided in this embodiment of this application with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The following describes a DRM system to which the method <b>100</b> can be applied.</p><p id="p-0336" num="0331"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a DRM system <b>200</b> according to an embodiment of this application. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the DRM system <b>200</b> includes a DRM server <b>210</b> and a client <b>220</b>. The DRM server <b>210</b> includes an encryption service module <b>211</b>, a key service module <b>212</b>, and an authorization service module <b>213</b>. The client <b>220</b> includes a media playing module <b>221</b>, a DRM processing module <b>222</b>, a decryption module <b>223</b>, and an authorization module <b>224</b>.</p><p id="p-0337" num="0332">It should be noted that the DRM processing module <b>222</b>, the decryption module <b>223</b>, and the authorization module <b>224</b> in the client <b>220</b> form a DRM module <b>225</b>. The DRM module <b>225</b> and the media playing module <b>221</b> may be two independent apparatuses or integrated into one apparatus. This is not limited in this embodiment of this application.</p><p id="p-0338" num="0333">It should be further noted that the foregoing apparatus may be understood as a virtual apparatus, and the foregoing integration may be logical integration.</p><p id="p-0339" num="0334">For example, the media playing module <b>221</b> and the DRM module <b>225</b> are two independent applications.</p><p id="p-0340" num="0335">For another example, the media playing module <b>221</b> and the DRM module <b>225</b> are different functional modules of one application.</p><p id="p-0341" num="0336">It should be further noted that formatted content protection data in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be understood as pssh data, and a content protection data packet may be understood as a pssh box.</p><p id="p-0342" num="0337">The encryption service module <b>211</b> is configured to determine a first encryption method for a first media file.</p><p id="p-0343" num="0338">The key service module <b>212</b> is configured to determine a first key for the first media file.</p><p id="p-0344" num="0339">The encryption service module <b>211</b> or the key service module <b>212</b> is further configured to: encrypt the first media file by using the first encryption method to obtain a first encrypted media file; generate content protection description information of the first encrypted media file, where the content protection description information includes a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies the first encryption method; perform first formatting on the content protection description information to generate the formatted content protection data (the pssh data), as shown in step (1) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>; and encapsulate the formatted content protection data to generate the content protection data packet (the pssh box).</p><p id="p-0345" num="0340">In a possible implementation, the formatted content protection data includes a version number field, a content identifier field, an encrypted schema field, and at least one of a key identifier field, a current playing location index field, or an extension field.</p><p id="p-0346" num="0341">It should be noted that, regardless of whether the encryption service module <b>211</b> or the key service module <b>212</b> performs the foregoing steps to generate the pssh data and the pssh box, both the encryption service module <b>211</b> and the key service module <b>212</b> need to synchronize the pssh data and the pssh box that are obtained in the process of performing the foregoing steps.</p><p id="p-0347" num="0342">It should be further noted that, for the foregoing steps of generating the pssh data and the pssh box and related descriptions, refer to S<b>110</b> to S<b>140</b> in the method <b>100</b>. To avoid repetition, details are not described herein again.</p><p id="p-0348" num="0343">The key service module <b>212</b> is further configured to store a correspondence among the content identifier, the encryption method information, and key information of the first encrypted media file. The key information includes the first key and a key identifier of the first key. The key identifier identifies the key.</p><p id="p-0349" num="0344">The encryption service module <b>211</b> is further configured to: package the content protection data packet and the first encrypted media file to obtain packaged data, and send the packaged data to the media playing module <b>221</b> of the client, as shown in step (2) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0350" num="0345">It should be noted that, for the foregoing step of packaging the pssh box and the first encrypted media file and related descriptions, refer to S<b>150</b> in the method <b>100</b>. To avoid repetition, details are not described herein again.</p><p id="p-0351" num="0346">The media playing module <b>221</b> is configured to: receive the packaged data sent by the encryption service module <b>211</b>, where the packaged data includes the content protection data packet and the first encrypted media file; obtain the content protection data packet from the packaged data; and send DRM information to the DRM processing module <b>222</b>, where the DRM information includes the content protection data packet, as shown in step (3) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0352" num="0347">It should be noted that, for the foregoing step of obtaining the pssh box from the packaged data and related descriptions, refer to S<b>160</b> in the method <b>100</b>. To avoid repetition, details are not described herein again.</p><p id="p-0353" num="0348">In a possible implementation, the DRM information includes a DRM information field. The DRM information field is used to carry the content protection data packet.</p><p id="p-0354" num="0349">The DRM processing module <b>222</b> is configured to: receive the DRM information sent by the media playing module <b>221</b>; and send the content protection data packet in the DRM information to the authorization module <b>224</b>, as shown in step (4) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0355" num="0350">The authorization module <b>224</b> is configured to: receive the content protection data packet sent by the DRM processing module <b>222</b>; and send a license request to the authorization service module <b>213</b> in the server <b>210</b>, where the license request is used to request permission to play the first encrypted media file, and the license request message carries the content protection data packet, as shown in step (5) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0356" num="0351">It should be noted that, for the step of sending the license request to the authorization service module <b>213</b> by the authorization module <b>224</b>, refer to introduction and descriptions related to the license request in the method <b>100</b>. To avoid repetition, details are not described herein again.</p><p id="p-0357" num="0352">The authorization service module <b>213</b> is configured to: receive the license request sent by the authorization module <b>224</b>; determine the key information of the first encrypted media file based on the content protection data packet and a pre-stored mapping relationship, where the mapping relationship indicates the correspondence among the content identifier, the encryption method, and the key information; and send a license to the authorization module <b>224</b> in the client <b>220</b>, where the license is used to grant permission to play the first encrypted media file, and the license carries the key information of the first encrypted media file, as shown in step (7) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0358" num="0353">In a possible implementation, because the key service module <b>212</b> stores a mapping relationship indicating the correspondence among the content identifier, the encryption method information, and the key information, the authorization service module <b>213</b> is specifically configured to: obtain the mapping relationship from the key service module <b>212</b>, as shown in step (6) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>; and determine the key information of the first encrypted media file based on the content protection data packet and the pre-stored mapping relationship.</p><p id="p-0359" num="0354">It should be noted that, for the step of authorizing the license by the authorization service module <b>213</b> based on the license request sent by the authorization module <b>224</b>, refer to introduction and descriptions related to license authorization in the method <b>100</b>. To avoid repetition, details are not described herein again.</p><p id="p-0360" num="0355">Optionally, step (5) may be replaced with the following path: the authorization module <b>224</b>-the DRM processing module <b>222</b>-the media playing module <b>221</b>-the authorization service module <b>213</b>; and step (7) may be replaced with the following path: the authorization service module <b>213</b>-the media playing module <b>221</b>-the DRM processing module <b>222</b>-the authorization module <b>224</b>.</p><p id="p-0361" num="0356">The media playing module <b>221</b> is further configured to invoke a decryption interface of the DRM module <b>225</b>, and send the first encrypted media file to the decryption module <b>223</b>, as shown in step (8) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0362" num="0357">Optionally, when the formatted content protection data includes the key identifier of the first encrypted media file, the media playing module <b>221</b> is further configured to: parse the content protection data packet to obtain the formatted content protection data; obtain the key identifier of the first encrypted media file from the formatted content protection data; and invoke the decryption interface, and send the key identifier of the first encrypted media file to the decryption module <b>223</b>, as shown in step (8) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0363" num="0358">Optionally, the media playing module <b>221</b> is further configured to: parse the content protection data packet to obtain the formatted content protection data; obtain the first encryption method from the formatted content protection data; and send the encryption method information to the decryption module <b>223</b> through the decryption interface, as shown in step (8) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0364" num="0359">The DRM processing module <b>222</b> is further configured to: parse the content protection data packet in the DRM information to obtain the formatted content protection data; obtain the first encryption method from the formatted content protection data; and send the encryption method information to the decryption module <b>223</b>, as shown in step (9-1) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0365" num="0360">It should be noted that both the media playing module <b>221</b> and the DRM processing module <b>222</b> may parse the content protection data packet to obtain the encryption method information. However, in a conventional technology, the media playing module <b>221</b> cannot correctly parse a state cryptography algorithm. When the encryption method of the first encrypted media file is the state cryptography algorithm, the media playing module <b>221</b> cannot correctly parse the content protection data packet to obtain the state cryptography algorithm. Therefore, a priority of the encryption method information parsed by the DRM processing module <b>222</b> may be set to be higher than that of the encryption method information parsed by the media playing module <b>221</b>. In this way, the client can support the state cryptography algorithm.</p><p id="p-0366" num="0361">The decryption module <b>223</b> is configured to: receive the key identifier that is of the first encrypted media file and that is sent by the media playing module <b>221</b>; request the key information of the first encrypted media file from the authorization module <b>224</b> based on the key identifier; and receive the key information that is of the first encrypted media file and that is sent by the authorization module <b>224</b>, as shown in step (9-2) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0367" num="0362">It should be noted that when the license carries key information of a plurality of encrypted media files, the decryption module <b>223</b> may request the key information of the plurality of encrypted media files from the authorization module <b>224</b> at a time; or may request the key information of the plurality of encrypted media files from the authorization module <b>224</b> in batches, for example, request one piece of key information when using one piece of key information.</p><p id="p-0368" num="0363">The decryption module <b>223</b> is further configured to: receive the first encrypted media file sent by the media playing module <b>221</b>, as shown in step (8) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>; receive the encryption method information sent by the DRM processing module <b>222</b> or the media playing module <b>221</b>, as shown in step (9-1) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>; receive the key information of the first encrypted media file sent by the authorization module <b>224</b>, as shown in step (9-2) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>; decrypt the first encrypted media file based on the key of the first encrypted media file and the encryption method information to obtain the first media file; and send the first media file to the media playing module <b>221</b>, as shown in step (10) in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0369" num="0364">The media playing module <b>221</b> is further configured to receive the first media file sent by the decryption module <b>223</b>, and play the first media file.</p><p id="p-0370" num="0365">The foregoing describes the DRM method <b>100</b> and the DRM system <b>200</b> provided in embodiments of this application with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The following describes, with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref> to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a DRM apparatus <b>300</b> configured to perform the foregoing method <b>100</b>.</p><p id="p-0371" num="0366">It should be noted that the DRM apparatus <b>300</b> may be the DRM server or the client in the embodiment of the method <b>100</b>. This is not limited in this embodiment of this application.</p><p id="p-0372" num="0367">It may be understood that, to implement the foregoing functions, the apparatus <b>300</b> includes a corresponding hardware and/or software module for performing each function. Algorithm steps in the examples described with reference to embodiments disclosed in this specification can be implemented by hardware or a combination of hardware and computer software in this application. Whether a function is executed by hardware or hardware driven by computer software depends on particular applications and design constraints of the technical solutions. A person skilled in the art may use different methods to implement the described functions for each particular application with reference to embodiments, but it should not be considered that the implementation goes beyond the scope of this application.</p><p id="p-0373" num="0368">In embodiments, functional modules of the apparatus <b>300</b> may be obtained through division according to the foregoing method examples. For example, the functional modules may be obtained through division corresponding to various functions, or two or more functions may be integrated into one processing module. The integrated module may be implemented in a form of hardware. It should be noted that, in embodiments, division into the modules is an example and is merely logical function division, and may be other division in an actual implementation.</p><p id="p-0374" num="0369">When each functional module is obtained through division corresponding to each function, <figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic diagram of a possible composition of the DRM server and the client in the foregoing embodiments. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the apparatus <b>300</b> may include a transceiver unit <b>310</b> and a processing unit <b>320</b>.</p><p id="p-0375" num="0370">The processing unit <b>320</b> may control the transceiver unit <b>310</b> to implement the method in the embodiment of the method <b>100</b>, and/or another process of the technology described in this specification.</p><p id="p-0376" num="0371">It should be noted that all related content of the steps in the foregoing method embodiments may be cited in function description of corresponding functional modules. Details are not described herein again.</p><p id="p-0377" num="0372">The apparatus <b>300</b> provided in this embodiment is configured to perform the method <b>100</b>. Therefore effects that are the same as those of the foregoing implementation method can be achieved.</p><p id="p-0378" num="0373">In a possible implementation, the apparatus <b>300</b> is the DRM server. Correspondingly, the processing unit <b>310</b> may include the encryption service module <b>211</b>, the key service module <b>212</b>, and the authorization service module <b>213</b>. In other words, the processing unit <b>310</b> is configured to implement functions corresponding to the encryption service module <b>211</b>, the key service module <b>212</b>, and the authorization service module <b>213</b>.</p><p id="p-0379" num="0374">In a possible implementation, the apparatus <b>300</b> is the client. Correspondingly, the processing unit <b>310</b> may include the media playing module <b>221</b>, the DRM processing module <b>222</b>, the decryption module <b>223</b>, and the authorization module <b>224</b>. In other words, the processing unit <b>310</b> is configured to implement functions corresponding to the media playing module <b>221</b>, the DRM processing module <b>222</b>, the decryption module <b>223</b>, and the authorization module <b>224</b>.</p><p id="p-0380" num="0375">When an integrated unit is used, the apparatus <b>300</b> may include a processing unit, a storage unit, and a communication unit. The processing unit may be configured to control and manage an action of the apparatus <b>300</b>, for example, may be configured to support the apparatus <b>300</b> in performing steps performed by the foregoing units. The storage unit may be configured to support the apparatus <b>300</b> in storing program code, data, and the like. The communication unit may be configured to support communication between the apparatus <b>300</b> and another device.</p><p id="p-0381" num="0376">The processing unit may be a processor or a controller. The controller may implement or execute various example logical blocks, modules, and circuits described with reference to content disclosed in this application. The processor may alternatively be a combination, for example, a combination including one or more microprocessors or a combination of digital signal processor (digital signal processor, DSP) and a microprocessor, for implementing a computing function. The storage unit may be a memory. The communication unit may be specifically a device that communicates with another electronic device, for example, a radio frequency circuit, a Bluetooth chip, and a Wi-Fi chip.</p><p id="p-0382" num="0377">In a possible implementation, the apparatus <b>300</b> in this embodiment may be a DRM apparatus <b>400</b> having a structure shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The apparatus <b>400</b> may be a schematic diagram of a structure of a DRM server, or may be a schematic diagram of a structure of a client. The apparatus <b>400</b> includes a processor <b>410</b> and a transceiver <b>420</b>. The processor <b>410</b> and the transceiver <b>420</b> communicate with each other through an internal connection path. A related function implemented by the processing unit <b>320</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be implemented by the processor <b>410</b>. A related function implemented by the transceiver unit <b>310</b> may be implemented by the processor <b>410</b> by controlling the transceiver <b>420</b>.</p><p id="p-0383" num="0378">Optionally, the server <b>400</b> may further include a memory <b>430</b>. The processor <b>410</b>, the transceiver <b>420</b>, and the memory <b>430</b> communicate with one another through an internal connection path. A related function implemented by the storage unit in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be implemented by the memory <b>430</b>.</p><p id="p-0384" num="0379">In a possible implementation, when the client in the foregoing method <b>100</b> is deployed in a terminal, the apparatus <b>300</b> in this embodiment of this application may be the terminal.</p><p id="p-0385" num="0380"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of a structure of a terminal <b>500</b>. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the terminal <b>500</b> may include a processor <b>510</b>, an external memory interface <b>520</b>, an internal memory <b>521</b>, a universal serial bus (USB) interface <b>530</b>, a charging management module <b>540</b>, a power management module <b>541</b>, a battery <b>542</b>, an antenna <b>1</b>, an antenna <b>2</b>, a mobile communication module <b>550</b>, a wireless communication module <b>560</b>, an audio module <b>570</b>, a speaker <b>570</b>A, a receiver <b>570</b>B, a microphone <b>570</b>C, a headset jack <b>570</b>D, a sensor module <b>580</b>, a button <b>590</b>, a motor <b>591</b>, an indicator <b>592</b>, a camera <b>593</b>, a display <b>594</b>, a subscriber identity module (SIM) card interface <b>595</b>, and the like.</p><p id="p-0386" num="0381">It may be understood that the structure shown in this embodiment of this application does not constitute a specific limitation on the terminal <b>500</b>. In some other embodiments of this application, the terminal <b>500</b> may include more or fewer components than those shown in the figure, or some components may be combined, or some components may be split, or there may be a different component layout. The components shown in the figure may be implemented by hardware, software, or a combination of software and hardware.</p><p id="p-0387" num="0382">The processor <b>510</b> may include one or more processing units. For example, the processor <b>510</b> may include an application processor (AP), a modem processor, a graphics processing unit (GPU), an image signal processor (ISP), a controller, a video codec, a digital signal processor (DSP), a baseband processor, a neural-network processing unit (NPU), and/or the like. Different processing units may be independent components, or may be integrated into one or more processors. In some embodiments, the terminal <b>500</b> may alternatively include one or more processors <b>510</b>. The controller may generate an operation control signal based on instruction operation code and a time sequence signal, to complete control of instruction fetching and instruction execution. In some other embodiments, a memory may further be disposed in the processor <b>510</b>, to store instructions and data. For example, the memory in the processor <b>510</b> may be a cache. The memory may store instructions or data just used or cyclically used by the processor <b>510</b>. If the processor <b>510</b> needs to use the instructions or the data again, the processor <b>510</b> may directly invoke the instructions or the data from the memory. In this way, repeated access is avoided, waiting time of the processor <b>510</b> is reduced, and efficiency of processing data or executing instructions by the terminal <b>500</b> is improved.</p><p id="p-0388" num="0383">In some embodiments, the processor <b>510</b> may include one or more interfaces. The interface may include an inter-integrated circuit (I2C) interface, an inter-integrated circuit sound (I2S) interface, a pulse code modulation (PCM) interface, a universal asynchronous receiver/transmitter (UART) interface, a mobile industry processor interface (MIPI), a general-purpose input/output (GPIO) interface, a SIM card interface, a USB port, and/or the like. The USB port <b>530</b> is a port that conforms to a USB standard specification, and may be specifically a mini USB port, a micro USB port, a USB Type-C port, or the like. The USB port <b>530</b> may be configured to connect to a charger to charge the terminal <b>500</b>, or may be configured to transmit data between the terminal <b>500</b> and a peripheral device. The USB port <b>530</b> may alternatively be configured to connect to a headset, and play audio by using the headset.</p><p id="p-0389" num="0384">It may be understood that an interface connection relationship between the modules in this embodiment of this application is merely an example for description, and does not constitute a limitation on the structure of the terminal <b>500</b>. In some other embodiments of this application, the terminal <b>500</b> may alternatively use an interface connection manner different from that in the foregoing embodiment, or may use a combination of a plurality of interface connection manners.</p><p id="p-0390" num="0385">The charging management module <b>540</b> is configured to receive a charging input from a charger. The charger may be a wireless charger or a wired charger. In some embodiments of wired charging, the charging management module <b>540</b> may receive a charging input of a wired charger through the USB port <b>530</b>. In some embodiments of wireless charging, the charging management module <b>540</b> may receive a wireless charging input through a wireless charging coil of the terminal <b>500</b>. The charging management module <b>540</b> may further supply power to the terminal by using the power management module <b>541</b> while charging the battery <b>542</b>.</p><p id="p-0391" num="0386">The power management module <b>541</b> is configured to connect to the battery <b>542</b>, the charging management module <b>540</b>, and the processor <b>510</b>. The power management module <b>541</b> receives an input of the battery <b>542</b> and/or the charging management module <b>540</b>, and supplies power to the processor <b>510</b>, the internal memory <b>521</b>, an external memory, the display <b>594</b>, the camera <b>593</b>, the wireless communication module <b>560</b>, and the like. The power management module <b>541</b> may be further configured to monitor parameters such as a battery capacity, a battery cycle count, and a battery health status (electric leakage or impedance). In some other embodiments, the power management module <b>541</b> may alternatively be disposed in the processor <b>510</b>. In some other embodiments, the power management module <b>541</b> and the charging management module <b>540</b> may alternatively be disposed in a same device.</p><p id="p-0392" num="0387">A wireless communication function of the terminal <b>500</b> may be implemented through the antenna <b>1</b>, the antenna <b>2</b>, the mobile communication module <b>550</b>, the wireless communication module <b>560</b>, the modem processor, the baseband processor, and the like.</p><p id="p-0393" num="0388">The antenna <b>1</b> and the antenna <b>2</b> are configured to transmit and receive an electromagnetic wave signal. Each antenna in the terminal <b>500</b> may be configured to cover one or more communication frequency bands. Different antennas may be further multiplexed, to improve antenna utilization. For example, the antenna <b>5</b> may be multiplexed as a diversity antenna of a wireless local area network. In some other embodiments, the antenna may be used in combination with a tuning switch.</p><p id="p-0394" num="0389">The mobile communication module <b>550</b> may provide a solution that is applied to the terminal <b>500</b> and that includes wireless communication such as 2G, 3G, 4G, 5G, and the like. The mobile communication module <b>550</b> may include at least one filter, a switch, a power amplifier, a low noise amplifier (low noise amplifier, LNA), and the like. The mobile communication module <b>550</b> may receive an electromagnetic wave through the antenna <b>1</b>, perform processing such as filtering or amplification on the received electromagnetic wave, and transmit a processed electromagnetic wave to the modem processor for demodulation. The mobile communication module <b>550</b> may further amplify a signal modulated by the modem processor, and convert the signal into an electromagnetic wave for radiation through the antenna <b>5</b>. In some embodiments, at least some functional modules in the mobile communication module <b>550</b> may be disposed in the processor <b>510</b>. In some embodiments, at least some functional modules in the mobile communication module <b>550</b> and at least some modules in the processor <b>510</b> may be disposed in a same device.</p><p id="p-0395" num="0390">The wireless communication module <b>560</b> may provide a solution, applied to the terminal <b>500</b>, to wireless communication including a wireless local area network (WLAN) (for example, a wireless fidelity (Wi-Fi) network), Bluetooth (Bluetooth, BT), a global navigation satellite system (GNSS), frequency modulation (FM), a near field communication (NFC) technology, an infrared (IR) technology, and the like.</p><p id="p-0396" num="0391">Optionally, the wireless communication module <b>560</b> may be one or more components integrating at least one communication processing module. One communication processing module may correspond to one network interface. The network interface may be disposed in different service function modes. Network interfaces disposed in different modes may establish network connections corresponding to the modes.</p><p id="p-0397" num="0392">For example, a network connection supporting a P2P function may be established by using a network interface in a P2P function mode. A network connection supporting an STA function may be established by using a network interface in an STA function mode. A network connection supporting an AP function may be established by using a network interface in an AP mode.</p><p id="p-0398" num="0393">The wireless communication module <b>560</b> receives an electromagnetic wave through the antenna <b>2</b>, performs frequency modulation and filtering processing on an electromagnetic wave signal, and sends a processed signal to the processor <b>510</b>. The wireless communication module <b>560</b> may further receive a to-be-sent signal from the processor <b>510</b>, perform frequency modulation and amplification on the signal, and convert the signal into an electromagnetic wave for radiation through the antenna <b>2</b>.</p><p id="p-0399" num="0394">The terminal <b>500</b> implements a display function by using the GPU, the display <b>594</b>, the application processor, and the like. The GPU is a microprocessor for image processing, and is connected to the display <b>594</b> and the application processor. The GPU is configured to perform mathematical and geometric computation, and render an image. The processor <b>510</b> may include one or more GPUs that execute program instructions to generate or change display information.</p><p id="p-0400" num="0395">The display <b>594</b> is configured to display an image, a video, or the like. The display <b>594</b> includes a display panel. The display panel may use a liquid crystal display (LCD), an organic light-emitting diode (OLED), an active-matrix organic light-emitting diode (AMOLED), a flexible light-emitting diode (FLED), a mini-LED, a micro-LED, a micro-OLED, a quantum dot light-emitting diode (QLED), and the like. In some embodiments, the terminal <b>500</b> may include one or more displays <b>594</b>.</p><p id="p-0401" num="0396">In some embodiments of this application, when the display panel is made of a material such as an OLED, an AMOLED, or an FLED, the display <b>594</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be folded. Herein, that the display <b>594</b> may be folded means that the display may be folded to any angle at any part and may be maintained at the angle. For example, the display <b>594</b> may be folded left and right in the middle, or may be folded up and down in the middle. In this application, the display that can be folded is referred to as a foldable display. The touch display may be a display, or may be a display formed by combining a plurality of displays. This is not limited herein.</p><p id="p-0402" num="0397">The display <b>594</b> of the terminal <b>500</b> may be a flexible display. Currently, the flexible display attracts much attention because of unique features and huge potential of the flexible display. Compared with a conventional display, the flexible display has features of strong flexibility and bendability, and can provide a user with a new bendability-based interaction mode, to satisfy more requirements of the user on a terminal. For a terminal equipped with a foldable display, the foldable display of the terminal may be switched between a small display in a folded form and a large display in an unfolded form at any time. Therefore, the user uses a multi-screen display function more frequently on the terminal equipped with the foldable display.</p><p id="p-0403" num="0398">The terminal <b>500</b> may implement a photographing function through the ISP, the camera <b>593</b>, the video codec, the GPU, the display <b>594</b>, the application processor, and the like.</p><p id="p-0404" num="0399">The ISP is configured to process data fed back by the camera <b>593</b>. For example, during photographing, a shutter is pressed, and light is transmitted to a photosensitive element of the camera through a lens. An optical signal is converted into an electrical signal, and the photosensitive element of the camera transmits the electrical signal to the ISP for processing, to convert the electrical signal into a visible image. The ISP may further perform algorithm optimization on noise, brightness, and complexion of the image. The ISP may further optimize parameters such as exposure and a color temperature of a photographing scenario. In some embodiments, the ISP may be disposed in the camera <b>593</b>.</p><p id="p-0405" num="0400">The camera <b>593</b> is configured to capture a static image or a video. An optical image of an object is generated through the lens, and is projected onto the photosensitive element. The photosensitive element may be a charge coupled device (CCD) or a complementary metal-oxide-semiconductor (CMOS) photoelectric transistor. The photosensitive element converts an optical signal into an electrical signal, and then transmits the electrical signal to the ISP to convert the electrical signal into a digital image signal. The ISP outputs the digital image signal to the DSP for processing. The DSP converts the digital image signal into an image signal in a standard format such as RGB or YUV. In some embodiments, the terminal <b>500</b> may include one or more cameras <b>593</b>.</p><p id="p-0406" num="0401">The digital signal processor is configured to process a digital signal, and may process another digital signal in addition to the digital image signal. For example, when the terminal <b>500</b> selects a frequency, the digital signal processor is configured to perform Fourier transform and the like on frequency energy.</p><p id="p-0407" num="0402">The video codec is configured to compress or decompress a digital video. The terminal <b>500</b> may support one or more video codecs. In this way, the terminal <b>500</b> may play or record videos in a plurality of encoding formats, for example, moving picture experts group (MPEG)-1, MPEG-2, MPEG-3, and MPEG-4.</p><p id="p-0408" num="0403">The NPU is a neural-network (NN) computing processor. The NPU quickly processes input information based on a structure of a biological neural network, for example, a transfer service function between human brain neurons, and may further continuously perform self-learning. The NPU can implement applications such as intelligent cognition of the terminal <b>500</b>, for example, image recognition, facial recognition, speech recognition, and text understanding.</p><p id="p-0409" num="0404">The external memory interface <b>520</b> may be configured to connect to an external storage card, for example, a micro SD card, to extend a storage capability of the terminal <b>500</b>. The external storage card communicates with the processor <b>510</b> through the external memory interface <b>520</b>, to implement a data storage function. For example, files such as music and videos are stored in the external storage card.</p><p id="p-0410" num="0405">The internal memory <b>521</b> may be configured to store one or more computer programs. The one or more computer programs include instructions. The processor <b>510</b> may run the instructions stored in the internal memory <b>521</b>, so that the terminal <b>500</b> performs a screen-off display method provided in some embodiments of this application, various applications, data processing, and the like. The internal memory <b>521</b> may include a program storage area and a data storage area. The program storage area may store an operating system. The program storage area may further store one or more applications (such as gallery and contacts), and the like. The data storage area may store data (for example, photos and contacts) created during use of the terminal <b>500</b>, and the like. In addition, the internal memory <b>521</b> may include a high-speed random access memory, or may include a nonvolatile memory, for example, one or more magnetic disk storage devices, a flash memory device, or a universal flash storage (UFS). In some embodiments, the processor <b>510</b> may run the instructions stored in the internal memory <b>521</b> and/or the instructions stored in the memory that is disposed in the processor <b>510</b>, so that the terminal <b>500</b> performs the screen-off display method provided in embodiments of this application, other applications, and data processing. The terminal <b>500</b> may implement an audio function, for example, music playing and recording, through the audio module <b>570</b>, the speaker <b>570</b>A, the receiver <b>570</b>B, the microphone <b>570</b>C, the headset jack <b>570</b>D, the application processor, and the like.</p><p id="p-0411" num="0406">The sensor module <b>580</b> may include a pressure sensor <b>580</b>A, a gyroscope sensor <b>580</b>B, a barometric pressure sensor <b>580</b>C, a magnetic sensor <b>580</b>D, an acceleration sensor <b>580</b>E, a distance sensor <b>580</b>F, an optical proximity sensor <b>580</b>G, a fingerprint sensor <b>580</b>H, a temperature sensor <b>580</b>J, a touch sensor <b>580</b>K, an ambient light sensor <b>580</b>L, a bone conduction sensor <b>580</b>M, and the like.</p><p id="p-0412" num="0407">An embodiment further provides a computer storage medium. The computer storage medium stores computer instructions. When the computer instructions are run on an electronic device, the electronic device is enabled to perform the foregoing related method steps, to implement the DRM method in the foregoing embodiments.</p><p id="p-0413" num="0408">An embodiment further provides a computer program product. When the computer program product runs on a computer, the computer is enabled to perform the foregoing related steps, to implement the DRM method in the foregoing embodiments.</p><p id="p-0414" num="0409">In addition, an embodiment of this application further provides an apparatus. The apparatus may be specifically a chip, a component, or a module. The apparatus may include a processor and a memory that are connected. The memory is configured to store computer-executable instructions. When the apparatus runs, the processor may execute the computer-executable instructions stored in the memory, to enable the chip to perform the DRM method in the foregoing method embodiments.</p><p id="p-0415" num="0410">The server, the terminal, the computer storage medium, the computer program product, or the chip provided in embodiments is configured to perform the corresponding method provided above. Therefore, for beneficial effects that can be achieved by the server, the terminal, the computer storage medium, the computer program product, or the chip, refer to the beneficial effects in the corresponding method provided above. Details are not described herein again.</p><p id="p-0416" num="0411">It should be understood that, in embodiments of this application, sequence numbers of the foregoing processes do not mean execution sequences. The execution sequences of the processes should be determined based on functions and internal logic of the processes, and should not constitute any limitation on implementation processes of embodiments of this application.</p><p id="p-0417" num="0412">A person of ordinary skill in the art may be aware that, in combination with the examples described in embodiments disclosed in this specification, units and algorithm steps may be implemented by electronic hardware or a combination of computer software and electronic hardware. Whether the functions are performed by hardware or software depends on particular applications and design constraints of the technical solutions. A person skilled in the art may use different methods to implement the described functions for each particular application, but it should not be considered that the implementation goes beyond the scope of this application.</p><p id="p-0418" num="0413">It may be clearly understood by a person skilled in the art that, for the purpose of convenient and brief description, for a detailed working process of the foregoing system, apparatus, and unit, refer to a corresponding process in the foregoing method embodiments, and details are not described herein again.</p><p id="p-0419" num="0414">In the several embodiments provided in this application, it should be understood that the disclosed system, apparatus, and method may be implemented in other manners. For example, the described apparatus embodiment is merely an example. For example, division into the units is merely logical function division and may be other division in actual implementation. For example, a plurality of units or components may be combined or integrated into another system, or some features may be ignored or not performed. In addition, the displayed or discussed mutual couplings or direct couplings or communication connections may be implemented by using some interfaces. The indirect couplings or communication connections between the apparatuses or units may be implemented in electronic, mechanical, or other forms.</p><p id="p-0420" num="0415">The units described as separate parts may or may not be physically separate, and parts displayed as units may or may not be physical units, may be located in one position, or may be distributed on a plurality of network units. Some or all of the units may be selected based on actual requirements to achieve the objectives of the solutions of embodiments.</p><p id="p-0421" num="0416">In addition, functional units in embodiments of this application may be integrated into one processing unit, or each of the units may exist alone physically, or two or more units are integrated into one unit.</p><p id="p-0422" num="0417">When the functions are implemented in the form of a software functional unit and sold or used as an independent product, the functions may be stored in a computer-readable storage medium. Based on such an understanding, the technical solutions of this application essentially, or the part contributing to the conventional technology, or some of the technical solutions may be implemented in a form of a software product. The computer software product is stored in a storage medium, and includes several instructions for instructing a computer device (which may be a personal computer, a server, or a network device) to perform all or some of the steps of the methods described in embodiments of this application. The foregoing storage medium includes any medium that can store program code, such as a USB flash drive, a removable hard disk, a read-only memory (ROM), a random access memory (RAM), a magnetic disk, or a compact disc.</p><p id="p-0423" num="0418">The foregoing descriptions are merely specific implementations of this application, but are not intended to limit the protection scope of this application. Any variation or replacement readily figured out by a person skilled in the art within the technical scope disclosed in this application shall fall within the protection scope of this application. Therefore, the protection scope of this application shall be subject to the protection scope of the claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-15" num="01-15"><claim-text><b>1</b>.-<b>15</b>. (canceled)</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A method, comprising:<claim-text>encrypting, by a digital rights management (DRM) server, a first media file using a first encryption method, to obtain a first encrypted media file;</claim-text><claim-text>generating, by the DRM server, content protection description information of the first encrypted media file, wherein the content protection description information comprises a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies the first encryption method;</claim-text><claim-text>performing, by the DRM server, first formatting on the content protection description information to generate formatted content protection data;</claim-text><claim-text>encapsulating, by the DRM server, the formatted content protection data to generate a content protection data packet; and</claim-text><claim-text>packaging, by the DRM server, the content protection data packet and the first encrypted media file, and sending to a client.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the first formatting is javascript object notation (JSON) formatting.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the formatted content protection data comprises a content identifier field and an encrypted schema field, the content identifier field carries the content identifier, and the encrypted schema field carries the encryption method information.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method according to <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the formatted content protection data further comprises a version number field and at least one of an extension field, a key identifier field, or a current playing location index field, wherein the version number field indicates a version number of the formatted content protection data, the extension field carries extension data, the key identifier field indicates an identifier of a first key, the first key is a key for encrypting the first media file, and the current playing location index field indicates a current playing location of the first encrypted media file.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the content protection data packet comprises a formatted data field and a data size field, the formatted data field carries the formatted content protection data, and the data size field indicates a size of the formatted data field.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising:<claim-text>receiving, by the DRM server, a license request sent by the client, wherein the license request requests permission to play the first encrypted media file, and the license request carries the content protection data packet;</claim-text><claim-text>determining, by the DRM server, key information of the first encrypted media file based on the content protection data packet and a pre-stored mapping relationship, wherein the key information comprises the first key and a key identifier of the first key, the key identifier identifies the first key, and the mapping relationship indicates a correspondence among the content identifier, the encryption method, and the key information; and</claim-text><claim-text>sending, by the DRM server, a license to the client, wherein the license is usable to grant permission to play the first encrypted media file, and the license carries the key information of the first encrypted media file.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method according to <claim-ref idref="CLM-00021">claim 21</claim-ref>, further comprising:<claim-text>when the formatted content protection data in the content protection data packet further comprises the current playing location index field, and the current playing location index field indicates the current playing location of the first encrypted media file, performing the following:<claim-text>parsing, by the DRM server, the content protection data packet to obtain the current playing location;</claim-text><claim-text>determining, by the DRM server based on the current playing location, key information of at least one adjacent encrypted media file whose location is continuous with the current playing location of the first encrypted media file, wherein the key information of the at least one adjacent encrypted media file comprises a key of each encrypted media file of the at least one adjacent encrypted media file and a key identifier of each adjacent encrypted media file; and</claim-text><claim-text>sending, by the DRM server, the license to the client, wherein the license further carries key information of each encrypted media file of the at least one adjacent encrypted media file, and the license is further usable to grant permission to play the at least one adjacent encrypted media file.</claim-text></claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The method according to <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the license request further comprises a permission type information field, the permission type information field carries permission type information, and the permission type information indicates at least one of online playing permission or offline playing permission.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein packaging, by the DRM server, the content protection data packet and the first encrypted media file, and sending to the client comprises:<claim-text>adding, by the DRM server, the content protection data packet to a media description file of the first encrypted media file; or</claim-text><claim-text>adding, by the DRM server, the content protection data packet to an unencrypted field, wherein the first encrypted media file comprises the unencrypted field.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein packaging, by the DRM server, the content protection data packet and the first encrypted media file, and sending to the client comprises:<claim-text>adding, by the DRM server, the content protection data packet to a media presentation description (MPD) file of the first encrypted media file when the first encrypted media file meets a dynamic adaptive streaming over HTTP (DASH) standard;</claim-text><claim-text>adding, by the DRM server, the content protection data packet to an M3U8 file of the first encrypted media file when the first encrypted media file meets an HTTP live streaming (HIS) standard or a common media application format (CMAF) standard; or</claim-text><claim-text>adding, by the DRM server, the content protection data packet to an unencrypted field of the first encrypted media file when a format of the first encrypted media file is a moving picture experts group (MP4) format or a fragmented moving picture experts group (FMP4) format.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The method according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the first encryption method comprises an SM state cryptography algorithm.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. A method, comprising:<claim-text>receiving, by a client, packaged data sent by a digital rights management (DRM) server, wherein the packaged data comprises a content protection data packet and a first encrypted media file, formatted content protection data is encapsulated in the content protection data packet, the formatted content protection data is obtained by performing first formatting on content protection description information of the first encrypted media file, the content protection description information comprises a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies a first encryption method used to encrypt a first media file corresponding to the first encrypted media file;</claim-text><claim-text>obtaining, by the client, the content protection data packet from the packaged data; and</claim-text><claim-text>decrypting, by the client, the first encrypted media file based on the content protection data packet, to obtain the first media file.</claim-text></claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The method according to <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein the first formatting is javascript object notation (JSON) formatting.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The method according to <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein the formatted content protection data comprises a content identifier field and an encrypted schema field, the content identifier field carries the content identifier, and the encrypted schema field carries the encryption method information.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The method according to <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the formatted content protection data further comprises a version number field and at least one of an extension field, a key identifier field, or a current playing location index field, wherein the version number field indicates a version number of the formatted content protection data, the key identifier field indicates an identifier of a first key, the first key is a key for encrypting the first media file, and the current playing location index field indicates a current playing location of the first encrypted media file.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. A digital rights management (DRM) server, comprising:<claim-text>at least one processor; and</claim-text><claim-text>a non-transitory computer readable storage medium storing a program that is executable by the at least one processor, the program including instructions for:<claim-text>encrypting a first media file using a first encryption method, to obtain a first encrypted media file;</claim-text><claim-text>generating content protection description information of the first encrypted media file, wherein the content protection description information comprises a content identifier and encryption method information, the content identifier identifies the first encrypted media file, and the encryption method information identifies the first encryption method;</claim-text><claim-text>performing first formatting on the content protection description information to generate formatted content protection data;</claim-text><claim-text>encapsulating the formatted content protection data to generate a content protection data packet; and</claim-text><claim-text>packaging the content protection data packet and the first encrypted media file, and sending to a client.</claim-text></claim-text></claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The DRM server according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the first formatting is javascript object notation (JSON) formatting.</claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The DRM server according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the formatted content protection data comprises a content identifier field and an encrypted schema field, the content identifier field carries the content identifier, and the encrypted schema field carries the encryption method information.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The DRM server according to <claim-ref idref="CLM-00033">claim 33</claim-ref>, wherein the formatted content protection data further comprises a version number field and at least one of an extension field, a key identifier field, or a current playing location index field, wherein the version number field indicates a version number of the formatted content protection data, the extension field carries extension data, the key identifier field indicates an identifier of a first key, the first key is a key for encrypting the first media file, and the current playing location index field indicates a current playing location of the first encrypted media file.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The DRM server according to <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the content protection data packet comprises a formatted data field and a data size field, the formatted data field carries the formatted content protection data, and the data size field indicates a size of the formatted data field.</claim-text></claim></claims></us-patent-application>