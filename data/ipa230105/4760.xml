<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004761A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004761</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363087</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6268</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>628</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6256</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">GENERATING CHANGE REQUEST CLASSIFICATION EXPLANATIONS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Batta</last-name><first-name>Raghav</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Nidd</last-name><first-name>Michael Elton</first-name><address><city>Zurich</city><country>CH</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Shwartz</last-name><first-name>Larisa</first-name><address><city>Greenwich</city><state>CT</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>GUNDECHA</last-name><first-name>PRITAM</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Akkiraju</last-name><first-name>Rama Kalyani T.</first-name><address><city>Cupertino</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Azad</last-name><first-name>Amar Prakash</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>Kumar</last-name><first-name>Harshit</first-name><address><city>Delhi</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An approach for generating actionable explanations of change request classifications may be presented. A model may generate features associated with a change request may be disclosed. The model may be trained with historical change requests that have been labeled risky or not risky. The change request may be classified as risky or not risky. Candidate historical change requests with the same classification as the change request and occupying similar feature space as the change request may be identified from a historical change request repository. One or more features which had the most significant impact on the classification may be identified. A candidate historical change request with at least one significant feature impacting classification may be identified.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="132.59mm" wi="124.63mm" file="US20230004761A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="201.93mm" wi="126.66mm" file="US20230004761A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="187.11mm" wi="149.18mm" file="US20230004761A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="203.54mm" wi="150.03mm" file="US20230004761A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="191.09mm" wi="115.57mm" file="US20230004761A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="191.09mm" wi="137.92mm" file="US20230004761A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="142.75mm" wi="137.50mm" file="US20230004761A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="188.72mm" wi="141.73mm" orientation="landscape" file="US20230004761A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">STATEMENT REGARDING PRIOR DISCLOSURES BY THE INVENTOR OR JOINT INVENTOR</heading><p id="p-0002" num="0001">The following disclosure(s) are submitted under 35 U.S.C. 102(b)(1)(A) as prior disclosures by, or on behalf of, a sole inventor of the present application or a joint inventor of the present application.</p><p id="p-0003" num="0002">An embodiment of the present invention was incorporated into IBM Cloud Pak&#xae; for Watson AIOps, v.3.1 and released on Apr. 27, 2021. A description can be found at https://www-01.ibm.com/common/ssi/ShowDoc.wss?docURL=/common/ssi/rep_ca/0/877/ENUSZP21-0130/index.html&#x26;request_locale=en (retrieved Jun. 23, 2021).</p><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0004" num="0003">The present invention relates generally to the field of machine learning and artificial intelligence, more specifically to generating explanations of classifications for change requests in a technical system.</p><p id="p-0005" num="0004">Open systems are highly dependent on the environment. Changes to the environment in which a system operates can affect the system as much as a change to the system itself. A computer program or application itself is an open system with interactions and dependencies on infrastructure, operational management processes, and other concurrently running applications.</p><p id="p-0006" num="0005">Many incidents in a computer system are the result of a change to the environment of the system. For example, source code changes, system configuration changes, hardware changes, and security protocol changes can cause a cascade reaction of unforeseen technical issues. Even technical changes to a system that are considered successful can lead to technical issues at a later time.</p><p id="p-0007" num="0006">A change request can be classified as risky or problematic in some cases. However, this classification oftentimes leaves a user unable to determine why the change request is classified. An explanation of what lead to the risky or problematic classification and/or issues the change request could potentially cause could lead a user to make a more informed decision when it comes to implementing a change request.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0008" num="0007">Embodiments of the present disclosure include a computer-implemented method computer system, and computer program product for generating change risk classification explanations. The embodiments include extracting a plurality of features from a change request, based on a trained model. The embodiments further include classifying the change request as risky or not risky, based on the extracted features. The embodiments further include identifying one or more candidate historical change requests with at least one similar feature as the change request and with the same classification as the change request. The embodiments further include detecting which features of the change request had the most significant impact on the classification of the change request. The embodiments further include analyzing the relevance of the candidate historical change requests, based on the detected features that had the most significant impact on the classification of the change request. The embodiments further include identifying a relevant candidate historical change request, based on the analysis.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a functional block diagram of a change request classification explanation generation environment, generally designated <b>100</b>, in accordance with an embodiment of the present invention.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a functional block diagram of a change risk explanation classification engine, generally designated <b>200</b>, in accordance with an embodiment of the present invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of natural language preprocessing module <b>202</b>, generally designated <b>300</b>, in accordance with an embodiment of the present invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is flowchart of a method for generating an explanation for change risk classification <b>400</b>, in accordance with an embodiment of the present invention.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a functional block diagram of an exemplary computing system <b>10</b> within a change request classification explanation environment, in accordance with an embodiment of the present invention.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram depicting a cloud computing environment <b>50</b>, in accordance with an embodiment of the present invention.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a functional block diagram depicting abstraction model layers, in accordance with an embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0016" num="0015">While the embodiments described herein are amenable to various modifications and alternative forms, specifics thereof have been shown by way of example in the drawings and will be described in detail. It should be understood, however, that the particular embodiments described are not to be taken in a limiting sense. On the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the disclosure.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">Embodiments presented herein recognize the need for generating an explanation of a classification for a change request for a machine learning model. Current techniques of risk determination are based on explicit rule sets, where if a change request is classified as risky, the explanation would be based on which rule had been violated by the change request. Throughout this description, the term risky is used for simplicity. &#x201c;Risky&#x201d; is used in the sense that a change request may cause future issues. This classification is based on historical data of other similar change requests that caused issues. Risky issues, or simply issues, can be any event in a system that prevents it from operating in its intended manner and/or require technical troubleshooting. Conversely, non-risky issues, or simply no issues, can be representative of a system operating in its intended manner and/or in which technical troubleshooting is not required.</p><p id="p-0018" num="0017">Machine learning models can identify patterns associated with historical change requests and classify new change requests based off of similar features. However, determining which features lead to the classification is difficult to obtain due to the nature of machine learning models. Explanations of which features of a new change request lead to a risky or not risky determination are needed.</p><p id="p-0019" num="0018">In an embodiment of the invention, a machine learning classification model can be trained with labeled historical change requests. The machine learning model can extract features associated with the labeled historical change requests. The machine learning model can be applied to a new change request and classify the new change request. In addition to classifying the new change request, features of the new change request can be extracted. The features can be entered into an explainability algorithm to identify which features had the most influence on the classification.</p><p id="p-0020" num="0019">In another embodiment of the invention, labeled historical change requests are fed into an autoencoder, such as a natural language processing model (e.g., bidirectional encoding representations from transformers (&#x201c;BERT&#x201d;), word2vec, etc.). The historical change requests are labeled as being associated with future issues upon application of the change request. A classification engine is trained with the output of the natural language processing model historical change requests. A new change request is fed into the natural language processing model and fed into the trained classification model to classify the new change request as potentially having issues upon future application of the change request.</p><p id="p-0021" num="0020">Referring now to the Figures, <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a functional block diagram generally depicting change request risk explanation generation environment <b>100</b>. Change request risk explanation generation environment <b>100</b> comprises change request risk explanation engine <b>104</b> operational on server <b>102</b>, client computer <b>110</b>, and historical change request repository <b>108</b>, all interconnected over network <b>106</b>.</p><p id="p-0022" num="0021">Server <b>102</b> and client computer <b>110</b> can be a standalone computing device, a management server, a web server, a mobile computing device, or any other electronic device or computing system capable of receiving, sending, and processing data. In other embodiments, server <b>102</b> and client computer <b>110</b> can represent a server computing system utilizing multiple computers as a server system such as in cloud computing environment <b>50</b> (depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>). In an embodiment, server <b>102</b> and client computer <b>110</b> can represent a computing system utilizing clustered computers and components (e.g., database server computers, application server computers, etc.) that act as a single pool of seamless resources when accessed within change request risk explanation generation environment <b>100</b>. In another embodiment, server <b>102</b> and client computer <b>110</b> can be a laptop computer, a tablet computer, a netbook computer, a personal computer, a desktop computer, or any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instructions and communicating with each other and other computing devices (not depicted) within change request risk explanation generation environment <b>100</b> via network <b>106</b>. It should be noted, while only server <b>102</b> and client computer <b>110</b> are shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in other embodiments, multiple servers or other computing devices can be present within change request risk explanation generation environment <b>100</b>.</p><p id="p-0023" num="0022">Server <b>102</b> client computer <b>110</b> may include components as depicted and described in further detail with respect to computer system <b>10</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Server <b>102</b> and client computer <b>110</b> may include components as depicted and described in further detail with respect to cloud computing node <b>40</b> of cloud computing environment <b>50</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0024" num="0023">Network <b>106</b> can be a telecommunications network, a local area network (LAN), a wide area network (WAN), such as the Internet, or a combination of the three, and can include wired, wireless, or fiber optic connections. Network <b>106</b> may include one or more wired and/or wireless networks that are capable of receiving and transmitting data, voice, and/or video signals, including multimedia signals that include voice, data, and video information. In general, network <b>106</b> can be any combination of connections and protocols that will support communications between server <b>102</b>, historical change request repository <b>108</b>, client computer <b>110</b>, and external computing devices (not shown) within change request risk explanation generation environment <b>100</b>.</p><p id="p-0025" num="0024">Change request risk explanation engine <b>104</b> is a computer program capable of determining whether a new change request will be considered risky and providing an explanation on how that determination was made. In an embodiment, change request risk explanation engine <b>104</b> can be multiple computer modules that receive a new change request and analyze the new change request identifying features of the change request. Based on the features of the change request, the change request can be classified as risky or not risky. If the change request is classified as risky, change request risk explanation engine <b>104</b> can identify similar historical change request candidates based on similarities of the features. Change request risk explanation engine <b>104</b> can detect which features had the most impact on the classification of the new change request. Using the detected features, change request risk explanation engine <b>104</b> can identify a candidate historical change request with the most similar features detected to have the most impact on classification. The identified historical change request candidate can be presented to a user with which features of the historical change request candidate resulted in the classification.</p><p id="p-0026" num="0025">In an embodiment, change request risk explanation engine <b>104</b> can be a machine learning model comprised of multiple models, which can be configured to perform the following operations: (i) extracting features from a received change request, (ii) classifying the received change request based on the extracted features, (iii) identifying one or more candidate historical change requests with the same classification and similar features, (iv) detecting which features were the most influential in the classification of the change request, and (v) identifying a historical change request from the candidate historical change requests with similar features associated with the detected features.</p><p id="p-0027" num="0026">Historical change request repository <b>108</b> is a database that contains historical change requests and associated information relating to historical change requests. For example, a historical change request can be the request itself in a human readable format (i.e., natural language), either in a structured or unstructured format. Information associated with historical change requests can be, for example, but not limited to, the status of a system prior to implementing the change request, metadata of the change request, features extracted by change risk feature generation module <b>204</b> (explained further below), human annotated labels of risky or not risky, and system conditions post change request application.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is block diagram <b>200</b> comprised of change request risk explanation engine <b>104</b>. Change request risk explanation engine <b>104</b> can be comprised of natural language preprocessing engine <b>202</b>, change risk feature generation module <b>204</b>, risk classification module <b>206</b>, and feature explanation module <b>208</b>.</p><p id="p-0029" num="0028">Natural language preprocessing module <b>202</b> is a computer module that can be configured to receive change requests in natural language form and process the change request into a format that can be utilized by change risk feature generation module <b>204</b>. The operations of natural language preprocessing module <b>202</b> are described further below in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0030" num="0029">Change risk feature generation module <b>204</b> is a computer module that can be configured to extract features from a change request. In an embodiment, change risk feature generation module <b>204</b> can receive a change request and extract features from the change request based on the language of the change request. For example, change risk feature generation module <b>204</b> can have natural language preprocessing model <b>202</b> (described in more detail below <figref idref="DRAWINGS">FIG. <b>3</b></figref>) configured to generate word embeddings from the change request.</p><p id="p-0031" num="0030">In another embodiment, change risk feature generation module <b>204</b> can be based on a word embedding module that can generate vectors within a vector space. The vectors can represent features of the change risk associated with the meanings of the words within the change risk. For example, a word like &#x201c;configure&#x201d; would be embedded near a word like &#x201c;install.&#x201d; This would signify that the two words have similar meanings. Meanwhile, a word like &#x201c;test&#x201d; would be located far from the word &#x201c;configure&#x201d; within the vector space, signifying the words are not closely related. The words within change request can be analyzed together or individually by change risk feature generation module <b>204</b>.</p><p id="p-0032" num="0031">Risk classification module <b>206</b> is a computer module that can be configured to classify a change risk. In an embodiment, risk classification module <b>206</b> can receive the features from change risk feature generation module <b>204</b> and classify a change risk as risky or not risky. Risk classification module <b>206</b> can be based on a machine learning model. For example, a deep learning model such as a multi-layer perceptron configured to receive n number of features associated with a change request and output a risky or not risky classification.</p><p id="p-0033" num="0032">Feature explanation module <b>208</b> is a computer module that can be configured to identify one or more historical change request candidates from historical change request repository <b>108</b> of problematic changes with the same classification and similar features to the new change request. Feature explanation module <b>208</b> can also detect which features of the new change request had the largest impact on the classification of the new change request. Based on the detection of the features with the largest impact, feature explanation module <b>208</b> can identify a historical change request candidate with the highest overlap of detected impactful features.</p><p id="p-0034" num="0033">In an embodiment, feature explanation module <b>208</b> can use a document similarity algorithm to identify historical change request candidates that are similar to the new change request. For example, feature explanation module <b>208</b> can find multiple historical change requests within historical change repository using one of the following: latent semantic indexing, elastic search, annoy, etc. . . . . The search criteria can include identifying a number of historical change requests with the same classification (e.g., 1, 2, n . . . n+1). From the identification of classification, a template may be used including identifying change requests based on specific trigger words (e.g., configure, reboot, install, terminate, etc.) within the request and analyzing those change requests for feature similarity.</p><p id="p-0035" num="0034">In another embodiment, feature explanation module <b>208</b> can detect which features have a significant impact on the new change requests classification. Feature explanation module <b>208</b> can comprise an explainability model, such as, local interpretable model-agnostic explanation (&#x201c;LIME&#x201d;) or deep learning important features (&#x201c;DeepLIFT&#x201d;). For example, feature explanation module <b>208</b> can identify which weights within a deep learning model have the most impact on classification. Feature explanation module <b>208</b> can also pre-cache LIME explainability on training data associated with the historical change requests, due to the resource heavy nature of LIME. This can be used since candidate historical change requests already identified as similar will likely have the same significant features.</p><p id="p-0036" num="0035">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, shown is a block diagram of an exemplary natural language preprocessing architecture <b>300</b>, including a natural language preprocessing module <b>202</b>, configured to analyze change requests to extract features of the change request, in accordance with embodiments of the present disclosure. In some embodiments, a remote device (such as client computer <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) may submit a change request to be analyzed by the natural language preprocessing module <b>202</b> which may be housed on a host device (such as server <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Such a remote device may include an instance of change request risk explanation engine <b>104</b>, which may itself involve one or more entities operable to generate or modify information associated with the change request that is then dispatched to a natural language preprocessing module <b>202</b> via network <b>106</b>.</p><p id="p-0037" num="0036">Consistent with various embodiments, natural language preprocessing module <b>202</b> may analyze change requests received by change request risk explanation engine <b>104</b>. Specifically, natural language preprocessing module <b>202</b> may preprocess a received at change request risk explanation engine <b>104</b> for future feature extraction by change risk feature generation module <b>204</b>. Natural language preprocessing module <b>202</b> may perform various methods and techniques for analyzing change requests (e.g., syntactic analysis, semantic analysis, etc.). Natural language preprocessing module <b>202</b> may be configured to recognize and analyze any number of natural languages. Further, natural language preprocessing module <b>202</b> may include various modules to perform analyses of change requests. These modules may include, but are not limited to, a tokenizer <b>302</b>, a part-of-speech (POS) tagger <b>304</b> (e.g., which may tag each of the one or more sections in which the particular subject is identified), a semantic relationship identifier <b>306</b>, and a syntactic relationship identifier <b>308</b>.</p><p id="p-0038" num="0037">In some embodiments, tokenizer <b>302</b> may be a computer module that performs lexical analysis. Tokenizer <b>302</b> may convert a sequence of characters (e.g., images, sounds, etc.) into a sequence of tokens. A token may be a string of characters included in a change request and categorized as a meaningful symbol. Further, in some embodiments, tokenizer <b>302</b> may identify word boundaries in a change request and break any text within the change request into their component text elements, such as words, multiword tokens, numbers, and punctuation marks. In some embodiments, tokenizer <b>302</b> may receive a string of characters, identify the lexemes in the string, and categorize them into tokens.</p><p id="p-0039" num="0038">Consistent with various embodiments, POS tagger <b>304</b> may be a computer module that marks up a word in a recording to correspond to a particular part of speech. POS tagger <b>304</b> may read a passage or other text in natural language and assign a part of speech to each word or other token. POS tagger <b>304</b> may determine the part of speech to which a word (or other spoken element) corresponds based on the definition of the word and the context of the word. The context of a word may be based on its relationship with adjacent and related words in a phrase, sentence, or paragraph. In some embodiments, the context of a word may be dependent on one or more previously analyzed change requests (e.g. a change request previously applied to a system). Examples of parts of speech that may be assigned to words include, but are not limited to, nouns, verbs, adjectives, adverbs, and the like. Examples of other part of speech categories that POS tagger <b>304</b> may assign include, but are not limited to, comparative or superlative adverbs, wh-adverbs, conjunctions, determiners, negative particles, possessive markers, prepositions, wh-pronouns, and the like. In some embodiments, POS tagger <b>304</b> may tag or otherwise annotate tokens of a recording with part of speech categories. In some embodiments, POS tagger <b>304</b> may tag tokens or words of a recording to be parsed by natural language preprocessing module <b>202</b>.</p><p id="p-0040" num="0039">In some embodiments, semantic relationship identifier <b>306</b> may be a computer module that may be configured to identify semantic relationships of recognized subjects (e.g., words, phrases, images, etc.) in a recording. In some embodiments, semantic relationship identifier <b>306</b> may determine functional dependencies between entities and other semantic relationships.</p><p id="p-0041" num="0040">Consistent with various embodiments, syntactic relationship identifier <b>308</b> may be a computer module that may be configured to identify syntactic relationships in a recording composed of tokens. Syntactic relationship identifier <b>308</b> may determine the grammatical structure of sentences such as, for example, which groups of words are associated as phrases and which word is the subject or object of a verb. Syntactic relationship identifier <b>308</b> may conform to formal grammar.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart depicting method <b>400</b> for multi-device collaboration authentication, in accordance with an embodiment of the present invention.</p><p id="p-0043" num="0042">At step <b>402</b>, train a machine learning model with a plurality of change requests. In an embodiment, labeled historical change requests from historical change request repository <b>108</b> can be used to train change risk feature generation module <b>204</b> and risk classification module <b>206</b>.</p><p id="p-0044" num="0043">At step <b>404</b>, apply a new change request to the trained machine learning model. In an embodiment, a change request can be received at change request risk explanation engine <b>104</b>. The change request can be fed into natural language preprocessing module <b>202</b> to change the change request into a computer understandable format. The change request in computer understandable format can be entered into change risk feature generation module <b>204</b>. Change risk feature generation module <b>204</b> can extract features (e.g., vectors) from the change request. The features can be fed into risk classification module <b>206</b>. Based on the extracted features, risk classification module <b>206</b> can classify the change risk as risky or not risky.</p><p id="p-0045" num="0044">At step <b>406</b>, determine if the change request is classified as risky. In an embodiment, feature explanation module <b>208</b> can see if the change request was classified as risky by risk classification module <b>206</b>.</p><p id="p-0046" num="0045">At step <b>408</b>, identify historical change requests with similar features. In an embodiment, feature explanation module <b>208</b> can analyze historical change request repository to find any candidate historical change requests with similar features. For example, feature explanation module <b>208</b> can use Elastisearch or a similar search algorithm to find historical change requests with similar features.</p><p id="p-0047" num="0046">At step <b>410</b>, determine which features had the most influence on the change request being classified as risky. In an embodiment, feature explanation module <b>208</b> can analyze the classification model in risk classification module <b>206</b> and determine which features were the most significant in the classification. For example, in a neural network, feature explanation module <b>208</b> can utilize the LIME algorithm to determine which nodes in the classification model were activated by the features of the change request.</p><p id="p-0048" num="0047">In an embodiment, feature explanation module <b>208</b> can identify a candidate change request with similar features determined to be the most significant in classifying the change request. Feature explanation module <b>208</b> can present the change candidate to a user.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts computer system <b>10</b>, an example computer system representative of servers <b>102</b>, or any other computing device within an embodiment of the invention. Computer system <b>10</b> includes communications fabric <b>12</b>, which provides communications between processing unit <b>14</b>, memory <b>16</b>, persistent storage <b>18</b>, network adaptor <b>28</b>, and input/output (I/O) interface(s) <b>26</b>. Communications fabric <b>12</b> can be implemented with any architecture designed for passing data and/or control information between processors (such as microprocessors, communications and network processors, etc.), system memory, peripheral devices, and any other hardware components within a system. For example, communications fabric <b>12</b> can be implemented with one or more buses.</p><p id="p-0050" num="0049">Computer system <b>10</b> includes processing unit <b>14</b>, cache <b>22</b>, memory <b>16</b>, network adaptor <b>28</b>, input/output (I/O) interface(s) <b>26</b> and communications fabric <b>12</b>. Communications fabric <b>12</b> provides communications between cache <b>22</b>, memory <b>16</b>, persistent storage <b>18</b>, network adaptor <b>28</b>, and input/output (I/O) interface(s) <b>26</b>. Communications fabric <b>12</b> can be implemented with any architecture designed for passing data and/or control information between processors (such as microprocessors, communications and network processors, etc.), system memory, peripheral devices, and any other hardware components within a system. For example, communications fabric <b>12</b> can be implemented with one or more buses or a crossbar switch.</p><p id="p-0051" num="0050">Memory <b>16</b> and persistent storage <b>18</b> are computer readable storage media. In this embodiment, memory <b>16</b> includes persistent storage <b>18</b>, random access memory (RAM) <b>20</b>, cache <b>22</b> and program module <b>24</b>. In general, memory <b>16</b> can include any suitable volatile or non-volatile computer readable storage media. Cache <b>22</b> is a fast memory that enhances the performance of processing unit <b>14</b> by holding recently accessed data, and data near recently accessed data, from memory <b>16</b>. As will be further depicted and described below, memory <b>16</b> may include at least one of program module <b>24</b> that is configured to carry out the functions of embodiments of the invention.</p><p id="p-0052" num="0051">The program/utility, having at least one program module <b>24</b>, may be stored in memory <b>16</b> by way of example, and not limiting, as well as an operating system, one or more application programs, other program modules, and program data. Each of the operating systems, one or more application programs, other program modules, and program data or some combination thereof, may include an implementation of a networking environment. Program module <b>24</b> generally carries out the functions and/or methodologies of embodiments of the invention, as described herein.</p><p id="p-0053" num="0052">Program instructions and data used to practice embodiments of the present invention may be stored in persistent storage <b>18</b> and in memory <b>16</b> for execution by one or more of the respective processing unit <b>14</b> via cache <b>22</b>. In an embodiment, persistent storage <b>18</b> includes a magnetic hard disk drive. Alternatively, or in addition to a magnetic hard disk drive, persistent storage <b>18</b> can include a solid state hard drive, a semiconductor storage device, read-only memory (ROM), erasable programmable read-only memory (EPROM), flash memory, or any other computer readable storage media that is capable of storing program instructions or digital information.</p><p id="p-0054" num="0053">The media used by persistent storage <b>18</b> may also be removable. For example, a removable hard drive may be used for persistent storage <b>18</b>. Other examples include optical and magnetic disks, thumb drives, and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage <b>18</b>.</p><p id="p-0055" num="0054">Network adaptor <b>28</b>, in these examples, provides for communications with other data processing systems or devices. In these examples, network adaptor <b>28</b> includes one or more network interface cards. Network adaptor <b>28</b> may provide communications through the use of either or both physical and wireless communications links. Program instructions and data used to practice embodiments of the present invention may be downloaded to persistent storage <b>18</b> through network adaptor <b>28</b>.</p><p id="p-0056" num="0055">I/O interface(s) <b>26</b> allows for input and output of data with other devices that may be connected to each computer system. For example, I/O interface <b>26</b> may provide a connection to external devices <b>30</b> such as a keyboard, keypad, a touch screen, and/or some other suitable input device. External devices <b>30</b> can also include portable computer readable storage media such as, for example, thumb drives, portable optical or magnetic disks, and memory cards. Software and data used to practice embodiments of the present invention can be stored on such portable computer readable storage media and can be loaded onto persistent storage <b>18</b> via I/O interface(s) <b>26</b>. I/O interface(s) <b>26</b> also connect to display <b>32</b>.</p><p id="p-0057" num="0056">Display <b>32</b> provides a mechanism to display data to a user and may be, for example, a computer monitor or virtual graphical user interface.</p><p id="p-0058" num="0057">It is to be understood that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.</p><p id="p-0059" num="0058">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p><p id="p-0060" num="0059">Characteristics are as follows:</p><p id="p-0061" num="0060">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p><p id="p-0062" num="0061">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).</p><p id="p-0063" num="0062">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).</p><p id="p-0064" num="0063">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p><p id="p-0065" num="0064">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.</p><p id="p-0066" num="0065">Service Models are as follows:</p><p id="p-0067" num="0066">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based e-mail). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p><p id="p-0068" num="0067">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p><p id="p-0069" num="0068">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p><p id="p-0070" num="0069">Deployment Models are as follows:</p><p id="p-0071" num="0070">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p><p id="p-0072" num="0071">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p><p id="p-0073" num="0072">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p><p id="p-0074" num="0073">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).</p><p id="p-0075" num="0074">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.</p><p id="p-0076" num="0075">Referring now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, illustrative cloud computing environment <b>50</b> is depicted. As shown, cloud computing environment <b>50</b> includes one or more cloud computing nodes <b>40</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>54</b>A, desktop computer <b>54</b>B, laptop computer <b>54</b>C, and/or automobile computer system <b>54</b>N may communicate. Nodes <b>40</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>50</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>54</b>A-N shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> are intended to be illustrative only and that computing nodes <b>40</b> and cloud computing environment <b>50</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p><p id="p-0077" num="0076">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a set of functional abstraction layers provided by cloud computing environment <b>50</b> (depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>) is shown. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p><p id="p-0078" num="0077">Hardware and software layer <b>60</b> include hardware and software components. Examples of hardware components include mainframes <b>61</b>; RISC (Reduced Instruction Set Computer) architecture-based servers <b>62</b>; servers <b>63</b>; blade servers <b>64</b>; storage devices <b>65</b>; and networks and networking components <b>66</b>. In some embodiments, software components include network application server software <b>67</b> and database software <b>68</b>.</p><p id="p-0079" num="0078">Virtualization layer <b>70</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers <b>71</b>; virtual storage <b>72</b>; virtual networks <b>73</b>, including virtual private networks; virtual applications and operating systems <b>74</b>; and virtual clients <b>75</b>.</p><p id="p-0080" num="0079">In one example, management layer <b>80</b> may provide the functions described below. Resource provisioning <b>81</b> provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing <b>82</b> provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal <b>83</b> provides access to the cloud computing environment for consumers and system administrators. Service level management <b>84</b> provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment <b>85</b> provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p><p id="p-0081" num="0080">Workloads layer <b>90</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation <b>91</b>; software development and lifecycle management <b>92</b>; virtual classroom education delivery <b>93</b>; data analytics processing <b>94</b>; transaction processing <b>95</b>; and generating an explanation for a change request risk classification <b>96</b>.</p><p id="p-0082" num="0081">It should be noted that the embodiments of the present invention may operate with a user's permission. Any data may be gathered, stored, analyzed, etc., with a user's consent. In various configurations, at least some of the embodiments of the present invention are implemented into an opt-in application, plug-in, etc., as would be understood by one having ordinary skill in the art upon reading the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method for generating actionable change request risk classifications, the method comprising:<claim-text>extracting, by a processor, a plurality of features from a change request, based on a trained model;</claim-text><claim-text>classifying the change request as risky or not risky, based on the extracted features;</claim-text><claim-text>identifying one or more candidate historical change requests with at least one similar feature as the change request and with the same classification as the change request;</claim-text><claim-text>detecting which features of the change request had the most significant impact on the classification of the change request;</claim-text><claim-text>analyzing the relevance of the candidate historical change requests, based on the detected features that had the most significant impact on the classification of the change request; and</claim-text><claim-text>identifying a relevant candidate historical change request, based on the analysis.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>training the model with a plurality of historical change requests, wherein the historical change requests are labeled risky or not risky.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein identifying one or more candidate historical change further comprises:<claim-text>searching, by a processor, a historical change request database via an Elastisearch.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein detecting the most significant features, utilizes an explainability algorithm.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the explainability algorithm is based on a local interpretable model-agnostic explanation.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of features are embedding representations.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>transforming the change request into a computer readable format, based on a natural language processing model.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A computer system for generating actionable change request risk classifications, the method comprising:<claim-text>a processor;</claim-text><claim-text>a readable storage media; and</claim-text><claim-text>computer program instructions to:<claim-text>extract a plurality of features from a change request, based on a trained model;</claim-text><claim-text>classify the change request as risky or not risky, based on the extracted features;</claim-text><claim-text>identify one or more candidate historical change requests with at least one similar feature as the change request and with the same classification as the change request;</claim-text><claim-text>detect which features of the change request had the most significant impact on the classification of the change request;</claim-text><claim-text>analyze the relevance of the candidate historical change requests, based on the detected features that had the most significant impact on the classification of the change request; and</claim-text><claim-text>identify a relevant candidate historical change request, based on the analysis.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising instructions to:<claim-text>train the model with a plurality of historical change requests, wherein the historical change requests are labeled risky or not risky.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein identifying one or more candidate historical change further comprises instructions to:<claim-text>search a historical change request database via an Elastisearch.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein detecting the most significant features, utilizes an explainability algorithm.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the explainability algorithm is based on a local interpretable model-agnostic explanation.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the plurality of features are embedding representations.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising instructions to:<claim-text>transforming the change request into a computer readable format, based on a natural language processing model.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer program product for generating actionable change request risk classifications having program instructions embodied therewith, the program instructions executable by a processor to cause the processors to perform a function, the function comprising:<claim-text>extract a plurality of features from a change request, based on a trained model;</claim-text><claim-text>classify the change request as risky or not risky, based on the extracted features;</claim-text><claim-text>identify one or more candidate historical change requests with at least one similar feature as the change request and with the same classification as the change request;</claim-text><claim-text>detect which features of the change request had the most significant impact on the classification of the change request;</claim-text><claim-text>analyze the relevance of the candidate historical change requests, based on the detected features that had the most significant impact on the classification of the change request; and</claim-text><claim-text>identify a relevant candidate historical change request, based on the analysis.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising program instructions to:<claim-text>train the model with a plurality of historical change requests, wherein the historical change requests are labeled risky or not risky.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein identifying one or more candidate historical change further comprise program instructions to:<claim-text>search a historical change request database via an Elastisearch.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer program product of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein detecting the most significant features, utilizes an explainability algorithm.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the explainability algorithm is based on a local interpretable model-agnostic explanation.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer program product of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising program instructions to:<claim-text>transforming the change request into a computer readable format, based on a natural language processing model.</claim-text></claim-text></claim></claims></us-patent-application>