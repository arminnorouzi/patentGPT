<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006975A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006975</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17932342</doc-number><date>20220915</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0281</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>062</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3236</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0272</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">BLOCKCHAIN JOINING FOR A LIMITED PROCESSING CAPABILITY DEVICE AND DEVICE ACCESS SECURITY</invention-title><us-related-documents><division><relation><parent-doc><document-id><country>US</country><doc-number>16526948</doc-number><date>20190730</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11489816</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17932342</doc-number></document-id></child-doc></relation></division><us-provisional-application><document-id><country>US</country><doc-number>62712870</doc-number><date>20180731</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>EZBLOCK LTD.</orgname><address><city>Grand Cayman</city><country>KY</country></address></addressbook><residence><country>KY</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Huang</last-name><first-name>Rundong</first-name><address><city>Saratoga</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>EZBLOCK LTD.</orgname><role>03</role><address><city>Grand Cayman</city><country>KY</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer-implement method comprises: selecting a trusted computing node via smart contract on a blockchain; completing remote attestation of the selected trusted computing node; writing secret information to an enclave of the selected node; causing a thin device to establish a private connection with the selected node without revealing the secret information; and causing the selected node to act as a proxy on the blockchain for the device. Another method comprises: receiving a signed device access request from a device owner; validating, by the verification node, the received request; executing, by a verification node, a smart contract on a blockchain based on the received request; and producing, based on the executed smart contract, an output command to access the device for the device to validate, decrypt and execute.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="159.17mm" wi="158.75mm" file="US20230006975A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="213.70mm" wi="182.88mm" file="US20230006975A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="207.69mm" wi="132.67mm" file="US20230006975A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="237.24mm" wi="180.68mm" file="US20230006975A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="215.48mm" wi="146.98mm" file="US20230006975A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="186.10mm" wi="175.43mm" file="US20230006975A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="244.18mm" wi="174.41mm" file="US20230006975A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="116.84mm" wi="153.33mm" file="US20230006975A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="139.19mm" wi="76.79mm" file="US20230006975A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="170.01mm" wi="179.66mm" file="US20230006975A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="170.01mm" wi="179.66mm" file="US20230006975A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="218.86mm" wi="180.59mm" file="US20230006975A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="177.97mm" wi="146.05mm" file="US20230006975A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="196.93mm" wi="173.48mm" file="US20230006975A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="102.02mm" wi="155.62mm" file="US20230006975A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="238.93mm" wi="164.85mm" file="US20230006975A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="221.91mm" wi="179.58mm" file="US20230006975A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="155.36mm" wi="159.68mm" file="US20230006975A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="244.60mm" wi="203.03mm" file="US20230006975A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="253.58mm" wi="167.81mm" file="US20230006975A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a division of and claims the benefit of priority to U.S. application Ser. No. 16/526,948 filed Jul. 30, 2019, which claims priority to U.S. Provisional Application Ser. No. 62/712,870 filed Jul. 31, 2018, which applications are incorporated by reference as if reproduced herein and made a part hereof in their entirety, and the benefit of priority of which is claimed herein.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">An embodiment of the present subject matter relates generally to blockchain and, more specifically, to devices with limiting processing capability to join a blockchain and enhanced security therefore.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">To support massive number of devices and blockchain transactions, a blockchain needs to be highly scalable, high performance, secure, and support very frequent micropayments. Further, participating nodes in the blockchain must have a minimum processing capability.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">In an embodiment, a computer-implement method comprises: selecting a trusted computing node via smart contract on a blockchain; completing remote attestation of the selected trusted computing node; writing secret information to an enclave of the selected node; causing a thin device to establish a private connection with the selected node without revealing the secret information; and causing the selected node to act as a proxy on the blockchain for the device.</p><p id="p-0006" num="0005">The smart contract may include hardware parameters of the selected computing node. The method may further comprise transmitting secret keys of the device to the selected node via secure channel. The causing the selected node to act as a proxy may include performing a transaction on the blockchain on behalf of the device.</p><p id="p-0007" num="0006">In an embodiment, a computer-implemented method comprises: receiving a signed device access request from a device owner; validating, by the verification node, the received request; executing, by a verification node, a smart contract on a blockchain based on the received request; and producing, based on the executed smart contract, an output command to access the device for the device to validate, decrypt and execute.</p><p id="p-0008" num="0007">The smart contract may contain binding logic between the device and the device owner signed by the device owner using a private key of the device. The smart contract may be a multi-party signature binding. The output command may comprise encrypted results of the executed smart contract and a Merkle proof of the results to prove correctness of the contract execution results.</p><p id="p-0009" num="0008">The method may further comprise causing the device to validate the received output command by confirming validators on device match validators that signed the output command. The method may further comprise causing updating of the validators on the device using the validators to validate a new set of validators. The method may further comprise causing the verification node to complete block generation and voting on the generated block.</p><p id="p-0010" num="0009">The method may further comprise storing a private key on a verification node; deploying the verification node in a private cloud; and deploying an access node in a public cloud, the access node communicatively coupled to the thin node.</p><p id="p-0011" num="0010">Embodiments also comprise a machine-readable storage device embodying instructions that, when executed by a machine, cause the machine to perform the methods above.</p><p id="p-0012" num="0011">Embodiments also comprise a system comprising one or more processors of a machine; and a memory storing instruction that, when executed by the one or more processors, cause the machine to perform the method above.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012">In the drawings, which are not necessarily drawn to scale, like numerals may describe similar components in different views. Like numerals having different letter suffixes may represent different instances of similar components. Some embodiments are illustrated by way of example, and not limitation, in the figures of the accompanying drawings in which:</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating Trusted computing node and IoT device architecture.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow chart illustrating a Trusted computing node declaration procedure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow chart illustrating Remote attestation service procedure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow chart illustrating a Secure channel setup procedure between IoT devices and the trust computing node.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating a Message based IoT Security Architecture.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow chart illustrating a Device access procedure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram illustrating a Data input format.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating a Single-node deployment method.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram illustrating a Multi-node deployment method.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is diagram illustrating a Enhanced multi-node deployment method.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flow chart illustrating a Device binding procedure.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flow chart illustrating a Device binding lock or unlock procedure.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flow chart illustrating a Procedure to check access authorization.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a block diagram illustrating a Node to IoT device message format.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a flow chart illustrating a Validator set update method.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a flow chart illustrating a Command verification procedure.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a block diagram illustrating a Cloud deployment example.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram illustrating a representative software architecture, which may be used in conjunction with various hardware architectures herein described.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram illustrating components of a machine, according to some example embodiments, able to read instructions from a machine-readable medium (e.g., a machine-readable storage medium) and perform any one or more of the methodologies discussed herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0033" num="0032">In the following description, for purposes of explanation, various details are set forth in order to provide a thorough understanding of some example embodiments. It will be apparent, however, to one skilled in the art, that the present subject matter may be practiced without these specific details, or with slight alterations.</p><p id="p-0034" num="0033">Reference in the specification to &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present subject matter. Thus, the appearances of the phrase &#x201c;in one embodiment&#x201d; or &#x201c;in an embodiment&#x201d; appearing in various places throughout the specification are not necessarily all referring to the same embodiment.</p><p id="p-0035" num="0034">For purposes of explanation, specific configurations and details are set forth in order to provide a thorough understanding of the present subject matter. However, it will be apparent to one of ordinary skill in the art that embodiments of the subject matter described may be practiced without the specific details presented herein, or in various combinations, as described herein. Furthermore, well-known features may be omitted or simplified in order not to obscure the described embodiments. Various examples may be given throughout this description. These are merely descriptions of specific embodiments. The scope or meaning of the claims is not limited to the examples given.</p><p id="p-0036" num="0035">Currently, blockchains require their participating nodes to meet certain requirements on resources, e.g. computing power, network bandwidth and storage space, which limits the blockchain's application in IoT. Embodiments enable devices with limited processing capabilities to participate in blockchain with the help of a proxy that supports trusted computing.</p><p id="p-0037" num="0036">For example, embodiments enable a weak device to</p><p id="p-0038" num="0037">Start a transaction and initiate the execution of a smart contract</p><p id="p-0039" num="0038">Monitor the execution of transactions in the blockchain and act based on a transaction's result.</p><p id="p-0040" num="0039">Integrate with the blockchain's messaging system</p><p id="p-0041" num="0040">Store its data using cloud or decentralized storage.</p><p id="p-0042" num="0041">By leveraging trusted computing, embodiments enable IoT devices to perform necessary operations on a blockchain without sacrificing its own security while keeping the resource requirements low. Security is further enhanced by random selection of proxies and resource demand can be further reduced by using UDP for communication and simple symmetric encryption.</p><p id="p-0043" num="0042">The communication between the server and the device is changed from a traditional network layer encryption scheme (VPN) to a message encryption scheme. Each IoT device and the server use a unique key pair communicates.</p><p id="p-0044" num="0043">By adopting blockchain technology and data encryption technology, core secrets such as the private keys are located on the private server, and the public cloud server has no core secret. Blockchain smart contract makes the authentication of IoT devices programmable and extendable.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating Trusted computing node and IoT device architecture <b>100</b>. In an embodiment, weak devices <b>104</b>, <b>106</b> participate in blockchain operations via a proxy capable of trusted computing.</p><p id="p-0046" num="0045">A node <b>118</b> or <b>120</b> capable of trusted computing (e.g. SGX) node declares its own capabilities in the blockchain in the form of a smart contract, which includes information about the node's trusted computing (e.g. SGX) enclave such as hardware parameters, ways to access and price for its computation.</p><p id="p-0047" num="0046">The owner <b>108</b> of IoT weak devices <b>104</b>, <b>106</b> (IoT Owner) selects a trusted computing (e.g. SGX) Node <b>118</b> or <b>120</b> based on information <b>122</b> left in the blockchain and establish connections with the node.</p><p id="p-0048" num="0047">IoT Owner <b>108</b> completes remote attestation <b>102</b> of the selected trusted computing (e.g. SGX) Node <b>118</b> or <b>120</b> according to the published specification and considers the trusted computing (e.g. SGX) Node trustworthy, before writing secret information to enclaves <b>112</b> and/or <b>114</b> created on the trusted computing (e.g. SGX) Node.</p><p id="p-0049" num="0048">Based on secret information provided by IoT Owner <b>108</b>, an IoT device <b>104</b> or <b>106</b> establishes private connection with the trusted computing (e.g. SGX) Node <b>118</b> or <b>120</b>, without revealing private data to the node itself. Afterwards, an enclave <b>112</b> or <b>114</b> within the trusted computing (e.g. SGX) Node acts as a proxy for the IoT device for all the operations on the blockchain, including starting transactions and monitoring them, sending and receiving messages, storing data etc.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow chart illustrating a Trusted computing node declaration procedure <b>200</b>. In a blockchain, trusted computing (e.g. SGX) Nodes can earn profits by charging a fee for providing trusted computing services, which will be paid by IoT Owners. A trusted computing (e.g. SGX) Node declares the following information on the blockchain in the form of a smart contract:</p><p id="p-0051" num="0050">Hardware parameters, especially those regarding the CPU <b>202</b></p><p id="p-0052" num="0051">Price for providing trusted computing services <b>204</b></p><p id="p-0053" num="0052">Access information such as the trusted computing (e.g. SGX) Node's IP address is not part of the smart contract, which would expose surface for attack. After an IoT Owner has sent relevant information to the smart contract created <b>206</b> by the trusted computing (e.g. SGX) Node, access information will be sent by the trusted computing (e.g. SGX) Node to the IoT Owner through a private channel.</p><p id="p-0054" num="0053">An IoT Owner can audit a trusted computing (e.g. SGX) Node based on information provided in the smart contract.</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow chart illustrating Remote attestation service procedure <b>300</b>. Once it has obtained necessary access information about the trusted computing (e.g. SGX) node, the IoT Owner starts remote attestation for the trusted computing (e.g. SGX) Node to ensure the trustworthiness of the latter.</p><p id="p-0056" num="0055">IoT Owner sends a transaction with deposit <b>302</b>. Next, Transaction is verified to check enclaves resources <b>304</b>. If the enclave exceeds resources needed <b>306</b>, the deposit is returned <b>308</b> and the method <b>300</b> ends. Otherwise, Trusted Computing (e.g. SGX) Node sends the access information to the IoT Owner <b>310</b> and the IoT Owner initiates remote attestation <b>312</b>. If attestation is successful <b>314</b>, the IoT owner and enclave create a secure channel <b>316</b> and the method <b>300</b> ends. If not, IoT Owner provides the proof to the chain and gets the deposit back <b>318</b> and Trusted Computing (e.g. SGX) Node deposit is lost <b>320</b>.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow chart illustrating a Secure channel setup procedure <b>400</b> between IoT devices and the trust computing node. Once a secure channel is established between the IoT Owner and a trusted computing (e.g. SGX) Node, the enclave is now considered a trusted computing environment. The IoT Owner can pass an IoT device's secret keys to the enclave via the secure channel. In the meantime, the IoT device establishes a new secure channel with the enclave for subsequent communication. With the IoT device's secret keys, the enclave can now carry out operations on the blockchain on behalf of the IoT device according to the device's instructions.</p><p id="p-0058" num="0057">IoT Owner sends private key to enclave <b>402</b>. Next, IoT Owner sends the IOT device secret to enclave <b>404</b>. IoT Owner and enclave negotiate another key for secure channel <b>406</b>. IoT Owner sends the key to IoT Device <b>408</b>. IoT Device sends the secret encrypted with the key <b>410</b>. IoT Device sends the secret to enclave encrypted with the key <b>412</b>.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating a Message based IoT Security Architecture <b>500</b>. An IoT device can use either TCP or UDP or other protocols for communication with the enclave. TCP requires more computing and network resources and doesn't natively support hibernation of devices, thus is more suitable for a device that is always online and has considerably strong computing and network capabilities. On the other hand, the connection less UDP is more suitable for weak devices with very limited resources.</p><p id="p-0060" num="0059">Regardless of the protocols chosen, all communications between the IoT device and the enclave are encrypted. For TCP, the embodiments can encrypt data using symmetric encryption algorithms by specific applications, instead of the more traditional and generic Transport Layer Security (TLS). TLS requires asymmetric encryption algorithms which could become a burden for resource constrained IoT devices.</p><p id="p-0061" num="0060">The solution can use Type-Length-Value (TLV) encoding scheme as the message format between an IoT device and an enclave. For example,</p><p id="p-0062" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="28pt" align="left"/><colspec colname="3" colwidth="161pt" align="left"/><thead><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Type</entry><entry>Length</entry><entry>Value</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>0</entry><entry>1</entry><entry>Type of operation</entry></row><row><entry>1</entry><entry>2</entry><entry>Sequence Number used in responses</entry></row><row><entry>3</entry><entry>variable</entry><entry>Length of the data payload with two most significant </entry></row><row><entry/><entry/><entry>bits representing length of this field: 00&#x2014;1 byte, </entry></row><row><entry/><entry/><entry>01&#x2014;2 bytes, 10&#x2014;3 bytes, 11&#x2014;reserved</entry></row><row><entry>X</entry><entry>variable</entry><entry>Data payload with length indicated by the previous </entry></row><row><entry/><entry/><entry>field</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0063" num="0061">Type of Operation:</p><p id="p-0064" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="140pt" align="left"/><thead><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Value</entry><entry>Initiator</entry><entry>Description</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;1</entry><entry>IoT Device</entry><entry>Start a transaction; transaction body in data </entry></row><row><entry/><entry/><entry>payload</entry></row><row><entry>&#x2003;2</entry><entry>IoT Device</entry><entry>Query status of a transaction; query statement </entry></row><row><entry/><entry/><entry>in data payload</entry></row><row><entry>&#x2003;3</entry><entry>IoT Device</entry><entry>Monitor an event; event triggers in data </entry></row><row><entry/><entry/><entry>payload</entry></row><row><entry>&#x2003;4</entry><entry>IoT Device</entry><entry>Send a message; message content in data </entry></row><row><entry/><entry/><entry>payload</entry></row><row><entry>129</entry><entry>Enclave</entry><entry>Result of starting a transaction</entry></row><row><entry>130</entry><entry>Enclave</entry><entry>Result of a query</entry></row><row><entry>131</entry><entry>Enclave</entry><entry>Result of event monitoring setup</entry></row><row><entry>192</entry><entry>Enclave</entry><entry>Confirmation of a transaction</entry></row><row><entry>193</entry><entry>Enclave</entry><entry>Return event triggered</entry></row><row><entry>194</entry><entry>Enclave</entry><entry>Message destined for the loT device</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0065" num="0062">Once it has chosen an enclave as its proxy, an IoT device can then execute operations on the blockchain just like all other participating nodes, including creating smart contracts, mining, starting transactions, querying the status of a transaction etc. It can also utilize any messaging functionalities provided by the blockchain network. It can further forward its generated data to the enclave so that the data can be permanently stored elsewhere. Operations can be initiated by either the IoT device or the enclave.</p><p id="p-0066" num="0063">An IoT device can initiate an operation instructing the enclave to perform certain tasks, such as starting a transaction, querying the status of a transaction, setting up a smart contract etc. These operations can be further classified into two categories: those that need the IoT device's secret key such as starting a transaction or setting up a smart contract, and those that do not, such as querying transaction and setting up event triggers.</p><p id="p-0067" num="0064">An enclave can initiate an operation too, which is usually a report of an event whose trigger has been previously set up by the IoT device.</p><p id="p-0068" num="0065">Once it has chosen an enclave as its proxy, an IoT device can then execute operations on the blockchain just like all other participating nodes, including creating smart contracts, mining, starting transactions, querying the status of a transaction etc. It can also utilize any messaging functionalities provided by the blockchain network. It can further forward its generated data to the enclave so that the data can be permanently stored elsewhere. Operations can be initiated by either the IoT device or the enclave.</p><p id="p-0069" num="0066">An IoT device can initiate an operation instructing the enclave to perform certain tasks, such as starting a transaction, querying the status of a transaction, setting up a smart contract etc. These operations can be further classified into two categories: those that need the IoT device's secret key such as starting a transaction or setting up a smart contract, and those that do not, such as querying transaction and setting up event triggers.</p><p id="p-0070" num="0067">An enclave can initiate an operation too, which is usually a report of an event whose trigger has been previously set up by the IoT device.</p><p id="p-0071" num="0068">System Roles:</p><p id="p-0072" num="0069">Internet of Things device (hereinafter referred to as device): an actuator or data acquisition device at the edge of the network in the Internet of Things. IoT devices have the characteristics of single function, limited resources (computing, storage, network, energy), etc.</p><p id="p-0073" num="0070">The server: The data collection unit, processing unit, storage unit, business logic unit, etc. in the Internet of Things. The central server has rich resources and diversified functions. The server currently has public cloud deployment method, public and private cloud combined hybrid deployment, and complete private cloud deployment method, etc.</p><p id="p-0074" num="0071">The message channel between the device and the server (hereinafter referred to as the message channel) is used to complete the device data reporting, event reporting, and server instructions operations, etc. The message channel currently uses mature software solutions, such as HTTP messages and MQTT messages, etc.</p><p id="p-0075" num="0072">Blockchain access nodes (hereinafter referred to as access nodes): Access nodes are mainly used to execute related smart contracts, export execution result with the corresponding message to the device.</p><p id="p-0076" num="0073">Blockchain validator nodes store the corresponding private keys, sign the smart contracts and the results.</p><p id="p-0077" num="0074">Full Node: the general name of the validator node and the access node. The full node records all transaction information, state information, etc. of the blockchain network.</p><p id="p-0078" num="0075">Super thin node: refers specifically to the device.</p><p id="p-0079" num="0076">Smart contract: smart contract runs on the blockchain nodes, including the access node of the blockchain and the validator nodes. The smart contract comprises input, execution logic, and output. It can be implemented with deterministic features.</p><p id="p-0080" num="0077">Simple verification (SPV) is for resource-limited device to verify the authenticity of the messages.</p><p id="p-0081" num="0078">The system mainly comprises the following components.</p><p id="p-0082" num="0079">Smart contract data input sources. It could come from the server <b>502</b>, or any part of the business process but the owner of the data needs to be able to sign the data to prove the ownership.</p><p id="p-0083" num="0080">Blockchain network for device management. The blockchain comprises full nodes <b>504</b> and thin nodes <b>506</b>. The full node records the public keys of the devices and the business logic (smart contracts) for managing the access of the devices. The thin node does not record any state but the validator set to validate the output and results of the smart contracts.</p><p id="p-0084" num="0081">The output of the smart contracts. Smart contract output and results are stored in the blockchain network (full nodes). This method further defines what to be exported to the devices for verification. It includes the block header information, the hash values of the block and its Merkle proof.</p><p id="p-0085" num="0082">Simple verification by the thin nodes. Due to limited resources, thin nodes cannot store all transactions and states of the blockchain, and cannot perform smart contract execution. However, thin nodes have the ability to validate the blocks and independently complete Merkle proof with the same security as the full nodes.</p><p id="p-0086" num="0083"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow chart illustrating a Device access procedure <b>600</b>. The accessor with access rights sends relevant commands to the device. The access process needs to be coupled with the business logic, and the output is a message signed by the accessor (e.g., IoT owner) with device access rights <b>602</b>-<b>606</b>.</p><p id="p-0087" num="0084">Device access requestor sets up accessing command <b>602</b>. Device access requestor signs the command <b>604</b>. Messages are sent <b>608</b> to the blockchain network via the messaging system. The validator in the blockchain network receives the message <b>610</b> and finds the corresponding smart contract based on the message and sends the message to the smart contract. The smart contract records the access rights, access rules, etc. of the device. If the signature is valid <b>612</b>, the contract runs <b>614</b> the relevant logic according to the input of the message. If access request is granted <b>616</b> and accessing the device required <b>618</b>, the contract generates the corresponding access message <b>620</b>, and stores the message to the corresponding block. After the block is generated, the corresponding access node of the device generates a proprietary verifiable message for the device according to the output of the contract in the block and sends <b>622</b> the message to the specific device through the message channel.</p><p id="p-0088" num="0085">After the device receives <b>624</b> the message, it will perform the following <b>628</b>:</p><p id="p-0089" num="0086">use the private key for asymmetric decryption <b>632</b> of the received message and exit if the decryption fails.</p><p id="p-0090" num="0087">validate the correctness of the block header information in the output message.</p><p id="p-0091" num="0088">validate the correctness of the hash result of the smart contract execution result in the block header.</p><p id="p-0092" num="0089">validate the received message and the Merkle tree, complete the Merkle proof from the Merkle tree to the contract execution result hash value in the block header.</p><p id="p-0093" num="0090">After the above are completed and accepted <b>630</b>, the device can execute the corresponding instructions <b>634</b>.</p><p id="p-0094" num="0091"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram illustrating a Data input format <b>700</b>. The input format of the smart contract comprises the owner of the message <b>710</b>, the receiver of the message <b>720</b>, and the command <b>730</b>. In order to prove that the message is sent by the owner of the message, the message needs to be signed <b>740</b> by the owner. The recipient of the message can be a unicast address, a broadcast address, or a multicast address.</p><p id="p-0095" num="0092">The commands and the data carried by the commands <b>730</b> will be encrypted using the receiver's public key.</p><p id="p-0096" num="0093">After the smart contract is encoded according to the above format, the message needs to be serialized to be transmitted on the network.</p><p id="p-0097" num="0094">Access Node</p><p id="p-0098" num="0095">Access node is directly connected to the device. Device needs to be registered in the access node to obtain the corresponding messages. After the registration is completed, the access node routes the corresponding message to the device. The blockchain network is a network with the same states, and the states of each access node is consistent. In the IoT network, it is not possible or scalable for all access nodes to send control messages to the same device. Therefore, the registration mechanism is introduced. The process of the registration mechanism refers to decided by the device side. The access node can produce a block but cannot vote on the consensus.</p><p id="p-0099" num="0096">Verification/Validator Node</p><p id="p-0100" num="0097">Verification/validator node is also a full node. The difference between the verification node and the access node is that the verification node needs to complete the block generation, voting in addition to the execution of the smart contract. Because the verification node needs to vote on the generated block, validating the security of the node is critical to the security of the entire network. The decentralized deployment of verification nodes helps to maintain system security even if &#x2153; of the network is compromised. In order to protect the security of the verification node, verification node is not directly connected to the device.</p><p id="p-0101" num="0098">In the cryptography category, the verification node can support two forms of private key:</p><p id="p-0102" num="0099">The voting private key. The private key is used for the block generation voting. If a verification node agrees the transactions of the block. The verification node will use the private key to vote on the hash value of the block.</p><p id="p-0103" num="0100">The shared secret key private key: This type of private key is used to validate that a common decision is made between the nodes through cryptographic cooperation. The shared secret key private key is a threshold private key, meaning, for a certain decision, as long as the voting authority of the signed verification node meets a certain threshold (for example, &#x2154;) it is considered approved.</p><p id="p-0104" num="0101"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating a Single-node deployment method. The entire blockchain network has only one full node/verification node as shown. All voting power is placed in this node, and the blockchain network degenerates into a traditional centralized authority management server. Single-node deployment brings performance improvement with great security degradation. If the private key of the node is leaked, the entire security is compromised.</p><p id="p-0105" num="0102"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram illustrating a Multi-node deployment method. Several full nodes together form a blockchain network. Voting rights are assigned to different nodes through certain rules. The security advantage of this approach is that controlling or attacking a node does not fully control the entire blockchain network.</p><p id="p-0106" num="0103"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating a Enhanced multi-node deployment method. In an enhanced multi-node deployment scenario, full nodes with voting rights need to store private key information (in the form of files or in the form of hardware storage) and deployed in the private cloud/data center. Access nodes without voting authority can be deployed in the public cloud.</p><p id="p-0107" num="0104"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flow chart illustrating a Device binding procedure <b>1100</b>.</p><p id="p-0108" num="0105">Rights management contracts can complete the binding of devices permissions according to a variety of flexible ways, such as binding according to the time window, multi-signature binding for multiple users, etc. The specific binding process can be implemented by the smart contract.</p><p id="p-0109" num="0106">The binding relationship between the device and the corresponding service object is completed in the binding smart contract. Device owner needs to use the device's private key to sign a binding contract to confirm the binding relationship between the device and the service object. The binding logic for example, can be time window based i.e. is valid within a certain period of time. It can also be a multi-party signature binding, that is, a device needs to be signed by multiple parties.</p><p id="p-0110" num="0107">After the binding relationship is established. The binding relationship may be released. The binding release may be initiated by the service object, confirmed by the owner of the device, or directly by the owner of the device. The binding may also be forcibly released by the verification node through the shared key.</p><p id="p-0111" num="0108">Binding lock/unlock. The verification node can lock against the binding. In this mode, the binding relationship is locked by the verification node, and the service object cannot operate on the device. The service object can only be used after unlocking the device binding. The binding lock unlock process is performed by the verification node in the form of a shared secret key. The process of binding unlocking is shown in method <b>1200</b> (<figref idref="DRAWINGS">FIG. <b>12</b></figref>). After the validator receives the binding unlocking transaction, only the signature needs to be verified.</p><p id="p-0112" num="0109">In the method <b>1100</b>, the requester initiates binding request transaction <b>1102</b>. The smart contract then verifies the request <b>1104</b>. If the signature <b>1106</b> is verified, then the IoT device binding smart contract is executed <b>1108</b>. IoT device owner approves <b>1110</b> the binding request and send binding approval transaction with signature <b>1112</b>. If signature is verified <b>1114</b> then device binding smart contract verifies the binding logic <b>1116</b>. IF correct <b>1118</b>, then the smart contract confirms the binding <b>1120</b>.</p><p id="p-0113" num="0110"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flow chart illustrating a Device binding lock or unlock procedure. <b>1200</b>. First, Transaction is initiated for binding lock/unlock request <b>1210</b>. Validators start validating the transaction <b>1220</b>. Validator signs transaction with the shared private key <b>1230</b>. If the number of the validator signatures is above the requirement <b>1240</b>, then transaction to the blockchain is published <b>1250</b>.</p><p id="p-0114" num="0111"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flow chart illustrating a Procedure <b>1300</b> to check access authorization. First, Device service object issues <b>1310</b> authorization transaction. Node receives and verifies the transaction <b>1320</b>. If <b>1330</b> the signature is valid, then execute the smart contract based on the binding status <b>1340</b>. If smart contract execution is successful <b>1350</b> then the execution result is saved <b>1360</b>. If <b>1370</b> the device is registered <b>1370</b>, then send the commands and proof to the IoT Device <b>1380</b>.</p><p id="p-0115" num="0112"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a block diagram illustrating a Node to IoT device message format <b>1400</b>. The format includes: a Block header proof <b>1410</b> that contains the hash value that makes up the block header, the formed Merkle tree for each element in the block header, the validator signature set.</p><p id="p-0116" num="0113">An execution result <b>1420</b> of the contract includes the executed command and the result data. The data of the execution result is stored in the data in encrypted form. The device can decrypt the data using its own private key and operate according to the corresponding command instructions of the data.</p><p id="p-0117" num="0114">A Merkle proof <b>1430</b> of the result of the contract execution to prove the correctness of the contract execution results.</p><p id="p-0118" num="0115"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a flow chart illustrating a Validator set update method <b>1500</b>. A device does not store the state of the blockchain itself due to the limitations of its resources. Therefore, the device cannot independently validate the legality of the transaction and the security of the transaction. The device relies on maintaining the correct set of validators. After the device receives the command, it needs to validate the authenticity of both the validator set and the command. Verification of both is based on verification of the received message, from the block header, to the final transaction or execution result.</p><p id="p-0119" num="0116">The device may reliably store the set of validators, which can be updated, or deleted. The update of the validator set is a chain process. The old validator set validates the new set of validators, and so on, it forms the validator set chain.</p><p id="p-0120" num="0117">The method <b>1500</b> comprises check the existing validator set saved on the device <b>1500</b>. If still valid (<b>1510</b>), the IoT device receives <b>1515</b> a transaction to update the validator set. If the validator set is also the validator set of the received transaction <b>1520</b>, then the device uses the current validator set to validate <b>1525</b>. If not, then the device checks the last update of the validator set with the current set of the validators <b>1545</b>. If the validator set of the transaction is the same as the current validator set <b>1550</b>, then the device uses the current validator set to validate <b>1525</b>.</p><p id="p-0121" num="0118">If <b>1530</b> validation is successful, the device updates the validator set on the device <b>1535</b>. The method <b>1500</b> then ends if all the validator set update transactions applied <b>1540</b>. Otherwise, the method <b>1500</b> repeats.</p><p id="p-0122" num="0119"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a flow chart illustrating a Command verification procedure <b>1600</b>. When a device service object sends a command to a device, the command is first validated through the blockchain network to generate a transaction, in which the signature of the entire validator set is included instead of the device service object's signature.</p><p id="p-0123" num="0120">A Device receives <b>1605</b> a message from the node. If <b>1610</b> the validator set is not the same as the block, then invoke validator set update procedure <b>1645</b>. If <b>1650</b> succeeds or blocks are same, the validate the block base on the validator set <b>1615</b>. If <b>1620</b> validation passed, then validate the block Merkle Proof <b>1625</b>. If <b>1630</b> validation passed, then validate the Merkle Proof of the block execution result <b>1635</b>. If <b>1640</b> validation passed, then Validate the command to be executed <b>1655</b>. If <b>1660</b> validation passed then the command is executed <b>1665</b>.</p><p id="p-0124" num="0121"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a block diagram illustrating a Cloud deployment example. In this embodiment, the security system runs on the public cloud and is connected into the current customer's business system as a service.</p><p id="p-0125" num="0122">As an example, a production line device may contain data of the production line status including number of products built or the components used. A loan approval for supply chain financing can be made with data from the production line. However, the owner of the factory may not want to give up the information verbatim. Hence they can use the 3rd party trusted computing to carry out a verification code with the data in the IoT device on the production line without giving up the data to the loan approver.</p><p id="p-0126" num="0123">In a machinery example, there are sensors built into heavy machineries for the usage and duration of the operations et al that may be helpful to predict when the machinery may need to be updated or serviced. Again the data may be trade secrets for the owner of the machinery so there is a need to use this solution for the third party vendors to check and validate the data with the trust computing environment provided by this solution for one time access to the data and payment collection.</p><p id="p-0127" num="0124">There are also cases that may not involve IoT data access but to provide the business transaction among IoT devices. For example, in the case of shared economy, a smart lock, as an IoT device may work with the customer directly to collect payment and provide access to the key/lock. In the case of driverless cars, the cars, as IoT devices, may collaborate with each other for cutting into a line or getting priority for a busy lane. e.g. a car can pay the nearby 10 cars in the line to get in front of them like one will have to wave and get into a busy queue of the exit today. Or the cars can pay the IoT devices on the express line directly for express lane fees instead of relying on a centralized payment system that an out of town car may not have been participating.</p><p id="p-0128" num="0125">The existing connection-oriented scheme, the security protection is weak. If one of the nodes is compromised, it will allow an intruder to enter the whole network and the entire security mechanism fails. It also requires high maintenance costs to maintain the state of the connection, and cannot meet the needs of massive IoT device access. Low power consumption is a typical requirement of IoT devices. Based on connection-oriented security solutions such as VPN and TLS, device energy management faces challenges due to the need to maintain the connectivity.</p><p id="p-0129" num="0126">Accordingly, embodiments provide an authorization mechanism separate from the device by introducing a validator set, and the smart contract. A smart contract-based authorization mechanism, the authorization logic is completed by a smart contract. Contract implementation can be fast, convenient, and easy to manage.</p><p id="p-0130" num="0127">Embodiments for separating the authorization from the device do not require a firmware upgrade, and can dynamically change the authorization logic using a conventional programming language.</p><heading id="h-0007" level="1">Software Architecture</heading><p id="p-0131" num="0128"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram illustrating an example software architecture <b>2006</b>, which may be used in conjunction with various hardware architectures herein described. <figref idref="DRAWINGS">FIG. <b>18</b></figref> is a non-limiting example of a software architecture <b>2006</b> and it will be appreciated that many other architectures may be implemented to facilitate the functionality described herein. The software architecture <b>2006</b> may execute on hardware such as machine <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref> that includes, among other things, processors <b>2104</b>, memory <b>2114</b>, and (input/output) I/O components <b>2118</b>. A representative hardware layer <b>2052</b> is illustrated and can represent, for example, the machine <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>. The representative hardware layer <b>2052</b> includes a processing unit <b>2054</b> having associated executable instructions <b>2004</b>. Executable instructions <b>2004</b> represent the executable instructions of the software architecture <b>2006</b>, including implementation of the methods, components, and so forth described herein. The hardware layer <b>2052</b> also includes memory and/or storage modules memory/storage <b>2056</b>, which also have executable instructions <b>2004</b>. The hardware layer <b>2052</b> may also comprise other hardware <b>2058</b>.</p><p id="p-0132" num="0129">In the example architecture of <figref idref="DRAWINGS">FIG. <b>18</b></figref>, the software architecture <b>2006</b> may be conceptualized as a stack of layers where each layer provides particular functionality. For example, the software architecture <b>2006</b> may include layers such as an operating system <b>2002</b>, libraries <b>2020</b>, frameworks/middleware <b>2018</b>, applications <b>2016</b>, and a presentation layer <b>2014</b>. Operationally, the applications <b>2016</b> and/or other components within the layers may invoke API calls <b>2008</b> through the software stack and receive a response such as messages <b>2012</b> in response to the API calls <b>2008</b>. The layers illustrated are representative in nature and not all software architectures have all layers. For example, some mobile or special purpose operating systems may not provide a frameworks/middleware <b>2018</b>, while others may provide such a layer. Other software architectures may include additional or different layers.</p><p id="p-0133" num="0130">The operating system <b>2002</b> may manage hardware resources and provide common services. The operating system <b>2002</b> may include, for example, a kernel <b>2022</b>, services <b>2024</b>, and drivers <b>2026</b>. The kernel <b>2022</b> may act as an abstraction layer between the hardware and the other software layers. For example, the kernel <b>2022</b> may be responsible for memory management, processor management (e.g., scheduling), component management, networking, security settings, and so on. The services <b>2024</b> may provide other common services for the other software layers. The drivers <b>2026</b> are responsible for controlling or interfacing with the underlying hardware. For instance, the drivers <b>2026</b> include display drivers, camera drivers, Bluetooth&#xae; drivers, flash memory drivers, serial communication drivers (e.g., Universal Serial Bus (USB) drivers), Wi-Fi&#xae; drivers, audio drivers, power management drivers, and so forth, depending on the hardware configuration.</p><p id="p-0134" num="0131">The libraries <b>2020</b> provide a common infrastructure that is used by the applications <b>2016</b> and/or other components and/or layers. The libraries <b>2020</b> provide functionality that allows other software components to perform tasks in an easier fashion than to interface directly with the underlying operating system <b>2002</b> functionality (e.g., kernel <b>2022</b>, services <b>2024</b> and/or drivers <b>2026</b>). The libraries <b>2020</b> may include system libraries <b>2044</b> (e.g., C standard library) that may provide functions such as memory allocation functions, string manipulation functions, mathematical functions, and the like. In addition, the libraries <b>2020</b> may include API libraries <b>2046</b> such as media libraries (e.g., libraries to support presentation and manipulation of various media format such as MPEG4, H.264, MP3, AAC, AMR, JPG, PNG), graphics libraries (e.g., an OpenGL framework that may be used to render 2D and 3D in a graphic content on a display), database libraries (e.g., SQLite that may provide various relational database functions), web libraries (e.g., WebKit that may provide web browsing functionality), and the like. The libraries <b>2020</b> may also include a wide variety of other libraries <b>2048</b> to provide many other APIs to the applications <b>2016</b> and other software components/modules.</p><p id="p-0135" num="0132">The frameworks/middleware <b>2018</b> (also sometimes referred to as middleware) provide a higher-level common infrastructure that may be used by the applications <b>2016</b> and/or other software components/modules. For example, the frameworks/middleware <b>2018</b> may provide various graphic user interface (GUI) functions, high-level resource management, high-level location services, and so forth. The frameworks/middleware <b>2018</b> may provide a broad spectrum of other APIs that may be used by the applications <b>2016</b> and/or other software components/modules, some of which may be specific to a particular operating system <b>2002</b> or platform.</p><p id="p-0136" num="0133">The applications <b>2016</b> include built-in applications <b>2038</b> and/or third-party applications <b>540</b>. Examples of representative built-in applications <b>2038</b> may include, but are not limited to, a contacts application, a browser application, a book reader application, a location application, a media application, a messaging application, and/or a game application. Third-party applications <b>2040</b> may include an application developed using the ANDROID&#x2122; or IOS&#x2122; software development kit (SDK) by an entity other than the vendor of the particular platform, and may be mobile software running on a mobile operating system such as IOS&#x2122;, ANDROID&#x2122;, WINDOWS&#xae; Phone, or other mobile operating systems. The third-party applications <b>2040</b> may invoke the API calls <b>2008</b> provided by the mobile operating system (such as operating system <b>2002</b>) to facilitate functionality described herein.</p><p id="p-0137" num="0134">The applications <b>2016</b> may use built in operating system functions (e.g., kernel <b>2022</b>, services <b>2024</b> and/or drivers <b>2026</b>), libraries <b>2020</b>, and frameworks/middleware <b>2018</b> to create user interfaces to interact with users of the system. Alternatively, or additionally, in some systems, interactions with a user may occur through a presentation layer, such as presentation layer <b>2014</b>. In these systems, the application/component &#x201c;logic&#x201d; can be separated from the aspects of the application/component that interact with a user.</p><p id="p-0138" num="0135"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram illustrating components of a machine <b>2100</b>, according to some example embodiments, able to read instructions <b>2104</b> from a machine-readable medium (e.g., a machine-readable storage medium) and perform any one or more of the methodologies discussed herein. Specifically, <figref idref="DRAWINGS">FIG. <b>19</b></figref> shows a diagrammatic representation of the machine <b>2100</b> in the example form of a computer system, within which instructions <b>2110</b> (e.g., software, a program, an application, an applet, an app, or other executable code) for causing the machine <b>2100</b> to perform any one or more of the methodologies discussed herein may be executed. As such, the instructions <b>2110</b> may be used to implement modules or components described herein. The instructions <b>2110</b> transform the general, non-programmed machine <b>2100</b> into a particular machine <b>2100</b> programmed to carry out the described and illustrated functions in the manner described. In alternative embodiments, the machine <b>2100</b> operates as a standalone device or may be coupled (e.g., networked) to other machines. In a networked deployment, the machine <b>2100</b> may operate in the capacity of a server machine or a client machine in a server-client network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine <b>2100</b> may comprise, but not be limited to, a server computer, a client computer, a personal computer (PC), a tablet computer, a laptop computer, a netbook, a set-top box (STB), a personal digital assistant (PDA), an entertainment media system, a cellular telephone, a smart phone, a mobile device, a wearable device (e.g., a smart watch), a smart home device (e.g., a smart appliance), other smart devices, a web appliance, a network router, a network switch, a network bridge, or any machine <b>2100</b> capable of executing the instructions <b>2110</b>, sequentially or otherwise, that specify actions to be taken by machine <b>2100</b>. Further, while only a single machine <b>600</b> is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include a collection of machines that individually or jointly execute the instructions <b>2110</b> to perform any one or more of the methodologies discussed herein.</p><p id="p-0139" num="0136">The machine <b>2100</b> may include processors <b>2104</b>, memory/storage <b>2106</b>, and I/O components <b>2118</b>, which may be configured to communicate with each other such as via a bus <b>2102</b>. The memory/storage <b>2106</b> may include a memory <b>2114</b>, such as a main memory, or other memory storage, and a storage unit <b>2116</b>, both accessible to the processors <b>2104</b> such as via the bus <b>2102</b>. The storage unit <b>2116</b> and memory <b>2114</b> store the instructions <b>2110</b> embodying any one or more of the methodologies or functions described herein. The instructions <b>2110</b> may also reside, completely or partially, within the memory <b>2114</b>, within the storage unit <b>2116</b>, within at least one of the processors <b>2104</b> (e.g., within the processor's cache memory), or any suitable combination thereof, during execution thereof by the machine <b>2100</b>. Accordingly, the memory <b>2114</b>, the storage unit <b>2116</b>, and the memory of processors <b>2104</b> are examples of machine-readable media.</p><p id="p-0140" num="0137">The I/O components <b>2118</b> may include a wide variety of components to receive input, provide output, produce output, transmit information, exchange information, capture measurements, and so on. The specific I/O components <b>2118</b> that are included in a particular machine <b>2100</b> will depend on the type of machine. For example, portable machines such as mobile phones will likely include a touch input device or other such input mechanisms, while a headless server machine will likely not include such a touch input device. It will be appreciated that the I/O components <b>2118</b> may include many other components that are not shown in <figref idref="DRAWINGS">FIG. <b>21</b></figref>. The I/O components <b>2118</b> are grouped according to functionality merely for simplifying the following discussion and the grouping is in no way limiting. In various example embodiments, the I/O components <b>2118</b> may include output components <b>2126</b> and input components <b>2128</b>. The output components <b>2126</b> may include visual components (e.g., a display such as a plasma display panel (PDP), a light emitting diode (LED) display, a liquid crystal display (LCD), a projector, or a cathode ray tube (CRT)), acoustic components (e.g., speakers), haptic components (e.g., a vibratory motor, resistance mechanisms), other signal generators, and so forth. The input components <b>2128</b> may include alphanumeric input components (e.g., a keyboard, a touch screen configured to receive alphanumeric input, a photo-optical keyboard, or other alphanumeric input components), point based input components (e.g., a mouse, a touchpad, a trackball, a joystick, a motion sensor, or other pointing instrument), tactile input components (e.g., a physical button, a touch screen that provides location and/or force of touches or touch gestures, or other tactile input components), audio input components (e.g., a microphone), and the like.</p><p id="p-0141" num="0138">In further example embodiments, the I/O components <b>2118</b> may include biometric components <b>2130</b>, motion components <b>2134</b>, environmental components <b>2136</b>, or position components <b>2138</b> among a wide array of other components. For example, the biometric components <b>2130</b> may include components to detect expressions (e.g., hand expressions, facial expressions, vocal expressions, body gestures, or eye tracking), measure biosignals (e.g., blood pressure, heart rate, body temperature, perspiration, or brain waves), identify a person (e.g., voice identification, retinal identification, facial identification, fingerprint identification, or electroencephalogram based identification), and the like. The motion components <b>2134</b> may include acceleration sensor components (e.g., accelerometer), gravitation sensor components, rotation sensor components (e.g., gyroscope), and so forth. The environmental components <b>2136</b> may include, for example, illumination sensor components (e.g., photometer), temperature sensor components (e.g., one or more thermometer that detect ambient temperature), humidity sensor components, pressure sensor components (e.g., barometer), acoustic sensor components (e.g., one or more microphones that detect background noise), proximity sensor components (e.g., infrared sensors that detect nearby objects), gas sensors (e.g., gas detection sensors to detect concentrations of hazardous gases for safety or to measure pollutants in the atmosphere), or other components that may provide indications, measurements, or signals corresponding to a surrounding physical environment. The position components <b>2038</b> may include location sensor components (e.g., a GPS receiver component), altitude sensor components (e.g., altimeters or barometers that detect air pressure from which altitude may be derived), orientation sensor components (e.g., magnetometers), and the like.</p><p id="p-0142" num="0139">Communication may be implemented using a wide variety of technologies. The I/O components <b>2118</b> may include communication components <b>2140</b> operable to couple the machine <b>2100</b> to a network <b>2132</b> or devices <b>2120</b> via coupling <b>2124</b> and coupling <b>2122</b>, respectively. For example, the communication components <b>2140</b> may include a network interface component or other suitable device to interface with the network <b>2132</b>. In further examples, communication components <b>2140</b> may include wired communication components, wireless communication components, cellular communication components, near field communication (NFC) components, Bluetooth&#xae; components (e.g., Bluetooth&#xae; Low Energy), Wi-Fi&#xae; components, and other communication components to provide communication via other modalities. The devices <b>2120</b> may be another machine or any of a wide variety of peripheral devices (e.g., a peripheral device coupled via a USB).</p><p id="p-0143" num="0140">Moreover, the communication components <b>2140</b> may detect identifiers or include components operable to detect identifiers. For example, the communication components <b>640</b> may include radio frequency identification (RFID) tag reader components, NFC smart tag detection components, optical reader components (e.g., an optical sensor to detect one-dimensional bar codes such as Universal Product Code (UPC) bar code, multi-dimensional bar codes such as Quick Response (QR) code, Aztec code, Data Matrix, Dataglyph, MaxiCode, PDF417, Ultra Code, UCC RSS-2D bar code, and other optical codes), or acoustic detection components (e.g., microphones to identify tagged audio signals). In addition, a variety of information may be derived via the communication components <b>2140</b>, such as, location via Internet Protocol (IP) geo-location, location via Wi-Fi&#xae; signal triangulation, location via detecting a NFC beacon signal that may indicate a particular location, and so forth.</p><heading id="h-0008" level="1">Glossary</heading><p id="p-0144" num="0141">&#x201c;CARRIER SIGNAL&#x201d; in this context refers to any intangible medium that is capable of storing, encoding, or carrying instructions <b>2110</b> for execution by the machine <b>2100</b>, and includes digital or analog communications signals or other intangible medium to facilitate communication of such instructions <b>2110</b>. Instructions <b>2110</b> may be transmitted or received over the network <b>2132</b> using a transmission medium via a network interface device and using any one of a number of well-known transfer protocols.</p><p id="p-0145" num="0142">&#x201c;CLIENT DEVICE&#x201d; in this context refers to any machine <b>2100</b> that interfaces to a communications network <b>2132</b> to obtain resources from one or more server systems or other client devices. A client device may be, but is not limited to, a mobile phone, desktop computer, laptop, PDAs, smart phones, tablets, ultra books, netbooks, laptops, multi-processor systems, microprocessor-based or programmable consumer electronics, game consoles, STBs, or any other communication device that a user may use to access a network <b>2132</b>.</p><p id="p-0146" num="0143">&#x201c;COMMUNICATIONS NETWORK&#x201d; in this context refers to one or more portions of a network <b>2132</b> that may be an ad hoc network, an intranet, an extranet, a virtual private network (VPN), a local area network (LAN), a wireless LAN (WLAN), a wide area network (WAN), a wireless WAN (WWAN), a metropolitan area network (MAN), the Internet, a portion of the Internet, a portion of the Public Switched Telephone Network (PSTN), a plain old telephone service (POTS) network, a cellular telephone network, a wireless network, a Wi-Fi&#xae; network, another type of network, or a combination of two or more such networks. For example, a network <b>2132</b> or a portion of a network <b>2132</b> may include a wireless or cellular network and the coupling may be a Code Division Multiple Access (CDMA) connection, a Global System for Mobile communications (GSM) connection, or other type of cellular or wireless coupling. In this example, the coupling may implement any of a variety of types of data transfer technology, such as Single Carrier Radio Transmission Technology (1xRTT), Evolution-Data Optimized (EVDO) technology, General Packet Radio Service (GPRS) technology, Enhanced Data rates for GSM Evolution (EDGE) technology, third Generation Partnership Project (3GPP) including 3G, fourth generation wireless (4G) networks, Universal Mobile Telecommunications System (UNITS), High Speed Packet Access (HSPA), Worldwide Interoperability for Microwave Access (WiMAX), Long Term Evolution (LTE) standard, others defined by various standard setting organizations, other long range protocols, or other data transfer technology.</p><p id="p-0147" num="0144">&#x201c;MACHINE-READABLE MEDIUM&#x201d; in this context refers to a component, device or other tangible media able to store instructions <b>2110</b> and data temporarily or permanently and may include, but is not be limited to, random-access memory (RAM), read-only memory (ROM), buffer memory, flash memory, optical media, magnetic media, cache memory, other types of storage (e.g., erasable programmable read-only memory (EEPROM)), and/or any suitable combination thereof. The term &#x201c;machine-readable medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, or associated caches and servers) able to store instructions <b>2110</b>. The term &#x201c;machine-readable medium&#x201d; shall also be taken to include any medium, or combination of multiple media, that is capable of storing instructions <b>2110</b> (e.g., code) for execution by a machine <b>2100</b>, such that the instructions <b>2110</b>, when executed by one or more processors <b>2104</b> of the machine <b>2100</b>, cause the machine <b>2100</b> to perform any one or more of the methodologies described herein. Accordingly, a &#x201c;machine-readable medium&#x201d; refers to a single storage apparatus or device, as well as &#x201c;cloud-based&#x201d; storage systems or storage networks that include multiple storage apparatus or devices. The term &#x201c;machine-readable medium&#x201d; excludes signals per se.</p><p id="p-0148" num="0145">&#x201c;COMPONENT&#x201d; in this context refers to a device, physical entity, or logic having boundaries defined by function or subroutine calls, branch points, APIs, or other technologies that provide for the partitioning or modularization of particular processing or control functions. Components may be combined via their interfaces with other components to carry out a machine process. A component may be a packaged functional hardware unit designed for use with other components and a part of a program that usually performs a particular function of related functions. Components may constitute either software components (e.g., code embodied on a machine-readable medium) or hardware components. A &#x201c;hardware component&#x201d; is a tangible unit capable of performing certain operations and may be configured or arranged in a certain physical manner. In various example embodiments, one or more computer systems (e.g., a standalone computer system, a client computer system, or a server computer system) or one or more hardware components of a computer system (e.g., a processor or a group of processors <b>2104</b>) may be configured by software (e.g., an application <b>2016</b> or application portion) as a hardware component that operates to perform certain operations as described herein. A hardware component may also be implemented mechanically, electronically, or any suitable combination thereof. For example, a hardware component may include dedicated circuitry or logic that is permanently configured to perform certain operations. A hardware component may be a special-purpose processor, such as a field-programmable gate array (FPGA) or an application specific integrated circuit (ASIC). A hardware component may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example, a hardware component may include software executed by a general-purpose processor <b>2104</b> or other programmable processor <b>2104</b>. Once configured by such software, hardware components become specific machines <b>2100</b> (or specific components of a machine <b>2100</b>) uniquely tailored to perform the configured functions and are no longer general-purpose processors <b>2104</b>. It will be appreciated that the decision to implement a hardware component mechanically, in dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g., configured by software), may be driven by cost and time considerations. Accordingly, the phrase &#x201c;hardware componene&#x201d;(or &#x201c;hardware-implemented component&#x201d;) should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired), or temporarily configured (e.g., programmed) to operate in a certain manner or to perform certain operations described herein. Considering embodiments in which hardware components are temporarily configured (e.g., programmed), each of the hardware components need not be configured or instantiated at any one instance in time. For example, where a hardware component comprises a general-purpose processor <b>2104</b> configured by software to become a special-purpose processor, the general-purpose processor <b>2104</b> may be configured as respectively different special-purpose processors (e.g., comprising different hardware components) at different times. Software accordingly configures a particular processor or processors <b>2104</b>, for example, to constitute a particular hardware component at one instance of time and to constitute a different hardware component at a different instance of time. Hardware components can provide information to, and receive information from, other hardware components. Accordingly, the described hardware components may be regarded as being communicatively coupled. Where multiple hardware components exist contemporaneously, communications may be achieved through signal transmission (e.g., over appropriate circuits and buses <b>2102</b>) between or among two or more of the hardware components. In embodiments in which multiple hardware components are configured or instantiated at different times, communications between such hardware components may be achieved, for example, through the storage and retrieval of information in memory structures to which the multiple hardware components have access. For example, one hardware component may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware component may then, at a later time, access the memory device to retrieve and process the stored output. Hardware components may also initiate communications with input or output devices, and can operate on a resource (e.g., a collection of information). The various operations of example methods described herein may be performed, at least partially, by one or more processors <b>2104</b> that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors <b>2104</b> may constitute processor-implemented components that operate to perform one or more operations or functions described herein. As used herein, &#x201c;processor-implemented component&#x201d; refers to a hardware component implemented using one or more processors <b>2104</b>. Similarly, the methods described herein may be at least partially processor-implemented, with a particular processor or processors <b>2104</b> being an example of hardware. For example, at least some of the operations of a method may be performed by one or more processors <b>2104</b> or processor-implemented components. Moreover, the one or more processors <b>2104</b> may also operate to support performance of the relevant operations in a &#x201c;cloud computing&#x201d; environment or as a &#x201c;software as a service&#x201d; (SaaS). For example, at least some of the operations may be performed by a group of computers (as examples of machines <b>2100</b> including processors <b>2104</b>), with these operations being accessible via a network <b>2132</b> (e.g., the Internet) and via one or more appropriate interfaces (e.g., an API). The performance of certain of the operations may be distributed among the processors <b>2104</b>, not only residing within a single machine <b>2100</b>, but deployed across a number of machines <b>2000</b>. In some example embodiments, the processors <b>2104</b> or processor-implemented components may be located in a single geographic location (e.g., within a home environment, an office environment, or a server farm). In other example embodiments, the processors <b>2104</b> or processor-implemented components may be distributed across a number of geographic locations.</p><p id="p-0149" num="0146">&#x201c;PROCESSOR&#x201d; in this context refers to any circuit or virtual circuit (a physical circuit emulated by logic executing on an actual processor) that manipulates data values according to control signals (e.g., &#x201c;commands,&#x201d; &#x201c;op codes,&#x201d; &#x201c;machine code,&#x201d; etc.) and which produces corresponding output signals that are applied to operate a machine <b>2100</b>. A processor <b>2104</b> may be, for example, a central processing unit (CPU), a reduced instruction set computing (RISC) processor, a complex instruction set computing (CISC) processor, a graphics processing unit (GPU), a digital signal processor (DSP), an ASIC, a radio-frequency integrated circuit (RFIC) or any combination thereof. A processor may further be a multi-core processor having two or more independent processors <b>2104</b> (sometimes referred to as &#x201c;cores&#x201d;) that may execute instructions <b>2110</b> contemporaneously.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method, comprising:<claim-text>selecting a trusted computing node via smart contract on a blockchain;</claim-text><claim-text>completing remote attestation of the selected trusted computing node;</claim-text><claim-text>writing secret information to an enclave of the selected node;</claim-text><claim-text>causing a thin device to establish a private connection with the selected node without revealing the secret information; and</claim-text><claim-text>causing the selected node to act as a proxy on the blockchain for the device.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the smart contract includes hardware parameters of the selected computing node.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising transmitting secret keys of the device to the selected node via secure channel.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the causing the selected node to act as a proxy includes performing a transaction on the blockchain on behalf of the device.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. A machine-readable storage device embodying instructions that, when executed by a machine, cause the machine to perform operations comprising:<claim-text>selecting a trusted computing node via smart contract on a blockchain;</claim-text><claim-text>completing remote attestation of the selected trusted computing node;</claim-text><claim-text>writing secret information to an enclave of the selected node;</claim-text><claim-text>causing a thin device to establish a private connection with the selected node without revealing the secret information; and</claim-text><claim-text>causing the selected node to act as a proxy on the blockchain for the device.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the smart contract includes hardware parameters of the selected computing node.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the operations further comprise transmitting secret keys of the device to the selected node via secure channel.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the causing the selected node to act as a proxy includes performing a transaction on the blockchain on behalf of the device.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. An apparatus comprising:<claim-text>at least one processor; and</claim-text><claim-text>a non-transitory memory having instructions stored thereon to cause the at least one processor to execute a method, the method comprising:<claim-text>selecting a trusted computing node via smart contract on a blockchain;</claim-text><claim-text>completing remote attestation of the selected trusted computing node;</claim-text><claim-text>writing secret information to an enclave of the selected node;</claim-text><claim-text>causing a thin device to establish a private connection with the selected node without revealing the secret information; and</claim-text><claim-text>causing the selected node to act as a proxy on the blockchain for the device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the smart contract includes hardware parameters of the selected computing node.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the method further comprises transmitting secret keys of the device to the selected node via secure channel.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the causing the selected node to act as a proxy includes performing a transaction on the blockchain on behalf of the device.</claim-text></claim></claims></us-patent-application>