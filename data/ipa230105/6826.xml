<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006827A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006827</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17941442</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3226</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3242</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>321</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0894</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0866</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">LEVERAGING A TRUSTED PARTY THIRD-PARTY HSM AND DATABASE TO SECURELY SHARE A KEY</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17014215</doc-number><date>20200908</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11444771</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17941442</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Micron Technology, Inc.</orgname><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Dover</last-name><first-name>Lance W.</first-name><address><city>Fair Oaks</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The disclosed embodiments are related to securely updating a semiconductor device and in particular to a key management system. In one embodiment, a method is disclosed comprising storing a plurality of activation codes, each of the activation codes associated with a respective unique identifier (UID) of semiconductor device; receiving, over a network, a request to generate a new storage root key (SRK), the request including a response code and a requested UID; identifying a selected activation code from the plurality of activation codes based on the requested UID; generating the SHRSRK value using the response code and the selected activation code; associating the SHRSRK value with the requested UID and storing the SHRSRK value; and returning an acknowledgement in response to the request.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="118.19mm" wi="125.14mm" file="US20230006827A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="141.14mm" wi="127.17mm" file="US20230006827A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="194.14mm" wi="148.51mm" file="US20230006827A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="187.62mm" wi="46.57mm" file="US20230006827A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="154.18mm" wi="133.35mm" file="US20230006827A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="179.32mm" wi="164.42mm" orientation="landscape" file="US20230006827A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="193.29mm" wi="133.27mm" file="US20230006827A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The present application is a continuation application of U.S. patent application Ser. No. 17/014,215 filed Sep. 8, 2020, the entire disclosures of which application are hereby incorporated herein by reference.</p><p id="p-0003" num="0002">The present application relates to commonly-owned U.S. application Ser. No. 17/014,203, now U.S. Pat. No. 11,294,582, and Ser. No. 17/014,206, filed simultaneously with the instant application, the disclosures of which are incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF THE TECHNOLOGY</heading><p id="p-0004" num="0003">At least some embodiments disclosed herein relate generally to semiconductor devices and, in particular, to providing secure field upgrades to semiconductor devices.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0005" num="0004">Currently, many semiconductor devices (e.g., semiconductor memory devices) provide field-upgradable functionality that allow for post-fabrication updates to the devices. For example, a memory device may provide the ability to update the firmware of the memory device after the memory device is fabricated and installed. Securing these field upgrades is paramount to the reliable and trusted operation of such devices. Some devices utilize symmetric encryption to secure field upgrades. In these devices, a manufacturer and semiconductor device share a secret key and rely on these keys to encrypt and decrypt field upgrades. In a symmetric key system, the keys are unique between two parties (e.g., manufacturer and end-user). However, key distribution in such systems suffers from numerous deficiencies remedied by the disclosed embodiments.</p><p id="p-0006" num="0005">First, many systems rely exclusively on cloud-based key distribution techniques. These techniques require an end-user (e.g., device owner) be connected to a public network to download keys. However, the requirement of a public network connection introduces potential security risks. Second, most cloud-based systems rely on unique identifier (UID) values to enable an end-user to request a symmetric key from a cloud-based platform. Generally, these UID values must read from the semiconductor device individually and uploaded individually. Thus, bulk access to symmetric keys is not feasible since the electrical identification of UID values is generally only available during manufacturing when access to a public network is not possible. Moreover, retrieving symmetric keys in a high-value manufacturing (HVM) environment is often not feasible given the temporal latency involved in the operation and the costs introduced by that latency.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an authentication system according to some embodiments of the disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating a trusted partner (TP) system according to some embodiments of the disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating a method for retrieving and processing an activation code database according to some embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is a flow diagram illustrating a method for generating a message authentication code (MAC) according to some embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> is a flow diagram illustrating a method for generating a storage root key (SRK) according to some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating a memory system according to some embodiments of the disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram illustrating a computing device showing an example embodiment of a computing device used in the various embodiments of the disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0014" num="0013">The disclosed embodiments solve the aforementioned problems and other problems in the art. The disclosed embodiments allow end-users to activate capabilities in semiconductor devices using symmetric key cryptography in a manufacturing environment without requiring a connection to a public network and, ultimately, a cloud-based KMS. Further, the disclosed embodiments support requests for multiple symmetric keys at once. Further, the disclosed embodiments preserve the ability to prevent symmetric exposure end-to-end but do so for multiple devices at once when connecting to a KMS. These and other features are described in more detail with reference to the disclosed embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an authentication system according to some embodiments of the disclosure.</p><p id="p-0016" num="0015">The illustrated system includes a semiconductor device manufacturer (<b>110</b>), KMS (<b>102</b>), trusted partner (TP) (<b>104</b>), customer system (<b>106</b>), and a plurality of semiconductor devices (<b>108</b>). In the illustrated embodiment, the manufacturer (<b>110</b>) is the manufacturer of devices (<b>108</b>). In the illustrated embodiment, the manufacturer (<b>110</b>) can communicate with the KMS (<b>102</b>) via a secure channel. In some embodiments, the manufacturer (<b>110</b>) uploads, for each device (<b>108</b>), a corresponding unique identifier (UID), and a device secret key, also referred to as a manufacturer's storage root key (MFGSRK) to the KMS (<b>102</b>). In the illustrated embodiment, the MFGSRK is generated in a secure manufacturing environment of the manufacturer (<b>110</b>). In some embodiments, the manufacturer (<b>110</b>) also uploads a customer identifier (CID) for each customer that purchases or otherwise is associated with a device (<b>108</b>). In some embodiments, the manufacturer also uploads a customer authentication key (CAK) associated with a CID. In one embodiment, the CAK is limited to a specified date range, thus becoming invalid after the last day of the range passes. The UID, MFGSRK, CID, and CAK values are collectively referred to as &#x201c;manufacturing data.&#x201d;</p><p id="p-0017" num="0016">In the illustrated embodiment, the KMS (<b>102</b>) stores the aforementioned data received from the manufacturer (<b>110</b>). In one embodiment, the KMS (<b>102</b>) comprises a server, or multiple servers, for storing the manufacturing data. In some embodiments, the KMS (<b>102</b>) utilizes a hardware security module (HSM) to secure the manufacturing data. In the illustrated embodiment, the KMS (<b>102</b>) is capable of generating activation codes for each of the received UIDs. In some embodiments, an activation code comprises an integer or similar processible value. In some embodiments, the KMS (<b>102</b>) generates an activation code in response to a request from TP (<b>104</b>).</p><p id="p-0018" num="0017">In the illustrated embodiment, the TP (<b>104</b>) comprises a computing system that is securely and communicatively coupled to KMS (<b>102</b>). In the illustrated embodiment, the TP (<b>104</b>) issues network requests to the KMS (<b>102</b>) for batches of activation codes (also referred to as an activation database). In one embodiment, the request for an activation database includes the CID, a date range, a device type, and a nonce unique to a customer and known by the KMS (<b>102</b>) (referred to as &#x201c;KMS nonce&#x201d;). In some embodiments, a customer negotiates the KMS nonce with the KMS (<b>102</b>) via a network communication session, thus establishing a commonly known value for the KMS nonce. In the illustrated embodiment, the TP (<b>104</b>) receives and stores the contents of the activation database. In some embodiments, the TP (<b>104</b>) also includes an HSM for securing the activation database. In the illustrated embodiment, the TP (<b>104</b>) also includes processing capabilities for generating a message authentication code (MAC) for a given customer. Further, in the illustrated embodiment, the TP (<b>104</b>) includes processing capabilities for generating a secure database of shared device secrets based on the activation codes in the activation database and response codes received from semiconductor devices (<b>108</b>).</p><p id="p-0019" num="0018">In the illustrated embodiment, the customer system (<b>106</b>) communicates with the TP (<b>104</b>). The customer system (<b>106</b>) may comprise a customer's manufacturing line or other systems for handling semiconductor devices (<b>108</b>). The specific arrangement of computing devices of the customer system (<b>106</b>) is not limited herein. In some embodiments, TP (<b>104</b>) comprises one or more secure computing devices installed within a customer system (<b>106</b>). In other embodiments, the TP (<b>104</b>) is a separate computing system from the customer system (<b>106</b>).</p><p id="p-0020" num="0019">In the illustrated embodiment, the customer system (<b>106</b>) interacts with a plurality of semiconductor devices (<b>108</b><i>a</i>), (<b>108</b><i>b</i>), (<b>108</b><i>c</i>) (collectively, <b>108</b>). The devices (<b>108</b>) comprise semiconductor devices such as, but not limited to, memory devices. For example, devices may comprise NOR or NAND Flash memory chips, system-on-a-chip (SoC) devices, or other types of discrete semiconductor packages.</p><p id="p-0021" num="0020">The devices (<b>108</b>) include a plurality of non-volatile storage locations for storing various fields and parameters such as a CID and CAK. The devices (<b>108</b>) additionally include hardware or firmware capable of performing cryptographic operations such as operations supporting a MAC. Examples of such operations include HMAC-SHA256, AES, and CMAC operations. One example of a device (<b>108</b>) is provided in the description of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the disclosure of which is incorporated herein by reference in its entirety.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating a trusted partner (TP) system according to some embodiments of the disclosure.</p><p id="p-0023" num="0022">In the illustrated embodiment, a TP (<b>104</b>) comprises a secure processing platform for managing key usage by semiconductor devices. The illustrated TP (<b>104</b>) allows for customer-specific batch mode activations of semiconductor devices (<b>108</b>). In the illustrated embodiment, a customer system (<b>106</b>) downloads a database of activation codes (<b>204</b>) for all semiconductor devices (<b>108</b>) of a particular type. A customer may interact with the semiconductor devices (<b>108</b>) offline, and may also use TP (<b>104</b>) to activate offline to provision devices. That is, the TP (<b>104</b>) may not require a connection to KMS (<b>102</b>) since it maintains the activation codes and functionality described herein. That is, the TP (<b>104</b>) does not require a constant or consistent connection to the KMS (<b>102</b>). However, in some embodiments, the TP (<b>104</b>) must have a connection to the KMS (<b>102</b>) initially to retrieve an activation database.</p><p id="p-0024" num="0023">The use of TP (<b>104</b>) provides numerous advantages over existing key management solutions. First, activation codes stored locally in TP (<b>104</b>) database (<b>202</b>) can only be used by the intended customer since they are based on that customer's CID. Second, an activation code can be used to activate SRKs (including MFGSRKs and SHRSRKs, as used herein an &#x201c;SRK&#x201d; refers to any storage root key generated by the TP, <b>104</b>) at the TP (<b>104</b>) or semiconductor device (<b>108</b>) for all customer devices without cloud connectivity. Third, each activation code within a database is device-specific and only works for the intended device, based on the device's MFGSRK. Fourth, the activation code database can be rendered no longer functional if the KMS nonce is not known. Fifth, activating semiconductor devices (<b>108</b>) using the TP (<b>104</b>) can be set to only happen for the first provisioning of the semiconductor devices (<b>108</b>), i.e., before the device has ever been provisioned. Sixth, a manufacturer (<b>110</b>) can track which (e.g., how many) devices have been activated based on a report from TP (<b>104</b>). These and other advantages are described more fully herein.</p><p id="p-0025" num="0024">In the illustrated embodiment, the TP (<b>104</b>) is communicatively coupled to both KMS (<b>102</b>) and customer systems (<b>106</b>). In some embodiments, both connections comprise secure communications channels such as a network connection secured using a transport layer security (TLS) protocol, secure sockets layer (SSL) protocol, or similar secure protocol. In these embodiments, the communications may be packetized using transmission control protocol (TCP), user datagram protocol (UDP), or the like. In some embodiments, a higher-level protocol such as Hypertext Transfer Protocol (HTTP) may be used. In some embodiments, the secure connections are also established by the TP (<b>104</b>) logging into the KMS (<b>102</b>) or by the customer system (<b>106</b>) logging into the TP (!<b>04</b>). In some embodiments, this logging in may be accomplished via a username and password, a secure token, or other similar security mechanisms.</p><p id="p-0026" num="0025">In the illustrated embodiment, the TP (<b>104</b>) includes various processing components including a storage root key (SRK) generator (<b>210</b>), message authentication code (MAC) generator (<b>208</b>), and a hardware security module (HSM) (<b>202</b>). These components (<b>202</b>, <b>208</b>, <b>210</b>) may comprise dedicated hardware devices (e.g., servers) running software configured to perform the operations described herein (and, in particular, in the descriptions of <figref idref="DRAWINGS">FIGS. <b>3</b>, <b>4</b>A, and <b>4</b>B</figref>). Alternatively, some or all of the components (<b>202</b>, <b>208</b>, <b>210</b>) may be implemented in a single device. For example, the components (<b>202</b>, <b>208</b>, <b>210</b>) may be implemented in software on a single server. In some embodiments, a hybrid approach may be taken, and some components (<b>202</b>, <b>208</b>, <b>210</b>) may be implemented in software, others in hardware, and still others in a combination of hardware and software. For example, in one embodiment, a server executes software to implements the SRK generator (<b>210</b>) and MAC generator (<b>208</b>), while a physical device running secure software implements the HSM (<b>202</b>), the physical device being communicatively coupled to the server running the SRK generator (<b>210</b>) and MAC generator (<b>208</b>).</p><p id="p-0027" num="0026">The TP (<b>104</b>) additionally includes an HSM (<b>202</b>). The HSM (<b>202</b>) comprises a physically separate storage layer for storing sensitive data such as activation codes (<b>204</b>) and SRK (<b>206</b>) values. In some embodiments, the HSM (<b>202</b>) comprises a separate, physical computing device such as a dedicated server. In other embodiments, the HSM (<b>202</b>) may comprise a pluggable device that connects to one or more of the servers implemented by the TP (<b>104</b>). The HSM (<b>202</b>) may include one or more cryptographic processors for securing data therein. The HSM (<b>202</b>) may have tamper detection functionality.</p><p id="p-0028" num="0027">In the illustrated embodiment, the HSM (<b>202</b>) stores activations codes (<b>204</b>). The activation codes (<b>206</b>) are generated by the KMS (<b>102</b>) and returned to the TP (<b>104</b>) in response to a request for the activation codes (<b>206</b>). In some embodiments, the request comprises a command generated by the TP (<b>104</b>) and sent to KSM (<b>102</b>) that includes one or more parameters. In one embodiment, the command has a fixed name or opcode to allow the KMS to identify the command. In another embodiment, the command may comprise an endpoint such as an HTTP endpoint and the issuance of, for example, a GET request to the endpoint comprises the command identifier. In some embodiments, the one or more parameters include a Customer ID (CID) value, a KMS nonce, a date range, and a device type.</p><p id="p-0029" num="0028">In the illustrated embodiment, a CID comprises a unique identifier that uniquely identifies a customer. As used herein, a customer refers to any entity that utilizes semiconductor devices. For example, a customer may comprise a manufacturer of electronic devices that include semiconductor devices. In the illustrated embodiments, the CID is known by the customer as well as all entities depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In some embodiments, the CID may be written by the manufacturer.</p><p id="p-0030" num="0029">In one embodiment, a CAK comprises a symmetric key. In one embodiment, the manufacturer (<b>110</b>) maintains the CAK for the given customer. Thus, the manufacturer (<b>110</b>) may store CAKs for each customer, and each customer stores its own CAK. In one embodiment, the CAK is periodically updated (e.g., at regular intervals). In the illustrated embodiment, the CAK (<b>208</b>) may be written by the manufacturer (<b>110</b>) when manufacturing the device. The manufacturer (<b>110</b>) may periodically transmit CID&#x2014;CAK pairs to the KMS (<b>102</b>). The KMS (<b>102</b>) may additionally transmit CAKs to the TP (<b>104</b>) along with activation codes for multiple devices. In some embodiments, the HSM (<b>202</b>) is further configured to store CID and CAK values when receiving the activation codes (<b>206</b>).</p><p id="p-0031" num="0030">In the illustrated embodiment, the date range and device type may comprise a selectable parameter used to identify a subset of a customer's devices. In one embodiment, the TP (<b>104</b>) issues a request to the KMS (<b>102</b>) for devices by supplying the date range and device type. As discussed, the CID and KMS nonce values are also included in this request. The KMS (<b>102</b>) uses these parameters to extract a set of UID-MFGSRK pairs matching the date range and/or device type.</p><p id="p-0032" num="0031">As an example, a UID may include a date range and a device type within the format of the UID. For example, the UID may include a product code and a date, as well as other data. In this scenario, the KMS (<b>102</b>) may generate a regular expression query or similar query in a language such as structured query language (SQL). For example, the KMS (<b>102</b>) may search for any UIDs match the pattern &#x201c;PROD20200101*&#x201d; where &#x201c;PROD&#x201d; is a device type, &#x201c;20200101&#x201d; is a date (Jan. 1, 2020) within the received data range, and &#x201c;*&#x201d; represents zero or more arbitrary characters appearing after the date range. Certainly, other formats and methods of querying may be used, and the disclosure is not limited to a specific UID format. As can be seen, the device type and date range values stored in the request are used by the KMS (<b>102</b>) to identify UID-MFGSRK pairs. As described more fully in commonly-owned co-pending application Ser. No. 17/014,206, the KMS (<b>102</b>) returns a set of activation codes for each identified UID and also returns one or more CAKs corresponding to the activation codes. Since CAK values may change over time, the KMS (<b>102</b>) returns the CAKs associated with the UIDs at the time of UID creation. The HMS (<b>202</b>) may include a dedicated storage area for CAKs. In some embodiments, the returned activation codes additionally include associated UIDs, thus mapping UIDs to activation codes. As with CAKs, these UIDs may be stored in the HSM (<b>202</b>).</p><p id="p-0033" num="0032">In the illustrated embodiment, the KMS (<b>102</b>) generates a unique activation code for each UID in the UID-MFGSRK pairs. As described in more detail, the activation code may be generated based on the MFGSRK and, in some embodiments, the customer nonce as well. The KMS (<b>102</b>) re-maps the UID values to the activation codes, generating an activation code database. In the illustrated embodiment, the KMS (<b>102</b>) removes the MFGSRKs and does not transmit these keys to the TP (<b>104</b>). Thus, the KMS (<b>102</b>) transmits UID-activation code pairs to the TP (<b>104</b>).</p><p id="p-0034" num="0033">Further detail regarding the retrieval and storage of activation codes is discussed in more detail in the description of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0035" num="0034">As will be described in more detail in the descriptions of <figref idref="DRAWINGS">FIGS. <b>4</b>A and <b>4</b>B</figref>, but as generally discussed herein, the TP (<b>104</b>) additionally performs SRK generation functions and MAC generation functions via SRK generator (<b>210</b>) and MAC generator (<b>208</b>), respectively.</p><p id="p-0036" num="0035">In the illustrated embodiment, the SRK generator (<b>210</b>) is configured to generate a new storage root key (SHRSRK) for a given device (e.g., <b>108</b>). In one embodiment, the SRK generator (<b>210</b>) receives requests to generate a SHRSRK value from a customer system (<b>106</b>). In one embodiment, the request may come directly from a device (<b>108</b>). In either scenario, the request includes a response code generated by the device (<b>108</b>) and a UID of a corresponding device. In some embodiments, the SRK generator (<b>210</b>) receives a batch of UID-response code pairs and generates SHRSRK values for each UID. In one embodiment, the SHRSRK value is generated using the received response code and a corresponding activation code. In one embodiment, the method uses a MAC function to generate a SHRSRK value for a given UID. In one embodiment, this MAC function comprises an HMAC function. In one embodiment, the method uses the response code received in the request as the key to an HMAC function. In this embodiment, the method further uses the activation code as the message to encode using the HMAC. As described in commonly-owned U.S. application Ser. No. 17/014,203, now U.S. Pat. No. 11,294,582, the device (<b>108</b>) is capable of performing the same computation locally; thus a device (<b>108</b>) and TP (<b>104</b>) simultaneously can generate the appropriate SHRSRK value. Since the SHRSRK value is based on the activation code, and the activation code is based on the value of MFGSRK, which is private, the SHRSRK value is secured from third-party generation. In some optional embodiments, after generating the SHRSRK value, the SRK generator (<b>210</b>) returns the SHRSRK value to the customer system (<b>206</b>). In an alternative embodiment, the SRK generator (<b>210</b>) may only return a success or failure error code to the calling party (e.g., customer system <b>106</b>) and maintain the SHRSRK value as a secret.</p><p id="p-0037" num="0036">In addition to the generation of SRKs, the TP (<b>104</b>) additionally includes a MAC generator (<b>208</b>). In the illustrated embodiment, the MAC generator (<b>208</b>) is configured to receive a message from the customer system (<b>106</b>) and generate a corresponding MAC for the message. The MAC generator (<b>208</b>) then returns the generated MAC to the customer system. In one embodiment, the MAC is generated using an HMAC function. In one embodiment, the HMAC function uses the CAK as the key and a corresponding message as the value to be hashed. In one embodiment, the MAC generator (<b>208</b>) receives a CID value and UID value from the customer, these values may be part of a provision command, described more fully in commonly-owned U.S. application Ser. No. 17/014,203, now U.S. Pat. No. 11,294,582. In one embodiment, the provision command additionally includes a KMS nonce value. The MAC generator (<b>208</b>) extracts the CID from the command and identifies a corresponding CAK for the UID. As described above, CAKs may vary over time, and the KMS (<b>102</b>) returns CAK values for a given set of UID-activation code pairs. Thus, the TP (<b>104</b>) uses the UID to identify a corresponding CAK received from the KMS (<b>102</b>). The message then performs an HMAC operation on the received message (which includes a CID value and KMS nonce) using the CAK as the key. The MAC generator (<b>208</b>) then returns the MAC to the customer system (<b>106</b>). As described in commonly-owned U.S. application Ser. No. 17/014,203, now U.S. Pat. No. 11,294,582, the MAC is included in the provision command sent from a customer system (<b>106</b>) to a device (<b>108</b>). The device (<b>108</b>) can authenticate the MAC due to the private storage of the appropriate CAK. As illustrated, the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> allows only authorized customers (e.g., those with a known CID and associated CAK) to provision a given semiconductor device.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating a method for retrieving and processing an activation code database according to some embodiments. In the illustrated embodiment, the method depicted may be executed by one or more servers of a TP (<b>104</b>).</p><p id="p-0039" num="0038">In step <b>302</b>, the method requests one or more activation codes from a KMS. In one embodiment, a TP (<b>104</b>) establishes a secure connection with the KMS (<b>102</b>) and issues a network request for activation codes. In one embodiment, the request includes a KMS nonce value, CID value, date range, and device type. Various details of these parameters have been described and are not repeated herein.</p><p id="p-0040" num="0039">In step <b>304</b>, the method receives an activation code database as well as a CAK and, in some embodiments, an updated KMS nonce value. In one embodiment, the KMS (<b>102</b>) transmits a set of UID-activation code pairs that are responsive to the request transmitted in step <b>302</b>. In one embodiment, an activation code comprises a fixed-length value generated by the KMS (<b>102</b>). Details of the generation of an activation code are provided in commonly-owned co-pending application Ser. No. 17/014,206. In brief, the activation code can be generated by the KMS according to the following algorithm:</p><p id="p-0041" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Activation Code=HMAC(SHA256(CID&#x2225;KMS Nonce),MFGSRK),<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0042" num="0000">where HMAC comprises HMAC function, SHA256 comprises a SHA-256 function, CID and KMS nonce comprise the CID and KMS nonce transmitted in step <b>302</b>, and MFGSRK comprises the manufacturer's storage root key. As illustrated, the HMAC function uses the output of the SHA256 as a key and the value of MFGSRK as the message to encode.</p><p id="p-0043" num="0040">In one embodiment, the KMS (<b>102</b>) also returns one or more CAK values along with the activation codes. Since CAK values may change over time, the KMS (<b>102</b>) identifies all CAKs used or valid in the date range of the request and returns the CAK values along with the activation code.</p><p id="p-0044" num="0041">Finally, in some embodiments, the KMS (<b>102</b>) will update the value of KMS nonce and return the updated value. The TP (<b>104</b>) will then replace the value of KMS nonce with the updated value. In an alternative embodiment, the TP (<b>104</b>) maintains a historical record of KMS nonces and adds the updated KMS nonce to a list of KMS nonces. In some embodiments, the value of KMS nonce may comprise a monotonic counter value.</p><p id="p-0045" num="0042">In step <b>306</b>, the method stores the activation codes in an HSM. In one embodiment, the method stores the UIDs along with the activation codes. In some embodiments, the activation codes are stored in a relational database. In these embodiments, the UID and corresponding activation codes may be stored in the same row of a table of the relational database. In some embodiments, the row additionally includes the CID value used to retrieve the activation codes.</p><p id="p-0046" num="0043">In step <b>308</b>, the method stores the received CAKs. In some embodiments, the CAK values are stored in a separate storage area. In these embodiments, the CAK values are also stored with a relevant date range and a CID value to enable ad hoc queries.</p><p id="p-0047" num="0044">In another embodiment, the CAK value associated with a given UID-activation code pair may be stored in the relational database used to store the activation codes. In some embodiments, the CAK values may be stored in a separate database table that maps CID values to CAK values. Each CID&#x2014;CAK mapping additionally includes a data range that the CAK is or was valid. In one embodiment, the table storing UID-activation code pairs may include a reference (e.g., foreign key) referencing the relevant CAK. Alternatively, the UID-activation table may store a date that can be used to identify the relevant CAK. In another alternative embodiment, the UID-activation table may include a CAK directly in a row, thus the UID-activation table will include a CID value, UID-activation pair, and CAK value. In this manner, storage space is duplicated, but accessing all relevant data for a UID-activation code pair can be performed in a single lookup and without a JOIN operation.</p><p id="p-0048" num="0045">Finally, in step <b>310</b>, the method updates the value of KMS nonce. As described above, step <b>310</b> may be optional. In one embodiment, the method only stores the current KMS nonce value (e.g., in the HSM) and simply overwrites the current value with a new value received in step <b>304</b>. In an alternative embodiment, the method may store KMS nonce values in a separate storage area (e.g., a database table) and may append the new KMS nonce values to a list of previous KMS nonce values. In some embodiments, the method associates a date with each new KMS nonce value, to support historical queries. In one alternative embodiment, the method may write the current KMS nonce value to the storage area storing the UID-activation code pairs prior to updating the KMS nonce value. Thus, continuing the previous example, the HSM may include a CID value, UID-activation pair, a CAK value, and the value of KMS nonce used to retrieve the activation code.</p><p id="p-0049" num="0046">Other storage techniques may be used, and the above description of relational database storage techniques may be equally applied to non-relational database (e.g., document-oriented storage or key-value stores) without significant creative effort.</p><p id="p-0050" num="0047"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is a flow diagram illustrating a method for generating a message authentication code (MAC) according to some embodiments. The method illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is performed by the TP (<b>104</b>) in response to a request from a customer system (<b>106</b>). In general, the customer system (<b>106</b>) does not include the capability to sign requests issued to the semiconductor devices (<b>108</b>). Thus, only systems authorized by the TP (<b>104</b>) can sign and issue commands to the semiconductor devices (<b>108</b>). To enable this, the TP (<b>104</b>) provides a MAC generation function that can be accessed by the customer systems.</p><p id="p-0051" num="0048">In step <b>402</b><i>a</i>, the method receives a request for a MAC.</p><p id="p-0052" num="0049">In some embodiments, the method receives the request over a secure communications channel such as a network connection secured using a transport layer security (TLS) protocol, secure sockets layer (SSL) protocol, or similar secure protocol.</p><p id="p-0053" num="0050">In one embodiment, the request includes an unsigned command (e.g., a provision command, described previously), the command including a command identifier and zero or more parameters. In one embodiment, the parameters include a CID value and a KMS nonce value. In one embodiment, the parameters further include a UID associated a semiconductor device destined to receive the command.</p><p id="p-0054" num="0051">In step <b>404</b><i>a</i>, the method generates a MAC using a CAK. In the illustrated embodiment, step <b>404</b><i>a </i>may include various sub-steps, described herein.</p><p id="p-0055" num="0052">As part of step <b>404</b><i>a</i>, the method may first authenticate the request for a MAC. As described above, the TP (<b>104</b>) may require that the customer system (<b>106</b>) authenticate with the TP (<b>104</b>) prior to issuing any commands, thus ensuring that a customer is authenticated before performing the method in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. Next, the method may verify that the received parameters are valid. For instance, the method may confirm that a CID and UID are both properly formatted and known to the TP (<b>104</b>). This validation ensures that arbitrary CID and UID values are not processed.</p><p id="p-0056" num="0053">Next, the method identifies a CAK to use to generate the MAC. In the illustrated embodiment, the method identifies a CAK associated with a UID. As described above, CAKs vary over time, but each UID is associated with a single CAK, the CAK that was valid when the UID was generated. The method uses the database of UID-activation codes, and the CAK values received as part of the process described in the description of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. For example, the method may query a database table using the CID and UID, and in response, receives the activation code and CAK value written when receiving the activation codes. Since the customer system does not have access to the CAK, the TP (<b>104</b>) executing the method in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> effectively manages access to private CAK values. Further, the TP (<b>104</b>) stores a historical record of CAK values for each UID, allowing the TP (<b>104</b>) to provision semiconductor devices after the current CAK value has changed.</p><p id="p-0057" num="0054">Finally, the method generates a MAC using the CAK. In one embodiment, the method uses an HMAC function to generate the MAC. In one embodiment, the method uses the appropriate CAK as the key to the HMAC and the received command as the message payload.</p><p id="p-0058" num="0055">In step <b>406</b><i>a</i>, the method returns the MAC to the customer system. In the illustrated embodiment, the method returns the MAC via the secure channel used to transmit the request in step <b>402</b><i>a. </i></p><p id="p-0059" num="0056"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> is a flow diagram illustrating a method for generating a storage root key (SRK) according to some embodiments.</p><p id="p-0060" num="0057">In step <b>402</b><i>b</i>, the method receives a device UID and associated response code. In the illustrated embodiment, the UID is read by a customer system from the associated semiconductor device. The UID may be read electrically or via a camera or other recording device. In the illustrated embodiment, the response code is read by accessing the storage of the semiconductor device after issuing a provision command and reading the response code generated onboard the semiconductor device. Details of generating a response code are provided in commonly-owned U.S. application Ser. No. 17/014,203, now U.S. Pat. No. 11,294,582. In general, the response code can be generated as follows:</p><p id="p-0061" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Response Code=HMAC(MTC,HMAC(SHA256(CID,KMS Nonce),MFGSRK)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0062" num="0000">where CID and KMS Nonce are provided by the customer system to the semiconductor device in the provision command, MFGSRK represents the secret manufacturer's original storage root key, MTC comprises the value of a public monotonic counter on the semiconductor device, HMAC comprises an HMAC function such as HMAC-SHA256, and SHA256 comprises a hashing algorithm implementing the SHA-256 algorithm.</p><p id="p-0063" num="0058">In the illustrated embodiment, the response code is publicly accessible on the semiconductor device. Thus, the customer system reads the response code and uploads the response code and corresponding UID to the TP (<b>104</b>) in step <b>402</b><i>b. </i></p><p id="p-0064" num="0059">In step <b>404</b><i>b</i>, the method generates a new storage root key (SHRSRK) using the response code, UID, and activation code associated with the UID. Similar to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the method may perform various validation on CID and UID values to confirm access before proceeding and those validations are not repeated herein.</p><p id="p-0065" num="0060">After validating the request, the method accesses the HSM to retrieve an activation code associated with the UID received from the customer system. The method then uses the activation code and response code to generate a SHRSRK value. In one embodiment, the method computes the SHRSRK value using a MAC function. In one embodiment, the MAC function comprises an HMAC function, such as HMAC-SHA256. In one embodiment, the method uses the response code as the key to the HMAC function and the activation code as the message to encode. Thus, the method may compute the value of SHRSRK as follows:</p><p id="p-0066" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>SHRSRK=HMAC(Response Code,Activation Code)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0067" num="0061">Since the value of SHRSRK is based on a private activation code, the value of SHRSRK is secret to the TP and device that generated the response code.</p><p id="p-0068" num="0062">In step <b>406</b><i>b</i>, the method stores the newly generated SHRSRK value along with the activation code and UID. In some embodiments, the method inserts the value of SHRSRK into the HSM along with the activation code and UID. For instance, the method may store the SHRSRK value in a dedicated storage area and associate the SHRSRK with the UID to enable the lookup of the SHRSRK value using the UID.</p><p id="p-0069" num="0063">In step <b>408</b><i>b</i>, the method acknowledges the creation of the SHRSRK by returning an appropriate response code. In one embodiment, the method is accessed via an endpoint such as an HTTP endpoint. In the illustrated embodiment, the method does not return the contents of SHRSRK to ensure the protection of the SHRSRK. Instead, the method returns a status code indicating the results of the key generation process. Thus, as one example, the method may return an HTTP 200 status code indicating the key generation process in step <b>404</b><i>b </i>was successful or an HTTP 500 status code indicating the key generation process was not successful.</p><p id="p-0070" num="0064">Once step <b>408</b><i>b </i>completes, the TP (<b>104</b>) and device (<b>108</b>) both include the new SHRSRK. However, the SHRSRK value has not yet been activated on the device (<b>108</b>). In one embodiment, the customer system (<b>106</b>) will transmit a second command to the TP (<b>104</b>) to receive a second MAC. In one embodiment, this second command comprises a replace key command. In one embodiment, the method performs a process similar to that described in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. That is, the method generates a MAC using the CAK associated with the UID. In one embodiment, the replace key command includes the CID and KMS nonce value and the MAC thus is generating using the CID and KMS nonce values as the message. In one embodiment, the customer system (<b>106</b>) will confirm that the device (<b>108</b>) has generated the value of SHRSRK by transmitting a confirmation to the TP (<b>104</b>). In some embodiments, the TP (<b>104</b>) will commit the independently generated SHRSRK value upon receiving such confirmation.</p><p id="p-0071" num="0065">In an alternative embodiment of <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the TP (<b>104</b>) may sign a replace key command using the SHRSRK instead of the CAK. Since only the device and the TP have access to the SHRSRK, and the TP only has access to SHRSRK after successfully generating the SHRSRK in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, use of the SHRSRK in lieu of the CAK ensures that both TP and device have access to the SHRSRK before the device commits the SHRSRK to serve as the primary SRK. When receiving the replace key command, the device validates the MAC before replacing the MFGSRK with the value of SHRSRK. Thus, in this embodiment, the TP must obtain SHRSRK before being capable of generating a valid MAC, ensuring synchronization between the TP and semiconductor device.</p><p id="p-0072" num="0066">As described above, the TP (<b>104</b>) manages key storage and generation on behalf of a customer system. In general, the customer interacts with the TP (<b>104</b>) and semiconductor devices (<b>108</b>) in the following manner. First, the customer system queries a semiconductor device to obtain a UID. This may be performed electrically or visually (e.g., via image recognition). Next, the customer system constructs a command such a provision command to issue to the device associated with the UID. The customer system transmits this command to the TP to receive a MAC. The customer system then adds the MAC to the command sent to the TP and issues the command and MAC to the semiconductor device. Since the MAC is generated using a secret CAK and this CAK is shared among the manufacturer, KMS, TP, and device, the device can independently verify the MAC before executing the command. In response to, for example, a provision command, the semiconductor device generates an activation code and response code and returns only the response code to the customer system. The customer system transmits this response code to the TP which, in turn, generates a new storage root key. The TP responds indicating that the generation of a new storage root key was successful. Next, the customer transmits a second command (e.g., a replace key command) to the TP and receives a second MAC. The customer system then issues this replace key command and the second MAC to the semiconductor device. After the semiconductor device verifies the second MAC, the original MFGSRK is replaced with the candidate key generated on the semiconductor device and is then used as the new storage root key. At the end of the process, the TP and semiconductor device both hold the value of the new storage root key while the customer system, manufacturer, and KMS no longer have access to the storage root key in use.</p><p id="p-0073" num="0067"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating a memory system according to some embodiments of the disclosure.</p><p id="p-0074" num="0068">As illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a computing system (<b>500</b>) includes a processor (<b>502</b>) communicatively coupled to a memory system (<b>506</b>) via a bus (<b>504</b>). The memory system (<b>506</b>) comprises a controller (<b>220</b>) communicatively coupled to one or more memory banks (<b>508</b>A-N) via a bus/interface (<b>512</b>). As illustrated, the controller (<b>220</b>) includes a local cache (<b>514</b>), firmware (<b>516</b>), and ECC module (<b>520</b>).</p><p id="p-0075" num="0069">In the illustrated embodiment, processor (<b>502</b>) can comprise any type of computing processor such as a central processing unit, graphics processing unit, or other type of general or special-purpose computing device. Processor (<b>502</b>) includes one or more output ports that allow for the transmission of address, user, and control data between processor (<b>502</b>) and the memory system (<b>506</b>). In the illustrated embodiment, this communication is performed over bus (<b>504</b>). In one embodiment, the bus (<b>504</b>) comprises an input/output (I/O) bus or similar type of bus.</p><p id="p-0076" num="0070">The memory system (<b>506</b>) is responsible for managing one or more memory banks (<b>508</b>A-<b>508</b>N). In one embodiment, the banks (<b>508</b>A-<b>508</b>N) comprise NAND Flash dies or other configurations of non-volatile memory.</p><p id="p-0077" num="0071">The banks (<b>508</b>A-<b>508</b>N) are managed by the controller (<b>220</b>). In some embodiments, the controller (<b>220</b>) comprises a computing device configured to mediate access to and from banks (<b>508</b>A-<b>508</b>N). In one embodiment, the controller (<b>220</b>) comprises an ASIC or other circuitry installed on a printed circuit board housing the banks (<b>508</b>A-<b>508</b>N). In some embodiments, the controller (<b>220</b>) may be physically separate from the banks (<b>508</b>A-<b>508</b>N). Controller (<b>220</b>) communicates with the banks (<b>508</b>A-<b>508</b>N) over interface (<b>512</b>). In some embodiments, this interface (<b>512</b>) comprises a physically wired (e.g., traced) interface. In other embodiments, the interface (<b>512</b>) comprises a standard bus for communicating with banks (<b>508</b>A-<b>508</b>N).</p><p id="p-0078" num="0072">Controller (<b>220</b>) comprises various modules (<b>514</b>-<b>518</b>). In one embodiment, the various modules (<b>514</b>-<b>518</b>) comprise various physically distinct modules or circuits. In other embodiments, the modules (<b>514</b>-<b>518</b>) may completely (or partially) be implemented in software or firmware.</p><p id="p-0079" num="0073">As illustrated, firmware (<b>516</b>) comprises the core of the controller and manages all non-cryptographic operations of the controller (<b>220</b>). Cryptographic engine (<b>222</b>) is provided for cryptographic operations, as described in more detail in commonly owned U.S. application Ser. No. 17/014,203, now U.S. Pat. No. 11,294,582, the disclosure of which is incorporated herein by reference in its entirety. In brief, the cryptographic engine (<b>222</b>) is configured to perform MAC calculations. These MAC calculations are used to generate new secret keys to replace and existing manufacturers secret key. Further detail is provided in commonly owned U.S. application Ser. No. 17/014,203, now U.S. Pat. No. 11,294,582.</p><p id="p-0080" num="0074">Thus, firmware (<b>516</b>) mediates access to banks (<b>508</b>A-<b>508</b>N) for non-cryptographic operations. As illustrated, both controller (<b>220</b>) and engine (<b>222</b>) access non-volatile (NV) storage (<b>202</b>). Details of accessing NV storage (<b>202</b>) are provided in the description of commonly owned U.S. application Ser. No. 17/014,203, now U.S. Pat. No. 11,294,582, and are not repeated herein.</p><p id="p-0081" num="0075"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram illustrating a computing device showing an example embodiment of a computing device used in the various embodiments of the disclosure. The device (<b>600</b>) may comprise a computing device used by manufacturer (<b>110</b>), KMS (<b>102</b>), TP (<b>104</b>), or customer system (<b>106</b>). Further, various components (e.g., <b>730</b>, <b>734</b>) may comprise a device including a semiconductor device (<b>108</b>) or may comprise the semiconductor device (<b>108</b>) itself.</p><p id="p-0082" num="0076">The computing device (<b>600</b>) may include more or fewer components than those shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. For example, a server computing device may not include audio interfaces, displays, keypads, illuminators, haptic interfaces, GPS receivers, cameras, or sensors.</p><p id="p-0083" num="0077">As shown in the figure, the device (<b>600</b>) includes a processing unit (CPU) (<b>622</b>) in communication with a mass memory (<b>630</b>) via a bus (<b>624</b>). The computing device (<b>600</b>) also includes one or more network interfaces (<b>650</b>), an audio interface (<b>652</b>), a display (<b>654</b>), a keypad (<b>656</b>), an illuminator (<b>658</b>), an input/output interface (<b>660</b>), a haptic interface (<b>662</b>), an optional global positioning systems (GPS) receiver (<b>664</b>) and a camera(s) or other optical, thermal, or electromagnetic sensors (<b>666</b>). Device (<b>600</b>) can include one camera/sensor (<b>666</b>), or a plurality of cameras/sensors (<b>666</b>), as understood by those of skill in the art. The positioning of the camera(s)/sensor(s) (<b>666</b>) on the device (<b>600</b>) can change per device (<b>600</b>) model, per device (<b>600</b>) capabilities, and the like, or some combination thereof.</p><p id="p-0084" num="0078">The computing device (<b>600</b>) may optionally communicate with a base station (not shown), or directly with another computing device. Network interface (<b>650</b>) is sometimes known as a transceiver, transceiving device, or network interface card (NIC).</p><p id="p-0085" num="0079">The audio interface (<b>652</b>) produces and receives audio signals such as the sound of a human voice. For example, the audio interface (<b>652</b>) may be coupled to a speaker and microphone (not shown) to enable telecommunication with others or generate an audio acknowledgment for some action. Display (<b>654</b>) may be a liquid crystal display (LCD), gas plasma, light-emitting diode (LED), or any other type of display used with a computing device. Display (<b>654</b>) may also include a touch-sensitive screen arranged to receive input from an object such as a stylus or a digit from a human hand.</p><p id="p-0086" num="0080">Keypad (<b>656</b>) may comprise any input device arranged to receive input from a user. Illuminator (<b>658</b>) may provide a status indication or provide light.</p><p id="p-0087" num="0081">The computing device (<b>600</b>) also comprises input/output interface (<b>660</b>) for communicating with external devices, using communication technologies, such as USB, infrared, Bluetooth&#x2122;, or the like. The haptic interface (<b>662</b>) provides tactile feedback to a user of the client device.</p><p id="p-0088" num="0082">Optional GPS transceiver (<b>664</b>) can determine the physical coordinates of the computing device (<b>600</b>) on the surface of the Earth, which typically outputs a location as latitude and longitude values. GPS transceiver (<b>664</b>) can also employ other geo-positioning mechanisms, including, but not limited to, triangulation, assisted GPS (AGPS), E-OTD, CI, SAI, ETA, BSS, or the like, to further determine the physical location of the computing device (<b>600</b>) on the surface of the Earth. In one embodiment, however, the computing device (<b>600</b>) may through other components, provide other information that may be employed to determine a physical location of the device, including, for example, a MAC address, Internet Protocol (IP) address, or the like.</p><p id="p-0089" num="0083">Mass memory (<b>630</b>) includes a RAM (<b>632</b>), a ROM (<b>634</b>), and other storage means. Mass memory (<b>630</b>) illustrates another example of computer storage media for storage of information such as computer-readable instructions, data structures, program modules, or other data. Mass memory (<b>630</b>) stores a basic input/output system (&#x201c;BIOS&#x201d;) (<b>640</b>) for controlling the low-level operation of the computing device (<b>600</b>). The mass memory also stores an operating system (<b>641</b>) for controlling the operation of the computing device (<b>600</b>).</p><p id="p-0090" num="0084">Applications (<b>642</b>) may include computer-executable instructions which, when executed by the computing device (<b>600</b>), perform any of the methods (or portions of the methods) described previously in the description of the preceding Figures. In some embodiments, the software or programs implementing the method embodiments can be read from hard disk drive (not illustrated) and temporarily stored in RAM (<b>632</b>) by CPU (<b>622</b>). CPU (<b>622</b>) may then read the software or data from RAM (<b>632</b>), process them, and store them to RAM (<b>632</b>) again.</p><p id="p-0091" num="0085">The disclosure includes various devices which perform the methods and implement the systems described above, including data processing systems which perform these methods, and computer readable media containing instructions which when executed on data processing systems cause the systems to perform these methods.</p><p id="p-0092" num="0086">The description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding. However, in certain instances, well-known or conventional details are not described in order to avoid obscuring the description. References to one or an embodiment in the present disclosure are not necessarily references to the same embodiment; and, such references mean at least one.</p><p id="p-0093" num="0087">Reference in this specification to &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase &#x201c;in one embodiment&#x201d; in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover, various features are described which may be exhibited by some embodiments and not by others. Similarly, various requirements are described which may be requirements for some embodiments but not other embodiments.</p><p id="p-0094" num="0088">In this description, various functions and operations may be described as being performed by or caused by software code to simplify description. However, those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the code by one or more processors, such as a microprocessor, Application-Specific Integrated Circuit (ASIC), graphics processor, and/or a Field-Programmable Gate Array (FPGA). Alternatively, or in combination, the functions and operations can be implemented using special purpose circuitry (e.g., logic circuitry), with or without software instructions. Embodiments can be implemented using hardwired circuitry without software instructions, or in combination with software instructions. Thus, the techniques are not limited to any specific combination of hardware circuitry and software, nor to any particular source for the instructions executed by a computing device.</p><p id="p-0095" num="0089">While some embodiments can be implemented in fully functioning computers and computer systems, various embodiments are capable of being distributed as a computing product in a variety of forms and are capable of being applied regardless of the particular type of machine or computer-readable media used to actually effect the distribution.</p><p id="p-0096" num="0090">At least some aspects disclosed can be embodied, at least in part, in software. That is, the techniques may be carried out in a computing device or other system in response to its processor, such as a microprocessor, executing sequences of instructions contained in a memory, such as ROM, volatile RAM, non-volatile memory, cache or a remote storage device.</p><p id="p-0097" num="0091">Routines executed to implement the embodiments may be implemented as part of an operating system, middleware, service delivery platform, SDK (Software Development Kit) component, web services, or other specific application, component, program, object, module or sequence of instructions referred to as &#x201c;computer programs.&#x201d; Invocation interfaces to these routines can be exposed to a software development community as an API (Application Programming Interface). The computer programs typically comprise one or more instructions set at various times in various memory and storage devices in a computer, and that, when read and executed by one or more processors in a computer, cause the computer to perform operations necessary to execute elements involving the various aspects.</p><p id="p-0098" num="0092">A machine-readable medium can be used to store software and data which when executed by a computing device causes the device to perform various methods. The executable software and data may be stored in various places including, for example, ROM, volatile RAM, non-volatile memory and/or cache. Portions of this software and/or data may be stored in any one of these storage devices. Further, the data and instructions can be obtained from centralized servers or peer to peer networks. Different portions of the data and instructions can be obtained from different centralized servers and/or peer to peer networks at different times and in different communication sessions or in a same communication session. The data and instructions can be obtained in entirety prior to the execution of the applications. Alternatively, portions of the data and instructions can be obtained dynamically, just in time, when needed for execution. Thus, it is not required that the data and instructions be on a machine-readable medium in entirety at a particular instance of time.</p><p id="p-0099" num="0093">Examples of computer-readable media include but are not limited to recordable and non-recordable type media such as volatile and non-volatile memory devices, read only memory (ROM), random access memory (RAM), flash memory devices, solid-state drive storage media, removable disks, magnetic disk storage media, optical storage media (e.g., Compact Disk Read-Only Memory (CD ROMs), Digital Versatile Disks (DVDs), etc.), among others. The computer-readable media may store the instructions.</p><p id="p-0100" num="0094">In general, a tangible or non-transitory machine-readable medium includes any mechanism that provides (e.g., stores) information in a form accessible by a machine (e.g., a computer, mobile device, network device, personal digital assistant, manufacturing tool, any device with a set of one or more processors, etc.).</p><p id="p-0101" num="0095">In various embodiments, hardwired circuitry may be used in combination with software and firmware instructions to implement the techniques. Thus, the techniques are neither limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by a computing device.</p><p id="p-0102" num="0096">Various embodiments set forth herein can be implemented using a wide variety of different types of computing devices. As used herein, examples of a &#x201c;computing device&#x201d; include, but are not limited to, a server, a centralized computing platform, a system of multiple computing processors and/or components, a mobile device, a user terminal, a vehicle, a personal communications device, a wearable digital device, an electronic kiosk, a general purpose computer, an electronic document reader, a tablet, a laptop computer, a smartphone, a digital camera, a residential domestic appliance, a television, or a digital music player. Additional examples of computing devices include devices that are part of what is called &#x201c;the internet of things&#x201d; (IOT). Such &#x201c;things&#x201d; may have occasional interactions with their owners or administrators, who may monitor the things or modify settings on these things. In some cases, such owners or administrators play the role of users with respect to the &#x201c;thing&#x201d; devices. In some examples, the primary mobile device (e.g., an Apple iPhone) of a user may be an administrator server with respect to a paired &#x201c;thing&#x201d; device that is worn by the user (e.g., an Apple watch).</p><p id="p-0103" num="0097">In some embodiments, the computing device can be a computer or host system, which is implemented, for example, as a desktop computer, laptop computer, network server, mobile device, or other computing device that includes a memory and a processing device. The host system can include or be coupled to a memory sub-system so that the host system can read data from or write data to the memory sub-system. The host system can be coupled to the memory sub-system via a physical host interface. In general, the host system can access multiple memory sub-systems via a same communication connection, multiple separate communication connections, and/or a combination of communication connections.</p><p id="p-0104" num="0098">In some embodiments, the computing device is a system including one or more processing devices. Examples of the processing device can include a microcontroller, a central processing unit (CPU), special purpose logic circuitry (e.g., a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), etc.), a system on a chip (SoC), or another suitable processor.</p><p id="p-0105" num="0099">Although some of the drawings illustrate a number of operations in a particular order, operations which are not order dependent may be reordered and other operations may be combined or broken out. While some reordering or other groupings are specifically mentioned, others will be apparent to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover, it should be recognized that the stages could be implemented in hardware, firmware, software or any combination thereof.</p><p id="p-0106" num="0100">In the foregoing specification, the disclosure has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>storing a plurality of activation codes, each of the plurality of activation codes associated with a respective unique identifier (UID) of semiconductor device;</claim-text><claim-text>receiving, over a network, a request including a response code;</claim-text><claim-text>generating a new storage root key (SRK) for a given semiconductor device using the response code and a corresponding activation code; and</claim-text><claim-text>associating the new SRK with a corresponding UID and storing the SRK.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising storing at least one customer authentication key (CAK), the CAK associated with at least one activation code and a corresponding UID.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>receiving a request for a message authentication code (MAC), the request including the corresponding UID and a command;</claim-text><claim-text>identifying the at least one CAK based on the corresponding UID;</claim-text><claim-text>generating the MAC using a hash-based MAC (HMAC) function, wherein the CAK is used as a key of the HMAC function and the command is used as a message of the HMAC function; and</claim-text><claim-text>returning the MAC in response to the request.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, the command including a customer identifier (CID) and a nonce value.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>transmitting a request for an activation code database to a key management server (KMS);</claim-text><claim-text>receiving, in response to the request, the activation code database, the activation code database comprising the plurality of activation codes; and</claim-text><claim-text>storing the activation code database in a hardware security module.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the SRK comprises generating a MAC via an HMAC function.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein generating the MAC further comprises using the response code as a key of the HMAC function and an activation code as a message of the HMAC function.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory computer-readable storage medium for tangibly storing computer program instructions capable of being executed by a computer processor, the computer program instructions defining steps of:<claim-text>storing a plurality of activation codes, each of the plurality of activation codes associated with a respective unique identifier (UID) of semiconductor device;</claim-text><claim-text>receiving, over a network, a request including a response code;</claim-text><claim-text>generating a new storage root key (SRK) for a given semiconductor device using the response code and a corresponding activation code; and</claim-text><claim-text>associating the new SRK with a corresponding UID and storing the SRK.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, the steps further comprising storing at least one customer authentication key (CAK), the CAK associated with at least one activation code and a corresponding UID.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, the steps further comprising:<claim-text>receiving a request for a message authentication code (MAC), the request including the corresponding UID and a command;</claim-text><claim-text>identifying the at least one CAK based on the corresponding UID;</claim-text><claim-text>generating the MAC using a hash-based MAC (HMAC) function, wherein the CAK is used as a key of the HMAC function and the command is used as a message of the HMAC function; and</claim-text><claim-text>returning the MAC in response to the request.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, the command including a customer identifier (CID) and a nonce value.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, the steps further comprising:<claim-text>transmitting a request for an activation code database to a key management server (KMS);</claim-text><claim-text>receiving, in response to the request, the activation code database, the activation code database comprising the plurality of activation codes; and</claim-text><claim-text>storing the activation code database in a hardware security module.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein generating the SRK comprises generating a MAC via an HMAC function.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein generating the MAC further comprises using the response code as a key of the HMAC function and an activation code as a message of the HMAC function.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A device comprising:<claim-text>a processor; and</claim-text><claim-text>a storage medium for tangibly storing thereon logic for execution by the processor, the logic comprising instructions for:<claim-text>storing a plurality of activation codes, each of the plurality of activation codes associated with a respective unique identifier (UID) of semiconductor device;</claim-text><claim-text>receiving, over a network, a request including a response code;</claim-text><claim-text>generating a new storage root key (SRK) for a given semiconductor device using the response code and a corresponding activation code; and</claim-text><claim-text>associating the new SRK with a corresponding UID and storing the SRK.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the instructions further comprising storing at least one customer authentication key (CAK), the CAK associated with at least one activation code and a corresponding UID.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, the instructions further comprising:<claim-text>receiving a request for a message authentication code (MAC), the request including the corresponding UID and a command;</claim-text><claim-text>identifying the at least one CAK based on the corresponding UID;</claim-text><claim-text>generating the MAC using a hash-based MAC (HMAC) function, wherein the CAK is used as a key of the HMAC function and the command is used as a message of the HMAC function; and</claim-text><claim-text>returning the MAC in response to the request.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The device of <claim-ref idref="CLM-00017">claim 17</claim-ref>, the command including a customer identifier (CID) and a nonce value.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the instructions further comprising:<claim-text>transmitting a request for an activation code database to a key management server (KMS);</claim-text><claim-text>receiving, in response to the request, the activation code database, the activation code database comprising the plurality of activation codes; and</claim-text><claim-text>storing the activation code database in a hardware security module.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein generating the SRK comprises generating a MAC via an HMAC function.</claim-text></claim></claims></us-patent-application>