<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006930A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006930</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17573187</doc-number><date>20220111</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>TW</country><doc-number>110124339</doc-number><date>20210702</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>7453</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>2475</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>7453</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>2475</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHOD AND SYSTEM FOR PROCESSING DATA FLOW WITH INCOMPLETE COMPARISON PROCESS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>REALTEK SEMICONDUCTOR CORP.</orgname><address><city>Hsinchu</city><country>TW</country></address></addressbook><residence><country>TW</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>LU</last-name><first-name>KUO-CHENG</first-name><address><city>HSINCHU</city><country>TW</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method and a system for processing a data flow with an incomplete comparison process are provided. The method is implemented by a network device that includes a flow table and a flow filter in a memory thereof. A flow analyzing module is provided for analyzing and classifying packets of an input flow, and identifying an application category to which the input flow belongs. The flow table is queried according to a result of resolving the input flow for determining whether the input flow matches any flow entry of the flow table. The flow filter is queried if the input flow fails to match any flow entry of the flow table for determining whether features of the input flow match conditions of the flow filter. The input flow is processed accordingly, without needing to copy all flows that do not match the flow entries to the flow table.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="75.52mm" wi="158.75mm" file="US20230006930A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="232.58mm" wi="118.45mm" orientation="landscape" file="US20230006930A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="215.22mm" wi="97.79mm" orientation="landscape" file="US20230006930A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="124.29mm" wi="107.27mm" orientation="landscape" file="US20230006930A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.66mm" wi="137.58mm" orientation="landscape" file="US20230006930A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="125.22mm" wi="152.48mm" orientation="landscape" file="US20230006930A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="122.68mm" wi="75.01mm" orientation="landscape" file="US20230006930A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="133.86mm" wi="59.35mm" orientation="landscape" file="US20230006930A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="175.43mm" wi="90.93mm" orientation="landscape" file="US20230006930A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="115.23mm" wi="85.34mm" orientation="landscape" file="US20230006930A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED PATENT APPLICATION</heading><p id="p-0002" num="0001">This application claims the benefit of priority to Taiwan Patent Application No. 110124339, filed on Jul. 2, 2021. The entire content of the above identified application is incorporated herein by reference.</p><p id="p-0003" num="0002">Some references, which may include patents, patent applications and various publications, may be cited and discussed in the description of this disclosure. The citation and/or discussion of such references is provided merely to clarify the description of the present disclosure and is not an admission that any such reference is &#x201c;prior art&#x201d; to the disclosure described herein. All references cited and discussed in this specification are incorporated herein by reference in their entireties and to the same extent as if each reference was individually incorporated by reference.</p><heading id="h-0002" level="1">FIELD OF THE DISCLOSURE</heading><p id="p-0004" num="0003">The present disclosure relates to a technique for processing a data flow, and more particularly to a method and a system for processing a data flow with an incomplete comparison process, so as to reduce a processing load.</p><heading id="h-0003" level="1">BACKGROUND OF THE DISCLOSURE</heading><p id="p-0005" num="0004">In the pursuit of differentiation in network equipment, demands for identifying network traffic types, improving quality of service (QoS), and/or improving network security have become increasingly important in recent years. For example, if a network switch can identify the difference of video conference traffic and file transfer traffic, the quality of service can be adapted accordingly. That is, the traffic of video conferencing can be prioritized, so as to improve a user experience. In one further example, if the network switch can identify behavior of malicious application traffic, e.g., a Trojan program, information-security vulnerabilities can be fixed at an earliest opportunity.</p><p id="p-0006" num="0005">The capability of identifying network traffic types has always been a major issue. Conventionally, a network operator is able to set up priorities of ports with respect to various network protocols. For example, the ports with respect to a transmission control protocol (TCP) or a user datagram protocol (UDP) can be assigned with a high priority or a low priority. However, these requirements can result in user inconvenience and a user threshold. Furthermore, since more and more applications use dynamic TCP or UDP port numbers, more and more applications are performed behind the known TCP or UDP port numbers, or are transmitted under encryption, identification of network traffic can be difficult to achieve.</p><p id="p-0007" num="0006">To solve the above problems, a conventional method for identifying the network traffic based on flow features has been developed. Said method can identify a flow type according to headers of first few (N) packets of each data flow and statistical features. The statistical features are, for example, a length of every one-way or two-way packet, a length average of the packet, a packet spacing, a variance of packet length, a spacing average between packets, and a variance of packet spacing. Thus, based on the above-mentioned features of the first few packets of each data flow, the conventional technology classifies the flow types through machine learning or deep learning technology.</p><p id="p-0008" num="0007">To achieve the purpose of inspecting the first few packets of each data flow, reference can be made to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, which is a schematic diagram showing the data flow being processed in the network switch. The network switch receives an input flow <b>10</b> and resolves the input flow <b>10</b> by a processor, so as to form a forwarding table <b>12</b>. The present example shows a port (port=Y) specified to a media access control (MAC) destination in the forwarding table <b>12</b>. The network switch has a flow table used to record each data flow that passes the network switch. As shown in the diagram, a 5-tuple <b>14</b> denotes a header of a data flow. This 5-tuple is configured to include DIP, SIP, SP, DP and Prot that stand for a destination IP, a source IP, a source Layer 4 port, a destination Layer 4 port and a protocol, respectively. The 5-tuple <b>14</b> in this exemplary example records the headers of two data flows at different states.</p><p id="p-0009" num="0008">In the network switch, the flow table (such as the 5-tuple <b>14</b>) is queried when network packets are received. If a flow entry corresponding to the data flow is not found in the flow table (meaning that the data flow is a new data flow), the flow entry of this data flow is then copied to a flow analyzing module <b>18</b> via a flow direction <b>101</b>. The flow analyzing module <b>18</b> is a software module that is able to analyze and classify the network packets, so as to identify which application category the data flow belongs to. When the flow analyzing module <b>18</b> receives the first few packets of the data flow, an algorithm of flow identification is performed. After identification, the data flow can then be inserted to the flow table of the network switch via a flow direction <b>103</b>, and a classification result is labeled into the flow entry. After that, when the packets of this data flow enter the network switch again, the data flow can be found in the flow table, and the data flow needs not to be processed by the flow analyzing module <b>18</b>. The data flow is then forwarded as an output flow <b>16</b> according to a destination record in the flow table.</p><p id="p-0010" num="0009">However, according to the above technology, each data flow entering the network switch needs to be processed, and all the data flows are required to be recorded in the flow table. Any new data flow also needs to be copied to the flow analyzing module <b>18</b>, and then inserted to the flow table. The drawback of the conventional technology is that a processing circuitry (such as an application-specific integrated circuit (ASIC)) of the network switch requires an adequate space to store a large amount of data flow records, which is generally around 100K entries. The space is relatively large as compared to the data flows that are of concern to a user. Further, the packets of the new data flow will be copied to the flow analyzing module <b>18</b>, and additional processing is required. Still further, even if the flow analyzing module <b>18</b> only requires the first few packets of the data flow, due to a processing time difference, the data flow that is classified may not be returned to the flow table in time, and an extra processing load can occur in the flow analyzing module <b>18</b> when the packets required to be processed in the flow analyzing module <b>18</b> exceeds an amount originally required to be processed.</p><heading id="h-0004" level="1">SUMMARY OF THE DISCLOSURE</heading><p id="p-0011" num="0010">In response to the above-referenced technical inadequacies (such as a processing circuit of a network switch requiring a large amount of memory space to store data flow records and an extra processing load is generated when the processing circuit processes incoming packets), the present disclosure provides a method and a system for processing a data flow with an incomplete comparison process. In the method, by use of a packet filtering mechanism and an incomplete comparison table, the memory space required for storing a flow table can be reduced, and a load caused by analyzing the data flow can also be mitigated.</p><p id="p-0012" num="0011">In one aspect, the system can be disposed in a network device. The network device includes a memory that stores a flow table, a flow filter and a flow analyzing module which is implemented by software or with hardware. The flow analyzing module is used to analyze and classify a plurality of packets of an input flow, and then identify an application category the input flow belongs to.</p><p id="p-0013" num="0012">In the method, the processing circuit receives the input flow and resolves the input flow, and queries the flow table according to a result by resolving the input flow so as to determine whether or not the input flow matches any flow entry of the flow table. In addition, when the input flow does not match any flow entry of the flow table, the processing circuit queries the flow filter for determining whether or not the input flow matches any filtering condition of the flow filter.</p><p id="p-0014" num="0013">According to another result of querying the flow table and the flow filter, one of the following steps can be performed. When the input flow matches any flow entry of the flow table, a corresponding processing policy is applied. Otherwise, when the input flow does not match any flow entry of the flow table, the flow filter is queried again for determining whether or not the input flow matches any filtering condition of the flow filter. When the input flow matches any filtering condition of the flow filter, the input flow is confirmed to be present in the flow table and includes the plurality of packets, and an action is to be performed according to a procedure setting by the network device. Further, when the input flow does not match any filtering condition of the flow filter, which means that the input flow does not match any flow entry of the flow table or any filtering condition of the flow filter, the input flow is then directed to the flow analyzing module for further processing.</p><p id="p-0015" num="0014">Preferably, the system implements a data processing circuit of a network switch for processing the data flow in the network switch.</p><p id="p-0016" num="0015">Moreover, the flow table is adapted to all types of the data flow. When the input flow matches any flow entry of the flow table, the system performs one of the following processing policies: setting the input flow as a high priority and forwarding the input flow to a destination port; dropping (discarding) the input flow; and copying the input flow to the flow analyzing module, and then forwarding the input flow to the destination port.</p><p id="p-0017" num="0016">Further, the flow table records a 5-tuple of a header of the data flow, and the processing policies that correspond to the flow entries. The 5-tuple includes a destination IP address, a source IP address, a destination Layer 4 port, a source Layer 4 port and a communication protocol.</p><p id="p-0018" num="0017">Preferably, the flow filter implements an incomplete comparison table used to query a connection-oriented flow by a Bloom filter. The Bloom filter performs k times of hash calculations on the input flow for obtaining a hash value so as to determine whether or not the input flow corresponds to k one-bit entries in the Bloom filter.</p><p id="p-0019" num="0018">Furthermore, when the input flow is a first packet of the connection-oriented flow, and the first packet does not match any flow entry of the flow table by querying the flow table, the first packet is directed to the flow analyzing module. The flow analyzing module analyzes and classifies the first N packets, and then identifies the application category the first packet belongs to. After the application category of the first packet is identified, the first packet is forwarded to a destination address recorded in a header of the first packet according to a procedure setting in the network device. When it is determined that the input flow encounters aliasing in the flow filter, the flow analyzing module will insert the input flow into the flow table in advance and set up a corresponding processing policy according to the application category the input flow belongs to.</p><p id="p-0020" num="0019">Still further, when it is determined that the input flow matches one filtering condition of the flow filter, the input flow is written into the flow filter, and the input flow that was inserted to the flow table in advance for avoiding the aliasing is removed.</p><p id="p-0021" num="0020">In an aspect of the present disclosure, the system for processing the data flow with an incomplete comparison process can be disposed in a network device. The network device includes a memory that stores a flow table, a flow filter and a flow analyzing module which is implemented by software or with hardware. The flow analyzing module is used to analyze and classify packets of the input flow, and then identify the application category the input flow belongs to.</p><p id="p-0022" num="0021">In the method, the processing circuit receives an input flow and resolves the input flow, and queries a flow table according to a result by resolving the input flow so as to determine whether or not the input flow matches any flow entry of the flow table. In addition, the processing circuit queries the flow filter for determining whether or not the input flow matches any filtering condition of the flow filter when the input flow does not match any flow entry of the flow table.</p><p id="p-0023" num="0022">According to the result by querying the flow table and the flow filter, one of the following steps can be performed. When the input flow matches any flow entry of the flow table, a corresponding processing policy is applied. Otherwise, when the input flow does not match any flow entry of the flow table, the flow filter is queried again for determining whether or not the input flow matches any filtering condition of the flow filter. When the input flow matches any filtering condition of the flow filter, it is confirmed that the input flow exists in the flow table and includes multiple packets, and an action is performed according to a procedure setting by the network device. Further, when the input flow does not match any filtering condition of the flow filter, it indicates that the input flow does not match any flow entry and the flow table or any filtering condition of the flow filter. The input flow is directed to the flow analyzing module for further processing the input flow.</p><p id="p-0024" num="0023">Preferably, the system for processing the data flow implements a data processing circuit of a network switch for processing the data flows in the network switch.</p><p id="p-0025" num="0024">More, the flow table is adapted to all types of the data flows. When the input flow matches any flow entry of the flow table, the system performs one of processing policies including: setting the input flow as a high priority and forwarding the input flow to a destination port; dropping the input flow; and copying the input flow to the flow analyzing module, and then forwarding the input flow to the destination port.</p><p id="p-0026" num="0025">Further, the flow table records a 5-tuple in a header of the data flow, and multiple processing policies corresponding to multiple flow entries. The 5-tuple includes a destination IP address, a source IP address, a destination Layer 4 port, a source Layer 4 port and a communication protocol.</p><p id="p-0027" num="0026">Preferably, the flow filter implements an incomplete comparison table used to query a connection-oriented flow by a Bloom filter. The Bloom filter performs k times of hash calculations on the input flow for obtaining a hash value so as to determine whether or not the input flow corresponds to k one-bit entries in the Bloom filter.</p><p id="p-0028" num="0027">Furthermore, when the input flow is a first packet of a connection-oriented flow, and the first packet does not match any flow entry of the flow table by querying the flow table, the first packet is directed to the flow analyzing module. The flow analyzing module analyzes and classifies the multiple first packets, and then identifies the application category the first packet belongs to. Afterwards, the first packet is forwarded to a destination address recorded in a header of the first packet according to a procedure setting in the network device. When it is determined that the input flow encounters aliasing in the flow filter, the flow analyzing module will insert the input flow into the flow table in advance and set up a processing policy according to the application category the input flow belongs to.</p><p id="p-0029" num="0028">Still further, when it is determined that the input flow matches one filtering condition of the flow filter, the input flow is written into the flow filter, and the input flow that was inserted to the flow table in advance for avoiding the aliasing is removed.</p><p id="p-0030" num="0029">These and other aspects of the present disclosure will become apparent from the following description of the embodiment taken in conjunction with the following drawings and their captions, although variations and modifications therein may be affected without departing from the spirit and scope of the novel concepts of the disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0031" num="0030">The described embodiments may be better understood by reference to the following description and the accompanying drawings, in which:</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram showing a data flow being processed in a conventional network switch;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram depicting an exemplary example of a Bloom filter;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic diagram depicting the Bloom filter that adopts parallel k hash tables;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram depicting a framework of a system for processing the data flow with a flow filter according to one embodiment of the present disclosure;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow chart describing a method for processing the data flow with an incomplete comparison process by use of the Bloom filter according to one embodiment of the present disclosure;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow chart describing a process for processing a first packet of the data flow according to one embodiment of the present disclosure;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow chart describing a process for processing the data flow that experiences aliasing in the flow filter according to one embodiment of the present disclosure;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flow chart describing operation of a flow analyzing module in the method for processing the data flow according to one embodiment of the present disclosure; and</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is another flow chart describing the operation of the flow analyzing module in the method for processing the data flow according to one embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE EXEMPLARY EMBODIMENTS</heading><p id="p-0041" num="0040">The present disclosure is more particularly described in the following examples that are intended as illustrative only since numerous modifications and variations therein will be apparent to those skilled in the art. Like numbers in the drawings indicate like components throughout the views. As used in the description herein and throughout the claims that follow, unless the context clearly dictates otherwise, the meaning of &#x201c;a&#x201d;, &#x201c;an&#x201d;, and &#x201c;the&#x201d; includes plural reference, and the meaning of &#x201c;in&#x201d; includes &#x201c;in&#x201d; and &#x201c;on&#x201d;. Titles or subtitles can be used herein for the convenience of a reader, which shall have no influence on the scope of the present disclosure.</p><p id="p-0042" num="0041">The terms used herein generally have their ordinary meanings in the art. In the case of conflict, the present document, including any definitions given herein, will prevail. The same thing can be expressed in more than one way. Alternative language and synonyms can be used for any term(s) discussed herein, and no special significance is to be placed upon whether a term is elaborated or discussed herein. A recital of one or more synonyms does not exclude the use of other synonyms. The use of examples anywhere in this specification including examples of any terms is illustrative only, and in no way limits the scope and meaning of the present disclosure or of any exemplified term. Likewise, the present disclosure is not limited to various embodiments given herein. Numbering terms such as &#x201c;first&#x201d;, &#x201c;second&#x201d; or &#x201c;third&#x201d; can be used to describe various components, signals or the like, which are for distinguishing one component/signal from another one only, and are not intended to, nor should be construed to impose any substantive limitations on the components, signals or the like.</p><p id="p-0043" num="0042">The present disclosure provides a method and a system for processing a data flow with an incomplete comparison process. The method is based on an incomplete comparison table, and a flow filter (e.g., a Bloom filter) is used in the process. One of the advantages of the method is that, issues such as a large amount of memory space and an extra processing load being required to process the data flow can be prevented. According to one embodiment of the present disclosure, the Bloom filter is a probabilistic data structure that occupies a relatively small memory space and allows the system to quickly verify whether or not each of the data flows exists in the flow table.</p><p id="p-0044" num="0043">In the method for processing the data flow, one of the technical concepts is to adopt both the incomplete comparison table and a conventional flow table that operates a complete comparison process. In the method, a data flow header (such as a 5-tuple <b>14</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) is queried, so as to reduce a size of the complete comparison table. An overall system cost can also be reduced.</p><p id="p-0045" num="0044">The incomplete comparison table only stores a feature of the data flow when the data flow is required to be recorded in the incomplete comparison table. The feature can be data, digest or a hash value that is generated when the data flow is compressed. A space used for the incomplete comparison table is much smaller than the space required by the complete comparison table since the incomplete comparison table needs not to store the whole data flow. However, the incomplete comparison table may still need to solve an aliasing problem. For example, when the table is queried, the data flow that is not present in the table is falsely determined as being present in the table.</p><p id="p-0046" num="0045">Therefore, in the present disclosure, the method for processing the data flow with the incomplete comparison process by use of the flow filter is provided. The flow filter embodies the incomplete comparison table. The flow filter can be a Bloom filter that is designed to have a compact k-times hash table structure. The theory of the flow filter is that k times of hash calculations map an element to k points in a bit array when the element is added to a set that implements a lookup table. These k points are set as 1. When the data flow is being filtered, whether the data flow is included in the set can be determined by only checking whether all the k points that map the k times of hash calculations are 1. If any of the k points is found to be 0, the data flow is determined not to be in the set. On the other hand, if all the k points are 1, the data flow is determined to be in the set.</p><p id="p-0047" num="0046">In the method for processing the data flow with the incomplete comparison process by use of the Bloom filter, when the data flow is inserted to the Bloom filter, positions with respect to 1 bit width of flow entry mapping to k hash values of the data flow are initially set as 1. When querying the data flow in the Bloom filter for ensuring whether the data flow has been inserted to the Bloom filter, if k 1-bit entries mapping the k hash values of the data flow are 1, the k 1-bit entries meet the k hash values in the Bloom filter. The data flow that meets the Bloom filter is filtered out, and the data flow is determined to have been inserted to the Bloom filter; otherwise, no data flow is filtered out by the Bloom filter.</p><p id="p-0048" num="0047">For example, referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, an exemplary Bloom filter is shown. A bit array <b>20</b> is provided, and a data set {x, y, z} forms a filter. In an example where k=3, 3 times hash calculations are performed on each of the elements of the data set {x, y, z}, and used as a feature with respect to each of the elements. In the present example, the position being designated to each of the elements of the data set is set as 1. The element &#x201c;x&#x201d; of the data set has three connections respectively indicative of designating three bits with value &#x201c;1&#x201d; in the bit array <b>20</b>. The element &#x201c;y&#x201d; of the data set also has three connections respectively indicative of designating another three bits with value &#x201c;1&#x201d; in the bit array <b>20</b>. Further, the element &#x201c;z&#x201d; of the data set has three connections respectively indicative of designating yet another three bits with value &#x201c;1&#x201d; in the bit array <b>20</b>. These connections between the elements of the data set {x, y, z} and the bit array <b>20</b> form a Bloom filter.</p><p id="p-0049" num="0048">Using an input data &#x201c;w&#x201d; as an example, features with respect to the data &#x201c;w&#x201d; are calculated, and mapped to some bits of the bit array <b>20</b>. The example shows that one of the bits mapped to the features of the data &#x201c;w&#x201d; is 0, which means that the data &#x201c;w&#x201d; is not within the data set {x, y, z} since not all values of the bits mapped to the features of the data &#x201c;w&#x201d; are 1. The present example exemplifies the Bloom filter used in the method for processing the data flow with the incomplete comparison process.</p><p id="p-0050" num="0049">Reference is made to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, which is a schematic diagram depicting the Bloom filter that adopts parallel k hash tables according to one embodiment of the present disclosure. In the Bloom filter, k times of hash calculations are performed on a 5-tuple <b>30</b> of an input flow, and a hash table with a value k (k=4, i.e., hash 0, hash 1, hash 2 and hash 3) is obtained. The Bloom filter is able to filter out k features of the data flow. The k times of hash calculations performed on the input flow map to a flow entry with a 1-bit width which is set as 1. The k times of hash calculations act as features which are calculated from the 5-tuple of the input flow. To the various hash values, the Bloom filter with k parallel hash tables is used for determining whether or not the input flow exists in the incomplete comparison table.</p><p id="p-0051" num="0050">Reference is made to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, which is a schematic diagram depicting a framework of a system for processing the data flow with the flow filter. The system for processing the data flow embodies a data processing circuit of a network device, e.g., a data processing circuit of a network switch. The data processing circuit performs the method for processing the data flow with the incomplete comparison process in the network switch.</p><p id="p-0052" num="0051">In the framework of the system for processing the data flow in the network switch, the system resolves an input flow <b>40</b> when the system receives the input flow <b>40</b>. A header is resolved and then transmitted to a forwarding table <b>42</b>. The forwarding table <b>42</b> is used to record a media access control (MAC) address in layer 2 (L2) or an IP address in layer 3 (L3) according to a network communication protocol with respect to the data flow. The forwarding table <b>42</b> records a destination MAC address (DMAC) and a destination port (Port=Y) of the input flow <b>40</b>.</p><p id="p-0053" num="0052">After resolving the input flow <b>40</b>, the data of the data flow is also submitted to a flow table <b>44</b> implemented by a memory <b>400</b> of the system (i.e., the data processing circuit), and a flow filter <b>45</b>. According to one embodiment of the present disclosure, the flow table <b>44</b> records 5-tuple data obtained from headers of multiple data flows. The 5-tuple data is, for example, a destination IP address (DIP), a source IP address (SIP), a destination Layer 4 port (DP), a source Layer 4 port (SP), a communication protocol (Prot (Protocol)) and processing policies that correspond to flow entries. When the input flow matches any flow entry of the flow table, one of the processing policies is performed. The processing policies include: setting priority of the input flow, dropping the data flow, copying the data flow to a flow analyzing module. Like the above-mentioned Bloom filter, the flow filter <b>45</b> is used to implement the incomplete comparison table.</p><p id="p-0054" num="0053">The system for processing the data flow sets up the flow table <b>44</b> and the flow filter <b>45</b> in the memory <b>400</b>, and the system also incorporates software or a circuitry to implement a flow analyzing module <b>48</b>. If the input flow <b>40</b> does not match any flow entry of the flow table <b>44</b>, the input flow <b>40</b> is determined as a new data flow, and the input flow <b>40</b> is copied to the flow analyzing module <b>48</b>. In the flow analyzing module <b>48</b>, packets of the input flow <b>40</b> are analyzed and classified, and then an application category that the input flow <b>40</b> belongs to is identified. Afterwards, the packets of the input flow <b>40</b> can be forwarded to a destination with the destination port (port=Y) recorded in the header of the packets according to a procedure setting by a switch or the network device.</p><p id="p-0055" num="0054">The system implements a processing circuit in the network switch. Regarding operations of the system, reference can be made to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, which is a flow chart describing the method for processing the data flow with the incomplete comparison process using a Bloom filter according to one embodiment of the present disclosure.</p><p id="p-0056" num="0055">Along a flow direction <b>401</b> shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the input flow <b>40</b> received by the system can be packets which are formed from a source with port &#x201c;X&#x201d; (port=X) (step S<b>501</b>). Headers of the packets can be extracted by resolving the input flow <b>40</b> (step S<b>503</b>). The forwarding table <b>42</b> records the destination port &#x201c;Y&#x201d; (port=Y). After that, the system queries the flow table <b>44</b> and the flow filter <b>45</b>, and one of the following steps is performed according to a query result. It should be noted that the flow table <b>44</b> is adapted to all types of the data flow, and the flow filter <b>45</b> is used to check a connection-oriented flow.</p><p id="p-0057" num="0056">Based on a result of resolving the input flow, the system queries the flow table <b>44</b> (along a flow direction <b>403</b>, step S<b>505</b>). During a querying process, the system determines whether or not the features of the input flow <b>40</b> match any flow entry (step S<b>507</b>). If the features of the input flow <b>40</b> match any one of the flow entries in the flow table <b>44</b>, a corresponding processing policy is applied to the input flow <b>40</b>. For example, when the input flow matches any flow entry of the flow table, one of the following processing policies is performed: setting the input flow as a high priority (or a low priority) and forwarding the input flow to a destination port; dropping the input flow; and copying the input flow to the flow analyzing module, and forwarding the input flow to the destination port. In step S<b>515</b>, the data flow is forwarded to the destination port, e.g., port=Y (along a flow direction <b>413</b>). Otherwise, the input flow <b>40</b> will be dropped according to another processing policy, or copied to the flow analyzing module <b>48</b> (step S<b>517</b>). Apart from the processes of analyzing, classifying and identifying the packets, the packets are also forwarded (step S<b>515</b>).</p><p id="p-0058" num="0057">However, if the input flow <b>40</b> does not match any flow entry of the flow table <b>44</b>, the flow filter <b>45</b> is queried according to the result by resolving the input flow <b>45</b> (along a flow direction <b>405</b>, step S<b>511</b>) for determining whether or not the input flow <b>40</b> matches any filtering condition of the flow filter <b>45</b>. Using the Bloom filter as an example, the Bloom filter performs k times of hash calculations on the 5-tuple of the input flow for obtaining k hash values that are used as the feature of the input flow. Accordingly, the feature is used to determine whether or not the input flow matches the k one-bit entries in the Bloom filter (step S<b>513</b>). If the query result indicates that the input flow <b>40</b> matches one of the filtering conditions, there is no need to perform any additional action, but only to perform an action originally set in the network device (i.e., the network switch) since the input flow <b>40</b> already exists and has transmitted multiple packets. For example, according to a procedure set in the network device, the input flow is forwarded to the destination port Y (port=Y) (step S<b>515</b>), so as to form an output flow <b>46</b>. However, if the input flow <b>40</b> does not match any filtering condition of the flow filter <b>45</b> according to the query result, which means that the input flow <b>40</b> does not match any filtering condition set in the flow table and the flow filter, the input flow is then directed to the flow analyzing module for processing the data flow (along a flow direction <b>407</b>, step S<b>517</b>). In the meantime, the input flow <b>40</b> can also be forwarded to a destination port, so that the output flow <b>46</b> is formed according to the original procedure set in the network device that applies the method for processing the data flow of the present disclosure.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a flow chart describing a process for processing a first packet of the data flow according to one embodiment of the present disclosure. The process is operated in the flow filter. In particular, a communication session will be established before data transmission since the data flow to be processed in the process is a connection-oriented flow. For example, the connection-oriented flow can be a data flow under a transmission control protocol (TCP). In other words, the flow filter will not process a non-connection-oriented flow, such as the data flow under a user datagram protocol (UDP).</p><p id="p-0060" num="0059">In the present embodiment of the present disclosure, the process starts when the network device receives the first packet of the connection-oriented flow (step S<b>601</b>). For a TCP data flow, an SYN flag recorded in a header of the first packet is set as 1 and an ACK flag in the header is set as 0. Accordingly, the network device can rely on the SYN/ACK flags to determine the first packet of the input flow. For the first packet, the input flow is a new data flow since the input flow does not match any flow entry of the flow table, and the input flow is directed to the flow analyzing module (along the flow direction <b>407</b>, step S<b>603</b>).</p><p id="p-0061" num="0060">In the meantime, the flow analyzing module analyzes and classifies the packets of the input flow, and then identifies the application category the input flow belongs to (step S<b>605</b>). Next, the flow analyzing module records and analyzes the input flow, and forwards the input flow to the destination port Y (along the flow direction <b>413</b>, step S<b>607</b>) according to the destination information in the header and the procedure setting in the network device. It should be noted that the flow analyzing module acquires the packets of the input flow based on a query result by querying the flow table, and also receives the data flow that does not match any filtering condition of the flow filter. The flow analyzing module analyzes and classifies the input flow and identifies which application category the input flow belongs to.</p><p id="p-0062" num="0061">Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref> (in continuation of <figref idref="DRAWINGS">FIG. <b>6</b></figref>), a flow chart describing a process for processing the data flow that encounters aliasing in the flow filter according to one embodiment of the present disclosure is shown.</p><p id="p-0063" num="0062">When the first packet of the connection-oriented flow is directed to the flow analyzing module, the flow analyzing module determines whether or not the data flow will encounter aliasing in the flow filter, which is also to determine if any conflict occurs to any filtering condition in the flow filter. Using the TCP data flow as an example, the aliasing occurs if the values of k flow entries relating to the data flow are not 0 when receiving the first packet.</p><p id="p-0064" num="0063">Thus, if the input flow is determined as a new data flow and the input flow is determined to encounter aliasing (step S<b>701</b>), the flow analyzing module inserts the input flow to the flow table in advance (along a flow direction <b>409</b>, step S<b>703</b>) and sets up a corresponding processing policy (step S<b>705</b>). For example, in the flow table, a processing policy that copies the new data flow to the flow analyzing module is provided. Except for the first packet of the data flow, the other packets (2nd to N) of the data flow are copied to the flow analyzing module for analysis according to the processing policy in the flow table. The above process can prevent the data flow from being directly forwarded to an output port of the network device merely based on an incorrect determination that the data flow matches any filtering condition of the flow filter.</p><p id="p-0065" num="0064">Reference is made to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, which is a flow chart describing operation of the flow analyzing module in the method for processing the data flow according to one embodiment of the present disclosure. When the flow analyzing module analyzes the first N packets of the received input flow, the flow analyzing module determines the application category of the input flow (step S<b>801</b>) and determines a corresponding processing policy (step S<b>803</b>). For example, the processing policy is to set the input flow as a high priority or drop the packets of the input flow. Afterwards, whether or not the input flow has existed in the flow table (step S<b>805</b>) is to be determined. If the data flow does not exist in the flow table (since no flow entry is matched), the data flow can be inserted into the flow table (step S<b>807</b>). If the data flow has been inserted into the flow table in advance (e.g., step S<b>701</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>) due to the above-mentioned aliasing caused by the conflict in the flow filter, the flow analyzing module can change the original processing policy that is to copy the data flow to the flow analyzing module to an expected final strategy (step S<b>809</b>).</p><p id="p-0066" num="0065">Reference is made to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, which shows another flow chart describing the operation of the flow analyzing module in the method for processing the data flow.</p><p id="p-0067" num="0066">When the network device receives the input flow, the data flow is copied to the flow analyzing module. The flow analyzing module analyzes first N packets to determine the application category of the input flow (step S<b>901</b>), and a corresponding processing policy is obtained (step S<b>903</b>). After a comparison with the filtering conditions of the flow filter, the data flow matching any of the filtering conditions can be written to the flow filter (step S<b>905</b>), and become one of the flow entries in the flow filter.</p><p id="p-0068" num="0067">In the meantime, referring to step S<b>701</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the input flow can be inserted to the flow table in advance for preventing the input flow from an aliasing condition due to the conflict in the flow filter, and the corresponding processing policy is to copy the data flow to the flow table. After step S<b>905</b>, if any data flow is found to match the filtering condition in the flow filter by analyzing N packets, the flow analyzing module removes the data flow that matches the filtering condition from the flow table. The data flow that is removed from the flow table is then written to the flow filter, such as in step S<b>907</b>. The data flow is written to the flow filter along a flow direction <b>411</b> illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0069" num="0068">In summation, in the method and the system for processing the data flow with the incomplete comparison process provided by the present disclosure, both the flow filter (e.g., the Bloom filter) that implements the incomplete comparison process and the flow table that implements the complete comparison process are used. The data flow that matches any filtering condition of the flow filter is inserted to the flow filter. If the received data flow does not match any filtering condition of the flow filter, the data flow is copied to the flow analyzing module, thereby reducing the need for the conventional flow table. This incomplete comparison mechanism allows the flow table to only record the data flow requiring a special processing procedure (such as the data flow with high priority or a malicious data flow) and the non-connection-oriented flow. Since the flow table does not need to store all data flows, the memory that is originally required by the conventional complete comparison process can be reduced. Therefore, the overall system cost or any additional load can be effectively reduced.</p><p id="p-0070" num="0069">The embodiments were chosen and described in order to explain the principles of the disclosure and their practical application so as to enable others skilled in the art to utilize the disclosure and various embodiments and with various modifications as are suited to the particular use contemplated. Alternative embodiments will become apparent to those skilled in the art to which the present disclosure pertains without departing from its spirit and scope.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for processing a data flow with an incomplete comparison process, which is adapted to a network device, the method comprising:<claim-text>receiving an input flow and resolving the input flow;</claim-text><claim-text>querying a flow table according to a result of resolving the input flow, so as to determine whether or not the input flow matches any one of flow entries of the flow table;</claim-text><claim-text>querying a flow filter according to the result of resolving the input flow, so as to determine whether or not the input flow matches any filtering condition of the flow filter;</claim-text><claim-text>wherein, according to another result of querying the flow table and the flow filter, the method further comprises:<claim-text>applying a corresponding one of processing policies when the input flow matches any one of the flow entries of the flow table;</claim-text><claim-text>re-querying the flow filter for determining whether or not the input flow matches any filtering condition of the flow filter when the input flow does not match any one of the flow entries of the flow table;</claim-text><claim-text>confirming that the input flow is present in the flow table and includes a plurality of packets when the input flow matches any filtering condition of the flow filter, and performing an action according to a procedure set by the network device; and</claim-text><claim-text>directing the input flow to a flow analyzing module for processing when the input flow does not match any filtering condition of the flow filter.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the flow table is adapted to all types of data flow, and when the input flow matches any one of the flow entries of the flow table, one of the processing policies provided below is performed:<claim-text>setting the input flow as a high priority and forwarding the input flow to a destination port;</claim-text><claim-text>dropping the input flow; and</claim-text><claim-text>copying the input flow to the flow analyzing module, and forwarding the input flow to the destination port.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the flow table records a 5-tuple of a header of the data flow, and the 5-tuple includes a destination IP address, a source IP address, a destination Layer 4 port, a source Layer 4 port, a communication protocol and the processing policies that correspond to the flow entries.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the flow filter implements an incomplete comparison table by a Bloom filter, so as to query a connection-oriented flow.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the Bloom filter performs k number of times of hash calculations on the input flow for obtaining a hash value, so as to determine whether or not the input flow corresponds to k one-bit entries in the Bloom filter.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the Bloom filter performs k number of times of the hash calculations on the 5-tuple of the input flow for obtaining k number of hash values.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the flow analyzing module is used to analyze and classify the packets of the input flow, and to identify an application category that the input flow belongs to.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein, when the input flow is a first packet of a connection-oriented flow, and the first packet does not match any one of the flow entries of the flow table by querying the flow table, the first packet is directed to the flow analyzing module for analysis and classification, and for identification of the application category that the first packet belongs to, and then the first packet is forwarded to a destination address recorded in a header of the first packet according to the procedure set by the network device.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method according to <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein, when the input flow is determined to experience aliasing in the flow filter, the flow analyzing module inserts the input flow to the flow table in advance, and sets up a corresponding one of the processing policies according to the application category that the input flow belongs to.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein, when the input flow is determined to match one filtering condition of the flow filter, the input flow is written into the flow filter, and the input flow inserted to the flow table in advance for avoiding the aliasing is removed.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system for processing a data flow, which is used in a network device, the system comprising:<claim-text>a memory storing a flow table and a flow filter; and</claim-text><claim-text>a flow analyzing module used to analyze and classify a plurality of packets of an input flow, and to identify an application category that the input flow belongs to;</claim-text><claim-text>wherein the system performs a method for processing the data flow with an incomplete comparison process, the method including:<claim-text>receiving the input flow and resolving the input flow;</claim-text><claim-text>querying the flow table according to a result of resolving the input flow, so as to determine whether or not the input flow matches any one of flow entries of the flow table;</claim-text><claim-text>querying the flow filter according to the result of resolving the input flow, so as to determine whether or not the input flow matches any filtering condition of the flow filter;</claim-text></claim-text><claim-text>wherein, according to another result of querying the flow table and the flow filter, the method further includes:<claim-text>applying a corresponding one of processing policies when the input flow matches any one of the flow entries of the flow table;</claim-text><claim-text>re-querying the flow filter for determining whether or not the input flow matches any filtering condition of the flow filter when the input flow does not match any one of the flow entries of the flow table;</claim-text><claim-text>confirming that the input flow is present in the flow table and includes the plurality of packets when the input flow matches any filtering condition of the flow filter, and performing an action according to a procedure set by the network device; and</claim-text><claim-text>directing the input flow to the flow analyzing module for processing when the input flow does not match any filtering condition of the flow filter.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the system implements a data processing circuit of a network switch for processing the data flow in the network switch.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the flow table is adapted to all types of data flow, and when the input flow matches any one of the flow entries of the flow table, one of the processing policies provided below is performed:<claim-text>setting the input flow as a high priority and forwarding the input flow to a destination port;</claim-text><claim-text>dropping the input flow; and</claim-text><claim-text>copying the input flow to the flow analyzing module, and forwarding the input flow to the destination port.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the flow table records a 5-tuple of a header of the data flow, and the 5-tuple includes a destination IP address, a source IP address, a destination Layer 4 port, a source Layer 4 port, a communication protocol and the processing policies that correspond to the flow entries.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the flow filter implements an incomplete comparison table by a Bloom filter, so as to query a connection-oriented flow.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the Bloom filter performs k number of times of hash calculations on the input flow for obtaining a hash value so as to determine whether or not the input flow corresponds to k one-bit entries in the Bloom filter.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the Bloom filter performs the k number of times of the hash calculations on the 5-tuple of the input flow for obtaining k number of hash values.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein, when the input flow is a first packet of a connection-oriented flow, and the first packet does not match any one of the flow entries of the flow table by querying the flow table, the first packet is directed to the flow analyzing module for analysis and classification, and for identification of the application category that the first packet belongs to, and then the first packet is forwarded to a destination address recorded in a header of the first packet according to the procedure set by the network device.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein, when the input flow is determined to experience aliasing in the flow filter, the flow analyzing module inserts the input flow to the flow table in advance, and sets up a corresponding one of the processing policies according to the application category that the input flow belongs to.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system according to <claim-ref idref="CLM-00019">claim 19</claim-ref>, when the input flow is determined to match one filtering condition of the flow filter, the input flow is written into the flow filter, and the input flow inserted to the flow table in advance for avoiding the aliasing is removed.</claim-text></claim></claims></us-patent-application>