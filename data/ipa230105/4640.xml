<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004641A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004641</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363124</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>55</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>56</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>79</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>554</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>552</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>566</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>79</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">RETROSPECTIVE MEMORY ANALYSIS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Microsoft Technology Licensing, LLC</orgname><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>RAY</last-name><first-name>Marsh Jordan</first-name><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>WALKER</last-name><first-name>Michael T.</first-name><address><city>Snoqualmie</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>CASWELL</last-name><first-name>Brian M.</first-name><address><city>Linthicum</city><state>MD</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Microsoft Technology Licensing, LLC</orgname><role>02</role><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Aspects of the present disclosure relate to retrospective memory analysis. In examples, a historical archive of memory images for an execution environment is maintained. A historical memory image of the historical archive may be evaluated according to a current set of known issues, rather than issues that were known at the time of the memory capture. Accordingly, it may be possible to determine when the execution environment was last in a good environment condition. As another example, it may be possible to determine whether a now-known issue has since been resolved (e.g., such that the issue would not be identified in the current execution environment). Thus, as compared to contemporaneous issue identification techniques, aspects of the present disclosure may be applied to any number of execution environments to enable retrospective identification of now-known issues that were, at least at the time of a memory capture, not known.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="91.36mm" wi="158.75mm" file="US20230004641A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="221.83mm" wi="145.88mm" orientation="landscape" file="US20230004641A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="201.68mm" wi="162.05mm" file="US20230004641A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="189.06mm" wi="128.86mm" file="US20230004641A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="210.40mm" wi="148.34mm" orientation="landscape" file="US20230004641A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="233.93mm" wi="163.83mm" file="US20230004641A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="188.04mm" wi="136.82mm" file="US20230004641A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="175.77mm" wi="149.52mm" file="US20230004641A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="222.76mm" wi="166.37mm" file="US20230004641A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="125.48mm" wi="140.80mm" file="US20230004641A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Known issues, such as the presence of known malware, may be identified of an execution environment and mitigated accordingly. However, some issues may evade detection, for example because they are not yet known. Such issues may instead be detected at a later date, once the issue becomes known. In some instances, even after an issue becomes known, it may not be detected, as it may no longer be present within the execution environment. Thus, while contemporaneous issue identification and resolution may be effective for known issues, it is difficult to manage risks associated with issues that are present but are yet to be identified.</p><p id="p-0003" num="0002">It is with respect to these and other general considerations that embodiments have been described. Also, although relatively specific problems have been discussed, it should be understood that the embodiments should not be limited to solving the specific problems identified in the background.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0004" num="0003">Aspects of the present disclosure relate to retrospective memory analysis. In examples, a historical archive of memory images for an execution environment is maintained. A historical memory image of the historical archive may be evaluated according to a current set of known issues, rather than issues that were known at the time of the memory capture. Accordingly, it may be possible to determine when the execution environment was last in a good environment condition. As another example, it may be possible to determine whether a now-known issue has since been resolved (e.g., such that the issue would not be identified in the current execution environment). Thus, as compared to contemporaneous issue identification techniques, aspects of the present disclosure may be applied to any number of execution environments to enable retrospective identification of now-known issues that were, at least at the time of a memory capture, not known.</p><p id="p-0005" num="0004">This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">Non-limiting and non-exhaustive examples are described with reference to the following Figures.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an overview of an example system for retrospective memory analysis.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an overview of an example method for retrospective memory archival and associated processing.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an overview of an example method for processing a retrospective memory image according to aspects described herein.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an overview of an example method for processing an environment condition according to aspects described herein.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating example physical components of a computing device with which aspects of the disclosure may be practiced.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref> are simplified block diagrams of a mobile computing device with which aspects of the present disclosure may be practiced.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a simplified block diagram of a distributed computing system in which aspects of the present disclosure may be practiced.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a tablet computing device for executing one or more aspects of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0015" num="0014">In the following detailed description, references are made to the accompanying drawings that form a part hereof, and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined, other aspects may be utilized, and structural changes may be made without departing from the present disclosure. Embodiments may be practiced as methods, systems or devices. Accordingly, embodiments may take the form of a hardware implementation, an entirely software implementation, or an implementation combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense, and the scope of the present disclosure is defined by the appended claims and their equivalents.</p><p id="p-0016" num="0015">In examples, known issues are identified as a result of monitoring characteristics of an execution environment, including, but not limited to, executing processes, the executable content associated with such executing processes, open files, and/or open network sockets, among other examples. Example issues include viruses, adware, spyware, and ransomware. It will be appreciated that an issue need not be restricted to malware and, in other examples, may be an issue resulting from the use of the execution environment. Other such example issues include data theft or other instances of computer abuse. Thus, an issue may have an associated signature based on characteristics of the execution environment, such that the identification of such characteristics may be determined to indicate the associated issue is likely present in the execution environment.</p><p id="p-0017" num="0016">However, an issue may exist for which an associated signature has not yet been determined. As an example, a new variant of malware may infect an execution environment prior to its detection, such that an associated signature has not yet been determined. In the above-described environment in which signatures are used to perform substantially contemporaneous issue identification (e.g., based on execution environment characteristics), only after a signature is determined for the new variant may the issue be identified. As a result, there may be a lag between issue manifestation and issue detectability. This lag may make it difficult to identify how long an issue has been present, as well as the associated scope and risk. As another example, it may be difficult to certify or attest to the last date at which the execution environment was in a known good state according to a current set of known issues (as compared to the set of issues that was known at some time in the past). Further, an issue may not have associated files (e.g., file-less malware or behavior associated with computer abuse) or may not be detectable according to metadata that is typically stored (e.g., debugging logs or file access logs), such that retrospective identification of such issues may be very difficult or impossible.</p><p id="p-0018" num="0017">Accordingly, aspects of the present application relate to retrospective memory analysis. In examples, volatile memory associated with an execution environment may be captured and stored for subsequent analysis. For example, a data store may store historical memory images for the execution environment, thereby enabling retrospective analysis according to a current set of known issues. As a result, memory images in which an issue is identified may be determined, such that it may be determined when the execution environment first exhibited the issue or, in other examples, whether there was a point in time at which the issue was no longer present. As another example, the historical memory images may be processed to certify that the execution environment was patched for a vulnerability as of a certain date. Thus, it will be appreciated that the retrospective memory analysis techniques described herein may be applied in any of a variety of scenarios.</p><p id="p-0019" num="0018">An execution environment includes, but is not limited to, a guest virtual machine managed by a hypervisor of a host computing device, an execution environment may be that of a container executing on a host computing device, or a bare metal execution environment (e.g., that of a host device or that of a device on which such virtualization techniques are not used), among other examples. Thus, it will be appreciated that the aspects described herein may be used with respect to any of a variety of execution environments.</p><p id="p-0020" num="0019">Any of a variety of memory capture techniques may be used, such as capturing a memory image of a suspended execution environment or those described in U.S. patent application Ser. No. 17/333,449, filed on May 28, 2021, and titled &#x201c;Volatile Memory Acquisition,&#x201d; the entire disclosure of which is hereby expressly incorporated by reference. In some instances, different capture techniques may be used for different types of execution environments. For example, different techniques may be used for a virtual machine execution environment as compared to a bare metal execution environment. In examples, historical memory images may be stored according to differential encoding techniques and/or compressed, among other examples.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an overview of an example system <b>100</b> for retrospective memory analysis. As illustrated, system <b>100</b> comprises retrospective analysis service <b>102</b>, execution environments <b>110</b> and <b>112</b>, client device <b>106</b>, and network <b>108</b>. In examples, retrospective analysis service <b>102</b>, execution environments <b>110</b> and <b>112</b>, and client device <b>106</b> communicate using network <b>108</b>, which may comprise a local area network, a wireless network, or the Internet, or any combination thereof, among other examples.</p><p id="p-0022" num="0021">A dashed box is illustrated around execution environment <b>110</b> and <b>112</b> to indicate that they may each be virtual machines or containers (e.g., executing on a host computing device <b>104</b>) or physical computing devices. It will be appreciated that execution environment <b>110</b> and <b>112</b> need not each be the same type of execution environment and any number of execution environments may be processed according to aspects described herein. Further, execution environment <b>110</b> and <b>112</b> need not be co-located with one another, and retrospective analysis service <b>102</b> may act as a centralized archive of historical memory images. In other examples, multiple retrospective analysis services may be used, for example where each retrospective analysis service is proximate or co-located with a respective set of execution environments.</p><p id="p-0023" num="0022">Retrospective analysis service <b>102</b> is illustrated as comprising memory image engine <b>114</b>, data store <b>116</b>, and memory image analyzer <b>118</b>. In examples, memory image engine <b>114</b> obtains memory images of execution environments <b>110</b> and <b>112</b>, for example according to a schedule or in response to the occurrence of an event (e.g., a manual indication from a user or identification of an issue of an execution environment), among other examples. Memory image engine <b>114</b> may store memory images in data store <b>116</b>. For example, a memory image obtained for execution environment <b>110</b> may be stored in association with one or more other historical memory images of execution environment <b>110</b>, thereby enabling retrospective analysis of execution environment <b>110</b> (e.g., by memory image analyzer <b>118</b> as discussed below). Similarly, a memory image obtained for execution environment <b>112</b> may be stored in association with one or more other historical memory images of execution environment <b>112</b>.</p><p id="p-0024" num="0023">In examples, memory image engine <b>114</b> processes a memory image according to a previously obtained memory image to generate a differentially encoded memory image, such that differential encoding techniques are used to store the memory image in data store <b>116</b>. For example, an initial memory image may be stored in full (e.g., rather than as a differentially encoded representation), after which a predetermined number of subsequent memory images may be stored according to differential encoding techniques. A &#x201c;key frame&#x201d; memory image may be stored in full after the predetermined number of subsequent memory images, after which another predetermined number of subsequent memory images may be stored using differential encoding.</p><p id="p-0025" num="0024">Compression techniques may be used in addition to or as an alternative to differential encoding techniques. As another example, memory images may be stored using a technique similar to that of a rolling buffer, where a predetermined number of memory images are retained and the oldest memory image may be deleted upon the addition of a new memory image, thereby retaining the predetermined number of images. In some instances, a memory image stored by data store <b>116</b> may be immutable once stored, such that the memory image is assured to be representative of the execution environment at the time the memory image was captured. While example storage techniques are described, it will be appreciated that other techniques may be used to store historical memory images in association with an execution environment to which they relate.</p><p id="p-0026" num="0025">Retrospective analysis service <b>102</b> is further illustrated as comprising memory image analyzer <b>118</b>, which may process a historical memory image of data store <b>116</b> to determine an environment condition for the associated execution environment. For example, memory image analyzer <b>118</b> may process a historical memory image to generate a set of characteristics for the execution environment as of when the historical memory image was captured. Example characteristics include, but are not limited to, executing processes, the executable content associated with such executing processes, open files, and/or open network sockets, among other examples. While analyses are described with respect to such characteristics, it will be appreciated that any of a variety of additional or alternative techniques may be used. For example, pattern matching may be used to identify the presence of a byte pattern in the memory image or the execution environment may be resumed according to the memory image to evaluate its resulting behavior, thereby enabling behavioral analysis of the execution environment according to a historical memory image.</p><p id="p-0027" num="0026">Memory image analyzer <b>118</b> may process the set of characteristics according to a set of known issues to determine whether the set of characteristics is indicative of a known issue. As described above, the set of known issues may be different than issues that were known when the memory image was captured, thereby enabling retrospective analysis of the execution environment, even in instances where an issue was not known (and therefore evaded detection) at the time of the memory capture.</p><p id="p-0028" num="0027">In addition to identification of an issue, memory image analyzer <b>118</b> may determine any of a variety of additional information associated with the environment condition. For example, memory image analyzer <b>118</b> may determine software associated with the issue (e.g., an application that was infected, an unpatched software exploit, or a function call that was hooked). As another example, memory image analyzer <b>118</b> may determine information associated with the issue itself, such as associated files, network activity, or memory content (e.g., a ransomware cryptographic key or a malware binary).</p><p id="p-0029" num="0028">As a result of having an archive of historical images for the execution environment, memory image analyzer <b>118</b> may process memory images before or after a memory image in which an issue was identified to determine a date at which the environment condition was first present and/or a date at which the environment condition was no longer present. Such analyses by memory image analyzer <b>118</b> may be performed according to a schedule or in response to the occurrence of an event (e.g., a manual indication from a user or identification of an issue of an execution environment), among other examples.</p><p id="p-0030" num="0029">In instances where a historical issue is identified, memory image analyzer <b>118</b> may generate an alert of the identified issue. In some instances, the alert may further indicate an identified start date and/or identified end date of the issue. For example, the alert may be provided to client device <b>106</b> in the form of an indication to an application executing on client device <b>106</b> or as an electronic communication, such as an email message or an instant message. Any of a variety of additional or alternative actions may be taken. For example, remediation may be performed on an execution environment in which the issue is determined to still be present.</p><p id="p-0031" num="0030">While memory image analyzer <b>118</b> is described as processing historical memory images and environment characteristics determined therefrom, it will be appreciated that memory image analyzer <b>118</b> may further evaluate additional information associated with execution environment. For example, memory image analyzer <b>118</b> may process an associated file system snapshot, a video memory image, or a system firmware image, among other additional information. The additional information need not be captured at the same or a similar frequency as the associated memory image. Rather, such additional information may be correlated with the historical memory image, such that memory image analyzer <b>118</b> may process the additional information to identify issues with increased certainty or identify additional issues, among other examples.</p><p id="p-0032" num="0031">In other examples, memory image analyzer <b>118</b> may generate the above-described execution environment characteristics and provide the generated characteristics for processing by a software information and event management (SIEM) software or service. For example, the characteristics may be provided to software that performs a similar analysis of the characteristics as would be performed for a currently executing execution environment. As another example, the characteristics may be provided to a cloud-based issue identification service. Thus, memory image analyzer <b>118</b> may act as an abstraction layer between historical memory images of an execution environment and a substantially real time analysis performed by such a SIEM solution. In such instances, the SIEM solution may generate alerts and/or perform other actions similar to those described herein.</p><p id="p-0033" num="0032">In examples, retrospective analysis service <b>102</b> provides a website and/or application programming interface (API) via which a user can control operation of retrospective analysis service <b>102</b> and view or otherwise access memory analysis results generated by memory image analyzer <b>118</b>. For example, client device <b>106</b> may request that a memory image be captured of execution environment <b>110</b> (e.g., now and/or according to a schedule) according to aspects described herein. For example, client device <b>106</b> may provide an indication to retrospective analysis service <b>102</b> to initiate a memory capture operation. The indication may comprise an identifier associated with execution environment <b>110</b>, as well as a set of capture instructions (e.g., a time at which the capture should be taken, an event in response to which the capture should be taken, one or more regions of memory to capture, or one or more actions that should be taken upon the identification of an issue, etc.). As a result, memory image engine <b>114</b> may obtain a memory image of execution environment <b>110</b> and memory image analyzer <b>118</b> may process the memory image accordingly.</p><p id="p-0034" num="0033">As another example, client device <b>106</b> may access or otherwise receive an issue indication generated by memory image analyzer <b>120</b>. For example, a web browser application of client device <b>106</b> may be used to access the website associated with retrospective analysis service <b>102</b>, on which memory analysis results associated with execution environment <b>110</b> may be presented. As another example, a native application executing on client device <b>106</b> may access such information using an API provided by retrospective analysis service <b>102</b>. Thus, it will be appreciated that any of a variety of techniques may be used to interact with or otherwise manage retrospective analysis service <b>102</b> according to aspects of the present disclosure.</p><p id="p-0035" num="0034">Retrospective analysis service <b>102</b> may be configured such that memory image analyzer <b>118</b> processes memory images substantially contemporaneously with their acquisition by memory image engine <b>114</b>. As another example, memory image analyzer <b>118</b> may process the memory images according to a schedule and/or in response to a manual user indication. The operation of retrospective analysis service <b>102</b> may differ according to the context in which it is used. For example, memory images may be archived to provide on-demand post hoc attestation as to the state of execution environments <b>110</b> and/or <b>112</b>. As another example, memory images may be archived to enable contemporaneous identification of issues as they are discovered, and further to identify a start date at which a now-known issue was first present within execution environments <b>110</b> and/or <b>112</b>. Thus, the aspects described herein enable the automatic analysis of any number of execution environments, such that issues and their associated scope may be identified retroactively as new issues are identified.</p><p id="p-0036" num="0035">While system <b>100</b> is illustrated as comprising a single retrospective analysis service <b>102</b>, a two execution environments <b>110</b> and <b>112</b>, and a single client device <b>106</b>, it will be appreciated that any number of such elements may be used in other examples. Further, the functionality described above may be distributed among retrospective analysis service <b>102</b>, execution environments <b>110</b> and <b>112</b>, and/or client device <b>106</b> according to any of a variety of other paradigms in other examples.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an overview of an example method <b>200</b> for retrospective memory archival and associated processing. For example, aspects of method <b>200</b> may be performed by a retrospective analysis service, such as retrospective analysis service <b>102</b> described above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0038" num="0037">Method <b>200</b> begins at operation <b>202</b>, where a capture condition is identified. For example, it may be determined that a predetermined amount of time has passed since a previous memory image capture, that a schedule indicates a memory image capture should be obtained, or that an event has occurred, such as a manual indication or an issue identified at an execution environment.</p><p id="p-0039" num="0038">Accordingly, flow progresses to operation <b>204</b>, where volatile memory of an execution environment is obtained. As noted above, the volatile memory may be obtained according to any of a variety of techniques. While method <b>200</b> is described in the context of obtaining and processing a memory image for a single execution environment, it will be appreciated that any number of execution environments may be processed in other examples. For example, operation <b>204</b> may comprise obtaining volatile memory for multiple execution environments, such as multiple guests of a host computing device or multiple execution environments of an institution, among other examples.</p><p id="p-0040" num="0039">At determination <b>206</b>, it is determined whether there is an existing memory image for the execution environment. For example, determination <b>206</b> may comprise evaluating the content of a data store, such as data store <b>116</b> of retrospective analysis service <b>102</b> discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In other examples, the determination may comprise evaluating a number of historical memory images associated with the execution environment, for example such that it may be determined to generate a key frame memory image after a predetermined number of differentially encoded memory images. Thus, it will be appreciated that any of a variety of additional or alternative determinations may be made at determination <b>206</b>.</p><p id="p-0041" num="0040">Returning to the instant example, if it is determined that a memory image does not exist for the execution environment, flow branches &#x201c;NO&#x201d; to operation <b>208</b>, where the volatile memory is stored as a memory image in a data store. In examples, the memory image may be compressed. For example, the memory image may be stored in data store <b>116</b> discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The memory image may be stored in association with the execution environment from which it was obtained. For example, the execution environment may have an associated identifier, such as a hostname or a globally unique identifier (GUID). In some instances, multiple data stores may be used, such that operation <b>208</b> comprises storing the memory image in a data store selected from a set of data stores. As illustrated, flow may progress to operation <b>214</b> (described below) or, in other examples, flow may loop and return to operation <b>202</b>, where a subsequent memory image is generated in response to another capture condition.</p><p id="p-0042" num="0041">If, however, it is determined there is an existing memory image for the execution environment, flow instead branches &#x201c;YES&#x201d; to operation <b>210</b>, where a differential encoding is generated based on the existing memory image. For example, the differential encoding may comprise differences between the volatile memory that was obtained at operation <b>204</b> and the existing memory image. Accordingly, at operation <b>212</b>, a differential memory image may be stored. Aspects of operation <b>212</b> may be similar to those of operation <b>208</b>, where the differential memory image is stored in association with an identifier of the execution environment from which the volatile memory was obtained at operation <b>204</b>. Accordingly, flow may progress to operation <b>214</b> (described below) or, in other examples, flow may loop and return to operation <b>202</b>, where a subsequent memory image is generated in response to another capture condition.</p><p id="p-0043" num="0042">At operation <b>214</b>, memory analysis may be performed. For example, operation <b>214</b> may be performed contemporaneously with the generation of a memory image capture according to some configurations of a retrospective analysis service or, as another example, the capture condition identified at operation <b>202</b> may indicate that memory analysis should be performed. Accordingly, the memory image (e.g., as was stored at either operation <b>208</b> or <b>212</b>) may be analyzed, for example by a memory image analyzer, such as memory image analyzer <b>118</b> discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Such aspects may be similar to those of method <b>300</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, which is discussed below. As illustrated, flow may then return to operation <b>202</b>, where a subsequent memory image is generated in response to another capture condition.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an overview of an example method <b>300</b> for processing a retrospective memory image according to aspects described herein. In examples, aspects of method <b>300</b> may be performed by a memory image analyzer, such as memory image analyzer <b>118</b> discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0045" num="0044">Method <b>300</b> begins at operation <b>302</b>, where a historical memory image is obtained. For example, the memory image may be obtained from a data store of a retrospective analysis service, such as data store <b>116</b> of retrospective analysis service <b>102</b> discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In examples, the historical memory image may be differentially encoded, such that data of one or more previous historical memory images is accessed at operation <b>302</b>.</p><p id="p-0046" num="0045">At operation <b>304</b>, the memory image is preprocessed. For example, the execution environment from which the memory image was obtained may implement address space layout randomization (ASLR) techniques, such that content of the memory image may be non-contiguous. Accordingly, operation <b>304</b> may comprise preprocessing the memory image to reverse or otherwise account for at least a part of the ASLR techniques applied to the memory image.</p><p id="p-0047" num="0046">For example, there may be data associated with the execution environment that is unlikely to change as a result of an issue (e.g., data that is associated with stability of the execution environment), such that the data may be used to identify associated patterns and reduce or otherwise account for the potentially random layout of associated data within the memory image. Thus, various landmarks within the memory image may facilitate further processing of the memory image. In some instances, such landmark data may vary according to a kernel version or other attributes of the execution environment, such that the processing performed at operation <b>304</b> may be associated with attributes of the execution environment. For instance, offsets of landmark data and/or the landmark data itself may be unique to a kernel version or a specific build of the kernel, among other examples.</p><p id="p-0048" num="0047">At operation <b>306</b>, environment characteristics are generated. For example, the set of environment characteristics generated at operation <b>306</b> include, but are not limited to, executing processes, the executable content associated with such executing processes, open files, and/or open network sockets, among other examples. In some instances, operation <b>306</b> is performed in view of the preprocessing performed at operation <b>304</b>, for example to determine a memory location of a process list, open files, and/or open network sockets of the execution environment.</p><p id="p-0049" num="0048">Flow progresses to operation <b>308</b>, where the characteristics generated at operation <b>306</b> are analyzed to determine a condition for the execution environment. For example, rules associated with known issues may be used to evaluate the set of characteristics, such that it may be determined whether the set of characteristics is indicative of a known issue. Each known issue may have an associated signature, such that the set of characteristics may be processed to determine whether the signature is present in the execution environment.</p><p id="p-0050" num="0049">Operation <b>308</b> may comprise additional processing associated with an identified issue, for example to determine information associated with the issue itself, such as associated files, network activity, or memory content (e.g., a ransomware cryptographic key or a malware binary). As another example, operation <b>308</b> may further comprise processing additional information associated with the execution environment that is correlated to the time at which the historical memory image obtained at operation <b>302</b> was captured.</p><p id="p-0051" num="0050">In other examples, operation <b>308</b> may additionally or alternatively comprise providing an indication of at least a part of the set of characteristics to an SIEM solution, such that the SIEM solution may process the characteristics and generate alerts and/or perform other actions accordingly. As a result of operation <b>308</b>, the environment condition may be determined, where the environment condition may comprise one or more issues associated with the set of environment characteristics.</p><p id="p-0052" num="0051">A dotted arrow is illustrated from operation <b>308</b> to operation <b>302</b> to indicate that, in some examples, multiple iterations of operations <b>302</b>-<b>308</b> may be performed prior to arriving at determination <b>310</b>. For example, the identification of some issues may be possible or otherwise increase in confidence as a result of processing multiple historical memory images for a given execution environment. As another example, operations <b>302</b>-<b>308</b> may be performed with respect to multiple execution environments, as certain issues may manifest among a group of execution environments rather than with respect to a sole execution environment.</p><p id="p-0053" num="0052">At determination <b>310</b>, it is determined whether an issue is present in the environment condition. Thus, in some instances, operation <b>308</b> may not identify any known issues, such that determination <b>310</b> may branch &#x201c;NO&#x201d; and end at operation <b>312</b>. By contrast, if a known issue is identified, flow may instead branch &#x201c;YES&#x201d; to operation <b>314</b>, where an action is performed based on the environment condition. For example, the action may comprise generating an alert as to an identified issue, determining a start date or end date for the issue (e.g., according to a subsequent iteration of aspects of method <b>300</b> using an earlier or later memory image), or remediating the issue at the execution environment if the issue is still present, among other examples.</p><p id="p-0054" num="0053">In some examples, the result of operations <b>304</b> or <b>306</b> may cached to simplify and/or increase the efficiency of method <b>300</b>. For example, a preprocessed memory image may be cached, such that operation <b>304</b> may comprise accessing the cached preprocessed memory image rather than preprocessing the memory image again, as may be the case when performing an additional analysis of a historical memory image in light of a newly identified issue. Similarly, environment characteristics may be cached, such that the cached environment characteristics may be used at operation <b>306</b>.</p><p id="p-0055" num="0054">By contrast, such caching may not be used in instances where a newly-identified issue may have evaded detection as a result of previously applied processing by operations <b>304</b> and/or <b>306</b>. As a result, a memory image may be preprocessed and/or environment characteristics may be generated according to an updated process to account for potential adaptation by a newly identified issue. Thus, the ability to alter processing of archived memory images enables the processing techniques described herein to adapt to changes and to identify issues that would otherwise have gone undetected under previous iterations of method <b>300</b>. Method <b>300</b> terminates at operation <b>314</b>.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an overview of an example method <b>400</b> for processing an environment condition according to aspects described herein. Aspects of method <b>400</b> may be performed by a memory image analyzer (e.g., memory image analyzer <b>118</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) or a SIEM solution, among other examples.</p><p id="p-0057" num="0056">As illustrated, method <b>400</b> begins at operation <b>402</b>, where an environment condition indication is obtained. For example, the environment condition indication may be associated with a determined environment condition as a result of aspects of method <b>300</b> discussed above with respect to method <b>300</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0058" num="0057">At determination <b>404</b>, the type of environment condition is determined. For example, if the environment condition indication indicates that the execution environment has an issue, flow branches &#x201c;ISSUE&#x201d; to operation <b>406</b>, where an alert of an identified historical issue is generated. In examples, the alert comprises information associated with the issue, such files, network activity, or memory content associated with the issue, as may have been determined as a result of performing aspects of operation <b>308</b> discussed above with respect to method <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In other examples, the alert may comprise an indication of a last known good state for the execution environment, as may be determined by processing previous historical memory images of the execution environment to determine whether and/or when a memory image was last captured that did not exhibit the issue. Flow terminates at operation <b>406</b>.</p><p id="p-0059" num="0058">By contrast, if the condition does not indicate an issue, flow branches &#x201c;NOMINAL&#x201d; to determination <b>408</b>, where it is determined whether there was a previous issue with the execution environment. For example, determination <b>408</b> may comprise evaluating whether an alert of an identified historical issue was previously generated (e.g., as may have been generated by operation <b>406</b>) for the execution environment associated with the condition indication that was received at operation <b>402</b>. If there was not a previous issue, flow branches &#x201c;NO&#x201d; at terminates at operation <b>410</b>.</p><p id="p-0060" num="0059">However, if it is determined that an issue was previously identified for the execution environment, flow instead branches &#x201c;YES&#x201d; to operation <b>412</b>, where an alert is generated that a previously identified historical issue was resolved. For example, the alert may comprise an indication as to a date on which the issue was no longer identified. The alert may comprise information associated with the resolved issue, such files, network activity, or memory content, as may have been determined as a result of performing aspects of operation <b>308</b> discussed above with respect to method <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Method <b>400</b> terminates at operation <b>412</b>.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref> and the associated descriptions provide a discussion of a variety of operating environments in which aspects of the disclosure may be practiced. However, the devices and systems illustrated and discussed with respect to <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>8</b></figref> are for purposes of example and illustration and are not limiting of a vast number of computing device configurations that may be utilized for practicing aspects of the disclosure, described herein.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating physical components (e.g., hardware) of a computing device <b>500</b> with which aspects of the disclosure may be practiced. The computing device components described below may be suitable for the computing devices described above, including retrospective analysis service <b>102</b>, execution environments <b>110</b> and <b>112</b>, and client device <b>106</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In a basic configuration, the computing device <b>500</b> may include at least one processing unit <b>502</b> and a system memory <b>504</b>. Depending on the configuration and type of computing device, the system memory <b>504</b> may comprise, but is not limited to, volatile storage (e.g., random access memory), non-volatile storage (e.g., read-only memory), flash memory, or any combination of such memories.</p><p id="p-0063" num="0062">The system memory <b>504</b> may include an operating system <b>505</b> and one or more program modules <b>506</b> suitable for running software application <b>520</b>, such as one or more components supported by the systems described herein. As examples, system memory <b>504</b> may store memory image engine <b>524</b> and memory image analyzer <b>526</b>. The operating system <b>505</b>, for example, may be suitable for controlling the operation of the computing device <b>500</b>.</p><p id="p-0064" num="0063">Furthermore, embodiments of the disclosure may be practiced in conjunction with a graphics library, other operating systems, or any other application program and is not limited to any particular application or system. This basic configuration is illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> by those components within a dashed line <b>508</b>. The computing device <b>500</b> may have additional features or functionality. For example, the computing device <b>500</b> may also include additional data storage devices (removable and/or non-removable) such as, for example, magnetic disks, optical disks, or tape. Such additional storage is illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> by a removable storage device <b>509</b> and a non-removable storage device <b>510</b>.</p><p id="p-0065" num="0064">As stated above, a number of program modules and data files may be stored in the system memory <b>504</b>. While executing on the processing unit <b>502</b>, the program modules <b>506</b> (e.g., application <b>520</b>) may perform processes including, but not limited to, the aspects, as described herein. Other program modules that may be used in accordance with aspects of the present disclosure may include electronic mail and contacts applications, word processing applications, spreadsheet applications, database applications, slide presentation applications, drawing or computer-aided application programs, etc.</p><p id="p-0066" num="0065">Furthermore, embodiments of the disclosure may be practiced in an electrical circuit comprising discrete electronic elements, packaged or integrated electronic chips containing logic gates, a circuit utilizing a microprocessor, or on a single chip containing electronic elements or microprocessors. For example, embodiments of the disclosure may be practiced via a system-on-a-chip (SOC) where each or many of the components illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be integrated onto a single integrated circuit. Such an SOC device may include one or more processing units, graphics units, communications units, system virtualization units and various application functionality all of which are integrated (or &#x201c;burned&#x201d;) onto the chip substrate as a single integrated circuit. When operating via an SOC, the functionality, described herein, with respect to the capability of client to switch protocols may be operated via application-specific logic integrated with other components of the computing device <b>500</b> on the single integrated circuit (chip). Embodiments of the disclosure may also be practiced using other technologies capable of performing logical operations such as, for example, AND, OR, and NOT, including but not limited to mechanical, optical, fluidic, and quantum technologies. In addition, embodiments of the disclosure may be practiced within a general purpose computer or in any other circuits or systems.</p><p id="p-0067" num="0066">The computing device <b>500</b> may also have one or more input device(s) <b>512</b> such as a keyboard, a mouse, a pen, a sound or voice input device, a touch or swipe input device, etc. The output device(s) <b>514</b> such as a display, speakers, a printer, etc. may also be included. The aforementioned devices are examples and others may be used. The computing device <b>500</b> may include one or more communication connections <b>516</b> allowing communications with other computing devices <b>550</b>. Examples of suitable communication connections <b>516</b> include, but are not limited to, radio frequency (RF) transmitter, receiver, and/or transceiver circuitry; universal serial bus (USB), parallel, and/or serial ports.</p><p id="p-0068" num="0067">The term computer readable media as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, or program modules. The system memory <b>504</b>, the removable storage device <b>509</b>, and the non-removable storage device <b>510</b> are all computer storage media examples (e.g., memory storage). Computer storage media may include RAM, ROM, electrically erasable read-only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other article of manufacture which can be used to store information and which can be accessed by the computing device <b>500</b>. Any such computer storage media may be part of the computing device <b>500</b>. Computer storage media does not include a carrier wave or other propagated or modulated data signal.</p><p id="p-0069" num="0068">Communication media may be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media may include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared, and other wireless media.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref> illustrate a mobile computing device <b>600</b>, for example, a mobile telephone, a smart phone, wearable computer (such as a smart watch), a tablet computer, a laptop computer, and the like, with which embodiments of the disclosure may be practiced. In some aspects, the client may be a mobile computing device. With reference to <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, one aspect of a mobile computing device <b>600</b> for implementing the aspects is illustrated. In a basic configuration, the mobile computing device <b>600</b> is a handheld computer having both input elements and output elements. The mobile computing device <b>600</b> typically includes a display <b>605</b> and one or more input buttons <b>610</b> that allow the user to enter information into the mobile computing device <b>600</b>. The display <b>605</b> of the mobile computing device <b>600</b> may also function as an input device (e.g., a touch screen display).</p><p id="p-0071" num="0070">If included, an optional side input element <b>615</b> allows further user input. The side input element <b>615</b> may be a rotary switch, a button, or any other type of manual input element. In alternative aspects, mobile computing device <b>600</b> may incorporate more or less input elements. For example, the display <b>605</b> may not be a touch screen in some embodiments.</p><p id="p-0072" num="0071">In yet another alternative embodiment, the mobile computing device <b>600</b> is a portable phone system, such as a cellular phone. The mobile computing device <b>600</b> may also include an optional keypad <b>635</b>. Optional keypad <b>635</b> may be a physical keypad or a &#x201c;soft&#x201d; keypad generated on the touch screen display.</p><p id="p-0073" num="0072">In various embodiments, the output elements include the display <b>605</b> for showing a graphical user interface (GUI), a visual indicator <b>620</b> (e.g., a light emitting diode), and/or an audio transducer <b>625</b> (e.g., a speaker). In some aspects, the mobile computing device <b>600</b> incorporates a vibration transducer for providing the user with tactile feedback. In yet another aspect, the mobile computing device <b>600</b> incorporates input and/or output ports, such as an audio input (e.g., a microphone jack), an audio output (e.g., a headphone jack), and a video output (e.g., a HDMI port) for sending signals to or receiving signals from an external device.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> is a block diagram illustrating the architecture of one aspect of a mobile computing device. That is, the mobile computing device <b>600</b> can incorporate a system (e.g., an architecture) <b>602</b> to implement some aspects. In one embodiment, the system <b>602</b> is implemented as a &#x201c;smart phone&#x201d; capable of running one or more applications (e.g., browser, e-mail, calendaring, contact managers, messaging clients, games, and media clients/players). In some aspects, the system <b>602</b> is integrated as a computing device, such as an integrated personal digital assistant (PDA) and wireless phone.</p><p id="p-0075" num="0074">One or more application programs <b>666</b> may be loaded into the memory <b>662</b> and run on or in association with the operating system <b>664</b>. Examples of the application programs include phone dialer programs, e-mail programs, personal information management (PIM) programs, word processing programs, spreadsheet programs, Internet browser programs, messaging programs, and so forth. The system <b>602</b> also includes a non-volatile storage area <b>668</b> within the memory <b>662</b>. The non-volatile storage area <b>668</b> may be used to store persistent information that should not be lost if the system <b>602</b> is powered down. The application programs <b>666</b> may use and store information in the non-volatile storage area <b>668</b>, such as e-mail or other messages used by an e-mail application, and the like. A synchronization application (not shown) also resides on the system <b>602</b> and is programmed to interact with a corresponding synchronization application resident on a host computer to keep the information stored in the non-volatile storage area <b>668</b> synchronized with corresponding information stored at the host computer. As should be appreciated, other applications may be loaded into the memory <b>662</b> and run on the mobile computing device <b>600</b> described herein (e.g., search engine, extractor module, relevancy ranking module, answer scoring module, etc.).</p><p id="p-0076" num="0075">The system <b>602</b> has a power supply <b>670</b>, which may be implemented as one or more batteries. The power supply <b>670</b> might further include an external power source, such as an AC adapter or a powered docking cradle that supplements or recharges the batteries.</p><p id="p-0077" num="0076">The system <b>602</b> may also include a radio interface layer <b>672</b> that performs the function of transmitting and receiving radio frequency communications. The radio interface layer <b>672</b> facilitates wireless connectivity between the system <b>602</b> and the &#x201c;outside world,&#x201d; via a communications carrier or service provider. Transmissions to and from the radio interface layer <b>672</b> are conducted under control of the operating system <b>664</b>. In other words, communications received by the radio interface layer <b>672</b> may be disseminated to the application programs <b>666</b> via the operating system <b>664</b>, and vice versa.</p><p id="p-0078" num="0077">The visual indicator <b>620</b> may be used to provide visual notifications, and/or an audio interface <b>674</b> may be used for producing audible notifications via the audio transducer <b>625</b>. In the illustrated embodiment, the visual indicator <b>620</b> is a light emitting diode (LED) and the audio transducer <b>625</b> is a speaker. These devices may be directly coupled to the power supply <b>670</b> so that when activated, they remain on for a duration dictated by the notification mechanism even though the processor <b>660</b> and other components might shut down for conserving battery power. The LED may be programmed to remain on indefinitely until the user takes action to indicate the powered-on status of the device. The audio interface <b>674</b> is used to provide audible signals to and receive audible signals from the user. For example, in addition to being coupled to the audio transducer <b>625</b>, the audio interface <b>674</b> may also be coupled to a microphone to receive audible input, such as to facilitate a telephone conversation. In accordance with embodiments of the present disclosure, the microphone may also serve as an audio sensor to facilitate control of notifications, as will be described below. The system <b>602</b> may further include a video interface <b>676</b> that enables an operation of an on-board camera <b>630</b> to record still images, video stream, and the like.</p><p id="p-0079" num="0078">A mobile computing device <b>600</b> implementing the system <b>602</b> may have additional features or functionality. For example, the mobile computing device <b>600</b> may also include additional data storage devices (removable and/or non-removable) such as, magnetic disks, optical disks, or tape. Such additional storage is illustrated in <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> by the non-volatile storage area <b>668</b>.</p><p id="p-0080" num="0079">Data/information generated or captured by the mobile computing device <b>600</b> and stored via the system <b>602</b> may be stored locally on the mobile computing device <b>600</b>, as described above, or the data may be stored on any number of storage media that may be accessed by the device via the radio interface layer <b>672</b> or via a wired connection between the mobile computing device <b>600</b> and a separate computing device associated with the mobile computing device <b>600</b>, for example, a server computer in a distributed computing network, such as the Internet. As should be appreciated such data/information may be accessed via the mobile computing device <b>600</b> via the radio interface layer <b>672</b> or via a distributed computing network. Similarly, such data/information may be readily transferred between computing devices for storage and use according to well-known data/information transfer and storage means, including electronic mail and collaborative data/information sharing systems.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates one aspect of the architecture of a system for processing data received at a computing system from a remote source, such as a personal computer <b>704</b>, tablet computing device <b>706</b>, or mobile computing device <b>708</b>, as described above. Content displayed at server device <b>702</b> may be stored in different communication channels or other storage types. For example, various documents may be stored using a directory service <b>722</b>, a web portal <b>724</b>, a mailbox service <b>726</b>, an instant messaging store <b>728</b>, or a social networking site <b>730</b>.</p><p id="p-0082" num="0081">A memory image engine <b>720</b> may be employed by a client that communicates with server device <b>702</b>, and/or memory image analyzer <b>721</b> may be employed by server device <b>702</b>. The server device <b>702</b> may provide data to and from a client computing device such as a personal computer <b>704</b>, a tablet computing device <b>706</b> and/or a mobile computing device <b>708</b> (e.g., a smart phone) through a network <b>715</b>. By way of example, the computer system described above may be embodied in a personal computer <b>704</b>, a tablet computing device <b>706</b> and/or a mobile computing device <b>708</b> (e.g., a smart phone). Any of these embodiments of the computing devices may obtain content from the store <b>716</b>, in addition to receiving graphical data useable to be either pre-processed at a graphic-originating system, or post-processed at a receiving computing system.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an exemplary tablet computing device <b>800</b> that may execute one or more aspects disclosed herein. In addition, the aspects and functionalities described herein may operate over distributed systems (e.g., cloud-based computing systems), where application functionality, memory, data storage and retrieval and various processing functions may be operated remotely from each other over a distributed computing network, such as the Internet or an intranet. User interfaces and information of various types may be displayed via on-board computing device displays or via remote display units associated with one or more computing devices. For example, user interfaces and information of various types may be displayed and interacted with on a wall surface onto which user interfaces and information of various types are projected. Interaction with the multitude of computing systems with which embodiments of the invention may be practiced include, keystroke entry, touch screen entry, voice or other audio entry, gesture entry where an associated computing device is equipped with detection (e.g., camera) functionality for capturing and interpreting user gestures for controlling the functionality of the computing device, and the like.</p><p id="p-0084" num="0083">As will be understood from the foregoing disclosure, one aspect of the technology relates to a system comprising: at least one processor; and memory storing instructions that, when executed by the at least one processor, causes the system to perform a set of operations. The set of operations comprises: obtaining a historical memory image of an execution environment; processing the historical memory image to generate a set of environment characteristics for the execution environment; evaluating the set of environment characteristics to identify an issue of the execution environment; and generating, based on the identified issue, a historical issue alert for the execution environment. In an example, the identified issue was unknown when the historical memory image was captured. In another example, the historical memory image is a first historical memory image; the set of environment characteristics is a first set of environment characteristics; and the set of operations further comprises: obtaining a second historical memory image of the section environment; and evaluating a second set of environment characteristics associated with the second historical memory image to determine the issue was not present in the execution environment when the second historical memory image was captured. In a further example, the historical memory image is a differentially encoded historical memory image associated with an earlier historical memory image of the execution environment. In yet another example, evaluating the set of environment characteristics comprises: providing the set of environment characteristics to a software information and event management (SIEM) solution; and receiving, from the SIEM solution, an indication of the identified issue. In a further still example, processing the historical memory image comprises preprocessing the historical memory image to identify non-contiguous data resulting from address space layout randomization by the execution environment. In an example, the set of environment characteristics is identified based on additional information associated with the execution environment; and the additional information is correlated with the historical memory image.</p><p id="p-0085" num="0084">In another aspect, the technology relates to a method for processing a historical memory image. The method comprises: obtaining a historical memory image of an execution environment; evaluating a set of environment characteristics associated with a preprocessed representation of the historical memory image to identify an issue of the execution environment, wherein the identified issue was unknown when the historical memory image was captured; and generating, based on the identified issue, a historical issue alert for the execution environment. In an example, the preprocessed representation of the historical memory image is cached for the execution environment. In another example, the set of environment characteristics is cached for the execution environment. In a further example, the method further comprises: processing the cached preprocessed representation of the historical memory image to generate the set of environment characteristics for the execution environment. In yet another example, the method further comprises: identifying non-contiguous data resulting from address space layout randomization by the execution environment to generate the preprocessed representation of the historical memory image. In a further still example, the historical memory image is immutable.</p><p id="p-0086" num="0085">In a further aspect, the technology relates to a method for retrospective memory analysis. The method comprises: obtaining a historical memory image of an execution environment; processing the historical memory image to generate a set of environment characteristics for the execution environment; evaluating the set of environment characteristics to identify an issue of the execution environment; and generating, based on the identified issue, a historical issue alert for the execution environment. In an example, the identified issue was unknown when the historical memory image was captured. In another example, the historical memory image is a first historical memory image; the set of environment characteristics is a first set of environment characteristics; and the method further comprises: obtaining a second historical memory image of the section environment; and evaluating a second set of environment characteristics associated with the second historical memory image to determine the issue was not present in the execution environment when the second historical memory image was captured. In a further example, the historical memory image is a differentially encoded historical memory image associated with an earlier historical memory image of the execution environment. In yet another example, evaluating the set of environment characteristics comprises: providing the set of environment characteristics to a software information and event management (SIEM) solution; and receiving, from the SIEM solution, an indication of the identified issue. In a further still example, processing the historical memory image comprises preprocessing the historical memory image to identify non-contiguous data resulting from address space layout randomization by the execution environment. In an example, the set of environment characteristics is identified based on additional information associated with the execution environment; and the additional information is correlated with the historical memory image.</p><p id="p-0087" num="0086">Aspects of the present disclosure, for example, are described above with reference to block diagrams and/or operational illustrations of methods, systems, and computer program products according to aspects of the disclosure. The functions/acts noted in the blocks may occur out of the order as shown in any flowchart. For example, two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order, depending upon the functionality/acts involved.</p><p id="p-0088" num="0087">The description and illustration of one or more aspects provided in this application are not intended to limit or restrict the scope of the disclosure as claimed in any way. The aspects, examples, and details provided in this application are considered sufficient to convey possession and enable others to make and use the best mode of claimed disclosure. The claimed disclosure should not be construed as being limited to any aspect, example, or detail provided in this application. Regardless of whether shown and described in combination or separately, the various features (both structural and methodological) are intended to be selectively included or omitted to produce an embodiment with a particular set of features. Having been provided with the description and illustration of the present application, one skilled in the art may envision variations, modifications, and alternate aspects falling within the spirit of the broader aspects of the general inventive concept embodied in this application that do not depart from the broader scope of the claimed disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system comprising:<claim-text>at least one processor; and</claim-text><claim-text>memory storing instructions that, when executed by the at least one processor, causes the system to perform a set of operations, the set of operations comprising:<claim-text>obtaining a historical memory image of an execution environment;</claim-text><claim-text>processing the historical memory image to generate a set of environment characteristics for the execution environment;</claim-text><claim-text>evaluating the set of environment characteristics to identify an issue of the execution environment; and</claim-text><claim-text>generating, based on the identified issue, a historical issue alert for the execution environment.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the identified issue was unknown when the historical memory image was captured.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the historical memory image is a first historical memory image;</claim-text><claim-text>the set of environment characteristics is a first set of environment characteristics; and</claim-text><claim-text>the set of operations further comprises:<claim-text>obtaining a second historical memory image of the section environment; and</claim-text><claim-text>evaluating a second set of environment characteristics associated with the second historical memory image to determine the issue was not present in the execution environment when the second historical memory image was captured.</claim-text></claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the historical memory image is a differentially encoded historical memory image associated with an earlier historical memory image of the execution environment.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein evaluating the set of environment characteristics comprises:<claim-text>providing the set of environment characteristics to a software information and event management (SIEM) solution; and</claim-text><claim-text>receiving, from the SIEM solution, an indication of the identified issue.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein processing the historical memory image comprises preprocessing the historical memory image to identify non-contiguous data resulting from address space layout randomization by the execution environment.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the set of environment characteristics is identified based on additional information associated with the execution environment; and</claim-text><claim-text>the additional information is correlated with the historical memory image.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A method for processing a historical memory image, the method comprising:<claim-text>obtaining a historical memory image of an execution environment;</claim-text><claim-text>evaluating a set of environment characteristics associated with a preprocessed representation of the historical memory image to identify an issue of the execution environment, wherein the identified issue was unknown when the historical memory image was captured; and</claim-text><claim-text>generating, based on the identified issue, a historical issue alert for the execution environment.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the preprocessed representation of the historical memory image is cached for the execution environment.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the set of environment characteristics is cached for the execution environment.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the method further comprises:<claim-text>processing the cached preprocessed representation of the historical memory image to generate the set of environment characteristics for the execution environment.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>identifying non-contiguous data resulting from address space layout randomization by the execution environment to generate the preprocessed representation of the historical memory image.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the historical memory image is immutable.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A method for retrospective memory analysis, the method comprising:<claim-text>obtaining a historical memory image of an execution environment;</claim-text><claim-text>processing the historical memory image to generate a set of environment characteristics for the execution environment;</claim-text><claim-text>evaluating the set of environment characteristics to identify an issue of the execution environment; and</claim-text><claim-text>generating, based on the identified issue, a historical issue alert for the execution environment.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the identified issue was unknown when the historical memory image was captured.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein:<claim-text>the historical memory image is a first historical memory image;</claim-text><claim-text>the set of environment characteristics is a first set of environment characteristics; and</claim-text><claim-text>the method further comprises:<claim-text>obtaining a second historical memory image of the section environment; and</claim-text><claim-text>evaluating a second set of environment characteristics associated with the second historical memory image to determine the issue was not present in the execution environment when the second historical memory image was captured.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the historical memory image is a differentially encoded historical memory image associated with an earlier historical memory image of the execution environment.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein evaluating the set of environment characteristics comprises:<claim-text>providing the set of environment characteristics to a software information and event management (SIEM) solution; and</claim-text><claim-text>receiving, from the SIEM solution, an indication of the identified issue.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein processing the historical memory image comprises preprocessing the historical memory image to identify non-contiguous data resulting from address space layout randomization by the execution environment.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein:<claim-text>the set of environment characteristics is identified based on additional information associated with the execution environment; and</claim-text><claim-text>the additional information is correlated with the historical memory image.</claim-text></claim-text></claim></claims></us-patent-application>