<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004640A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004640</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17839372</doc-number><date>20220613</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>55</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>56</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>028</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>062</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>552</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>554</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>567</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1416</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1441</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0263</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1425</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>028</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>062</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1408</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">APPARATUS AND METHOD FOR CONDUCTING ENDPOINT-NETWORK-MONITORING</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16984068</doc-number><date>20200803</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11361071</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17839372</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15959037</doc-number><date>20180420</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10762201</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16984068</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62487792</doc-number><date>20170420</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Huntress Labs Incorporated</orgname><address><city>Elicott City</city><state>MD</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>NOETH</last-name><first-name>Robert Julian</first-name><address><city>San Antonio</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>AKE</last-name><first-name>Earnest Gregory</first-name><address><city>San Antonio</city><state>TX</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Huntress Labs Incorporated</orgname><role>02</role><address><city>Elicott City</city><state>MD</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Provided is an intrusion detection technique configured to: obtain kernel-filter criteria indicative of which network traffic is to be deemed potentially malicious, determine that a network packet is resident in a networking stack, access at least part of the network packet, apply the kernel-filter criteria to the at least part of the network packet and, based on applying the kernel-filter criteria, determining that the network packet is potentially malicious, associate the network packet with an identifier of an application executing in userspace of the operating system and to which or from which the network packet is sent, and report the network packet in association with the identifier of the application to an intrusion-detection agent executing in userspace of the operating system of the host computing device, the intrusion-detection agent being different from the application to which or from which the network packet is sent.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="213.53mm" wi="156.38mm" file="US20230004640A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="227.25mm" wi="158.41mm" file="US20230004640A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="187.62mm" wi="164.68mm" file="US20230004640A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="186.86mm" wi="165.35mm" file="US20230004640A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="167.89mm" wi="164.51mm" file="US20230004640A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="195.50mm" wi="144.36mm" file="US20230004640A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="174.50mm" wi="163.49mm" file="US20230004640A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. Non-Provisional application Ser. No. 16/984,068, filed on Aug. 3, 2020, titled &#x201c;APPARATUS AND METHOD FOR CONDUCTING ENDPOINT-NETWORK-MONITORING,&#x201d; which is a continuation of U.S. Non-Provisional application Ser. No. 15/959,037, filed Apr. 20, 2018, titled &#x201c;APPARATUS AND METHOD FOR CONDUCTING ENDPOINT-NETWORK-MONITORING&#x201d; (now U.S. Pat. No. 10,762,201), which claims the benefit of U.S. Provisional Patent Application 62/487,792, filed Apr. 20, 2017, titled &#x201c;APPARATUS AND METHOD FOR CONDUCTING ENDPOINT-NETWORK-MONITORING AND PACKET TAGGING.&#x201d; The entire content of each afore-listed earlier-filed application is hereby incorporated by reference for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">1. Field</heading><p id="p-0003" num="0002">The present disclosure relates generally to cyber security and, more specifically, to conducting endpoint-network-monitoring.</p><heading id="h-0004" level="1">2. Description of the Related Art</heading><p id="p-0004" num="0003">Often, businesses and other entities operating networks of computing devices seek to secure those computing devices and the network from malicious actors, such as hackers seeking to exploit data extracted through the network or interfere with operation of the network. One class of tools for securing such networks are intrusion detection systems. These systems often include an appliance or executable code that monitors communications via the network. Such systems are often used to detect patterns in network traffic or computer usage indicative of an attack. Such systems, however, are often expensive to install and difficult to operate, in part due to the complexity that can arise from the way existing techniques scale with larger, more complex networks or collections of networks.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0005" num="0004">The following is a non-exhaustive listing of some aspects of the present techniques. These and other aspects are described in the following disclosure.</p><p id="p-0006" num="0005">Some aspects include a process, including: instantiating, with one or more processors, a networking-stack, intrusion-detection kernel driver in kernel space of an operating system of a host computing device connected to a network, where the kernel driver is configured to: obtain kernel-filter criteria indicative of which network traffic is to be deemed potentially malicious, determine that a network packet is resident in a networking stack of the operating system of the host computing device, access at least part of the network packet, apply the kernel-filter criteria to the at least part of the network packet and, based on applying the kernel-filter criteria, determining that the network packet is potentially malicious, associate the network packet with an identifier of an application executing in userspace of the operating system and to which or from which the network packet is sent, and report the network packet in association with the identifier of the application to an intrusion-detection agent executing in userspace of the operating system of the host computing device, the intrusion-detection agent being different from the application to which or from which the network packet is sent; and instantiating, with one or more processors, the intrusion-detection agent in userspace of the operating system of the host computing device, wherein the intrusion-detection agent is configured to: obtain threat-classification criteria indicative of which reports of network packets identify potential attacks; access the report of the network packet from the networking-stack, intrusion-detection kernel driver; identify the application from the report of the network packet; access a forensic record associated with the application in memory by the operating system; apply the threat-classification criteria to the report of the network packet and the forensic record and, based on applying the threat-classification criteria, classify the network packet as malicious; and in response to classifying the network packet as malicious, recording an indication of the classification in memory, wherein: the intrusion-detection agent is configured to report the classification to a security event processing system via a network; and the operations comprise instantiating the security event processing system on one or more computing devices other than the host computing device, wherein the security event processing system is configured to: receive the report of the classification and reports of a plurality of other classifications from other instances of the intrusion-detection agent executing on other computing devices, and determine that an attack is occurring or is potentially occurring based on the report of the classification and reports of a plurality of other classifications from other instances of the intrusion-detection agent executing on other computing devices.</p><p id="p-0007" num="0006">Some aspects include a tangible, non-transitory, machine-readable medium storing instructions that when executed by a data processing apparatus cause the data processing apparatus to perform operations including the above-mentioned process.</p><p id="p-0008" num="0007">Some aspects include a system, including: one or more processors; and memory storing instructions that when executed by the processors cause the processors to effectuate operations of the above-mentioned process.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">The above-mentioned aspects and other aspects of the present techniques will be better understood when the present application is read in view of the following figures in which like numbers indicate similar or identical elements:</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a logical and physical architecture block diagram that shows an example of a computing environment by which the present techniques may be implemented;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a mixed flow chart and logical architecture block diagram that shows an example of analysis of outgoing traffic within a given computing device in accordance with some embodiments;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a mixed flow chart and logical architecture block diagram that shows an example of analysis of incoming network traffic in accordance with some embodiments;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a data model diagram that shows an example of a packet tag being inserted in a minute protocol version 4 packet in accordance with some embodiments;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a logical architecture diagram that shows an example of how some embodiments may interact with a network stack within a computing device in accordance with some embodiments; and</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an example of a computing device by which the present techniques may be implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0016" num="0015">While the present techniques are susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. The drawings may not be to scale. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the present techniques to the particular form disclosed, but to the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present techniques as defined by the appended claims.</p><heading id="h-0007" level="1">DETAILED DESCRIPTION OF CERTAIN EMBODIMENTS</heading><p id="p-0017" num="0016">To mitigate the problems described herein, the inventors had to both invent solutions and, in some cases just as importantly, recognize problems overlooked (or not yet foreseen) by others in the field of cyber security. Indeed, the inventors wish to emphasize the difficulty of recognizing those problems that are nascent and will become much more apparent in the future should trends in industry continue as the inventors expect. Further, because multiple problems are addressed, it should be understood that some embodiments are problem-specific, and not all embodiments address every problem with traditional systems described herein or provide every benefit described herein. That said, improvements that solve various permutations of these problems are described below.</p><p id="p-0018" num="0017">Many existing intrusion detection systems are preventative in focus. Such systems are often designed to identify and deny malware-based attacks upon (and responsive to) instantiation of the attack. Despite these measures, advanced adversaries are often still able to bypass systems implementing traditional approaches. If attackers can bypass these controls, they effectively have free range over the system, data, and user engagement with that system.</p><p id="p-0019" num="0018">Most traditional intrusion detection systems have either been network centric or host centric. Network intrusion detection systems (NIDS) often are based on appliances positioned at chock points on a network (e.g., routers or switches), and such systems typically detect intrusions by inspecting passing network traffic (e.g., at the header level or in some cases with deep packet inspection) and detecting offending patterns or policy violations. In contrast, host intrusion detection systems (HIDS) typically execute on network hosts (e.g., the endpoint computing devices executing on a network). HIDS often analyze executable code and behavior of the host computing device and detect intrusions based on the available information. Both NIDS and HIDS present tradeoffs, such as ease of deployment, response times, and different vulnerabilities, some of which are expected to become more severe in the near future.</p><p id="p-0020" num="0019">HIDS often rely on signature or other patterns (e.g., in virus signature databases) in malware, which with increasing regularity are often defeated by varying the code with which malware functionality is expressed, for instance by injecting malware code into various otherwise non-malicious executables, recompiling malware source code, encrypting malware code with a random salt, or polymorphic viruses.</p><p id="p-0021" num="0020">NIDS on the other hand, are going (at least partially) blind due to changes in networking standards and usage of transport-layer and application-layer encryption. As a result, existing security tools for network traffic analysis are lacking in various respects. This is true of both hardware and software implementations. Generally, these analytic tools and processes model the network as a singular entity disparate from the endpoints (servers, user workstations) that generate the passively observed network traffic. Increased use of network encryption technologies (such as Transport Layer Security (TLS) and Virtual Private Network (VPN)s) make this task more complex and defeat many forms of pattern matching and policy enforcement. In many cases, both analysts and security products fail to accurately identify malicious traffic passively within the network when these encryption technologies are employed. The amount of context available to a NIDS for any given packet is decreasing, and this is expected to make these systems more vulnerable.</p><p id="p-0022" num="0021">To combat this, previously TLS decryption appliances have been deployed at the gateway of enterprise networks providing visibility into the content of these encrypted communications. However, with the impending approval and future adoption of TLS <b>1</b>.<b>3</b>, it is expected that there will be no feasible mechanism to decrypt TLS traffic live or offline at a later date. Often the information by which attacks are detected is encrypted at the point of inspection, impairing or blocking use of traditional approaches. It is expected that the current network security technologies will fail to provide value to the organization and new solutions will be needed to give context to these encrypted sessions while increasing security of the communication, system, and users.</p><p id="p-0023" num="0022">Indeed, the compounding effect of singular focused network analysis tools and limited to no visibility within network subnets provides ample cover for malicious actors to exploit and move within the network virtually undetected. This process is referred to as &#x2018;pivoting&#x2019; in the network and is what malicious hackers do to maintain multiple accesses and footholds in the network. Prime examples of this attack technique were used in large hacks in the news in recent years. These techniques were used to evade network security professionals from removing the threats therein. In many cases, some of the best companies in network defense were employed, but due to the inherent nature of endpoint and network forensics being dissimilar tradecraft; hackers were able to exploit this gap in visibility to obtain and maintain network access.</p><p id="p-0024" num="0023">Vulnerability can take various forms. False positives can be just as damaging as false negatives. The amount of events to be analyzed on a given network in a given day can exceed tens or hundreds of millions of distinct events, any one of which can cause a pattern match or policy violation. Even a false positive rate of 0.001% can overwhelm information technology staff and cause them to disable or downgrade protections. Thus, accuracy, both for type 1 and type 2 errors, is critical.</p><p id="p-0025" num="0024">Hybrid-NIDS-and-HIDS systems have been proposed. Such systems combine data and analyses from network monitoring with data and analyses from monitoring applications executing on the host system. Such systems, however, are often overly taxing on the host system's resources and constrained in the range of activities monitored on the host system, e.g., focusing on the above-described types of pattern detection that is readily defeated with increasing regularity.</p><p id="p-0026" num="0025">The inventors have realized that these issues with hybrid NIDS-and-HIDS systems can be mitigated by integrating the NIDS functionality into a kernel driver that applies a first-pass filter to detected events and integrating that functionality with an expanded view of the host device's activities afforded by an agent executing in userspace of the host machine. Analyzing network traffic with a kernel driver affords a privileged view on the operation of the network stack generally not available to applications executing in userspace of the host machine (i.e., a region of virtual memory isolated from kernel memory), including all packets sent and received by all applications, with access available at each level of encapsulation, ranging from Ethernet frames, to IP packets encapsulated in the Ethernet frames, to TCP packets encapsulated in the IP packets. Shielding the agent executing on the host from the computational load of executing a full analysis on every packet is expected to conserve computing resources and afford faster analysis of packets, and dynamically adjusting the first pass filter responsive to context detected by the host or a cloud-based component, is expected to allow the tradeoff between computational load and error rate to be dynamically modulated as is appropriate to current conditions (e.g., favoring a more conservative analysis when the probability of an attack is determined to be relatively high). Some embodiments aggregate data and analyses across hosts to detect network-wide patterns, consolidate reporting, and dynamically adjust analyses on one host responsive to attacks detected on other hosts. Some embodiments may afford on-host intrusion detection and prevent in real time, as the attack is occurring, in some cases applying preventative or ameliorative measures before the attack is effected, e.g., within less than I second of an attack beginning, within less than 500 milliseconds, within less than I00 milliseconds, or within less than I0 milliseconds.</p><p id="p-0027" num="0026">Some embodiments may address additional attack vectors through packet tagging approaches. It should be emphasized, though, the embodiments are not limited to systems applying these techniques, which is not to suggest that any other description is limiting. Many of the problems expected to emerge in the coming years were baked into the Internet from its early design. Internet Protocol (IP) addressing and the underlying models such as the Open Systems Interconnection (OSI) and TCP/IP outline the methods for modulating and demodulating packet data so that computers on dissimilar networks can communicate seamlessly with one another. This open model for communication was a boon for the creation and expansion of the internet, but did not account for the security needs that would soon materialize.</p><p id="p-0028" num="0027">Attacks such as spoofing and man-in-the-middle (MITM) attacks have prospered in recent years. The inventors believe this to be the case because there is no effective security mechanisms incorporated into the IP stack. Likewise, the inventors have realized that because there are no &#x2018;source-host&#x2019; validation mechanisms within the IP stack or previously mentioned models, there lies no clear mechanism to provide alternate validation or multi-factor authentication and approval of communications within the network. A review of both the OSI and TCP/IP models identify the layers that handle the physical and logical communication mechanism and loosely describe the &#x2018;application layer&#x2019;. This is the application that is generating or receiving data via the network. This can be in the form of Microsoft Outlook, Google Chrome, or a malicious Remote Administration/Access Tool (RAT). Without knowing what the host is doing, most passive network solutions fail to identify the context of the communication and the potential threat that each application presents, in part, due to impaired network and endpoint forensics. The collection, extraction, analysis and correlation of these events to one another can take hours to days for a singular event of interest. This does not scale and further provides malicious actors time to complete their objectives.</p><p id="p-0029" num="0028">To mitigate these issues and others, some embodiments execute targeted forensic activities and advanced modeling prediction based upon network initiation by attackers (e.g., by malware composed on controlled by an attacker). The inventors have realized that communication is the most vulnerable event an adversary must undertake. Almost every malware or non-malware attack requires communication across a network to be successful. Leveraging this insight, embodiments are configured as described below to identify advanced and staged attacks overlooked and undiscovered by other detection and preventative means.</p><p id="p-0030" num="0029">Some embodiments implement a three-stage architecture that ranges from kernel level access, through userland code in the operating system of an individual computing device (or other host, e.g., virtual machine, container, unikemel, etc), to network-level and multi-tenant views of threats implemented with distributed applications, like cloud-based security event processing systems. In some cases, the finest grained, most privileged access is obtained at the kernel level with a kernel driver described below that monitors and in some cases exercises control of a networking stack of the operating system. That driver may interface with an agent executing in userland space of the operating system, which may access various application program interfaces of the operating system to monitor and in some cases control various aspects of applications executing on the host device. The agent may in turn interface with a cloud-based security event processing system that aggregates data from (and in some cases controls security-related processes of) a plurality of computing devices (or other hosts), each having a respective instance of the driver and agent. In some cases, the security event processing system may aggregate data subnet-wide, across subnets, and in some cases, across tenants to afford a global view on potential attacks.</p><p id="p-0031" num="0030">The kernel driver may be configured to execute in various host operating systems, including Windows&#x2122;, Linux&#x2122;, and Apple MacOS&#x2122;. The driver may access the most granular and highest bandwidth set of data for a given computing device relative to the other components, in some cases analyzing every packet (or frame) sent or received by a given host. Such analysis may reveal various events detected by the driver, which may be sent to the agent, and which may cause the agent to conduct targeted data collection and forensic analysis tasks. Resulting information may be funneled by the driver to the agent as a data source to conduct triggered analysis. The kernel may provide a ground truth to process initiation by the agent, and in some cases, the driver may also deny and disrupt network events once identified as malicious or unallowed by the agent. In some cases, the driver may implement some or all of the following functionality:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0031">a. Captures network traffic;</li>        <li id="ul0002-0002" num="0032">b. Performs filtering to include collection of all or partial content as well as packet source, destination, port blocking;</li>        <li id="ul0002-0003" num="0033">c. Sends copy to agent component (e.g., of data passing filters, or responsive to detecting a pattern in network traffic specified by the rules);</li>        <li id="ul0002-0004" num="0034">d. Receives rules from agent component to update/modify filter rules;</li>        <li id="ul0002-0005" num="0035">e. Injecting &#x201c;packet tags&#x201d; providing true source identifiers in both TCP and UDP packets or in some embodiments, packet tags may be inserted at layers, for example in IP headers; and</li>        <li id="ul0002-0006" num="0036">f. Executing active defense measures (e.g., responsive to the rules or instructions from the agent), such as traffic redirection/forwarding, data flow throttling, timeout, and data injection.</li>    </ul>    </li></ul></p><p id="p-0032" num="0037">The agent may execute in user space of the host OS of the device executing the driver. The agent may gather information based upon a trigger it receives from the driver or tasking. The agent may manage tasks ranging from agent health, installation, uninstallation, communication with command and control, as well as interacting with the kernel and conducting forensic and analytic processes of the acquired forensic data. The agent may source and validate data to be forwarded to the analytic cloud for processing, e.g., by a remote security event processing system. Further, the agent may conduct regular (e.g., periodic) surveys of the system, users, permissions, patch/configuration status and vulnerabilities. In some cases, the driver may implement some or all of the following functionality:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0038">a. Utilizes network trigger via kernel driver to engage m targeted forensic and investigative analysis of the communicant source.</li>        <li id="ul0004-0002" num="0039">b. Injects configurable time delay to identify, correlate, and acqmre memory snapshot of communicating process in memory space.</li>        <li id="ul0004-0003" num="0040">c. Communicates with kernel driver module to update, define, cancel filtering and collection rulesets for network event data to include creating block lists or firewall rules.</li>        <li id="ul0004-0004" num="0041">d. Correlates network event triggers and application to systems event logs.</li>        <li id="ul0004-0005" num="0042">e. Agent modules conduct forensic processes, e.g., accessing memory, file, registry, configuration, process, users, network, system events to gather data about processes in question for maliciousness classification.</li>        <li id="ul0004-0006" num="0043">f. Utilizes heuristic and machine learning engine to ascertain predictions of maliciousness and outlier events of acquired and analyzed data.</li>        <li id="ul0004-0007" num="0044">g. Creates local data store of gathered information and sends telemetry data to cloud store.</li>        <li id="ul0004-0008" num="0045">h. Agent can send regular telemetry events or urgent notifications/alert messages to the cloud data store for expedient processing</li>        <li id="ul0004-0009" num="0046">i. Receives tasking events from cloud and authorized users of the cloud</li>    </ul>    </li></ul></p><p id="p-0033" num="0047">In some embodiments, the kernel driver associates network packets with explicit unique identifiers of user space applications, such as process identifiers. In some embodiments, the kernel driver associates network packets with an identifier of an application that indirectly identifies the application. Examples of such identifiers of applications include an identifier of a network socket that the application has registered to use with the operating system. Some embodiments may associate the network packet with the identifier of the network socket or similar value, and that value may be mapped to a process identifier by the agent executing in user space.</p><p id="p-0034" num="0048">In some embodiments, the cloud based (or on-premises) security event processing system provides a strategic view of the network for comparing/contrasting events across customer datasets to identify scaled targeting campaigns and increase accuracy of data model sets. In some embodiments, analytics in the cloud (e.g., in an instance of the security event processing system hosted in a remote data center accessed via the Internet from monitored networks) identify anomalous outliers, events that match known malicious patterns or events that simply do not comply with the customer's network policy. Some implementations may, in response to detected anomalies, pattern matches, or policy violations, send a message alerting a customer, and some implementations of the cloud analytic components may task (e.g., send a message instructing) the offending system/agent for more corroborating evidence/data. This automation is expected to reduce time loss in current security operations. In some traditional systems, humans receive alerts, and then have to utilize a myriad of tools and expertise to gather evidence, rank the threat, and engage in steps to deny and remediate. This can be extremely time consuming or in some cases never accomplished because humans are easily overwhelmed by the sheer number of alerts. Furthermore, human engagement with embodiments&#x2014;tasking agents, closing alerts, answering simple questions about the alert type, accuracy, remediation steps, etc., provides a training set by which these human triggered events and behavior are used to train an artificial intelligence algorithm to mimic human behavior and respond to alerts. Some embodiments train the system to determine the most efficient (or more efficient that some options) data needed to make a prediction and recommendation (and even automatically remediate the issue) of what is malicious and how to deal with it based upon monitoring and classifying human interaction with the system. Some embodiments, thus, may afford a self-defending network using AI. (None of which is to suggest that systems relying on human intervention or any other feature is disclaimed.) To these and other ends, some embodiments of the security event processing system include the following functionality:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0049">a. Creates holistic record of agent installations and associated telemetry data.</li>        <li id="ul0006-0002" num="0050">b. Scaled data analytic models identify outliers of events and patterns of known malicious activity to alert and engage with associated agents to acquire current/corroborating data and/or to remediate and deny continued malicious activity in the network.</li>        <li id="ul0006-0003" num="0051">c. Provides data store to conduct analytics and analysis for various stakeholders.</li>        <li id="ul0006-0004" num="0052">d. Contain profiles associated to machine, network address, and users</li>        <li id="ul0006-0005" num="0053">e. Utilizing adversarial neural networks, advanced models may conduct a series of automated requests and analysis of cloud data stores and tasked endpoint agent collection to create deterministic predictions of maliciousness based on classifiers of historical events, open source data, and recorded user/human engagement with the platform.</li>    </ul>    </li></ul></p><p id="p-0035" num="0054">Some embodiments may implement some of the above approaches with ensemble modeling techniques, neural networks, decision trees, classification trees, clustering algorithms, and in some cases, an adversarial neural network may be trained with reinforcement learning based upon human/system interaction (e.g., by training an agent model on the human interaction and then pitting the agent model against the adversarial neural network.</p><p id="p-0036" num="0055"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example of a computing environment <b>10</b> by which the present techniques may be implemented. The illustrated computing environment <b>10</b> includes a plurality of subnets <b>12</b> connected to one another via the Internet <b>16</b> and each in communication with a security event processing system <b>14</b>. In some embodiments, the set of subnets <b>12</b> may each correspond to different subnets of a single organization, for instance each corresponding to a different geolocation of the organization. In some embodiments, each of the subnets <b>12</b> may include a subnetwork <b>18</b>, such as a network having a private Internet protocol address space. In some embodiments, the subnet <b>18</b> may be connected to the Internet <b>16</b> via a router and may include various switches by which the different illustrated computing devices <b>20</b> on the subnet <b>18</b> communicate. In some embodiments, each of the computing devices <b>20</b> may include a network interface <b>22</b>, system memory <b>24</b>, and an operating system <b>26</b>. In some embodiments, the network interface <b>22</b> may be a ethernet network interface or a Wi-Fi network interface. In some embodiments, system memory <b>24</b> is dynamic random-access memory storing both program code and network traffic being sent or received in buffers. In some embodiments, the operating system <b>26</b> may execute within the operating system <b>26</b> a Col. network interface driver <b>32</b>, which may exchange network communications with various applications <b>28</b> via network sockets <b>30</b>. In some embodiments, applications <b>28</b> may register with the operating system <b>26</b> to send or receive data via respective network sockets <b>30</b>. In some embodiments, the operating system <b>26</b> may include a network stack by which information being sent or received on the network is encapsulated into packets or decapsulated from packets.</p><p id="p-0037" num="0056">In some embodiments, the various user computing devices <b>20</b> may communicate with one another via various protocols. In some embodiments, these protocols may include the Internet protocol such as Internet Protocol version 4 or Internet Protocol version 6. Some embodiments may also communicate via transmission control protocol (TCP), user datagram protocol (UDP), or various other transport layer protocols, for instance with packets in one protocol being encapsulated as payloads in other, lower level protocols.</p><p id="p-0038" num="0057">In some embodiments, the computing devices <b>20</b> may implement techniques described below by which network traffic is monitored and classified, and the computing devices <b>20</b> may aggregate this information and send the gathered information to the security event processing system <b>14</b>, which may aggregate information from a plurality of different user computing devices <b>20</b>, for instance on a single subnet or a plurality of subnets <b>12</b>.</p><p id="p-0039" num="0058">In computing environments like that of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, some embodiments provide multi-factor authentication of internal network communications (e.g., at layers below the application layer, such as at the transport or network layer). Further, some embodiments provide universal host identification. Some embodiments achieve one or both of these results by implementing a packet injected identifier. This identifier, in some embodiments, is unique for each host and may be transmitted in the IP header, e.g., within the OPTIONS field, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Placing this information in the IP header is expected to allow for more uniformity in the protocol instead of implementing unique tags for UDP, TCP, and ICMP (though embodiments are also consistent with monitoring and injection of identifiers in headers of these protocols as well). Also, in the case of IPSEC or potentially other encryption schemes, the underlying headers may be obscured and/or immutable. By only modifying the IP header, embodiments are expected to allow for a more consistent packet structure and data offset, for reading and writing of the tag data (though again, other aspects of network traffic may be modified in some embodiments). This, in turn, is expected to allow embodiments to passively identify hosts on the network and rapidly correlate the sender and if the traffic is legitimate or not as such in the case of spoofing or man in the middle attacks. Depending on the needs of the network, the ID can be static, dynamic, encoded, or encrypted. (See IPv4 Packet Tag diagram).</p><p id="p-0040" num="0059">In some embodiments, a unique identifier may be injected into each packet transmitted from the host. In some cases, the identifier is an identifier of the host and distinguishes the host from other hosts (e.g., endpoints on a network, such as computing devices having respective addresses on the network). In some cases, the unique identifier is injected in the network stack of an operating system, outside of userland portions of the OS. In some cases, the identifier is injected after handoff of network traffic from an application to a network socket. In some cases, the identifier is injected before packets are placed in buffers in system member, e.g., before firmware of a network interface retrieves the packets (e.g., via direct memory access) to a first-in-first-out buffer of the network interface. Or in some cases, firmware of the network interface may be configured to insert the identifiers, e.g., upon loading to the FIFO or upon reading from the FIFO. In some cases, encryption may be certificate based, e.g., based on a certificate issued by a certificate authority to an entity operating the security event processing system. In some cases, the secret identifiers may be associated with hosts in the security event processing system, but the secret identifiers may be concealed in network traffic and to receiving computing devices by encryption.</p><p id="p-0041" num="0060">In various embodiments, identifier can be encrypted, encoded, static or dynamic. In some embodiments the identifiers are a digital signature (e.g., of the packet, or of a secret identifier of the host (e.g., one that is concealed from a party viewing network traffic). In some cases, a secret identifier of each host may be encrypted with a public key of the security event processing system. Thus, some embodiments may implement asymmetric public key encryption to encrypt the unique identifiers (which in some cases is independent of any encryption applied to payloads of packets). In some cases, encryption may be certificate based, e.g., based on a certificate issued by a certificate authority to an entity operating the security event processing system. In some cases, the secret identifiers may be associated with hosts in the security event processing system, but the secret identifiers may be concealed in network traffic and to receiving computing devices by encryption.</p><p id="p-0042" num="0061">In some cases, the unique identifiers allow for other hosts to quickly identify true-source-sender of packet data. For instance, upon receiving a packet, some embodiments may parse a header to retrieve the identifier. Some embodiments may send the encrypted identifier to the security event processing system <b>14</b>, which may decrypt the identifier and determine it is authentic (e.g., determine that it matches a secret identifier of a known host), and send a response indicating that the packet is safe to advance through a network stack. In some cases, a receiving device may initiate this process periodically, upon a new session, or for a certain percentage of packets from a give host.</p><p id="p-0043" num="0062">Thus, some embodiments provide for multi-factor authentication and source host validation not natively provided in the IP framework.</p><p id="p-0044" num="0063">In some embodiments, the packet tag (e.g., the unique identifier) can be applied in software at the OS network stack or in a firmware/hardware solution built into a machine's NIC. The packet tag can also be read either by a machine with an agent installed (e.g., in a driver), or a networking device able to parse the IP header and read the packet tag.</p><p id="p-0045" num="0064">Some embodiments include a software mechanism in the form of a kernel driver that provides visibility into the raw communications path of the host. This provides some embodiments the ability to manipulate the packets, collect verbose data from the network communication, and a mechanism to correlate the application and the generated network communications observed, as shown in <figref idref="DRAWINGS">FIGS. <b>2</b>, <b>3</b>, and <b>5</b></figref>.</p><p id="p-0046" num="0065"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a hybrid flowchart and architecture block diagram depicting processing of outgoing network traffic within one of the above-described computing devices. In some embodiments, the computing device <b>50</b> may include an application <b>60</b> that initiates a new connection, for instance by opening or accessing a network socket of the computing device <b>50</b>. As illustrated, the operating system may enforce different levels of privilege in userland <b>52</b> and kernel space <b>54</b>. The illustrated application <b>60</b> may generate outgoing network traffic, as indicated by operation IA This outgoing network traffic may be processed by a network stack <b>62</b> of the computing device <b>50</b>. In some embodiments, the network stack <b>62</b> may segment application-layer communications into quantized units of application-layer data, package those quantize units into transport-layer network packets, and then package those transport-layer network packets into network-layer network packets that are provided to a network interface for transmission on a physical media <b>56</b>.</p><p id="p-0047" num="0066">During this process, a kernel driver like that described below with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref> and elsewhere herein may inspect the outgoing traffic and associate packets with identifiers of applications sending that network traffic, as indicated by operation <b>2</b>A. In some embodiments, the kernel driver may apply kernel-filter criteria indicative of which network traffic is to be deemed potentially malicious. In some embodiments, the filter criteria may include a white list or blacklist of Internet Protocol addresses, ports, protocols, or the like designating these attributes (or combinations thereof) as indicative of malicious acts or not indicative of malicious acts. In some embodiments, the filter criteria may include patterns, such as regular expressions, applied to metadata of packets or payloads of packets indicative of malicious acts or non-malicious usage. In some embodiments, the filter criteria may include models trained on historical network traffic and configured to output an indication of whether new network traffic is anomalous relative to historical usage patterns. In some cases, inputs to the model may include a time of day of transmission, sender or receiver network address report, protocol, terms appearing within payloads, rates of transmission or reception, or rates of transmission or reception of packets having various attributes like those described. In some cases, anomalies may be detected by training a hidden Markov model or recurrent neural network on historical network traffic, for example, on collections of sessions, and some embodiments may assign probabilities to various attributes of subsequently received network packets given a sequence of previously received (e.g., received by the driver and either being sent or received by the computing device). Upon receiving a network packet having less than a threshold probability, that network packet may be deemed anomalous and potentially indicative of an attack. In other examples, anomalies may be detected by training a clustering model on historical network traffic, for instance a density-based clustering algorithm, like DB-SCAN, CLARANS, or OPTICS. Some embodiments may represent attributes of historical network traffic as scalars in a packet or session vector, and some embodiments may determine clusters of those vectors from historical network traffic. Upon receiving later packets, some embodiments may determine whether the later received packet (or session) is an outlier relative to these previously determined clusters by representing the newly received packet (or session) as a vector and determining whether the vector is part of one of the previously determine clusters (e.g., is within a convex hull or has less than at threshold distance in vector space to a member thereof).</p><p id="p-0048" num="0067">In some embodiments, the resulting network packet information may be logged to a listening application (e.g., an intrusion-detection agent) with details about the communication, as indicated by operation <b>3</b>A. Those details may include metadata of the packet, such as header information at various layers, the identifier of the application, identifiers of one or more filter criteria applied by the kernel driver indicating which criteria were satisfied or not satisfied, a timestamp of the network packet, and the like. In some embodiments, this log information may be processed by an agent <b>58</b>, which in some cases may associate the logged information with additional forensic data gathered from user land application program interfaces of the operating system, like those described elsewhere herein. In some embodiments, the agent <b>58</b> may apply various criteria to determine whether the resulting aggregate information indicates a potential attack is occurring, and in some cases report this information into the cloud for further processing and aggregation and correlation across different computing devices, for instance by the security event processing system <b>14</b>. In some embodiments, these various components may modify one another's rules responsive to results of analyses.</p><p id="p-0049" num="0068">In some embodiments, the intrusion detection agent may associate with the reports of network packets (which may include reports of sessions containing such packets) additional forensic information about the corresponding application to which or from which the network packets are sent or received. In some cases, this may include accessing via application program interfaces of the operating system exposed to userspace applications various attributes of the identified application associated with the reports of network packets. Examples include memory utilization, access to various files, changes to various files, changes to registry settings, CPU utilization, rates of reading or writing to storage, crash reports, system events, and the like.</p><p id="p-0050" num="0069">In some embodiments, this forensic information may be associated with the report of the network packet from the driver, and some embodiments may compare the resulting data set to various threat-classification criteria indicative of which reports of network packets identify potential attacks. The threat-classification criteria may take various forms, including specified rules in a policy, patterns indicative of known types of attacks that are hand coded or adjusted with machine learning techniques, and trained models by which anomalous behavior may be detected. In some embodiments, techniques like those described above may be applied by the agent to the larger suite of data available upon marrying the forensic information with the network packet reports. In some embodiments, upon criteria being satisfied (e.g. a binary result of true or false, depending upon semantic value, or upon a threshold being exceeded or not being exceeded, depending upon sign of scores, some embodiments may determine that a network packet (e.g., a session including a network packet, or an individual packet) should be deemed malicious. Responsive to detecting a pattern, the agent may instruct the driver to take remedial actions like those described elsewhere herein, adjust criteria, or gather and report back more information. In some embodiments, upon network traffic being deemed malicious, or upon generating metrics indicative of aggregate properties of malicious and non-malicious network traffic, results may be reported to the security event processing system <b>14</b>, for example, via a local area network and the Internet.</p><p id="p-0051" num="0070">In some embodiments, the security event processing system may be on premises or off premises, for example, in a remote data center, and may be a distributed application that aggregates intrusion detection reports from a plurality of computing devices on one or more subnets. In some embodiments, the security event processing system <b>14</b> is configured to detect patterns across a plurality of computing devices reports within a given network, within a given tenant's data, or cross data from multiple tenants. Pattern detection may take various forms, examples including detecting anomalous network-wide patterns, for example rates of network traffic satisfying various criteria that are more than a threshold number of standard deviations from a mean rate, detecting a change in graph attributes of pairwise communication graphs, like a change in between this centrality of a communication graphs of network endpoints of greater than a threshold amount, detecting changes in a measure of central tendency (such as mean, median, or mode) of various forensic attributes associated with network traffic reported by agents across the network, and the like. Responsive to detecting a pattern, the security event processing system may instruct agents to take remedial actions like those described elsewhere herein, adjust criteria, or gather and report back more information.</p><p id="p-0052" num="0071"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a hybrid flowchart and architecture block diagram depicting outgoing network traffic of a computing device <b>70</b>, which may be the same as the computing device <b>50</b> in some cases. Operations like those described above may be applied to the outgoing network traffic. In some embodiments, an application receiving a new network connection or traffic in existing network connection may receive that data via the network stack <b>62</b> of the computing device <b>70</b>. In some embodiments, incoming network traffic may be received from a physical media <b>56</b>, as indicated by operation IB. In some embodiments, the incoming network traffic may be processed by the network stack <b>62</b>, which in some cases may reverse the operations described above and route the assembled information to the appropriate application <b>60</b>, some in some cases subject to intervention and processing by a kernel driver like that described elsewhere herein. In some embodiments, the kernel driver may inspect incoming traffic and associate the incoming traffic with an identifier of the application to which the network traffic is addressed, as indicated by operation <b>2</b>B. In some embodiments, this information may be logged to a listening application, as indicated by operation <b>3</b>B, such as the agent <b>58</b>. In some embodiments, information from the kernel driver may then be combined with forensic data and applied to various criteria to determine whether a potential attack is occurring, as indicated by operation <b>4</b>B.</p><p id="p-0053" num="0072"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example of a network-layer network packet <b>80</b>, such as an Internet protocol packet having a network tag <b>82</b> injected. In this example, the network tag <b>82</b> may include a header and <b>84</b> and a packet tag <b>86</b>, which in some cases may be inserted in an optional field of an Internet protocol packet <b>80</b>.</p><p id="p-0054" num="0073"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of a kernel driver <b>92</b> interfacing with the network stack <b>62</b> of an operating system <b>90</b>. As mentioned, the kernel driver may send events and information to a userland module <b>58</b>, such as the above-described intrusion-detection agent executing in user space.</p><p id="p-0055" num="0074">The deployed kernel driver on the end-host is expected to provide access, visibility, and mutability of network communications. In many cases, if the driver were not located in the OS kernel, the software would not have the required privileges to modify the packets and would only be able to read them. (Though other embodiments may implement this technique with firmware, e.g., executing on the NIC.) This also is expected to allow for functionality such as terminating an established connection or preventing one from occurring. All of which are generally not possible at the non-kernel layers of the OS. The term &#x201c;kernel driver&#x201d; is used herein to refer to code that is afforded the privileges associated with a driver operating in kernel space, and the term is not limited to a single process and is not limited to code that serves as the primary interface between the OS and a peripheral, which is not to suggest that any other description herein is limiting.</p><p id="p-0056" num="0075">Generally, modem operating systems maintain a layer of abstraction between the address space of the physical memory of the computing (e.g., random access memory) and the address space presented to applications executing on the computing device. Virtual memory techniques map process-specific memory address spaces to physical memory and thereby prevent one process from reading or writing to physical memory allocated to another process. Similar techniques isolate privileged OS processes, like the kernel, from userspace (also called userland) applications, the latter being the types of applications one typically installs within the operating system and accesses, such as productivity suite applications, games, web browsers, and the like. In some embodiments, the OS shields userspace applications from memory management tasks, like explicitly managing how memory is paged, managing process context switching, and interfacing with interrupts, interrupt request levels, and accessing hardware registers. Kernel drivers, in contrast, often undertake these tasks and are afforded a more privileged view of the operation of the OS.</p><p id="p-0057" num="0076">In some embodiments, kernel (and thus the kernel driver) visibility provides &#x2018;ground truth&#x2019; of application Process Identifier (PID) to provide correlation of network events to the associated application's PID in the event that malicious software is misinforming higher layer APIs in the operating system. By placing the driver as low as possible in the kernel stack, embodiments circumvent theses APIs and gather more accurate information via the driver than is available directly to userspace applications. In some cases, a PID of a process (e.g., and related data) that subscribes to a socket to which a packet is addressed or from which a packet is sent may be associated with a unique identifier of a packet and reported to the security event processing system <b>14</b> (or otherwise used to analyze and enrich network communications to detect attacks).</p><p id="p-0058" num="0077">In some embodiments, this implementation could be moved into a firmware driver for a NIC and provide a similar mechanism as the software only version and allow for the same reading and modifying of network packets in and out of the system</p><p id="p-0059" num="0078">The correlation of data, in some embodiments, is performed when the source or destination application of the packet on the machine is determined. Once the application which initiated or is receiving the packet is ascertained, further information about that application can be collected to verify the connection to make an educated decision on whether or not this communication is or is not malicious (or ascribe some probabilistic score), as shown in the network tipping mechanism diagrams of <figref idref="DRAWINGS">FIGS. <b>2</b> and <b>3</b></figref>. In some cases, the analysis may be made partially or entirely locally (at a host) or at the security event processing system <b>14</b>, which may send instructions back to a driver to block further network traffic (e.g., from or to a particular host or application PID) upon detecting an attack.</p><p id="p-0060" num="0079">In some embodiments, the kernel driver has access to all layers of the network stack from within the kernel. In some cases, it only modifies packets at the IP layer however, as expressed above, due to the fact that that is generally the last layer before the Ethernet header is applied (and, thus, contains a relatively full set of data describing context of the payload, like source and sender IP address, source and sender port, packet sequence identifiers, session identifiers, and protocol identifiers) and the last layer that can be modified with a packet tag. Inspection of network packets however, can happen at any layer affording a view of any viable information to determine which application is sending or receiving said packet. The driver may be located above the hardware layer so that technologies like virtual network switching and receive side scaling can perform their operations prior to the network packet being made available to the kernel driver, allowing for visibility of the majority of network traffic in and out of the host computer, in some embodiments.</p><p id="p-0061" num="0080">In some embodiments, the kernel driver interfaces with an emulated networking stack of a virtual machine and a different kernel driver interfaces with a networking stack of a host machine on which one or more instances of the virtual machine execute. In some cases, the kernel driver obtains partially or fully formed network communications, e.g., a packet that will be, or was, encapsulated in a lower-level protocol, like in the payload of an Ethernet frame, and operates upon the obtained network communication, e.g., parsing headers information, decapsulating payloads, and repeating for higher-levels of encapsulation. In some cases, the resulting record is associated with a process identifier, filtered, and if it passes the filter, is reported to the agent executing in userspace by the kernel driver.</p><p id="p-0062" num="0081">Reporting may take various forms, including accessing, with the kernel driver, memory addresses allocated to the userspace agent, and writing reported values to those addresses, e.g., in a ring buffer having a read pointer and a write pointer, and some embodiments may update the write pointer to a next open address after writing. Or reporting may be implemented via a system call or via the networking stack, for instance, by sending an API call to the agent via a port assigned to the agent and a loopback IP address of the host machine. Reports may be in the form of a pointer or a copy of data. The report may be of an entire packet, metadata of a packet (e.g., any data of the packet other than the payload), a classification of the packet, or a statistic or analysis based on the packet (e.g., a classification of a set of packets, like in a TCP session).</p><p id="p-0063" num="0082">Applicants are said to have &#x201c;sent&#x201d; network packets upon that application handing off data that populates a payload of that packet (or a payload of another packet encapsulated by that network packet) upon the application handing off the data to the networking stack. Thus, a packet need not have left the NIC for it to be said to have been &#x201c;sent&#x201d; by the application.</p><p id="p-0064" num="0083">In some embodiments, the security event processing system <b>14</b> may aggregate events (e.g., reports indicating a unique identifier of a received packet or a sent packet and a sender or receiver identifier, in some cases along with PID information) from each of the computing devices, e.g., across a subnet <b>12</b> and in some cases, across multiple subnets <b>12</b>. Some embodiments may detect anomalous patterns in these records and instruct drivers on computing devices via the networks to block certain traffic deemed higher risk.</p><p id="p-0065" num="0084">In some embodiments, the operating systems described above also run a userland module (e.g., an agent) that receives the packet-related reports noted above and enriches them with PID-related information of a PID registered in the OS with a sending or receiving network socket of the packet. Examples include enriching with identifying parent or child services and other related Pills, identifying ranges of memory in which the code of the process is executing, retrieving portions of that code or applying various queries (e.g., regular expressions) against that code to detect known threats, etc.</p><p id="p-0066" num="0085">Thus, some embodiments may provide enhanced security without requiring highly-trained security staff to properly configure a network intrusion detection appliance on each subnet. Further, because the detection techniques are endpoint based, the processing power and analysis is distributed in some embodiments, allowing the system to scale with the size of the network.</p><p id="p-0067" num="0086"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram that illustrates an exemplary computing system <b>1000</b> in accordance with embodiments of the present technique. Various portions of systems and methods described herein, may include or be executed on one or more computer systems similar to computing system <b>1000</b>. Further, processes and modules described herein may be executed by one or more processing systems similar to that of computing system <b>1000</b>.</p><p id="p-0068" num="0087">Computing system <b>1000</b> may include one or more processors (e.g., processors <b>1010</b><i>a</i>-<b>1010</b><i>n</i>) coupled to system memory <b>1020</b>, an input/output I/O device interface <b>1030</b>, and a network interface <b>1040</b> via an input/output (I/O) interface <b>1050</b>. A processor may include a single processor or a plurality of processors (e.g., distributed processors). A processor may be any suitable processor capable of executing or otherwise performing instructions. A processor may include a central processing unit (CPU) that carries out program instructions to perform the arithmetical, logical, and input/output operations of computing system <b>1000</b>. A processor may execute code (e.g., processor firmware, a protocol stack, a database management system, an operating system, or a combination thereof) that creates an execution environment for program instructions. A processor may include a programmable processor. A processor may include general or special purpose microprocessors. A processor may receive instructions and data from a memory (e.g., system memory <b>1020</b>). Computing system <b>1000</b> may be a uni-processor system including one processor (e.g., processor <b>1010</b><i>a</i>), or a multi-processor system including any number of suitable processors (e.g., <b>1010</b><i>a</i>-<b>1010</b><i>n</i>). Multiple processors may be employed to provide for parallel or sequential execution of one or more portions of the techniques described herein. Processes, such as logic flows, described herein may be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating corresponding output. Processes described herein may be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Computing system <b>1000</b> may include a plurality of computing devices (e.g., distributed computer systems) to implement various processing functions.</p><p id="p-0069" num="0088">I/O device interface <b>1030</b> may provide an interface for connection of one or more I/O devices <b>1060</b> to computer system <b>1000</b>. I/O devices may include devices that receive input (e.g., from a user) or output information (e.g., to a user). I/O devices <b>1060</b> may include, for example, graphical user interface presented on displays (e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor), pointing devices (e.g., a computer mouse or trackball), keyboards, keypads, touchpads, scanning devices, voice recognition devices, gesture recognition devices, printers, audio speakers, microphones, cameras, or the like. I/O devices <b>1060</b> may be connected to computer system <b>1000</b> through a wired or wireless connection. I/O devices <b>1060</b> may be connected to computer system <b>1000</b> from a remote location. I/O devices <b>1060</b> located on remote computer system, for example, may be connected to computer system <b>1000</b> via a network and network interface <b>1040</b>.</p><p id="p-0070" num="0089">Network interface <b>1040</b> may include a network adapter that provides for connection of computer system <b>1000</b> to a network. Network interface may <b>1040</b> may facilitate data exchange between computer system <b>1000</b> and other devices connected to the network. Network interface <b>1040</b> may support wired or wireless communication. The network may include an electronic communication network, such as the Internet, a local area network (LAN), a wide area network (WAN), a cellular communications network, or the like.</p><p id="p-0071" num="0090">System memory <b>1020</b> may be configured to store program instructions <b>1100</b> or data <b>1110</b>. Program instructions <b>1100</b> may be executable by a processor (e.g., one or more of processors <b>1010</b><i>a</i>-<b>1010</b><i>n</i>) to implement one or more embodiments of the present techniques. Instructions <b>1100</b> may include modules of computer program instructions for implementing one or more techniques described herein with regard to various processing modules. Program instructions may include a computer program (which in certain forms is known as a program, software, software application, script, or code). A computer program may be written in a programming language, including compiled or interpreted languages, or declarative or procedural languages. A computer program may include a unit suitable for use in a computing environment, including as a stand-alone program, a module, a component, or a subroutine. A computer program may or may not correspond to a file in a file system. A program may be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program may be deployed to be executed on one or more computer processors located locally at one site or distributed across multiple remote sites and interconnected by a communication network.</p><p id="p-0072" num="0091">System memory <b>1020</b> may include a tangible program earner having program instructions stored thereon. A tangible program carrier may include a non-transitory computer readable storage medium. A non-transitory computer readable storage medium may include a machine readable storage device, a machine readable storage substrate, a memory device, or any combination thereof. Non-transitory computer readable storage medium may include non-volatile memory (e.g., flash memory, ROM, PROM, EPROM, EEPROM memory), volatile memory (e.g., random access memory (RAM), static random access memory (SRAM), synchronous dynamic RAM (SDRAM)), bulk storage memory (e.g., CD-ROM and/or DVD-ROM, hard-drives), or the like. System memory <b>1020</b> may include a non-transitory computer readable storage medium that may have program instructions stored thereon that are executable by a computer processor (e.g., one or more of processors <b>1010</b><i>a</i>-<b>1010</b><i>n</i>) to cause the subject matter and the functional operations described herein. A memory (e.g., system memory <b>1020</b>) may include a single memory device and/or a plurality of memory devices (e.g., distributed memory devices). Instructions or other program code to provide the functionality described herein may be stored on a tangible, non-transitory computer readable media. In some cases, the entire set of instructions may be stored concurrently on the media, or in some cases, different parts of the instructions may be stored on the same media at different times.</p><p id="p-0073" num="0092">I/O interface <b>1050</b> may be configured to coordinate I/O traffic between processors <b>1010</b><i>a</i>-<b>1010</b><i>n</i>, system memory <b>1020</b>, network interface <b>1040</b>, I/O devices <b>1060</b>, and/or other peripheral devices. I/O interface <b>1050</b> may perform protocol, timing, or other data transformations to convert data signals from one component (e.g., system memory <b>1020</b>) into a format suitable for use by another component (e.g., processors <b>1010</b><i>a</i>-<b>1010</b><i>n</i>). I/O interface <b>1050</b> may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard.</p><p id="p-0074" num="0093">Embodiments of the techniques described herein may be implemented using a single instance of computer system <b>1000</b> or multiple computer systems <b>1000</b> configured to host different portions or instances of embodiments. Multiple computer systems <b>1000</b> may provide for parallel or sequential processing/execution of one or more portions of the techniques described herein.</p><p id="p-0075" num="0094">Those skilled in the art will appreciate that computer system <b>1000</b> is merely illustrative and is not intended to limit the scope of the techniques described herein. Computer system <b>1000</b> may include any combination of devices or software that may perform or otherwise provide for the performance of the techniques described herein. For example, computer system <b>1000</b> may include or be a combination of a cloud-computing system, a data center, a server rack, a server, a virtual server, a desktop computer, a laptop computer, a tablet computer, a server device, a client device, a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a vehicle-mounted computer, or a Global Positioning System (GPS), or the like. Computer system <b>1000</b> may also be connected to other devices that are not illustrated, or may operate as a stand-alone system. In addition, the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly, in some embodiments, the functionality of some of the illustrated components may not be provided or other additional functionality may be available.</p><p id="p-0076" num="0095">Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used, these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively, in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter-computer communication. Some or all of the system components or data structures may also be stored (e.g., as instructions or structured data) on a computer-accessible medium or a portable article to be read by an appropriate drive, various examples of which are described above. In some embodiments, instructions stored on a computer-accessible medium separate from computer system I <b>000</b> may be transmitted to computer system I <b>000</b> via transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network or a wireless link. Various embodiments may further include receiving, sending, or storing instructions or data implemented in accordance with the foregoing description upon a computer-accessible medium. Accordingly, the present techniques may be practiced with other computer system configurations.</p><p id="p-0077" num="0096">In block diagrams, illustrated components are depicted as discrete functional blocks, but embodiments are not limited to systems in which the functionality described herein is organized as illustrated. The functionality provided by each of the components may be provided by software or hardware modules that are differently organized than is presently depicted, for example such software or hardware may be intermingled, conjoined, replicated, broken up, distributed (e.g. within a data center or geographically), or otherwise differently organized. The functionality described herein may be provided by one or more processors of one or more computers executing code stored on a tangible, non-transitory, machine readable medium. In some cases, notwithstanding use of the singular term &#x201c;medium,&#x201d; the instructions may be distributed on different storage devices associated with different computing devices, for instance, with each computing device having a different subset of the instructions, an implementation consistent with usage of the singular term &#x201c;medium&#x201d; herein. In some cases, third party content delivery networks may host some or all of the information conveyed over networks, in which case, to the extent information (e.g., content) is said to be supplied or otherwise provided, the information may be provided by sending instructions to retrieve that information from a content delivery network.</p><p id="p-0078" num="0097">The reader should appreciate that the present application describes several independently useful techniques. Rather than separating those techniques into multiple isolated patent applications, applicants have grouped these techniques into a single document because their related subject matter lends itself to economies in the application process. But the distinct advantages and aspects of such techniques should not be conflated. In some cases, embodiments address all of the deficiencies noted herein, but it should be understood that the techniques are independently useful, and some embodiments address only a subset of such problems or offer other, unmentioned benefits that will be apparent to those of skill in the art reviewing the present disclosure. Due to costs constraints, some techniques disclosed herein may not be presently claimed and may be claimed in later filings, such as continuation applications or by amending the present claims. Similarly, due to space constraints, neither the Abstract nor the Summary of the Invention sections of the present document should be taken as containing a comprehensive listing of all such techniques or all aspects of such techniques.</p><p id="p-0079" num="0098">It should be understood that the description and the drawings are not intended to limit the present techniques to the particular form disclosed, but to the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present techniques as defined by the appended claims. Further modifications and alternative embodiments of various aspects of the techniques will be apparent to those skilled in the art in view of this description. Accordingly, this description and the drawings are to be construed as illustrative only and are for the purpose of teaching those skilled in the art the general manner of carrying out the present techniques. It is to be understood that the forms of the present techniques shown and described herein are to be taken as examples of embodiments. Elements and materials may be substituted for those illustrated and described herein, parts and processes may be reversed or omitted, and certain features of the present techniques may be utilized independently, all as would be apparent to one skilled in the art after having the benefit of this description of the present techniques. Changes may be made in the elements described herein without departing from the spirit and scope of the present techniques as described in the following claims. Headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description.</p><p id="p-0080" num="0099">As used throughout this application, the word &#x201c;may&#x201d; is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). The words &#x201c;include&#x201d;, &#x201c;including&#x201d;, and &#x201c;includes&#x201d; and the like mean including, but not limited to. As used throughout this application, the singular forms &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; include plural referents unless the content explicitly indicates otherwise. Thus, for example, reference to &#x201c;an element&#x201d; or &#x201c;a element&#x201d; includes a combination of two or more elements, notwithstanding use of other terms and phrases for one or more elements, such as &#x201c;one or more.&#x201d; The term &#x201c;or&#x201d; is, unless indicated otherwise, non-exclusive, i.e., encompassing both &#x201c;and&#x201d; and &#x201c;or.&#x201d; Terms describing conditional relationships, e.g., &#x201c;in response to X, Y,&#x201d; &#x201c;upon X, Y,&#x201d;, &#x201c;if X, Y,&#x201d; &#x201c;when X, Y,&#x201d; and the like, encompass causal relationships in which the antecedent is a necessary causal condition, the antecedent is a sufficient causal condition, or the antecedent is a contributory causal condition of the consequent, e.g., &#x201c;state X occurs upon condition Y obtaining&#x201d; is generic to &#x201c;X occurs solely upon Y&#x201d; and &#x201c;X occurs upon Y and Z.&#x201d; Such conditional relationships are not limited to consequences that instantly follow the antecedent obtaining, as some consequences may be delayed, and in conditional statements, antecedents are connected to their consequents, e.g., the antecedent is relevant to the likelihood of the consequent occurring. Statements in which a plurality of attributes or functions are mapped to a plurality of objects (e.g., one or more processors performing steps A, B, C, and D) encompasses both all such attributes or functions being mapped to all such objects and subsets of the attributes or functions being mapped to subsets of the attributes or functions (e.g., both all processors each performing steps A-D, and a case in which processor I performs step A, processor <b>2</b> performs step B and part of step C, and processor <b>3</b> performs part of step C and step D), unless otherwise indicated. Further, unless otherwise indicated, statements that one value or action is &#x201c;based on&#x201d; another condition or value encompass both instances in which the condition or value is the sole factor and instances in which the condition or value is one factor among a plurality of factors. Unless otherwise indicated, statements that &#x201c;each&#x201d; instance of some collection have some property should not be read to exclude cases where some otherwise identical or similar members of a larger collection do not have the property, i.e., each does not necessarily mean each and every. Limitations as to sequence of recited steps should not be read into the claims unless explicitly specified, e.g., with explicit language like &#x201c;after performing X, performing Y,&#x201d; in contrast to statements that might be improperly argued to imply sequence limitations, like &#x201c;performing X on items, performing Yon the X'ed items,&#x201d; used for purposes of making claims more readable rather than specifying sequence. Statements referring to &#x201c;at least Z of A, B, and C,&#x201d; and the like (e.g., &#x201c;at least Z of A, B, or C&#x201d;), refer to at least Z of the listed categories (A, B, and C) and do not require at least Z units in each category. Unless specifically stated otherwise, as apparent from the discussion, it is appreciated that throughout this specification discussions utilizing terms such as &#x201c;processing,&#x201d; &#x201c;computing,&#x201d; &#x201c;calculating,&#x201d; &#x201c;determining&#x201d; or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic processing/computing device. Features described with reference to geometric constructs, like &#x201c;parallel,&#x201d; &#x201c;perpendicular/orthogonal,&#x201d; &#x201c;square&#x201d;, &#x201c;cylindrical,&#x201d; and the like, should be construed as encompassing items that substantially embody the properties of the geometric construct, e.g., reference to &#x201c;parallel&#x201d; surfaces encompasses substantially parallel surfaces. The permitted range of deviation from Platonic ideals of these geometric constructs is to be determined with reference to ranges in the specification, and where such ranges are not stated, with reference to industry norms in the field of use, and where such ranges are not defined, with reference to industry norms in the field of manufacturing of the designated feature, and where such ranges are not defined, features substantially embodying a geometric construct should be construed to include those features within 15% of the defining attributes of that geometric construct.</p><p id="p-0081" num="0100">In this patent, certain U.S. patents, U.S. patent applications, or other materials (e.g., articles) have been incorporated by reference. The text of such U.S. patents, U.S. patent applications, and other materials is, however, only incorporated by reference to the extent that no conflict exists between such material and the statements and drawings set forth herein. In the event of such conflict, the text of the present document governs, and terms in this document should not be given a narrower reading in virtue of the way in which those terms are used in other materials incorporated by reference.</p><p id="p-0082" num="0101">The present techniques will be better understood with reference to the following enumerated embodiments:</p><p id="p-0083" num="0000">1. A tangible, non-transitory, machine-readable medium storing instructions that when executed by one or more processors effectuate operations comprising: instantiating, with one or more processors, a networking-stack, intrusion-detection kernel driver in kernel space of an operating system of a host computing device connected to a network, where the kernel driver is configured to: obtain kernel-filter criteria indicative of which network traffic is to be deemed potentially malicious, determine that a network packet is resident in a networking stack of the operating system of the host computing device, access at least part of the network packet, apply the kernel-filter criteria to the at least part of the network packet and, based on applying the kernel-filter criteria, determining that the network packet is potentially malicious, associate the network packet with an identifier of an application executing in userspace of the operating system and to which or from which the network packet is sent, and report the network packet in association with the identifier of the application to an intrusion-detection agent executing in userspace of the operating system of the host computing device, the intrusion-detection agent being different from the application to which or from which the network packet is sent; and instantiating, with one or more processors, the intrusion-detection agent in userspace of the operating system of the host computing device, wherein the intrusion-detection agent is configured to: obtain threat-classification criteria indicative of which reports of network packets identify potential attacks; access the report of the network packet from the networking-stack, intrusion-detection kernel driver; identify the application from the report of the network packet; access a forensic record associated with the application in memory by the operating system; apply the threat-classification criteria to the report of the network packet and the forensic record and, based on applying the threat-classification criteria, classify the network packet as malicious; and in response to classifying the network packet as malicious, recording an indication of the classification in memory.<br/>2. The medium of embodiment 1, wherein: the intrusion-detection agent is configured to report the classification to a security event processing system via a network; and the operations comprise instantiating the security event processing system on one or more computing devices other than the host computing device, wherein the security event processing system is configured to: receive the report of the classification and reports of a plurality of other classifications from other instances of the intrusion-detection agent executing on other computing devices, and determine that an attack is occurring or is potentially occurring based on the report of the classification and reports of a plurality of other classifications from other instances of the intrusion-detection agent executing on other computing devices.<br/>3. The medium of embodiment 2, wherein: the security event processing system is configured to: determine an adjustment to the threat-classification criteria in response to the determination that an attack is occurring or is potentially occurring, and instruct the intrusion detection agent to adjust the threat-classification criteria to apply criteria that have a larger computational load than criteria applied before the adjustment; and the intrusion-detection agent is configured to adjust the threat-classification criteria and apply the adjusted thread-classification criteria in response to the instruction.<br/>4. The medium of embodiment 3, wherein: the intrusion-detection agent is configured to: determine to adjust the kernel-filter criteria in response to instruction from the security event processing system.<br/>5. The medium of any one of embodiments 1-4, wherein: the intrusion-detection agent is configured to: determine to adjust the kernel-filter criteria in response to classifying the network packet as malicious, and instruct the networking-stack, intrusion-detection kernel driver to apply adjusted kernel-filter criteria, wherein the adjusted kernel-filter criteria filter out less information reported to the intrusion-detection agent after the adjustment than before the adjustment.<br/>6. The medium of any one of embodiments 1-5, wherein: the kernel-filter criteria comprise rules white listing or black listing network addresses or ports.<br/>7. The medium of any one of embodiments 1-6, wherein: the kernel-filter criteria comprise a rule specifying a maximum amount or rate of communication to, from, or through a network host or set of network hosts.<br/>8. The medium of any one of embodiments 1-7, wherein: the kernel-filter criteria comprise a rule specifying a transport-layer protocol, a port, and a set of network addresses for which packets are to be deemed malicious or non-malicious.<br/>9. The medium of any one of embodiments 1-8, wherein: the kernel-filter criteria comprise: a model configured to output a score indicative of whether a packet is anomalous, the model being trained on historical network communication of the computing device or other computing devices, and a rule specifying a threshold score that when satisfied indicates the network packet is malicious.<br/>10. The medium of embodiment 9. wherein: output of the model is based on the following inputs to the model: a time of day of the packet; past packets in a session including the packet; a port number from which the packet is sent; a port number to which the packet is sent; a transport layer protocol of the packet or encapsulated payload of the packet; and an application name associated with the application identifier.<br/>11. The medium of any one of embodiments 1-10, wherein: determining that a network packet is resident in a networking stack of the operating system of the host computing device comprises receiving an interrupt indicating that an Internet Protocol packet is ready to be written to a buffer of a network interface.<br/>12. The medium of any one of embodiments 1-11, wherein accessing at least part of the network packet comprises: parsing a first header from the network packet; parsing sender network address from the first header of the network packet; parsing a receiving network address from the first header of the network packet; decapsulating an encapsulated packet from a payload of the network packet; parsing a second header from the encapsulated packet; parsing a sender port from the second header; parsing a receiver port from the second header; and determining a transport layer protocol of the encapsulated packet.<br/>13. The medium of any one of embodiments 1-12, wherein: associating the network packet with the identifier of the application executing in userspace of the operating system and to which or from which the network packet is sent comprises associating the network packet with a process identifier assigned to the application by the operating system, the application being one of a plurality of applications executing in the operating system, each respective application being assigned a different process identifier by the operating system.<br/>14. The medium of any one of embodiments 1-13, wherein: the threat-classification criteria comprise: an anomaly detection model; a pattern that specifies both features of the report of the network packet and features of the forensic record; and a policy specifying permitted or prohibited behavior by network traffic and permitted or prohibited forensic state of an application executing on the operating system.<br/>15. The medium of any one of embodiments 1-14, wherein:</p><p id="p-0084" num="0102">the forensic record associated with the application in memory of the operating system includes at least three of the following: memory usage of the application, file state of files read or written by the application, registry state of or accessed by the application, configuration state of the application, process state of the application, user accounts interfacing with the application, network usage by the application, or system events caused by the application.</p><p id="p-0085" num="0000">16. The medium of any one of embodiments 1-15, wherein: the network packet is being sent by the application; and determining that the network packet is potentially malicious is executed before a network interface of the computing device transmits the network packet.<br/>17. The medium of any one of embodiments 1-16, wherein: the network packet is to be received by the application; and determining that the network packet is potentially malicious is executed before application-layer content of the network packet is provided to the application.<br/>18. The medium of any one of embodiments 1-17, wherein: classifying the network packet as malicious is executed in real time.<br/>19. The medium of any one of embodiments 1-18, wherein: the intrusion-detection agent is configured to cause the network packet or subsequent network packets to be blocked before fully traversing the networking stack.<br/>20. The medium of any one of embodiments 1-19, wherein: the intrusion-detection agent is configured to cause the network packet or subsequent network packets to be delayed for a configurable amount of time in response to classifying the network packet as malicious.<br/>21. The medium of any one of embodiments 1-20, wherein: the intrusion-detection agent is configured to cause the network packet or subsequent network packets to be sent to a different network address from that specified by a recipient header of the network packet in response to classifying the network packet as malicious.<br/>22. The medium of any one of embodiments 1-21, wherein: the intrusion-detection agent is configured to rate limit transmission or reception of subsequent network packets in response to classifying the network packet as malicious.<br/>23. The medium of any one of embodiments 1-22, wherein: the intrusion-detection agent is configured to cause payloads of the network packet or subsequent network packets to be modified in response to classifying the network packet as malicious.<br/>24. A method, comprising: the operations of any one of embodiments 1-23.<br/>25. A system, comprising: a plurality of processors; and memory storing instructions that when executed by the processors cause the processors to effectuate operations comprising: the operations of any one of embodiments 1-23.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-20" num="01-20"><claim-text><b>1</b>-<b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A method, comprising:<claim-text>determining, by an intrusion-detection kernel driver instantiated in kernel space of an operating system of a computing device communicatively coupled with a network and based on kernel-filter criteria, that a network packet is potentially malicious;</claim-text><claim-text>associating, by the intrusion-detection kernel driver, the network packet with an identifier of an application executing in userspace of the operating system, the network packet being sent from or to the application; and</claim-text><claim-text>sending, by the intrusion-detection kernel driver, a report of the network packet in association with the identifier of the application to an intrusion-detection agent executing in userspace of the operating system, causing the intrusion-detection agent to determine a malicious classification of the network packet for remediation action determination by applying threat-classification criteria to the report.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein sending the report further causes at least one remediation action to be performed, based on the malicious classification, to block or prevent malicious attacks to the computing device.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the network packet is processed by a network stack of the compute device.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein:<claim-text>sending the report further causes at least one remediation action to be performed, based on the malicious classification, to block or prevent a malicious attack to the computing device; and</claim-text><claim-text>the at least one remediation action is performed such that an existing connection or a subsequent connection between the computing device and the network is disconnected to block or prevent the malicious attack to the computing device.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, further comprising:<claim-text>receiving, at the intrusion-detection kernel driver, instructions from the intrusion-detection agent and based on the malicious classification to block subsequent network traffic sent to at least one of the application or the computing device.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the kernel-filter criteria include at least one of:<claim-text>a rule white listing or black listing network addresses or ports;</claim-text><claim-text>a rule specifying a threshold amount or a threshold rate of communication to, from, or through the computing device; or</claim-text><claim-text>a rule specifying at least one of a transport-layer protocol, a port, or a set of network addresses for which network traffic data are to be deemed malicious or non-malicious.</claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the intrusion-detection kernel driver includes a model configured to output a score indicative of whether the network packet is malicious, the model being trained on historical network communication data of at least one of the computing device or another computing device, and<claim-text>the kernel-filter criteria include a rule specifying a threshold score that when satisfied by the score indicates the network packet is likely malicious.</claim-text></claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the determining that the network packet is potentially malicious includes analyzing the network packet, the analyzing the network packet includes:<claim-text>parsing a sender network address from a first header, the first header being from the network packet;</claim-text><claim-text>parsing a receiving network address from the first header;</claim-text><claim-text>decapsulating an encapsulated packet from a payload of the network packet;</claim-text><claim-text>parsing a sender port from a second header, the second header being from the encapsulated packet;</claim-text><claim-text>parsing a receiver port from the second header; and</claim-text><claim-text>determining a transport layer protocol of the encapsulated packet.</claim-text></claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein:<claim-text>the identifier of the application includes a process identifier assigned to the application by the operating system, the application being from a plurality of applications executable in the operating system, each application from the plurality of applications being assigned a different process identifier by the operating system.</claim-text></claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The method of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the determining that the network packet is potentially malicious is executed before application-layer content of the network packet is provided to the application.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. A method, comprising:<claim-text>receiving, at an intrusion-detection agent and from an intrusion-detection kernel driver, a report of a network packet in association with an identifier of an application in response to a determination&#x2014;that the network packet is potentially malicious, the intrusion-detection kernel driver instantiated in kernel space of an operating system of a computing device communicatively coupled with a network, the intrusion-detection agent executing in userspace of the operating system, the application executing in userspace of the operating system; and</claim-text><claim-text>sending, by the intrusion-detection agent and based on a malicious classification of the network packet based on the report, an instruction to disconnect an existing connection or a subsequent connection between the computing device and the network to block or prevent malicious attacks on the computing device.</claim-text></claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The method of <claim-ref idref="CLM-00031">claim 31</claim-ref>, further comprising:<claim-text>causing the network packet or subsequent network packets to be blocked before fully traversing the networking stack.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The method of <claim-ref idref="CLM-00031">claim 31</claim-ref>, further comprising:<claim-text>accessing, by the intrusion-detection agent and based on the identifier of the application, a forensic record associated with the application; and</claim-text><claim-text>determining, by the intrusion-detection agent, the malicious classification of the network packet by applying a threat-classification criteria to the report and the forensic record.</claim-text></claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The method of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein:<claim-text>the intrusion-detection kernel driver includes a model configured to output a score indicative of whether the network packet is malicious, the model being trained on historical network communication of at least one of the computing device or another computing device;</claim-text><claim-text>the determination that the network packet is potentially malicious is made by the intrusion detection kernel driver based on kernel filter criteria; and</claim-text><claim-text>the kernel-filter criteria include a rule that when satisfied by the score indicates the network packet is malicious.</claim-text></claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. A processor-readable non-transitory medium storing code representing instructions to be executed by a processor, the code comprising code to cause the processor to:<claim-text>collect, by an intrusion-detection kernel driver instantiated in kernel space of an operating system of a computing device communicatively coupled with a network, network traffic data processed by a network stack of the computing device, the network traffic data including a network packet;</claim-text><claim-text>determine, by the intrusion-detection kernel driver and based on a kernel-filter criteria, that the network packet is potentially malicious; and</claim-text><claim-text>receive, from an intrusion-detection agent executing in the operating system and based on a malicious classification of the network packet determined by the intrusion-detection agent in response to the determining that the network pack is potentially malicious, an instruction to adjust an amount of network traffic data that the intrusion-detection kernel driver collects in a subsequent process.</claim-text></claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The processor-readable non-transitory medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the code further comprises code to cause the processor to:<claim-text>associate, by the intrusion detection kernel driver, the network packet with an identifier of an application executing in userspace of the operating system, the network packet sent from or to the application.</claim-text></claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The processor-readable non-transitory medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the code further comprises code to cause the processor to:<claim-text>send, by the intrusion-detection kernel driver, a report of the network packet in association with an identifier of an application executing in userspace of the operating system to the intrusion-detection agent executing in userspace of the operating system.</claim-text></claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The processor-readable non-transitory medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the code further comprises code to cause the processor to:<claim-text>access, by the intrusion-detection agent executing in userspace of the operating system and based on an identifier of an application executing in userspace of the operating system, a forensic record associated with the application.</claim-text></claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The processor-readable non-transitory medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the code further comprises code to cause the processor to:<claim-text>determine, by the intrusion-detection agent executing in userspace of the operating system, the malicious classification of the network packet by applying a threat-classification criteria to a report of the network packet associated with an identifier of an application executing in userspace of the operating system and a forensic record associated with the application.</claim-text></claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The processor-readable non-transitory medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein:<claim-text>the network packet is a first network packet;</claim-text><claim-text>the code further includes code to cause the processor to:<claim-text>collect an adjusted amount of network traffic data processed by the network stack, the adjusted amount of network traffic data including a second network packet; and</claim-text><claim-text>determine, by the intrusion-detection kernel driver and based on an adjusted kernel-filter criteria, that the second network packet is potentially malicious.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>