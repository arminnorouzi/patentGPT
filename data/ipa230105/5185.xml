<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005186A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005186</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17845039</doc-number><date>20220621</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e43">SMART COMPRESSION/DECOMPRESSION SCHEMES FOR EFFICIENCY AND SUPERIOR RESULTS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17011827</doc-number><date>20200903</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11393131</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17845039</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15482803</doc-number><date>20170409</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10769818</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17011827</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Intel Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Appu</last-name><first-name>Abhishek R.</first-name><address><city>El Dorado Hills</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Veernapu</last-name><first-name>Kiran C.</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Surti</last-name><first-name>Prasoonkumar</first-name><address><city>Folsom</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Ray</last-name><first-name>Joydeep</first-name><address><city>Folsom</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Koker</last-name><first-name>Altug</first-name><address><city>El Dorado Hills</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Liskay</last-name><first-name>Eric G.</first-name><address><city>Folsom</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Intel Corporation</orgname><role>02</role><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A mechanism is described for facilitating smart compression/decompression schemes at computing devices. A method of embodiments, as described herein, includes unifying a first compression scheme relating to three-dimensional (3D) content and a second compression scheme relating to media content into a unified compression scheme to perform compression of one or more of the 3D content and the media content relating to a processor including a graphics processor.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="206.33mm" wi="131.91mm" file="US20230005186A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="230.55mm" wi="165.78mm" file="US20230005186A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="227.16mm" wi="133.94mm" file="US20230005186A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="201.68mm" wi="128.02mm" file="US20230005186A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="198.46mm" wi="139.45mm" file="US20230005186A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="227.67mm" wi="172.13mm" file="US20230005186A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="183.47mm" wi="175.43mm" file="US20230005186A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="194.56mm" wi="175.43mm" file="US20230005186A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="179.24mm" wi="175.68mm" file="US20230005186A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="216.92mm" wi="174.92mm" orientation="landscape" file="US20230005186A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="213.28mm" wi="175.68mm" orientation="landscape" file="US20230005186A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="206.08mm" wi="147.32mm" file="US20230005186A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="211.50mm" wi="154.09mm" file="US20230005186A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="164.76mm" wi="173.14mm" file="US20230005186A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="228.18mm" wi="170.86mm" file="US20230005186A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="199.81mm" wi="124.12mm" file="US20230005186A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="228.01mm" wi="169.42mm" file="US20230005186A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="203.96mm" wi="158.24mm" file="US20230005186A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="129.29mm" wi="162.73mm" file="US20230005186A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="144.27mm" wi="110.66mm" file="US20230005186A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="139.19mm" wi="161.46mm" file="US20230005186A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="141.39mm" wi="90.59mm" file="US20230005186A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="208.87mm" wi="150.28mm" file="US20230005186A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="199.14mm" wi="131.23mm" file="US20230005186A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="145.03mm" wi="131.49mm" file="US20230005186A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="231.22mm" wi="172.55mm" file="US20230005186A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="164.51mm" wi="175.18mm" file="US20230005186A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="218.95mm" wi="146.39mm" file="US20230005186A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="165.27mm" wi="136.65mm" file="US20230005186A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="168.74mm" wi="149.52mm" file="US20230005186A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="162.22mm" wi="148.34mm" file="US20230005186A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="209.21mm" wi="140.72mm" orientation="landscape" file="US20230005186A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="132.00mm" wi="173.14mm" file="US20230005186A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="224.87mm" wi="162.05mm" file="US20230005186A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="204.89mm" wi="156.21mm" orientation="landscape" file="US20230005186A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="216.49mm" wi="158.24mm" orientation="landscape" file="US20230005186A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="224.37mm" wi="164.76mm" orientation="landscape" file="US20230005186A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="214.63mm" wi="156.29mm" orientation="landscape" file="US20230005186A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00038" num="00038"><img id="EMI-D00038" he="188.21mm" wi="141.48mm" orientation="landscape" file="US20230005186A1-20230105-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00039" num="00039"><img id="EMI-D00039" he="218.02mm" wi="164.42mm" orientation="landscape" file="US20230005186A1-20230105-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00040" num="00040"><img id="EMI-D00040" he="215.56mm" wi="165.78mm" file="US20230005186A1-20230105-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00041" num="00041"><img id="EMI-D00041" he="222.25mm" wi="154.43mm" file="US20230005186A1-20230105-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00042" num="00042"><img id="EMI-D00042" he="225.89mm" wi="163.75mm" file="US20230005186A1-20230105-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00043" num="00043"><img id="EMI-D00043" he="221.40mm" wi="153.50mm" orientation="landscape" file="US20230005186A1-20230105-D00043.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00044" num="00044"><img id="EMI-D00044" he="202.35mm" wi="136.74mm" file="US20230005186A1-20230105-D00044.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00045" num="00045"><img id="EMI-D00045" he="185.59mm" wi="137.58mm" file="US20230005186A1-20230105-D00045.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00046" num="00046"><img id="EMI-D00046" he="201.76mm" wi="132.84mm" file="US20230005186A1-20230105-D00046.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CLAIM TO PRIORITY</heading><p id="p-0002" num="0001">This application is a continuation of and claims the benefit of and priority to U.S. application Ser. No. 17/011,827, entitled SMART COMPRESSION/DECOMPRESSION SCHEMES FOR EFFICIENCY AND SUPERIOR RESULTS, by Abhishek R. Appu, et al., filed Sep. 3, 2020, now allowed, which is a continuation of and claims the benefit of and priority to U.S. application Ser. No. 15/482,803, entitled SMART COMPRESSION/DECOMPRESSION SCHEMES FOR EFFICIENCY AND SUPERIOR RESULTS, by Abhishek R. Appu, et al., filed Apr. 9, 2017, now U.S. Pat. No. 10,769,818, the entire contents of which are incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">Embodiments described herein relate generally to data processing and more particularly to facilitate smart compression/decompression schemes for efficiency and superior results.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Current parallel graphics data processing includes systems and methods developed to perform specific operations on graphics data such as, for example, linear interpolation, tessellation, rasterization, texture mapping, depth testing, etc. Traditionally, graphics processors used fixed function computational units to process graphics data; however, more recently, portions of graphics processors have been made programmable, enabling such processors to support a wider variety of operations for processing vertex and fragment data.</p><p id="p-0005" num="0004">To further increase performance, graphics processors typically implement processing techniques such as pipelining that attempt to process, in parallel, as much graphics data as possible throughout the different parts of the graphics pipeline. Parallel graphics processors with single instruction, multiple thread (SIMT) architectures are designed to maximize the amount of parallel processing in the graphics pipeline. In an SIMT architecture, groups of parallel threads attempt to execute program instructions synchronously together as often as possible to increase processing efficiency. A general overview of software and hardware for SIMT architectures can be found in Shane Cook, <i>CUDA Programming</i>, Chapter 3, pages 37-51 (2013) and/or Nicholas Wilt, <i>CUDA Handbook, A Comprehensive Guide to GPU Programming</i>, Sections 2.6.2 to (June 2013).</p><p id="p-0006" num="0005">Conventional compression techniques lack in taking advantage of several available opportunities for further improving compression processes and results, such as conventional techniques do not provide for a coarse pixel shading (CPS)-friendly layout and thus fail to take advantage of constant colors, etc.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006">Embodiments are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements. So that the manner in which the above recited features can be understood in detail, a more particular description, briefly summarized above, may be had by reference to embodiments, some of which are illustrated in the appended drawings. It is to be noted, however, that the appended drawings illustrate only typical embodiments and are therefore not to be considered limiting of its scope, for the drawings may illustrate other equally effective embodiments.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a computer system configured to implement one or more aspects of the embodiments described herein.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>A-<b>2</b>D</figref> illustrate a parallel processor components, according to an embodiment.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b>A-<b>3</b>B</figref> are block diagrams of graphics multiprocessors, according to embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b>A-<b>4</b>F</figref> illustrate an exemplary architecture in which a plurality of graphics processing units are communicatively coupled to a plurality of multi-core processors.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a conceptual diagram of a graphics processing pipeline, according to an embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a computing device hosting a smart compression/decompression mechanism according to one embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates a smart compression/decompression mechanism according to one embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> illustrates a CPS hybrid compressed bit layout.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a conventional compression block.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> illustrates a delta computation flow according to one embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> illustrates a conventional encoding technique.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>9</b>C</figref> illustrates a unary encoding technique.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>9</b>D</figref> illustrates an encoding technique according to one embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>9</b>E</figref> illustrates encoding code words according to one embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a method for smart compression according to one embodiment.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a delta compression scheme according to one embodiment.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a method for smart compression according to one embodiment.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a new table according to one embodiment.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a method for smart compression according to one embodiment.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>15</b>A</figref> illustrates chunks resulting from conversion of 128BPP into 8 bits per chunk according to one embodiment.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>15</b>B</figref> illustrates code word lengths according to one embodiment.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>15</b>C</figref> illustrates a predictor computation set according to one embodiment.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates compression results according to one embodiment.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates common pixel format and alpha value channel format according to one embodiment.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram of an embodiment of a computer system with a processor having one or more processor cores and graphics processors.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram of one embodiment of a processor having one or more processor cores, an integrated memory controller, and an integrated graphics processor.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a block diagram of one embodiment of a graphics processor which may be a discreet graphics processing unit, or may be graphics processor integrated with a plurality of processing cores.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram of an embodiment of a graphics processing engine for a graphics processor.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>22</b></figref> is a block diagram of another embodiment of a graphics processor.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a block diagram of thread execution logic including an array of processing elements.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates a graphics processor execution unit instruction format according to an embodiment.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a block diagram of another embodiment of a graphics processor which includes a graphics pipeline, a media pipeline, a display engine, thread execution logic, and a render output pipeline.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>26</b>A</figref> is a block diagram illustrating a graphics processor command format according to an embodiment.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>26</b>B</figref> is a block diagram illustrating a graphics processor command sequence according to an embodiment.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>27</b></figref> illustrates exemplary graphics software architecture for a data processing system according to an embodiment.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>28</b></figref> is a block diagram illustrating an IP core development system that may be used to manufacture an integrated circuit to perform operations according to an embodiment.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>29</b></figref> is a block diagram illustrating an exemplary system on a chip integrated circuit that may be fabricated using one or more IP cores, according to an embodiment.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>30</b></figref> is a block diagram illustrating an exemplary graphics processor of a system on a chip integrated circuit.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>31</b></figref> is a block diagram illustrating an additional exemplary graphics processor of a system on a chip integrated circuit.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0047" num="0046">In some embodiments, a graphics processing unit (GPU) is communicatively coupled to host/processor cores to accelerate graphics operations, machine-learning operations, pattern analysis operations, and various general purpose GPU (GPGPU) functions. The GPU may be communicatively coupled to the host processor/cores over a bus or another interconnect (e.g., a high-speed interconnect such as PCIe or NVLink). In other embodiments, the GPU may be integrated on the same package or chip as the cores and communicatively coupled to the cores over an internal processor bus/interconnect (i.e., internal to the package or chip). Regardless of the manner in which the GPU is connected, the processor cores may allocate work to the GPU in the form of sequences of commands/instructions contained in a work descriptor. The GPU then uses dedicated circuitry/logic for efficiently processing these commands/instructions.</p><p id="p-0048" num="0047">Embodiments provide for a novel technique for facilitating smart compression schemes for offering efficient lossless compression layout, unified compression, etc., to achieve better compression ratios, while saving memory bandwidth.</p><p id="p-0049" num="0048">In the following description, numerous specific details are set forth. However, embodiments, as described herein, may be practiced without these specific details. In other instances, well-known circuits, structures and techniques have not been shown in details in order not to obscure the understanding of this description.</p><p id="p-0050" num="0049">System Overview I</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a computing system <b>100</b> configured to implement one or more aspects of the embodiments described herein. The computing system <b>100</b> includes a processing subsystem <b>101</b> having one or more processor(s) <b>102</b> and a system memory <b>104</b> communicating via an interconnection path that may include a memory hub <b>105</b>. The memory hub <b>105</b> may be a separate component within a chipset component or may be integrated within the one or more processor(s) <b>102</b>. The memory hub <b>105</b> couples with an I/O subsystem <b>111</b> via a communication link <b>106</b>. The I/O subsystem <b>111</b> includes an I/O hub <b>107</b> that can enable the computing system <b>100</b> to receive input from one or more input device(s) <b>108</b>. Additionally, the I/O hub <b>107</b> can enable a display controller, which may be included in the one or more processor(s) <b>102</b>, to provide outputs to one or more display device(s) <b>110</b>A. In one embodiment, the one or more display device(s) <b>110</b>A coupled with the I/O hub <b>107</b> can include a local, internal, or embedded display device.</p><p id="p-0052" num="0051">In one embodiment, the processing subsystem <b>101</b> includes one or more parallel processor(s) <b>112</b> coupled to memory hub <b>105</b> via a bus or other communication link <b>113</b>. The communication link <b>113</b> may be one of any number of standards based communication link technologies or protocols, such as, but not limited to PCI Express, or may be a vendor specific communications interface or communications fabric. In one embodiment, the one or more parallel processor(s) <b>112</b> form a computationally focused parallel or vector processing system that an include a large number of processing cores and/or processing clusters, such as a many integrated core (MIC) processor. In one embodiment, the one or more parallel processor(s) <b>112</b> form a graphics processing subsystem that can output pixels to one of the one or more display device(s) <b>110</b>A coupled via the I/O Hub <b>107</b>. The one or more parallel processor(s) <b>112</b> can also include a display controller and display interface (not shown) to enable a direct connection to one or more display device(s) <b>110</b>B.</p><p id="p-0053" num="0052">Within the I/O subsystem <b>111</b>, a system storage unit <b>114</b> can connect to the I/O hub <b>107</b> to provide a storage mechanism for the computing system <b>100</b>. An I/O switch <b>116</b> can be used to provide an interface mechanism to enable connections between the I/O hub <b>107</b> and other components, such as a network adapter <b>118</b> and/or wireless network adapter <b>119</b> that may be integrated into the platform, and various other devices that can be added via one or more add-in device(s) <b>120</b>. The network adapter <b>118</b> can be an Ethernet adapter or another wired network adapter. The wireless network adapter <b>119</b> can include one or more of a Wi-Fi, Bluetooth, near field communication (NFC), or other network device that includes one or more wireless radios.</p><p id="p-0054" num="0053">The computing system <b>100</b> can include other components not explicitly shown, including USB or other port connections, optical storage drives, video capture devices, and the like, may also be connected to the I/O hub <b>107</b>. Communication paths interconnecting the various components in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be implemented using any suitable protocols, such as PCI (Peripheral Component Interconnect) based protocols (e.g., PCI-Express), or any other bus or point-to-point communication interfaces and/or protocol(s), such as the NV-Link high-speed interconnect, or interconnect protocols known in the art.</p><p id="p-0055" num="0054">In one embodiment, the one or more parallel processor(s) <b>112</b> incorporate circuitry optimized for graphics and video processing, including, for example, video output circuitry, and constitutes a graphics processing unit (GPU). In another embodiment, the one or more parallel processor(s) <b>112</b> incorporate circuitry optimized for general purpose processing, while preserving the underlying computational architecture, described in greater detail herein. In yet another embodiment, components of the computing system <b>100</b> may be integrated with one or more other system elements on a single integrated circuit. For example, the one or more parallel processor(s), <b>112</b> memory hub <b>105</b>, processor(s) <b>102</b>, and I/O hub <b>107</b> can be integrated into a system on chip (SoC) integrated circuit. Alternatively, the components of the computing system <b>100</b> can be integrated into a single package to form a system in package (SIP) configuration. In one embodiment, at least a portion of the components of the computing system <b>100</b> can be integrated into a multi-chip module (MCM), which can be interconnected with other multi-chip modules into a modular computing system.</p><p id="p-0056" num="0055">It will be appreciated that the computing system <b>100</b> shown herein is illustrative and that variations and modifications are possible. The connection topology, including the number and arrangement of bridges, the number of processor(s) <b>102</b>, and the number of parallel processor(s) <b>112</b>, may be modified as desired. For instance, in some embodiments, system memory <b>104</b> is connected to the processor(s) <b>102</b> directly rather than through a bridge, while other devices communicate with system memory <b>104</b> via the memory hub <b>105</b> and the processor(s) <b>102</b>. In other alternative topologies, the parallel processor(s) <b>112</b> are connected to the I/O hub <b>107</b> or directly to one of the one or more processor(s) <b>102</b>, rather than to the memory hub <b>105</b>. In other embodiments, the I/O hub <b>107</b> and memory hub <b>105</b> may be integrated into a single chip. Some embodiments may include two or more sets of processor(s) <b>102</b> attached via multiple sockets, which can couple with two or more instances of the parallel processor(s) <b>112</b>.</p><p id="p-0057" num="0056">Some of the particular components shown herein are optional and may not be included in all implementations of the computing system <b>100</b>. For example, any number of add-in cards or peripherals may be supported, or some components may be eliminated. Furthermore, some architectures may use different terminology for components similar to those illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, the memory hub <b>105</b> may be referred to as a Northbridge in some architectures, while the I/O hub <b>107</b> may be referred to as a Southbridge.</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates a parallel processor <b>200</b>, according to an embodiment. The various components of the parallel processor <b>200</b> may be implemented using one or more integrated circuit devices, such as programmable processors, application specific integrated circuits (ASICs), or field programmable gate arrays (FPGA). The illustrated parallel processor <b>200</b> is a variant of the one or more parallel processor(s) <b>112</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an embodiment.</p><p id="p-0059" num="0058">In one embodiment, the parallel processor <b>200</b> includes a parallel processing unit <b>202</b>. The parallel processing unit includes an I/O unit <b>204</b> that enables communication with other devices, including other instances of the parallel processing unit <b>202</b>. The I/O unit <b>204</b> may be directly connected to other devices. In one embodiment, the I/O unit <b>204</b> connects with other devices via the use of a hub or switch interface, such as memory hub <b>105</b>. The connections between the memory hub <b>105</b> and the I/O unit <b>204</b> form a communication link <b>113</b>. Within the parallel processing unit <b>202</b>, the I/O unit <b>204</b> connects with a host interface <b>206</b> and a memory crossbar <b>216</b>, where the host interface <b>206</b> receives commands directed to performing processing operations and the memory crossbar <b>216</b> receives commands directed to performing memory operations.</p><p id="p-0060" num="0059">When the host interface <b>206</b> receives a command buffer via the I/O unit <b>204</b>, the host interface <b>206</b> can direct work operations to perform those commands to a front end <b>208</b>. In one embodiment, the front end <b>208</b> couples with a scheduler <b>210</b>, which is configured to distribute commands or other work items to a processing cluster array <b>212</b>. In one embodiment, the scheduler <b>210</b> ensures that the processing cluster array <b>212</b> is properly configured and in a valid state before tasks are distributed to the processing clusters of the processing cluster array <b>212</b>.</p><p id="p-0061" num="0060">The processing cluster array <b>212</b> can include up to &#x201c;N&#x201d; processing clusters (e.g., cluster <b>214</b>A, cluster <b>214</b>B, through cluster <b>214</b>N). Each cluster <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b> can execute a large number of concurrent threads. The scheduler <b>210</b> can allocate work to the clusters <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b> using various scheduling and/or work distribution algorithms, which may vary depending on the workload arising for each type of program or computation. The scheduling can be handled dynamically by the scheduler <b>210</b>, or can be assisted in part by compiler logic during compilation of program logic configured for execution by the processing cluster array <b>212</b>.</p><p id="p-0062" num="0061">In one embodiment, different clusters <b>214</b>A-<b>214</b>N of processing cluster array <b>212</b> can be allocated for processing different types of programs or for performing different types of computations.</p><p id="p-0063" num="0062">The processing cluster array <b>212</b> can be configured to perform various types of parallel processing operations. In one embodiment, the processing cluster array <b>212</b> is configured to perform general-purpose parallel compute operations. For example, the processing cluster array <b>212</b> can include logic to execute processing tasks including filtering of video and/or audio data, performing modeling operations, including physics operations, and performing data transformations.</p><p id="p-0064" num="0063">In one embodiment, the processing cluster array <b>212</b> is configured to perform parallel graphics processing operations. In embodiments in which the parallel processor <b>200</b> is configured to perform graphics processing operations, the processing cluster array <b>212</b> can include additional logic to support the execution of such graphics processing operations, including, but not limited to texture sampling logic to perform texture operations, as well as tessellation logic and other vertex processing logic. Additionally, the processing cluster array <b>212</b> can be configured to execute graphics processing related shader programs such as, but not limited to vertex shaders, tessellation shaders, geometry shaders, and pixel shaders. The parallel processing unit <b>202</b> can transfer data from system memory via the I/O unit <b>204</b> for processing. During processing the transferred data can be stored to on-chip memory (e.g., parallel processor memory <b>222</b>) during processing, then written back to system memory.</p><p id="p-0065" num="0064">In one embodiment, when the parallel processing unit <b>202</b> is used to perform graphics processing, the scheduler <b>210</b> can be configured to divide the processing workload into approximately equal sized tasks, to better enable distribution of the graphics processing operations to multiple clusters <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b>. In some embodiments, portions of the processing cluster array <b>212</b> can be configured to perform different types of processing. For example, a first portion may be configured to perform vertex shading and topology generation, a second portion may be configured to perform tessellation and geometry shading, and a third portion may be configured to perform pixel shading or other screen space operations, to produce a rendered image for display. Intermediate data produced by one or more of the clusters <b>214</b>A-<b>214</b>N may be stored in buffers to allow the intermediate data to be transmitted between clusters <b>214</b>A-<b>214</b>N for further processing.</p><p id="p-0066" num="0065">During operation, the processing cluster array <b>212</b> can receive processing tasks to be executed via the scheduler <b>210</b>, which receives commands defining processing tasks from front end <b>208</b>. For graphics processing operations, processing tasks can include indices of data to be processed, e.g., surface (patch) data, primitive data, vertex data, and/or pixel data, as well as state parameters and commands defining how the data is to be processed (e.g., what program is to be executed). The scheduler <b>210</b> may be configured to fetch the indices corresponding to the tasks or may receive the indices from the front end <b>208</b>. The front end <b>208</b> can be configured to ensure the processing cluster array <b>212</b> is configured to a valid state before the workload specified by incoming command buffers (e.g., batch-buffers, push buffers, etc.) is initiated.</p><p id="p-0067" num="0066">Each of the one or more instances of the parallel processing unit <b>202</b> can couple with parallel processor memory <b>222</b>. The parallel processor memory <b>222</b> can be accessed via the memory crossbar <b>216</b>, which can receive memory requests from the processing cluster array <b>212</b> as well as the I/O unit <b>204</b>. The memory crossbar <b>216</b> can access the parallel processor memory <b>222</b> via a memory interface <b>218</b>. The memory interface <b>218</b> can include multiple partition units (e.g., partition unit <b>220</b>A, partition unit <b>220</b>B, through partition unit <b>220</b>N) that can each couple to a portion (e.g., memory unit) of parallel processor memory <b>222</b>. In one implementation, the number of partition units <b>220</b>A-<b>220</b>N is configured to be equal to the number of memory units, such that a first partition unit <b>220</b>A has a corresponding first memory unit <b>224</b>A, a second partition unit <b>220</b>B has a corresponding memory unit <b>224</b>B, and an Nth partition unit <b>220</b>N has a corresponding Nth memory unit <b>224</b>N. In other embodiments, the number of partition units <b>220</b>A-<b>220</b>N may not be equal to the number of memory devices.</p><p id="p-0068" num="0067">In various embodiments, the memory units <b>224</b>A-<b>224</b>N can include various types of memory devices, including dynamic random access memory (DRAM) or graphics random access memory, such as synchronous graphics random access memory (SGRAM), including graphics double data rate (GDDR) memory. In one embodiment, the memory units <b>224</b>A-<b>224</b>N may also include 3D stacked memory, including but not limited to high bandwidth memory (HBM). Persons skilled in the art will appreciate that the specific implementation of the memory units <b>224</b>A-<b>224</b>N can vary, and can be selected from one of various conventional designs. Render targets, such as frame buffers or texture maps may be stored across the memory units <b>224</b>A-<b>224</b>N, allowing partition units <b>220</b>A-<b>220</b>N to write portions of each render target in parallel to efficiently use the available bandwidth of parallel processor memory <b>222</b>. In some embodiments, a local instance of the parallel processor memory <b>222</b> may be excluded in favor of a unified memory design that utilizes system memory in conjunction with local cache memory.</p><p id="p-0069" num="0068">In one embodiment, any one of the clusters <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b> can process data that will be written to any of the memory units <b>224</b>A-<b>224</b>N within parallel processor memory <b>222</b>. The memory crossbar <b>216</b> can be configured to transfer the output of each cluster <b>214</b>A-<b>214</b>N to any partition unit <b>220</b>A-<b>220</b>N or to another cluster <b>214</b>A-<b>214</b>N, which can perform additional processing operations on the output. Each cluster <b>214</b>A-<b>214</b>N can communicate with the memory interface <b>218</b> through the memory crossbar <b>216</b> to read from or write to various external memory devices. In one embodiment, the memory crossbar <b>216</b> has a connection to the memory interface <b>218</b> to communicate with the I/O unit <b>204</b>, as well as a connection to a local instance of the parallel processor memory <b>222</b>, enabling the processing units within the different processing clusters <b>214</b>A-<b>214</b>N to communicate with system memory or other memory that is not local to the parallel processing unit <b>202</b>. In one embodiment, the memory crossbar <b>216</b> can use virtual channels to separate traffic streams between the clusters <b>214</b>A-<b>214</b>N and the partition units <b>220</b>A-<b>220</b>N.</p><p id="p-0070" num="0069">While a single instance of the parallel processing unit <b>202</b> is illustrated within the parallel processor <b>200</b>, any number of instances of the parallel processing unit <b>202</b> can be included. For example, multiple instances of the parallel processing unit <b>202</b> can be provided on a single add-in card, or multiple add-in cards can be interconnected. The different instances of the parallel processing unit <b>202</b> can be configured to inter-operate even if the different instances have different numbers of processing cores, different amounts of local parallel processor memory, and/or other configuration differences. For example, and in one embodiment, some instances of the parallel processing unit <b>202</b> can include higher precision floating point units relative to other instances. Systems incorporating one or more instances of the parallel processing unit <b>202</b> or the parallel processor <b>200</b> can be implemented in a variety of configurations and form factors, including but not limited to desktop, laptop, or handheld personal computers, servers, workstations, game consoles, and/or embedded systems.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram of a partition unit <b>220</b>, according to an embodiment. In one embodiment, the partition unit <b>220</b> is an instance of one of the partition units <b>220</b>A-<b>220</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. As illustrated, the partition unit <b>220</b> includes an L2 cache <b>221</b>, a frame buffer interface <b>225</b>, and a ROP <b>226</b> (raster operations unit). The L2 cache <b>221</b> is a read/write cache that is configured to perform load and store operations received from the memory crossbar <b>216</b> and ROP <b>226</b>. Read misses and urgent write-back requests are output by L2 cache <b>221</b> to frame buffer interface <b>225</b> for processing. Dirty updates can also be sent to the frame buffer via the frame buffer interface <b>225</b> for opportunistic processing. In one embodiment, the frame buffer interface <b>225</b> interfaces with one of the memory units in parallel processor memory, such as the memory units <b>224</b>A-<b>224</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> (e.g., within parallel processor memory <b>222</b>).</p><p id="p-0072" num="0071">In graphics applications, the ROP <b>226</b> is a processing unit that performs raster operations, such as stencil, z test, blending, and the like. The ROP <b>226</b> then outputs processed graphics data that is stored in graphics memory. In some embodiments, the ROP <b>226</b> includes compression logic to compress z or color data that is written to memory and decompress z or color data that is read from memory. In some embodiments, the ROP <b>226</b> is included within each processing cluster (e.g., cluster <b>214</b>A-<b>214</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) instead of within the partition unit <b>220</b>. In such embodiment, read and write requests for pixel data are transmitted over the memory crossbar <b>216</b> instead of pixel fragment data.</p><p id="p-0073" num="0072">The processed graphics data may be displayed on a display device, such as one of the one or more display device(s) <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, routed for further processing by the processor(s) <b>102</b>, or routed for further processing by one of the processing entities within the parallel processor <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a block diagram of a processing cluster <b>214</b> within a parallel processing unit, according to an embodiment. In one embodiment, the processing cluster is an instance of one of the processing clusters <b>214</b>A-<b>214</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. The processing cluster <b>214</b> can be configured to execute many threads in parallel, where the term &#x201c;thread&#x201d; refers to an instance of a particular program executing on a particular set of input data. In some embodiments, single-instruction, multiple-data (SIMD) instruction issue techniques are used to support parallel execution of a large number of threads without providing multiple independent instruction units. In other embodiments, single-instruction, multiple-thread (SIMT) techniques are used to support parallel execution of a large number of generally synchronized threads, using a common instruction unit configured to issue instructions to a set of processing engines within each one of the processing clusters. Unlike a SIMD execution regime, where all processing engines typically execute identical instructions, SIMT execution allows different threads to more readily follow divergent execution paths through a given thread program. Persons skilled in the art will understand that a SIMD processing regime represents a functional subset of a SIMT processing regime.</p><p id="p-0075" num="0074">Operation of the processing cluster <b>214</b> can be controlled via a pipeline manager <b>232</b> that distributes processing tasks to SIMT parallel processors. The pipeline manager <b>232</b> receives instructions from the scheduler <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> and manages execution of those instructions via a graphics multiprocessor <b>234</b> and/or a texture unit <b>236</b>. The illustrated graphics multiprocessor <b>234</b> is an exemplary instance of an SIMT parallel processor. However, various types of SIMT parallel processors of differing architectures may be included within the processing cluster <b>214</b>. One or more instances of the graphics multiprocessor <b>234</b> can be included within a processing cluster <b>214</b>. The graphics multiprocessor <b>234</b> can process data and a data crossbar <b>240</b> can be used to distribute the processed data to one of multiple possible destinations, including other shader units. The pipeline manager <b>232</b> can facilitate the distribution of processed data by specifying destinations for processed data to be distributed vis the data crossbar <b>240</b>.</p><p id="p-0076" num="0075">Each graphics multiprocessor <b>234</b> within the processing cluster <b>214</b> can include an identical set of functional execution logic (e.g., arithmetic logic units, load-store units, etc.). The functional execution logic can be configured in a pipelined manner in which new instructions can be issued before previous instructions are complete. The functional execution logic may be provided. The functional logic supports a variety of operations including integer and floating point arithmetic comparison operations, Boolean operations bit-shifting, and computation of various algebraic functions. In one embodiment, the same functional-unit hardware can be leveraged to perform different operations and any combination of functional units may be present.</p><p id="p-0077" num="0076">The instructions transmitted to the processing cluster <b>214</b> constitutes a thread. A set of threads executing across the set of parallel processing engines is a thread group. A thread group executes the same program on different input data. Each thread within a thread group can be assigned to a different processing engine within a graphics multiprocessor <b>234</b>. A thread group may include fewer threads than the number of processing engines within the graphics multiprocessor <b>234</b>. When a thread group includes fewer threads than the number of processing engines, one or more of the processing engines may be idle during cycles in which that thread group is being processed. A thread group may also include more threads than the number of processing engines within the graphics multiprocessor <b>234</b>. When the thread group includes more threads than the number of processing engines within the graphics multiprocessor <b>234</b>, processing can be performed over consecutive clock cycles. In one embodiment, multiple thread groups can be executed concurrently on a graphics multiprocessor <b>234</b>.</p><p id="p-0078" num="0077">In one embodiment, the graphics multiprocessor <b>234</b> includes an internal cache memory to perform load and store operations. In one embodiment, the graphics multiprocessor <b>234</b> can forego an internal cache and use a cache memory (e.g., L1 cache <b>308</b>) within the processing cluster <b>214</b>. Each graphics multiprocessor <b>234</b> also has access to L2 caches within the partition units (e.g., partition units <b>220</b>A-<b>220</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) that are shared among all processing clusters <b>214</b> and may be used to transfer data between threads. The graphics multiprocessor <b>234</b> may also access off-chip global memory, which can include one or more of local parallel processor memory and/or system memory. Any memory external to the parallel processing unit <b>202</b> may be used as global memory. Embodiments in which the processing cluster <b>214</b> includes multiple instances of the graphics multiprocessor <b>234</b> can share common instructions and data, which may be stored in the L1 cache <b>308</b>.</p><p id="p-0079" num="0078">Each processing cluster <b>214</b> may include an MMU <b>245</b> (memory management unit) that is configured to map virtual addresses into physical addresses. In other embodiments, one or more instances of the MMU <b>245</b> may reside within the memory interface <b>218</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. The MMU <b>245</b> includes a set of page table entries (PTEs) used to map a virtual address to a physical address of a tile (talk more about tiling) and optionally a cache line index. The MMU <b>245</b> may include address translation lookaside buffers (TLB) or caches that may reside within the graphics multiprocessor <b>234</b> or the L1 cache or processing cluster <b>214</b>. The physical address is processed to distribute surface data access locality to allow efficient request interleaving among partition units. The cache line index may be used to determine whether a request for a cache line is a hit or miss.</p><p id="p-0080" num="0079">In graphics and computing applications, a processing cluster <b>214</b> may be configured such that each graphics multiprocessor <b>234</b> is coupled to a texture unit <b>236</b> for performing texture mapping operations, e.g., determining texture sample positions, reading texture data, and filtering the texture data. Texture data is read from an internal texture L1 cache (not shown) or in some embodiments from the L1 cache within graphics multiprocessor <b>234</b> and is fetched from an L2 cache, local parallel processor memory, or system memory, as needed. Each graphics multiprocessor <b>234</b> outputs processed tasks to the data crossbar <b>240</b> to provide the processed task to another processing cluster <b>214</b> for further processing or to store the processed task in an L2 cache, local parallel processor memory, or system memory via the memory crossbar <b>216</b>. A preROP <b>242</b> (pre-raster operations unit) is configured to receive data from graphics multiprocessor <b>234</b>, direct data to ROP units, which may be located with partition units as described herein (e.g., partition units <b>220</b>A-<b>220</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The preROP <b>242</b> unit can perform optimizations for color blending, organize pixel color data, and perform address translations.</p><p id="p-0081" num="0080">It will be appreciated that the core architecture described herein is illustrative and that variations and modifications are possible. Any number of processing units, e.g., graphics multiprocessor <b>234</b>, texture units <b>236</b>, preROPs <b>242</b>, etc., may be included within a processing cluster <b>214</b>. Further, while only one processing cluster <b>214</b> is shown, a parallel processing unit as described herein may include any number of instances of the processing cluster <b>214</b>. In one embodiment, each processing cluster <b>214</b> can be configured to operate independently of other processing clusters <b>214</b> using separate and distinct processing units, L1 caches, etc.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a graphics multiprocessor <b>234</b>, according to one embodiment. In such embodiment, the graphics multiprocessor <b>234</b> couples with the pipeline manager <b>232</b> of the processing cluster <b>214</b>. The graphics multiprocessor <b>234</b> has an execution pipeline including but not limited to an instruction cache <b>252</b>, an instruction unit <b>254</b>, an address mapping unit <b>256</b>, a register file <b>258</b>, one or more general purpose graphics processing unit (GPGPU) cores <b>262</b>, and one or more load/store units <b>266</b>. The GPGPU cores <b>262</b> and load/store units <b>266</b> are coupled with cache memory <b>272</b> and shared memory <b>270</b> via a memory and cache interconnect <b>268</b>.</p><p id="p-0083" num="0082">In one embodiment, the instruction cache <b>252</b> receives a stream of instructions to execute from the pipeline manager <b>232</b>. The instructions are cached in the instruction cache <b>252</b> and dispatched for execution by the instruction unit <b>254</b>. The instruction unit <b>254</b> can dispatch instructions as thread groups (e.g., warps), with each thread of the thread group assigned to a different execution unit within GPGPU core <b>262</b>. An instruction can access any of a local, shared, or global address space by specifying an address within a unified address space. The address mapping unit <b>256</b> can be used to translate addresses in the unified address space into a distinct memory address that can be accessed by the load/store units <b>266</b>.</p><p id="p-0084" num="0083">The register file <b>258</b> provides a set of registers for the functional units of the graphics multiprocessor <b>324</b>. The register file <b>258</b> provides temporary storage for operands connected to the data paths of the functional units (e.g., GPGPU cores <b>262</b>, load/store units <b>266</b>) of the graphics multiprocessor <b>324</b>. In one embodiment, the register file <b>258</b> is divided between each of the functional units such that each functional unit is allocated a dedicated portion of the register file <b>258</b>. In one embodiment, the register file <b>258</b> is divided between the different warps being executed by the graphics multiprocessor <b>324</b>.</p><p id="p-0085" num="0084">The GPGPU cores <b>262</b> can each include floating point units (FPUs) and/or integer arithmetic logic units (ALUs) that are used to execute instructions of the graphics multiprocessor <b>324</b>. The GPGPU cores <b>262</b> can be similar in architecture or can differ in architecture, according to embodiments. For example, and in one embodiment, a first portion of the GPGPU cores <b>262</b> include a single precision FPU and an integer ALU while a second portion of the GPGPU cores include a double precision FPU. In one embodiment, the FPUs can implement the IEEE 754-2008 standard for floating point arithmetic or enable variable precision floating point arithmetic. The graphics multiprocessor <b>324</b> can additionally include one or more fixed function or special function units to perform specific functions such as copy rectangle or pixel blending operations. In one embodiment one or more of the GPGPU cores can also include fixed or special function logic.</p><p id="p-0086" num="0085">The memory and cache interconnect <b>268</b> is an interconnect network that connects each of the functional units of the graphics multiprocessor <b>324</b> to the register file <b>258</b> and to the shared memory <b>270</b>. In one embodiment, the memory and cache interconnect <b>268</b> is a crossbar interconnect that allows the load/store unit <b>266</b> to implement load and store operations between the shared memory <b>270</b> and the register file <b>258</b>. The register file <b>258</b> can operate at the same frequency as the GPGPU cores <b>262</b>, thus data transfer between the GPGPU cores <b>262</b> and the register file <b>258</b> is very low latency. The shared memory <b>270</b> can be used to enable communication between threads that execute on the functional units within the graphics multiprocessor <b>234</b>. The cache memory <b>272</b> can be used as a data cache for example, to cache texture data communicated between the functional units and the texture unit <b>236</b>. The shared memory <b>270</b> can also be used as a program managed cached. Threads executing on the GPGPU cores <b>262</b> can programmatically store data within the shared memory in addition to the automatically cached data that is stored within the cache memory <b>272</b>.</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>B</figref> illustrate additional graphics multiprocessors, according to embodiments. The illustrated graphics multiprocessors <b>325</b>, <b>350</b> are variants of the graphics multiprocessor <b>234</b> of <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>. The illustrated graphics multiprocessors <b>325</b>, <b>350</b> can be configured as a streaming multiprocessor (SM) capable of simultaneous execution of a large number of execution threads.</p><p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> shows a graphics multiprocessor <b>325</b> according to an additional embodiment. The graphics multiprocessor <b>325</b> includes multiple additional instances of execution resource units relative to the graphics multiprocessor <b>234</b> of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. For example, the graphics multiprocessor <b>325</b> can include multiple instances of the instruction unit <b>332</b>A-<b>332</b>B, register file <b>334</b>A-<b>334</b>B, and texture unit(s) <b>344</b>A-<b>344</b>B. The graphics multiprocessor <b>325</b> also includes multiple sets of graphics or compute execution units (e.g., GPGPU core <b>336</b>A-<b>336</b>B, GPGPU core <b>337</b>A-<b>337</b>B, GPGPU core <b>338</b>A-<b>338</b>B) and multiple sets of load/store units <b>340</b>A-<b>340</b>B. In one embodiment, the execution resource units have a common instruction cache <b>330</b>, texture and/or data cache memory <b>342</b>, and shared memory <b>346</b>. The various components can communicate via an interconnect fabric <b>327</b>. In one embodiment, the interconnect fabric <b>327</b> includes one or more crossbar switches to enable communication between the various components of the graphics multiprocessor <b>325</b>.</p><p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> shows a graphics multiprocessor <b>350</b> according to an additional embodiment. The graphics processor includes multiple sets of execution resources <b>356</b>A-<b>356</b>D, where each set of execution resource includes multiple instruction units, register files, GPGPU cores, and load store units, as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>D</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. The execution resources <b>356</b>A-<b>356</b>D can work in concert with texture unit(s) <b>360</b>A-<b>360</b>D for texture operations, while sharing an instruction cache <b>354</b>, and shared memory <b>362</b>. In one embodiment, the execution resources <b>356</b>A-<b>356</b>D can share an instruction cache <b>354</b> and shared memory <b>362</b>, as well as multiple instances of a texture and/or data cache memory <b>358</b>A-<b>358</b>B. The various components can communicate via an interconnect fabric <b>352</b> similar to the interconnect fabric <b>327</b> of <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>.</p><p id="p-0090" num="0089">Persons skilled in the art will understand that the architecture described in <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>2</b>A-<b>2</b>D, and <b>3</b>A-<b>3</b>B</figref> are descriptive and not limiting as to the scope of the present embodiments. Thus, the techniques described herein may be implemented on any properly configured processing unit, including, without limitation, one or more mobile application processors, one or more desktop or server central processing units (CPUs) including multi-core CPUs, one or more parallel processing units, such as the parallel processing unit <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, as well as one or more graphics processors or special purpose processing units, without departure from the scope of the embodiments described herein.</p><p id="p-0091" num="0090">In some embodiments, a parallel processor or GPGPU as described herein is communicatively coupled to host/processor cores to accelerate graphics operations, machine-learning operations, pattern analysis operations, and various general purpose GPU (GPGPU) functions. The GPU may be communicatively coupled to the host processor/cores over a bus or other interconnect (e.g., a high-speed interconnect such as PCIe or NVLink). In other embodiments, the GPU may be integrated on the same package or chip as the cores and communicatively coupled to the cores over an internal processor bus/interconnect (i.e., internal to the package or chip). Regardless of the manner in which the GPU is connected, the processor cores may allocate work to the GPU in the form of sequences of commands/instructions contained in a work descriptor. The GPU then uses dedicated circuitry/logic for efficiently processing these commands/instructions.</p><p id="p-0092" num="0091">Techniques for GPU to Host Processor Interconnection</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates an exemplary architecture in which a plurality of GPUs <b>410</b>-<b>413</b> are communicatively coupled to a plurality of multi-core processors <b>405</b>-<b>406</b> over high-speed links <b>440</b>-<b>443</b> (e.g., buses, point-to-point interconnects, etc.). In one embodiment, the high-speed links <b>440</b>-<b>443</b> support a communication throughput of 4 GB/s, 30 GB/s, 80 GB/s or higher, depending on the implementation. Various interconnect protocols may be used including, but not limited to, PCIe 4.0 or 5.0 and NVLink 2.0. However, the underlying principles of the invention are not limited to any particular communication protocol or throughput.</p><p id="p-0094" num="0093">In addition, in one embodiment, two or more of the GPUs <b>410</b>-<b>413</b> are interconnected over high-speed links <b>444</b>-<b>445</b>, which may be implemented using the same or different protocols/links than those used for high-speed links <b>440</b>-<b>443</b>. Similarly, two or more of the multi-core processors <b>405</b>-<b>406</b> may be connected over high speed link <b>433</b> which may be symmetric multi-processor (SMP) buses operating at 20 GB/s, 30 GB/s, 120 GB/s or higher. Alternatively, all communication between the various system components shown in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may be accomplished using the same protocols/links (e.g., over a common interconnection fabric). As mentioned, however, the underlying principles of the invention are not limited to any particular type of interconnect technology.</p><p id="p-0095" num="0094">In one embodiment, each multi-core processor <b>405</b>-<b>406</b> is communicatively coupled to a processor memory <b>401</b>-<b>402</b>, via memory interconnects <b>430</b>-<b>431</b>, respectively, and each GPU <b>410</b>-<b>413</b> is communicatively coupled to GPU memory <b>420</b>-<b>423</b> over GPU memory interconnects <b>450</b>-<b>453</b>, respectively. The memory interconnects <b>430</b>-<b>431</b> and <b>450</b>-<b>453</b> may utilize the same or different memory access technologies. By way of example, and not limitation, the processor memories <b>401</b>-<b>402</b> and GPU memories <b>420</b>-<b>423</b> may be volatile memories such as dynamic random access memories (DRAMs) (including stacked DRAMs), Graphics DDR SDRAM (GDDR) (e.g., GDDR5, GDDR6), or High Bandwidth Memory (HBM) and/or may be non-volatile memories such as 3D XPoint or Nano-Ram. In one embodiment, some portion of the memories may be volatile memory and another portion may be non-volatile memory (e.g., using a two-level memory (2LM) hierarchy).</p><p id="p-0096" num="0095">As described below, although the various processors <b>405</b>-<b>406</b> and GPUs <b>410</b>-<b>413</b> may be physically coupled to a particular memory <b>401</b>-<b>402</b>, <b>420</b>-<b>423</b>, respectively, a unified memory architecture may be implemented in which the same virtual system address space (also referred to as the &#x201c;effective address&#x201d; space) is distributed among all of the various physical memories. For example, processor memories <b>401</b>-<b>402</b> may each comprise 64 GB of the system memory address space and GPU memories <b>420</b>-<b>423</b> may each comprise 32 GB of the system memory address space (resulting in a total of 256 GB addressable memory in this example).</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates additional details for an interconnection between a multi-core processor <b>407</b> and a graphics acceleration module <b>446</b> in accordance with one embodiment. The graphics acceleration module <b>446</b> may include one or more GPU chips integrated on a line card which is coupled to the processor <b>407</b> via the high-speed link <b>440</b>. Alternatively, the graphics acceleration module <b>446</b> may be integrated on the same package or chip as the processor <b>407</b>.</p><p id="p-0098" num="0097">The illustrated processor <b>407</b> includes a plurality of cores <b>460</b>A-<b>460</b>D, each with a translation lookaside buffer <b>461</b>A-<b>461</b>D and one or more caches <b>462</b>A-<b>462</b>D. The cores may include various other components for executing instructions and processing data which are not illustrated to avoid obscuring the underlying principles of the invention (e.g., instruction fetch units, branch prediction units, decoders, execution units, reorder buffers, etc.). The caches <b>462</b>A-<b>462</b>D may comprise level 1 (L1) and level 2 (L2) caches. In addition, one or more shared caches <b>426</b> may be included in the caching hierarchy and shared by sets of the cores <b>460</b>A-<b>460</b>D. For example, one embodiment of the processor <b>407</b> includes 24 cores, each with its own L1 cache, twelve shared L2 caches, and twelve shared L3 caches. In this embodiment, one of the L2 and L3 caches are shared by two adjacent cores. The processor <b>407</b> and the graphics accelerator integration module <b>446</b> connect with system memory <b>441</b>, which may include processor memories <b>401</b>-<b>402</b>.</p><p id="p-0099" num="0098">Coherency is maintained for data and instructions stored in the various caches <b>462</b>A-<b>462</b>D, <b>456</b> and system memory <b>441</b> via inter-core communication over a coherence bus <b>464</b>. For example, each cache may have cache coherency logic/circuitry associated therewith to communicate to over the coherence bus <b>464</b> in response to detected reads or writes to particular cache lines. In one implementation, a cache snooping protocol is implemented over the coherence bus <b>464</b> to snoop cache accesses. Cache snooping/coherency techniques are well understood by those of skill in the art and will not be described in detail here to avoid obscuring the underlying principles of the invention.</p><p id="p-0100" num="0099">In one embodiment, a proxy circuit <b>425</b> communicatively couples the graphics acceleration module <b>446</b> to the coherence bus <b>464</b>, allowing the graphics acceleration module <b>446</b> to participate in the cache coherence protocol as a peer of the cores. In particular, an interface <b>435</b> provides connectivity to the proxy circuit <b>425</b> over high-speed link <b>440</b> (e.g., a PCIe bus, NVLink, etc.) and an interface <b>437</b> connects the graphics acceleration module <b>446</b> to the link <b>440</b>.</p><p id="p-0101" num="0100">In one implementation, an accelerator integration circuit <b>436</b> provides cache management, memory access, context management, and interrupt management services on behalf of a plurality of graphics processing engines <b>431</b>, <b>432</b>, N of the graphics acceleration module <b>446</b>. The graphics processing engines <b>431</b>, <b>432</b>, N may each comprise a separate graphics processing unit (GPU). Alternatively, the graphics processing engines <b>431</b>, <b>432</b>, N may comprise different types of graphics processing engines within a GPU such as graphics execution units, media processing engines (e.g., video encoders/decoders), samplers, and blit engines. In other words, the graphics acceleration module may be a GPU with a plurality of graphics processing engines <b>431</b>-<b>432</b>, N or the graphics processing engines <b>431</b>-<b>432</b>, N may be individual GPUs integrated on a common package, line card, or chip.</p><p id="p-0102" num="0101">In one embodiment, the accelerator integration circuit <b>436</b> includes a memory management unit (MMU) <b>439</b> for performing various memory management functions such as virtual-to-physical memory translations (also referred to as effective-to-real memory translations) and memory access protocols for accessing system memory <b>441</b>. The MMU <b>439</b> may also include a translation lookaside buffer (TLB) (not shown) for caching the virtual/effective to physical/real address translations. In one implementation, a cache <b>438</b> stores commands and data for efficient access by the graphics processing engines <b>431</b>-<b>432</b>, N. In one embodiment, the data stored in cache <b>438</b> and graphics memories <b>433</b>-<b>434</b>, N is kept coherent with the core caches <b>462</b>A-<b>462</b>D, <b>456</b> and system memory <b>411</b>. As mentioned, this may be accomplished via proxy circuit <b>425</b> which takes part in the cache coherency mechanism on behalf of cache <b>438</b> and memories <b>433</b>-<b>434</b>, N (e.g., sending updates to the cache <b>438</b> related to modifications/accesses of cache lines on processor caches <b>462</b>A-<b>462</b>D, <b>456</b> and receiving updates from the cache <b>438</b>).</p><p id="p-0103" num="0102">A set of registers <b>445</b> store context data for threads executed by the graphics processing engines <b>431</b>-<b>432</b>, N and a context management circuit <b>448</b> manages the thread contexts. For example, the context management circuit <b>448</b> may perform save and restore operations to save and restore contexts of the various threads during contexts switches (e.g., where a first thread is saved and a second thread is stored so that the second thread can be execute by a graphics processing engine). For example, on a context switch, the context management circuit <b>448</b> may store current register values to a designated region in memory (e.g., identified by a context pointer). It may then restore the register values when returning to the context. In one embodiment, an interrupt management circuit <b>447</b> receives and processes interrupts received from system devices.</p><p id="p-0104" num="0103">In one implementation, virtual/effective addresses from a graphics processing engine <b>431</b> are translated to real/physical addresses in system memory <b>411</b> by the MMU <b>439</b>. One embodiment of the accelerator integration circuit <b>436</b> supports multiple (e.g., 4, 8, 16) graphics accelerator modules <b>446</b> and/or other accelerator devices. The graphics accelerator module <b>446</b> may be dedicated to a single application executed on the processor <b>407</b> or may be shared between multiple applications. In one embodiment, a virtualized graphics execution environment is presented in which the resources of the graphics processing engines <b>431</b>-<b>432</b>, N are shared with multiple applications or virtual machines (VMs). The resources may be subdivided into &#x201c;slices&#x201d; which are allocated to different VMs and/or applications based on the processing requirements and priorities associated with the VMs and/or applications.</p><p id="p-0105" num="0104">Thus, the accelerator integration circuit acts as a bridge to the system for the graphics acceleration module <b>446</b> and provides address translation and system memory cache services. In addition, the accelerator integration circuit <b>436</b> may provide virtualization facilities for the host processor to manage virtualization of the graphics processing engines, interrupts, and memory management.</p><p id="p-0106" num="0105">Because hardware resources of the graphics processing engines <b>431</b>-<b>432</b>, N are mapped explicitly to the real address space seen by the host processor <b>407</b>, any host processor can address these resources directly using an effective address value. One function of the accelerator integration circuit <b>436</b>, in one embodiment, is the physical separation of the graphics processing engines <b>431</b>-<b>432</b>, N so that they appear to the system as independent units.</p><p id="p-0107" num="0106">As mentioned, in the illustrated embodiment, one or more graphics memories <b>433</b>-<b>434</b>, M are coupled to each of the graphics processing engines <b>431</b>-<b>432</b>, N, respectively. The graphics memories <b>433</b>-<b>434</b>, M store instructions and data being processed by each of the graphics processing engines <b>431</b>-<b>432</b>, N. The graphics memories <b>433</b>-<b>434</b>, M may be volatile memories such as DRAMs (including stacked DRAMs), GDDR memory (e.g., GDDR5, GDDR6), or HBM, and/or may be non-volatile memories such as 3D XPoint or Nano-Ram.</p><p id="p-0108" num="0107">In one embodiment, to reduce data traffic over link <b>440</b>, biasing techniques are used to ensure that the data stored in graphics memories <b>433</b>-<b>434</b>, M is data which will be used most frequently by the graphics processing engines <b>431</b>-<b>432</b>, N and preferably not used by the cores <b>460</b>A-<b>460</b>D (at least not frequently). Similarly, the biasing mechanism attempts to keep data needed by the cores (and preferably not the graphics processing engines <b>431</b>-<b>432</b>, N) within the caches <b>462</b>A-<b>462</b>D, <b>456</b> of the cores and system memory <b>411</b>.</p><p id="p-0109" num="0108"><figref idref="DRAWINGS">FIG. <b>4</b>C</figref> illustrates another embodiment in which the accelerator integration circuit <b>436</b> is integrated within the processor <b>407</b>. In this embodiment, the graphics processing engines <b>431</b>-<b>432</b>, N communicate directly over the high-speed link <b>440</b> to the accelerator integration circuit <b>436</b> via interface <b>437</b> and interface <b>435</b> (which, again, may be utilize any form of bus or interface protocol). The accelerator integration circuit <b>436</b> may perform the same operations as those described with respect to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, but potentially at a higher throughput given its close proximity to the coherency bus <b>462</b> and caches <b>462</b>A-<b>462</b>D, <b>426</b>.</p><p id="p-0110" num="0109">One embodiment supports different programming models including a dedicated-process programming model (no graphics acceleration module virtualization) and shared programming models (with virtualization). The latter may include programming models which are controlled by the accelerator integration circuit <b>436</b> and programming models which are controlled by the graphics acceleration module <b>446</b>.</p><p id="p-0111" num="0110">In one embodiment of the dedicated process model, graphics processing engines <b>431</b>-<b>432</b>, N are dedicated to a single application or process under a single operating system. The single application can funnel other application requests to the graphics engines <b>431</b>-<b>432</b>, N, providing virtualization within a VM/partition.</p><p id="p-0112" num="0111">In the dedicated-process programming models, the graphics processing engines <b>431</b>-<b>432</b>, N, may be shared by multiple VM/application partitions. The shared models require a system hypervisor to virtualize the graphics processing engines <b>431</b>-<b>432</b>, N to allow access by each operating system. For single-partition systems without a hypervisor, the graphics processing engines <b>431</b>-<b>432</b>, N are owned by the operating system. In both cases, the operating system can virtualize the graphics processing engines <b>431</b>-<b>432</b>, N to provide access to each process or application.</p><p id="p-0113" num="0112">For the shared programming model, the graphics acceleration module <b>446</b> or an individual graphics processing engine <b>431</b>-<b>432</b>, N selects a process element using a process handle. In one embodiment, process elements are stored in system memory <b>411</b> and are addressable using the effective address to real address translation techniques described herein. The process handle may be an implementation-specific value provided to the host process when registering its context with the graphics processing engine <b>431</b>-<b>432</b>, N (that is, calling system software to add the process element to the process element linked list). The lower 16-bits of the process handle may be the offset of the process element within the process element linked list.</p><p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. <b>4</b>D</figref> illustrates an exemplary accelerator integration slice <b>490</b>. As used herein, a &#x201c;slice&#x201d; comprises a specified portion of the processing resources of the accelerator integration circuit <b>436</b>. Application effective address space <b>482</b> within system memory <b>411</b> stores process elements <b>483</b>. In one embodiment, the process elements <b>483</b> are stored in response to GPU invocations <b>481</b> from applications <b>480</b> executed on the processor <b>407</b>. A process element <b>483</b> contains the process state for the corresponding application <b>480</b>. A work descriptor (WD) <b>484</b> contained in the process element <b>483</b> can be a single job requested by an application or may contain a pointer to a queue of jobs. In the latter case, the WD <b>484</b> is a pointer to the job request queue in the application's address space <b>482</b>.</p><p id="p-0115" num="0114">The graphics acceleration module <b>446</b> and/or the individual graphics processing engines <b>431</b>-<b>432</b>, N can be shared by all or a subset of the processes in the system. Embodiments of the invention include an infrastructure for setting up the process state and sending a WD <b>484</b> to a graphics acceleration module <b>446</b> to start a job in a virtualized environment.</p><p id="p-0116" num="0115">In one implementation, the dedicated-process programming model is implementation-specific. In this model, a single process owns the graphics acceleration module <b>446</b> or an individual graphics processing engine <b>431</b>. Because the graphics acceleration module <b>446</b> is owned by a single process, the hypervisor initializes the accelerator integration circuit <b>436</b> for the owning partition and the operating system initializes the accelerator integration circuit <b>436</b> for the owning process at the time when the graphics acceleration module <b>446</b> is assigned.</p><p id="p-0117" num="0116">In operation, a WD fetch unit <b>491</b> in the accelerator integration slice <b>490</b> fetches the next WD <b>484</b> which includes an indication of the work to be done by one of the graphics processing engines of the graphics acceleration module <b>446</b>. Data from the WD <b>484</b> may be stored in registers <b>445</b> and used by the MMU <b>439</b>, interrupt management circuit <b>447</b> and/or context management circuit <b>446</b> as illustrated. For example, one embodiment of the MMU <b>439</b> includes segment/page walk circuitry for accessing segment/page tables <b>486</b> within the OS virtual address space <b>485</b>. The interrupt management circuit <b>447</b> may process interrupt events <b>492</b> received from the graphics acceleration module <b>446</b>. When performing graphics operations, an effective address <b>493</b> generated by a graphics processing engine <b>431</b>-<b>432</b>, N is translated to a real address by the MMU <b>439</b>.</p><p id="p-0118" num="0117">In one embodiment, the same set of registers <b>445</b> are duplicated for each graphics processing engine <b>431</b>-<b>432</b>, N and/or graphics acceleration module <b>446</b> and may be initialized by the hypervisor or operating system. Each of these duplicated registers may be included in an accelerator integration slice <b>490</b>. Exemplary registers that may be initialized by the hypervisor are shown in Table 1.</p><p id="p-0119" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Hypervisor Initialized Registers</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="175pt" align="left"/><tbody valign="top"><row><entry/><entry>1</entry><entry>Slice Control Register</entry></row><row><entry/><entry>2</entry><entry>Real Address (RA) Scheduled Processes Area Pointer</entry></row><row><entry/><entry>3</entry><entry>Authority Mask Override Register</entry></row><row><entry/><entry>4</entry><entry>Interrupt Vector Table Entry Offset</entry></row><row><entry/><entry>5</entry><entry>Interrupt Vector Table Entry Limit</entry></row><row><entry/><entry>6</entry><entry>State Register</entry></row><row><entry/><entry>7</entry><entry>Logical Partition ID</entry></row><row><entry/><entry>8</entry><entry>Real address (RA) Hypervisor Accelerator </entry></row><row><entry/><entry/><entry>Utilization Record Pointer</entry></row><row><entry/><entry>9</entry><entry>Storage Description Register</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0120" num="0118">Exemplary registers that may be initialized by the operating system are shown in Table 2.</p><p id="p-0121" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Operating System Initialized Registers</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="189pt" align="left"/><tbody valign="top"><row><entry>1</entry><entry>Process and Thread Identification</entry></row><row><entry>2</entry><entry>Effective Address (EA) Context Save/Restore Pointer</entry></row><row><entry>3</entry><entry>Virtual Address (VA) Accelerator Utilization Record Pointer</entry></row><row><entry>4</entry><entry>Virtual Address (VA) Storage Segment Table Pointer</entry></row><row><entry>5</entry><entry>Authority Mask</entry></row><row><entry>6</entry><entry>Work descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0122" num="0119">In one embodiment, each WD <b>484</b> is specific to a particular graphics acceleration module <b>446</b> and/or graphics processing engines <b>431</b>-<b>432</b>, N. It contains all the information a graphics processing engine <b>431</b>-<b>432</b>, N requires to do its work or it can be a pointer to a memory location where the application has set up a command queue of work to be completed.</p><p id="p-0123" num="0120"><figref idref="DRAWINGS">FIG. <b>4</b>E</figref> illustrates additional details for one embodiment of a shared model. This embodiment includes a hypervisor real address space <b>498</b> in which a process element list <b>499</b> is stored. The hypervisor real address space <b>498</b> is accessible via a hypervisor <b>496</b> which virtualizes the graphics acceleration module engines for the operating system <b>495</b>.</p><p id="p-0124" num="0121">The shared programming models allow for all or a subset of processes from all or a subset of partitions in the system to use a graphics acceleration module <b>446</b>. There are two programming models where the graphics acceleration module <b>446</b> is shared by multiple processes and partitions: time-sliced shared and graphics directed shared.</p><p id="p-0125" num="0122">In this model, the system hypervisor <b>496</b> owns the graphics acceleration module <b>446</b> and makes its function available to all operating systems <b>495</b>. For a graphics acceleration module <b>446</b> to support virtualization by the system hypervisor <b>496</b>, the graphics acceleration module <b>446</b> may adhere to the following requirements: 1) An application's job request must be autonomous (that is, the state does not need to be maintained between jobs), or the graphics acceleration module <b>446</b> must provide a context save and restore mechanism. 2) An application's job request is guaranteed by the graphics acceleration module <b>446</b> to complete in a specified amount of time, including any translation faults, or the graphics acceleration module <b>446</b> provides the ability to preempt the processing of the job. 3) The graphics acceleration module <b>446</b> must be guaranteed fairness between processes when operating in the directed shared programming model.</p><p id="p-0126" num="0123">In one embodiment, for the shared model, the application <b>480</b> is required to make an operating system <b>495</b> system call with a graphics acceleration module <b>446</b> type, a work descriptor (WD), an authority mask register (AMR) value, and a context save/restore area pointer (CSRP). The graphics acceleration module <b>446</b> type describes the targeted acceleration function for the system call. The graphics acceleration module <b>446</b> type may be a system-specific value. The WD is formatted specifically for the graphics acceleration module <b>446</b> and can be in the form of a graphics acceleration module <b>446</b> command, an effective address pointer to a user-defined structure, an effective address pointer to a queue of commands, or any other data structure to describe the work to be done by the graphics acceleration module <b>446</b>. In one embodiment, the AMR value is the AMR state to use for the current process. The value passed to the operating system is similar to an application setting the AMR. If the accelerator integration circuit <b>436</b> and graphics acceleration module <b>446</b> implementations do not support a User Authority Mask Override Register (UAMOR), the operating system may apply the current UAMOR value to the AMR value before passing the AMR in the hypervisor call. The hypervisor <b>496</b> may optionally apply the current Authority Mask Override Register (AMOR) value before placing the AMR into the process element <b>483</b>. In one embodiment, the CSRP is one of the registers <b>445</b> containing the effective address of an area in the application's address space <b>482</b> for the graphics acceleration module <b>446</b> to save and restore the context state. This pointer is optional if no state is required to be saved between jobs or when a job is preempted. The context save/restore area may be pinned system memory.</p><p id="p-0127" num="0124">Upon receiving the system call, the operating system <b>495</b> may verify that the application <b>480</b> has registered and been given the authority to use the graphics acceleration module <b>446</b>. The operating system <b>495</b> then calls the hypervisor <b>496</b> with the information shown in Table 3.</p><p id="p-0128" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>OS to Hypervisor Call Parameters</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="161pt" align="left"/><tbody valign="top"><row><entry/><entry>1</entry><entry>A work descriptor (WD)</entry></row><row><entry/><entry>2</entry><entry>An Authority Mask Register (AMR) value </entry></row><row><entry/><entry/><entry>(potentially masked).</entry></row><row><entry/><entry>3</entry><entry>An effective address (EA) Context Save/Restore </entry></row><row><entry/><entry/><entry>Area Pointer (CSRP)</entry></row><row><entry/><entry>4</entry><entry>A process ID (PID) and optional thread ID (TID)</entry></row><row><entry/><entry>5</entry><entry>A virtual address (VA) accelerator utilization </entry></row><row><entry/><entry/><entry>record pointer (AURP)</entry></row><row><entry/><entry>6</entry><entry>The virtual address of the storage segment table </entry></row><row><entry/><entry/><entry>pointer (SSTP)</entry></row><row><entry/><entry>7</entry><entry>A logical interrupt service number (LISN)</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0129" num="0125">Upon receiving the hypervisor call, the hypervisor <b>496</b> verifies that the operating system <b>495</b> has registered and been given the authority to use the graphics acceleration module <b>446</b>. The hypervisor <b>496</b> then puts the process element <b>483</b> into the process element linked list for the corresponding graphics acceleration module <b>446</b> type. The process element may include the information shown in Table 4</p><p id="p-0130" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Process Element Information</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="168pt" align="left"/><tbody valign="top"><row><entry/><entry>&#x2002;1</entry><entry>A work descriptor (WD)</entry></row><row><entry/><entry>&#x2002;2</entry><entry>An Authority Mask Register (AMR) value </entry></row><row><entry/><entry/><entry>(potentially masked).</entry></row><row><entry/><entry>&#x2002;3</entry><entry>An effective address (EA) Context Save/Restore </entry></row><row><entry/><entry/><entry>Area Pointer (CSRP)</entry></row><row><entry/><entry>&#x2002;4</entry><entry>A process ID (PID) and optional thread ID (TID)</entry></row><row><entry/><entry>&#x2002;5</entry><entry>A virtual address (VA) accelerator utilization </entry></row><row><entry/><entry/><entry>record pointer (AURP)</entry></row><row><entry/><entry>&#x2002;6</entry><entry>The virtual address of the storage segment table </entry></row><row><entry/><entry/><entry>pointer (SSTP)</entry></row><row><entry/><entry>&#x2002;7</entry><entry>A logical interrupt service number (LISN)</entry></row><row><entry/><entry>&#x2002;8</entry><entry>Interrupt vector table, derived from the hypervisor </entry></row><row><entry/><entry/><entry>call parameters.</entry></row><row><entry/><entry>&#x2002;9</entry><entry>A state register (SR) value</entry></row><row><entry/><entry>10</entry><entry>A logical partition ID (LPID)</entry></row><row><entry/><entry>11</entry><entry>A real address (RA) hypervisor accelerator </entry></row><row><entry/><entry/><entry>utilization record pointer</entry></row><row><entry/><entry>12</entry><entry>The Storage Descriptor Register (SDR)</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0131" num="0126">In one embodiment, the hypervisor initializes a plurality of accelerator integration slice <b>490</b> registers <b>445</b>.</p><p id="p-0132" num="0127">As illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, one embodiment of the invention employs a unified memory addressable via a common virtual memory address space used to access the physical processor memories <b>401</b>-<b>402</b> and GPU memories <b>420</b>-<b>423</b>. In this implementation, operations executed on the GPUs <b>410</b>-<b>413</b> utilize the same virtual/effective memory address space to access the processors memories <b>401</b>-<b>402</b> and vice versa, thereby simplifying programmability. In one embodiment, a first portion of the virtual/effective address space is allocated to the processor memory <b>401</b>, a second portion to the second processor memory <b>402</b>, a third portion to the GPU memory <b>420</b>, and so on. The entire virtual/effective memory space (sometimes referred to as the effective address space) is thereby distributed across each of the processor memories <b>401</b>-<b>402</b> and GPU memories <b>420</b>-<b>423</b>, allowing any processor or GPU to access any physical memory with a virtual address mapped to that memory.</p><p id="p-0133" num="0128">In one embodiment, bias/coherence management circuitry <b>494</b>A-<b>494</b>E within one or more of the MMUs <b>439</b>A-<b>439</b>E ensures cache coherence between the caches of the host processors (e.g., <b>405</b>) and the GPUs <b>410</b>-<b>413</b> and implements biasing techniques indicating the physical memories in which certain types of data should be stored. While multiple instances of bias/coherence management circuitry <b>494</b>A-<b>494</b>E are illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, the bias/coherence circuitry may be implemented within the MMU of one or more host processors <b>405</b> and/or within the accelerator integration circuit <b>436</b>.</p><p id="p-0134" num="0129">One embodiment allows GPU-attached memory <b>420</b>-<b>423</b> to be mapped as part of system memory, and accessed using shared virtual memory (SVM) technology, but without suffering the typical performance drawbacks associated with full system cache coherence. The ability to GPU-attached memory <b>420</b>-<b>423</b> to be accessed as system memory without onerous cache coherence overhead provides a beneficial operating environment for GPU offload. This arrangement allows the host processor <b>405</b> software to setup operands and access computation results, without the overhead of tradition I/O DMA data copies. Such traditional copies involve driver calls, interrupts and memory mapped I/O (MMIO) accesses that are all inefficient relative to simple memory accesses. At the same time, the ability to access GPU attached memory <b>420</b>-<b>423</b> without cache coherence overheads can be critical to the execution time of an offloaded computation. In cases with substantial streaming write memory traffic, for example, cache coherence overhead can significantly reduce the effective write bandwidth seen by a GPU <b>410</b>-<b>413</b>. The efficiency of operand setup, the efficiency of results access, and the efficiency of GPU computation all play a role in determining the effectiveness of GPU offload.</p><p id="p-0135" num="0130">In one implementation, the selection of between GPU bias and host processor bias is driven by a bias tracker data structure. A bias table may be used, for example, which may be a page-granular structure (i.e., controlled at the granularity of a memory page) that includes 1 or 2 bits per GPU-attached memory page. The bias table may be implemented in a stolen memory range of one or more GPU-attached memories <b>420</b>-<b>423</b>, with or without a bias cache in the GPU <b>410</b>-<b>413</b> (e.g., to cache frequently/recently used entries of the bias table). Alternatively, the entire bias table may be maintained within the GPU.</p><p id="p-0136" num="0131">In one implementation, the bias table entry associated with each access to the GPU-attached memory <b>420</b>-<b>423</b> is accessed prior the actual access to the GPU memory, causing the following operations. First, local requests from the GPU <b>410</b>-<b>413</b> that find their page in GPU bias are forwarded directly to a corresponding GPU memory <b>420</b>-<b>423</b>. Local requests from the GPU that find their page in host bias are forwarded to the processor <b>405</b> (e.g., over a high-speed link as discussed above). In one embodiment, requests from the processor <b>405</b> that find the requested page in host processor bias complete the request like a normal memory read. Alternatively, requests directed to a GPU-biased page may be forwarded to the GPU <b>410</b>-<b>413</b>. The GPU may then transition the page to a host processor bias if it is not currently using the page.</p><p id="p-0137" num="0132">The bias state of a page can be changed either by a software-based mechanism, a hardware-assisted software-based mechanism, or, for a limited set of cases, a purely hardware-based mechanism.</p><p id="p-0138" num="0133">One mechanism for changing the bias state employs an API call (e.g. OpenCL), which, in turn, calls the GPU's device driver which, in turn, sends a message (or enqueues a command descriptor) to the GPU directing it to change the bias state and, for some transitions, perform a cache flushing operation in the host. The cache flushing operation is required for a transition from host processor <b>405</b> bias to GPU bias, but is not required for the opposite transition.</p><p id="p-0139" num="0134">In one embodiment, cache coherency is maintained by temporarily rendering GPU-biased pages uncacheable by the host processor <b>405</b>. To access these pages, the processor <b>405</b> may request access from the GPU <b>410</b> which may or may not grant access right away, depending on the implementation. Thus, to reduce communication between the processor <b>405</b> and GPU <b>410</b> it is beneficial to ensure that GPU-biased pages are those which are required by the GPU but not the host processor <b>405</b> and vice versa.</p><p id="p-0140" num="0135">Graphics Processing Pipeline</p><p id="p-0141" num="0136"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a graphics processing pipeline <b>500</b>, according to an embodiment. In one embodiment, a graphics processor can implement the illustrated graphics processing pipeline <b>500</b>. The graphics processor can be included within the parallel processing subsystems as described herein, such as the parallel processor <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, which, in one embodiment, is a variant of the parallel processor(s) <b>112</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The various parallel processing systems can implement the graphics processing pipeline <b>500</b> via one or more instances of the parallel processing unit (e.g., parallel processing unit <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) as described herein. For example, a shader unit (e.g., graphics multiprocessor <b>234</b> of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>) may be configured to perform the functions of one or more of a vertex processing unit <b>504</b>, a tessellation control processing unit <b>508</b>, a tessellation evaluation processing unit <b>512</b>, a geometry processing unit <b>516</b>, and a fragment/pixel processing unit <b>524</b>. The functions of data assembler <b>502</b>, primitive assemblers <b>506</b>, <b>514</b>, <b>518</b>, tessellation unit <b>510</b>, rasterizer <b>522</b>, and raster operations unit <b>526</b> may also be performed by other processing engines within a processing cluster (e.g., processing cluster <b>214</b> of <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>) and a corresponding partition unit (e.g., partition unit <b>220</b>A-<b>220</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>). The graphics processing pipeline <b>500</b> may also be implemented using dedicated processing units for one or more functions. In one embodiment, one or more portions of the graphics processing pipeline <b>500</b> can be performed by parallel processing logic within a general-purpose processor (e.g., CPU). In one embodiment, one or more portions of the graphics processing pipeline <b>500</b> can access on-chip memory (e.g., parallel processor memory <b>222</b> as in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) via a memory interface <b>528</b>, which may be an instance of the memory interface <b>218</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0142" num="0137">In one embodiment, the data assembler <b>502</b> is a processing unit that collects vertex data for surfaces and primitives. The data assembler <b>502</b> then outputs the vertex data, including the vertex attributes, to the vertex processing unit <b>504</b>. The vertex processing unit <b>504</b> is a programmable execution unit that executes vertex shader programs, lighting and transforming vertex data as specified by the vertex shader programs. The vertex processing unit <b>504</b> reads data that is stored in cache, local or system memory for use in processing the vertex data and may be programmed to transform the vertex data from an object-based coordinate representation to a world space coordinate space or a normalized device coordinates space.</p><p id="p-0143" num="0138">A first instance of a primitive assembler <b>506</b> receives vertex attributes from the vertex processing unit <b>504</b>. The primitive assembler <b>506</b> readings stored vertex attributes as needed and constructs graphics primitives for processing by tessellation control processing unit <b>508</b>. The graphics primitives include triangles, line segments, points, patches, and so forth, as supported by various graphics processing application programming interfaces (APIs).</p><p id="p-0144" num="0139">The tessellation control processing unit <b>508</b> treats the input vertices as control points for a geometric patch. The control points are transformed from an input representation from the patch (e.g., the patch's bases) to a representation that is suitable for use in surface evaluation by the tessellation evaluation processing unit <b>512</b>. The tessellation control processing unit <b>508</b> can also compute tessellation factors for edges of geometric patches. A tessellation factor applies to a single edge and quantifies a view-dependent level of detail associated with the edge. A tessellation unit <b>510</b> is configured to receive the tessellation factors for edges of a patch and to tessellate the patch into multiple geometric primitives such as line, triangle, or quadrilateral primitives, which are transmitted to a tessellation evaluation processing unit <b>512</b>. The tessellation evaluation processing unit <b>512</b> operates on parameterized coordinates of the subdivided patch to generate a surface representation and vertex attributes for each vertex associated with the geometric primitives.</p><p id="p-0145" num="0140">A second instance of a primitive assembler <b>514</b> receives vertex attributes from the tessellation evaluation processing unit <b>512</b>, reading stored vertex attributes as needed, and constructs graphics primitives for processing by the geometry processing unit <b>516</b>. The geometry processing unit <b>516</b> is a programmable execution unit that executes geometry shader programs to transform graphics primitives received from primitive assembler <b>514</b> as specified by the geometry shader programs. In one embodiment, the geometry processing unit <b>516</b> is programmed to subdivide the graphics primitives into one or more new graphics primitives and calculate parameters used to rasterize the new graphics primitives.</p><p id="p-0146" num="0141">In some embodiments, the geometry processing unit <b>516</b> can add or delete elements in the geometry stream. The geometry processing unit <b>516</b> outputs the parameters and vertices specifying new graphics primitives to primitive assembler <b>518</b>. The primitive assembler <b>518</b> receives the parameters and vertices from the geometry processing unit <b>516</b> and constructs graphics primitives for processing by a viewport scale, cull, and clip unit <b>520</b>. The geometry processing unit <b>516</b> reads data that is stored in parallel processor memory or system memory for use in processing the geometry data. The viewport scale, cull, and clip unit <b>520</b> performs clipping, culling, and viewport scaling and outputs processed graphics primitives to a rasterizer <b>522</b>.</p><p id="p-0147" num="0142">The rasterizer <b>522</b> can perform depth culling and other depth-based optimizations. The rasterizer <b>522</b> also performs scan conversion on the new graphics primitives to generate fragments and outputs those fragments and associated coverage data to the fragment/pixel processing unit <b>524</b>.</p><p id="p-0148" num="0143">The fragment/pixel processing unit <b>524</b> is a programmable execution unit that is configured to execute fragment shader programs or pixel shader programs. The fragment/pixel processing unit <b>524</b> transforming fragments or pixels received from rasterizer <b>522</b>, as specified by the fragment or pixel shader programs. For example, the fragment/pixel processing unit <b>524</b> may be programmed to perform operations included but not limited to texture mapping, shading, blending, texture correction and perspective correction to produce shaded fragments or pixels that are output to a raster operations unit <b>526</b>. The fragment/pixel processing unit <b>524</b> can read data that is stored in either the parallel processor memory or the system memory for use when processing the fragment data. Fragment or pixel shader programs may be configured to shade at sample, pixel, tile, or other granularities, depending on the sampling rate configured for the processing units.</p><p id="p-0149" num="0144">The raster operations unit <b>526</b> is a processing unit that performs raster operations including, but not limited to stencil, z test, blending, and the like, and outputs pixel data as processed graphics data to be storage in graphics memory, e.g., parallel processor memory <b>222</b> as in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, and/or system memory <b>104</b> as in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, to be displayed on the one or more display device(s) <b>110</b> or for further processing by one of the one or more processor(s) <b>102</b> or parallel processor(s) <b>112</b>. In some embodiments, the raster operations unit <b>526</b> is configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.</p><p id="p-0150" num="0145"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a computing device <b>600</b> hosting a smart compression/decompression mechanism (&#x201c;compression mechanism&#x201d;) <b>610</b> according to one embodiment. Computing device <b>600</b> represents a communication and data processing device including (but not limited to) smart wearable devices, smartphones, virtual reality (VR) devices, head-mounted display (HMDs), mobile computers, Internet of Things (IoT) devices, laptop computers, desktop computers, server computers, etc., and be similar to or the same as computing device <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>; accordingly, for brevity, clarity, and ease of understanding, many of the details stated above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>5</b></figref> are not further discussed or repeated hereafter.</p><p id="p-0151" num="0146">Computing device <b>600</b> may further include (without limitations) an autonomous machine or an artificially intelligent agent, such as a mechanical agent or machine, an electronics agent or machine, a virtual agent or machine, an electro-mechanical agent or machine, etc. Examples of autonomous machines or artificially intelligent agents may include (without limitation) robots, autonomous vehicles (e.g., self-driving cars, self-flying planes, self-sailing boats, etc.), autonomous equipment (self-operating construction vehicles, self-operating medical equipment, etc.), and/or the like. Throughout this document, &#x201c;computing device&#x201d; may be interchangeably referred to as &#x201c;autonomous machine&#x201d; or &#x201c;artificially intelligent agent&#x201d; or simply &#x201c;robot&#x201d;.</p><p id="p-0152" num="0147">Computing device <b>600</b> may further include (without limitations) large computing systems, such as server computers, desktop computers, etc., and may further include set-top boxes (e.g., Internet-based cable television set-top boxes, etc.), global positioning system (GPS)-based devices, etc. Computing device <b>600</b> may include mobile computing devices serving as communication devices, such as cellular phones including smartphones, personal digital assistants (PDAs), tablet computers, laptop computers, e-readers, smart televisions, television platforms, wearable devices (e.g., glasses, watches, bracelets, smartcards, jewelry, clothing items, etc.), media players, etc. For example, in one embodiment, computing device <b>600</b> may include a mobile computing device employing a computer platform hosting an integrated circuit (&#x201c;IC&#x201d;), such as system on a chip (&#x201c;SoC&#x201d; or &#x201c;SOC&#x201d;), integrating various hardware and/or software components of computing device <b>600</b> on a single chip.</p><p id="p-0153" num="0148">As illustrated, in one embodiment, computing device <b>600</b> may include any number and type of hardware and/or software components, such as (without limitation) graphics processing unit (&#x201c;GPU&#x201d; or simply &#x201c;graphics processor&#x201d;) <b>614</b>, graphics driver (also referred to as &#x201c;GPU driver&#x201d;, &#x201c;graphics driver logic&#x201d;, &#x201c;driver logic&#x201d;, user-mode driver (UMD), UMD, user-mode driver framework (UMDF), UMDF, or simply &#x201c;driver&#x201d;) <b>616</b>, central processing unit (&#x201c;CPU&#x201d; or simply &#x201c;application processor&#x201d;) <b>612</b>, memory <b>608</b>, network devices, drivers, or the like, as well as input/output (I/O) sources <b>604</b>, such as touchscreens, touch panels, touch pads, virtual or regular keyboards, virtual or regular mice, ports, connectors, etc. Computing device <b>600</b> may include operating system (OS) <b>606</b> serving as an interface between hardware and/or physical resources of the computer device <b>600</b> and a user. It is contemplated that graphics processor <b>614</b> and application processor <b>612</b> may be one or more of processor(s) <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0154" num="0149">It is to be appreciated that a lesser or more equipped system than the example described above may be preferred for certain implementations. Therefore, the configuration of computing device <b>600</b> may vary from implementation to implementation depending upon numerous factors, such as price constraints, performance requirements, technological improvements, or other circumstances.</p><p id="p-0155" num="0150">Embodiments may be implemented as any or a combination of: one or more microchips or integrated circuits interconnected using a parentboard, hardwired logic, software stored by a memory device and executed by a microprocessor, firmware, an application specific integrated circuit (ASIC), and/or a field programmable gate array (FPGA). The terms &#x201c;logic&#x201d;, &#x201c;module&#x201d;, &#x201c;component&#x201d;, &#x201c;engine&#x201d;, and &#x201c;mechanism&#x201d; may include, by way of example, software or hardware and/or combinations of software and hardware.</p><p id="p-0156" num="0151">In one embodiment, compression mechanism <b>610</b> may be hosted or facilitated by operating system <b>606</b> of computing device <b>600</b>. In another embodiment, compression mechanism <b>610</b> may be hosted by or part of graphics processing unit (&#x201c;GPU&#x201d; or simply &#x201c;graphics processor&#x201d;) <b>614</b> or firmware of graphics processor <b>614</b>. For example, compression mechanism <b>610</b> may be embedded in or implemented as part of the processing hardware of graphics processor <b>614</b>. Similarly, in yet another embodiment, compression mechanism <b>610</b> may be hosted by or part of central processing unit (&#x201c;CPU&#x201d; or simply &#x201c;application processor&#x201d;) <b>612</b>. For example, thread group mechanism <b>610</b> may be embedded in or implemented as part of the processing hardware of application processor <b>612</b>. In yet another embodiment, compression mechanism <b>610</b> may be hosted by or part of any number and type of components of computing device <b>600</b>, such as a portion of compression mechanism <b>610</b> may be hosted by or part of operating system <b>606</b>, another portion may be hosted by or part of graphics processor <b>614</b>, another portion may be hosted by or part of application processor <b>612</b>, while one or more portions of compression mechanism <b>610</b> may be hosted by or part of operating system <b>606</b> and/or any number and type of devices of computing device <b>600</b>. It is contemplated that one or more portions or components of compression mechanism <b>610</b> may be employed as hardware, software, and/or firmware.</p><p id="p-0157" num="0152">It is contemplated that embodiments are not limited to any particular implementation or hosting of compression mechanism <b>610</b> and that compression mechanism <b>610</b> and one or more of its components may be implemented as hardware, software, firmware, or any combination thereof.</p><p id="p-0158" num="0153">Computing device <b>600</b> may host network interface(s) to provide access to a network, such as a LAN, a wide area network (WAN), a metropolitan area network (MAN), a personal area network (PAN), Bluetooth, a cloud network, a mobile network (e.g., 3rd Generation (3G), 4th Generation (4G), etc.), an intranet, the Internet, etc. Network interface(s) may include, for example, a wireless network interface having antenna, which may represent one or more antenna(e). Network interface(s) may also include, for example, a wired network interface to communicate with remote devices via network cable, which may be, for example, an Ethernet cable, a coaxial cable, a fiber optic cable, a serial cable, or a parallel cable.</p><p id="p-0159" num="0154">Embodiments may be provided, for example, as a computer program product which may include one or more machine-readable media having stored thereon machine-executable instructions that, when executed by one or more machines such as a computer, network of computers, or other electronic devices, may result in the one or more machines carrying out operations in accordance with embodiments described herein. A machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs (Compact Disc-Read Only Memories), and magneto-optical disks, ROMs, RAMs, EPROMs (Erasable Programmable Read Only Memories), EEPROMs (Electrically Erasable Programmable Read Only Memories), magnetic or optical cards, flash memory, or other type of media/machine-readable medium suitable for storing machine-executable instructions.</p><p id="p-0160" num="0155">Moreover, embodiments may be downloaded as a computer program product, wherein the program may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of one or more data signals embodied in and/or modulated by a carrier wave or other propagation medium via a communication link (e.g., a modem and/or network connection).</p><p id="p-0161" num="0156">Throughout the document, term &#x201c;user&#x201d; may be interchangeably referred to as &#x201c;viewer&#x201d;, &#x201c;observer&#x201d;, &#x201c;person&#x201d;, &#x201c;individual&#x201d;, &#x201c;end-user&#x201d;, and/or the like. It is to be noted that throughout this document, terms like &#x201c;graphics domain&#x201d; may be referenced interchangeably with &#x201c;graphics processing unit&#x201d;, &#x201c;graphics processor&#x201d;, or simply &#x201c;GPU&#x201d; and similarly, &#x201c;CPU domain&#x201d; or &#x201c;host domain&#x201d; may be referenced interchangeably with &#x201c;computer processing unit&#x201d;, &#x201c;application processor&#x201d;, or simply &#x201c;CPU&#x201d;.</p><p id="p-0162" num="0157">It is to be noted that terms like &#x201c;node&#x201d;, &#x201c;computing node&#x201d;, &#x201c;server&#x201d;, &#x201c;server device&#x201d;, &#x201c;cloud computer&#x201d;, &#x201c;cloud server&#x201d;, &#x201c;cloud server computer&#x201d;, &#x201c;machine&#x201d;, &#x201c;host machine&#x201d;, &#x201c;device&#x201d;, &#x201c;computing device&#x201d;, &#x201c;computer&#x201d;, &#x201c;computing system&#x201d;, and the like, may be used interchangeably throughout this document. It is to be further noted that terms like &#x201c;application&#x201d;, &#x201c;software application&#x201d;, &#x201c;program&#x201d;, &#x201c;software program&#x201d;, &#x201c;package&#x201d;, &#x201c;software package&#x201d;, and the like, may be used interchangeably throughout this document. Also, terms like &#x201c;job&#x201d;, &#x201c;input&#x201d;, &#x201c;request&#x201d;, &#x201c;message&#x201d;, and the like, may be used interchangeably throughout this document.</p><p id="p-0163" num="0158"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates compression mechanism <b>610</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref> according to one embodiment. For brevity, many of the details already discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>6</b></figref> are not repeated or discussed hereafter. In one embodiment, compression mechanism <b>610</b> may include any number and type of components, such as (without limitations): detection/monitoring logic <b>701</b>; layout logic <b>703</b>; color compression logic <b>705</b>; communication/compatibility logic <b>707</b>; depth compression logic <b>709</b>; unified compression logic <b>711</b>; and constant alpha value logic <b>713</b>.</p><p id="p-0164" num="0159">In one embodiment, a novel technique is provided for taking advantage of CPS by offering a CPS-friendly layout, as facilitated by layout logic <b>703</b>, to avail opportunities in, for example, pixel backend for CPS-friendly compression for subspans or portions of constant colors referring to subjective constancy and human color perception to ensure that a perceived color of objects remains relatively constant under varying illumination conditions. As previously described, CPS refers to coarse pixel shading which refers to an architecture for flexible control of shading rates in a GPU pipeline and is capable of demonstrating substantially reduced shading costs for various applications. CPS is better suited for high pixel density displays and takes advantage of geometric occlusion that typically introduces high-frequency details compared to surface shading, while performing shading at a lower rate than visibility testing. For example, detection/monitoring logic <b>701</b> may include compression detection logic to detect and/or monitor compression tasks and their relevant components, such as data streams that are to be compressed. Similarly, detection/monitoring logic <b>701</b> may further include constant detection logic to detect and/or monitor constants, such as constant alpha, random alpha, etc., where a constant alpha is triggered when the values of an alpha channel are the same, while a random alpha is triggered when the values of an alpha channel are random. This information may then be used by layout logic <b>703</b> for generating CPS-friendly layout for allowing an extra state for adding a new compression algorithm to support multiple and different compressed surface layouts. Further, this novel unified compressed surface layout is more efficient in addressing certain issues and simplifying matters without having to grow any of control surface bits.</p><p id="p-0165" num="0160">Further, given the need for processing power and memory bandwidth, there are numerous conventional techniques attempting at reducing bandwidth; however, none of these techniques provide for CPS-friendly compression layouts to take advantage of constant color.</p><p id="p-0166" num="0161">As described above, with CPS being enabled, a sub span or a portion of constant colors is stored as merely 1 pixel value, while the rest of the subspans/portions are simply stored as delta values for each pixel. This novel technique allows for elimination of necessity of storing the highest order channel, such as dA is not stored, and thus, any of the relevant bits are used for other channels to compress at other sets of data that are needed to be compressed at higher ratios. It is contemplated that highest order channel may refer to alpha or dA of red, green, blue, alpha (RGBA). This explicit value of dA is all the renaming left over high-order or most significant bits (MSB) as the compression engine would guarantee that MSB is packed with Os. <figref idref="DRAWINGS">FIG. <b>7</b>B</figref> is an illustration of a CPS hybrid compressed bit layout. In an example, a CPS hybrid compressed bit layout may appear as shown in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>.</p><p id="p-0167" num="0162">It is to be noted that in the layout shown in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, a number of spans may be CPS-enabled that are capable of being compressed by constant color, such as for 32/64/128 BPP may have 8/4/2 bits, respectively. Further, delta for the highest order channel (such as A for red green blue alpha (RGBA))=delta_per_pixel&#x2212;dR&#x2212;dG&#x2212;dB. It is contemplated that 32BPP refers to 32 bits per pixel, such as when RGBA is 32BPP, then each of red, green, blue, and alpha would have 8 bits per channel, dR, dG, dB, and dA refer to delta bits needed for encoding of 32BPP of red, green, blue, and alpha, respectively, where each of dR, dG, dB, and dB is 3 bits. It is contemplated that Golomb refers to Golomb coding that is lossless data compression using a family of data compression codes, where alphabets following a geometric distribution may have a Golomb code serving as an optimal prefix code. This technique allows for Golomb coding to be better suited for occurrences of small values in input streams, where small values more likely to occur than large values.</p><p id="p-0168" num="0163">Embodiments further provide for a compression scheme for offering improved color compression for achieving an even higher memory bandwidth savings. For example, compression may be used for saving the memory bandwidth of dynamic random access memory (DRAM) and thus, allowing for saving of power relating to dual in-line memory module (DIMM). In one embodiment, color compression logic <b>705</b> may be used for media compression for compressing color traffic with one or more formats, such as 32BPP formats. In one embodiment, color compression logic <b>705</b> provides for migration of a compression system to unified compression with both three-dimensional (3D) data and media as facilitated by unified compression logic <b>711</b>.</p><p id="p-0169" num="0164">For example, using color compression logic <b>705</b>, in a unified compression scheme as facilitated by unified compression logic <b>711</b>, an average of 3.5% of double data rate (DDR) bandwidth may be compressed in a 32BPP scenario. To get these savings, a novel ex-Golomb entropy coding may be used that is suited for 3D color traffic data, where this algorithm also provides for using any existing SKIP bits concepts that are used in color compression.</p><p id="p-0170" num="0165">Most lossless compression techniques perform two operations in sequence: generating a statistical model for input data, and using this model to map input data to bit sequences in such a way that &#x201c;probable&#x201d; (e.g., frequently encountered) data produces shorter output than &#x201c;improbable&#x201d; data. This is illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0171" num="0166">As referenced in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, source image/video data <b>801</b> is processed through a first process of predictor/delta computation <b>803</b> of lossless compression scheme. As illustrated, source image/video data (&#x201c;input data&#x201d;) <b>801</b> is received as an input, where using predictor/delta computation <b>803</b> is used to reduce redundancy in source image/video data <b>801</b> that is then received as an input to entropy encoder <b>805</b> along with another input, the predefined fixed length or latency-intensive variable length encoded statistical model <b>807</b>, leading to compression of source image/video data <b>801</b> into compressed image/video data <b>809</b>. Stated differently, any redundancy in input data <b>801</b> is reduced or eliminated by computing a difference between a minimum value of a channel and all other values in the channel, where this difference refers to delta (difference values). By taking this difference, the smaller value of each channel is obtained.</p><p id="p-0172" num="0167">Statistical model <b>807</b> can provide information about the probability of the occurrence of the symbols or events. Using this information, entropy encoder <b>805</b> uses predefined prefix encoding or variable length encoding techniques to convert the symbols into compressed data. This information varies with the type of data associated with an application, such as media would have different probability values per symbol, while text data would have some other values.</p><p id="p-0173" num="0168">For example, compression depends on two things, such as 1) the way delta computation is performed, and 2) the way the encoding is performed using the statistical model. In case of lossless compressions, a lossless compression process uses minimum/maximum delta computation along with fixed-length encoding to reduce latency generally associated with a compression process, such as a fixed-length is likely to have reduced latency than a variable length.</p><p id="p-0174" num="0169">Conventional techniques employ algorithms that use delta minimum/maximum to compute deltas where even a single higher value of bits in data streams in the respective channel can give rise to higher delta bits to be encoded. For example, given minimum/maximum delta encoding, the difference between the minimum and the maximum can be as high as 230, such as 255&#x2212;25=230. In other words, this conventional technique needs 8 bits per delta for fixed-length encoding, so if 32 delta values are used, this can require 32*8=256 bits per channel, which is equivalent to 1024 bits per R8G8B8A8, which, in turn, leads the compression to fail. For example, in a case where a red channel having various values may have a minimum value of 25 (which is most of the values in any channel) and maximum values of 255 (which is only one value). Now, using this example, if a conventional delta computation technique is applied, the maximum delta values is likely to be 255&#x2212;25=230, needing 8 bits per delta, while having 32 such values per channel and 4 channels altogether. In other words, this makes 1024 bits after encoding, which makes for compression failure.</p><p id="p-0175" num="0170">Referring back to compression mechanism <b>610</b> of <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, in one embodiment, color compression logic <b>705</b> may be used to make use of media compression with merely a single SEED (or seed) per channel and further, making use of SKIP bits that are being used in 3D color compression to save memory. For example, if delta between the adjacent samples are taken and the delta values are then encoded using variable length encodings, such as Golomb coding or Rice coding, these values can then be compressed into fewer number of bits. This way, merely the outliers are penalized as opposed to the entire channel, since only some of the bits are compressed as opposed to all bits in the channel. With regard to SKIP (or skip), when all the values of a respective channel are determined to be or regarded as equal, then delta computation is SKIPPED by a SKIP bit to 1; similarly, the decompression block also SKIPS the delta computation and simply replicates all the channel values with the corresponding SEED values. It is contemplated that SEED refer to reference values, where this values is sent along with the compressed data and when decompression is needed, a SEED may be used to perform reverse calculations. In some embodiments, delta values are encoded using a modified where using ex-Golomb encoding with sign, 0 may need only 1 bit, while 230 may need 11 bits, so a total of twenty-nine zeros, one seed, one (+230), and one (&#x2212;230) needing 8+29*1+2*11=59 bits. Additional bits may be saved using SKIP bits.</p><p id="p-0176" num="0171">Referring now to <figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref>, where <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> provides for a delta computation flow <b>900</b> for R8G8B8A8 using immediately adjacent pixel values, and <figref idref="DRAWINGS">FIG. <b>9</b>B</figref> illustrates Golomb encoding <b>910</b>.</p><p id="p-0177" num="0172">For example, in Golomb encoding, numbers/symbols may be divided into groups of equal size m (where m=2{circumflex over (&#x2003;)}k or m!=2{circumflex over (&#x2003;)}k), where Golomb encoding is denoted as Golomb(m) or Golomb-m. Once it is done, the next process is to assign groups with smaller symbol values with shorter codes, such as symbols in the same group having code-words of similar lengths as shown in <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>. The corresponding code-words are defined as {Unary code, fixed length code} which may be depicted as Group ID: Unary Code; and Index ID: Fixed-Length Code. For example, a lookup is performed in strides of k bits, where a lookup complexity may be defined as a number of bits in a prefix divided by k bits.</p><p id="p-0178" num="0173">So the numbers and/or symbols are represented with x=x<sub>q</sub>m+x<sub>r </sub>format, where m is the divisor, x<sub>q </sub>is the quotient that is represented with unary code, while x<sub>r </sub>is the remainder that is represented with fixed-length code, where the unary code converts the given input &#x201c;n&#x201d; into consecutive n ones followed by zero, or n zeroes followed by one, as shown in table <b>920</b> of <figref idref="DRAWINGS">FIG. <b>9</b>C</figref>.</p><p id="p-0179" num="0174">Now referring to using ex-Golomb encoding <b>930</b> of <figref idref="DRAWINGS">FIG. <b>9</b>D</figref>, as facilitated by color compression logic <b>705</b> of <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, in ex-Golomb code, the group size may increase exponentially, where the codes still contain two parts, such as unary code, followed by fixed-length code as depicted in <figref idref="DRAWINGS">FIG. <b>9</b>E</figref>. For example, in one embodiment, the last column of <figref idref="DRAWINGS">FIG. <b>9</b>E</figref> illustrates a code length, such as 7, which varies with respect to ex-Golomb encoding <b>930</b> of <figref idref="DRAWINGS">FIG. <b>9</b>D</figref>, as in exponential fashion.</p><p id="p-0180" num="0175">For 3D color data, this ex-Golomb is modified to suit the data distribution of color data, where the new ex-Golomb table <b>1310</b> is shown with respect to <figref idref="DRAWINGS">FIG. <b>13</b></figref>. Further, with regard to SKIP bits, when all values of a respective channel are regarded as equal, then the delta computation may be skipped by setting the SKIP bit to &#x201c;1&#x201d;, where the decompressing block to also SKIP delta computation and replicate all the channel values with the SEED value as further described with reference to <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0181" num="0176">For example, with considering various compression schemes, such as seed, SKIP bits, residual bits, etc., conventional technique are limited to a minimum value with regard to seed compression, while embodiments provide for a first value. Similarly, with respect to residual bits, conventional techniques may be limited to 12 bits (each channel needing 3 bits, total four channels), while embodiments eliminate the need for such bits and allow for using variable length encoding.</p><p id="p-0182" num="0177">In one embodiment, unified compression is migrated between 3D and media as facilitated by unified compression logic <b>707</b>. In one embodiment, a hybrid compression scheme of 3D and media is provided with a simplified predictor term. Further, different frames across S-curve may be used with only 32BPP cases. It is contemplated that S-curve may refer to or contain a set of benchmarks and workloads, while 32BPP is merely used as an example for brevity and that embodiments are not limited as such. For example, 32BPP may be extended to 64BPP. Embodiments provide for greater savings of bandwidth, such as &#x2dc;3.5% more bandwidth savings than the existing 2:1 compression scheme. In one embodiment, color compression logic <b>705</b> may be triggered to use a new Ex-Golomb table to suit the color traffic, while using SKIP bits with variable length encoding. This technique further paves the way for unified compression as facilitated by unified compression logic <b>711</b>.</p><p id="p-0183" num="0178">Embodiments further provide for lossless depth compression for memory bandwidth savings as facilitated by depth compression logic <b>709</b>. In one embodiment, depth compression logic <b>709</b> may be used to convert depth formats (such as 32 bit depth formats like R16G16_*/R32_*) into R8G8B8A8 format, while making use of media compression (which uses variable length encoding) to compression Z traffic. It is contemplated that Z traffic refers to depth traffic having depth information, where Z formats are R32 or R16. Now, for example, by converting R32 into R8G8B8A8 and performing regular compression using conversion logic of depth compression logic <b>709</b>, superior compression is achieved than simply using R32. As previously described, this novel technique may also be used to have a unified compression that migrates between 3D and media as facilitated by unified compression logic <b>711</b>. For example, incorporating YCoCg and 4:n lossless compression techniques, without significant hardware and/or software modifications.</p><p id="p-0184" num="0179">In one embodiment, certain large formats, such as 32 bit Z format, may be divided into smaller chunks of 8 bits to perform compression on smaller chunks of data to provide better granularity to compress the data. As previously described, embodiments are not limited to 32 bit formats, such as large formats may include 64 bit formats, etc. For example, if Z uses 32BPP formats, such as R16G16_SINT, R16G16_UNIT, etc., then for a format like R16G16_*, after minimum/maximum delta compression, the delta values are likely to be in the range of [0, 2<sup>16</sup>-1]. With the range being high, a number of bits needed to represent the delta values may be high, making compression vulnerable to failure. In one embodiment, R16G16_* and R32_* formats may be converted into R8G8B8A8 format using conversion logic of depth compression logic <b>709</b>, and then compute the adjacent delta, followed by entropy encoding. This conversion makes the delta values to lie in the range [0, 2<sup>8</sup>-1], which is much smaller than the original delta values, allowing for better compression. After the decompression, the R8G8B8A8 format may then be repacked into respective R16G16_* or R32_* formats using repacking logic of depth compression logic <b>709</b>.</p><p id="p-0185" num="0180">For example, referring now to delta computation <b>1100</b> of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, delta may be computed between two 32 bit pixels, denoted as pix0 and pix1. With regard to case 1, when pix03=pix13, pix02=pix12, pix01=pix11 and pix00 !=pix10; in this case, the legacy delta may be in the range [0, 2<sup>8</sup>-1], in one embodiment, SKIP bits may be set for higher 3 chunks of data. Similarly, in case 2, when pix03=pix13, pix02=pix12, pix00=pix10, and pix01 !=pix11; in this case the legacy delta is in the range [0, 2<sup>16</sup>-1], but, in one embodiment, SKIP bits are used for higher two chunks and lower one chunk, while another chunk from the lower level is in the range [0, 2<sup>8</sup>-1] for ensuring better compression. It is contemplated that since legacy compression and delta are based off of R32, when delta values are computed on R32, these delta values can lead to higher compression failures.</p><p id="p-0186" num="0181">In case 3, when pix03=pix13, pix01=pix11, pix00=pix10 and pix02 !=pix12, in this case the legacy delta is in the range [0, 2<sup>24</sup>-1], where in one embodiment, SKIP is used for higher first chunk and lower two chunks, while the second chunk from the higher is in the range [0, 2<sup>8</sup>-1], which provides for better compression. In case 4, when pix02=pix12, pix01=pix11 and pix00=pix10 and pix03 !=pix13, in this case the legacy delta will be in the range [0, 2<sup>32</sup>-1] and so, in one embodiment, SKIP is performed for lower three chunks, and the higher chunk is in the range [0, 2<sup>8</sup>-1], allowing for better compression. This process of SKIP bit using new delta computation and new ex-Golomb encoding is further illustrated with respect to <figref idref="DRAWINGS">FIG. <b>12</b></figref>.</p><p id="p-0187" num="0182">In one embodiment, unified compression logic <b>711</b> may be used to facilitate unified compression for 3D and media such that the unified compression can serve as a common scheme that can be used with and migrate between both traffics of data without having to need separate unified compression scheme.</p><p id="p-0188" num="0183">Conventionally techniques rely on two different compression schemes for 3D and media, which results in considerable gate counts for compression and decompression engines. For example, a typically GPU can process data relating to either 3D or media at any given time, which is rather inefficient in terms resources, such as time, bandwidth, area, power, etc.</p><p id="p-0189" num="0184">In one embodiment, unified compression logic <b>711</b> provides for a unified compression scheme that allows for concoction between 3D and media with one or more entropy techniques, such as ex-Golomb entropy coding. Conventional compression techniques are limited to data type, such as either 3D data compression of media data compression may be performed, which can result in heavy compression traffic for 3D and media types of data. Embodiments provide for a novel technique that allows for a unified compression scheme that allows for a mixture of 3D and media compression, which, in turn, reducing a great deal of 3D and media traffic for their respective workloads. These results or savings can be further enhanced by incorporating YCoCg and 4:n lossless compression algorithms, without any significant changes to the hardware and/or software core.</p><p id="p-0190" num="0185">In media architectures, data is processed with low pass filter before compression (such as multimedia compact disk (MMCD)) and thus, high frequency components are removed. This makes most of the media input values to have higher correlation, which is not the case with 3D architecture, where 3D has higher frequency components, and lesser correlation. Accordingly, conventionally, 3D and media have different compression techniques and thus, none of the conventional techniques are capable of catering to the needs to both the 3D and media traffics.</p><p id="p-0191" num="0186">Similarly, conventional 3D architectures employ minimum/maximum compression techniques with fixed-length encoding, while media uses predictor computation using four pixels with variable length encoding. In variable length encoding, higher frequently occurring delta value is given lower code lengths, while lower frequently occurring delta value is given higher code lengths, while in fixed length encoding, all the delta values are given the same length of code words. Due to variable lengths, decoding has higher latencies compared to fixed length. In other words, when the media data is processed with 3D algorithm and 3D data processed with media algorithm, they render detrimental results.</p><p id="p-0192" num="0187">Embodiments provide for a unified compression scheme, as facilitated by unified compression logic <b>711</b>, where, as further discussed below, a unified scheme is proposed for 3D and media along with using modified Ex-Golomb codes.</p><p id="p-0193" num="0188">In one embodiment, unified compression logic <b>711</b> may be used to offer and perform 3D compression, supporting various data types, such as texture, color, depth, etc., with 32BPP, 64BPP, and 128BPP formats, etc. In some embodiments, these data formats may be handled in numerous different ways to achieve even better savings out of this unified compression.</p><p id="p-0194" num="0189">For example, 32BPP is the most commonly occurring format with up to 50% of occurrence. Conventional techniques, such as delta min-max technique, are used to compute the deltas, where even with a single spike in respective channel, the process can give rise to much higher delta bits to be encoded.</p><p id="p-0195" num="0190">In one embodiment, unified compression logic <b>711</b> provides for a novel technique to make use of the media compression technique with only a single seed per channel and make use of the SKIP bits that are used in 3D color compression. If delta between the adjacent samples are taken and then any delta values are encoded using variable length encodings, such as Golomb or Rice, then the input data can be compressed into lesser number of bits as illustrated in delta compression flow <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b>A</figref>.</p><p id="p-0196" num="0191">After the delta computation, the delta values may then be encoded using a modified ex-Golomb table, such as table <b>1310</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref>. For example, for 3D color data, the ex-Golomb is modified to suit the data distribution of color data as shown in table <b>1310</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref>.</p><p id="p-0197" num="0192">Further, in one embodiment, as illustrated with respect to <figref idref="DRAWINGS">FIG. <b>14</b></figref>, when all the values of a respective channel are equal, then delta computation is SKIPPED and by setting SKIP bit to &#x201c;1&#x201d;, the decompressing block also SKIPS the delta computation and replicates all the channels with the SEED value. With the definition of SKIP bit, new delta computation and new ex-Golomb encoding may be used.</p><p id="p-0198" num="0193">Now, since 128BPP format occurs less frequently, such as with less than 5% of occurrence, R32G32B32A32_* format is expected to have 8 pixels per each pair of cacheline. Using conventional techniques, a delta value ranges from [0, 2<sup>32</sup>-1] per channel and thus, the probability of compression is very low. In one embodiment, depth compression logic <b>709</b> splits the 128 bits into 16 chunks of 8 bits each as shown in <figref idref="DRAWINGS">FIG. <b>15</b>A</figref>.</p><p id="p-0199" num="0194">For example, referring now to <figref idref="DRAWINGS">FIG. <b>15</b>A</figref>, it illustrates pix0 representing 128 bits, which is then split into four 32 bit chunks and each of these chunks are again split into four chunks, so every 128 bit pixel can have 8 bits of 16 chunks. In other words, using this novel technique, 128 bits/pixel*8 pixel equals to 8 bits/channel*16 channels/pixel*8 pixel such that once this conversion is completed, method <b>1400</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> may be used to obtain compression.</p><p id="p-0200" num="0195">With regard to 64BPP, this format occurs about 45% of the time and most of the complex workloads use 64BPP. After so many trials, it is found out that the minimum/maximum compression technique works best for 64BPP case and thus for the 64BPP case, the min/max compression technique may be used.</p><p id="p-0201" num="0196">In one embodiment, the proposed novel unified compression is derived based on a novel media algorithm so that certain parts or changes proposed in the algorithm are modified using ex-Golomb technique, such as:</p><p id="p-0202" num="0197">The following encoding algorithm:</p><p id="p-0203" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="140pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>If (delta value &#x3c; 2)</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;Encoding &#x3c;- Unary Code;</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>Else</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;Delta value &#x3c;- delta_value+2;</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;Encoding &#x3c;- Rice Encode;</entry></row><row><entry/><entry/><entry>&#x2003;}</entry></row><row><entry/><entry/><entry>The following decoding algorithm:</entry></row><row><entry/><entry/><entry>If (delta value &#x3c; 2)</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;Decoding &#x3c;- Unary;</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>Else</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;Decoding &#x3c;- Rice Decode;</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;delta value &#x3c;- delta value -2;</entry></row><row><entry/><entry/><entry>&#x2003;}</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0204" num="0198">For example, using the aforementioned encoding/decoding algorithms as facilitated by depth compression logic <b>709</b> and unified compression logic <b>711</b>, code word lengths of <figref idref="DRAWINGS">FIG. <b>15</b>B</figref> as shown in table <b>1510</b> may achieved and used, representing new ex-Golomb table for media.</p><p id="p-0205" num="0199">In one embodiment, united compression logic <b>711</b> may be used to facilitate media compression technique with the same predictor terms for both 3D and media along with proposed ex-Golomb encodings. For example, in 3D case, only 64BPP cases may use the 3D minimum/maximum algorithm, while the rest of the scenarios use media compression algorithm as unified compression logic <b>711</b>, where this predictor computation <b>1520</b> is shown in <figref idref="DRAWINGS">FIG. <b>15</b>C</figref>.</p><p id="p-0206" num="0200">For example, now referring to <figref idref="DRAWINGS">FIG. <b>15</b>C</figref>, R represents RAW seed, where no calculation is required. For Y=0, a subtraction with the left neighbor is performed, where this is for top row, where delta (L)=L&#x2212;left neighbor (R). For X=0, a subtraction with the top neighbor is performed, where this is for left column, where delta (T)={T&#x2212;top Neighbor (R)}*(Media=True). For others, it is computed using predictor term, P represents plane predictor. For this, ((left neighbor+top neighbor)&#x2212;diagonal neighbor), where</p><p id="p-0207" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>delta</mi>      <mo>&#x2062;</mo>      <mtext>   </mtext>      <mrow>       <mo>(</mo>       <mi>P</mi>       <mo>)</mo>      </mrow>     </mrow>     <mo>=</mo>     <mrow>      <mi>P</mi>      <mo>-</mo>      <mrow>       <mo>(</mo>       <mrow>        <mrow>         <mo>(</mo>         <mrow>          <mrow>           <mi>left</mi>           <mo>&#x2062;</mo>           <mtext>   </mtext>           <mi>neighbor</mi>           <mo>&#x2062;</mo>           <mtext>   </mtext>           <mrow>            <mo>(</mo>            <mi>T</mi>            <mo>)</mo>           </mrow>          </mrow>          <mo>+</mo>          <mrow>           <mi>top</mi>           <mo>&#x2062;</mo>           <mtext>   </mtext>           <mi>neighbor</mi>           <mo>&#x2062;</mo>           <mtext>   </mtext>           <mrow>            <mo>(</mo>            <mi>L</mi>            <mo>)</mo>           </mrow>          </mrow>         </mrow>         <mo>)</mo>        </mrow>        <mo>-</mo>        <mrow>         <mi>diagonal</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mtext></mtext>         <mi>neighbor</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mrow>          <mo>(</mo>          <mi>R</mi>          <mo>)</mo>         </mrow>        </mrow>       </mrow>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <mrow>      <mrow>       <mo>{</mo>       <mrow>        <mi>P</mi>        <mo>-</mo>        <mrow>         <mo>(</mo>         <mrow>          <mi>left</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>neighbor</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mrow>           <mo>(</mo>           <mi>T</mi>           <mo>)</mo>          </mrow>         </mrow>         <mo>)</mo>        </mrow>       </mrow>       <mo>}</mo>      </mrow>      <mo>+</mo>      <mrow>       <mrow>        <mo>{</mo>        <mrow>         <mrow>          <mi>diagonal</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mi>neighbor</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mrow>           <mo>(</mo>           <mi>R</mi>           <mo>)</mo>          </mrow>         </mrow>         <mo>-</mo>         <mrow>          <mi>top</mi>          <mo>&#x2062;</mo>          <mtext></mtext>          <mi>neighbor</mi>          <mo>&#x2062;</mo>          <mtext>   </mtext>          <mrow>           <mo>(</mo>           <mi>L</mi>           <mo>)</mo>          </mrow>         </mrow>        </mrow>        <mo>}</mo>       </mrow>       <mo>*</mo>       <mrow>        <mrow>         <mo>(</mo>         <mrow>          <mi>media</mi>          <mo>=</mo>          <mi>true</mi>         </mrow>         <mo>)</mo>        </mrow>        <mo>.</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0208" num="0201">As shown in the above equations, where the media is off, then the adjacent delta computation for 3D using adjacent two pixels is used, while when the media is on, delta computation is performed with 4 pixels, so that the same predictor block for 3D and media is used. Further, in some embodiment, the proposed 2:1 unified compression technique may be generated and employed along with the existing SKL 2:1 compression technique for 3D/media are coded in C++ and processed with respective workloads. These compression results <b>1600</b> are proposed for 3D, as shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref>, resulting in memory bandwidth savings.</p><p id="p-0209" num="0202">Further, in one embodiment, memory bandwidth may be additionally improved by exploiting constant alpha in the pixel data using lossless compression as facilitated by constant alpha value logic <b>713</b>. For example, this novel technique provides for computing alpha values, while storing special encoding bits for these values and allocating additional delta bits for red, green, and blue (RGB) to facilitate compression ratios. Further, this has been observed that quite the alpha data for the entire render target tends to be constant and often 0. As previously described, constant alpha refers to those values of an alpha channel that are the same, while random alpha refers to those values of an alpha channel that are different or random.</p><p id="p-0210" num="0203">Given the need for processing power and memory bandwidth, although there exist several conventional techniques to reduce memory bandwidth, but such conventional techniques are not efficient since they do not consider or employ constant alpha values.</p><p id="p-0211" num="0000">Embodiments provide for a novel technique for better and more efficient manner of lossless color compression over any of the existing techniques. For example, alpha values are usually 32 bits based on surface format 128BPP, where lossless compression is performed on 128B to 32B/64B with 128B representing a 2&#xd7;4 pixel block. For example, in one embodiment, the hardware detects if alpha value is 0.0 or 1.0 and having 2 bit encoding as follows: alpha_encoded=11. If alpha for the entire 8 pixels is 1, alpha_encoded=10. If alpha for the entire 8 pixels is 0, alpha_encoded=00. If alpha is not constant for the pixel block alpha_encoded=00 reserved. This is further illustrated with reference to <figref idref="DRAWINGS">FIG. <b>17</b></figref>.</p><p id="p-0212" num="0204">For example, <figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates common pixel format <b>1700</b> of 128 bits per pixel having 32 bits each for RGB and alpha channel along with alpha channel format <b>1720</b> which is all is or all Os using a 2-bit encoding for the common case and other alpha bits for the color channels (R, B, G). Further, for example, 2 more may be added for alpha encoding and removing base color of alpha (such as 8/16 bits), where a number of delta needed 4/5 bits and all the delta bits may now be allocated for RBG.</p><p id="p-0213" num="0205">Further, communication/compatibility logic <b>707</b> may be used to facilitate the needed communication and compatibility between any number of devices of computing device <b>600</b> and various components of compression mechanism <b>610</b>.</p><p id="p-0214" num="0206">Communication/compatibility logic <b>707</b> may be used to facilitate dynamic communication and compatibility between computing device <b>600</b> and any number and type of other computing devices (such as mobile computing device, desktop computer, server computing device, etc.); processing devices or components (such as CPUs, GPUs, etc.); capturing/sensing/detecting devices (such as capturing/sensing components including cameras, depth sensing cameras, camera sensors, red green blue (&#x201c;RGB&#x201d; or &#x201c;rgb&#x201d;) sensors, microphones, etc.); display devices (such as output components including display screens, display areas, display projectors, etc.); user/context-awareness components and/or identification/verification sensors/devices (such as biometric sensors/detectors, scanners, etc.); database(s) <b>730</b>, such as memory or storage devices, databases, and/or data sources (such as data storage devices, hard drives, solid-state drives, hard disks, memory cards or devices, memory circuits, etc.); communication medium(s) <b>725</b>, such as one or more communication channels or networks (e.g., cloud networks, the Internet, intranets, cellular networks, proximity networks, such as Bluetooth, Bluetooth low energy (BLE), Bluetooth Smart, Wi-Fi proximity, Radio Frequency Identification (RFID), Near Field Communication (NFC), Body Area Network (BAN), etc.); wireless or wired communications and relevant protocols (e.g., Wi-Fi&#xae;, WiMAX, Ethernet, etc.); connectivity and location management techniques; software applications/websites (e.g., social and/or business networking websites, etc., business applications, games and other entertainment applications, etc.); and programming languages, etc., while ensuring compatibility with changing technologies, parameters, protocols, standards, etc.</p><p id="p-0215" num="0207">Throughout this document, terms like &#x201c;logic&#x201d;, &#x201c;component&#x201d;, &#x201c;module&#x201d;, &#x201c;framework&#x201d;, &#x201c;engine&#x201d;, &#x201c;mechanism&#x201d;, and the like, may be referenced interchangeably and include, by way of example, software, hardware, firmware, and/or any combination thereof. In one example, &#x201c;logic&#x201d; may refer to or include a software component that is capable of working with one or more of an operating system (e.g., operating system <b>606</b>), a graphics driver (e.g., graphics driver <b>616</b>), etc., of a computing device, such as computing device <b>600</b>. In another example, &#x201c;logic&#x201d; may refer to or include a hardware component that is capable of being physically installed along with or as part of one or more system hardware elements, such as an application processor (e.g., CPU <b>612</b>), a graphics processor (e.g., GPU <b>614</b>), etc., of a computing device, such as computing device <b>600</b>. In yet another embodiment, &#x201c;logic&#x201d; may refer to or include a firmware component that is capable of being part of system firmware, such as firmware of an application processor (e.g., CPU <b>612</b>) or a graphics processor (e.g., GPU <b>614</b>), etc., of a computing device, such as computing device <b>600</b>.</p><p id="p-0216" num="0208">Further, any use of a particular brand, word, term, phrase, name, and/or acronym, such as &#x201c;detecting&#x201d;, &#x201c;monitoring&#x201d;, &#x201c;compression&#x201d;, &#x201c;unified compression&#x201d;, &#x201c;layout&#x201d;, &#x201c;CPS-based layout&#x201d;, &#x201c;color compression&#x201d;, &#x201c;depth compression&#x201d;, &#x201c;constant alpha value compression&#x201d;, &#x201c;graphics cache&#x201d;, &#x201c;GPU&#x201d;, &#x201c;graphics processor&#x201d;, &#x201c;GPU domain&#x201d;, &#x201c;GPGPU&#x201d;, &#x201c;CPU&#x201d;, &#x201c;application processor&#x201d;, &#x201c;CPU domain&#x201d;, &#x201c;graphics driver&#x201d;, &#x201c;workload&#x201d;, &#x201c;application&#x201d;, &#x201c;graphics pipeline&#x201d;, &#x201c;pipeline processes&#x201d;, &#x201c;API&#x201d;, &#x201c;3D API&#x201d;, &#x201c;OpenGL&#xae;&#x201d;, &#x201c;DirectX&#xae;&#x201d;, &#x201c;hardware&#x201d;, &#x201c;software&#x201d;, &#x201c;agent&#x201d;, &#x201c;graphics driver&#x201d;, &#x201c;kernel mode graphics driver&#x201d;, &#x201c;user-mode driver&#x201d;, &#x201c;user-mode driver framework&#x201d;, &#x201c;buffer&#x201d;, &#x201c;graphics buffer&#x201d;, &#x201c;task&#x201d;, &#x201c;process&#x201d;, &#x201c;operation&#x201d;, &#x201c;software application&#x201d;, &#x201c;game&#x201d;, etc., should not be read to limit embodiments to software or devices that carry that label in products or in literature external to this document.</p><p id="p-0217" num="0209">It is contemplated that any number and type of components may be added to and/or removed from consolidation mechanism <b>610</b> to facilitate various embodiments including adding, removing, and/or enhancing certain features. For brevity, clarity, and ease of understanding of consolidation mechanism <b>610</b>, many of the standard and/or known components, such as those of a computing device, are not shown or discussed here. It is contemplated that embodiments, as described herein, are not limited to any particular technology, topology, system, architecture, and/or standard and are dynamic enough to adopt and adapt to any future changes.</p><p id="p-0218" num="0210">Now referring to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, it illustrates a method <b>1000</b> for smart compression according to one embodiment. For brevity, many of the details previously discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>9</b>E</figref> may not be discussed or repeated hereafter. Any processes relating to method <b>1000</b> may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, programmable logic, etc.), software (such as instructions run on a processing device), or a combination thereof, as facilitated by compression mechanism <b>610</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The processes associated with method <b>1000</b> may be illustrated or recited in linear sequences for brevity and clarity in presentation; however, it is contemplated that any number of them can be performed in parallel, asynchronously, or in different orders.</p><p id="p-0219" num="0211">Method <b>1000</b> begins at block <b>1001</b> with reception of input data. At block <b>1003</b>, check for SKIP bit is performed at is block <b>1003</b>, resulting in either setting of SKIP bit or not setting of SKIP bit. If SKIP bit is not set, in one embodiment, method <b>1000</b> continues with computation of adjacent deltas at block <b>1005</b>. At block <b>1007</b>, these deltas are then encoded using ex-Golomb encoding and subsequently, at block <b>1009</b>, bit pack for all channels is performed, resulting in compressed data.</p><p id="p-0220" num="0212">Now referring to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, it illustrates a method <b>1200</b> for smart depth compression according to one embodiment. For brevity, many of the details previously discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>11</b></figref> may not be discussed or repeated hereafter. Any processes relating to method <b>1200</b> may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, programmable logic, etc.), software (such as instructions run on a processing device), or a combination thereof, as facilitated by compression mechanism <b>610</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The processes associated with method <b>1200</b> may be illustrated or recited in linear sequences for brevity and clarity in presentation; however, it is contemplated that any number of them can be performed in parallel, asynchronously, or in different orders.</p><p id="p-0221" num="0213">Method <b>1200</b> illustrates a new delta compression and a new ex-Golomb encoding using SKIP bits, as illustrated. As previously defined, when all the values of a respective channel are determined to be or regarded as equal, then delta computation is SKIPPED by a SKIP bit to 1; similarly, the decompression block also SKIPS the delta computation and simply replicates all the channel values with the corresponding SEED values. Method <b>1200</b> begins at block <b>1201</b> with receiving of input data for compression. At block <b>1203</b>, the input data, such as R16G16/R32, is converted into R8G8B8A8. At block <b>1205</b>, SKIP bit is check and if set, at block <b>1207</b>, prediction computation is SKIPPED. If not set, at block <b>1209</b>, adjacent deltas are computed. At block <b>1211</b>, the deltas are encoded using new ex-Golomb. At block <b>1213</b>, all channels are bit packed as the input data is compressed and outputted as compressed data.</p><p id="p-0222" num="0214"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a method <b>1400</b> for smart compression according to one embodiment. For brevity, many of the details previously discussed with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>13</b></figref> may not be discussed or repeated hereafter. Any processes relating to method <b>1400</b> may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, programmable logic, etc.), software (such as instructions run on a processing device), or a combination thereof, as facilitated by compression mechanism <b>610</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The processes associated with method <b>1400</b> may be illustrated or recited in linear sequences for brevity and clarity in presentation; however, it is contemplated that any number of them can be performed in parallel, asynchronously, or in different orders.</p><p id="p-0223" num="0215">Method <b>1400</b> refers to new delta computation and new ex-Golomb encoding using a SKIP bit and conversion of R16G16/R32 to R8G8B8A8. Method <b>1400</b> begins at block <b>1401</b> with reception of input data and continues at block <b>1403</b> with checking for SKIP bit, where the SKIP bit is either set or not set. If SKIP is not set, adjacent deltas are computed at block <b>1405</b> and these deltas are then encoded using new ex-Golomb encoding at block <b>1407</b>. At block <b>1409</b>, bit pack is performed for all channels and subsequently, input data is compressed and compressed data is outputted.</p><p id="p-0224" num="0216">System Overview II</p><p id="p-0225" num="0217"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram of a processing system <b>1800</b>, according to an embodiment. In various embodiments, the system <b>1800</b> includes one or more processors <b>1802</b> and one or more graphics processors <b>1808</b>, and may be a single processor desktop system, a multiprocessor workstation system, or a server system having a large number of processors <b>1802</b> or processor cores <b>1807</b>. In on embodiment, the system <b>1800</b> is a processing platform incorporated within a system-on-a-chip (SoC) integrated circuit for use in mobile, handheld, or embedded devices.</p><p id="p-0226" num="0218">An embodiment of system <b>1800</b> can include, or be incorporated within a server-based gaming platform, a game console, including a game and media console, a mobile gaming console, a handheld game console, or an online game console. In some embodiments system <b>1800</b> is a mobile phone, smart phone, tablet computing device or mobile Internet device. Data processing system <b>1800</b> can also include, couple with, or be integrated within a wearable device, such as a smart watch wearable device, smart eyewear device, augmented reality device, or virtual reality device. In some embodiments, data processing system <b>1800</b> is a television or set top box device having one or more processors <b>1802</b> and a graphical interface generated by one or more graphics processors <b>1808</b>.</p><p id="p-0227" num="0219">In some embodiments, the one or more processors <b>1802</b> each include one or more processor cores <b>1807</b> to process instructions which, when executed, perform operations for system and user software. In some embodiments, each of the one or more processor cores <b>1807</b> is configured to process a specific instruction set <b>1809</b>. In some embodiments, instruction set <b>1809</b> may facilitate Complex Instruction Set Computing (CISC), Reduced Instruction Set Computing (RISC), or computing via a Very Long Instruction Word (VLIW). Multiple processor cores <b>1807</b> may each process a different instruction set <b>1809</b>, which may include instructions to facilitate the emulation of other instruction sets. Processor core <b>1807</b> may also include other processing devices, such a Digital Signal Processor (DSP).</p><p id="p-0228" num="0220">In some embodiments, the processor <b>1802</b> includes cache memory <b>1804</b>. Depending on the architecture, the processor <b>1802</b> can have a single internal cache or multiple levels of internal cache. In some embodiments, the cache memory is shared among various components of the processor <b>1802</b>. In some embodiments, the processor <b>1802</b> also uses an external cache (e.g., a Level-3 (L3) cache or Last Level Cache (LLC)) (not shown), which may be shared among processor cores <b>1807</b> using known cache coherency techniques. A register file <b>1806</b> is additionally included in processor <b>1802</b> which may include different types of registers for storing different types of data (e.g., integer registers, floating point registers, status registers, and an instruction pointer register). Some registers may be general-purpose registers, while other registers may be specific to the design of the processor <b>1802</b>.</p><p id="p-0229" num="0221">In some embodiments, processor <b>1802</b> is coupled to a processor bus <b>1810</b> to transmit communication signals such as address, data, or control signals between processor <b>1802</b> and other components in system <b>1800</b>. In one embodiment, the system <b>1800</b> uses an exemplary &#x2018;hub&#x2019; system architecture, including a memory controller hub <b>1816</b> and an Input Output (I/O) controller hub <b>1830</b>. A memory controller hub <b>1816</b> facilitates communication between a memory device and other components of system <b>1800</b>, while an I/O Controller Hub (ICH) <b>1830</b> provides connections to I/O devices via a local I/O bus. In one embodiment, the logic of the memory controller hub <b>1816</b> is integrated within the processor.</p><p id="p-0230" num="0222">Memory device <b>1820</b> can be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory device, phase-change memory device, or some other memory device having suitable performance to serve as process memory. In one embodiment, the memory device <b>1820</b> can operate as system memory for the system <b>1800</b>, to store data <b>1822</b> and instructions <b>1821</b> for use when the one or more processors <b>1802</b> executes an application or process. Memory controller hub <b>1816</b> also couples with an optional external graphics processor <b>1812</b>, which may communicate with the one or more graphics processors <b>1808</b> in processors <b>1802</b> to perform graphics and media operations.</p><p id="p-0231" num="0223">In some embodiments, ICH <b>1830</b> enables peripherals to connect to memory device <b>1820</b> and processor <b>1802</b> via a high-speed I/O bus. The I/O peripherals include, but are not limited to, an audio controller <b>1846</b>, a firmware interface <b>1828</b>, a wireless transceiver <b>1826</b> (e.g., Wi-Fi, Bluetooth), a data storage device <b>1824</b> (e.g., hard disk drive, flash memory, etc.), and a legacy I/O controller <b>1840</b> for coupling legacy (e.g., Personal System <b>2</b> (PS/2)) devices to the system. One or more Universal Serial Bus (USB) controllers <b>1842</b> connect input devices, such as keyboard and mouse <b>1844</b> combinations. A network controller <b>1834</b> may also couple to ICH <b>1830</b>. In some embodiments, a high-performance network controller (not shown) couples to processor bus <b>1810</b>. It will be appreciated that the system <b>1800</b> shown is exemplary and not limiting, as other types of data processing systems that are differently configured may also be used. For example, the I/O controller hub <b>1830</b> may be integrated within the one or more processor <b>1802</b>, or the memory controller hub <b>1816</b> and I/O controller hub <b>1830</b> may be integrated into a discreet external graphics processor, such as the external graphics processor <b>1812</b>.</p><p id="p-0232" num="0224"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram of an embodiment of a processor <b>1900</b> having one or more processor cores <b>1902</b>A-<b>1902</b>N, an integrated memory controller <b>1914</b>, and an integrated graphics processor <b>1908</b>. Those elements of <figref idref="DRAWINGS">FIG. <b>19</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such. Processor <b>1900</b> can include additional cores up to and including additional core <b>1902</b>N represented by the dashed lined boxes. Each of processor cores <b>1902</b>A-<b>1902</b>N includes one or more internal cache units <b>1904</b>A-<b>1904</b>N. In some embodiments, each processor core also has access to one or more shared cached units <b>1906</b>.</p><p id="p-0233" num="0225">The internal cache units <b>1904</b>A-<b>1904</b>N and shared cache units <b>1906</b> represent a cache memory hierarchy within the processor <b>1900</b>. The cache memory hierarchy may include at least one level of instruction and data cache within each processor core and one or more levels of shared mid-level cache, such as a Level 2 (L2), Level 3 (L3), Level 4 (L4), or other levels of cache, where the highest level of cache before external memory is classified as the LLC. In some embodiments, cache coherency logic maintains coherency between the various cache units <b>1906</b> and <b>1904</b>A-<b>1904</b>N.</p><p id="p-0234" num="0226">In some embodiments, processor <b>1900</b> may also include a set of one or more bus controller units <b>1916</b> and a system agent core <b>1910</b>. The one or more bus controller units <b>1916</b> manage a set of peripheral buses, such as one or more Peripheral Component Interconnect buses (e.g., PCI, PCI Express). System agent core <b>1910</b> provides management functionality for the various processor components. In some embodiments, system agent core <b>1910</b> includes one or more integrated memory controllers <b>1914</b> to manage access to various external memory devices (not shown).</p><p id="p-0235" num="0227">In some embodiments, one or more of the processor cores <b>1902</b>A-<b>1902</b>N include support for simultaneous multi-threading. In such embodiment, the system agent core <b>1910</b> includes components for coordinating and operating cores <b>1902</b>A-<b>1902</b>N during multi-threaded processing. System agent core <b>1910</b> may additionally include a power control unit (PCU), which includes logic and components to regulate the power state of processor cores <b>1902</b>A-<b>1902</b>N and graphics processor <b>1908</b>.</p><p id="p-0236" num="0228">In some embodiments, processor <b>1900</b> additionally includes graphics processor <b>1908</b> to execute graphics processing operations. In some embodiments, the graphics processor <b>1908</b> couples with the set of shared cache units <b>1906</b>, and the system agent core <b>1910</b>, including the one or more integrated memory controllers <b>1914</b>. In some embodiments, a display controller <b>1911</b> is coupled with the graphics processor <b>1908</b> to drive graphics processor output to one or more coupled displays. In some embodiments, display controller <b>1911</b> may be a separate module coupled with the graphics processor via at least one interconnect, or may be integrated within the graphics processor <b>1908</b> or system agent core <b>1910</b>.</p><p id="p-0237" num="0229">In some embodiments, a ring based interconnect unit <b>1912</b> is used to couple the internal components of the processor <b>1900</b>. However, an alternative interconnect unit may be used, such as a point-to-point interconnect, a switched interconnect, or other techniques, including techniques well known in the art. In some embodiments, graphics processor <b>1908</b> couples with the ring interconnect <b>1912</b> via an I/O link <b>1913</b>.</p><p id="p-0238" num="0230">The exemplary I/O link <b>1913</b> represents at least one of multiple varieties of I/O interconnects, including an on-package I/O interconnect which facilitates communication between various processor components and a high-performance embedded memory module <b>1918</b>, such as an eDRAM module. In some embodiments, each of the processor cores <b>1902</b>-<b>1902</b>N and graphics processor <b>1908</b> use embedded memory modules <b>1918</b> as a shared Last Level Cache.</p><p id="p-0239" num="0231">In some embodiments, processor cores <b>1902</b>A-<b>1902</b>N are homogenous cores executing the same instruction set architecture. In another embodiment, processor cores <b>1902</b>A-<b>1902</b>N are heterogeneous in terms of instruction set architecture (ISA), where one or more of processor cores <b>1902</b>A-N execute a first instruction set, while at least one of the other cores executes a subset of the first instruction set or a different instruction set. In one embodiment processor cores <b>1902</b>A-<b>1902</b>N are heterogeneous in terms of microarchitecture, where one or more cores having a relatively higher power consumption couple with one or more power cores having a lower power consumption. Additionally, processor <b>1900</b> can be implemented on one or more chips or as an SoC integrated circuit having the illustrated components, in addition to other components.</p><p id="p-0240" num="0232"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a block diagram of a graphics processor <b>2000</b>, which may be a discrete graphics processing unit, or may be a graphics processor integrated with a plurality of processing cores. In some embodiments, the graphics processor communicates via a memory mapped I/O interface to registers on the graphics processor and with commands placed into the processor memory. In some embodiments, graphics processor <b>2000</b> includes a memory interface <b>2014</b> to access memory. Memory interface <b>2014</b> can be an interface to local memory, one or more internal caches, one or more shared external caches, and/or to system memory.</p><p id="p-0241" num="0233">In some embodiments, graphics processor <b>2000</b> also includes a display controller <b>2002</b> to drive display output data to a display device <b>2020</b>. Display controller <b>2002</b> includes hardware for one or more overlay planes for the display and composition of multiple layers of video or user interface elements. In some embodiments, graphics processor <b>2000</b> includes a video codec engine <b>2006</b> to encode, decode, or transcode media to, from, or between one or more media encoding formats, including, but not limited to Moving Picture Experts Group (MPEG) formats such as MPEG-2, Advanced Video Coding (AVC) formats such as H.264/MPEG-4 AVC, as well as the Society of Motion Picture &#x26; Television Engineers (SMPTE) 421M/VC-1, and Joint Photographic Experts Group (JPEG) formats such as JPEG, and Motion JPEG (MJPEG) formats.</p><p id="p-0242" num="0234">In some embodiments, graphics processor <b>2000</b> includes a block image transfer (BLIT) engine <b>2004</b> to perform two-dimensional (2D) rasterizer operations including, for example, bit-boundary block transfers. However, in one embodiment, 2D graphics operations are performed using one or more components of graphics processing engine (GPE) <b>2010</b>. In some embodiments, graphics processing engine <b>2010</b> is a compute engine for performing graphics operations, including three-dimensional (3D) graphics operations and media operations.</p><p id="p-0243" num="0235">In some embodiments, GPE <b>2010</b> includes a 3D pipeline <b>2012</b> for performing 3D operations, such as rendering three-dimensional images and scenes using processing functions that act upon 3D primitive shapes (e.g., rectangle, triangle, etc.). The 3D pipeline <b>2012</b> includes programmable and fixed function elements that perform various tasks within the element and/or spawn execution threads to a 3D/Media sub-system <b>2015</b>. While 3D pipeline <b>2012</b> can be used to perform media operations, an embodiment of GPE <b>2010</b> also includes a media pipeline <b>2016</b> that is specifically used to perform media operations, such as video post-processing and image enhancement.</p><p id="p-0244" num="0236">In some embodiments, media pipeline <b>2016</b> includes fixed function or programmable logic units to perform one or more specialized media operations, such as video decode acceleration, video de-interlacing, and video encode acceleration in place of, or on behalf of video codec engine <b>2006</b>. In some embodiments, media pipeline <b>2016</b> additionally includes a thread spawning unit to spawn threads for execution on 3D/Media sub-system <b>2015</b>. The spawned threads perform computations for the media operations on one or more graphics execution units included in 3D/Media sub-system <b>2015</b>.</p><p id="p-0245" num="0237">In some embodiments, 3D/Media subsystem <b>2015</b> includes logic for executing threads spawned by 3D pipeline <b>2012</b> and media pipeline <b>2016</b>. In one embodiment, the pipelines send thread execution requests to 3D/Media subsystem <b>2015</b>, which includes thread dispatch logic for arbitrating and dispatching the various requests to available thread execution resources. The execution resources include an array of graphics execution units to process the 3D and media threads. In some embodiments, 3D/Media subsystem <b>2015</b> includes one or more internal caches for thread instructions and data. In some embodiments, the subsystem also includes shared memory, including registers and addressable memory, to share data between threads and to store output data.</p><p id="p-0246" num="0238">3D/Media Processing</p><p id="p-0247" num="0239"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram of a graphics processing engine <b>2110</b> of a graphics processor in accordance with some embodiments. In one embodiment, the graphics processing engine (GPE) <b>2110</b> is a version of the GPE <b>2010</b> shown in <figref idref="DRAWINGS">FIG. <b>20</b></figref>. Elements of <figref idref="DRAWINGS">FIG. <b>21</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such. For example, the 3D pipeline <b>2012</b> and media pipeline <b>2016</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref> are illustrated. The media pipeline <b>2016</b> is optional in some embodiments of the GPE <b>2110</b> and may not be explicitly included within the GPE <b>2110</b>. For example, and in at least one embodiment, a separate media and/or image processor is coupled to the GPE <b>2110</b>.</p><p id="p-0248" num="0240">In some embodiments, GPE <b>2110</b> couples with or includes a command streamer <b>2103</b>, which provides a command stream to the 3D pipeline <b>2012</b> and/or media pipelines <b>2016</b>. In some embodiments, command streamer <b>2103</b> is coupled with memory, which can be system memory, or one or more of internal cache memory and shared cache memory. In some embodiments, command streamer <b>2103</b> receives commands from the memory and sends the commands to 3D pipeline <b>2012</b> and/or media pipeline <b>2016</b>. The commands are directives fetched from a ring buffer, which stores commands for the 3D pipeline <b>2012</b> and media pipeline <b>2016</b>. In one embodiment, the ring buffer can additionally include batch command buffers storing batches of multiple commands. The commands for the 3D pipeline <b>2012</b> can also include references to data stored in memory, such as but not limited to vertex and geometry data for the 3D pipeline <b>2012</b> and/or image data and memory objects for the media pipeline <b>2016</b>. The 3D pipeline <b>2012</b> and media pipeline <b>2016</b> process the commands and data by performing operations via logic within the respective pipelines or by dispatching one or more execution threads to a graphics core array <b>2114</b>.</p><p id="p-0249" num="0241">In various embodiments, the 3D pipeline <b>2012</b> can execute one or more shader programs, such as vertex shaders, geometry shaders, pixel shaders, fragment shaders, compute shaders, or other shader programs, by processing the instructions and dispatching execution threads to the graphics core array <b>2114</b>. The graphics core array <b>2114</b> provides a unified block of execution resources. Multi-purpose execution logic (e.g., execution units) within the graphic core array <b>2114</b> includes support for various 3D API shader languages and can execute multiple simultaneous execution threads associated with multiple shaders.</p><p id="p-0250" num="0242">In some embodiments, the graphics core array <b>2114</b> also includes execution logic to perform media functions, such as video and/or image processing. In one embodiment, the execution units additionally include general-purpose logic that is programmable to perform parallel general purpose computational operations, in addition to graphics processing operations. The general-purpose logic can perform processing operations in parallel or in conjunction with general purpose logic within the processor core(s) <b>1807</b> of <figref idref="DRAWINGS">FIG. <b>18</b></figref> or core <b>1902</b>A-<b>1902</b>N as in <figref idref="DRAWINGS">FIG. <b>19</b></figref>.</p><p id="p-0251" num="0243">Output data generated by threads executing on the graphics core array <b>2114</b> can output data to memory in a unified return buffer (URB) <b>2118</b>. The URB <b>2118</b> can store data for multiple threads. In some embodiments, the URB <b>2118</b> may be used to send data between different threads executing on the graphics core array <b>2114</b>. In some embodiments, the URB <b>2118</b> may additionally be used for synchronization between threads on the graphics core array and fixed function logic within the shared function logic <b>2120</b>.</p><p id="p-0252" num="0244">In some embodiments, graphics core array <b>2114</b> is scalable, such that the array includes a variable number of graphics cores, each having a variable number of execution units based on the target power and performance level of GPE <b>2110</b>. In one embodiment, the execution resources are dynamically scalable, such that execution resources may be enabled or disabled as needed.</p><p id="p-0253" num="0245">The graphics core array <b>2114</b> couples with shared function logic <b>2120</b> that includes multiple resources that are shared between the graphics cores in the graphics core array. The shared functions within the shared function logic <b>2120</b> are hardware logic units that provide specialized supplemental functionality to the graphics core array <b>2114</b>. In various embodiments, shared function logic <b>2120</b> includes but is not limited to sampler <b>2121</b>, math <b>2122</b>, and inter-thread communication (ITC) <b>2123</b> logic. Additionally, some embodiments implement one or more cache(s) <b>2125</b> within the shared function logic <b>2120</b>. A shared function is implemented where the demand for a given specialized function is insufficient for inclusion within the graphics core array <b>2114</b>. Instead a single instantiation of that specialized function is implemented as a stand-alone entity in the shared function logic <b>2120</b> and shared among the execution resources within the graphics core array <b>2114</b>. The precise set of functions that are shared between the graphics core array <b>2114</b> and included within the graphics core array <b>2114</b> varies between embodiments.</p><p id="p-0254" num="0246"><figref idref="DRAWINGS">FIG. <b>22</b></figref> is a block diagram of another embodiment of a graphics processor <b>2200</b>. Elements of <figref idref="DRAWINGS">FIG. <b>22</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such.</p><p id="p-0255" num="0247">In some embodiments, graphics processor <b>2200</b> includes a ring interconnect <b>2202</b>, a pipeline front-end <b>2204</b>, a media engine <b>2237</b>, and graphics cores <b>2280</b>A-<b>2280</b>N. In some embodiments, ring interconnect <b>2202</b> couples the graphics processor to other processing units, including other graphics processors or one or more general-purpose processor cores. In some embodiments, the graphics processor is one of many processors integrated within a multi-core processing system.</p><p id="p-0256" num="0248">In some embodiments, graphics processor <b>2200</b> receives batches of commands via ring interconnect <b>2202</b>. The incoming commands are interpreted by a command streamer <b>2203</b> in the pipeline front-end <b>2204</b>. In some embodiments, graphics processor <b>2200</b> includes scalable execution logic to perform 3D geometry processing and media processing via the graphics core(s) <b>2280</b>A-<b>2280</b>N. For 3D geometry processing commands, command streamer <b>2203</b> supplies commands to geometry pipeline <b>2236</b>. For at least some media processing commands, command streamer <b>2203</b> supplies the commands to a video front end <b>2234</b>, which couples with a media engine <b>2237</b>. In some embodiments, media engine <b>2237</b> includes a Video Quality Engine (VQE) <b>2230</b> for video and image post-processing and a multi-format encode/decode (MFX) <b>2233</b> engine to provide hardware-accelerated media data encode and decode. In some embodiments, geometry pipeline <b>2236</b> and media engine <b>2237</b> each generate execution threads for the thread execution resources provided by at least one graphics core <b>2280</b>A.</p><p id="p-0257" num="0249">In some embodiments, graphics processor <b>2200</b> includes scalable thread execution resources featuring modular cores <b>2280</b>A-<b>2280</b>N (sometimes referred to as core slices), each having multiple sub-cores <b>2250</b>A-<b>2250</b>N, <b>2260</b>A-<b>2260</b>N (sometimes referred to as core sub-slices). In some embodiments, graphics processor <b>2200</b> can have any number of graphics cores <b>2280</b>A through <b>2280</b>N. In some embodiments, graphics processor <b>2200</b> includes a graphics core <b>2280</b>A having at least a first sub-core <b>2250</b>A and a second core sub-core <b>2260</b>A. In other embodiments, the graphics processor is a low power processor with a single sub-core (e.g., <b>2250</b>A). In some embodiments, graphics processor <b>2200</b> includes multiple graphics cores <b>2280</b>A-<b>2280</b>N, each including a set of first sub-cores <b>2250</b>A-<b>2250</b>N and a set of second sub-cores <b>2260</b>A-<b>2260</b>N. Each sub-core in the set of first sub-cores <b>2250</b>A-<b>2250</b>N includes at least a first set of execution units <b>2252</b>A-<b>2252</b>N and media/texture samplers <b>2254</b>A-<b>2254</b>N. Each sub-core in the set of second sub-cores <b>2260</b>A-<b>2260</b>N includes at least a second set of execution units <b>2262</b>A-<b>2262</b>N and samplers <b>2264</b>A-<b>2264</b>N. In some embodiments, each sub-core <b>2250</b>A-<b>2250</b>N, <b>2260</b>A-<b>2260</b>N shares a set of shared resources <b>2270</b>A-<b>2270</b>N. In some embodiments, the shared resources include shared cache memory and pixel operation logic. Other shared resources may also be included in the various embodiments of the graphics processor.</p><p id="p-0258" num="0250">Execution Logic</p><p id="p-0259" num="0251"><figref idref="DRAWINGS">FIG. <b>23</b></figref> illustrates thread execution logic <b>2300</b> including an array of processing elements employed in some embodiments of a GPE. Elements of <figref idref="DRAWINGS">FIG. <b>23</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such.</p><p id="p-0260" num="0252">In some embodiments, thread execution logic <b>2300</b> includes a pixel shader <b>2302</b>, a thread dispatcher <b>2304</b>, instruction cache <b>2306</b>, a scalable execution unit array including a plurality of execution units <b>2308</b>A-<b>2308</b>N, a sampler <b>2310</b>, a data cache <b>2312</b>, and a data port <b>2314</b>. In one embodiment, the included components are interconnected via an interconnect fabric that links to each of the components. In some embodiments, thread execution logic <b>2300</b> includes one or more connections to memory, such as system memory or cache memory, through one or more of instruction cache <b>2306</b>, data port <b>2314</b>, sampler <b>2310</b>, and execution unit array <b>2308</b>A-<b>2308</b>N. In some embodiments, each execution unit (e.g. <b>2308</b>A) is an individual vector processor capable of executing multiple simultaneous threads and processing multiple data elements in parallel for each thread. In some embodiments, execution unit array <b>2308</b>A-<b>2308</b>N includes any number individual execution units.</p><p id="p-0261" num="0253">In some embodiments, execution unit array <b>2308</b>A-<b>2308</b>N is primarily used to execute &#x201c;shader&#x201d; programs. In some embodiments, the execution units in array <b>2308</b>A-<b>2308</b>N execute an instruction set that includes native support for many standard 3D graphics shader instructions, such that shader programs from graphics libraries (e.g., Direct 3D and OpenGL) are executed with a minimal translation. The execution units support vertex and geometry processing (e.g., vertex programs, geometry programs, vertex shaders), pixel processing (e.g., pixel shaders, fragment shaders) and general-purpose processing (e.g., compute and media shaders).</p><p id="p-0262" num="0254">Each execution unit in execution unit array <b>2308</b>A-<b>2308</b>N operates on arrays of data elements. The number of data elements is the &#x201c;execution size,&#x201d; or the number of channels for the instruction. An execution channel is a logical unit of execution for data element access, masking, and flow control within instructions. The number of channels may be independent of the number of physical Arithmetic Logic Units (ALUs) or Floating Point Units (FPUs) for a particular graphics processor. In some embodiments, execution units <b>2308</b>A-<b>2308</b>N support integer and floating-point data types.</p><p id="p-0263" num="0255">The execution unit instruction set includes single instruction multiple data (SIMD) or single instruction multiple thread (SIMT) instructions. The various data elements can be stored as a packed data type in a register and the execution unit will process the various elements based on the data size of the elements. For example, when operating on a 256-bit wide vector, the 256 bits of the vector are stored in a register and the execution unit operates on the vector as four separate 64-bit packed data elements (Quad-Word (QW) size data elements), eight separate 32-bit packed data elements (Double Word (DW) size data elements), sixteen separate 16-bit packed data elements (Word (W) size data elements), or thirty-two separate 8-bit data elements (byte (B) size data elements). However, different vector widths and register sizes are possible.</p><p id="p-0264" num="0256">One or more internal instruction caches (e.g., <b>2306</b>) are included in the thread execution logic <b>2300</b> to cache thread instructions for the execution units. In some embodiments, one or more data caches (e.g., <b>2312</b>) are included to cache thread data during thread execution. In some embodiments, sampler <b>2310</b> is included to provide texture sampling for 3D operations and media sampling for media operations. In some embodiments, sampler <b>2310</b> includes specialized texture or media sampling functionality to process texture or media data during the sampling process before providing the sampled data to an execution unit.</p><p id="p-0265" num="0257">During execution, the graphics and media pipelines send thread initiation requests to thread execution logic <b>2300</b> via thread spawning and dispatch logic. In some embodiments, thread execution logic <b>2300</b> includes a local thread dispatcher <b>2304</b> that arbitrates thread initiation requests from the graphics and media pipelines and instantiates the requested threads on one or more execution units <b>2308</b>A-<b>2308</b>N. For example, the geometry pipeline (e.g., <b>2236</b> of <figref idref="DRAWINGS">FIG. <b>22</b></figref>) dispatches vertex processing, tessellation, or geometry processing threads to thread execution logic <b>2300</b> (<figref idref="DRAWINGS">FIG. <b>23</b></figref>). In some embodiments, thread dispatcher <b>2304</b> can also process runtime thread spawning requests from the executing shader programs.</p><p id="p-0266" num="0258">Once a group of geometric objects has been processed and rasterized into pixel data, pixel shader <b>2302</b> is invoked to further compute output information and cause results to be written to output surfaces (e.g., color buffers, depth buffers, stencil buffers, etc.). In some embodiments, pixel shader <b>2302</b> calculates the values of the various vertex attributes that are to be interpolated across the rasterized object. In some embodiments, pixel shader <b>2302</b> then executes an application programming interface (API)-supplied pixel shader program. To execute the pixel shader program, pixel shader <b>2302</b> dispatches threads to an execution unit (e.g., <b>2308</b>A) via thread dispatcher <b>2304</b>. In some embodiments, pixel shader <b>2302</b> uses texture sampling logic in sampler <b>2310</b> to access texture data in texture maps stored in memory. Arithmetic operations on the texture data and the input geometry data compute pixel color data for each geometric fragment, or discards one or more pixels from further processing.</p><p id="p-0267" num="0259">In some embodiments, the data port <b>2314</b> provides a memory access mechanism for the thread execution logic <b>2300</b> output processed data to memory for processing on a graphics processor output pipeline. In some embodiments, the data port <b>2314</b> includes or couples to one or more cache memories (e.g., data cache <b>2312</b>) to cache data for memory access via the data port.</p><p id="p-0268" num="0260"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a block diagram illustrating a graphics processor instruction formats <b>2400</b> according to some embodiments. In one or more embodiment, the graphics processor execution units support an instruction set having instructions in multiple formats. The solid lined boxes illustrate the components that are generally included in an execution unit instruction, while the dashed lines include components that are optional or that are only included in a sub-set of the instructions. In some embodiments, instruction format <b>2400</b> described and illustrated are macro-instructions, in that they are instructions supplied to the execution unit, as opposed to micro-operations resulting from instruction decode once the instruction is processed.</p><p id="p-0269" num="0261">In some embodiments, the graphics processor execution units natively support instructions in a 128-bit instruction format <b>2410</b>. A 64-bit compacted instruction format <b>2430</b> is available for some instructions based on the selected instruction, instruction options, and number of operands. The native 128-bit instruction format <b>2410</b> provides access to all instruction options, while some options and operations are restricted in the 64-bit instruction format <b>2430</b>. The native instructions available in the 64-bit instruction format <b>2430</b> vary by embodiment. In some embodiments, the instruction is compacted in part using a set of index values in an index field <b>2413</b>. The execution unit hardware references a set of compaction tables based on the index values and uses the compaction table outputs to reconstruct a native instruction in the 128-bit instruction format <b>2410</b>.</p><p id="p-0270" num="0262">For each format, instruction opcode <b>2412</b> defines the operation that the execution unit is to perform. The execution units execute each instruction in parallel across the multiple data elements of each operand. For example, in response to an add instruction the execution unit performs a simultaneous add operation across each color channel representing a texture element or picture element. By default, the execution unit performs each instruction across all data channels of the operands. In some embodiments, instruction control field <b>2414</b> enables control over certain execution options, such as channels selection (e.g., predication) and data channel order (e.g., swizzle). For 128-bit instructions <b>2410</b> an exec-size field <b>2416</b> limits the number of data channels that will be executed in parallel. In some embodiments, exec-size field <b>2416</b> is not available for use in the 64-bit compact instruction format <b>2430</b>.</p><p id="p-0271" num="0263">Some execution unit instructions have up to three operands including two source operands, src0 <b>2420</b>, src1 <b>2422</b>, and one destination <b>2418</b>. In some embodiments, the execution units support dual destination instructions, where one of the destinations is implied. Data manipulation instructions can have a third source operand (e.g., SRC2 <b>2424</b>), where the instruction opcode <b>2412</b> determines the number of source operands. An instruction's last source operand can be an immediate (e.g., hard-coded) value passed with the instruction.</p><p id="p-0272" num="0264">In some embodiments, the 128-bit instruction format <b>2410</b> includes an access/address mode information <b>2426</b> specifying, for example, whether direct register addressing mode or indirect register addressing mode is used. When direct register addressing mode is used, the register address of one or more operands is directly provided by bits in the instruction <b>2410</b>.</p><p id="p-0273" num="0265">In some embodiments, the 128-bit instruction format <b>2410</b> includes an access/address mode field <b>2426</b>, which specifies an address mode and/or an access mode for the instruction. In one embodiment, the access mode to define a data access alignment for the instruction. Some embodiments support access modes including a 16-byte aligned access mode and a 1-byte aligned access mode, where the byte alignment of the access mode determines the access alignment of the instruction operands. For example, when in a first mode, the instruction <b>2410</b> may use byte-aligned addressing for source and destination operands and when in a second mode, the instruction <b>2410</b> may use 16-byte-aligned addressing for all source and destination operands.</p><p id="p-0274" num="0266">In one embodiment, the address mode portion of the access/address mode field <b>2426</b> determines whether the instruction is to use direct or indirect addressing. When direct register addressing mode is used bits in the instruction <b>2410</b> directly provide the register address of one or more operands. When indirect register addressing mode is used, the register address of one or more operands may be computed based on an address register value and an address immediate field in the instruction.</p><p id="p-0275" num="0267">In some embodiments, instructions are grouped based on opcode <b>2412</b> bit-fields to simplify Opcode decode <b>2440</b>. For an 8-bit opcode, bits 4, 5, and 6 allow the execution unit to determine the type of opcode. The precise opcode grouping shown is merely an example. In some embodiments, a move and logic opcode group <b>2442</b> includes data movement and logic instructions (e.g., move (mov), compare (cmp)). In some embodiments, move and logic group <b>2442</b> shares the five most significant bits (MSB), where move (mov) instructions are in the form of 0000xxxxb and logic instructions are in the form of 0001xxxxb. A flow control instruction group <b>2444</b> (e.g., call, jump (jmp)) includes instructions in the form of 0010xxxxb (e.g., 0x20). A miscellaneous instruction group <b>2446</b> includes a mix of instructions, including synchronization instructions (e.g., wait, send) in the form of 0011xxxxb (e.g., 0x30). A parallel math instruction group <b>2448</b> includes component-wise arithmetic instructions (e.g., add, multiply (mul)) in the form of 0100xxxxb (e.g., 0x40). The parallel math group <b>2448</b> performs the arithmetic operations in parallel across data channels. The vector math group <b>2450</b> includes arithmetic instructions (e.g., dp4) in the form of 0101xxxxb (e.g., 0x50). The vector math group performs arithmetic such as dot product calculations on vector operands.</p><p id="p-0276" num="0268">Graphics Pipeline</p><p id="p-0277" num="0269"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a block diagram of another embodiment of a graphics processor <b>2500</b>. Elements of <figref idref="DRAWINGS">FIG. <b>25</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such.</p><p id="p-0278" num="0270">In some embodiments, graphics processor <b>2500</b> includes a graphics pipeline <b>2520</b>, a media pipeline <b>2530</b>, a display engine <b>2540</b>, thread execution logic <b>2550</b>, and a render output pipeline <b>2570</b>. In some embodiments, graphics processor <b>2500</b> is a graphics processor within a multi-core processing system that includes one or more general-purpose processing cores. The graphics processor is controlled by register writes to one or more control registers (not shown) or via commands issued to graphics processor <b>2500</b> via a ring interconnect <b>2502</b>. In some embodiments, ring interconnect <b>2502</b> couples graphics processor <b>2500</b> to other processing components, such as other graphics processors or general-purpose processors. Commands from ring interconnect <b>2502</b> are interpreted by a command streamer <b>2503</b>, which supplies instructions to individual components of graphics pipeline <b>2520</b> or media pipeline <b>2530</b>.</p><p id="p-0279" num="0271">In some embodiments, command streamer <b>2503</b> directs the operation of a vertex fetcher <b>2505</b> that reads vertex data from memory and executes vertex-processing commands provided by command streamer <b>2503</b>. In some embodiments, vertex fetcher <b>2505</b> provides vertex data to a vertex shader <b>2507</b>, which performs coordinate space transformation and lighting operations to each vertex. In some embodiments, vertex fetcher <b>2505</b> and vertex shader <b>2507</b> execute vertex-processing instructions by dispatching execution threads to execution units <b>2552</b>A, <b>2552</b>B via a thread dispatcher <b>2531</b>.</p><p id="p-0280" num="0272">In some embodiments, execution units <b>2552</b>A, <b>2552</b>B are an array of vector processors having an instruction set for performing graphics and media operations. In some embodiments, execution units <b>2552</b>A, <b>2552</b>B have an attached L1 cache <b>2551</b> that is specific for each array or shared between the arrays. The cache can be configured as a data cache, an instruction cache, or a single cache that is partitioned to contain data and instructions in different partitions.</p><p id="p-0281" num="0273">In some embodiments, graphics pipeline <b>2520</b> includes tessellation components to perform hardware-accelerated tessellation of 3D objects. In some embodiments, a programmable hull shader <b>2511</b> configures the tessellation operations. A programmable domain shader <b>2517</b> provides back-end evaluation of tessellation output. A tessellator <b>2513</b> operates at the direction of hull shader <b>2511</b> and contains special purpose logic to generate a set of detailed geometric objects based on a coarse geometric model that is provided as input to graphics pipeline <b>2520</b>. In some embodiments, if tessellation is not used, tessellation components <b>2511</b>, <b>2513</b>, <b>2517</b> can be bypassed.</p><p id="p-0282" num="0274">In some embodiments, complete geometric objects can be processed by a geometry shader <b>2519</b> via one or more threads dispatched to execution units <b>2552</b>A, <b>2552</b>B, or can proceed directly to the clipper <b>2529</b>. In some embodiments, the geometry shader operates on entire geometric objects, rather than vertices or patches of vertices as in previous stages of the graphics pipeline. If the tessellation is disabled the geometry shader <b>2519</b> receives input from the vertex shader <b>2507</b>. In some embodiments, geometry shader <b>2519</b> is programmable by a geometry shader program to perform geometry tessellation if the tessellation units are disabled.</p><p id="p-0283" num="0275">Before rasterization, a clipper <b>2529</b> processes vertex data. The clipper <b>2529</b> may be a fixed function clipper or a programmable clipper having clipping and geometry shader functions. In some embodiments, a rasterizer and depth test component <b>2573</b> in the render output pipeline <b>2570</b> dispatches pixel shaders to convert the geometric objects into their per pixel representations. In some embodiments, pixel shader logic is included in thread execution logic <b>2550</b>. In some embodiments, an application can bypass rasterization and access un-rasterized vertex data via a stream out unit <b>2523</b>.</p><p id="p-0284" num="0276">The graphics processor <b>2500</b> has an interconnect bus, interconnect fabric, or some other interconnect mechanism that allows data and message passing amongst the major components of the processor. In some embodiments, execution units <b>2552</b>A, <b>2552</b>B and associated cache(s) <b>2551</b>, texture and media sampler <b>2554</b>, and texture/sampler cache <b>2558</b> interconnect via a data port <b>2556</b> to perform memory access and communicate with render output pipeline components of the processor. In some embodiments, sampler <b>2554</b>, caches <b>2551</b>, <b>2558</b> and execution units <b>2552</b>A, <b>2552</b>B each have separate memory access paths.</p><p id="p-0285" num="0277">In some embodiments, render output pipeline <b>2570</b> contains a rasterizer and depth test component <b>2573</b> that converts vertex-based objects into an associated pixel-based representation. In some embodiments, the render output pipeline <b>2570</b> includes a windower/masker unit to perform fixed function triangle and line rasterization. An associated render cache <b>2578</b> and depth cache <b>2579</b> are also available in some embodiments. A pixel operations component <b>2577</b> performs pixel-based operations on the data, though in some instances, pixel operations associated with 2D operations (e.g. bit block image transfers with blending) are performed by the 2D engine <b>2541</b>, or substituted at display time by the display controller <b>2543</b> using overlay display planes. In some embodiments, a shared L3 cache <b>2575</b> is available to all graphics components, allowing the sharing of data without the use of main system memory.</p><p id="p-0286" num="0278">In some embodiments, graphics processor media pipeline <b>2530</b> includes a media engine <b>2537</b> and a video front end <b>2534</b>. In some embodiments, video front end <b>2534</b> receives pipeline commands from the command streamer <b>2503</b>. In some embodiments, media pipeline <b>2530</b> includes a separate command streamer. In some embodiments, video front-end <b>2534</b> processes media commands before sending the command to the media engine <b>2537</b>. In some embodiments, media engine <b>2537</b> includes thread spawning functionality to spawn threads for dispatch to thread execution logic <b>2550</b> via thread dispatcher <b>2531</b>.</p><p id="p-0287" num="0279">In some embodiments, graphics processor <b>2500</b> includes a display engine <b>2540</b>. In some embodiments, display engine <b>2540</b> is external to processor <b>2500</b> and couples with the graphics processor via the ring interconnect <b>2502</b>, or some other interconnect bus or fabric. In some embodiments, display engine <b>2540</b> includes a 2D engine <b>2541</b> and a display controller <b>2543</b>. In some embodiments, display engine <b>2540</b> contains special purpose logic capable of operating independently of the 3D pipeline. In some embodiments, display controller <b>2543</b> couples with a display device (not shown), which may be a system integrated display device, as in a laptop computer, or an external display device attached via a display device connector.</p><p id="p-0288" num="0280">In some embodiments, graphics pipeline <b>2520</b> and media pipeline <b>2530</b> are configurable to perform operations based on multiple graphics and media programming interfaces and are not specific to any one application programming interface (API). In some embodiments, driver software for the graphics processor translates API calls that are specific to a particular graphics or media library into commands that can be processed by the graphics processor. In some embodiments, support is provided for the Open Graphics Library (OpenGL) and Open Computing Language (OpenCL) from the Khronos Group, the Direct3D library from the Microsoft Corporation, or support may be provided to both OpenGL and D3D. Support may also be provided for the Open Source Computer Vision Library (OpenCV). A future API with a compatible 3D pipeline would also be supported if a mapping can be made from the pipeline of the future API to the pipeline of the graphics processor.</p><p id="p-0289" num="0281">Graphics Pipeline Programming</p><p id="p-0290" num="0282"><figref idref="DRAWINGS">FIG. <b>26</b>A</figref> is a block diagram illustrating a graphics processor command format <b>2600</b> according to some embodiments. <figref idref="DRAWINGS">FIG. <b>26</b>B</figref> is a block diagram illustrating a graphics processor command sequence <b>2610</b> according to an embodiment. The solid lined boxes in <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> illustrate the components that are generally included in a graphics command while the dashed lines include components that are optional or that are only included in a sub-set of the graphics commands. The exemplary graphics processor command format <b>2600</b> of <figref idref="DRAWINGS">FIG. <b>26</b>A</figref> includes data fields to identify a target client <b>2602</b> of the command, a command operation code (opcode) <b>2604</b>, and the relevant data <b>2606</b> for the command. A sub-opcode <b>2605</b> and a command size <b>2608</b> are also included in some commands.</p><p id="p-0291" num="0283">In some embodiments, client <b>2602</b> specifies the client unit of the graphics device that processes the command data. In some embodiments, a graphics processor command parser examines the client field of each command to condition the further processing of the command and route the command data to the appropriate client unit. In some embodiments, the graphics processor client units include a memory interface unit, a render unit, a 2D unit, a 3D unit, and a media unit. Each client unit has a corresponding processing pipeline that processes the commands. Once the command is received by the client unit, the client unit reads the opcode <b>2604</b> and, if present, sub-opcode <b>2605</b> to determine the operation to perform. The client unit performs the command using information in data field <b>2606</b>. For some commands an explicit command size <b>2608</b> is expected to specify the size of the command. In some embodiments, the command parser automatically determines the size of at least some of the commands based on the command opcode. In some embodiments, commands are aligned via multiples of a double word.</p><p id="p-0292" num="0284">The flow diagram in <figref idref="DRAWINGS">FIG. <b>26</b>B</figref> shows an exemplary graphics processor command sequence <b>2610</b>. In some embodiments, software or firmware of a data processing system that features an embodiment of a graphics processor uses a version of the command sequence shown to set up, execute, and terminate a set of graphics operations. A sample command sequence is shown and described for purposes of example only as embodiments are not limited to these specific commands or to this command sequence. Moreover, the commands may be issued as batch of commands in a command sequence, such that the graphics processor will process the sequence of commands in at least partially concurrence.</p><p id="p-0293" num="0285">In some embodiments, the graphics processor command sequence <b>2610</b> may begin with a pipeline flush command <b>2612</b> to cause any active graphics pipeline to complete the currently pending commands for the pipeline. In some embodiments, the 3D pipeline <b>2622</b> and the media pipeline <b>2624</b> do not operate concurrently. The pipeline flush is performed to cause the active graphics pipeline to complete any pending commands. In response to a pipeline flush, the command parser for the graphics processor will pause command processing until the active drawing engines complete pending operations and the relevant read caches are invalidated. Optionally, any data in the render cache that is marked &#x2018;dirty&#x2019; can be flushed to memory. In some embodiments, pipeline flush command <b>2612</b> can be used for pipeline synchronization or before placing the graphics processor into a low power state.</p><p id="p-0294" num="0286">In some embodiments, a pipeline select command <b>2613</b> is used when a command sequence requires the graphics processor to explicitly switch between pipelines. In some embodiments, a pipeline select command <b>2613</b> is required only once within an execution context before issuing pipeline commands unless the context is to issue commands for both pipelines. In some embodiments, a pipeline flush command is <b>2612</b> is required immediately before a pipeline switch via the pipeline select command <b>2613</b>.</p><p id="p-0295" num="0287">In some embodiments, a pipeline control command <b>2614</b> configures a graphics pipeline for operation and is used to program the 3D pipeline <b>2622</b> and the media pipeline <b>2624</b>. In some embodiments, pipeline control command <b>2614</b> configures the pipeline state for the active pipeline. In one embodiment, the pipeline control command <b>2614</b> is used for pipeline synchronization and to clear data from one or more cache memories within the active pipeline before processing a batch of commands.</p><p id="p-0296" num="0288">In some embodiments, commands for the return buffer state <b>2616</b> are used to configure a set of return buffers for the respective pipelines to write data. Some pipeline operations require the allocation, selection, or configuration of one or more return buffers into which the operations write intermediate data during processing. In some embodiments, the graphics processor also uses one or more return buffers to store output data and to perform cross thread communication. In some embodiments, configuring the return buffer state <b>2616</b> includes selecting the size and number of return buffers to use for a set of pipeline operations.</p><p id="p-0297" num="0289">The remaining commands in the command sequence differ based on the active pipeline for operations. Based on a pipeline determination <b>2620</b>, the command sequence is tailored to the 3D pipeline <b>2622</b> beginning with the 3D pipeline state <b>2630</b>, or the media pipeline <b>2624</b> beginning at the media pipeline state <b>2640</b>.</p><p id="p-0298" num="0290">The commands for the 3D pipeline state <b>2630</b> include 3D state setting commands for vertex buffer state, vertex element state, constant color state, depth buffer state, and other state variables that are to be configured before 3D primitive commands are processed. The values of these commands are determined at least in part based the particular 3D API in use. In some embodiments, 3D pipeline state <b>2630</b> commands are also able to selectively disable or bypass certain pipeline elements if those elements will not be used.</p><p id="p-0299" num="0291">In some embodiments, 3D primitive <b>2632</b> command is used to submit 3D primitives to be processed by the 3D pipeline. Commands and associated parameters that are passed to the graphics processor via the 3D primitive <b>2632</b> command are forwarded to the vertex fetch function in the graphics pipeline. The vertex fetch function uses the 3D primitive <b>2632</b> command data to generate vertex data structures. The vertex data structures are stored in one or more return buffers. In some embodiments, 3D primitive <b>2632</b> command is used to perform vertex operations on 3D primitives via vertex shaders. To process vertex shaders, 3D pipeline <b>2622</b> dispatches shader execution threads to graphics processor execution units.</p><p id="p-0300" num="0292">In some embodiments, 3D pipeline <b>2622</b> is triggered via an execute <b>2634</b> command or event. In some embodiments, a register write triggers command execution. In some embodiments execution is triggered via a &#x2018;go&#x2019; or &#x2018;kick&#x2019; command in the command sequence. In one embodiment command execution is triggered using a pipeline synchronization command to flush the command sequence through the graphics pipeline. The 3D pipeline will perform geometry processing for the 3D primitives. Once operations are complete, the resulting geometric objects are rasterized and the pixel engine colors the resulting pixels. Additional commands to control pixel shading and pixel back end operations may also be included for those operations.</p><p id="p-0301" num="0293">In some embodiments, the graphics processor command sequence <b>2610</b> follows the media pipeline <b>2624</b> path when performing media operations. In general, the specific use and manner of programming for the media pipeline <b>2624</b> depends on the media or compute operations to be performed. Specific media decode operations may be offloaded to the media pipeline during media decode. In some embodiments, the media pipeline can also be bypassed and media decode can be performed in whole or in part using resources provided by one or more general-purpose processing cores. In one embodiment, the media pipeline also includes elements for general-purpose graphics processor unit (GPGPU) operations, where the graphics processor is used to perform SIMD vector operations using computational shader programs that are not explicitly related to the rendering of graphics primitives.</p><p id="p-0302" num="0294">In some embodiments, media pipeline <b>2624</b> is configured in a similar manner as the 3D pipeline <b>2622</b>. A set of commands to configure the media pipeline state <b>2640</b> are dispatched or placed into a command queue before the media object commands <b>2642</b>. In some embodiments, commands for the media pipeline state <b>2640</b> include data to configure the media pipeline elements that will be used to process the media objects. This includes data to configure the video decode and video encode logic within the media pipeline, such as encode or decode format. In some embodiments, commands for the media pipeline state <b>2640</b> also support the use of one or more pointers to &#x201c;indirect&#x201d; state elements that contain a batch of state settings.</p><p id="p-0303" num="0295">In some embodiments, media object commands <b>2642</b> supply pointers to media objects for processing by the media pipeline. The media objects include memory buffers containing video data to be processed. In some embodiments, all media pipeline states must be valid before issuing a media object command <b>2642</b>. Once the pipeline state is configured and media object commands <b>2642</b> are queued, the media pipeline <b>2624</b> is triggered via an execute command <b>2644</b> or an equivalent execute event (e.g., register write). Output from media pipeline <b>2624</b> may then be post processed by operations provided by the 3D pipeline <b>2622</b> or the media pipeline <b>2624</b>. In some embodiments, GPGPU operations are configured and executed in a similar manner as media operations.</p><p id="p-0304" num="0296">Graphics Software Architecture</p><p id="p-0305" num="0297"><figref idref="DRAWINGS">FIG. <b>27</b></figref> illustrates exemplary graphics software architecture for a data processing system <b>2700</b> according to some embodiments. In some embodiments, software architecture includes a 3D graphics application <b>2710</b>, an operating system <b>2720</b>, and at least one processor <b>2730</b>. In some embodiments, processor <b>2730</b> includes a graphics processor <b>2732</b> and one or more general-purpose processor core(s) <b>2734</b>. The graphics application <b>2710</b> and operating system <b>2720</b> each execute in the system memory <b>2750</b> of the data processing system.</p><p id="p-0306" num="0298">In some embodiments, 3D graphics application <b>2710</b> contains one or more shader programs including shader instructions <b>2712</b>. The shader language instructions may be in a high-level shader language, such as the High Level Shader Language (HLSL) or the OpenGL Shader Language (GLSL). The application also includes executable instructions <b>2714</b> in a machine language suitable for execution by the general-purpose processor core(s) <b>2734</b>. The application also includes graphics objects <b>2716</b> defined by vertex data.</p><p id="p-0307" num="0299">In some embodiments, operating system <b>2720</b> is a Microsoft&#xae; Windows&#xae; operating system from the Microsoft Corporation, a proprietary UNIX-like operating system, or an open source UNIX-like operating system using a variant of the Linux kernel. The operating system <b>2720</b> can support a graphics API <b>2722</b> such as the Direct3D API or the OpenGL API. When the Direct3D API is in use, the operating system <b>2720</b> uses a front-end shader compiler <b>2724</b> to compile any shader instructions <b>2712</b> in HLSL into a lower-level shader language. The compilation may be a just-in-time (JIT) compilation or the application can perform shader pre-compilation. In some embodiments, high-level shaders are compiled into low-level shaders during the compilation of the 3D graphics application <b>2710</b>.</p><p id="p-0308" num="0300">In some embodiments, user mode graphics driver <b>2726</b> contains a back-end shader compiler <b>2727</b> to convert the shader instructions <b>2712</b> into a hardware specific representation. When the OpenGL API is in use, shader instructions <b>2712</b> in the GLSL high-level language are passed to a user mode graphics driver <b>2726</b> for compilation. In some embodiments, user mode graphics driver <b>2726</b> uses operating system kernel mode functions <b>2728</b> to communicate with a kernel mode graphics driver <b>2729</b>. In some embodiments, kernel mode graphics driver <b>2729</b> communicates with graphics processor <b>2732</b> to dispatch commands and instructions.</p><p id="p-0309" num="0301">IP Core Implementations</p><p id="p-0310" num="0302">One or more aspects of at least one embodiment may be implemented by representative code stored on a machine-readable medium which represents and/or defines logic within an integrated circuit such as a processor. For example, the machine-readable medium may include instructions which represent various logic within the processor. When read by a machine, the instructions may cause the machine to fabricate the logic to perform the techniques described herein. Such representations, known as &#x201c;IP cores,&#x201d; are reusable units of logic for an integrated circuit that may be stored on a tangible, machine-readable medium as a hardware model that describes the structure of the integrated circuit. The hardware model may be supplied to various customers or manufacturing facilities, which load the hardware model on fabrication machines that manufacture the integrated circuit. The integrated circuit may be fabricated such that the circuit performs operations described in association with any of the embodiments described herein.</p><p id="p-0311" num="0303"><figref idref="DRAWINGS">FIG. <b>28</b></figref> is a block diagram illustrating an IP core development system <b>2800</b> that may be used to manufacture an integrated circuit to perform operations according to an embodiment. The IP core development system <b>2800</b> may be used to generate modular, re-usable designs that can be incorporated into a larger design or used to construct an entire integrated circuit (e.g., an SOC integrated circuit). A design facility <b>2830</b> can generate a software simulation <b>2810</b> of an IP core design in a high-level programming language (e.g., C/C++). The software simulation <b>2810</b> can be used to design, test, and verify the behavior of the IP core using a simulation model <b>2812</b>. The simulation model <b>2812</b> may include functional, behavioral, and/or timing simulations. A register transfer level (RTL) design <b>2815</b> can then be created or synthesized from the simulation model <b>2812</b>. The RTL design <b>2815</b> is an abstraction of the behavior of the integrated circuit that models the flow of digital signals between hardware registers, including the associated logic performed using the modeled digital signals. In addition to an RTL design <b>2815</b>, lower-level designs at the logic level or transistor level may also be created, designed, or synthesized. Thus, the particular details of the initial design and simulation may vary.</p><p id="p-0312" num="0304">The RTL design <b>2815</b> or equivalent may be further synthesized by the design facility into a hardware model <b>2820</b>, which may be in a hardware description language (HDL), or some other representation of physical design data. The HDL may be further simulated or tested to verify the IP core design. The IP core design can be stored for delivery to a 3rd party fabrication facility <b>2865</b> using non-volatile memory <b>2840</b> (e.g., hard disk, flash memory, or any non-volatile storage medium). Alternatively, the IP core design may be transmitted (e.g., via the Internet) over a wired connection <b>2850</b> or wireless connection <b>2860</b>. The fabrication facility <b>2865</b> may then fabricate an integrated circuit that is based at least in part on the IP core design. The fabricated integrated circuit can be configured to perform operations in accordance with at least one embodiment described herein.</p><p id="p-0313" num="0305">Exemplary System on a Chip Integrated Circuit</p><p id="p-0314" num="0306"><figref idref="DRAWINGS">FIGS. <b>29</b>-<b>31</b></figref> illustrate exemplary integrated circuits and associated graphics processors that may be fabricated using one or more IP cores, according to various embodiments described herein. In addition to what is illustrated, other logic and circuits may be included, including additional graphics processors/cores, peripheral interface controllers, or general purpose processor cores.</p><p id="p-0315" num="0307"><figref idref="DRAWINGS">FIG. <b>29</b></figref> is a block diagram illustrating an exemplary system on a chip integrated circuit <b>2900</b> that may be fabricated using one or more IP cores, according to an embodiment. Exemplary integrated circuit <b>2900</b> includes one or more application processor(s) <b>2905</b> (e.g., CPUs), at least one graphics processor <b>2910</b>, and may additionally include an image processor <b>2915</b> and/or a video processor <b>2920</b>, any of which may be a modular IP core from the same or multiple different design facilities. Integrated circuit <b>2900</b> includes peripheral or bus logic including a USB controller <b>2925</b>, UART controller <b>2930</b>, an SPI/SDIO controller <b>2935</b>, and an I<sup>2</sup>S/I<sup>2</sup>C controller <b>2940</b>. Additionally, the integrated circuit can include a display device <b>2945</b> coupled to one or more of a high-definition multimedia interface (HDMI) controller <b>2950</b> and a mobile industry processor interface (MIPI) display interface <b>2955</b>. Storage may be provided by a flash memory subsystem <b>2960</b> including flash memory and a flash memory controller. Memory interface may be provided via a memory controller <b>2965</b> for access to SDRAM or SRAM memory devices. Some integrated circuits additionally include an embedded security engine <b>2970</b>.</p><p id="p-0316" num="0308"><figref idref="DRAWINGS">FIG. <b>30</b></figref> is a block diagram illustrating an exemplary graphics processor <b>3010</b> of a system on a chip integrated circuit that may be fabricated using one or more IP cores, according to an embodiment. Graphics processor <b>3010</b> can be a variant of the graphics processor <b>2910</b> of <figref idref="DRAWINGS">FIG. <b>29</b></figref>. Graphics processor <b>3010</b> includes a vertex processor <b>3005</b> and one or more fragment processor(s) <b>3015</b>A-<b>3015</b>N (e.g., <b>3015</b>A, <b>3015</b>B, <b>3015</b>C, <b>3015</b>D, through <b>3015</b>N-<b>1</b>, and <b>3015</b>N). Graphics processor <b>3010</b> can execute different shader programs via separate logic, such that the vertex processor <b>3005</b> is optimized to execute operations for vertex shader programs, while the one or more fragment processor(s) <b>3015</b>A-<b>3015</b>N execute fragment (e.g., pixel) shading operations for fragment or pixel shader programs. The vertex processor <b>3005</b> performs the vertex processing stage of the 3D graphics pipeline and generates primitives and vertex data. The fragment processor(s) <b>3015</b>A-<b>3015</b>N use the primitive and vertex data generated by the vertex processor <b>3005</b> to produce a framebuffer that is displayed on a display device. In one embodiment, the fragment processor(s) <b>3015</b>A-<b>3015</b>N are optimized to execute fragment shader programs as provided for in the OpenGL API, which may be used to perform similar operations as a pixel shader program as provided for in the Direct 3D API.</p><p id="p-0317" num="0309">Graphics processor <b>3010</b> additionally includes one or more memory management units (MMUs) <b>3020</b>A-<b>3020</b>B, cache(s) <b>3025</b>A-<b>3025</b>B, and circuit interconnect(s) <b>3030</b>A-<b>3030</b>B. The one or more MMU(s) <b>3020</b>A-<b>3020</b>B provide for virtual to physical address mapping for graphics processor <b>3010</b>, including for the vertex processor <b>3005</b> and/or fragment processor(s) <b>3015</b>A-<b>3015</b>N, which may reference vertex or image/texture data stored in memory, in addition to vertex or image/texture data stored in the one or more cache(s) <b>3025</b>A-<b>3025</b>B. In one embodiment, the one or more MMU(s) <b>3020</b>A-<b>3020</b>B may be synchronized with other MMUs within the system, including one or more MMUs associated with the one or more application processor(s) <b>2905</b>, image processor <b>2915</b>, and/or video processor <b>2920</b> of <figref idref="DRAWINGS">FIG. <b>29</b></figref>, such that each processor <b>2905</b>-<b>2920</b> can participate in a shared or unified virtual memory system. The one or more circuit interconnect(s) <b>3030</b>A-<b>3030</b>B enable graphics processor <b>3010</b> to interface with other IP cores within the SoC, either via an internal bus of the SoC or via a direct connection, according to embodiments.</p><p id="p-0318" num="0310"><figref idref="DRAWINGS">FIG. <b>31</b></figref> is a block diagram illustrating an additional exemplary graphics processor <b>3110</b> of a system on a chip integrated circuit that may be fabricated using one or more IP cores, according to an embodiment. Graphics processor <b>3110</b> can be a variant of the graphics processor <b>2910</b> of <figref idref="DRAWINGS">FIG. <b>29</b></figref>. Graphics processor <b>3110</b> includes the one or more MMU(s) <b>3020</b>A-<b>3020</b>B, cache(s) <b>3025</b>A-<b>3025</b>B, and circuit interconnect(s) <b>3030</b>A-<b>3030</b>B of the integrated circuit <b>3000</b> of <figref idref="DRAWINGS">FIG. <b>30</b></figref>.</p><p id="p-0319" num="0311">Graphics processor <b>3110</b> includes one or more shader core(s) <b>3115</b>A-<b>3115</b>N (e.g., <b>3115</b>A, <b>3115</b>B, <b>3115</b>C, <b>3115</b>D, <b>3115</b>E, <b>3115</b>F, through <b>3015</b>N-<b>1</b>, and <b>3015</b>N), which provides for a unified shader core architecture in which a single core or type or core can execute all types of programmable shader code, including shader program code to implement vertex shaders, fragment shaders, and/or compute shaders. The exact number of shader cores present can vary among embodiments and implementations. Additionally, graphics processor <b>3110</b> includes an inter-core task manager <b>3105</b>, which acts as a thread dispatcher to dispatch execution threads to one or more shader core(s) <b>3115</b>A-<b>3115</b>N. Graphics processor <b>3110</b> additionally includes a tiling unit <b>3118</b> to accelerate tiling operations for tile-based rendering, in which rendering operations for a scene are subdivided in image space. Tile-based rendering can be used to exploit local spatial coherence within a scene or to optimize use of internal caches.</p><p id="p-0320" num="0312">References to &#x201c;one embodiment&#x201d;, &#x201c;an embodiment&#x201d;, &#x201c;example embodiment&#x201d;, &#x201c;various embodiments&#x201d;, etc., indicate that the embodiment(s) so described may include particular features, structures, or characteristics, but not every embodiment necessarily includes the particular features, structures, or characteristics. Further, some embodiments may have some, all, or none of the features described for other embodiments.</p><p id="p-0321" num="0313">In the foregoing specification, embodiments have been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of embodiments as set forth in the appended claims. The Specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p><p id="p-0322" num="0314">In the following description and claims, the term &#x201c;coupled&#x201d; along with its derivatives, may be used. &#x201c;Coupled&#x201d; is used to indicate that two or more elements co-operate or interact with each other, but they may or may not have intervening physical or electrical components between them.</p><p id="p-0323" num="0315">As used in the claims, unless otherwise specified the use of the ordinal adjectives &#x201c;first&#x201d;, &#x201c;second&#x201d;, &#x201c;third&#x201d;, etc., to describe a common element, merely indicate that different instances of like elements are being referred to, and are not intended to imply that the elements so described must be in a given sequence, either temporally, spatially, in ranking, or in any other manner.</p><p id="p-0324" num="0316">The following clauses and/or examples pertain to further embodiments or examples. Specifics in the examples may be used anywhere in one or more embodiments. The various features of the different embodiments or examples may be variously combined with some features included and others excluded to suit a variety of different applications. Examples may include subject matter such as a method, means for performing acts of the method, at least one machine-readable medium including instructions that, when performed by a machine cause the machine to performs acts of the method, or of an apparatus or system for facilitating hybrid communication according to embodiments and examples described herein.</p><p id="p-0325" num="0317">Some embodiments pertain to Example 1 that includes an apparatus to facilitate smart compression/decompression schemes, the apparatus comprising: unified compression logic, as facilitated by or at least partially implemented in a processor, to unify a first compression scheme relating to three-dimensional (3D) content and a second compression scheme relating to media content into a unified compression scheme to perform compression of one or more of the 3D content and the media content relating to the processor including a graphics processor.</p><p id="p-0326" num="0318">Example 2 includes the subject matter of Example 1, further comprising detection/monitoring logic, as facilitated by or at least partially implemented in a processor, to detect one or more of the 3D content and the media content from one or more sources to be processed by the graphics processor, the compression includes lossless compression.</p><p id="p-0327" num="0319">Example 3 includes the subject matter of Examples 1-2, further comprising layout logic, as facilitated by or at least partially implemented in a processor, to generate a coarse pixel shading (CPS)-based layout to simultaneously support the first compression scheme and the second compression scheme without have to employ additional bits including control surface bits.</p><p id="p-0328" num="0320">Example 4 includes the subject matter of Examples 1-3, further comprising color compression logic, as facilitated by or at least partially implemented in a processor, to encode one or more of the 3D content and the media content using one or more encoding techniques based one or more of skipping of bits and computation of adjacent deltas.</p><p id="p-0329" num="0321">Example 5 includes the subject matter of Examples 1-4, further comprising depth compression logic, as facilitated by or at least partially implemented in a processor, to enhance compression granularity by dividing one or more large bit formats into multiple small bit formats and perform compression on the multiple small bit formats.</p><p id="p-0330" num="0322">Example 6 includes the subject matter of Examples 1-5, further comprising constant alpha value logic, as facilitated by or at least partially implemented in a processor, to compute alpha values, storing encoding bits corresponding to the alpha values, and allocating delta bits for red, green, and blue (RGB) to better compression ratios.</p><p id="p-0331" num="0323">Example 7 includes the subject matter of Examples 1-6, wherein the graphics processor is co-located with an application processor on a common semiconductor package.</p><p id="p-0332" num="0324">Some embodiments pertain to Example 8 that includes a method for facilitating smart compression/decompression schemes, the method comprising: unifying a first compression scheme relating to three-dimensional (3D) content and a second compression scheme relating to media content into a unified compression scheme to perform compression of one or more of the 3D content and the media content relating to a processor including a graphics processor.</p><p id="p-0333" num="0325">Example 9 includes the subject matter of Example 8, further comprising detecting one or more of the 3D content and the media content from one or more sources to be processed by the graphics processor, the compression includes lossless compression.</p><p id="p-0334" num="0326">Example 10 includes the subject matter of Examples 8-9, further comprising generating a coarse pixel shading (CPS)-based layout to simultaneously support the first compression scheme and the second compression scheme without have to employ additional bits including control surface bits.</p><p id="p-0335" num="0327">Example 11 includes the subject matter of Examples 8-10, further comprising encoding one or more of the 3D content and the media content using one or more encoding techniques based one or more of skipping of bits and computation of adjacent deltas.</p><p id="p-0336" num="0328">Example 12 includes the subject matter of Examples 8-11, further comprising enhancing compression granularity by dividing one or more large bit formats into multiple small bit formats and perform compression on the multiple small bit formats.</p><p id="p-0337" num="0329">Example 13 includes the subject matter of Examples 8-12, further comprising computing alpha values, storing encoding bits corresponding to the alpha values, and allocating delta bits for red, green, and blue (RGB) to better compression ratios.</p><p id="p-0338" num="0330">Example 14 includes the subject matter of Examples 8-13, wherein the graphics processor is co-located with an application processor on a common semiconductor package.</p><p id="p-0339" num="0331">Some embodiments pertain to Example 15 that includes a graphics processing system comprising memory coupled to a processor, the processor to: unify a first compression scheme relating to three-dimensional (3D) content and a second compression scheme relating to media content into a unified compression scheme to perform compression of one or more of the 3D content and the media content relating to a processor including a graphics processor.</p><p id="p-0340" num="0332">Example 16 includes the subject matter of Example 15, wherein the processor is further to detect one or more of the 3D content and the media content from one or more sources to be processed by the graphics processor, the compression includes lossless compression.</p><p id="p-0341" num="0333">Example 17 includes the subject matter of Example 15-16, wherein the processor is further to generate a coarse pixel shading (CPS)-based layout to simultaneously support the first compression scheme and the second compression scheme without have to employ additional bits including control surface bits.</p><p id="p-0342" num="0334">Example 18 includes the subject matter of Example 15-17, wherein the processor is further to encode one or more of the 3D content and the media content using one or more encoding techniques based one or more of skipping of bits and computation of adjacent deltas.</p><p id="p-0343" num="0335">Example 19 includes the subject matter of Examples 15-18, wherein the processor is further to enhance compression granularity by dividing one or more large bit formats into multiple small bit formats and perform compression on the multiple small bit formats.</p><p id="p-0344" num="0336">Example 20 includes the subject matter of Examples 15-19, wherein the processor is further to compute alpha values, storing encoding bits corresponding to the alpha values, and allocating delta bits for red, green, and blue (RGB) to better compression ratios.</p><p id="p-0345" num="0337">Example 21 includes the subject matter of Examples 15-20, wherein the graphics processor is co-located with an application processor on a common semiconductor package.</p><p id="p-0346" num="0338">Example 29 includes at least one non-transitory or tangible machine-readable medium comprising a plurality of instructions, when executed on a computing device, to implement or perform a method as claimed in any of claims or examples 8-14.</p><p id="p-0347" num="0339">Example 30 includes at least one machine-readable medium comprising a plurality of instructions, when executed on a computing device, to implement or perform a method as claimed in any of claims or examples 8-14.</p><p id="p-0348" num="0340">Example 31 includes a system comprising a mechanism to implement or perform a method as claimed in any of claims or examples 8-14.</p><p id="p-0349" num="0341">Example 32 includes an apparatus comprising means for performing a method as claimed in any of claims or examples 8-14.</p><p id="p-0350" num="0342">Example 33 includes a computing device arranged to implement or perform a method as claimed in any of claims or examples 8-14.</p><p id="p-0351" num="0343">Example 34 includes a communications device arranged to implement or perform a method as claimed in any of claims or examples 8-14.</p><p id="p-0352" num="0344">Example 35 includes at least one machine-readable medium comprising a plurality of instructions, when executed on a computing device, to implement or perform a method or realize an apparatus as claimed in any preceding claims.</p><p id="p-0353" num="0345">Example 36 includes at least one non-transitory or tangible machine-readable medium comprising a plurality of instructions, when executed on a computing device, to implement or perform a method or realize an apparatus as claimed in any preceding claims.</p><p id="p-0354" num="0346">Example 37 includes a system comprising a mechanism to implement or perform a method or realize an apparatus as claimed in any preceding claims.</p><p id="p-0355" num="0347">Example 38 includes an apparatus comprising means to perform a method as claimed in any preceding claims.</p><p id="p-0356" num="0348">Example 39 includes a computing device arranged to implement or perform a method or realize an apparatus as claimed in any preceding claims.</p><p id="p-0357" num="0349">Example 40 includes a communications device arranged to implement or perform a method or realize an apparatus as claimed in any preceding claims.</p><p id="p-0358" num="0350">The drawings and the forgoing description give examples of embodiments. Those skilled in the art will appreciate that one or more of the described elements may well be combined into a single functional element. Alternatively, certain elements may be split into multiple functional elements. Elements from one embodiment may be added to another embodiment. For example, orders of processes described herein may be changed and are not limited to the manner described herein. Moreover, the actions of any flow diagram need not be implemented in the order shown; nor do all of the acts necessarily need to be performed. Also, those acts that are not dependent on other acts may be performed in parallel with the other acts. The scope of embodiments is by no means limited by these specific examples. Numerous variations, whether explicitly given in the specification or not, such as differences in structure, dimension, and use of material, are possible. The scope of embodiments is at least as broad as given by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230005186A1-20230105-M00001.NB"><img id="EMI-M00001" he="13.72mm" wi="76.20mm" file="US20230005186A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-01-20" num="01-20"><claim-text><b>1</b>-<b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. An apparatus comprising:<claim-text>one or more processors including a graphics processor; and</claim-text><claim-text>memory for storage of data;</claim-text><claim-text>wherein the one or more processors are to:</claim-text><claim-text>detect a first stream of three-dimensional (3D) content data and a second stream of media content data from one or more sources to be processed by the graphics processor, the first stream of 3D content data and the second stream of media content data being separate streams of different data content; and</claim-text><claim-text>perform compression of both the first stream of 3D content data and the second stream of media content data with a unified compression technology to encode the 3D content data and the media content data, the first stream of 3D content data and the second stream of media content data utilizing one or more bit formats;</claim-text><claim-text>wherein performing compression utilizing the unified compression technology includes<claim-text>dividing the one or more bit formats into multiple smaller bit formats, and</claim-text><claim-text>performing compression on the multiple smaller bit formats.</claim-text></claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more processors are further to:<claim-text>perform decompression of the compressed 3D content data and the media content data; and</claim-text><claim-text>following the decompression, repack the decompressed data into the one or more bit formats.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more bit formats includes a 16-bit or 32-bit Z format data, the Z format data including depth information.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The apparatus of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the Z format data is divided into chunks of 8-bits for performance of compression.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein dividing the one or more bit formats into multiple smaller bit formats includes dividing either R16G16 or R32 formats into R8G8B8A8 format.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the media content data includes one or more of video data and image data.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the unified compression technology includes lossless compression.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the graphics processor is co-located with an application processor of the one or more processors on a common semiconductor package.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. A method comprising:<claim-text>detecting a first stream of three-dimensional (3D) content data and a second stream of media content data from one or more sources to be processed by a graphics processor, the first stream of 3D content data and the second stream of media content data being separate streams of different data content; and</claim-text><claim-text>performing compression of both the first stream of 3D content data and the second stream of media content data with a unified compression technology to encode the 3D content data and the media content data, the first stream of 3D content data and the second stream of media content data utilizing one or more bit formats;</claim-text><claim-text>wherein performing compression utilizing the unified compression technology includes<claim-text>dividing the one or more bit formats into multiple smaller bit formats, and</claim-text><claim-text>performing compression on the multiple smaller bit formats.</claim-text></claim-text></claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, further comprising:<claim-text>performing decompression of the compressed 3D content data and the media content data; and</claim-text><claim-text>following the decompression, repacking the decompressed data into the one or more bit formats.</claim-text></claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the one or more bit formats includes a 16-bit or 32-bit Z format data, the Z format data including depth information.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The method of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the Z format data is divided into chunks of 8-bits for performance of compression.</claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein dividing the one or more bit formats into multiple smaller bit formats includes dividing either R16G16 or R32 formats into R8G8B8A8 format.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein the media content data includes one or more of video data and image data.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. At least one non-transitory machine-readable medium comprising instructions that, when executed by a computing device, cause the computing device to perform operations comprising:<claim-text>detecting a first stream of three-dimensional (3D) content data and a second stream of media content data from one or more sources to be processed by a graphics processor, the first stream of 3D content data and the second stream of media content data being separate streams of different data content; and</claim-text><claim-text>performing compression of both the first stream of 3D content data and the second stream of media content data with a unified compression technology to encode the 3D content data and the media content data, the first stream of 3D content data and the second stream of media content data utilizing one or more bit formats;</claim-text><claim-text>wherein performing compression utilizing the unified compression technology includes<claim-text>dividing the one or more bit formats into multiple smaller bit formats, and</claim-text><claim-text>performing compression on the multiple smaller bit formats.</claim-text></claim-text></claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The machine-readable medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the instructions further include instructions that, when executed by the computing device, cause the computing device to perform operations comprising:<claim-text>performing decompression of the compressed 3D content data and the media content data; and</claim-text><claim-text>following the decompression, repacking the decompressed data into the one or more bit formats.</claim-text></claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The machine-readable medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the one or more bit formats includes a 16-bit or 32-bit Z format data, the Z format data including depth information.</claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The machine-readable medium of <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein the Z format data is divided into chunks of 8-bits for performance of compression.</claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The machine-readable medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein dividing the one or more bit formats into multiple smaller bit formats includes dividing either R16G16 or R32 formats into R8G8B8A8 format.</claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The machine-readable medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the media content data includes one or more of video data and image data.</claim-text></claim></claims></us-patent-application>