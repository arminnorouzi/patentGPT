<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004312A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004312</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17588120</doc-number><date>20220128</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0871</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0631</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0659</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0604</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0871</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DISTRIBUTED RESOURCE CACHING</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63217136</doc-number><date>20210630</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Qumulo, Inc.</orgname><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Hansen</last-name><first-name>Conner Saltiel</first-name><address><city>Portland</city><state>OR</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Jakubowski</last-name><first-name>Patrick</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Rogers, III</last-name><first-name>David Patrick</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Rothschilds</last-name><first-name>Thomas Gregory</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Smith</last-name><first-name>Porter Michael</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Hanqing</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Embodiments are directed to distributed resource caching. A file system that includes cache volumes and agents that may be associated with clients of the file system may be provided. A cache allocation for each agent may be determined based on a capacity of the cache volumes and a number of the agents such that each cache allocation is associated with tokens that each represent a reserved portion of free space in the cache volumes. Storage jobs may be provided to the agents. Data associated with the storage jobs may be stored in the cache volumes. The cache allocation for each agent may be reduced based on the data stored for each agent.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="208.11mm" wi="158.75mm" file="US20230004312A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="224.79mm" wi="162.98mm" file="US20230004312A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="240.62mm" wi="165.86mm" file="US20230004312A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="242.23mm" wi="165.86mm" file="US20230004312A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="208.03mm" wi="142.24mm" orientation="landscape" file="US20230004312A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="223.86mm" wi="171.79mm" orientation="landscape" file="US20230004312A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="244.60mm" wi="140.46mm" file="US20230004312A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="206.25mm" wi="143.17mm" file="US20230004312A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="220.13mm" wi="181.69mm" orientation="landscape" file="US20230004312A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="171.28mm" wi="165.78mm" orientation="landscape" file="US20230004312A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="216.32mm" wi="104.14mm" file="US20230004312A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="172.47mm" wi="109.98mm" file="US20230004312A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="240.03mm" wi="135.13mm" file="US20230004312A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="237.24mm" wi="152.99mm" file="US20230004312A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="244.26mm" wi="174.41mm" file="US20230004312A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is a Utility patent application based on previously filed U.S. Provisional Patent Application No. 63/217,136 filed on Jun. 30, 2021, the benefit of the filing date of which is hereby claimed under 35 U.S.C. &#xa7; 119(e) and the contents of which is further incorporated in entirety by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present invention relates generally to file systems, and more particularly, but not exclusively, to file system cache management in a distributed file system environment.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Modern computing often requires the collection, processing, or storage of very large data sets or file systems. Accordingly, to accommodate the capacity requirements as well as other requirements, such as, high availability, redundancy, latency/access considerations, or the like, modern file systems may be very large or distributed across multiple hosts, networks, or data centers, and so on. Conventionally, some distributed file systems implement various caching schemes to help improve performance. However, as file systems increase in size or complexity, caching or cache management may increasingly become burdensome in terms of performance or storage requirements. Thus, it is with respect to these considerations and others that the present invention has been made.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">Non-limiting and non-exhaustive embodiments of the present innovations are described with reference to the following drawings. In the drawings, like reference numerals refer to like parts throughout the various figures unless otherwise specified. For a better understanding of the described innovations, reference will be made to the following Detailed Description of Various Embodiments, which is to be read in association with the accompanying drawings, wherein:</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a system environment in which various embodiments may be implemented;</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a schematic embodiment of a client computer;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a schematic embodiment of a network computer;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a logical architecture of a system for distributed resource caching in accordance with one or more of the various embodiments;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a logical architecture of a file system that includes cache tiers in accordance with one or more of the various embodiments;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a logical schematic of a cloud computing environment for distributed resource caching in accordance with one or more of the various embodiments;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a logical schematic of a cloud computing environment for distributed resource caching in accordance with one or more of the various embodiments;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a logical schematic of a portion of a file system for distributed resource caching in accordance with one or more of the various embodiments;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a logical schematic of a portion of a file system for maintaining an account of issued cache tokens for distributed resource caching in accordance with one or more of the various embodiments;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an overview flowchart of a process for distributed resource caching in accordance with one or more of the various embodiments;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a flowchart of a process for distributing cache tokens to cache allocations for distributed resource caching in accordance with one or more of the various embodiments;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a flowchart of a process for distributed resource caching in accordance with one or more of the various embodiments;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a flowchart of a process for distributed resource caching in accordance with one or more of the various embodiments; and</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a flowchart of a process for determining accounting metrics for distributed resource caching in accordance with one or more of the various embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION OF VARIOUS EMBODIMENTS</heading><p id="p-0020" num="0019">Various embodiments now will be described more fully hereinafter with reference to the accompanying drawings, which form a part hereof, and which show, by way of illustration, specific exemplary embodiments by which the invention may be practiced. The embodiments may, however, be embodied in many different forms and should not be construed as limited to the embodiments set forth herein; rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the embodiments to those skilled in the art. Among other things, the various embodiments may be methods, systems, media or devices. Accordingly, the various embodiments may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is, therefore, not to be taken in a limiting sense.</p><p id="p-0021" num="0020">Throughout the specification and claims, the following terms take the meanings explicitly associated herein, unless the context clearly dictates otherwise. The phrase &#x201c;in one embodiment&#x201d; as used herein does not necessarily refer to the same embodiment, though it may. Furthermore, the phrase &#x201c;in another embodiment&#x201d; as used herein does not necessarily refer to a different embodiment, although it may. Thus, as described below, various embodiments may be readily combined, without departing from the scope or spirit of the invention.</p><p id="p-0022" num="0021">In addition, as used herein, the term &#x201c;or&#x201d; is an inclusive &#x201c;or&#x201d; operator, and is equivalent to the term &#x201c;and/or,&#x201d; unless the context clearly dictates otherwise. The term &#x201c;based on&#x201d; is not exclusive and allows for being based on additional factors not described, unless the context clearly dictates otherwise. In addition, throughout the specification, the meaning of &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; include plural references. The meaning of &#x201c;in&#x201d; includes &#x201c;in&#x201d; and &#x201c;on.&#x201d;</p><p id="p-0023" num="0022">For example embodiments, the following terms are also used herein according to the corresponding meaning, unless the context clearly dictates otherwise.</p><p id="p-0024" num="0023">As used herein the term, &#x201c;engine&#x201d; refers to logic embodied in hardware or software instructions, which can be written in a programming language, such as C, C++, Objective-C, COBOL, Java&#x2122;, PHP, Perl, JavaScript, Ruby, VBScript, Microsoft .NET&#x2122; languages such as C#, or the like. An engine may be compiled into executable programs or written in interpreted programming languages. Software engines may be callable from other engines or from themselves. Engines described herein refer to one or more logical modules that can be merged with other engines or applications, or can be divided into sub-engines. The engines can be stored in non-transitory computer-readable medium or computer storage device and be stored on and executed by one or more general purpose computers, thus creating a special purpose computer configured to provide the engine.</p><p id="p-0025" num="0024">As used herein the terms &#x201c;file system object,&#x201d; or &#x201c;object&#x201d; refer to entities stored in a file system. These may include files, directories, or the like. In this document for brevity and clarity all objects stored in a file system may be referred to as file system objects.</p><p id="p-0026" num="0025">As used herein the terms &#x201c;block,&#x201d; or &#x201c;file system object block&#x201d; refer to the file system objects that comprise a file system object. For example, small sized file system objects, such as, directory objects or small files may be comprised of a single block. Whereas, larger file system objects, such as large document files may be comprised of many blocks. Blocks usually are arranged to have a fixed size to simplify the management of a file system. This may include fixing blocks to a particular size based on requirements associated with underlying storage hardware, such as, solid state drives (SSDs) or hard disk drives (HDDs), or the like. However, file system objects may be of various sizes, comprised of the number of blocks necessary to represent or contain the entire file system object.</p><p id="p-0027" num="0026">As used herein, the term &#x201c;agent&#x201d; refers to a service, process, system, or the like, that may execute requests or jobs in a computing environment that may consume one or more distributed resources.</p><p id="p-0028" num="0027">As used herein, the term &#x201c;storage agent&#x201d; refers to a service, process, system, or the like, that may execute requests or jobs in a computing environment that may consume one or more distributed storage resources including cache resources. For example, clients interacting with a file system may be storage agents or they may be associated with storage agents.</p><p id="p-0029" num="0028">As used herein, the term &#x201c;resource,&#x201d; &#x201c;shared resource,&#x201d; or &#x201c;distributed resource&#x201d; refers to resource in a computing environment that may be available to one or more agents. For example, shared resources may include, cache storage, network bandwidth, CPU processing time, energy, or the like.</p><p id="p-0030" num="0029">As used herein, the term &#x201c;resource allocation&#x201d; refers to one or more data structures that represent an amount of a resource that is reserved for use by an initiator agent.</p><p id="p-0031" num="0030">As used herein, the term &#x201c;token&#x201d; refers to a countable representation of a portion of a resource. Tokens may represent a regular sized portion or proportion of a resource. For example, for a cache resource, each token may represent a portion of the cache.</p><p id="p-0032" num="0031">As used herein, the term &#x201c;cache token&#x201d; refers to a countable representation of a portion of a cache volume. Cache tokens may represent a regular sized portion or proportion of the cache volume resource, such as, block, sector, or the like.</p><p id="p-0033" num="0032">As used herein, the term &#x201c;cache allocation&#x201d; refers to one or more data structures that represent an amount of a cache free space that is reserved for use by a storage agent. Cache allocations may represent a number cache tokens that correspond to an amount of cache free space.</p><p id="p-0034" num="0033">As used herein, the term &#x201c;depleted cache allocation&#x201d; refers to a cache allocation that represents a number of cache tokens that is less than a defined threshold value.</p><p id="p-0035" num="0034">As used herein, the term &#x201c;non-depleted cache allocation&#x201d; refers to a cache allocation that represents a number of cache tokens that exceeds a defined threshold value.</p><p id="p-0036" num="0035">As used herein the term &#x201c;configuration information&#x201d; refers to information that may include rule based policies, pattern matching, scripts (e.g., computer readable instructions), or the like, that may be provided from various sources, including, configuration files, databases, user input, built-in defaults, plug-ins, extensions, or the like, or combination thereof.</p><p id="p-0037" num="0036">The following briefly describes embodiments of the invention in order to provide a basic understanding of some aspects of the invention. This brief description is not intended as an extensive overview. It is not intended to identify key or critical elements, or to delineate or otherwise narrow the scope. Its purpose is merely to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.</p><p id="p-0038" num="0037">Briefly stated, various embodiments are directed to distributed resource caching. In one or more of the various embodiments, In one or more of the various embodiments, a file system that includes one or more cache volumes and one or more agents that may be associated with one or more clients of the file system may be provided.</p><p id="p-0039" num="0038">In one or more of the various embodiments, a cache allocation for each agent may be determined based on a capacity of the one or more cache volumes and a number of the one or more agents such that each cache allocation is associated with one or more tokens that each represent a reserved portion of free space in the one or more cache volumes.</p><p id="p-0040" num="0039">In one or more of the various embodiments, one or more storage jobs may be provided to the one or more agents.</p><p id="p-0041" num="0040">In one or more of the various embodiments, data associated with the one or more storage jobs may be stored in the one or more cache volumes.</p><p id="p-0042" num="0041">In one or more of the various embodiments, the cache allocation for each agent may be reduced based on the data stored for each agent.</p><p id="p-0043" num="0042">In one or more of the various embodiments, one or more depleted cache allocations and one or more non-depleted cache allocations may be determined based on one or more allocation metrics such that each depleted cache allocation has a remaining capacity that is less than a depletion threshold and each non-depleted cache allocations has a remaining capacity that is greater than a non-depletion threshold.</p><p id="p-0044" num="0043">In one or more of the various embodiments, in response to determining one or more depleted cached allocations, one or more portions of the one or more tokens associated with the non-depleted cache allocations may be disassociated from the non-deleted cache allocations such that the one or more portions of the one or more disassociated tokens may be associated with the one or more determined depleted cache allocations.</p><p id="p-0045" num="0044">In one or more of the various embodiments, other data associated with one or more other jobs in the one or more depleted cache allocations may be stored in the cache volume such that the other data is stored in the portion of the one or more cache volumes previously reserved for the one or more non-depleted cache allocations.</p><p id="p-0046" num="0045">In one or more of the various embodiments, storing the data associated with the one or more storage jobs may include: determining an agent associated with the one or more storage jobs; and in response to a capacity of the cache allocation associated with the agent being equal to or greater than an amount of data associated with the one or more storage jobs, storing the data in the one or more cache volumes and consuming a portion of the one or more tokens associated with the cache allocation of the agent based on the amount of data.</p><p id="p-0047" num="0046">In one or more of the various embodiments, storing the data associated with the one or more storage jobs may include: determining an agent associated with the one or more storage jobs; and in response to the amount of data associated with the one or more storage jobs exceeding a capacity of the cache allocation associated with the agent, queuing the one or more storage jobs at the one or more cache volumes until additional free space is provided on the cache volume.</p><p id="p-0048" num="0047">In one or more of the various embodiments, in response to an aggregate total of the tokens associated with the one or more cache allocations falling below a threshold value, performing further actions, including: providing a recall message to each agent associated with a cache allocation that is associated with one or more un-consumed tokens; generating a token pool at the one or more cache volumes based on a recall of the of the one or more un-consumed tokens; in response to a number of tokens in the token pool exceeding a token pool threshold value, granting a portion of the tokens in the token pool to each agent such that the cache allocation for each agent is updated based on the portion of the tokens; and in response to the number of tokens in the token pool subceeds the token pool threshold value, storing the data associated with the one or more storage jobs in the one or more cache volumes such that a portion of the one or more un-consumed tokens in the token pool are consumed based on the data associated with the one or more stored storage jobs.</p><p id="p-0049" num="0048">In one or more of the various embodiments, one or more reclamation jobs may be executed to reclaim space on the one or more cache volumes based on moving cached data to one or more storage volumes; and in response to an amount of reclaimed spaced on the one or more cache volumes exceeding a threshold value, granting one or more other tokens associated with the reclaimed space to the one or more depleted cache allocations.</p><p id="p-0050" num="0049">In one or more of the various embodiments, a cache upper bound for each agent may be determined based on the cache allocation for each agent. In some embodiments, a total reserved space for each agent may be determined based on one or more the cache allocation for each agent, or an amount of tokens issued from a token pool to each agent. And, in some embodiments, the one or more allocation metrics may be updated based on the cache upper bound and the total reserved space.</p><p id="p-0051" num="0050">In one or more of the various embodiments, reducing the cache allocation for each agent based on the data stored for each agent may include: reserving space on the one or more cache volumes based on a number of tokens associated with the one or more storage jobs; and in response to storing the data on the one or more cache volumes, performing further actions, including: committing the data associated with the one or more storage jobs when the data is stored on the one or more cache volumes; and reducing the cache allocation of each agent based on the data that is committed to the one or more cache volumes.</p><heading id="h-0006" level="2">Illustrated Operating Environment</heading><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows components of one embodiment of an environment in which embodiments of the invention may be practiced. Not all of the components may be required to practice the invention, and variations in the arrangement and type of the components may be made without departing from the spirit or scope of the invention. As shown, system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes local area networks (LANs)/wide area networks (WANs)&#x2014; (network) <b>110</b>, wireless network <b>108</b>, client computers <b>102</b>-<b>105</b>, application server computer <b>116</b>, file system management server computer <b>118</b>, or the like.</p><p id="p-0053" num="0052">At least one embodiment of client computers <b>102</b>-<b>105</b> is described in more detail below in conjunction with <figref idref="DRAWINGS">FIG. <b>2</b></figref>. In one embodiment, at least some of client computers <b>102</b>-<b>105</b> may operate over one or more wired or wireless networks, such as networks <b>108</b>, or <b>110</b>. Generally, client computers <b>102</b>-<b>105</b> may include virtually any computer capable of communicating over a network to send and receive information, perform various online activities, offline actions, or the like. In one embodiment, one or more of client computers <b>102</b>-<b>105</b> may be configured to operate within a business or other entity to perform a variety of services for the business or other entity. For example, client computers <b>102</b>-<b>105</b> may be configured to operate as a web server, firewall, client application, media player, mobile telephone, game console, desktop computer, or the like. However, client computers <b>102</b>-<b>105</b> are not constrained to these services and may also be employed, for example, as for end-user computing in other embodiments. It should be recognized that more or less client computers (as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) may be included within a system such as described herein, and embodiments are therefore not constrained by the number or type of client computers employed.</p><p id="p-0054" num="0053">Computers that may operate as client computer <b>102</b> may include computers that typically connect using a wired or wireless communications medium such as personal computers, multiprocessor systems, microprocessor-based or programmable electronic devices, network PCs, or the like. In some embodiments, client computers <b>102</b>-<b>105</b> may include virtually any portable computer capable of connecting to another computer and receiving information such as, laptop computer <b>103</b>, mobile computer <b>104</b>, tablet computers <b>105</b>, or the like. However, portable computers are not so limited and may also include other portable computers such as cellular telephones, display pagers, radio frequency (RF) devices, infrared (IR) devices, Personal Digital Assistants (PDAs), handheld computers, wearable computers, integrated devices combining one or more of the preceding computers, or the like. As such, client computers <b>102</b>-<b>105</b> typically range widely in terms of capabilities and features. Moreover, client computers <b>102</b>-<b>105</b> may access various computing applications, including a browser, or other web-based application.</p><p id="p-0055" num="0054">A web-enabled client computer may include a browser application that is configured to send requests and receive responses over the web. The browser application may be configured to receive and display graphics, text, multimedia, and the like, employing virtually any web-based language. In one embodiment, the browser application is enabled to employ JavaScript, HyperText Markup Language (HTML), eXtensible Markup Language (XML), JavaScript Object Notation (JSON), Cascading Style Sheets (CS S), or the like, or combination thereof, to display and send a message. In one embodiment, a user of the client computer may employ the browser application to perform various activities over a network (online). However, another application may also be used to perform various online activities.</p><p id="p-0056" num="0055">Client computers <b>102</b>-<b>105</b> also may include at least one other client application that is configured to receive or send content between another computer. The client application may include a capability to send or receive content, or the like. The client application may further provide information that identifies itself, including a type, capability, name, and the like. In one embodiment, client computers <b>102</b>-<b>105</b> may uniquely identify themselves through any of a variety of mechanisms, including an Internet Protocol (IP) address, a phone number, Mobile Identification Number (MIN), an electronic serial number (ESN), a client certificate, or other device identifier. Such information may be provided in one or more network packets, or the like, sent between other client computers, application server computer <b>116</b>, file system management server computer <b>118</b>, or other computers.</p><p id="p-0057" num="0056">Client computers <b>102</b>-<b>105</b> may further be configured to include a client application that enables an end-user to log into an end-user account that may be managed by another computer, such as application server computer <b>116</b>, file system management server computer <b>118</b>, or the like. Such an end-user account, in one non-limiting example, may be configured to enable the end-user to manage one or more online activities, including in one non-limiting example, project management, software development, system administration, configuration management, search activities, social networking activities, browse various websites, communicate with other users, or the like. Also, client computers may be arranged to enable users to display reports, interactive user-interfaces, or results provided by file system management server computer <b>118</b>.</p><p id="p-0058" num="0057">Wireless network <b>108</b> is configured to couple client computers <b>103</b>-<b>105</b> and its components with network <b>110</b>. Wireless network <b>108</b> may include any of a variety of wireless sub-networks that may further overlay stand-alone ad-hoc networks, and the like, to provide an infrastructure-oriented connection for client computers <b>103</b>-<b>105</b>. Such sub-networks may include mesh networks, Wireless LAN (WLAN) networks, cellular networks, and the like. In one embodiment, the system may include more than one wireless network.</p><p id="p-0059" num="0058">Wireless network <b>108</b> may further include an autonomous system of terminals, gateways, routers, and the like connected by wireless radio links, and the like. These connectors may be configured to move freely and randomly and organize themselves arbitrarily, such that the topology of wireless network <b>108</b> may change rapidly.</p><p id="p-0060" num="0059">Wireless network <b>108</b> may further employ a plurality of access technologies including 2nd (2G), 3rd (3G), 4th (4G) 5th (5G) generation radio access for cellular systems, WLAN, Wireless Router (WR) mesh, and the like. Access technologies such as 2G, 3G, 4G, 5G, and future access networks may enable wide area coverage for mobile computers, such as client computers <b>103</b>-<b>105</b> with various degrees of mobility. In one non-limiting example, wireless network <b>108</b> may enable a radio connection through a radio network access such as Global System for Mobil communication (GSM), General Packet Radio Services (GPRS), Enhanced Data GSM Environment (EDGE), code division multiple access (CDMA), time division multiple access (TDMA), Wideband Code Division Multiple Access (WCDMA), High Speed Downlink Packet Access (HSDPA), Long Term Evolution (LTE), and the like. In essence, wireless network <b>108</b> may include virtually any wireless communication mechanism by which information may travel between client computers <b>103</b>-<b>105</b> and another computer, network, a cloud-based network, a cloud instance, or the like.</p><p id="p-0061" num="0060">Network <b>110</b> is configured to couple network computers with other computers, including, application server computer <b>116</b>, file system management server computer <b>118</b>, client computers <b>102</b>, and client computers <b>103</b>-<b>105</b> through wireless network <b>108</b>, or the like. Network <b>110</b> is enabled to employ any form of computer readable media for communicating information from one electronic device to another. Also, network <b>110</b> can include the Internet in addition to local area networks (LANs), wide area networks (WANs), direct connections, such as through a universal serial bus (USB) port, Ethernet port, other forms of computer-readable media, or any combination thereof. On an interconnected set of LANs, including those based on differing architectures and protocols, a router acts as a link between LANs, enabling messages to be sent from one to another. In addition, communication links within LANs typically include twisted wire pair or coaxial cable, while communication links between networks may utilize analog telephone lines, full or fractional dedicated digital lines including T1, T2, T3, and T4, or other carrier mechanisms including, for example, E-carriers, Integrated Services Digital Networks (ISDNs), Digital Subscriber Lines (DSLs), wireless links including satellite links, or other communications links known to those skilled in the art. Moreover, communication links may further employ any of a variety of digital signaling technologies, including without limit, for example, DS-0, DS-1, DS-2, DS-3, DS-4, OC-3, OC-12, OC-48, or the like. Furthermore, remote computers and other related electronic devices could be remotely connected to either LANs or WANs via a modem and temporary telephone link. In one embodiment, network <b>110</b> may be configured to transport information of an Internet Protocol (IP).</p><p id="p-0062" num="0061">Additionally, communication media typically embodies computer readable instructions, data structures, program modules, or other transport mechanism and includes any information non-transitory delivery media or transitory delivery media. By way of example, communication media includes wired media such as twisted pair, coaxial cable, fiber optics, wave guides, and other wired media and wireless media such as acoustic, RF, infrared, and other wireless media.</p><p id="p-0063" num="0062">Also, one embodiment of application server computer <b>116</b> or file system management server computer <b>118</b> are described in more detail below in conjunction with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Although <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates application server computer <b>116</b> and file system management server computer <b>118</b> each as a single computer, the innovations or embodiments are not so limited. For example, one or more functions of application server computer <b>116</b>, file system management server computer <b>118</b>, or the like, may be distributed across one or more distinct network computers. Moreover, in one or more embodiments, file system management server computer <b>118</b> may be implemented using a plurality of network computers. Further, in one or more of the various embodiments, application server computer <b>116</b>, file system management server computer <b>118</b>, or the like, may be implemented using one or more cloud instances in one or more cloud networks. Accordingly, these innovations and embodiments are not to be construed as being limited to a single environment, and other configurations, and other architectures are also envisaged.</p><heading id="h-0007" level="2">Illustrative Client Computer</heading><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows one embodiment of client computer <b>200</b> that may include many more or less components than those shown. Client computer <b>200</b> may represent, for example, one or more embodiment of mobile computers or client computers shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0065" num="0064">Client computer <b>200</b> may include processor <b>202</b> in communication with memory <b>204</b> via bus <b>228</b>. Client computer <b>200</b> may also include power supply <b>230</b>, network interface <b>232</b>, audio interface <b>256</b>, display <b>250</b>, keypad <b>252</b>, illuminator <b>254</b>, video interface <b>242</b>, input/output interface <b>238</b>, haptic interface <b>264</b>, global positioning systems (GPS) receiver <b>258</b>, open air gesture interface <b>260</b>, temperature interface <b>262</b>, camera(s) <b>240</b>, projector <b>246</b>, pointing device interface <b>266</b>, processor-readable stationary storage device <b>234</b>, and processor-readable removable storage device <b>236</b>. Client computer <b>200</b> may optionally communicate with a base station (not shown), or directly with another computer. And in one embodiment, although not shown, a gyroscope may be employed within client computer <b>200</b> to measuring or maintaining an orientation of client computer <b>200</b>.</p><p id="p-0066" num="0065">Power supply <b>230</b> may provide power to client computer <b>200</b>. A rechargeable or non-rechargeable battery may be used to provide power. The power may also be provided by an external power source, such as an AC adapter or a powered docking cradle that supplements or recharges the battery.</p><p id="p-0067" num="0066">Network interface <b>232</b> includes circuitry for coupling client computer <b>200</b> to one or more networks, and is constructed for use with one or more communication protocols and technologies including, but not limited to, protocols and technologies that implement any portion of the OSI model for mobile communication (GSM), CDMA, time division multiple access (TDMA), UDP, TCP/IP, SMS, MMS, GPRS, WAP, UWB, WiMax, SIP/RTP, GPRS, EDGE, WCDMA, LTE, UMTS, OFDM, CDMA2000, EV-DO, HSDPA, or any of a variety of other wireless communication protocols. Network interface <b>232</b> is sometimes known as a transceiver, transceiving device, or network interface card (MC).</p><p id="p-0068" num="0067">Audio interface <b>256</b> may be arranged to produce and receive audio signals such as the sound of a human voice. For example, audio interface <b>256</b> may be coupled to a speaker and microphone (not shown) to enable telecommunication with others or generate an audio acknowledgement for some action. A microphone in audio interface <b>256</b> can also be used for input to or control of client computer <b>200</b>, e.g., using voice recognition, detecting touch based on sound, and the like.</p><p id="p-0069" num="0068">Display <b>250</b> may be a liquid crystal display (LCD), gas plasma, electronic ink, light emitting diode (LED), Organic LED (OLED) or any other type of light reflective or light transmissive display that can be used with a computer. Display <b>250</b> may also include a touch interface <b>244</b> arranged to receive input from an object such as a stylus or a digit from a human hand, and may use resistive, capacitive, surface acoustic wave (SAW), infrared, radar, or other technologies to sense touch or gestures.</p><p id="p-0070" num="0069">Projector <b>246</b> may be a remote handheld projector or an integrated projector that is capable of projecting an image on a remote wall or any other reflective object such as a remote screen.</p><p id="p-0071" num="0070">Video interface <b>242</b> may be arranged to capture video images, such as a still photo, a video segment, an infrared video, or the like. For example, video interface <b>242</b> may be coupled to a digital video camera, a web-camera, or the like. Video interface <b>242</b> may comprise a lens, an image sensor, and other electronics. Image sensors may include a complementary metal-oxide-semiconductor (CMOS) integrated circuit, charge-coupled device (CCD), or any other integrated circuit for sensing light.</p><p id="p-0072" num="0071">Keypad <b>252</b> may comprise any input device arranged to receive input from a user. For example, keypad <b>252</b> may include a push button numeric dial, or a keyboard. Keypad <b>252</b> may also include command buttons that are associated with selecting and sending images.</p><p id="p-0073" num="0072">Illuminator <b>254</b> may provide a status indication or provide light. Illuminator <b>254</b> may remain active for specific periods of time or in response to event messages. For example, when illuminator <b>254</b> is active, it may backlight the buttons on keypad <b>252</b> and stay on while the client computer is powered. Also, illuminator <b>254</b> may backlight these buttons in various patterns when particular actions are performed, such as dialing another client computer. Illuminator <b>254</b> may also cause light sources positioned within a transparent or translucent case of the client computer to illuminate in response to actions.</p><p id="p-0074" num="0073">Further, client computer <b>200</b> may also comprise hardware security module (HSM) <b>268</b> for providing additional tamper resistant safeguards for generating, storing or using security/cryptographic information such as, keys, digital certificates, passwords, passphrases, two-factor authentication information, or the like. In some embodiments, hardware security module may be employed to support one or more standard public key infrastructures (PKI), and may be employed to generate, manage, or store keys pairs, or the like. In some embodiments, HSM <b>268</b> may be a stand-alone computer, in other cases, HSM <b>268</b> may be arranged as a hardware card that may be added to a client computer.</p><p id="p-0075" num="0074">Client computer <b>200</b> may also comprise input/output interface <b>238</b> for communicating with external peripheral devices or other computers such as other client computers and network computers. The peripheral devices may include an audio headset, virtual reality headsets, display screen glasses, remote speaker system, remote speaker and microphone system, and the like. Input/output interface <b>238</b> can utilize one or more technologies, such as Universal Serial Bus (USB), Infrared, WiFi, WiMax, Bluetooth&#x2122;, and the like.</p><p id="p-0076" num="0075">Input/output interface <b>238</b> may also include one or more sensors for determining geolocation information (e.g., GPS), monitoring electrical power conditions (e.g., voltage sensors, current sensors, frequency sensors, and so on), monitoring weather (e.g., thermostats, barometers, anemometers, humidity detectors, precipitation scales, or the like), or the like. Sensors may be one or more hardware sensors that collect or measure data that is external to client computer <b>200</b>.</p><p id="p-0077" num="0076">Haptic interface <b>264</b> may be arranged to provide tactile feedback to a user of the client computer. For example, the haptic interface <b>264</b> may be employed to vibrate client computer <b>200</b> in a particular way when another user of a computer is calling. Temperature interface <b>262</b> may be used to provide a temperature measurement input or a temperature changing output to a user of client computer <b>200</b>. Open air gesture interface <b>260</b> may sense physical gestures of a user of client computer <b>200</b>, for example, by using single or stereo video cameras, radar, a gyroscopic sensor inside a computer held or worn by the user, or the like. Camera <b>240</b> may be used to track physical eye movements of a user of client computer <b>200</b>.</p><p id="p-0078" num="0077">GPS transceiver <b>258</b> can determine the physical coordinates of client computer <b>200</b> on the surface of the Earth, which typically outputs a location as latitude and longitude values. GPS transceiver <b>258</b> can also employ other geo-positioning mechanisms, including, but not limited to, triangulation, assisted GPS (AGPS), Enhanced Observed Time Difference (E-OTD), Cell Identifier (CI), Service Area Identifier (SAI), Enhanced Timing Advance (ETA), Base Station Subsystem (BSS), or the like, to further determine the physical location of client computer <b>200</b> on the surface of the Earth. It is understood that under different conditions, GPS transceiver <b>258</b> can determine a physical location for client computer <b>200</b>. In one or more embodiment, however, client computer <b>200</b> may, through other components, provide other information that may be employed to determine a physical location of the client computer, including for example, a Media Access Control (MAC) address, IP address, and the like.</p><p id="p-0079" num="0078">In at least one of the various embodiments, applications, such as, operating system <b>206</b>, other client apps <b>224</b>, web browser <b>226</b>, or the like, may be arranged to employ geo-location information to select one or more localization features, such as, time zones, languages, currencies, calendar formatting, or the like. Localization features may be used in file system object meta-data, file system objects, file systems, user-interfaces, reports, as well as internal processes or databases. In at least one of the various embodiments, geo-location information used for selecting localization information may be provided by GPS <b>258</b>. Also, in some embodiments, geolocation information may include information provided using one or more geolocation protocols over the networks, such as, wireless network <b>108</b> or network <b>111</b>.</p><p id="p-0080" num="0079">Human interface components can be peripheral devices that are physically separate from client computer <b>200</b>, allowing for remote input or output to client computer <b>200</b>. For example, information routed as described here through human interface components such as display <b>250</b> or keyboard <b>252</b> can instead be routed through network interface <b>232</b> to appropriate human interface components located remotely. Examples of human interface peripheral components that may be remote include, but are not limited to, audio devices, pointing devices, keypads, displays, cameras, projectors, and the like. These peripheral components may communicate over a Pico Network such as Bluetooth&#x2122;, Zigbee&#x2122; and the like. One non-limiting example of a client computer with such peripheral human interface components is a wearable computer, which might include a remote pico projector along with one or more cameras that remotely communicate with a separately located client computer to sense a user's gestures toward portions of an image projected by the pico projector onto a reflected surface such as a wall or the user's hand.</p><p id="p-0081" num="0080">A client computer may include web browser application <b>226</b> that is configured to receive and to send web pages, web-based messages, graphics, text, multimedia, and the like. The client computer's browser application may employ virtually any programming language, including a wireless application protocol messages (WAP), and the like. In one or more embodiment, the browser application is enabled to employ Handheld Device Markup Language (HDML), Wireless Markup Language (WML), WMLScript, JavaScript, Standard Generalized Markup Language (SGML), HyperText Markup Language (HTML), eXtensible Markup Language (XML), HTML5, and the like.</p><p id="p-0082" num="0081">Memory <b>204</b> may include RAM, ROM, or other types of memory. Memory <b>204</b> illustrates an example of computer-readable storage media (devices) for storage of information such as computer-readable instructions, data structures, program modules or other data. Memory <b>204</b> may store BIOS <b>208</b> for controlling low-level operation of client computer <b>200</b>. The memory may also store operating system <b>206</b> for controlling the operation of client computer <b>200</b>. It will be appreciated that this component may include a general-purpose operating system such as a version of UNIX, or Linux&#xae;, or a specialized client computer communication operating system such as Windows Phone&#x2122;, or the Symbian&#xae; operating system. The operating system may include, or interface with a Java virtual machine module that enables control of hardware components or operating system operations via Java application programs.</p><p id="p-0083" num="0082">Memory <b>204</b> may further include one or more data storage <b>210</b>, which can be utilized by client computer <b>200</b> to store, among other things, applications <b>220</b> or other data. For example, data storage <b>210</b> may also be employed to store information that describes various capabilities of client computer <b>200</b>. The information may then be provided to another device or computer based on any of a variety of methods, including being sent as part of a header during a communication, sent upon request, or the like. Data storage <b>210</b> may also be employed to store social networking information including address books, buddy lists, aliases, user profile information, or the like. Data storage <b>210</b> may further include program code, data, algorithms, and the like, for use by a processor, such as processor <b>202</b> to execute and perform actions. In one embodiment, at least some of data storage <b>210</b> might also be stored on another component of client computer <b>200</b>, including, but not limited to, non-transitory processor-readable removable storage device <b>236</b>, processor-readable stationary storage device <b>234</b>, or even external to the client computer.</p><p id="p-0084" num="0083">Applications <b>220</b> may include computer executable instructions which, when executed by client computer <b>200</b>, transmit, receive, or otherwise process instructions and data. Applications <b>220</b> may include, for example, other client applications <b>224</b>, web browser <b>226</b>, or the like. Client computers may be arranged to exchange communications, such as, file system operations, file system administration, file access, queries, searches, messages, notification messages, event messages, alerts, performance metrics, log data, API calls, or the like, combination thereof, with application servers or network monitoring computers.</p><p id="p-0085" num="0084">Other examples of application programs include calendars, search programs, email client applications, IM applications, SMS applications, Voice Over Internet Protocol (VOIP) applications, contact managers, task managers, transcoders, database programs, word processing programs, security applications, spreadsheet programs, games, search programs, and so forth.</p><p id="p-0086" num="0085">Additionally, in one or more embodiments (not shown in the figures), client computer <b>200</b> may include an embedded logic hardware device instead of a CPU, such as, an Application Specific Integrated Circuit (ASIC), Field Programmable Gate Array (FPGA), Programmable Array Logic (PAL), or the like, or combination thereof. The embedded logic hardware device may directly execute its embedded logic to perform actions. Also, in one or more embodiments (not shown in the figures), client computer <b>200</b> may include one or more hardware microcontrollers instead of CPUs. In one or more embodiment, the one or more microcontrollers may directly execute their own embedded logic to perform actions and access its own internal memory and its own external Input and Output Interfaces (e.g., hardware pins or wireless transceivers) to perform actions, such as System On a Chip (SOC), or the like.</p><heading id="h-0008" level="2">Illustrative Network Computer</heading><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows one embodiment of network computer <b>300</b> that may be included in a system implementing one or more of the various embodiments. Network computer <b>300</b> may include many more or less components than those shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. However, the components shown are sufficient to disclose an illustrative embodiment for practicing these innovations. Network computer <b>300</b> may represent, for example, one embodiment of at least one of application server computer <b>116</b>, or file system management server computer <b>118</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0088" num="0087">Network computers, such as, network computer <b>300</b> may include a processor <b>302</b> that may be in communication with a memory <b>304</b> via a bus <b>328</b>. In some embodiments, processor <b>302</b> may be comprised of one or more hardware processors, or one or more processor cores. In some cases, one or more of the one or more processors may be specialized processors designed to perform one or more specialized actions, such as, those described herein. Network computer <b>300</b> also includes a power supply <b>330</b>, network interface <b>332</b>, audio interface <b>356</b>, display <b>350</b>, keyboard <b>352</b>, input/output interface <b>338</b>, processor-readable stationary storage device <b>334</b>, and processor-readable removable storage device <b>336</b>. Power supply <b>330</b> provides power to network computer <b>300</b>.</p><p id="p-0089" num="0088">Network interface <b>332</b> includes circuitry for coupling network computer <b>300</b> to one or more networks, and is constructed for use with one or more communication protocols and technologies including, but not limited to, protocols and technologies that implement any portion of the Open Systems Interconnection model (OSI model), global system for mobile communication (GSM), code division multiple access (CDMA), time division multiple access (TDMA), user datagram protocol (UDP), transmission control protocol/Internet protocol (TCP/IP), Short Message Service (SMS), Multimedia Messaging Service (MMS), general packet radio service (GPRS), WAP, ultra-wide band (UWB), IEEE 802.16 Worldwide Interoperability for Microwave Access (WiMax), Session Initiation Protocol/Real-time Transport Protocol (SIP/RTP), or any of a variety of other wired and wireless communication protocols. Network interface <b>332</b> is sometimes known as a transceiver, transceiving device, or network interface card (NIC). Network computer <b>300</b> may optionally communicate with a base station (not shown), or directly with another computer.</p><p id="p-0090" num="0089">Audio interface <b>356</b> is arranged to produce and receive audio signals such as the sound of a human voice. For example, audio interface <b>356</b> may be coupled to a speaker and microphone (not shown) to enable telecommunication with others or generate an audio acknowledgement for some action. A microphone in audio interface <b>356</b> can also be used for input to or control of network computer <b>300</b>, for example, using voice recognition.</p><p id="p-0091" num="0090">Display <b>350</b> may be a liquid crystal display (LCD), gas plasma, electronic ink, light emitting diode (LED), Organic LED (OLED) or any other type of light reflective or light transmissive display that can be used with a computer. In some embodiments, display <b>350</b> may be a handheld projector or pico projector capable of projecting an image on a wall or other object.</p><p id="p-0092" num="0091">Network computer <b>300</b> may also comprise input/output interface <b>338</b> for communicating with external devices or computers not shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Input/output interface <b>338</b> can utilize one or more wired or wireless communication technologies, such as USB&#x2122;, Firewire&#x2122;, WiFi, WiMax, Thunderbolt&#x2122;, Infrared, Bluetooth&#x2122;, Zigbee&#x2122;, serial port, parallel port, and the like.</p><p id="p-0093" num="0092">Also, input/output interface <b>338</b> may also include one or more sensors for determining geolocation information (e.g., GPS), monitoring electrical power conditions (e.g., voltage sensors, current sensors, frequency sensors, and so on), monitoring weather (e.g., thermostats, barometers, anemometers, humidity detectors, precipitation scales, or the like), or the like. Sensors may be one or more hardware sensors that collect or measure data that is external to network computer <b>300</b>. Human interface components can be physically separate from network computer <b>300</b>, allowing for remote input or output to network computer <b>300</b>. For example, information routed as described here through human interface components such as display <b>350</b> or keyboard <b>352</b> can instead be routed through the network interface <b>332</b> to appropriate human interface components located elsewhere on the network. Human interface components include any component that allows the computer to take input from, or send output to, a human user of a computer. Accordingly, pointing devices such as mice, styluses, track balls, or the like, may communicate through pointing device interface <b>358</b> to receive user input.</p><p id="p-0094" num="0093">GPS transceiver <b>340</b> can determine the physical coordinates of network computer <b>300</b> on the surface of the Earth, which typically outputs a location as latitude and longitude values. GPS transceiver <b>340</b> can also employ other geo-positioning mechanisms, including, but not limited to, triangulation, assisted GPS (AGPS), Enhanced Observed Time Difference (E-OTD), Cell Identifier (CI), Service Area Identifier (SAI), Enhanced Timing Advance (ETA), Base Station Subsystem (BSS), or the like, to further determine the physical location of network computer <b>300</b> on the surface of the Earth. It is understood that under different conditions, GPS transceiver <b>340</b> can determine a physical location for network computer <b>300</b>. In one or more embodiments, however, network computer <b>300</b> may, through other components, provide other information that may be employed to determine a physical location of the client computer, including for example, a Media Access Control (MAC) address, IP address, and the like.</p><p id="p-0095" num="0094">In at least one of the various embodiments, applications, such as, operating system <b>306</b>, file system engine <b>322</b>, cache engine <b>324</b>, web services <b>329</b>, or the like, may be arranged to employ geo-location information to select one or more localization features, such as, time zones, languages, currencies, currency formatting, calendar formatting, or the like. Localization features may be used in file system meta-data, file system objects, file systems, permissions, user-interfaces, reports, as well as internal processes or databases. In at least one of the various embodiments, geo-location information used for selecting localization information may be provided by GPS <b>340</b>. Also, in some embodiments, geolocation information may include information provided using one or more geolocation protocols over the networks, such as, wireless network <b>108</b> or network <b>111</b>.</p><p id="p-0096" num="0095">Memory <b>304</b> may include Random Access Memory (RAM), Read-Only Memory (ROM), or other types of memory. Memory <b>304</b> illustrates an example of computer-readable storage media (devices) for storage of information such as computer-readable instructions, data structures, program modules or other data. Memory <b>304</b> stores a basic input/output system (BIOS) <b>308</b> for controlling low-level operation of network computer <b>300</b>. The memory also stores an operating system <b>306</b> for controlling the operation of network computer <b>300</b>. It will be appreciated that this component may include a general-purpose operating system such as a version of UNIX&#xae;, or Linux&#xae;, or a specialized operating system such as Microsoft Corporation's Windows&#xae; operating system, or the Apple Corporation's macOS&#xae; operating system. The operating system may include, or interface with one or more virtual machine modules, such as, a Java virtual machine module that enables control of hardware components or operating system operations via Java application programs. Likewise, other runtime environments may be included.</p><p id="p-0097" num="0096">Memory <b>304</b> may further include one or more data storage <b>310</b>, which can be utilized by network computer <b>300</b> to store, among other things, applications <b>320</b> or other data. For example, data storage <b>310</b> may also be employed to store information that describes various capabilities of network computer <b>300</b>. The information may then be provided to another device or computer based on any of a variety of methods, including being sent as part of a header during a communication, sent upon request, or the like. Data storage <b>310</b> may also be employed to store social networking information including address books, buddy lists, aliases, user profile information, or the like. Data storage <b>310</b> may further include program code, data, algorithms, and the like, for use by a processor, such as processor <b>302</b> to execute and perform actions such as those actions described below. In one embodiment, at least some of data storage <b>310</b> might also be stored on another component of network computer <b>300</b>, including, but not limited to, non-transitory media inside processor-readable removable storage device <b>336</b>, processor-readable stationary storage device <b>334</b>, or any other computer-readable storage device within network computer <b>300</b>, or even external to network computer <b>300</b>. Data storage <b>310</b> may include, for example, cache storage <b>314</b>, file storage <b>316</b>, or the like. Cache storage <b>314</b> or file storage <b>316</b> may store files, documents, versions, properties, permissions information, file meta-data, data structures, or the like, that represent one or more portions of a distributed file system. In some embodiments, various storable objects (e.g., file system objects) may be divided into one or more blocks or pages that are stored or indexed in cache storage <b>314</b> or file storage <b>316</b>. In some embodiments, cache storage <b>314</b> may comprise one or more solid state drives (SSDs) and file storage <b>316</b> may comprise one or more hard drives (HDDs).</p><p id="p-0098" num="0097">Applications <b>320</b> may include computer executable instructions which, when executed by network computer <b>300</b>, transmit, receive, or otherwise process messages (e.g., SMS, Multimedia Messaging Service (MMS), Instant Message (IM), email, or other messages), audio, video, and enable telecommunication with another user of another mobile computer. Other examples of application programs include calendars, search programs, email client applications, IM applications, SMS applications, Voice Over Internet Protocol (VOIP) applications, contact managers, task managers, transcoders, database programs, word processing programs, security applications, spreadsheet programs, games, search programs, and so forth. Applications <b>320</b> may include file system engine <b>322</b>, cache engine <b>324</b>, web services <b>329</b>, or the like, that may be arranged to perform actions for embodiments described below. In one or more of the various embodiments, one or more of the applications may be implemented as modules or components of another application. Further, in one or more of the various embodiments, applications may be implemented as operating system extensions, modules, plugins, or the like.</p><p id="p-0099" num="0098">Furthermore, in one or more of the various embodiments, file system engine <b>322</b>, cache engine <b>324</b>, web services <b>329</b>, or the like, may be operative in a cloud-based computing environment. In one or more of the various embodiments, these applications, and others, that comprise the management platform may be executing within virtual machines or virtual servers that may be managed in a cloud-based based computing environment. In one or more of the various embodiments, in this context the applications may flow from one physical network computer within the cloud-based environment to another depending on performance and scaling considerations automatically managed by the cloud computing environment. Likewise, in one or more of the various embodiments, virtual machines or virtual servers dedicated to file system engine <b>322</b>, cache engine <b>324</b>, web services <b>329</b>, or the like, may be provisioned and de-commissioned automatically.</p><p id="p-0100" num="0099">Also, in one or more of the various embodiments, file system engine <b>322</b>, cache engine <b>324</b>, web services <b>329</b>, or the like, may be located in virtual servers running in a cloud-based computing environment rather than being tied to one or more specific physical network computers.</p><p id="p-0101" num="0100">Further, network computer <b>300</b> may also comprise hardware security module (HSM) <b>360</b> for providing additional tamper resistant safeguards for generating, storing or using security/cryptographic information such as, keys, digital certificates, passwords, passphrases, two-factor authentication information, or the like. In some embodiments, hardware security module may employ to support one or more standard public key infrastructures (PKI), and may be employed to generate, manage, or store keys pairs, or the like. In some embodiments, HSM <b>360</b> may be a stand-alone network computer, in other cases, HSM <b>360</b> may be arranged as a hardware card that may be installed in a network computer.</p><p id="p-0102" num="0101">Additionally, in one or more embodiments (not shown in the figures), network computer <b>300</b> may include an embedded logic hardware device instead of a CPU, such as, an Application Specific Integrated Circuit (ASIC), Field Programmable Gate Array (FPGA), Programmable Array Logic (PAL), or the like, or combination thereof. The embedded logic hardware device may directly execute its embedded logic to perform actions. Also, in one or more embodiments (not shown in the figures), the network computer may include one or more hardware microcontrollers instead of a CPU. In one or more embodiment, the one or more microcontrollers may directly execute their own embedded logic to perform actions and access their own internal memory and their own external Input and Output Interfaces (e.g., hardware pins or wireless transceivers) to perform actions, such as System On a Chip (SOC), or the like.</p><heading id="h-0009" level="2">Illustrative Logical System Architecture</heading><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a logical architecture of system <b>400</b> for distributed resource caching in accordance with one or more of the various embodiments. In one or more of the various embodiments, file systems, such as, file system <b>402</b> may be arranged to be communicatively coupled to one or more networks, such as, networks <b>412</b>. Accordingly, in one or more of the various embodiments, one or more clients, such as, client computer <b>408</b> and client computer <b>410</b> may be arranged to access file system <b>402</b> over networks <b>412</b>. In some embodiments, clients of file system <b>402</b> may include users, services, programs, computers, devices, or the like, that may be enabled to perform one or more file system operations, such as, creating, reading, updating, or deleting data (e.g., file system objects) that may be stored in file system <b>402</b>. In some embodiments, file system <b>402</b> may comprise one or more file system management computers, such as file system management computer <b>404</b>. Also, in one or more of the various embodiments, file systems, such as file system <b>402</b> may include one or more file system objects, such as file system object <b>406</b> that may represent the various objects or entities that may be in file system <b>402</b>. In some embodiments, file system objects may include, files, documents, directories, folders, change records, file system journals, backups, snapshots, replication information, versions, branches, blocks, pages, or the like. In some embodiments, primitive file system objects, such as, blocks or pages, may be used to compose more complex file system objects.</p><p id="p-0104" num="0103">In one or more of the various embodiments, the implementation details that enable file system <b>402</b> to operate may be hidden from clients such that they may be arranged to use file system <b>402</b> the same way they use other file systems, including local file systems. Accordingly, in one or more of the various embodiments, clients may be unaware that they are using a file system that supports one or more cache tiers because file system engines or cache engines may be arranged to mimic the interface or behavior of native file systems used by the clients.</p><p id="p-0105" num="0104">Also, while file system <b>402</b> is illustrated as using one file system management computer with one set of file system objects, the innovations described herein are not so limited. Innovations herein contemplate file systems that include one or more file system management computers or one or more file system object data stores. In some embodiments, file system object stores (e.g., file storage <b>316</b>) may be located remotely from one or more file system management computers. Also, a logical file system object store or file system may be spread across two or more cloud computing environments, storage clusters, one or more on-premises servers, or the like, or combination thereof.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a logical architecture of file system <b>500</b> that includes cache tiers in accordance with one or more of the various embodiments. As described above, file systems may include one or more file system management server computers, such as, file system management server computer <b>502</b>. Also, in one or more of the various embodiments, one or more client computers, such as, client computer <b>504</b> and client computer <b>506</b> may access (e.g., read, write, or delete) one or more file system objects, such as, file system object <b>512</b> or file system object <b>514</b>.</p><p id="p-0107" num="0106">In one or more of the various embodiments, file system management server computers may be arranged to store or manage the storage of file system objects. In some embodiments, data storage <b>508</b> may represent one or more data storage systems or devices that may be used to store file system objects. In some embodiments, data storage <b>508</b> may include one or more cache storage tiers, such as, cache storage tier <b>510</b>. Also, in some embodiments, data storage <b>508</b> may include one or more file storage tiers, such as file storage tier <b>512</b>. In some embodiments, cache storage tier <b>510</b> may be comprised of storage components or resources that for one or more reasons (e.g., expense, or the like) may be considered scarcer than the storage components or resources comprising file storage tier <b>512</b>. For example, in some embodiments, cache storage tier <b>510</b> may be comprised of one or more SSDs while file storage tier <b>512</b> may be comprised of one or more HDDs.</p><p id="p-0108" num="0107">In one or more of the various embodiments, file system management server computer may be arranged to manage the distribution of file objects onto cache storage tier <b>510</b> or file storage tier <b>512</b>. In some embodiments, this may include managing the demotion of file objects from cache storage to file storage or the promotion of file objects from file storage to cache storage.</p><p id="p-0109" num="0108">Accordingly, in one or more of the various embodiments, file system management server computer may include one or more cache engines that may be instantiated to perform one or more actions to manage the promotion or demotion of file system objects to or from cache storage. In one or more of the various embodiments, cache engines may be arranged to employ one or more databases of heat extents that may be used for evaluating how to allocate cache resources of the file system.</p><p id="p-0110" num="0109">Note, for brevity and clarity, data storage <b>508</b> is illustrated as having one cache storage tier and one file storage tier, one of ordinary skill in the art will appreciate that these innovations are not so limited. For example, in some embodiments, data storage for a file system may include two or more cache storage tiers or two or more file storage tiers. Accordingly, the innovations disclosed herein may be applied to systems having one or more cache storage tiers or one or more file storage tiers.</p><p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a logical schematic of cloud computing environment <b>600</b> for distributed resource caching in accordance with one or more of the various embodiments. As introduced above, file systems may be hosted or implemented in a cloud computing environment, such as, cloud computing environment <b>600</b>.</p><p id="p-0112" num="0111">In one or more of the various embodiments, cluster <b>602</b> may be virtualized file system cluster hosted in cloud computing environment <b>600</b>. In this example, the boundary of cluster <b>602</b> is illustrated using a dashed line to represent the dynamic or elastic nature of a cloud-hosted file system cluster. Accordingly, in some embodiments, the innovations disclosed herein anticipate various conventional cloud computing features, such as, programmatically/dynamically provisioning components, such as, compute instances, storage volumes, or the like. Also, in some embodiments, innovations may rely on other programmatic/dynamic features often provided by cloud computing environments, such as, network configuration, grouping or association of various cloud environment components with other components, component/object tagging systems, component/object labeling, or the like.</p><p id="p-0113" num="0112">In one or more of the various embodiments, file systems hosted or implemented in cloud computing environments may be assumed to provide services similar as described above for <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Thus, for brevity or clarity those descriptions are not repeated here.</p><p id="p-0114" num="0113">In some embodiments, cluster <b>602</b> may include one or more cluster controllers, such as, cluster leader <b>604</b> and one or more storage nodes, such as, storage node <b>606</b>, or the like. In one or more of the various embodiments, cluster leader <b>604</b> may be considered to the same or similar as file system management computer <b>404</b>, or the like. Also, in some embodiments, cluster leader <b>604</b> may be considered to be a storage node that is designated (or elected) to provide some or all of the same services a file system management computer may provide.</p><p id="p-0115" num="0114">In some embodiments, storage nodes, such as, storage node <b>606</b> may be considered to be cluster nodes that may be arranged to rely on or coordinate with cluster leaders, such as, cluster leader <b>604</b>.</p><p id="p-0116" num="0115">In one or more of the various embodiments, storage nodes may be associated with one or more cache volumes or one or more storage volumes that may be based on data storage objects or storage services that may be provisioned from the cloud computing environment.</p><p id="p-0117" num="0116">In this example, the storage volumes or cache volumes are not shown but they may be considered to be logically associated with the storage nodes.</p><p id="p-0118" num="0117">Note, in some embodiments, cluster leaders may be storage nodes that have been selected (or elected) to provide controller services. Thus, in some embodiments, cluster leader nodes may be associated with one or more storage volumes similar as storage nodes.</p><p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a logical schematic of cloud computing environment <b>700</b> for distributed resource caching in accordance with one or more of the various embodiments.</p><p id="p-0120" num="0119">In one or more of the various embodiments, as described above, cloud computing environments may enable one or more compute instances to be employed as storage nodes of a distributed file system.</p><p id="p-0121" num="0120">In one or more of the various embodiments, nodes in cloud computing environments may be associated with one or more storage volumes similar or analogous to how storage volume devices may be physically coupled with physical storage nodes. However, rather than being physical storage devices (hard drives, solid state drives, or the like), storage volumes for cloud storage nodes may be virtualized storage volumes that may be communicatively coupled to compute instances in the cloud computing environment.</p><p id="p-0122" num="0121">In one or more of the various embodiments, cloud computing environments may provide configuration tools, APIs, user interfaces, or the like, that enable users to configure or select storage volumes that may have different attributes (e.g., capacity, response time, I/O performance, encryption, or the like) based on the needs of an application of user. Accordingly, storage volumes may be logically associated with compute instances in cloud computing environment to provide private or logically local storage. Thus, in some embodiments, storage volumes that are associated with a compute instance may be considered virtual storage devices.</p><p id="p-0123" num="0122">In one or more of the various embodiments, storage nodes, such as, storage nodes <b>702</b> may be comprised compute instance <b>704</b> and one or more storage slots, such as, storage slots <b>606</b> and storage slot <b>708</b>. In some embodiments, each storage slot may represent a specified amount of data storage capabilities that correspond to the storage capacity a storage node may contribute to the file system.</p><p id="p-0124" num="0123">In one or more of the various embodiments, storage nodes may be configured to have one or more storage slots each with known attributes. In some embodiments, storage slots may be considered analogous to physical storage device slots of a physical server. For example, a physical storage node may include one or more physical hard drives that each may be installed in a physical slot of the physical storage node. However, in some embodiments, storage slots in storage nodes such as storage node <b>602</b> may be added or removed from storage nodes without physical limitations. Though, in some cases, cloud computing environments may impose restrictions related to costs, network bandwidth, capacity limitations, or the like. In cloud computing environments, in some embodiments, virtualized compute instances may be configured to have one or more storage slots that each represent or include an allocation of storage capacity in the cloud computing environment.</p><p id="p-0125" num="0124">In one or more of the various embodiments, virtualized storage slots, such as storage slots <b>706</b> and storage slot <b>708</b> may be associated with storage volumes, such as storage volume <b>710</b>. In some embodiments, storage volumes may be data structures that file system engines employ to represent or manage data storage objects provided in cloud computing environments. In some embodiments, file system engines may be arranged to employ elevator engines, or the like, manage storage volumes. In some embodiments, storage volumes in cloud computing environments may be considered abstractions that enable file system engines to rely on the same or similar actions/operations as they employ for physical storage volumes.</p><p id="p-0126" num="0125">In one or more of the various embodiments, storage volumes, such as, storage volumes <b>706</b> or storage volume <b>708</b> may employ storage objects or storage services provided by the cloud computing environment to provide storage capacity for the virtualized storage volumes. In one or more of the various embodiments, storage objects may be interacted with via APIs or interfaces provided by the cloud computing environment.</p><p id="p-0127" num="0126">In one or more of the various embodiments, cloud computing environments may provide a variety of different types or classes or storage objects. Including one or more storage objects that closely emulate hard disk drives. In most cases, cloud computing environment offer may provide different features or characteristics depending on the type or class of storage object, such as, interaction restrictions, performance guarantees, varied APIs, varied pricing, or the like. Thus, in some embodiments, one or more storage object types may be more or less advantageous than another depending on the local circumstances or local requirements.</p><p id="p-0128" num="0127">Accordingly, in some embodiments, file system engines may be arranged to employ different types of storage objects depending on the circumstance. For example, performant high cost storage objects may be employed as to provide data storage for cache tiers while less performant lower cost storage objects may be employed for storage tiers. In some cases, this may be analogous to using physical SSDs for a cache tier and physical HDDs for a persistent storage layer.</p><p id="p-0129" num="0128">In one or more of the various embodiments, storage volumes may be comprised of one or more storage objects or storage devices, such as, storage object <b>714</b>, storage object <b>716</b>, and so on. In some embodiments, storage objects may be mass storage objects provided by cloud computing environments. In some embodiments, cloud computing environments often provide block blobs as firstclass objects that may be instantiated, accessed, released, or the like, via one or more published APIs. Accordingly, in some embodiments, file system engines may be arranged to interact with block blobs via the APIs provided by cloud computing environments. In some embodiments, the particular APIs for interacting with storage objects or other cloud computing environment objects (e.g., compute instances, tagging systems, object querying, or the like) may be considered well known to one of ordinary skill in the art. Accordingly, in some embodiments, file system engines may be arranged to employ libraries, instructions, rules, or the like, provided via configuration information to map file system operations/actions to one or more APIs provided by cloud computing environments. In some embodiments, storage objects may be considered analogous to HDD storage in that they may be employed for persistent storage rather than cache storage. And, similar to the differences between SSD storage and HDD storage, storage object may provide slower data access than storage objects that may be used for cache tiers.</p><p id="p-0130" num="0129">In one or more of the various embodiments, file system engines may be arranged to provide cache volumes that provide storage for cache tiers. Accordingly, in some embodiments, storage nodes may be arranged to include cache volumes, such as, cache volume <b>718</b>. Similar to how storage volumes may be data structures file system engines employ to manage storage objects or storage devices, cache volumes may be data structures employed for managing page blobs that provide the storage capacity for the cache volume. For example, in analogous physical systems, SSDs may be employed as cache volumes. However, cloud-based storage nodes, such as, storage node <b>702</b> may employ cache volumes based on storage objects. Note, in some cases, cloud computing environments may provide different types of storage objects such that some are more applicable to storage volumes while others may be more applicable to cache volumes depending on the local requirements or local circumstances.</p><p id="p-0131" num="0130">In one or more of the various embodiments, compute instances associated with storage volumes or cache volumes may be arranged to exchange messages or data using one or more data paths provided by cloud computing environments. The particular underlying implementation of data paths may vary depending on the cloud provider, however they may be generally considered logical data busses that enable compute instances to interact with storage volumes similar to interactions with physical storage devices. In this example, data path <b>712</b> represents the one or more cloud computing environment features (e.g., APIs) that enable processes hosted on compute instances to interact with storage volumes or cache volumes in cloud computing environments.</p><p id="p-0132" num="0131"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a logical schematic of a portion of file system <b>800</b> for distributed resource caching in accordance with one or more of the various embodiments. In this example, for some embodiments, data storage system <b>802</b> may be associated with cache volume <b>804</b>, storage volume <b>806</b>, cache engine <b>808</b>, or the like.</p><p id="p-0133" num="0132">Accordingly, in some embodiments, various storage agents, such as, storage agent <b>810</b>, storage agent <b>812</b>, storage agent <b>814</b>, or the like, may be associated with data storage system <b>802</b>. In some embodiments, data storage system <b>802</b> may be arranged to provide data storage resources for the storage agents. In some embodiments, storage agents may be associated with instances of clients of the file system.</p><p id="p-0134" num="0133">In some embodiments, multiple storage agents may be hosted on one or more storage nodes. Or, in some embodiments, each storage agent may correspond to one storage node. Also, in some embodiments, storage agents may be considered different processes or jobs running on the same or different storage nodes. In some embodiments, in cloud computing environments storage agents may be load balanced across one or more compute instances. Likewise, in conventional on-premises/physical deployments, one or more storage agents may be load balanced across one or more physical storage servers.</p><p id="p-0135" num="0134">In one or more of the various embodiments, storage agents may be associated with one or more pending storage jobs associated with one or more file system transactions for one or more clients of the file system. In this example, storage agent <b>810</b> is associated with storage job <b>816</b>, storage agent <b>812</b> is associated with storage job <b>820</b>, and so on.</p><p id="p-0136" num="0135">In one or more of the various embodiments, cache engines, such as, cache engine <b>808</b> may be arranged to allocate portions of cache volumes (e.g., portions of cache volume <b>804</b>) to the various storage agents. In this example, for some embodiments, cache allocations, such as, cache allocation <b>818</b> or cache allocation <b>822</b> represent unused or available cache storage that is allocated to storage agent <b>810</b> and storage agent <b>812</b> respectively.</p><p id="p-0137" num="0136">In some embodiments, cache allocations may be reduced as storage agents consumes their cache allocation. For example, cache allocation <b>818</b> for storage agent <b>810</b> is represented as being larger that cache allocation <b>822</b> for storage agent <b>812</b> to represent that storage agent <b>812</b> has consumed more of its allocated cache storage than storage agent <b>810</b>.</p><p id="p-0138" num="0137">In one or more of the various embodiments, cache allocations may be comprised of one or more tokens that each represent a portion of a cache volume. In this example, cache volume <b>818</b> may be arranged to represent tokens that correspond to an amount of storage space in the cache volume <b>804</b>. Accordingly, in some embodiments, each storage agent may be arranged to track the tokens in its cache allocation to determine if data associated with transactions/jobs may be stored in a cache volume. Accordingly, in some embodiments, storage agents may be arranged to monitor the amount of cache storage available to them without referring to other storage agents or the cache engines. Thus, in some embodiments, storage agents may be informed as to whether data may be sent to cache volumes without considering storage actions associated with other storage agents. In some embodiments, keeping cache allocation information local to the storage agents may result in performance improvements at least because the local cache allocation information negates a need to request cache information from the cache engine. Accordingly, the amount of communication resources (e.g., bandwidth, messages/events, or the like) consumed by storage agents may be reduced.</p><p id="p-0139" num="0138">In one or more of the various embodiments, if a storage agent determines that its corresponding cache allocation has been used, the storage agent may submit the relevant storage jobs directly to a storage volume, such as, storage volume <b>806</b>. In contrast, for some embodiments, if tokens are available in the cache allocation, the storage agent may assume there is enough space in the cache volume to store at least an amount of data represented by its current cache allocation. For example, if cache allocation <b>818</b> represents 100 MB of storage space in cache volume <b>804</b>, storage agent <b>810</b> may determine that at least a 100 MB of data may be stored in the cache volume. Note, in some embodiments, cache allocations may be data structures that track the number of tokens issued to a given storage agent.</p><p id="p-0140" num="0139">In some embodiments, storage agents may be arranged to submit jobs to a cache engine where they may be queued until cache volume space becomes available.</p><p id="p-0141" num="0140">In one or more of the various embodiments, cache engines may be arranged to issue an equivalent number of tokens to each storage agent such that each storage agent is allocated the same share/proportion of an underlying cache volume. For example, if a cache volume <b>804</b> is has of 1 TB of storage space available, each storage agent in system <b>800</b> may initially be issued cache tokens that represent 300 MB of storage.</p><p id="p-0142" num="0141">In one or more of the various embodiments, as storage agents send data to cache volume <b>804</b>, their cache allocation may be reduced proportionally. In this example, storage agent <b>812</b> is represented as having consumed much of its cache allocation. Accordingly, in this example, cache volume portion <b>824</b> represents a portion of cache volume <b>804</b> that is storing data which could include data stored by jobs/transactions associated with storage agent <b>812</b>. Likewise, in some embodiments, cache volume portion <b>826</b> may be considered to represent available/unused storage in the cache volume.</p><p id="p-0143" num="0142">In one or more of the various embodiments, cache engines may be arranged to initially allocate cache volumes evenly to the storage agents it supports. Accordingly, in this example, cache allocations of storage agent <b>810</b>, storage agent <b>812</b>, storage agents <b>814</b> correspond to cache volume portion <b>826</b>. As a storage agent consumes its cache allocation, the cache allocation may be reduced to reflect the storage space in the cache volume that may be used to store the data. Thus, here cache volume portion <b>824</b> represents actual data stored in actual storage space of cache volume <b>804</b>.</p><p id="p-0144" num="0143">Accordingly, in some embodiments, if each storage agent consumes the entirety of their respective cache allocations, the cache volume may be considered full such that subsequent jobs will be prevented from using cache volume resources. Thus, such jobs may be queued until cache volume space becomes available or serviced by directly using storage volume <b>806</b>.</p><p id="p-0145" num="0144">In some cases, if one storage agent has consumed its cache allocation, other storage agents may have cache allocation remaining. Accordingly, in some embodiments, cache engines, such as, cache engine <b>808</b> may be arranged to occasionally rebalance cache allocations to avoid starving one or more storage agents of access to cache resources. Note, rebalancing cache allocations may not increase the overall amount of cache volume storage, it reallocates the remaining to the storage agents. Thus, in some embodiments, rebalancing may take tokens from those storage agents that have tokens and give them to storage agents that have consumed more of their tokens.</p><p id="p-0146" num="0145">Accordingly, in some embodiments, a depletion threshold may be defined such that cache allocations that represent a cache free space capacity less than the depletion threshold may be considered depleted cache allocations. Likewise, in some embodiments, a non-depletion threshold may be defined such that cache allocations that represent a cache free space capacity greater than the non-depletion threshold may be considered non-depleted cache allocations. Thus, in some embodiments, cache engines may be arranged to disassociate cache tokens from non-depleted cache allocations and associate them with depleted cache allocations. In some embodiments, depletion threshold values or non-depletion threshold values may be defined based on various factors, including, cache volume capacity, transaction/job size, transaction/job rate, or the like. Also, in some embodiments, cache engines may be configured to determine depletion threshold values or non-depletion threshold values based on application type or application behavior. Accordingly, in some embodiments, cache engines may be arranged to employ rules, instructions, heuristics, or the like, provided via configuration information to account for local requirements or local circumstances.</p><p id="p-0147" num="0146">In one or more of the various embodiments, cache engines, such as cache engine <b>808</b> may be arranged to execute one or more reclaim jobs that move data from cache volumes to storage volumes, freeing up space on the cache volumes. For example, in some embodiments, cache engine <b>808</b> may be arranged to conditionally copy data from cache volume portion to storage volume <b>806</b>. Thus, in some embodiments, the cache storage freed by the reclaim jobs may be reallocated to cache allocations of storage agents.</p><p id="p-0148" num="0147">In one or more of the various embodiments, it may be advantageous for storage agents to determine cache storage availability because it may reduce the amount administrative/control messaging that may occur. For example, in some embodiments, storage agents know if they can send data to cache storage without checking if there may be room in the cache volume. Likewise, for example, storage agents may rely on their cache allocation for this information rather having to receive constant updates from the cache engine. Accordingly, in some embodiments, a storage agent knows to send data to cache volume or storage volume without having to perform additional communication or testing. In contrast, absent innovations disclosed herein, a storage agent may send data to the cache volume to only receive negative acknowledgment if there is no space in the cache volume. In some cases, this would produce more messaging that at scale may consume a prohibitive amount of communication bandwidth that may degrade the performance of the network or the file system. Also, it would be disadvantageous to exchange messages to confirm the availability of cache storage before sending data to the cache volume. Also, in some cases, absent these innovations, a single storage agent may easily consume the entire cache volume, starving other storage agents.</p><p id="p-0149" num="0148">In one or more of the various embodiments, cache engines may be arranged to employ queue <b>828</b> for queuing jobs or storage jobs that are not serviced by cache volume <b>804</b>. Accordingly, in some embodiments, storage jobs that are not serviced by cache volumes, including cache misses, may be queued with other cache jobs that may be associated with moving data from cache volume <b>804</b> to storage volume <b>806</b>.</p><p id="p-0150" num="0149"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a logical schematic of a portion of file system <b>900</b> for maintain an account of issued cache tokens for distributed resource caching in accordance with one or more of the various embodiments.</p><p id="p-0151" num="0150">In one or more of the various embodiments, file system engines running on storage nodes may be arranged to track the amount of cache tokens that may have been allocated to one or more storage agents. Accordingly, in one or more of the various embodiments, file system engines may be arranged to make determinations related to issuing cache tokens, recalling cache tokens, rebalancing cache allocations, or the like. Accordingly, in some embodiments, file system engines may be arranged to keep metrics for each storage agent that include a value representing the upper bound of the cache allocation and another value representing the total number of cache tokens that have been issued to each individual storage agent.</p><p id="p-0152" num="0151">In this example, data structures, such as data structure <b>902</b>, data structure <b>904</b>, data structure <b>906</b>, or data structure <b>908</b> may be employed to track allocation accounting information for storage agents. In this example, cache upper bound <b>910</b> may be considered to represent the upper bound of cache tokens issued to the storage agent that corresponds to storage agent <b>902</b>. Likewise, in this example, reserved cache token count <b>912</b> may represent the total number of cache tokens used by storage agent <b>902</b>.</p><p id="p-0153" num="0152">In some cases, for some embodiments, cache upper bound count and total reserved tokens may have different values because storage jobs that miss the cache may be resolved by consuming cache tokens directly rather taking them from a cache allocation.</p><p id="p-0154" num="0153">As storage jobs are committed, file system engines may be arranged to mark to consumed storage space as allocated and decrement the total reserved count for the storage agent based on the amount space consumed by the storage job. In some embodiments, file system engines may be arranged to update the cache upper bound to the minimum of the total reserve count and the current cache upper bound.</p><p id="p-0155" num="0154">For example, if a storage job is unable to be fulfilled using cache space corresponding to the storage agent's cache allocation, it may be fulfilled directly from the cache volume after space in the cache volume is reclaimed or recalled. Note, in some embodiments, storage jobs queue at the cache engine if the storage agent has no cache allocation. Thus, in this case, the space in the cache volume may be used but cache tokens will not be issued to the corresponding cache allocation.</p><p id="p-0156" num="0155">In one or more of the various embodiments, cache engines may be arranged to increment the cache upper bound count and total reserved count based each grant of cache tokens to a storage agent cache allocation. Further, in some embodiments, cache engines may be arranged to decrement cache upper bound counters if cache tokens are recalled from a storage agent. And, in some embodiments, if storage job is committed, cache engines may be arranged to decrement the total reserve count for a storage agent. In one or more of the various embodiments, cache upper bound count is determined to be the minimum of the total reserved count or cache upper bound count.</p><p id="p-0157" num="0156">For example, for some embodiments, assume that at time 1 a storage agent has a total reserved token count of 80 and a cache upper bound count of 70. At time 2, if a commit uses 15 cache tokens, total reserved tokens may be reduced to 65 (80-15) and cache upper bound may be reduced to 65 because it is the min of (70, 65). Likewise, in this example, at time 3, if a recall request for 10 cache tokens is sent to a storage agent, the cache engine immediately decrements the cache upper bound by 10 from 65 to 55, so that the cache upper bound metric in the cache engine reflects the change immediately, so that the cache engine can use that information to make an informed choice the next time it is called. Likewise, in this example, at time 4, when the recall response returns 10 cache tokens that were previously requested to be returned, total reserved tokens for the storage agent is decremented to 55 (65&#x2212;10=55). Cache upper bound remains at 55 (e.g., min(55, 55)). In some embodiments, if the cache upper bounds of one or more storage agents are zero, cache engines may be arranged to omit those storage agents from being sent recall messages. Accordingly, in some embodiments, performance may be improved by avoiding the transmission of unnecessary message. In deployments with <b>100</b><i>s </i>of storage agents, reducing administrative messaging may be advantageous because the amount of messaging bandwidth may be reduced and the compute resources required to process the messages at the storage agent may be reduced.</p><heading id="h-0010" level="2">Generalized Operations</heading><p id="p-0158" num="0157"><figref idref="DRAWINGS">FIGS. <b>10</b>-<b>14</b></figref> represent generalized operations for distributed resource caching in accordance with one or more of the various embodiments. In one or more of the various embodiments, processes <b>1000</b>, <b>1100</b>, <b>1200</b>, <b>1300</b>, and <b>1400</b> described in conjunction with <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>14</b></figref> may be implemented by or executed by one or more processors on a single network computer (or network monitoring computer), such as network computer <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In other embodiments, these processes, or portions thereof, may be implemented by or executed on a plurality of network computers, such as network computer <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In yet other embodiments, these processes, or portions thereof, may be implemented by or executed on one or more virtualized computers, such as, those in a cloud-based environment. However, embodiments are not so limited and various combinations of network computers, client computers, or the like may be utilized. Further, in one or more of the various embodiments, the processes described in conjunction with <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>14</b></figref> may perform actions for distributed resource caching in accordance with at least one of the various embodiments or architectures such as those described in conjunction with <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>9</b></figref>. Further, in one or more of the various embodiments, some or all of the actions performed by processes <b>1000</b>, <b>1100</b>, <b>1200</b>, <b>1300</b>, and <b>1400</b> may be executed in part by file system engine <b>322</b>, or cache engine <b>324</b> running on one or more processors of one or more network computers.</p><p id="p-0159" num="0158"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an overview flowchart of process <b>1000</b> for distributed resource caching in accordance with one or more of the various embodiments. After a start flowchart block, at flowchart block <b>1002</b>, in one or more of the various embodiments, cache engines may be arranged to allocate one or more cache tokens to one or more storage agents. In one or more of the various embodiments, cache engines may be arranged to provide a message to each storage agent that indicates the number of cache tokens that have been granted to their cache allocation.</p><p id="p-0160" num="0159">At block <b>1004</b>, in one or more of the various embodiments, one or more storage jobs may be assigned to one or more storage agents. In the normal operation of the file system, clients may submit various requests to the file system, some of which may correspond to storage jobs that may benefit from caching.</p><p id="p-0161" num="0160">At block <b>1006</b>, in one or more of the various embodiments, cache engines may be arranged to allocate cache volume space for storage jobs based on cache allocations associated with storage agents. Allocated space on the cache volume may be considered free space that is reserved for a given storage agent. Accordingly, in some embodiments, as storage agents use cache volume free space, their cache allocation may be depleted.</p><p id="p-0162" num="0161">At block <b>1008</b>, in one or more of the various embodiments, cache engines may be arranged to commit the storage jobs to a cache volume. In one or more of the various embodiments, if storage jobs are committed to the cache volume, the space used for the committed jobs is not free space so it is no longer considered part of the cache allocation for the storage agent. In some embodiments, eventually space on the cache volume may be reclaimed providing free space that may be allocated to storage agents.</p><p id="p-0163" num="0162">At block <b>1010</b>, in one or more of the various embodiments, cache engines may be arranged to manage cache allocations associated with the one or more storage agents. In one or more of the various embodiments, cache engines may be arranged to enforce one or more policies related to granting cache tokens to storage agents, rebalancing existing cache tokens, recalling cache tokens, or the like.</p><p id="p-0164" num="0163">Next, in one or more of the various embodiments, control may be returned to a calling process.</p><p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a flowchart of process <b>1100</b> for distributing cache tokens to cache allocations for distributed resource caching in accordance with one or more of the various embodiments. After a start flowchart block, at flowchart block <b>1102</b>, in one or more of the various embodiments, cache engines may be arranged determine the number of storage agents that may be associated with a cache volume. In one or more of the various embodiments, file system engines may be configured to support one or more storage agents. In some embodiments, there may be a defined minimum number of storage agents. In some embodiments, the number of storage agents may fluctuate depending on file system policies or local conditions.</p><p id="p-0166" num="0165">At block <b>1104</b>, in one or more of the various embodiments, cache engines may be arranged to issue cache allocation tokens to each storage agent based on free space that may be available in the cache volume. In one or more of the various embodiments, cache engines may be arranged to employ various policies for determining how to allocate cache tokens to storage agents. In some embodiments, cache engines may allocate the same amount of cache tokens to each storage agent. Alternatively, in some embodiments, cache engines may be arranged to allocate some storage agents more cache tokens than other cache tokens based on a given policy. For example, in some embodiments, one or more storage agents may be dedicated to different roles or application types that may each may have different storage requirements or storage behavior. For example, storage agents that are known to benefit less from caches may be allocated fewer or none cache tokens than other storage agents the benefit more from caching.</p><p id="p-0167" num="0166">Next, in one or more of the various embodiments, control may be returned to a calling process.</p><p id="p-0168" num="0167"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a flowchart of process <b>1200</b> for distributed resource caching in accordance with one or more of the various embodiments. After a start flowchart block, at flowchart block <b>1202</b>, in one or more of the various embodiments, a storage job may be provided to a storage agent. One or more clients of a file system may provide various requests to the file system for reading or writing data to the file system. Accordingly, in some embodiments, storage agents may interpret the requests to determine which storage resources are needed to service the request.</p><p id="p-0169" num="0168">In one or more of the various embodiments, storage agents may refer to their cache allocation to determine if the cache volume has space reserved a pending storage job. For example, a storage job may be determined to require 10 cache tokens worth of free space, accordingly, if the cache allocation for the cache allocation has 10 or more cache tokens, the storage agent may be ensured that the cache volume has sufficient free space for caching the storage job.</p><p id="p-0170" num="0169">At block <b>1204</b>, in one or more of the various embodiments, the cache engine may be arranged to provide the data associated with the storage job to the cache volume.</p><p id="p-0171" num="0170">In one or more of the various embodiments, in some cases there may not be space available in the cache volume. Accordingly, in one or more of the various embodiments, storage jobs may be queued at the cache engine until sufficient space has been reclaimed in the cache volume.</p><p id="p-0172" num="0171">At decision block <b>1206</b>, in one or more of the various embodiments, if the storage job is committed to the cache volume, control may flow to block <b>1208</b>; otherwise, control may loop back to decision block <b>1210</b> until the storage job is committed.</p><p id="p-0173" num="0172">As storage jobs are stored in the cache volume, the corresponding space in the cache volume may be considered used and unavailable until the space may be reclaimed by a reclamation job.</p><p id="p-0174" num="0173">At block <b>1208</b>, in one or more of the various embodiments, the cache engine may be arranged to update the cache allocation metrics associated with the storage agent.</p><p id="p-0175" num="0174">In one or more of the various embodiments, cache engines may employ cache allocation metrics to determine if recalls, rebalancing, or cache token grants should occur.</p><p id="p-0176" num="0175">In one or more of the various embodiments, if a job is committed the total reserved token count for the storage agent may be reduced based on the number of cache tokens consumed by the storage job. Note, in some embodiments, additional events, such as, cache token recalls, cache allocation rebalancing, or the like, may result in modifications/updates to the cache metrics for storage agents.</p><p id="p-0177" num="0176">At block <b>1210</b>, in one or more of the various embodiments, optionally, cache engines may be arranged to execute one or more reclamation jobs to reclaim free space for the cache volumes. In one or more of the various embodiments, cache engines may be arranged to monitor the amount of free space available in a cache volume. Accordingly, in some embodiments, if the available free space is less than a capacity threshold value, the cache engine may begin executing reclamation jobs that move data from the cache volume to a storage volume, or otherwise evict data from the cache volume to free space in the cache volume.</p><p id="p-0178" num="0177">In some embodiments, the underlying cache eviction policy that may govern how data is evicted from a cache volume may vary and for brevity and clarity cache eviction policy is not described herein. One of ordinary skill in the art will appreciate that different eviction policies may be employed without departing from the scope of the innovations described herein.</p><p id="p-0179" num="0178">In one or more of the various embodiments, cache engines may be arranged to grant cache tokens to one or more cache allocation as free space in the cache volume may be reclaimed. In some embodiments, cache tokens that represent reclaimed free space may be included in token pool. In some embodiments, cache engines may be arranged to grant tokens from the token pool to one or more cache allocations.</p><p id="p-0180" num="0179">In some embodiments, granting tokens may be deferred until there are enough cache tokens to grant a minimum amount of tokens to one or more cache allocations. For example, a minimum grant size may be defined based on metrics or factors such as, average transaction/job size, cache volume, transaction/job rate, numbers or storage agents, system/network utilization, or the like. In some embodiments, the minimum grant size may be determined dynamically as the file system operates. In other embodiments, the minimum grant size may be static and sent at initialization/start-up of the file system. Accordingly, in some embodiments, cache engine may be arranged to determine grant size or other grant policies based on rules, instructions, parameter values, threshold values, or the like, provided via configuration information to account for local circumstances or local requirements.</p><p id="p-0181" num="0180">In one or more of the various embodiments, grant policies may be configured to prioritize granting tokens to depleted cache allocations over non-depleted cache allocations. As described above, depletion thresholds or non-depletion thresholds may be employed to determine the cache allocations that are depleted and to determine the cache allocations that are considered non-depleted.</p><p id="p-0182" num="0181">Note, this block is indicated as being optional because reclamation policy may determine if reclamation jobs may be executed.</p><p id="p-0183" num="0182">Next, in one or more of the various embodiments, control may be returned to a calling process.</p><p id="p-0184" num="0183"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a flowchart of process <b>1300</b> for distributed resource caching in accordance with one or more of the various embodiments. After a start flowchart block, at flowchart block <b>1302</b>, in one or more of the various embodiments, cache engines may be arranged to execute one or more reclaim jobs for one or more cache volumes. In one or more of the various embodiments, data stored in the cache volume may eventually get stored on a storage volume. In one or more of the various embodiments, file system engines or cache engines may be arranged to apply various cache reclamation policies for selecting which data to move/evict from the cache volume. Likewise, in some embodiments, file system engines or cache engines may be arranged to apply various policies to determine the cadence or periodicity of reclaim jobs. Accordingly, in some embodiments, file system engines or cache engines may employ rules, instructions, conditions, or the like, provided by configuration information to determine the specific reclamation to execute. However, one of ordinary skill in the art will appreciate that the execution of a reclamation job will result in some amount of free space in the cache volume. For brevity and clarity details of cache policies are omitted here.</p><p id="p-0185" num="0184">At decision block <b>1304</b>, in one or more of the various embodiments, if the one or more reclaim jobs are completed, control may flow to decision block <b>1306</b>; otherwise, control may loop back to block <b>1302</b>.</p><p id="p-0186" num="0185">In one or more of the various embodiments, cache engines may be arranged to prioritize the execution of reclamation jobs but there may be periods of time when there are no pending reclamation jobs. In some embodiments, cache engines may be arranged to perform rebalancing or recall operations while reclamation jobs may be idle.</p><p id="p-0187" num="0186">As described above, cache engines or file system engines may be arranged to maintain a queue of reclamation jobs that may be monitored to determine if there may be pending reclamation jobs.</p><p id="p-0188" num="0187">At decision block <b>1306</b>, in one or more of the various embodiments, if the cache engine determines cache tokens should be recalled from cache allocations, control may flow to block <b>1308</b>; otherwise, control may be returned to a calling process.</p><p id="p-0189" num="0188">In one or more of the various embodiments, cache engines may be arranged to employ one or more rules, instructions, conditions, or the like, provided from configuration information to determine policies/conditions for determining if cache tokens should be recalled. For example, a recall may be triggered if the free space in the cache volume drops below a threshold value.</p><p id="p-0190" num="0189">At block <b>1308</b>, in one or more of the various embodiments, cache engines may be arranged to recall cache tokens from the one or more storage agents. In one or more of the various embodiments, cache engines may be arranged to send recall messages to each storage agent that is associated with a cache upper bound that may be greater than zero. In some embodiments, recall messages may include an upper bound, such as, recall up to 100 cache tokens. In other cases, for some embodiments, recall messages may request that all cache tokens be recalled.</p><p id="p-0191" num="0190">Accordingly, in one or more of the various embodiments, storage agents may respond to recall messages and report the number of cache tokens that were returned. For example, if a storage agent has a cache allocation that includes 100 cache tokens, its response to the recall message may indicate the number of cache tokens that may now be considered recalled. Note, actual storage is not exchanged, rather a count of the allocation or reservation of tokens for each storage agent.</p><p id="p-0192" num="0191">At block <b>1310</b>, in one or more of the various embodiments, optionally, cache engines may be arranged to allocate the free space associated with the recalled cache tokens to the one or more storage agents via cache allocations.</p><p id="p-0193" num="0192">In one or more of the various embodiments, cache engines may determine that the pool of recalled tokens is sufficient to allocate them to cache allocations of one or more storage agents. For example, for some embodiments if 1600 cache tokens are in the recall pool, a cache engine may be arranged to issue of portion of the 1600 cache tokens to each storage agent. For example, in some embodiments, if the number of cache tokens in the recall pool exceeds a threshold value, cache engines may be arranged to allocate them to storage agents. Also, in some embodiments, at or near the time of a recall, a new reclamation job may have started and finished providing additional free space that may be allocated.</p><p id="p-0194" num="0193">For example, for some embodiments, cache allocations may be arranged to defer allocations until there is enough cache tokens to fill the cache allocation for each storage agent to a minimum amount. Accordingly, in some embodiments, recall/allocate thrashing may be reduced.</p><p id="p-0195" num="0194">One of ordinary skill in the art will appreciate that there may be a variety of policies that may be enforced related to determining if recalled cache tokens should be reallocated to storage agent cache allocations. Accordingly, in some embodiments, cache engines may be arranged to employ rules, instructions, threshold values, policy parameters, or the like, provided via configuration information to account for local circumstances or local requirements.</p><p id="p-0196" num="0195">Note, this block is indicated as being optional because whether recalled cache tokens are allocated to storage agents via storage jobs may depend on the current allocation policies or conditions.</p><p id="p-0197" num="0196">At block <b>1312</b>, in one or more of the various embodiments, optionally, cache engines may be arranged to allocate the free space associated with the recalled cache tokens to the one or more storage agents via storage jobs.</p><p id="p-0198" num="0197">In one or more of the various embodiments, rather than allocating the recalled cache token pool to the cache allocations of storage agents, cache engines may allocate cache tokens on a per storage job basis as each storage job is executed. Accordingly, in one or more of the various embodiments, if a recall is executed, storage jobs may be queued at the cache engine or cache volume and cache tokens may be issued to them in turn.</p><p id="p-0199" num="0198">Note, this block is indicated as being optional because whether recalled cache tokens are allocated to storage agents via cache allocations may depend on the current allocation policies or conditions.</p><p id="p-0200" num="0199">Next, in one or more of the various embodiments, control may be returned to a calling process.</p><p id="p-0201" num="0200"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a flowchart of process <b>1400</b> for determining accounting metrics for distributed resource caching in accordance with one or more of the various embodiments. After a start flowchart block, at flowchart block <b>1402</b>, in one or more of the various embodiments, cache engines may be arranged to initialize accounting information and grant allocation tokens to one or more storage agents.</p><p id="p-0202" num="0201">In one or more of the various embodiments, accounting for cache allocation may be performed by cache engines rather than storage agents. Also, in some embodiments, to account for difference between allocated tokens represented by a storage agent's cache allocation and the actual number of tokens reserved for a storage agent, cache engine may be arranged to track at least two metrics for storage agents. One metric may be the total number of cache tokens reserved for the storage agent. In some embodiments, this metric may be a combination of cache tokens allocated to the cache allocation of a storage agent and other cache tokens that may be temporarily reserved for the storage agent.</p><p id="p-0203" num="0202">In one or more of the various embodiments, accounting information may include a total reserved token count and a cache upper bound value. Accordingly, in some embodiments, at initialization, the reserved token count and the cache upped bound will be the same. For example, in some embodiments, if a cache engine initializes a storage agent with 1400 cache tokens, its cache upper bound will be 1400 tokens and its total reserved count will be 1400 tokens.</p><p id="p-0204" num="0203">At decision block <b>1404</b>, in one or more of the various embodiments, if a cache engine grants new cache tokens to one or more storage agents, control may flow to block <b>1406</b>; otherwise, control may flow to decision block <b>1408</b>.</p><p id="p-0205" num="0204">In one or more of the various embodiments, cache engines may be arranged to conditionally/selectively grant cache token to the cache allocations of one or more storage agents. In some embodiments, granting cache tokens explicitly allocates cache tokens to the cache allocations of one or more storage agents.</p><p id="p-0206" num="0205">In one or more of the various embodiments, cache engines may be arranged to employ one or more rules, conditions, conditions, threshold values, or the like, provided by configuration information to determine if cache token grants may occur.</p><p id="p-0207" num="0206">In one or more of the various embodiments, granted cache tokens may come from cache volume space that has not been allocated to other storage agents. In some embodiments, the execution of reclaim jobs may be free cache storage space that may be granted to one or more storage agents. Also, in some embodiments, granted cache tokens may come from a pool of recalled cache tokens as part of a rebalancing operation.</p><p id="p-0208" num="0207">At block <b>1406</b>, in one or more of the various embodiments, cache engines may be arranged to increment the reserved token counter for the one or more storage agents and the cache upper bound based on the amount of tokens granted.</p><p id="p-0209" num="0208">In one or more of the various embodiments, granted cache tokens are explicitly allocated to the cache allocation of the receiving storage agents. Accordingly, in some embodiments, cache engine may be arranged to increment the cache upper bound and the total reserved counter for the receiving storage agents. For example, in some embodiments, if a storage agent has a cache upper bound of 100 tokens and a total resource count of 300 tokens, granting 100 cache tokens will result in a cache upper bound of 200 cache token and a total reserve count of 400 cache tokens.</p><p id="p-0210" num="0209">At decision block <b>1408</b>, in one or more of the various embodiments, if a storage job for a storage agent is committed the cache volume, control may flow to block <b>1410</b>; otherwise, control may flow to decision block <b>1412</b>.</p><p id="p-0211" num="0210">In one or more of the various embodiments, the number of cache allocations and reserved cache tokens associated with a storage agent represent empty space in the cache volume that is reserved for storing data associated for storage jobs for the storage agent. If the data is used by the storage agent (via execution of its storage jobs), the corresponding empty space is consumed and longer available for use by the storage agent.</p><p id="p-0212" num="0211">At block <b>1410</b>, in one or more of the various embodiments, cache engines may be arranged to decrement the total reserve count and determine the cache upper bound.</p><p id="p-0213" num="0212">In one or more of the various embodiments, cache tokens reserved for a storage agent represent space on the cache volume that the storage agent is guaranteed to have available for storing data in the cache volume.</p><p id="p-0214" num="0213">Accordingly, in some embodiments, as storage job are committed to the cache volume that space is unavailable for storing other data&#x2014;either for the original storage agent or other storage agents. Thus, in some embodiments, each commit decrements the total reserve count for the storage agent. In some cases, the cache tokens used for committing the storage job may come from the cache allocation of a storage agent but in some cases, the cache tokens may be issued directly from free space in the cache volume or a pool of recall cache tokens.</p><p id="p-0215" num="0214">In one or more of the various embodiments, cache engines may be arranged to determine the new cache upper bound by determine the minimum of the total reserved count and the current cache upper bound. For example, if the current total reserve count is 100 and the current cache upper bound is 70, committing a storage job that consumes 80 cache tokens results in a new total reserve count of 20 (100&#x2212;80) and a cache upper bound of 20 (min(70, 20)). This result illustrates that a cache upper bound will not exceed a total reserve count.</p><p id="p-0216" num="0000">At decision block <b>1412</b>, in one or more of the various embodiments, if a cache engine executes a recall, control may flow to block <b>1414</b>; otherwise, control may be returned to a calling process.</p><p id="p-0217" num="0215">In some embodiments, cache engines may be arranged to selectively/conditionally recall cache tokens from storage agent cache allocations. Typically, in some embodiments, recall may be triggered if there is not enough free space in the cache volume to grant cache tokens to cache allocations. If this is the case, one or more storage agents may already have empty cache allocations.</p><p id="p-0218" num="0216">In some embodiments, cache engines may be arranged to exclude storage agents that have cache upper bound of zero from recall messaging to reduce unnecessary message traffic. Sending recall messages to storage agents associated with zero-valued cache upper bound may be unnecessary because such storage agents do not have any cache token to be recalled.</p><p id="p-0219" num="0217">In one or more of the various embodiments, cache engines may be arranged to send recall messages to storage agent that result is tokens from their cache allocations being recalled to the cache engine. In one or more of the various embodiments, cache engines may be arranged to issued recall messages if one or more cache allocations for storage agents fall below a defined threshold value.</p><p id="p-0220" num="0218">At block <b>1414</b>, in one or more of the various embodiments, cache engines may be arranged to decrement the total reserved count and determine the cache upper bound value.</p><p id="p-0221" num="0219">In some embodiments, cache engines may be decrement number of cache token recalled from the total reserved count. Then the new cache upper bound may be determined to be the minimum of the &#x2018;old&#x2019; cache upper bound and the new total reserved count.</p><p id="p-0222" num="0220">For example, if a storage agent has a total reserved count of 100 and a cache upper bound of 100, a complete recall will result in a new total reserved count of 0 and a cache upper bound of 0.</p><p id="p-0223" num="0221">Also, for example, if the storage agent has a total reserved count of 120 and a cache upper bound of 100, a 100 cache token recall will result in a new total reserved count of 20 (120&#x2212;100) and a cache upper bound of 0 (100&#x2212;100). The cache engine can decrement the cache upper bound by 100 because a recall is always for tokens in the cache.</p><p id="p-0224" num="0222">Also, for example, if the storage agent has a total reserved count of 120 and a cache upper bound of 10, a 100 cache token recall will result in a new total reserved count of 20 and a cache upper bound of 10.</p><p id="p-0225" num="0223">As described above, having a total reserved count that is greater than cache upper bound may occur because a storage agent has been issued cache tokens when the storage job is at the cache engine. Further, in some embodiments, a cache engine may be arranged to provide a recall response that supplies less cache tokens than requested. In some embodiments, this may happen if more than one storage job for the same storage agent may be running concurrently with a recall request, and one or more of the concurrent storage jobs consumed cache allocation between the time when the cache engine sent the recall message and the storage agent received the recall message. In this case, if the cache engine receives the recall response, the cache engine decrements the total reserved count by the actual number of cache tokens returned instead of by the number requested.</p><p id="p-0226" num="0224">Next, in one or more of the various embodiments, control may be returned to a calling process.</p><p id="p-0227" num="0225">It will be understood that each block in each flowchart illustration, and combinations of blocks in each flowchart illustration, can be implemented by computer program instructions. These program instructions may be provided to a processor to produce a machine, such that the instructions, which execute on the processor, create means for implementing the actions specified in each flowchart block or blocks. The computer program instructions may be executed by a processor to cause a series of operational steps to be performed by the processor to produce a computer-implemented process such that the instructions, which execute on the processor, provide steps for implementing the actions specified in each flowchart block or blocks. The computer program instructions may also cause at least some of the operational steps shown in the blocks of each flowchart to be performed in parallel. Moreover, some of the steps may also be performed across more than one processor, such as might arise in a multi-processor computer system. In addition, one or more blocks or combinations of blocks in each flowchart illustration may also be performed concurrently with other blocks or combinations of blocks, or even in a different sequence than illustrated without departing from the scope or spirit of the invention.</p><p id="p-0228" num="0226">Accordingly, each block in each flowchart illustration supports combinations of means for performing the specified actions, combinations of steps for performing the specified actions and program instruction means for performing the specified actions. It will also be understood that each block in each flowchart illustration, and combinations of blocks in each flowchart illustration, can be implemented by special purpose hardware based systems, which perform the specified actions or steps, or combinations of special purpose hardware and computer instructions. The foregoing example should not be construed as limiting or exhaustive, but rather, an illustrative use case to show an implementation of at least one of the various embodiments of the invention.</p><p id="p-0229" num="0227">Further, in one or more embodiments (not shown in the figures), the logic in the illustrative flowcharts may be executed using an embedded logic hardware device instead of a CPU, such as, an Application Specific Integrated Circuit (ASIC), Field Programmable Gate Array (FPGA), Programmable Array Logic (PAL), or the like, or combination thereof. The embedded logic hardware device may directly execute its embedded logic to perform actions. In one or more embodiments, a microcontroller may be arranged to directly execute its own embedded logic to perform actions and access its own internal memory and its own external Input and Output Interfaces (e.g., hardware pins or wireless transceivers) to perform actions, such as System On a Chip (SOC), or the like.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for managing data in a file system over a network using one or more processors that execute instructions to perform actions, comprising:<claim-text>providing the file system that includes one or more cache volumes and one or more agents that are associated with one or more clients of the file system;</claim-text><claim-text>determining a cache allocation for each of the agents based on a capacity of the one or more cache volumes and a number of the one or more agents, wherein each of the cache allocations is associated with one or more tokens that each of the cache allocations represents a reserved portion of free space in the one or more cache volumes, and wherein distribution of each of the cache allocations is based on one or more storage jobs that are assigned to each of the one or more agents, and wherein the one or more storage jobs are provided to the one or more agents;</claim-text><claim-text>storing each of the data associated with the one or more storage jobs in the one or more cache volumes;</claim-text><claim-text>reducing the cache allocation for each of the agents based on the data stored for each agent;</claim-text><claim-text>determining one or more depleted cache allocations and one or more non-depleted cache allocations based on one or more allocation metrics, wherein each of the depleted cache allocations has a remaining capacity that is less than a depletion threshold and each of the non-depleted cache allocations has a remaining capacity that is greater than a non-depletion threshold;</claim-text><claim-text>in response to determining the one or more depleted cached allocations, disassociating one or more portions of the disassociated one or more tokens associated with the non-depleted cache allocations, wherein the one or more portions of the one or more disassociated tokens are associated with the one or more determined depleted cache allocations;</claim-text><claim-text>in response to determining a recall for one or more reserved portions of the free space, recalling the one or more tokens associated with each cache allocation that represents the one or more recalled reserved portions of the free space, wherein the one or more storage jobs are queued at the one or more cache volumes to receive the one or more recalled tokens in turn; and</claim-text><claim-text>storing other data associated with one or more other jobs in the one or more depleted cache allocations in the cache volumes, wherein the other data is stored in the reserved portion of the one or more cache volumes previously reserved for the one or more non-depleted cache allocations.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein storing the data associated with the one or more storage jobs, further comprises:<claim-text>determining one of the agents associated with the one or more storage jobs; and</claim-text><claim-text>in response to a capacity of the determined cache allocation associated with the one of the agents being equal to or greater than an amount of the data associated with the one or more storage jobs, storing the data in the one or more cache volumes and consuming a portion of the one or more tokens associated with the determined cache allocation of the one of the agents based on the amount of the data.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein storing the data associated with the one or more storage jobs, further comprises:<claim-text>determining the one of the agents associated with the one or more storage jobs; and</claim-text><claim-text>in response to the amount of the data associated with the one or more storage jobs exceeding a capacity of the determined cache allocation associated with the one of the agents, queuing the one or more storage jobs at the one or more cache volumes until additional free space is provided on the one or more cache volumes.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>in response to an aggregate total of the tokens associated with the one or more cache allocations falling below a threshold value, performing further actions, including:<claim-text>providing a recall message to each of the agents associated with a cache allocation that is associated with one or more un-consumed tokens;</claim-text><claim-text>generating a token pool at the one or more cache volumes based on a recall of the one or more un-consumed tokens;</claim-text><claim-text>in response to a number of tokens in the token pool exceeding a token pool threshold value, granting a portion of the tokens in the token pool to each of the agents, wherein the determined cache allocation for each of the agents is updated based on the portion of the tokens; and</claim-text><claim-text>in response to the number of tokens in the token pool subceeds the token pool threshold value, storing the data associated with the one or more storage jobs in the one or more cache volumes, wherein a portion of the one or more un-consumed tokens in the token pool are consumed based on the data associated with the one or more stored storage jobs.</claim-text></claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>providing one or more reclamation jobs that reclaim space on the one or more cache volumes based on moving cached data to one or more storage volumes; and</claim-text><claim-text>in response to an amount of reclaimed space on the one or more cache volumes exceeding a threshold value, granting one or more other tokens associated with the reclaimed space to the one or more depleted cache allocations.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining a cache upper bound for each of the agents based on the determined cache allocation for each of the agents;</claim-text><claim-text>determining a total reserved space for each of the agents based on one or more of the cache allocations for each of the agents, or a number of tokens issued from a token pool to each of the agents; and</claim-text><claim-text>updating the one or more allocation metrics based on the cache upper bound and the total reserved space.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein reducing the cache allocation for each of the agents based on the data stored for each of the agents, further comprises:<claim-text>reserving space on the one or more cache volumes based on a number of the tokens associated with the one or more storage jobs; and</claim-text><claim-text>in response to storing the data on the one or more cache volumes, performing further actions, including:<claim-text>committing the data associated with the one or more storage jobs when the data is stored on the one or more cache volumes; and</claim-text><claim-text>reducing the cache allocation of each of the agents based on the data that is committed to the one or more cache volumes.</claim-text></claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A system for managing data in a file system comprising:<claim-text>a network computer, comprising:<claim-text>a memory that stores at least instructions; and</claim-text><claim-text>one or more processors that execute instructions that perform actions, including:<claim-text>providing the file system that includes one or more cache volumes and one or more agents that are associated with one or more clients of the file system;</claim-text><claim-text>determining a cache allocation for each of the agents based on a capacity of the one or more cache volumes and a number of the one or more agents, wherein each of the cache allocations is associated with one or more tokens that each of the cache allocations represents a reserved portion of free space in the one or more cache volumes, and wherein distribution of each of the cache allocations is based on one or more storage jobs that are assigned to each of the one or more agents, and wherein the one or more storage jobs are provided to the one or more agents;</claim-text><claim-text>storing each of the data associated with the one or more storage jobs in the one or more cache volumes;</claim-text><claim-text>reducing the cache allocation for each of the agents based on the data stored for each agent;</claim-text><claim-text>determining one or more depleted cache allocations and one or more non-depleted cache allocations based on one or more allocation metrics, wherein each of the depleted cache allocations has a remaining capacity that is less than a depletion threshold and each of the non-depleted cache allocations has a remaining capacity that is greater than a non-depletion threshold;</claim-text><claim-text>in response to determining the one or more depleted cached allocations, disassociating one or more portions of the disassociated one or more tokens associated with the non-depleted cache allocations, wherein the one or more portions of the one or more disassociated tokens are associated with the one or more determined depleted cache allocations;</claim-text><claim-text>in response to determining a recall for one or more reserved portions of the free space, recalling the one or more tokens associated with each cache allocation that represents the one or more recalled reserved portions of the free space, wherein the one or more storage jobs are queued at the one or more cache volumes to receive the one or more recalled tokens in turn; and</claim-text><claim-text>storing other data associated with one or more other jobs in the one or more depleted cache allocations in the cache volumes, wherein the other data is stored in the reserved portion of the one or more cache volumes previously reserved for the one or more non-depleted cache allocations; and</claim-text></claim-text></claim-text><claim-text>one or more client computers, comprising:<claim-text>a memory that stores at least instructions; and</claim-text><claim-text>one or more processors that execute instructions that perform actions, including, providing one or more of the one or more storage jobs.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein storing the data associated with the one or more storage jobs, further comprises:<claim-text>determining one of the agents associated with the one or more storage jobs; and</claim-text><claim-text>in response to a capacity of the determined cache allocation associated with the one of the agents being equal to or greater than an amount of the data associated with the one or more storage jobs, storing the data in the one or more cache volumes and consuming a portion of the one or more tokens associated with the determined cache allocation of the one of the agents based on the amount of the data.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein storing the data associated with the one or more storage jobs, further comprises:<claim-text>determining the one of the agents associated with the one or more storage jobs; and</claim-text><claim-text>in response to the amount of the data associated with the one or more storage jobs exceeding a capacity of the determined cache allocation associated with the one of the agents, queuing the one or more storage jobs at the one or more cache volumes until additional free space is provided on the one or more cache volumes.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>in response to an aggregate total of the tokens associated with the one or more cache allocations falling below a threshold value, performing further actions, including:<claim-text>providing a recall message to each of the agents associated with a cache allocation that is associated with one or more un-consumed tokens;</claim-text><claim-text>generating a token pool at the one or more cache volumes based on a recall of the one or more un-consumed tokens;</claim-text><claim-text>in response to a number of tokens in the token pool exceeding a token pool threshold value, granting a portion of the tokens in the token pool to each of the agents, wherein the determined cache allocation for each of the agents is updated based on the portion of the tokens; and</claim-text><claim-text>in response to the number of tokens in the token pool subceeds the token pool threshold value, storing the data associated with the one or more storage jobs in the one or more cache volumes, wherein a portion of the one or more un-consumed tokens in the token pool are consumed based on the data associated with the one or more stored storage jobs.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>providing one or more reclamation jobs that reclaim space on the one or more cache volumes based on moving cached data to one or more storage volumes; and</claim-text><claim-text>in response to an amount of reclaimed space on the one or more cache volumes exceeding a threshold value, granting one or more other tokens associated with the reclaimed space to the one or more depleted cache allocations.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>determining a cache upper bound for each of the agents based on the determined cache allocation for each of the agents;</claim-text><claim-text>determining a total reserved space for each of the agents based on one or more of the cache allocations for each of the agents, or a number of tokens issued from a token pool to each of the agents; and</claim-text><claim-text>updating the one or more allocation metrics based on the cache upper bound and the total reserved space.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein reducing the cache allocation for each of the agents based on the data stored for each of the agents, further comprises:<claim-text>reserving space on the one or more cache volumes based on a number of the tokens associated with the one or more storage jobs; and</claim-text><claim-text>in response to storing the data on the one or more cache volumes, performing further actions, including:<claim-text>committing the data associated with the one or more storage jobs when the data is stored on the one or more cache volumes; and</claim-text><claim-text>reducing the cache allocation of each of the agents based on the data that is committed to the one or more cache volumes.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A processor readable non-transitory storage media that includes instructions for managing data in a file system over a network, wherein execution of the instructions by one or more processors on one or more network computers performs actions, comprising:<claim-text>providing the file system that includes one or more cache volumes and one or more agents that are associated with one or more clients of the file system;</claim-text><claim-text>determining a cache allocation for each of the agents based on a capacity of the one or more cache volumes and a number of the one or more agents, wherein each of the cache allocations is associated with one or more tokens that each of the cache allocations represents a reserved portion of free space in the one or more cache volumes, and wherein distribution of each of the cache allocations is based on one or more storage jobs that are assigned to each of the one or more agents, and wherein the one or more storage jobs are provided to the one or more agents;</claim-text><claim-text>storing each of the data associated with the one or more storage jobs in the one or more cache volumes;</claim-text><claim-text>reducing the cache allocation for each of the agents based on the data stored for each agent;</claim-text><claim-text>determining one or more depleted cache allocations and one or more non-depleted cache allocations based on one or more allocation metrics, wherein each of the depleted cache allocations has a remaining capacity that is less than a depletion threshold and each of the non-depleted cache allocations has a remaining capacity that is greater than a non-depletion threshold;</claim-text><claim-text>in response to determining the one or more depleted cached allocations, disassociating one or more portions of the disassociated one or more tokens associated with the non-depleted cache allocations, wherein the one or more portions of the one or more disassociated tokens are associated with the one or more determined depleted cache allocations;</claim-text><claim-text>in response to determining a recall for one or more reserved portions of the free space, recalling the one or more tokens associated with each cache allocation that represents the one or more recalled reserved portions of the free space, wherein the one or more storage jobs are queued at the one or more cache volumes to receive the one or more recalled tokens in turn; and</claim-text><claim-text>storing other data associated with one or more other jobs in the one or more depleted cache allocations in the cache volumes, wherein the other data is stored in the reserved portion of the one or more cache volumes previously reserved for the one or more non-depleted cache allocations.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The processor readable non-transitory storage media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein storing the data associated with the one or more storage jobs, further comprises:<claim-text>determining one of the agents associated with the one or more storage jobs; and</claim-text><claim-text>in response to a capacity of the determined cache allocation associated with the one of the agents being equal to or greater than an amount of the data associated with the one or more storage jobs, storing the data in the one or more cache volumes and consuming a portion of the one or more tokens associated with the determined cache allocation of the one of the agents based on the amount of the data.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The processor readable non-transitory storage media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein storing the data associated with the one or more storage jobs, further comprises:<claim-text>determining the one of the agents associated with the one or more storage jobs; and</claim-text><claim-text>in response to the amount of the data associated with the one or more storage jobs exceeding a capacity of the determined cache allocation associated with the one of the agents, queuing the one or more storage jobs at the one or more cache volumes until additional free space is provided on the one or more cache volumes.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The processor readable non-transitory storage media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>in response to an aggregate total of the tokens associated with the one or more cache allocations falling below a threshold value, performing further actions, including:<claim-text>providing a recall message to each of the agents associated with a cache allocation that is associated with one or more un-consumed tokens;</claim-text><claim-text>generating a token pool at the one or more cache volumes based on a recall of the one or more un-consumed tokens;</claim-text><claim-text>in response to a number of tokens in the token pool exceeding a token pool threshold value, granting a portion of the tokens in the token pool to each of the agents, wherein the determined cache allocation for each of the agents is updated based on the portion of the tokens; and</claim-text><claim-text>in response to the number of tokens in the token pool subceeds the token pool threshold value, storing the data associated with the one or more storage jobs in the one or more cache volumes, wherein a portion of the one or more un-consumed tokens in the token pool are consumed based on the data associated with the one or more stored storage jobs.</claim-text></claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The processor readable non-transitory storage media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>providing one or more reclamation jobs that reclaim space on the one or more cache volumes based on moving cached data to one or more storage volumes; and</claim-text><claim-text>in response to an amount of reclaimed space on the one or more cache volumes exceeding a threshold value, granting one or more other tokens associated with the reclaimed space to the one or more depleted cache allocations.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The processor readable non-transitory storage media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>determining a cache upper bound for each of the agents based on the determined cache allocation for each of the agents;</claim-text><claim-text>determining a total reserved space for each of the agents based on one or more of the cache allocations for each of the agents, or a number of tokens issued from a token pool to each of the agents; and</claim-text><claim-text>updating the one or more allocation metrics based on the cache upper bound and the total reserved space.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The processor readable non-transitory storage media of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein reducing the cache allocation for each of the agents based on the data stored for each of the agents, further comprises:<claim-text>reserving space on the one or more cache volumes based on a number of the tokens associated with the one or more storage jobs; and</claim-text><claim-text>in response to storing the data on the one or more cache volumes, performing further actions, including:<claim-text>committing the data associated with the one or more storage jobs when the data is stored on the one or more cache volumes; and</claim-text><claim-text>reducing the cache allocation of each of the agents based on the data that is committed to the one or more cache volumes.</claim-text></claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. A network computer for managing data in a file system, comprising:<claim-text>a memory that stores at least instructions; and</claim-text><claim-text>one or more processors that execute instructions that perform actions, including:<claim-text>providing the file system that includes one or more cache volumes and one or more agents that are associated with one or more clients of the file system;</claim-text></claim-text></claim-text><claim-text>determining a cache allocation for each of the agents based on a capacity of the one or more cache volumes and a number of the one or more agents, wherein each of the cache allocations is associated with one or more tokens that each of the cache allocations represents a reserved portion of free space in the one or more cache volumes, and wherein distribution of each of the cache allocations is based on one or more storage jobs that are assigned to each of the one or more agents, and wherein the one or more storage jobs are provided to the one or more agents;<claim-text>storing each of the data associated with the one or more storage jobs in the one or more cache volumes;</claim-text><claim-text>reducing the cache allocation for each of the agents based on the data stored for each agent;</claim-text><claim-text>determining one or more depleted cache allocations and one or more non-depleted cache allocations based on one or more allocation metrics, wherein each of the depleted cache allocations has a remaining capacity that is less than a depletion threshold and each of the non-depleted cache allocations has a remaining capacity that is greater than a non-depletion threshold;</claim-text><claim-text>in response to determining the one or more depleted cached allocations, disassociating one or more portions of the disassociated one or more tokens associated with the non-depleted cache allocations, wherein the one or more portions of the one or more disassociated tokens are associated with the one or more determined depleted cache allocations;</claim-text><claim-text>in response to determining a recall for one or more reserved portions of the free space, recalling the one or more tokens associated with each cache allocation that represents the one or more recalled reserved portions of the free space, wherein the one or more storage jobs are queued at the one or more cache volumes to receive the one or more recalled tokens in turn; and</claim-text><claim-text>storing other data associated with one or more other jobs in the one or more depleted cache allocations in the cache volumes, wherein the other data is stored in the reserved portion of the one or more cache volumes previously reserved for the one or more non-depleted cache allocations.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The network computer of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein storing the data associated with the one or more storage jobs, further comprises:<claim-text>determining one of the agents associated with the one or more storage jobs; and</claim-text><claim-text>in response to a capacity of the determined cache allocation associated with the one of the agents being equal to or greater than an amount of the data associated with the one or more storage jobs, storing the data in the one or more cache volumes and consuming a portion of the one or more tokens associated with the determined cache allocation of the one of the agents based on the amount of the data.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The network computer of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein storing the data associated with the one or more storage jobs, further comprises:<claim-text>determining the one of the agents associated with the one or more storage jobs; and</claim-text><claim-text>in response to the amount of the data associated with the one or more storage jobs exceeding a capacity of the determined cache allocation associated with the one of the agents, queuing the one or more storage jobs at the one or more cache volumes until additional free space is provided on the one or more cache volumes.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The network computer of <claim-ref idref="CLM-00022">claim 22</claim-ref>, further comprising:<claim-text>in response to an aggregate total of the tokens associated with the one or more cache allocations falling below a threshold value, performing further actions, including:<claim-text>providing a recall message to each of the agents associated with a cache allocation that is associated with one or more un-consumed tokens;</claim-text><claim-text>generating a token pool at the one or more cache volumes based on a recall of the one or more un-consumed tokens;</claim-text><claim-text>in response to a number of tokens in the token pool exceeding a token pool threshold value, granting a portion of the tokens in the token pool to each of the agents, wherein the determined cache allocation for each of the agents is updated based on the portion of the tokens; and</claim-text><claim-text>in response to the number of tokens in the token pool subceeds the token pool threshold value, storing the data associated with the one or more storage jobs in the one or more cache volumes, wherein a portion of the one or more un-consumed tokens in the token pool are consumed based on the data associated with the one or more stored storage jobs.</claim-text></claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The network computer of <claim-ref idref="CLM-00022">claim 22</claim-ref>, further comprising:<claim-text>providing one or more reclamation jobs that reclaim space on the one or more cache volumes based on moving cached data to one or more storage volumes; and</claim-text><claim-text>in response to an amount of reclaimed space on the one or more cache volumes exceeding a threshold value, granting one or more other tokens associated with the reclaimed space to the one or more depleted cache allocations.</claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The network computer of <claim-ref idref="CLM-00022">claim 22</claim-ref>, further comprising:<claim-text>determining a cache upper bound for each of the agents based on the determined cache allocation for each of the agents;</claim-text><claim-text>determining a total reserved space for each of the agents based on one or more of the cache allocations for each of the agents, or a number of tokens issued from a token pool to each of the agents; and</claim-text><claim-text>updating the one or more allocation metrics based on the cache upper bound and the total reserved space.</claim-text></claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The network computer of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein reducing the cache allocation for each of the agents based on the data stored for each of the agents, further comprises:<claim-text>reserving space on the one or more cache volumes based on a number of the tokens associated with the one or more storage jobs; and</claim-text><claim-text>in response to storing the data on the one or more cache volumes, performing further actions, including:<claim-text>committing the data associated with the one or more storage jobs when the data is stored on the one or more cache volumes; and</claim-text><claim-text>reducing the cache allocation of each of the agents based on the data that is committed to the one or more cache volumes.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>