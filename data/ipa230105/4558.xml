<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004559A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004559</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17930848</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2453</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>901</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>36</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2453</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2246</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9024</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>367</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>24534</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">ONTOLOGY-BASED GRAPH QUERY OPTIMIZATION</invention-title><us-related-documents><division><relation><parent-doc><document-id><country>US</country><doc-number>15445228</doc-number><date>20170228</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11461318</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17930848</doc-number></document-id></child-doc></relation></division></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Microsoft Technology Licensing, LLC</orgname><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>KREUTZER</last-name><first-name>Tor</first-name><address><city>Troms&#xf8;</city><country>NO</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>JOHANSEN</last-name><first-name>Amund Kronen</first-name><address><city>Troms&#xf8;</city><country>NO</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>VALV&#xc5;G</last-name><first-name>Steffen Viken</first-name><address><city>Troms&#xf8;</city><country>NO</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>KVALNES</last-name><first-name>&#xc5;ge</first-name><address><city>Troms&#xf8;</city><country>NO</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>EIDESEN</last-name><first-name>Dag</first-name><address><city>Troms&#xf8;</city><country>NO</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>HEEN</last-name><first-name>Peter Dahle</first-name><address><city>Troms&#xf8;</city><country>NO</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>KARLBERG</last-name><first-name>Jan-Ove</first-name><address><city>Troms&#xf8;</city><country>NO</country></address></addressbook></inventor><inventor sequence="07" designation="us-only"><addressbook><last-name>VETTOREL</last-name><first-name>Daniele</first-name><address><city>Cordignano</city><country>IT</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Microsoft Technology Licensing, LLC</orgname><role>02</role><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Examples of the present disclosure describe systems and methods for ontology-based graph query optimization. In an example, ontology data relating to a graph or isolated collection may be collected. The ontology data may comprise uniqueness and topology information and may be used to reformulate a query in order to yield a query that is more performant than the original query when retrieving target information from a graph. In an example, reformulating a query may comprise reordering one or more parameters of the query relating to resources, relationships, and/or properties based on uniqueness information. In another example, the query may be reformulated by modifying the resource type to which the query is anchored based on the topology information. The reformulated query may then be executed to identify target information in the isolated collection, thereby identifying the same target information as the original query, but in a manner that is more performant.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="105.49mm" wi="158.75mm" file="US20230004559A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="213.53mm" wi="150.96mm" orientation="landscape" file="US20230004559A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="235.03mm" wi="175.18mm" orientation="landscape" file="US20230004559A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="203.45mm" wi="164.42mm" orientation="landscape" file="US20230004559A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="217.85mm" wi="138.18mm" orientation="landscape" file="US20230004559A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="220.81mm" wi="173.31mm" orientation="landscape" file="US20230004559A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="141.39mm" wi="100.33mm" file="US20230004559A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="128.69mm" wi="98.47mm" file="US20230004559A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="157.31mm" wi="187.96mm" file="US20230004559A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="174.24mm" wi="169.84mm" file="US20230004559A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="240.28mm" wi="163.83mm" file="US20230004559A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="189.40mm" wi="136.91mm" file="US20230004559A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="184.83mm" wi="149.52mm" file="US20230004559A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="222.08mm" wi="166.37mm" file="US20230004559A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="151.98mm" wi="140.80mm" file="US20230004559A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a divisional of U.S. application Ser. No. 15/445,228 filed Feb. 28, 2017, entitled &#x201c;Ontology-Based Graph Query Optimization,&#x201d; which is incorporated herein by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">A query may be used to retrieve target information from a database. The query may comprise one or more parameters, which the database may use to identify stored information that matches the parameters. However, not all formulations of the query parameters may yield the same performance characteristics, even though such queries containing a similar set of parameters may ultimately return the same target information from the database.</p><p id="p-0004" num="0003">It is with respect to these and other general considerations that the aspects disclosed herein have been made. Also, although relatively specific problems may be discussed, it should be understood that the examples should not be limited to solving the specific problems identified in the background or elsewhere in this disclosure.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">Examples of the present disclosure describe systems and methods for ontology-based graph query optimization. In an example, ontology data relating to a graph or isolated collection may be collected (e.g., as the content of the isolated collection is changed, periodically, etc.). The ontology data may comprise information relating to the uniqueness of resources and/or properties within the isolated collection. In another example, the ontology data may comprise topology information relating to the isolated collection, including, but not limited to, the average number of relationships for a given resource type. The ontology data may be stored in a data structure, such that values (e.g., relating to uniqueness and topology) may be keyed to the objects (e.g., resources, relationships, or properties) to which they relate.</p><p id="p-0006" num="0005">The ontology data may be used to reformulate a query in order to yield a query that is more performant than the original query when executed to retrieve target information from an isolated collection. In an example, reformulating a query may comprise reordering one or more parameters of the query relating to resources, relationships, and/or properties based on the uniqueness information from the collected ontology data. In another example, the query may be reformulated by modifying one or more resource types to which the query is anchored, based on the topology information from the collected ontology data. As an example, the query may be reformulated so that it is anchored to a resource type having fewer average relationships that the resource type to which it was previously anchored. The reformulated query may then be executed to identify target information in the isolated collection, thereby identifying the same target information as the original query, but in a manner that is more performant.</p><p id="p-0007" num="0006">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Additional aspects, features, and/or advantages of examples will be set forth in part in the description which follows and, in part, will be apparent from the description, or may be learned by practice of the disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007">Non-limiting and non-exhaustive examples are described with reference to the following figures.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an overview of an example system for performing and optimizing queries within an isolated collection.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an overview of an example system for managing isolated collections of resource identifiers and corresponding relationships.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates an overview of an example isolated collection.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. <b>3</b>B-<b>3</b>E</figref> illustrate an example query model that may be used to traverse an isolated collection.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an overview of an example system for performing ontology-based query optimization.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an overview of an example method for generating ontology data for an isolated collection.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an overview of an example method for generating ontology data for an isolated collection.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an overview of an example method for reformulating a query using ontology data.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating example physical components of a computing device with which aspects of the disclosure may be practiced.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref> are simplified block diagrams of a mobile computing device with which aspects of the present disclosure may be practiced.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a simplified block diagram of a distributed computing system in which aspects of the present disclosure may be practiced.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a tablet computing device for executing one or more aspects of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0021" num="0020">Various aspects of the disclosure are described more fully below with reference to the accompanying drawings, which form a part hereof, and which show specific example aspects. However, different aspects of the disclosure may be implemented in many different forms and should not be construed as limited to the aspects set forth herein; rather, these aspects are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the aspects to those skilled in the art. Aspects may be practiced as methods, systems or devices. Accordingly, aspects may take the form of a hardware implementation, an entirely software implementation or an implementation combining software and hardware aspects. The following detailed description is, therefore, not to be taken in a limiting sense.</p><p id="p-0022" num="0021">The present disclosure provides systems and methods for performing ontology-based graph query optimization. In an example, a query for target information within a graph or isolated collection may be reformulated so as to generate a query that identifies the same target information as the original query, but in a way that is more performant. Information may be stored using a graph, wherein the information may be represented using one or more resources and relationships. In order to retrieve information from the graph, a query comprising one or more parameters may be executed to identify target information relating to the one or more parameters within the graph. Unlike relational databases, queries within a graph rely on identifying relationships between resources and examining properties of resources and/or relationships within the graph. As a result, a query within a graph may be executed by traversing the graph using one or more &#x201c;anchor&#x201d; resources. However, not all query formulation and/or execution strategies will yield the same performance characteristics despite ultimately identifying the same or similar target information in the graph. As an example, a resource type used to anchor a query or the order in which the query parameters are evaluated may impact query performance. As such, aspects of the present disclosure relate to collecting information relating to the graph and using the collected information to reformulate a query such that the reformulated query may be more performant than the original query.</p><p id="p-0023" num="0022">In some examples, a graph or isolated collection may be comprised of resources and relationships. A resource may be identified by a resource identifier, which may be a durable Uniform Resource Identifier (URI) pointing to the particular resource. The resource identifier may also be a uniform resource locator (URL), uniform resource name (URN), or other suitable identifier or pointers pointing to the resource itself. In one example, the resource may be stored within an isolated collection. In another example, the resource may be stored in a data collection, while an associated resource identifier may be stored in an isolated collection. For example, the resource may reside on a remote server, and the resource identifier may be used to retrieve the resource (e.g., the resource may be stored on a remote web server, where the resource identifier comprises a URL). Identifying the location of a resource may include parsing the resource identifier using, for example, regular expressions, providing one or more portions of the resource identifier to a search utility, executing the resource identifier, etc. Relationships within the isolated collection may identify a correlation between two or more resources in the isolated collection. In some examples, an isolated collection may be a unified dimensional model (UDM), a graph, or other collection of resources and relationships.</p><p id="p-0024" num="0023">A property may be associated with or stored by a resource or relationship of an isolated collection. In an example, the property may be comprised of a name and a value, such that the property may be used to store information relating to a resource or relationship. As an example, an &#x201c;email&#x201d; property (e.g., having the name &#x201c;email&#x201d;) for a &#x201c;person&#x201d; resource may store an email address (e.g., as the value for the &#x201c;email&#x201d; property) for the person to which the &#x201c;person&#x201d; resource relates. In another example, a &#x201c;relation&#x201d; resource for a &#x201c;family member&#x201d; relationship may indicate that the &#x201c;family member&#x201d; relationship specifies a &#x201c;brother&#x201d; relationship for the relationship indicated by the &#x201c;family member&#x201d; relationship. As will be appreciated, a property may contain information other than a name and/or a value and may be stored as or associated with any type of information within a graph or an isolated collection.</p><p id="p-0025" num="0024">The resources, or resource identifiers, and/or relationships may be provided by a developer or other external source. Such resources, resources identifiers, and relationships are referred to herein as asserted resources, asserted resource identifiers, and asserted relationships. Each isolated collection may also be enriched to create additional relationships and in some examples additional resource identifiers, by executing a ruleset against the data already in the isolated collection. The additional data generated through execution of such a ruleset is referred to herein as inferred data, such as inferred relationships, inferred resources, and inferred resource identifiers. Queries may then be executed against the isolated collection that includes both the asserted data and inferred data to provide richer results than would otherwise be available solely from the asserted data alone. The isolated collection may also be stored as graph database, and results to queries of the isolated collection may be displayed in a graphical format wherein resources are displayed as nodes and the relationships are displayed as edges. As used herein, an isolated collection of resource identifiers and the relationships between those resources or resource identifiers may be referred as a &#x201c;Set.&#x201d; Further, access to the isolated collection may be controlled through various techniques to provide additional security measures for the content in each isolated collection, and each isolated collection may have different rule sets to generate unique and different inferred data to meet the particular needs of each application.</p><p id="p-0026" num="0025">An isolated collection may be queried to identify or retrieve target information (e.g., properties, resources, and/or relationships) relating to a query. The query may be comprised of one or more parameters or constraints relating to a relationship type, the type or content of a resource, or any other property of a relationship or a resource. In some examples, the parameters may relate to a plurality of resources (e.g., such as a friend-of-a-friend relationship or a resource that is common to a plurality of otherwise unrelated resources, etc.). The parameters of the query may relate to one or more &#x201c;anchor&#x201d; resources or resource types, which may be used when executing a query to identify a context or starting resource for query evaluation. As an example, an anchor resource may be a resource type or a plurality of resource types associated with a relationship, such that resources within the isolated collection matching the one or more resource types are identified and further evaluated based on the parameters of the query. Given the wide array of possible resources and relationships that may be stored by or represented within an isolated collection, performing such queries may be resource-intensive. In an example, some queries may be less performant depending on the structure of the query (e.g., the order of the parameters, the direction of the relationships, etc.) or the resource used to anchor the query. As a result, according to aspects disclosed herein, a query may be reformulated to generate a query that is more performant than the original query while still identifying the same target information.</p><p id="p-0027" num="0026">In an example, the performance of a query may be evaluated based on one or more of a variety of factors, including, but not limited to, the amount of read operations that are performed, memory consumption, the number of intermediate results that are returned, or execution time. In some examples, performance metrics may be determined based on actual queries that are executed in the isolated collection. In other examples, performance metrics may be estimated from information relating to the isolated collection, information from previously-executed queries, or other information. As will be appreciated, query performance may be determined based on any factor, such that a query may be deemed &#x201c;more performant,&#x201d; &#x201c;more efficient,&#x201d; or &#x201c;optimal&#x201d; in relation to another query based on one or more such factors. Further, query performance need not be optimal in actuality, but may instead be optimal in the probabilistic sense, such that it may be expected or estimated that the query would be more performant over other queries. Thus, while a specific query may in fact perform sub-optimally in one instance, it may, on average or as a whole, still be deemed more performant in some or most instances.</p><p id="p-0028" num="0027">In order to generate a more performant query for target information in an isolated collection, a query may be reformulated based on ontology data relating to the isolated collection, including, but not limited to, its topology (e.g., its structure, the number of relationships among resources, the number of resources of a given type, etc.) or the uniqueness or frequency of information within the graph (e.g., the frequency of properties, resources, and/or relationships). In some examples, other information may be evaluated, such as an index of information (e.g., an index relating to the target information, to one or more of the query parameters, or to a specific type of resource, relationship, or property within the isolated collection, etc.), information provided or associated with the query, or data from previous queries (e.g., previously-executed queries and/or related results, performance metrics, etc.). In an example, reformulating a query may comprise altering the query order of parameters, removing or adding a parameter, or modifying the anchor of the query, among other reformulation techniques.</p><p id="p-0029" num="0028">As an example, uniqueness information may comprise a uniqueness index for properties and/or a uniqueness index for resource types within an isolated collection. A uniqueness index may be determined algorithmically (e.g., based on a statistical model, computed in relation to the observed uniqueness of other properties and/or resources, etc.) or may be a frequency measurement relating to a property or resource type in the isolated collection, among other metrics. In some examples, uniqueness indexes for various objects (e.g., resources, properties, etc.) may be relative to one another and may therefore be comparable, such that different objects may be compared based on their respective uniqueness index. In other examples, a uniqueness index may only be comparable among similar objects (e.g., a property uniqueness index may be comparable to other property uniqueness indexes, and a resource type uniqueness index may only be comparable among other resource type uniqueness indexes). As a result, uniqueness indexes may be used to compare one or more parameters of a query to determine a query order with which properties and resource types may be evaluated.</p><p id="p-0030" num="0029">In another example, topology information may comprise frequency information relating the average number of relationships for the resource types to which they relate. As an example, the average number of relationships per resource type may be determined in order to compare resource types and determine which resource type may be a better anchor resource type when executing a query. For example, an isolated collection may contain person resources and project resources, and a relationship may exist between each person resource and each project resource on which a person has worked. If a person, on average, works on ten projects, but each project, on average, has 20 people working on it, the average number of relationships for a person resource type would be ten, while the average number of relationships for a project resource type would be 20. As such, the average number of relationships for a resource may be used to determine which &#x201c;direction&#x201d; a query should be performed so as to evaluate resources having a lower number of average relationships. Thus, it may be more performant to anchor a query based on person resources (having an average of ten relationships) rather than project resources (having an average of 20 relationships). As such, a query may be reformulated such that the query direction is from a person resource to a project resource, rather than from a project resource to a person resource.</p><p id="p-0031" num="0030">As will be appreciated, other uniqueness information or topology information may be gathered in order to reformulate a query. In some examples, the type of information may depend on how queries are structured or performed. For example, the average number of relationships for a resource type may be relevant when a query is anchored to a specific resource type. If a query may be constructed using a relationship as an anchor rather than a resource, it may be useful to quantify and evaluate the number of different resource types for which a given relationship type may be used when reformulating a query. Further, while the above example relates to person resources and project resources, it will be appreciated that aspects disclosed herein may relate to any domain, resource type, and relationship type.</p><p id="p-0032" num="0031">At least some of the information used to reformulate a query may be stored or gathered prior to query reformulation. As an example, ontology data (e.g., uniqueness information, topology information, etc.) relating to an isolated collection may be generated and stored in advance. In some examples, the ontology data may be updated when the content of the isolated collection changes (e.g., when a resource, relationship, or property is added, removed, or modified, etc.), updated periodically (e.g., at certain time intervals, in response to the occurrence of an event, etc.), or a combination thereof. As will be appreciated, other information may be gathered relating to the isolated collection (e.g., the number of resources within an isolated collection, interconnectedness metrics, etc.), and ontology data may be updated or generated at other intervals or in response to any event.</p><p id="p-0033" num="0032">In an example, ontology data (or other information, such as index information or previous query data) may be stored in one or more data structures, such as a PATRICIA tree (Practical Algorithm to Retrieve Information Coded in Alphanumeric tree), a hash table, or any other data structure. In some examples, in order to facilitate efficient data storage and retrieval, each value (e.g., a uniqueness index, topology information, etc.) stored in the data structure may be associated with a key (e.g., a hash value relating to the stored information such as a property name, a resource type, or a relationship type, among others) that may be used when creating, updating, and retrieving a value from the data structure. As will be appreciated, ontology data and other information used to reformulate a query may be stored and retrieved in any manner without departing from the spirit of this disclosure.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an overview of an example system for performing and optimizing queries within an isolated collection. Example system <b>100</b> may be a combination of interdependent components that interact to form an integrated whole for optimizing queries within an isolated collection. In aspects, system <b>100</b> may include hardware components (e.g., used to execute/run operating system (OS)), and/or software components (e.g., applications, application programming interfaces (APIs), modules, virtual machines, runtime libraries, etc.) running on hardware. In particular aspects, system <b>100</b> may provide an environment for software components to execute, evaluate operational constraint sets, and utilize resources or facilities of the system <b>100</b>. In such aspects, the environment may include, or be installed on, one or more processing devices. For instance, software (e.g., applications, operational instructions, modules, etc.) may be run on a processing device such as a computer, mobile device (e.g., smartphone/phone, tablet, laptop, personal digital assistant (PDA), etc.) and/or any other electronic device. As an example of a processing device operating environment, refer to the exemplary operating environments depicted in <figref idref="DRAWINGS">FIGS. <b>8</b>-<b>11</b></figref>. In other instances, the components of systems disclosed herein may be distributed across and executable by multiple devices. For example, input may be entered on a client device and information may be processed or accessed from other devices in a network (e.g. server devices, network appliances, other client devices, etc.).</p><p id="p-0035" num="0034">As presented, system <b>100</b> comprises client devices <b>102</b>A-C, distributed network <b>104</b>, and a distributed server environment comprising one or more servers, such as server devices <b>106</b>A-C. One of skill in the art will appreciate that the scale of systems such as system <b>100</b> may vary and may include additional or fewer components than those described in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In some aspects, interfacing between components of the system <b>100</b> may occur remotely, for example, where components of system <b>100</b> may be distributed across one or more devices of a distributed network.</p><p id="p-0036" num="0035">In aspects, client devices <b>102</b>A-C may be configured to receive input via a user interface component or other input means. Examples of input may include voice, visual, touch and text input. The interface component may enable the creation, modification and navigation of various data sets and graphical representations. In examples, the various datasets may comprise (or be otherwise associated with), for example, resource identifiers, resource metadata, relationship information, asserted relationships, graphical mapping information, query data, rule sets, such as, for example, inference rules, authorization information, authentication information, etc., as discussed in further detail below. Generally, the datasets are stored on one or more server devices <b>106</b>A-C and are accessible by the client devices <b>102</b>A-C. In some examples, however, the datasets may be at least partially stored on one or more of the client devices <b>102</b>A-C The underlying resources represented in the various datasets may be stored locally or in a data store, such as a cloud storage application, accessible to client devices <b>102</b>A-C. In at least one example, the underlying resources represented in the various datasets (or portions thereof) may be distributed across client devices <b>102</b>A-C. For instance, client device <b>102</b>A (e.g., a mobile phone) may locally store a first portion of the resources represented in the dataset, client device <b>102</b>B (e.g., a tablet) may locally store a second portion of the resources, and client device <b>102</b>C (e.g., a laptop) may locally store the remaining portion of the resources represented in the dataset. In examples, the client devices <b>102</b>A-C may have access to all of the resources included in the data set, may have access to a subset of the resources included in the dataset, or, alternatively, may not have access to any of the resources included in the dataset.</p><p id="p-0037" num="0036">Client devices <b>102</b>A-C may be further configured to interrogate data stores comprising the resources corresponding to the resource identifiers in the various data sets. In examples, client devices <b>102</b>A-C may interrogate content providers, such as server device <b>102</b>A-C, via distributed network <b>104</b>. The interrogation may include identifying the remote device on which a resource is located, and/or determining whether the remote device (or a service/separate remote device) has authenticated access to the resource. If access to the resource has been authenticated, client devices <b>102</b>A-C may retrieve an authentication indication from the remote device. Client devices <b>102</b>A-C may use the authentication indication to provide access to one or more of the various datasets comprising the corresponding resource identifier.</p><p id="p-0038" num="0037">Server devices <b>106</b>A-C may be configured to store and/or provide access to one or more resources. For example, server device <b>102</b>A may be a web server, server device <b>102</b>B may be a device comprising a collaborative messaging tool and a calendaring application, and server device <b>102</b>C may be electronic mail server. Each of these devices may comprise a repository of resources that is accessible via one or more authentication mechanisms. In examples, server devices <b>106</b>A-C may perform or monitor the authentication process when a request for a resource is received. If the authentication is successful, the authenticating device may store or maintain an authentication indication for a specified period of time. When the period of time expires, server devices <b>106</b>A-C may remove or attempt to renew the authentication indication. In examples, server devices <b>106</b>A-C may provide the authentication indication to an interrogating client device. In some aspects, server devices <b>106</b>A-C may further be configured to store at least a portion of the various data sets and graphical representations, as discussed above.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an overview of an example system <b>200</b> for managing isolated collections of resource identifiers and corresponding relationships. The isolated collection techniques implemented in system <b>200</b> may comprise or be associated with one or more of the delegated authentication techniques described in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In alternative examples, a single device (comprising one or more components such as processor and/or memory) may perform the processing described in systems <b>100</b> and <b>200</b>, respectively.</p><p id="p-0040" num="0039">With respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, system <b>200</b> may comprise Set creation applications <b>202</b> and <b>204</b>, Set environment <b>206</b>, Sets <b>208</b> and <b>210</b>, entities <b>212</b> and <b>214</b>, resources identifiers <b>216</b>, <b>218</b>, <b>220</b>, <b>222</b>, <b>224</b> and <b>226</b>, and resources <b>228</b>, <b>230</b>, <b>232</b>, <b>234</b>, <b>236</b> and <b>238</b>. In aspects, Set creation applications <b>202</b> and <b>204</b> may be an application or service configured to create, infer, manipulate, navigate and visualize various resources, relationships and graphical representations. Set creation applications <b>202</b> and <b>204</b> may define collections of relationships between resources (e.g., people, files, tasks, mail, documents, calendar events, etc.) and executing queries on those collections. Set creation applications <b>202</b> and <b>204</b> may further provide for defining and storing rulesets used to infer one or more relationships in the collections, and displaying graphical representations of the collection data. The defined rulesets may be stored in the Set itself, and in some examples is stored as metadata within the Set. In examples, Set creation applications <b>202</b> and <b>204</b> may be installed and executed on a client device or on one or more devices in a distributed environment. For instance, Set creation application <b>202</b> may be installed on client device <b>102</b>A, Set creation application <b>204</b> may be installed on client device <b>102</b>B, and a Set creation service associated with server device <b>106</b>A may be accessible to client device <b>102</b>C.</p><p id="p-0041" num="0040">In aspects, Set creation applications <b>202</b> and <b>204</b> may have access to a file directory or an execution environment, such as environment <b>206</b>. Environment <b>206</b> may be collocated with a Set creation application, or environment <b>206</b> may be located remotely from the Set creation application. Environment <b>206</b> may provide access to one or more data collections, such as Sets <b>208</b> and <b>210</b>. In examples, access to the data collections may be determined using one or more sets of permissions generated and/or maintained by Set creation applications <b>202</b> and <b>204</b>. The sets of permissions may be different across one or more of the data collections. As a result, one or more of the data collections (or functionality associated therewith) may not be accessible from one or more of Set creation applications <b>202</b> and <b>204</b>.</p><p id="p-0042" num="0041">Sets <b>208</b> and <b>210</b> may respectively comprise isolated collections of asserted resource identifiers and corresponding relationships. The relationships in the isolated collections may be defined manually or may be automatically derived using one or more rulesets. The isolated collections may be represented using graphical structures that directly relate resources in the data collection and provide for retrieving relationship data with a single operation. Each isolated collection may comprise resource identifiers that are unique to that isolated collection. Alternately, the isolated collections may comprise resource identifiers included in one or more alternate isolated collections. For example, as depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, Set <b>208</b> may comprise resource identifiers <b>216</b>, <b>218</b>, <b>220</b> and <b>222</b>, and Set <b>210</b> may comprise resource identifiers <b>220</b>, <b>222</b>, <b>224</b> and <b>226</b>. Resource identifiers <b>216</b>, <b>218</b>, <b>220</b>, <b>222</b>, <b>224</b> and <b>226</b> may correspond to, and/or identify the location of, one or more resources. As used herein, a resource identifier references an existing resource, but is not itself a resource. Exemplary types of resource identifiers include, but are not limited to, a Uniform Resource Identifier (e.g., a Uniform Resource Locator (URL), a Uniform Resource Name (URN) etc.), an IP address, a memory or storage address, and the like. One of skill in the art will appreciate that any type of identifier may be employed by the various aspects disclosed herein without departing from the scope of this disclosure. Identifying the location of a resource may include parsing the resource identifier using, for example, regular expressions, providing one or more portions of the resource identifier to a search utility, executing the resource identifier, etc. In aspects, having access to the data collections does not guarantee access to the resources identified by the resource identifiers included in each data collection. For example, although a user may be able to access and manipulate Set <b>208</b>, the user may not be authorized to access one or more of the underlying resources corresponding to the resource identifier in Set <b>208</b>.</p><p id="p-0043" num="0042">Resource providers <b>212</b> and <b>214</b> may be configured to store and/or provide access to one or more resources. As such, a resource provider as used herein may be a data store, a cloud service provider, a client computing device, a server computing device, a distributed system of devices, such as, for example, an enterprise network, an application, a software platform (e.g., an operating system, a database, etc.), and the like. In aspects, resource providers <b>212</b> and <b>214</b> may be (or have access to) various different data sources, such as content providers, data stores, various sets of application data, and the like. The data stores may comprise one or more resources corresponding to one or more resource identifiers. For example, as depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, resource provider <b>212</b> may be a data store comprising various different types of resources such as resource <b>228</b> (e.g., document 1 (D1)) and resource <b>230</b> (e.g., presentation 2 (P1)) and resource provider <b>214</b> may be a contact management application comprising contact resources <b>232</b> (e.g., contact 1 (C1)), <b>234</b> (e.g., contact 2 (C2)), <b>236</b> (e.g., contact 3 (C3)) and <b>238</b> (e.g., contact 4 (C4)). In this example, resource identifier <b>216</b> may correspond to resource <b>228</b>; resource identifier <b>218</b> may correspond to resource <b>230</b>; resource identifier <b>220</b> may correspond to resource <b>232</b>; resource identifier <b>222</b> may correspond to resource <b>234</b>; resource identifier <b>224</b> may correspond to resource <b>236</b>; and resource identifier <b>226</b> may correspond to resource <b>238</b>. In some aspects, resource providers <b>212</b> and <b>214</b> may be accessible by Set creation applications <b>202</b> and <b>204</b>. Set creation applications <b>202</b> and <b>204</b> may access resource providers <b>212</b> and <b>214</b> to determine the existence of resources and/or retrieve information associated with the resources (e.g., resource metadata, resource location, resource identifiers, permission sets, authentication data, etc.). The information retrieved from resource providers <b>212</b> and <b>214</b> may be used to determine a set of resource identifiers corresponding to one or more of the available resources. The set of resource identifiers may be used to create one or more isolated collections of asserted resource identifiers and corresponding relationships. As noted above, the resource identifiers may be, or include, a durable URI for its corresponding resource. For instance, the resource identifier <b>216</b> may include the URI for the actual document (D1) <b>228</b>. Accordingly, in such an example, a user is able to determine the location of the document (D1) <b>228</b> from the Set, and, depending on authentication and access restrictions, retrieve the document (D1) <b>228</b>. As another example, as depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, resource provider <b>212</b> may be accessed by Set creation application <b>202</b>. Set creation application <b>202</b> may determine that resource provider <b>212</b> comprises at least resources <b>228</b> and <b>230</b>, and may determine resource identification information for each of the resources. Based on the determined resource identification information, resource identifiers <b>216</b> and <b>218</b> may be respectively applied/correlated to resources <b>228</b> and <b>230</b>, and provided to environment <b>206</b>. Environment <b>206</b> may then make resource identifiers <b>216</b> and <b>218</b> eligible for an inclusion analysis into one or more isolated collections.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates an example isolated collection <b>300</b> of asserted resource identifiers and corresponding relationships. Example isolated collection <b>300</b> comprises resource identifiers <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b>, <b>310</b>, <b>312</b> and <b>314</b>, and relationships <b>316</b>, <b>318</b>, <b>320</b>, <b>322</b>, <b>324</b> and <b>326</b>. In aspects, isolated collection <b>300</b> may be generated and/or manipulated using a collection creation utility that may be included as part of a Set creation application as discussed above. When presented in graph form as depicted in the <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, each resource identifier may be referred to as a &#x201c;node&#x201d; and each relationship may be referred to as an &#x201c;edge.&#x201d; The collection creation utility may also identify resources and/or determine resource types for collections using one or more rulesets that may include rules defined in accordance with semantic web technologies, such as resource description framework (RDF), RDF schema (RDFS), SPARQL Protocol and RDF Query Language (SPARQL), Web Ontology Language (OWL), etc. For example, collection <b>300</b> includes a resource identifier <b>312</b> that represents an underlying resource, &#x201c;email789&#x201d; in the depicted example. Similarly, resource identifier <b>304</b> represents a resource document, &#x201c;Doc123,&#x201d; and resource identifier <b>302</b> represents a resource task, &#x201c;Task123.&#x201d; Each of the resources and relationships included in the isolated collection <b>300</b> may have been asserted by a developer through a Sets creation application. For instance, a developer may manually add each of the resource identifiers and the relationships between the resource identifiers. As an example, the developer may manually indicate that the &#x201c;task123&#x201d; is a task on &#x201c;Doc123,&#x201d; as represented in the collection <b>300</b> by the &#x201c;taskOn&#x201d; relationship <b>316</b>. The resource identifiers and relationships may also be asserted by an external bot or application created by a developer. For instance, an add-in may be programmed to monitor activity in a browser or other application to track usage of the application. Based on the usage of the application, the add-in sends additional resources and relationships to be included in the collection <b>300</b>.</p><p id="p-0045" num="0044">In contrast to the asserted resource identifiers and relationships, a collection creation utility may execute a ruleset to determine additional relationships and resource types, referred to herein as &#x201c;inferred relationships&#x201d; and &#x201c;inferred resource identifiers&#x201d; or &#x201c;inferred resource types.&#x201d; For example, upon execution of a ruleset, the collection creation utility may determine that resource identifier <b>312</b> represents an email message, and resource identifier <b>304</b> represents a document. Generation of inferred relationships and resources is discussed in further detail below.</p><p id="p-0046" num="0045">Isolated collection <b>300</b> further depicts that resource identifier <b>302</b> is associated with resource identifiers <b>304</b>, <b>306</b> and <b>308</b> and resource identifier <b>310</b>. The collection creation utility may determine that the resource identifier <b>302</b> represents a task to be performed on identifiers <b>304</b>, <b>306</b>, and <b>308</b>. Based on this determination, the collection creation utility may assign relationships <b>316</b>, <b>318</b> and <b>320</b> (e.g., &#x201c;taskOn&#x201d;) to define the association between resource identifier <b>302</b> and resource identifier <b>304</b>, <b>306</b> and <b>308</b>. In other examples, the relationships <b>316</b>, <b>318</b>, and <b>320</b> may be asserted, as discussed above. Additional relationships, such as the &#x201c;hasDiscussion&#x201d; relationship <b>322</b> may have been asserted manually by a developer or asserted from an add-in of an e-mail application that analyzed the content of e-mail <b>101</b>. While specific types of resources and relationships are described in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, one of skill in the art will appreciate that other types of resources and/or relationships may be included in an isolated collection without departing from the spirit of this disclosure.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIGS. <b>3</b>B-<b>3</b>E</figref> illustrate an example query model that may be used to traverse collection <b>300</b>. In aspects, queries may be executed via an interface provided by the collection creation utility. A query may be executed against one or more files and/or directories comprising information, such as resource identifiers, resource type, resource metadata, permission data, etc. The query results may be visualized in a graph form as one or more collections, such as collection <b>300</b>. For example, the entire collection <b>300</b> dataset may comprise only those elements illustrated in collection <b>300</b> (e.g., resource identifiers <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b>, <b>310</b>, <b>312</b> and <b>314</b> and relationships <b>316</b>, <b>318</b>, <b>320</b>, <b>322</b>, <b>324</b> and <b>326</b>). In this particular example, resource identifier <b>312</b> may represent an email comprising the subject &#x201c;API Design&#x201d; and resource identifier <b>314</b> may represent an email comprising the subject &#x201c;Sets.&#x201d; The query &#x2018;http://.../collection300/task123&#x2019; may be executed against collection <b>300</b>. The query results may comprise resource identifier <b>302</b> and be visualized as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. In <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the query has been amended to &#x2018;http://.../collection300/task123?$expand=taskOn&#x2019; and executed against collection <b>300</b>. The query results may comprise resource identifiers <b>302</b>, <b>304</b>, <b>306</b> and <b>308</b> and relationships <b>316</b>, <b>318</b> and <b>320</b>, and be visualized as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>. In <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, the query has been amended to &#x2018;http://.../collection300/task123?$expand=taskOn($expand=attachmentOn)&#x2019; and executed against collection <b>300</b>. The query results may comprise resource identifiers <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b>, <b>312</b> and <b>314</b> and relationships <b>316</b>, <b>318</b>, <b>320</b>, <b>324</b> and <b>326</b>, and be visualized as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>. In <figref idref="DRAWINGS">FIG. <b>3</b>E</figref>, the query has been amended to &#x2018;http://.../collection300/task123?($expand=taskOn($expand=attachmentOn)($filter=Subject eq &#x2018;Sets&#x2019;))&#x2019; and executed against collection <b>300</b>. As only resource identifier comprises <b>314</b> the subject &#x201c;Sets&#x201d;, the query results may comprise resource identifiers <b>302</b>, <b>306</b> and <b>314</b> and relationships <b>318</b> and <b>326</b>, and be visualized as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>E</figref>.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an overview of an example system for performing ontology-based query optimization. <figref idref="DRAWINGS">Figure <b>400</b></figref> may be comprised of client device <b>402</b> and server device <b>404</b>. In some examples, client device <b>402</b> may be one of client devices <b>102</b>A-C and server device <b>404</b> may be one of server device <b>106</b>A-C in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. While only one client device and one server device are shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, it will be appreciated that multiple client devices, multiple server devices, or any combination thereof may be used to practice aspects of the present disclosure.</p><p id="p-0049" num="0048">Server device <b>404</b> may be comprised of isolated collection <b>406</b>, ontology data <b>408</b>, ontology data generation process <b>410</b>, and query reformulation process <b>412</b>. Isolated collection <b>406</b> may store one or more resources and relationships according to aspects disclosed herein. Client device <b>402</b> may access information stored by server device <b>404</b>. In some examples, client device <b>402</b> may provide a query formulated using a query language (e.g., Cypher Query Language, SPARQL, etc.) to server device <b>404</b> to access information stored by isolated collection <b>406</b>. As will be appreciated, while components <b>406</b>-<b>412</b> are pictured as part of server device <b>404</b>, components <b>406</b>-<b>412</b> may be distributed among multiple computing devices, may be part of client device <b>402</b>, or may be combined such that the functionality described herein relating to a plurality of components <b>406</b>-<b>412</b> may be performed by a single component.</p><p id="p-0050" num="0049">In an example, ontology data <b>408</b> may store data relating to isolated collection <b>406</b>, including, but not limited to, uniqueness information or topology information. Ontology data <b>408</b> may be comprised of one or more data structures. Ontology data <b>408</b> may be generated and maintained by ontology data generation process <b>410</b>. In an example, ontology data generation process <b>410</b> may generate and store information in ontology data <b>408</b> by performing one or more of the operations discussed below with respect to method <b>500</b> and method <b>600</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> and <figref idref="DRAWINGS">FIG. <b>6</b></figref>, respectively. As described above, ontology data generation process <b>410</b> may update ontology data <b>408</b> when the content of isolated collection <b>406</b> changes (e.g., by adding, removing, or updating a resource, relationship, or property), after a certain amount of time has elapsed, or in response to the occurrence of an event (e.g., adding a user to the isolated collection, importing data from another isolated collection, determining that isolated collection <b>406</b> may be queried for information, etc.), among other events.</p><p id="p-0051" num="0050">Query reformulation process <b>412</b> may receive a query for data stored by isolated collection <b>406</b>. In an example, query reformulation process <b>412</b> may perform one or more of the operations discussed below with respect to method <b>700</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. According to aspects disclosed herein, query reformulation process <b>412</b> may reformulate the received query in order to generate a query that is more performant than the original query when executed to identify target data in isolated collection <b>406</b>. In an example, query reformulation process <b>412</b> may access ontology data <b>408</b> and use information from ontology data <b>408</b> when reformulating a query. In some examples, query reformulation process <b>412</b> may access other data in addition to or as an alternative to ontology data <b>408</b>. As an example, query reformulation process may access data stored by or associated with isolated collection <b>406</b>. Query reformulation process <b>412</b> may evaluate the parameters of a query in relation to the accessed data in order to generate an optimal query.</p><p id="p-0052" num="0051">In an example, query reformulation process <b>412</b> may evaluate uniqueness information (e.g., as may be stored in ontology data <b>408</b>) for each property and resource type of the query. Query reformulation process <b>412</b> may compare the uniqueness information for each property and/or resource type to determine whether there may be a more performant order in which the parameters of the query should be executed when searching within isolated collection <b>406</b> (e.g., by performing one or more of operations <b>704</b>-<b>710</b> of method <b>700</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>). In some examples, uniqueness information for a property may be compared to uniqueness information for other properties and uniqueness information for a resource type may be compared to uniqueness information for other resource types. In other examples, uniqueness information for a property or resource type may be compared to uniqueness information for other properties or resource types. As will be appreciated, query reformulation process <b>412</b> may evaluate uniqueness information for other entities or information stored by or associated with isolated collection <b>406</b>.</p><p id="p-0053" num="0052">In another example, query reformulation process <b>412</b> may evaluate topology information (e.g., as may be stored in ontology data <b>408</b>). Query reformulation process <b>412</b> may use topology information to determine whether the query may be more performant if reformulated to be anchored using a different resource type (e.g., by performing one or more of operations <b>704</b>-<b>714</b> of method <b>700</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>). In an example, a query may specify a relationship between a first resource type and a second resource type, such that the query is anchored using the first resource type. Query reformulation process <b>412</b> may determine that the second resource type has, on average, fewer relationships than the first resource type, and reformulate the query accordingly such that the query is instead anchored using the second resource type and specifies a relationship between a second resource type and a first resource type. As will be appreciated, topology information may contain other information and may be used to perform other evaluations on one or more parameters of a query.</p><p id="p-0054" num="0053">In some examples, query reformulation process <b>412</b> may use multiple techniques to reformulate a query. For example, query reformulation process <b>412</b> may use uniqueness information in conjunction with topology information when reformulating a query. In another example, query reformulation may evaluate uniqueness information, determine whether the query should be processed further, and, if it is determined that the query should be reformulated further, evaluate topology information as well. The determination may comprise evaluating the expected performance of the query or the expected amount of time required to engage in additional processing, among other factors. In another example, query reformulation component <b>412</b> may evaluate other information as an alternative to or in addition to uniqueness information or topology information. Query reformulation process <b>412</b> may also evaluate any number of factors in conjunction with one another, or evaluate one or more factors first, followed by an evaluation of one or more subsequent factors. In some examples, query reformulation process <b>412</b> may perform multiple passes, such that a query is iteratively reformulated based on similar or different factors as were considered in previous reformulation iterations.</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an overview of an example method <b>500</b> for generating ontology data for an isolated collection. Method <b>500</b> may be performed by a computing device (e.g., client device <b>402</b> or server device <b>404</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>) or a computing component (e.g., ontology data generation process <b>410</b>). In an example, method <b>500</b> may be performed periodically (e.g., at certain time intervals in response to the occurrence of an event, etc.), may be performed when the content of the isolated collection is updated, or may be performed when a query is received or evaluated, among other periods, intervals, or events. In some examples, method <b>500</b> may be performed to analyze a larger isolated collection in order to generate ontology data for a smaller, but related, isolated collection. The ontology data may then be used when reformulating queries for the smaller and/or larger isolated collections. The smaller isolated collection may be related in that it contains similar resources, relationships, and/or properties. In an example, the smaller isolated collection may have similar ontological features (e.g., similar frequencies for resource types, relationships, or properties, or the smaller isolated collection may contain similar resource types, etc.) to the larger isolated collection.</p><p id="p-0056" num="0055">Method <b>500</b> begins at operation <b>502</b>, where an isolated collection may be received or accessed. In an example, the isolated collection may be isolated collection <b>406</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The isolated collection may be stored by the same or different computing device as is performing method <b>500</b>. In some examples, the isolated collection may be stored by a storage system or data store, which may be provided by a single computing device or distributed across multiple computing devices.</p><p id="p-0057" num="0056">At operation <b>504</b>, the isolated collection may be analyzed according to aspects disclosed herein. As an example, resources, relationships, and/or properties of the isolated collection may be analyzed. Analyzing the isolated collection may comprise evaluating some or all of the isolated collection. In some examples, only a portion of the isolated collection may be analyzed. In one example, determining which parts of the isolated collection to analyze may be based on which resources, properties, or relationships are likely to be queried or whether analyzing a given part of the isolated collection would provide a benefit when reformulating a query. For example, analyzing a property that has few values (e.g., each of which are fairly common, such as a person's gender, a country code associated with resources comprising U.S. phone numbers, etc.) may provide less benefit than analyzing a property containing information that is more unique.</p><p id="p-0058" num="0057">Moving to operation <b>506</b>, ontology data may be generated based on the analysis of the isolated collection. As discussed herein, the ontology data may comprise uniqueness information and/or topology information relating to the isolated collection. The uniqueness information may comprise a uniqueness index for resource types and/or properties within the isolated collection that is determined based on analyzing other resources and properties within the isolated collection. As discussed above, the uniqueness index may be used to compare resource types and/or properties in order to determine how unique a resource type or property is in relation other resource types and/or properties. The topology information may be determined by analyzing the resources and relationships of the isolated collection in order to determine an average number of relationships for a given resource type. As will be appreciated, while examples of ontology data, uniqueness information, and topology information are given, other information relating to the isolated collection may be generated as ontology data without departing from the spirit of this disclosure.</p><p id="p-0059" num="0058">In some examples, generating ontology data may also comprise generating one or more indexes relating to information stored by the isolated collection. In an example, specific properties or other information may be indexed (e.g., as the result of an indication received from a user or from an application or service, among others). In another example, an index may be generated based on heuristics (e.g., determining that certain properties are frequently queried, determining that indexing a property may provide a performance benefit, etc.). As an example, an index may be generated for the values associated with a property, thereby allowing query reformulation to assess which values are typically associated with a given property and to further evaluate the uniqueness of various parameters within a query in view of such data. In one example, a property index may be stored separately from the ontology data discussed above, associated with the isolated collection, or stored as part of the above ontology data, among other storage techniques.</p><p id="p-0060" num="0059">At operation <b>508</b>, the ontology data may be stored for subsequent evaluation. In an example, the ontology data may be ontology data <b>408</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The ontology data may be stored in one or more data structures, data stores, or storage systems. As discussed above, a PATRICIA tree may be used to store at least a portion of the ontology data, such that a value (e.g., uniqueness and/or topology information) may be associated with a key (e.g., a hash of a relationship, resource type, or property) and stored in the PATRICIA tree. While specific data structures have been described herein, one of skill in the art will appreciate that other types of data structures may be employed to store ontology data without departing from the scope of this disclosure. In an example, the stored data may be associated with the isolated collection, such that it may be accessed when reformulating a query (e.g., by query reformulation process <b>412</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). Flow terminates at operation <b>508</b>.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example method <b>600</b> for generating ontology data for an isolated collection. Method <b>600</b> may be performed by ontology data generation process <b>410</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In some examples, method <b>600</b> may be performed when the content of the isolated collection is altered (e.g., when a resource, relationship, or property is added, modified, or deleted, etc.) or it may be performed occasionally.</p><p id="p-0062" num="0061">Method <b>600</b> begins at operation <b>602</b>, where information to add to an isolated collection may be received. The information may be received from a client device (e.g., client device <b>402</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), a service or application, or another source. As will be appreciated, while the instant example relates to adding information to an isolated collection, one or more of the following operations may be performed when information within an isolated collection is modified, accessed, or deleted.</p><p id="p-0063" num="0062">At determination operation <b>604</b>, a type for the information may be determined. If it is determined that the information is a property, flow branches &#x201c;PROPERTY&#x201d; to operation <b>606</b>, where a key may be generated based on the name of the property. In an example, the key may be a hash of the value of the property or of other information associated with the property. The hash may be generated using a hashing algorithm, including, but not limited to, Secure Hash Algorithm (e.g., SHA-1, SHA-128, SHA-256, etc.), MD5, or Whirlpool. As will be appreciated, a key may be generated using any of a variety of techniques, such that they key may be used to store and retrieve information associated with the property.</p><p id="p-0064" num="0063">Moving to operation <b>608</b>, uniqueness information may be generated for the information. In an example, generating uniqueness information may comprise determining whether any pre-existing uniqueness information is available (e.g., in a data store or other storage system storing ontology data, such as ontology data <b>408</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). If it is determined that pre-existing uniqueness information is available, the pre-existing uniqueness information may be accessed and used to generate a new or updated uniqueness index for the property. In another example, if there is no pre-existing uniqueness information, a new uniqueness index may be generated.</p><p id="p-0065" num="0064">As discussed above, the uniqueness index may be generated algorithmically (e.g., based on a statistical model, computed in relation to the observed uniqueness of other properties, etc.) or may be a frequency measurement relating to how often the property occurs within the isolated collection, among other techniques. In some examples, uniqueness indexes for various objects (e.g., resources, properties, etc.) may be relative to one another and may therefore be comparable, such that different objects may be compared based on their respective uniqueness index. In other examples, a uniqueness index may only be comparable among similar objects (e.g., a property uniqueness index may be comparable to other property uniqueness indexes, and a resource type uniqueness index may only be comparable among other resource type uniqueness indexes).</p><p id="p-0066" num="0065">At operation <b>610</b>, the uniqueness information associated with the key may be updated. In an example, updating the uniqueness information may comprise storing the uniqueness index that was generated at operation <b>608</b> in a data structure or other storage system. In some examples, the uniqueness index may be associated with or stored based on the key that was generated at operation <b>606</b> in order to facilitate retrieval of the uniqueness information (e.g., by query reformulation process <b>412</b> when reformulating a query). Flow terminates at operation <b>610</b>.</p><p id="p-0067" num="0066">Returning to determination operation <b>604</b>, if it is determined that the information is a resource, flow branches &#x201c;RESOURCE&#x201d; to operation <b>612</b>, where a key may be generated based on the resource type. In an example, the key may be a hash of the name of the resource type or of other information associated with the resource. The hash may be generated using a hashing algorithm, as discussed above. As will be appreciated, a key may be generated using any of a variety of techniques, such that they key may be used to store and retrieve information associated with or relating to the resource type.</p><p id="p-0068" num="0067">Flow then moves to operation <b>608</b>, where, as discussed above, uniqueness information may be generated for the information. In an example, generating uniqueness information for the resource type may comprise determining whether any pre-existing uniqueness information is available (e.g., in a data store or other storage system storing ontology data, such as ontology data <b>408</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). If it is determined that pre-existing uniqueness information is available, the pre-existing uniqueness information may be accessed and used to generate a new or updated uniqueness index for the resource type. In another example, if there is no pre-existing uniqueness information, a new uniqueness index may be generated.</p><p id="p-0069" num="0068">As discussed above, the uniqueness index may be generated algorithmically or may be a frequency measurement relating to how often the resource type occurs within the isolated collection, among other techniques. In some examples, uniqueness indexes for various objects (e.g., resources, properties, etc.) may be relative to one another and may therefore be comparable, such that different objects may be compared based on their respective uniqueness index. In other examples, a uniqueness index may only be comparable among similar objects (e.g., a property uniqueness index may be comparable to other property uniqueness indexes, and a resource type uniqueness index may only be comparable among other resource type uniqueness indexes).</p><p id="p-0070" num="0069">At operation <b>610</b>, the uniqueness information associated with the key may be updated. In an example, updating the uniqueness information may comprise storing the uniqueness index that was generated at operation <b>608</b> in a data structure or other storage system. In some examples, the uniqueness index may be associated with or stored based on the key that was generated at operation <b>606</b> in order to facilitate retrieval of the uniqueness information (e.g., by query reformulation process <b>412</b> when reformulating a query). Flow terminates at operation <b>610</b>.</p><p id="p-0071" num="0070">Returning to determination operation <b>604</b>, if it is determined that the information is a relationship, flow branches &#x201c;RELATIONSHIP&#x201d; to operation <b>614</b>, where a plurality of resources associated with the relationship may be identified. In an example, identifying resources associated with the relationship may comprise accessing the isolated collection to identify the associated resources. In another example, information relating to the associated resources may be provided with the information that was received at operation <b>602</b>.</p><p id="p-0072" num="0071">Moving to operation <b>616</b>, a key may be generated for each resource based on the resource's type. In an example, the key may be a hash of the name of the resource type or of other information associated with each of the resources. The hash may be generated using a hashing algorithm, as discussed above. As will be appreciated, a key may be generated using any one of a variety of techniques, such that they key may be used to store and retrieve information associated with or relating to each of the resources.</p><p id="p-0073" num="0072">Flow then moves to operation <b>618</b>, where topology information may be updated for each key. In an example, updating topology information for each key may comprise determining whether any pre-existing topology information associated with each resource type is available (e.g., in a data store or other storage system storing ontology data, such as ontology data <b>408</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). If it is determined that pre-existing topology information is available for a resource type, the pre-existing topology information may be accessed and used to generate updated topology information for the resource type. In another example, if there is no pre-existing topology information, new topology information may be generated. As discussed above, topology information may comprise information relating to how many relationships a resource type has in the isolated collection. The topology information may be an average number of relationships associated with a given resource type, or other measurement indicative of how connected the resource type is. The determined topology information for each resource type may be stored in a data structure or other storage system. In some examples, the topology information may be associated with or stored based on the key for the resource type as was generated at operation <b>616</b> in order to facilitate retrieval of the uniqueness information (e.g., by query reformulation process <b>412</b> when reformulating a query). Flow terminates at operation <b>618</b>.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an overview of an example method <b>700</b> for reformulating a query using ontology data. In an example, method <b>700</b> may be performed by query reformulation process <b>412</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In some examples, method <b>700</b> may be performed by a computing device (e.g., client device <b>402</b> or server device <b>404</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). Method <b>700</b> may begin at operation <b>702</b>, where a query for data in an isolated collection may be received. The query may be formulated in a query language such as Cypher or SPARQL, among others. The query may be comprised of one or more parameters or constraints relating to a relationship type, the type or content of a resource, or any other property of a relationship or a resource. In some examples, the parameters may relate to a plurality of resources (e.g., such as a friend-of-a-friend relationship or a resource that is common to a plurality of otherwise unrelated resources, etc.).</p><p id="p-0075" num="0074">At operation <b>704</b>, uniqueness information may be accessed for each parameter of the query. The uniqueness information may have been generated based on the content of the isolated collection according to aspects disclosed herein (e.g., using method <b>500</b> and/or method <b>600</b> as illustrated in <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref>, respectively). In an example, the uniqueness information may have been generated from a related isolated collection of the isolated collection (e.g., where the isolated collection comprises a subset of data from the related isolated collection or where the related isolated collection has similar resource types, similar relationships, or other similarities). The uniqueness information may be accessed from a data structure or other data store associated with or relating to the isolated collection according to aspects disclosed herein.</p><p id="p-0076" num="0075">Moving to operation <b>706</b>, each parameter of the query may be evaluated based on the accessed uniqueness information. The evaluation may comprise generating a query order indicating an arrangement for one or more of the parameters of the query by ranking or ordering each of the parameters based on uniqueness. In an example, parameters relating to similar objects (e.g., relating to a resource, relationship, or property) may be evaluated in relation to similar parameters. In another example, each of the parameters may be evaluated against the other parameters (e.g., regardless of the object to which the parameter relates).</p><p id="p-0077" num="0076">At operation <b>708</b>, a determination may be made whether reformulating the query based on uniqueness information is sufficient to yield a more performant query. In an example, the determination may comprise further analyzing the uniqueness information to determine whether the uniqueness information for each of the parameters indicates that one or more of the parameters is relatively unique (e.g., as compared to a uniqueness threshold, as compared to other parameters of the query, etc.). In another example, the determination may comprise an evaluation of how the query would likely perform if executed against the isolated collection (e.g., based on historical or statistical metrics, a comparison of previous similar queries and results, etc.). As will be appreciated, any factor may be evaluated to determine whether uniqueness information is sufficient to yield a more performant query.</p><p id="p-0078" num="0077">If it is determined that uniqueness information is sufficient, flow branches &#x201c;YES&#x201d; to operation <b>710</b>, where the query may be reformulated based on the evaluation of the uniqueness information. In an example, reformulating the query may comprise rearranging parameters of the query, removing parameters of the query, or modifying parameters of the query, according to aspects disclosed herein. Once the query has been reformulated, the query may be provided to another computing device, application, or service, among others. In an example, the query may be provided for execution within the isolated collection such that target information may be identified. Flow terminates at operation <b>710</b>.</p><p id="p-0079" num="0078">If, however, it is determined that the uniqueness information is insufficient, flow branches &#x201c;NO&#x201d; to operation <b>712</b>, where topology information may be evaluated. Evaluating topology information may comprise identifying a plurality of resource types to which the query is anchored and accessing topology information associated with the plurality of resource types. As discussed above, the topology information may describe the average number of relationships for a given resource type, such that it may be determined which of the resource types typically has fewer relationships.</p><p id="p-0080" num="0079">Moving to operation <b>714</b>, the query may be reformulated based on the evaluated topology information. Reformulating the query may comprise modifying a resource type to which the query is anchored such that the new anchor is a resource type having a lower average number of relationships. In some examples, this may comprise reversing one or more of the relationships specified within the query, or identifying one or more inverse relationships (e.g., there may be an inferred relationship that represents an inverse relationship for an asserted relationship specified in the query). In other examples, the reformulation may also comprise reformulating the query based on uniqueness information as was discussed above with respect to operation <b>710</b>. As will be appreciated, while the above example relates to reformulating a query by altering the resource type to which the query is anchored, a query may be reformulated by using topology information in other ways, including, but not limited to, by modifying one or more relationships within the query, by reversing the direction of a relationship within the query, etc. Once the query has been reformulated, the query may be provided to another computing device, application, or service, among others. In an example, the query may be provided for execution within the isolated collection such that target information may be identified. Flow terminates at operation <b>714</b>.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIGS. <b>8</b>-<b>11</b></figref> and the associated descriptions provide a discussion of a variety of operating environments in which aspects of the disclosure may be practiced. However, the devices and systems illustrated and discussed with respect to <figref idref="DRAWINGS">FIGS. <b>8</b>-<b>11</b></figref> are for purposes of example and illustration and are not limiting of a vast number of computing device configurations that may be utilized for practicing aspects of the disclosure, described herein.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating physical components (e.g., hardware) of a computing device <b>800</b> with which aspects of the disclosure may be practiced. The computing device components described below may be suitable for the computing devices described above, including the client computing devices <b>102</b>A-C and the server computing devices <b>106</b>A-C. In a basic configuration, the computing device <b>800</b> may include at least one processing unit <b>802</b> and a system memory <b>804</b>. Depending on the configuration and type of computing device, the system memory <b>804</b> may comprise, but is not limited to, volatile storage (e.g., random access memory), non-volatile storage (e.g., read-only memory), flash memory, or any combination of such memories. The system memory <b>804</b> may include an operating system <b>805</b> and one or more program modules <b>806</b> suitable for performing the various aspects disclosed herein such as an ontology data generation component <b>824</b> and a query reformulation component <b>826</b>. The operating system <b>805</b>, for example, may be suitable for controlling the operation of the computing device <b>800</b>. Furthermore, embodiments of the disclosure may be practiced in conjunction with a graphics library, other operating systems, or any other application program and is not limited to any particular application or system. This basic configuration is illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> by those components within a dashed line <b>808</b>. The computing device <b>800</b> may have additional features or functionality. For example, the computing device <b>800</b> may also include additional data storage devices (removable and/or non-removable) such as, for example, magnetic disks, optical disks, or tape. Such additional storage is illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> by a removable storage device <b>809</b> and a non-removable storage device <b>810</b>.</p><p id="p-0083" num="0082">As stated above, a number of program modules and data files may be stored in the system memory <b>804</b>. While executing on the processing unit <b>802</b>, the program modules <b>806</b> (e.g., application <b>820</b>) may perform processes including, but not limited to, the aspects, as described herein. Other program modules that may be used in accordance with aspects of the present disclosure may include electronic mail and contacts applications, word processing applications, spreadsheet applications, database applications, slide presentation applications, drawing or computer-aided application programs, etc.</p><p id="p-0084" num="0083">Furthermore, embodiments of the disclosure may be practiced in an electrical circuit comprising discrete electronic elements, packaged or integrated electronic chips containing logic gates, a circuit utilizing a microprocessor, or on a single chip containing electronic elements or microprocessors. For example, embodiments of the disclosure may be practiced via a system-on-a-chip (SOC) where each or many of the components illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> may be integrated onto a single integrated circuit. Such an SOC device may include one or more processing units, graphics units, communications units, system virtualization units and various application functionality all of which are integrated (or &#x201c;burned&#x201d;) onto the chip substrate as a single integrated circuit. When operating via an SOC, the functionality, described herein, with respect to the capability of client to switch protocols may be operated via application-specific logic integrated with other components of the computing device <b>800</b> on the single integrated circuit (chip). Embodiments of the disclosure may also be practiced using other technologies capable of performing logical operations such as, for example, AND, OR, and NOT, including but not limited to mechanical, optical, fluidic, and quantum technologies. In addition, embodiments of the disclosure may be practiced within a general purpose computer or in any other circuits or systems.</p><p id="p-0085" num="0084">The computing device <b>800</b> may also have one or more input device(s) <b>812</b> such as a keyboard, a mouse, a pen, a sound or voice input device, a touch or swipe input device, etc. The output device(s) <b>814</b> such as a display, speakers, a printer, etc. may also be included. The aforementioned devices are examples and others may be used. The computing device <b>800</b> may include one or more communication connections <b>816</b> allowing communications with other computing devices <b>850</b>. Examples of suitable communication connections <b>816</b> include, but are not limited to, radio frequency (RF) transmitter, receiver, and/or transceiver circuitry; universal serial bus (USB), parallel, and/or serial ports.</p><p id="p-0086" num="0085">The term computer readable media as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, or program modules. The system memory <b>804</b>, the removable storage device <b>809</b>, and the non-removable storage device <b>810</b> are all computer storage media examples (e.g., memory storage). Computer storage media may include RAM, ROM, electrically erasable read-only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other article of manufacture which can be used to store information and which can be accessed by the computing device <b>800</b>. Any such computer storage media may be part of the computing device <b>800</b>. Computer storage media does not include a carrier wave or other propagated or modulated data signal.</p><p id="p-0087" num="0086">Communication media may be embodied by computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave or other transport mechanism, and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media may include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, radio frequency (RF), infrared, and other wireless media.</p><p id="p-0088" num="0087"><figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref> illustrate a mobile computing device <b>900</b>, for example, a mobile telephone, a smart phone, wearable computer (such as a smart watch), a tablet computer, a laptop computer, and the like, with which embodiments of the disclosure may be practiced. In some aspects, the client may be a mobile computing device. With reference to <figref idref="DRAWINGS">FIG. <b>9</b>A</figref>, one aspect of a mobile computing device <b>900</b> for implementing the aspects is illustrated. In a basic configuration, the mobile computing device <b>900</b> is a handheld computer having both input elements and output elements. The mobile computing device <b>900</b> typically includes a display <b>905</b> and one or more input buttons <b>910</b> that allow the user to enter information into the mobile computing device <b>900</b>. The display <b>905</b> of the mobile computing device <b>900</b> may also function as an input device (e.g., a touch screen display). If included, an optional side input element <b>915</b> allows further user input. The side input element <b>915</b> may be a rotary switch, a button, or any other type of manual input element. In alternative aspects, mobile computing device <b>900</b> may incorporate more or less input elements. For example, the display <b>905</b> may not be a touch screen in some embodiments. In yet another alternative embodiment, the mobile computing device <b>900</b> is a portable phone system, such as a cellular phone. The mobile computing device <b>900</b> may also include an optional keypad <b>935</b>. Optional keypad <b>935</b> may be a physical keypad or a &#x201c;soft&#x201d; keypad generated on the touch screen display. In various embodiments, the output elements include the display <b>905</b> for showing a graphical user interface (GUI), a visual indicator <b>920</b> (e.g., a light emitting diode), and/or an audio transducer <b>925</b> (e.g., a speaker). In some aspects, the mobile computing device <b>900</b> incorporates a vibration transducer for providing the user with tactile feedback. In yet another aspect, the mobile computing device <b>900</b> incorporates input and/or output ports, such as an audio input (e.g., a microphone jack), an audio output (e.g., a headphone jack), and a video output (e.g., a HDMI port) for sending signals to or receiving signals from an external device.</p><p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> is a block diagram illustrating the architecture of one aspect of a mobile computing device. That is, the mobile computing device <b>900</b> can incorporate a system (e.g., an architecture) <b>902</b> to implement some aspects. In one embodiment, the system <b>902</b> is implemented as a &#x201c;smart phone&#x201d; capable of running one or more applications (e.g., browser, e-mail, calendaring, contact managers, messaging clients, games, and media clients/players). In some aspects, the system <b>902</b> is integrated as a computing device, such as an integrated personal digital assistant (PDA) and wireless phone.</p><p id="p-0090" num="0089">One or more application programs <b>966</b> may be loaded into the memory <b>962</b> and run on or in association with the operating system <b>964</b>. Examples of the application programs include phone dialer programs, e-mail programs, personal information management (PIM) programs, word processing programs, spreadsheet programs, Internet browser programs, messaging programs, and so forth. The system <b>902</b> also includes a non-volatile storage area <b>968</b> within the memory <b>962</b>. The non-volatile storage area <b>968</b> may be used to store persistent information that should not be lost if the system <b>902</b> is powered down. The application programs <b>966</b> may use and store information in the non-volatile storage area <b>968</b>, such as e-mail or other messages used by an e-mail application, and the like. A synchronization application (not shown) also resides on the system <b>902</b> and is programmed to interact with a corresponding synchronization application resident on a host computer to keep the information stored in the non-volatile storage area <b>968</b> synchronized with corresponding information stored at the host computer. As should be appreciated, other applications may be loaded into the memory <b>962</b> and run on the mobile computing device <b>900</b> described herein (e.g., search engine, extractor module, relevancy ranking module, answer scoring module, etc.).</p><p id="p-0091" num="0090">The system <b>902</b> has a power supply <b>970</b>, which may be implemented as one or more batteries. The power supply <b>970</b> might further include an external power source, such as an AC adapter or a powered docking cradle that supplements or recharges the batteries.</p><p id="p-0092" num="0091">The system <b>902</b> may also include a radio interface layer <b>972</b> that performs the function of transmitting and receiving radio frequency communications. The radio interface layer <b>972</b> facilitates wireless connectivity between the system <b>902</b> and the &#x201c;outside world,&#x201d; via a communications carrier or service provider. Transmissions to and from the radio interface layer <b>972</b> are conducted under control of the operating system <b>964</b>. In other words, communications received by the radio interface layer <b>972</b> may be disseminated to the application programs <b>966</b> via the operating system <b>964</b>, and vice versa.</p><p id="p-0093" num="0092">The visual indicator <b>920</b> may be used to provide visual notifications, and/or an audio interface <b>974</b> may be used for producing audible notifications via the audio transducer <b>925</b>. In the illustrated embodiment, the visual indicator <b>920</b> is a light emitting diode (LED) and the audio transducer <b>925</b> is a speaker. These devices may be directly coupled to the power supply <b>970</b> so that when activated, they remain on for a duration dictated by the notification mechanism even though the processor <b>960</b> and other components might shut down for conserving battery power. The LED may be programmed to remain on indefinitely until the user takes action to indicate the powered-on status of the device. The audio interface <b>974</b> is used to provide audible signals to and receive audible signals from the user. For example, in addition to being coupled to the audio transducer <b>925</b>, the audio interface <b>974</b> may also be coupled to a microphone to receive audible input, such as to facilitate a telephone conversation. In accordance with embodiments of the present disclosure, the microphone may also serve as an audio sensor to facilitate control of notifications, as will be described below. The system <b>902</b> may further include a video interface <b>976</b> that enables an operation of an on-board camera <b>930</b> to record still images, video stream, and the like.</p><p id="p-0094" num="0093">A mobile computing device <b>900</b> implementing the system <b>902</b> may have additional features or functionality. For example, the mobile computing device <b>900</b> may also include additional data storage devices (removable and/or non-removable) such as, magnetic disks, optical disks, or tape. Such additional storage is illustrated in <figref idref="DRAWINGS">FIG. <b>9</b>B</figref> by the non-volatile storage area <b>968</b>.</p><p id="p-0095" num="0094">Data/information generated or captured by the mobile computing device <b>900</b> and stored via the system <b>902</b> may be stored locally on the mobile computing device <b>900</b>, as described above, or the data may be stored on any number of storage media that may be accessed by the device via the radio interface layer <b>972</b> or via a wired connection between the mobile computing device <b>900</b> and a separate computing device associated with the mobile computing device <b>900</b>, for example, a server computer in a distributed computing network, such as the Internet. As should be appreciated such data/information may be accessed via the mobile computing device <b>900</b> via the radio interface layer <b>972</b> or via a distributed computing network. Similarly, such data/information may be readily transferred between computing devices for storage and use according to well-known data/information transfer and storage means, including electronic mail and collaborative data/information sharing systems.</p><p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates one aspect of the architecture of a system for processing data received at a computing system from a remote source, such as a personal computer <b>1004</b>, tablet computing device <b>1006</b>, or mobile computing device <b>1008</b>, as described above. Content displayed at server device <b>1002</b> may be stored in different communication channels or other storage types. For example, various documents may be stored using a directory service <b>1022</b>, a web portal <b>1024</b>, a mailbox service <b>1026</b>, an instant messaging store <b>1028</b>, or a social networking site <b>1030</b>. Query reformulation component <b>1021</b> may be employed by a client that communicates with server device <b>1002</b>, and/or ontology data generation component <b>1020</b> may be employed by server device <b>1002</b>. The server device <b>1002</b> may provide data to and from a client computing device such as a personal computer <b>1004</b>, a tablet computing device <b>1006</b> and/or a mobile computing device <b>1008</b> (e.g., a smart phone) through a network <b>1015</b>. By way of example, the computer system described above may be embodied in a personal computer <b>1004</b>, a tablet computing device <b>1006</b> and/or a mobile computing device <b>1008</b> (e.g., a smart phone). Any of these embodiments of the computing devices may obtain content from the store <b>1016</b>, in addition to receiving graphical data useable to be either pre-processed at a graphic-originating system, or post-processed at a receiving computing system.</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates an exemplary tablet computing device <b>1100</b> that may execute one or more aspects disclosed herein. In addition, the aspects and functionalities described herein may operate over distributed systems (e.g., cloud-based computing systems), where application functionality, memory, data storage and retrieval and various processing functions may be operated remotely from each other over a distributed computing network, such as the Internet or an intranet. User interfaces and information of various types may be displayed via on-board computing device displays or via remote display units associated with one or more computing devices. For example user interfaces and information of various types may be displayed and interacted with on a wall surface onto which user interfaces and information of various types are projected. Interaction with the multitude of computing systems with which embodiments of the invention may be practiced include, keystroke entry, touch screen entry, voice or other audio entry, gesture entry where an associated computing device is equipped with detection (e.g., camera) functionality for capturing and interpreting user gestures for controlling the functionality of the computing device, and the like.</p><p id="p-0098" num="0097">As will be understood from the foregoing disclosure, one aspect of the technology relates to a system comprising: at least one processor; and a memory storing instructions that when executed by the at least one processor perform a set of operations. The operations comprise: receiving a query for information stored in an isolated collection, wherein the query comprises one or more parameters; accessing ontology data relating to the isolated collection, wherein the ontology data comprises uniqueness information; identifying, using at least the uniqueness information, a level of uniqueness for each of the one or more parameters; determining, for each of the one or more parameters, a query order based on the uniqueness information identified for the parameter; generating a more performant query for the query, wherein the more performant query is comprised of the one or more parameters in the determined query order; and executing the more performant query to identify information in the isolated collection. In an example, the ontology data further comprises topology information, and the set of operations further comprises: identifying an anchor and one or more resource types for the query, wherein the anchor relates to at least one of the one or more resource types; identifying, using the topology information, an average number of relationships for each of the one or more resource types; and determining, using the average number of relationships for each of the one or more resource types, whether the anchor for the query should relate to a different group of one or more of the one or more of resource types. In another example, generating the more performant query further comprises: when it is determined that the anchor query should relate to a different group of one or more of the one or more resource types, generating the more performant query such that the different group of one or more of the one or more resource types relates to the anchor of the more performant query. In a further example, the isolated collection is associated with a related isolated collection, and the ontology data relating to the isolated collection was generated using the related isolated collection. In yet another example, the ontology data relating to the isolated collection is updated when information in the isolated collection is at least one of added, modified, and deleted. In a further still example, the ontology data relating to the isolated collection is updated periodically. In another example, the more performant query is more efficient than the received query when executed to identify information in the isolated collection.</p><p id="p-0099" num="0098">In another aspect, the technology relates to a computer-implemented method for generating ontology data for an isolated collection. The method comprises: receiving, from a computing device, a request comprising a change to an isolated collection; determining whether the change is related to one of a resource and a property; when it is determined that the change relates to a resource, generating a key for the resource; when it is determined that the change relates to a property, generating a key for the property; generating uniqueness information based on the change, wherein the uniqueness information comprises a uniqueness index; associating the generated uniqueness information with the key; and storing, using the key, the generated uniqueness information. In an example, the method further comprises: determining whether the change is related to a relationship; when it is determined that the change relates to a relationship, identifying a plurality of resources associated with the relationship; for each of the plurality of resources: generating a key for the resource based on a resource type for the resource; generating topology information, wherein the topology information indicates an average number of relationships for the resource type; associating the generated topology information with the key; and storing, using the key, the generated topology information. In another example, storing the generated uniqueness information comprises storing the generated uniqueness information using a PATRICIA tree. In a further example, storing the generated topology information comprises storing the generated topology information using a PATRICIA tree. In yet another example, the uniqueness index indicates a relative level of uniqueness for one of a resource and a property as compared to at least one of a second resource and a second property. In a further still example, the topology information indicates a relative level of connectedness for a resource type as compared to a second resource type.</p><p id="p-0100" num="0099">In another aspect, the technology relates to another computer-implemented method for generating a more performant query for information stored in an isolated collection. The method comprises: receiving a query for information stored in an isolated collection; identifying an anchor and one or more resource types for the query, wherein the anchor is at least one of the one or more resource types; accessing ontology data relating to the isolated collection, wherein the ontology data comprises topology information; identifying, using the topology information, an average number of relationships for each of the one or more resource types; determining, using the average number of relationships for each of the one or more resource types, whether the anchor for the query should be a different group of one or more of the one or more resource types; when it is determined that the anchor query should be a different group of one or more of the one or more resource types, generating a more performant query such that the different group of one or more of the one or more resource types is the anchor for the more performant query; and executing the more performant query to identify information in the isolated collection. In an example, the ontology data further comprises uniqueness information and the method further comprises: identifying one or more parameters of the query; identifying, using the uniqueness information, a level of uniqueness for each of the one or more parameters; and determining, for each of the one or more parameters, a query order based on the uniqueness information identified for the parameter. In another example, generating the more performant query further comprises reformulating the query such that one or more parameters of the more performant query are in the determined query order. In a further example, the isolated collection is associated with a related isolated collection, and the ontology data relating to the isolated collection was generated from the related isolated collection. In yet another example, the ontology data relating to the isolated collection is updated when information in the isolated collection is at least one of added, modified, and deleted. In a further still example, the ontology data relating to the isolated collection is updated periodically. In an example, the ontology data is stored in a PATRICIA tree.</p><p id="p-0101" num="0100">Aspects of the present disclosure, for example, are described above with reference to block diagrams and/or operational illustrations of methods, systems, and computer program products according to aspects of the disclosure. The functions/acts noted in the blocks may occur out of the order as shown in any flowchart. For example, two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order, depending upon the functionality/acts involved.</p><p id="p-0102" num="0101">The description and illustration of one or more aspects provided in this application are not intended to limit or restrict the scope of the disclosure as claimed in any way. The aspects, examples, and details provided in this application are considered sufficient to convey possession and enable others to make and use the best mode of claimed disclosure. The claimed disclosure should not be construed as being limited to any aspect, example, or detail provided in this application. Regardless of whether shown and described in combination or separately, the various features (both structural and methodological) are intended to be selectively included or omitted to produce an embodiment with a particular set of features. Having been provided with the description and illustration of the present application, one skilled in the art may envision variations, modifications, and alternate aspects falling within the spirit of the broader aspects of the general inventive concept embodied in this application that do not depart from the broader scope of the claimed disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-001-7" num="001-7"><claim-text><b>1</b>.-<b>7</b>. (canceled)</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A computer-implemented method for generating ontology data for an isolated collection, the method comprising:<claim-text>receiving, from a computing device, a request comprising a change to an isolated collection;</claim-text><claim-text>determining whether the change is related to a resource or a property;</claim-text><claim-text>when it is determined that the change relates to the resource, generating a key for the resource;</claim-text><claim-text>when it is determined that the change relates to the property, generating a key for the property;</claim-text><claim-text>generating uniqueness information based on the change, wherein the uniqueness information comprises a uniqueness index;</claim-text><claim-text>associating the generated uniqueness information with the key; and</claim-text><claim-text>storing, using the key, the generated uniqueness information.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>determining whether the change is related to a relationship;</claim-text><claim-text>when it is determined that the change relates to a relationship, identifying a plurality of resources associated with the relationship;</claim-text><claim-text>for each of the plurality of resources:<claim-text>generating a key for the resource based on a resource type for the resource;</claim-text><claim-text>generating topology information, wherein the topology information indicates an average number of relationships for the resource type;</claim-text><claim-text>associating the generated topology information with the key; and</claim-text><claim-text>storing, using the key, the generated topology information.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein storing the generated uniqueness information comprises storing the generated uniqueness information using a PATRICIA tree.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer-implemented method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein storing the generated topology information comprises storing the generated topology information using a PATRICIA tree.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the uniqueness index indicates a relative level of uniqueness for one of a resource and a property as compared to at least one of a second resource and a second property.</claim-text></claim><claim id="CLM-13-20" num="13-20"><claim-text><b>13</b>.-<b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The computer-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the key for the resource is a hash of a name of the resource.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The computer-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the key for the property is a hash of a value of the property.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The computer-implemented method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the key for the property is used to store and retrieve information associated with the property.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The computer-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein generating the uniqueness information comprises:<claim-text>determining whether pre-existing uniqueness information is available;</claim-text><claim-text>if it is determined that the pre-existing uniqueness information is available, using the pre-existing uniqueness information to generate the uniqueness index.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The computer-implemented method of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein generating the uniqueness information further comprises:<claim-text>if it is determined that the pre-existing uniqueness information is not available, generating a new uniqueness index as the uniqueness index.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The computer-implemented method of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the uniqueness index is generated algorithmically based on at least one of:<claim-text>an observed uniqueness of a set of properties, the set of properties comprising at least the property; or</claim-text><claim-text>a frequency measurement relating to how often the property occurs within the isolated collection.</claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The computer-implemented method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein storing the generated uniqueness information comprises:<claim-text>storing the generated uniqueness information in a data store comprising ontology data for the isolated collection.</claim-text></claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. A system comprising:<claim-text>a processor; and</claim-text><claim-text>memory coupled to the processor, the memory comprising computer executable instructions that, when executed by the processor, perform operations comprising:<claim-text>receiving, from a computing device, a request comprising an operation related to an isolated collection;</claim-text><claim-text>determining an information type associated with the operation, the information type including at least one of a property or a resource;</claim-text><claim-text>generating a key based on the information type;</claim-text><claim-text>generating uniqueness information for the operation;</claim-text><claim-text>generating a uniqueness index for the information type based on the uniqueness information; and</claim-text><claim-text>storing, using the key, the uniqueness index.</claim-text></claim-text></claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The system of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the operation corresponds to at least one of modifying, accessing, or deleting information within the isolated collection.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The system of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein:<claim-text>if it is determined that the information type is the property, the key is generated based on a name of the property.</claim-text></claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The system of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the key is generated further based on a value corresponding to the name of the property, the key being a hash of the name and the value.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The system of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein:<claim-text>if it is determined that the information type is the resource, the key is generated based on a resource type of the resource.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The system of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the key is a hash of a name of the resource type.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The system of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the isolated collection identifies a set of resources and a set of relationships, each resource in the set of resources being identified by a resource identifier.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. A device comprising:<claim-text>a processor; and</claim-text><claim-text>memory coupled to the processor, the memory comprising computer executable instructions that, when executed by the processor, perform operations comprising:<claim-text>receiving a request to modify an isolated collection;</claim-text><claim-text>determining the request is associated with a relationship;</claim-text><claim-text>determining a plurality of resources associated with the relationship;</claim-text><claim-text>generating a key for each resource in the plurality of resources based on a resource type for each resource;</claim-text><claim-text>generating topology information for each key; and</claim-text><claim-text>storing the topology information.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>