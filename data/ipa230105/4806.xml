<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004807A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004807</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17944387</doc-number><date>20220914</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20190101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20120101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>N</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>10</main-group><subgroup>0631</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DETERMINING OPTIMAL AUGMENTATIONS FOR A TRAINING DATA SET</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16818891</doc-number><date>20200313</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17944387</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Sivakumar</last-name><first-name>Gandhi</first-name><address><city>Bentleigh</city><country>AU</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Ekambaram</last-name><first-name>Vijay</first-name><address><city>Chennai</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Sivaswamy</last-name><first-name>Hemant Kumar</first-name><address><city>Pune</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer-implemented method according to one embodiment includes applying a predetermined augmentation to the sample set of training data to create an augmented sample set, training a model with the augmented sample set, determining a performance of the trained model, and assigning a weight to the predetermined augmentation for the training data set based on the determined performance. A determination is made as to whether to apply the predetermined augmentation to a larger training data set before the training data set is applied to the model, based on the weight assigned to the predetermined augmentation.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="213.11mm" wi="119.97mm" file="US20230004807A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="162.73mm" wi="159.77mm" file="US20230004807A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="161.37mm" wi="179.32mm" file="US20230004807A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="151.89mm" wi="170.35mm" file="US20230004807A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="240.62mm" wi="111.76mm" file="US20230004807A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="252.65mm" wi="122.00mm" file="US20230004807A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="252.65mm" wi="121.24mm" file="US20230004807A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="252.65mm" wi="199.05mm" file="US20230004807A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="252.65mm" wi="120.48mm" file="US20230004807A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="252.65mm" wi="121.92mm" file="US20230004807A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="252.65mm" wi="125.65mm" file="US20230004807A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">The present invention relates to machine learning, and more particularly, this invention relates to augmenting training data for machine learning models.</p><p id="p-0003" num="0002">Machine learning models are often used to perform tasks such as classification, identification, etc. Such models need to be trained before they are implemented; however, an inadequate quality and/or quantity of training data may result in overfitting or underfitting of such training data to a model, which may negatively impact a performance of the trained model.</p><heading id="h-0002" level="1">BRIEF SUMMARY</heading><p id="p-0004" num="0003">A computer-implemented method according to one embodiment includes applying a predetermined augmentation to the sample set of training data to create an augmented sample set, training a model with the augmented sample set, determining a performance of the trained model, and assigning a weight to the predetermined augmentation for the training data set based on the determined performance. A determination is made as to whether to apply the predetermined augmentation to a larger training data set before the training data set is applied to the model, based on the weight assigned to the predetermined augmentation.</p><p id="p-0005" num="0004">According to another embodiment, a computer program product for determining optimal augmentations for a training data set includes a computer readable storage medium having program instructions embodied therewith. The program instructions are executable by a processor to cause the processor to perform the foregoing method.</p><p id="p-0006" num="0005">According to another embodiment, a system includes a processor; and logic integrated with the processor, executable by the processor, or integrated with and executable by the processor, where the logic is configured to cause performance of the foregoing method.</p><p id="p-0007" num="0006">Other aspects and embodiments of the present invention will become apparent from the following detailed description, which, when taken in conjunction with the drawings, illustrate by way of example the principles of the invention.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a cloud computing environment in accordance with one embodiment of the present invention.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts abstraction model layers in accordance with one embodiment of the present invention.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a cloud computing node in accordance with one embodiment of the present invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a tiered data storage system in accordance with one embodiment of the present invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a flowchart of a method for determining optimal augmentations for a training data set, in accordance with one embodiment of the present invention.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a flowchart of a method for identifying predetermined optimal augmentations for a training data set, in accordance with one embodiment of the present invention.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a flowchart of a method for creating embedding representations, in accordance with one embodiment of the present invention.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a flowchart of a method for determining a similarity between data sets, in accordance with one embodiment of the present invention.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a flowchart of a method for adjusting a weighting of augmentations, in accordance with one embodiment of the present invention.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a flowchart of a method for performing training instance forking, in accordance with one embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0018" num="0017">The following description is made for the purpose of illustrating the general principles of the present invention and is not meant to limit the inventive concepts claimed herein. Further, particular features described herein can be used in combination with other described features in each of the various possible combinations and permutations.</p><p id="p-0019" num="0018">Unless otherwise specifically defined herein, all terms are to be given their broadest possible interpretation including meanings implied from the specification as well as meanings understood by those skilled in the art and/or as defined in dictionaries, treatises, etc.</p><p id="p-0020" num="0019">It must also be noted that, as used in the specification and the appended claims, the singular forms &#x201c;a,&#x201d; &#x201c;an&#x201d; and &#x201c;the&#x201d; include plural referents unless otherwise specified. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p><p id="p-0021" num="0020">The following description discloses several embodiments of determining optimal augmentations for a training data set.</p><p id="p-0022" num="0021">In one general embodiment, a computer-implemented method includes receiving a training data set to be applied to a model; selecting a subset of the training data set as a sample set; for each of a plurality of predetermined augmentations, applying the predetermined augmentation to the sample set to create an augmented sample set, training the model with the augmented sample set, determining a performance of the trained model, and assigning a weight to the predetermined augmentation for the training data set, based on the determined performance; and selecting one or more of the plurality of predetermined augmentations to be applied to the training data set before the training data set is applied to the model, based on the weight assigned to each of the plurality of predetermined augmentations.</p><p id="p-0023" num="0022">In another general embodiment, a computer program product for determining optimal augmentations for a training data set includes a computer readable storage medium having program instructions embodied therewith, where the computer readable storage medium is not a transitory signal per se, and where the program instructions are executable by a processor to cause the processor to perform a method including receiving, by the processor, a training data set to be applied to a model; selecting, by the processor, a subset of the training data set as a sample set; for each of a plurality of predetermined augmentations, applying, by the processor, the predetermined augmentation to the sample set to create an augmented sample set, training, by the processor, the model with the augmented sample set, determining, by the processor, a performance of the trained model, and assigning, by the processor, a weight to the predetermined augmentation for the training data set, based on the determined performance; and selecting, by the processor, one or more of the plurality of predetermined augmentations to be applied to the training data set before the training data set is applied to the model, based on the weight assigned to each of the plurality of predetermined augmentations.</p><p id="p-0024" num="0023">In another general embodiment, a system includes a processor; and logic integrated with the processor, executable by the processor, or integrated with and executable by the processor, where the logic is configured to receive a training data set to be applied to a model; select a subset of the training data set as a sample set; for each of a plurality of predetermined augmentations, apply the predetermined augmentation to the sample set to create an augmented sample set, train the model with the augmented sample set, determine a performance of the trained model, and assign a weight to the predetermined augmentation for the training data set, based on the determined performance; and select one or more of the plurality of predetermined augmentations to be applied to the training data set before the training data set is applied to the model, based on the weight assigned to each of the plurality of predetermined augmentations.</p><p id="p-0025" num="0024">It is to be understood that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.</p><p id="p-0026" num="0025">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p><p id="p-0027" num="0026">Characteristics are as follows:</p><p id="p-0028" num="0027">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p><p id="p-0029" num="0028">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).</p><p id="p-0030" num="0029">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).</p><p id="p-0031" num="0030">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p><p id="p-0032" num="0031">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.</p><p id="p-0033" num="0032">Service Models are as follows:</p><p id="p-0034" num="0033">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based e-mail). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p><p id="p-0035" num="0034">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p><p id="p-0036" num="0035">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p><p id="p-0037" num="0036">Deployment Models are as follows:</p><p id="p-0038" num="0037">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p><p id="p-0039" num="0038">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p><p id="p-0040" num="0039">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p><p id="p-0041" num="0040">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).</p><p id="p-0042" num="0041">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.</p><p id="p-0043" num="0042">Referring now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, illustrative cloud computing environment <b>50</b> is depicted. As shown, cloud computing environment <b>50</b> includes one or more cloud computing nodes <b>10</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>54</b>A, desktop computer <b>54</b>B, laptop computer <b>54</b>C, and/or automobile computer system <b>54</b>N may communicate. Nodes <b>10</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>50</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>54</b>A-N shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are intended to be illustrative only and that computing nodes <b>10</b> and cloud computing environment <b>50</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p><p id="p-0044" num="0043">Referring now to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a set of functional abstraction layers provided by cloud computing environment <b>50</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) is shown. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p><p id="p-0045" num="0044">Hardware and software layer <b>60</b> includes hardware and software components. Examples of hardware components include: mainframes <b>61</b>; RISC (Reduced Instruction Set Computer) architecture based servers <b>62</b>; servers <b>63</b>; blade servers <b>64</b>; storage devices <b>65</b>; and networks and networking components <b>66</b>. In some embodiments, software components include network application server software <b>67</b> and database software <b>68</b>.</p><p id="p-0046" num="0045">Virtualization layer <b>70</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers <b>71</b>; virtual storage <b>72</b>; virtual networks <b>73</b>, including virtual private networks; virtual applications and operating systems <b>74</b>; and virtual clients <b>75</b>.</p><p id="p-0047" num="0046">In one example, management layer <b>80</b> may provide the functions described below. Resource provisioning <b>81</b> provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing <b>82</b> provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal <b>83</b> provides access to the cloud computing environment for consumers and system administrators. Service level management <b>84</b> provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment <b>85</b> provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p><p id="p-0048" num="0047">Workloads layer <b>90</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation <b>91</b>; software development and lifecycle management <b>92</b>; virtual classroom education delivery <b>93</b>; data analytics processing <b>94</b>; transaction processing <b>95</b>; and data augmentation analysis <b>96</b>.</p><p id="p-0049" num="0048">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a schematic of an example of a cloud computing node is shown. Cloud computing node <b>10</b> is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless, cloud computing node <b>10</b> is capable of being implemented and/or performing any of the functionality set forth hereinabove.</p><p id="p-0050" num="0049">In cloud computing node <b>10</b> there is a computer system/server <b>12</b>, which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and/or configurations that may be suitable for use with computer system/server <b>12</b> include, but are not limited to, personal computer systems, server computer systems, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.</p><p id="p-0051" num="0050">Computer system/server <b>12</b> may be described in the general context of computer system-executable instructions, such as program modules, being executed by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. Computer system/server <b>12</b> may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.</p><p id="p-0052" num="0051">As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, computer system/server <b>12</b> in cloud computing node <b>10</b> is shown in the form of a general-purpose computing device. The components of computer system/server <b>12</b> may include, but are not limited to, one or more processors or processing units <b>16</b>, a system memory <b>28</b>, and a bus <b>18</b> that couples various system components including system memory <b>28</b> to processor <b>16</b>.</p><p id="p-0053" num="0052">Bus <b>18</b> represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus.</p><p id="p-0054" num="0053">Computer system/server <b>12</b> typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system/server <b>12</b>, and it includes both volatile and non-volatile media, removable and non-removable media.</p><p id="p-0055" num="0054">System memory <b>28</b> can include computer system readable media in the form of volatile memory, such as random access memory (RAM) <b>30</b> and/or cache memory <b>32</b>. Computer system/server <b>12</b> may further include other removable/non-removable, volatile/non-volatile computer system storage media. By way of example only, storage system <b>34</b> can be provided for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a &#x201c;hard drive&#x201d;). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a &#x201c;floppy disk&#x201d;), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM or other optical media can be provided. In such instances, each can be connected to bus <b>18</b> by one or more data media interfaces. As will be further depicted and described below, memory <b>28</b> may include at least one program product having a set (e.g., at least one) of program modules that are configured to carry out the functions of embodiments of the invention.</p><p id="p-0056" num="0055">Program/utility <b>40</b>, having a set (at least one) of program modules <b>42</b>, may be stored in memory <b>28</b> by way of example, and not limitation, as well as an operating system, one or more application programs, other program modules, and program data. Each of the operating system, one or more application programs, other program modules, and program data or some combination thereof, may include an implementation of a networking environment. Program modules <b>42</b> generally carry out the functions and/or methodologies of embodiments of the invention as described herein.</p><p id="p-0057" num="0056">Computer system/server <b>12</b> may also communicate with one or more external devices <b>14</b> such as a keyboard, a pointing device, a display <b>24</b>, etc.; one or more devices that enable a user to interact with computer system/server <b>12</b>; and/or any devices (e.g., network card, modem, etc.) that enable computer system/server <b>12</b> to communicate with one or more other computing devices. Such communication can occur via Input/Output (I/O) interfaces <b>22</b>. Still yet, computer system/server <b>12</b> can communicate with one or more networks such as a local area network (LAN), a general wide area network (WAN), and/or a public network (e.g., the Internet) via network adapter <b>20</b>. As depicted, network adapter <b>20</b> communicates with the other components of computer system/server <b>12</b> via bus <b>18</b>. It should be understood that although not shown, other hardware and/or software components could be used in conjunction with computer system/server <b>12</b>. Examples, include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, RAID systems, tape drives, and data archival storage systems, etc.</p><p id="p-0058" num="0057">Now referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a storage system <b>400</b> is shown according to one embodiment. Note that some of the elements shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be implemented as hardware and/or software, according to various embodiments. The storage system <b>400</b> may include a storage system manager <b>412</b> for communicating with a plurality of media on at least one higher storage tier <b>402</b> and at least one lower storage tier <b>406</b>. The higher storage tier(s) <b>402</b> preferably may include one or more random access and/or direct access media <b>404</b>, such as hard disks in hard disk drives (HDDs), nonvolatile memory (NVM), solid state memory in solid state drives (SSDs), flash memory, SSD arrays, flash memory arrays, etc., and/or others noted herein or known in the art. The lower storage tier(s) <b>406</b> may preferably include one or more lower performing storage media <b>408</b>, including sequential access media such as magnetic tape in tape drives and/or optical media, slower accessing HDDs, slower accessing SSDs, etc., and/or others noted herein or known in the art. One or more additional storage tiers <b>416</b> may include any combination of storage memory media as desired by a designer of the system <b>400</b>. Also, any of the higher storage tiers <b>402</b> and/or the lower storage tiers <b>406</b> may include some combination of storage devices and/or storage media.</p><p id="p-0059" num="0058">The storage system manager <b>412</b> may communicate with the storage media <b>404</b>, <b>408</b> on the higher storage tier(s) <b>402</b> and lower storage tier(s) <b>406</b> through a network <b>410</b>, such as a storage area network (SAN), as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, or some other suitable network type. The storage system manager <b>412</b> may also communicate with one or more host systems (not shown) through a host interface <b>414</b>, which may or may not be a part of the storage system manager <b>412</b>. The storage system manager <b>412</b> and/or any other component of the storage system <b>400</b> may be implemented in hardware and/or software, and may make use of a processor (not shown) for executing commands of a type known in the art, such as a central processing unit (CPU), a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), etc. Of course, any arrangement of a storage system may be used, as will be apparent to those of skill in the art upon reading the present description.</p><p id="p-0060" num="0059">In more embodiments, the storage system <b>400</b> may include any number of data storage tiers, and may include the same or different storage memory media within each storage tier. For example, each data storage tier may include the same type of storage memory media, such as HDDs, SSDs, sequential access media (tape in tape drives, optical disk in optical disk drives, etc.), direct access media (CD-ROM, DVD-ROM, etc.), or any combination of media storage types. In one such configuration, a higher storage tier <b>402</b>, may include a majority of SSD storage media for storing data in a higher performing storage environment, and remaining storage tiers, including lower storage tier <b>406</b> and additional storage tiers <b>416</b> may include any combination of SSDs, HDDs, tape drives, etc., for storing data in a lower performing storage environment. In this way, more frequently accessed data, data having a higher priority, data needing to be accessed more quickly, etc., may be stored to the higher storage tier <b>402</b>, while data not having one of these attributes may be stored to the additional storage tiers <b>416</b>, including lower storage tier <b>406</b>. Of course, one of skill in the art, upon reading the present descriptions, may devise many other combinations of storage media types to implement into different storage schemes, according to the embodiments presented herein.</p><p id="p-0061" num="0060">According to some embodiments, the storage system (such as <b>400</b>) may include logic configured to receive a request to open a data set, logic configured to determine if the requested data set is stored to a lower storage tier <b>406</b> of a tiered data storage system <b>400</b> in multiple associated portions, logic configured to move each associated portion of the requested data set to a higher storage tier <b>402</b> of the tiered data storage system <b>400</b>, and logic configured to assemble the requested data set on the higher storage tier <b>402</b> of the tiered data storage system <b>400</b> from the associated portions.</p><p id="p-0062" num="0061">Of course, this logic may be implemented as a method on any device and/or system or as a computer program product, according to various embodiments.</p><p id="p-0063" num="0062">Now referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a flowchart of a method <b>500</b> is shown according to one embodiment. The method <b>500</b> may be performed in accordance with the present invention in any of the environments depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>, among others, in various embodiments. Of course, more or less operations than those specifically described in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be included in method <b>500</b>, as would be understood by one of skill in the art upon reading the present descriptions.</p><p id="p-0064" num="0063">Each of the steps of the method <b>500</b> may be performed by any suitable component of the operating environment. For example, in various embodiments, the method <b>500</b> may be partially or entirely performed by one or more servers, computers, or some other device having one or more processors therein. The processor, e.g., processing circuit(s), chip(s), and/or module(s) implemented in hardware and/or software, and preferably having at least one hardware component may be utilized in any device to perform one or more steps of the method <b>500</b>. Illustrative processors include, but are not limited to, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), etc., combinations thereof, or any other suitable computing device known in the art.</p><p id="p-0065" num="0064">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, method <b>500</b> may initiate with operation <b>502</b>, where a training data set to be applied to a model is received. In one embodiment, the training data set may include data used to train the model to perform one or more operations. In another embodiment, the training data may include a plurality of instances of data (e.g., images, text, video, etc.), as well as an identification of one or more entities within the data (e.g., an identification of one or more objects within the images, one or more ground truth labels, etc.).</p><p id="p-0066" num="0065">Additionally, in one embodiment, the model may include a machine learning model (e.g., a neural network, etc.). For example, the model may perform one or more operations (e.g., classification, identification, etc.). In another embodiment, training data set may be received from a computing device (e.g., a server), one or more data storage locations (e.g., one or more databases), etc.</p><p id="p-0067" num="0066">Further, method <b>500</b> may proceed with operation <b>504</b>, where a subset of the training data set is selected as a sample set. In one embodiment, selecting the subset of the training data set may include identifying a predetermined percentage of the training data set as the sample set. In another embodiment, the subset may be selected randomly from the training data set. In yet another embodiment, the subset may be selected from the training data set according to one or more selection algorithms.</p><p id="p-0068" num="0067">Further still, method <b>500</b> may proceed with operation <b>506</b>, where for each of a plurality of predetermined augmentations, the predetermined augmentation is applied to the sample set to create an augmented sample set, the model is trained with the augmented sample set, a performance of the trained model is determined, and a weight is assigned to the predetermined augmentation for the training data set, based on the determined performance. In one embodiment, each of the plurality of predetermined augmentations may include a process (e.g., an application, etc.) that changes one or more aspects of each data instance within the training data set to create an augmented data set. For example, using an image as an example of a data instance within the sample set, the one or more aspects may include an orientation of one or more objects within the image, a positioning of one or more objects within the image, a size of one or more objects within the image, a shading of the image, an amount of noise present in the image, a perspective of the image, etc.</p><p id="p-0069" num="0068">For example, a first augmentation may include a random rotation of an input data image. For instance, given the sample set as input (where each data instance within the sample set is an image), the first augmentation may rotate each of the images within the sample set in a random direction, and may save the rotated images as the augmented sample set for the first augmentation. In another example, a second augmentation may include an addition of noise to an input data image. For instance, given the sample set as input (where each data instance within the sample set is an image), the second augmentation may add a predetermined amount of noise to each of the images within the sample set, and may save the altered images as the augmented sample set for the second augmentation.</p><p id="p-0070" num="0069">Also, in one embodiment, each of the plurality of predetermined augmentations may be associated with a predetermined level of randomness. In another embodiment, the plurality of predetermined augmentations may be applied to the sample set by automatically forking a large varied set of virtual training instances in a cloud environment to validate which of the plurality of predetermined augmentations has a highest performance for the sample set.</p><p id="p-0071" num="0070">In addition, in one embodiment, for each of the predetermined augmentations, the created augmented sample set may be input to the model as training data. In another embodiment, the model may be trained to perform one or more duties (e.g., image classification, etc.), based on the training data.</p><p id="p-0072" num="0071">Furthermore, in one embodiment, another instance of the model may be trained using a non-augmented sample set (e.g., a sample set without any augmentation). In another embodiment, additional data other than the subset of the training data set (e.g., a set of data different from the training data set, etc.) may be provided as input to both the model trained with the augmented sample set and the other instance of the model trained with the non-augmented sample set.</p><p id="p-0073" num="0072">Further still, in one embodiment, each instance of the additional data may have an associated label (e.g., an authenticated label provided by one or more human users). In another embodiment, a first output of the model trained with the augmented sample set may be determined. In yet another embodiment, a second output of the other instance of the model trained with the non-augmented sample set may be determined.</p><p id="p-0074" num="0073">Also, in one embodiment, the first output and the second output may be compared to labels associated with the additional data to determine an accuracy of the first output and an accuracy of the second output. For example, the accuracy may be associated with a validation loss for the trained model. In another example, a first trained model with a lower validation loss than a second trained model may have a higher accuracy than the second trained model.</p><p id="p-0075" num="0074">Additionally, in one embodiment, the weight assigned to the predetermined augmentation for the training data set may be determined based on the comparison of the first output to the second output. For example, a value of the weight may be proportional to an improvement of an accuracy of the first output (associated with the model trained with the augmented sample set) over an accuracy of the second output (associated with the model trained with the non-augmented sample set). In another example, if a first improvement in accuracy (associated with a first augmentation) is greater than a second improvement in accuracy (associated with a second augmentation), the first augmentation may me assigned a greater weight than the second augmentation.</p><p id="p-0076" num="0075">Further, in one embodiment, the weight may be assigned to a grouping of the predetermined augmentation, the training data set, and the model. For example, the weight may be stored, and may be linked to both the predetermined augmentation, the training data set, and the model.</p><p id="p-0077" num="0076">Further still, in one embodiment, a plurality of individual training instances may be constructed to determine weights for the plurality of predetermined augmentations. For example, the plurality of training instances may be created within a processing environment (e.g., a distributed processing environment, a cloud computing environment) utilizing one or more forking operations. In another example, each of a plurality of forked training instances may select a unique predetermined augmentation from the plurality of predetermined augmentations. In yet another example, each of a plurality of forked training instances may augment the sample set, train the model, determine performance, and assign a weight to the predetermined augmentation. In still another example, each of a plurality of forked training instances may operate in parallel.</p><p id="p-0078" num="0077">Also, method <b>500</b> may proceed with operation <b>508</b>, where one or more of the plurality of predetermined augmentations are selected to be applied to the training data set before the training data set is applied to the model, based on the weight assigned to each of the plurality of predetermined augmentations. In one embodiment, plurality of predetermined augmentations may be ranked based on their associated weights.</p><p id="p-0079" num="0078">In addition, in one embodiment, a predetermined number of augmentations having the highest weights may be selected to be applied to the training data set before the training data set is applied to the model. In another embodiment, the selected augmentations may be applied to the training data set to create an augmented training data set. In yet another embodiment, the augmented training data set may be input into the model to train the model to perform one or more operations (e.g., classification, identification, etc.).</p><p id="p-0080" num="0079">Furthermore, in one embodiment, one or more operations may then be performed by the trained model. For example, data may be input into the trained model, and the model may perform one or more operations (e.g., classification, identification, etc.) on the input data to create output data (e.g., a confidence score, a classification, an identification, etc.).</p><p id="p-0081" num="0080">In this way, one or more augmentations may be determined for a training data set that increase a performance and accuracy of a trained machine learning model implemented utilizing a hardware computing device. Further, multiple augmentations may be implemented and examined in parallel, which may improve a performance of a computing device comparing the augmentations.</p><p id="p-0082" num="0081">Now referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a flowchart of a method <b>600</b> for identifying predetermined optimal augmentations for a training data set is shown according to one embodiment. The method <b>600</b> may be performed in accordance with the present invention in any of the environments depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>, among others, in various embodiments. Of course, more or less operations than those specifically described in <figref idref="DRAWINGS">FIG. <b>6</b></figref> may be included in method <b>600</b>, as would be understood by one of skill in the art upon reading the present descriptions.</p><p id="p-0083" num="0082">Each of the steps of the method <b>600</b> may be performed by any suitable component of the operating environment. For example, in various embodiments, the method <b>600</b> may be partially or entirely performed by one or more servers, computers, or some other device having one or more processors therein. The processor, e.g., processing circuit(s), chip(s), and/or module(s) implemented in hardware and/or software, and preferably having at least one hardware component may be utilized in any device to perform one or more steps of the method <b>600</b>. Illustrative processors include, but are not limited to, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), etc., combinations thereof, or any other suitable computing device known in the art.</p><p id="p-0084" num="0083">As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, method <b>600</b> may initiate with operation <b>602</b>, where a current training data set to be applied to a model is received. In one embodiment, the current training data set may include data used to train the model to perform one or more operations. In another embodiment, the training data may include a plurality of instances of data (e.g., images, text, video, etc.), as well as an identification of one or more entities within the data (e.g., an identification of one or more objects within the images, one or more ground truth labels, etc.).</p><p id="p-0085" num="0084">Additionally, in one embodiment, the model may include a machine learning model (e.g., a neural network, etc.). In another embodiment, model may perform one or more operations (e.g., classification, identification, etc.). In still another embodiment, the current training data set may be received from a computing device (e.g., a server), one or more data storage locations (e.g., one or more databases), etc.</p><p id="p-0086" num="0085">Further, method <b>600</b> may proceed with operation <b>604</b>, where characteristics of the current training data set are identified. In one embodiment, the characteristics of the current training data set may include an embedding of the training data set. In another embodiment, the current training data set may be converted into an embedding using one or more embedding techniques (e.g., convolutional neural network (CNN) embedding, bidirectional encoder representations from transformers (BERT) embedding, etc.).</p><p id="p-0087" num="0086">Further still, in one embodiment, the embedding of the current training data set may include an N-dimensional vector created from the current training data set. In another embodiment, the embedding may be stored in an annoy index (e.g., a database for storing embedding representations, etc.).</p><p id="p-0088" num="0087">Also, method <b>600</b> may proceed with operation <b>606</b>, where the characteristics of the current training data set are compared to characteristics of each of a plurality of preexisting training data sets. In one embodiment, each of the plurality of preexisting training data sets may be converted into preexisting embedding representations. In another embodiment, each of these preexisting embedding representations may be compared to the embedding of the current training data set.</p><p id="p-0089" num="0088">In addition, in one embodiment, comparing embedding representations may include computing a cosine distance for each pair of data across two data sets. For example, these cosine distance values may be aggregated to determine a total score for the two data sets. In another embodiment, an aggregated cosine distance score may be individually computed for the current training data set and each of the plurality of preexisting training data sets.</p><p id="p-0090" num="0089">Furthermore, method <b>600</b> may proceed with operation <b>608</b>, where one of the plurality of preexisting training data sets having a highest similarity to the current training data set is determined, based on the comparing. In one embodiment, the aggregated cosine distance scores for the current training data set and each of the plurality of preexisting training data sets may be compared. In another embodiment, the one of the plurality of preexisting training data sets having the lowest aggregated cosine distance score with the current training data set may be determined to have the highest similarity to the current training data set.</p><p id="p-0091" num="0090">Further still, method <b>600</b> may proceed with operation <b>610</b>, where weights assigned to each of a plurality of predetermined augmentations for the determined preexisting training data set having the highest similarity to the training data set are identified. In one embodiment, each of a plurality of predetermined augmentations may be individually grouped with the determined preexisting training data set having the highest similarity to the training data set (as well as the model). In another embodiment, each of these groupings may have an associated weight (e.g., based on an effect created by training the model with the determined preexisting training data having the predetermined augmentation).</p><p id="p-0092" num="0091">Also, method <b>600</b> may proceed with operation <b>612</b>, where one or more of the plurality of predetermined augmentations are selected to be applied to the current training data set before the current training data set is applied to the model, based on the weights. In one embodiment, the grouping with the highest weight may be selected for application. In another embodiment, the predetermined augmentation associated with the selected grouping may be applied to the training data set to create an augmented training data set. In yet another embodiment, the model may be trained, utilizing the augmented training data set. In still another embodiment, one or more operations may then be performed by the trained model.</p><p id="p-0093" num="0092">In this way, by comparing characteristics of a current data set to existing training data sets instead of individually testing augmentations on the current data set, optimal augmentations may be determined for the current data set in an expedited manner, using fewer computing resources, which may improve a performance of a system determining such optimal augmentations.</p><p id="p-0094" num="0093">Discovering an Optimal Augmentation Matrix for Improved Bias-Variance Trade-Off in Classifiers</p><p id="p-0095" num="0094">Overfitting occurs when a statistical model or machine learning algorithm captures the noise of the data. Intuitively, overfitting occurs when the model or the algorithm fits the data too well. Specifically, overfitting occurs if the model or algorithm shows low bias but high variance. Overfitting is often a result of an excessively complicated model, and it can be prevented by fitting multiple models and using validation or cross-validation to compare their predictive accuracies on test data.</p><p id="p-0096" num="0095">Underfitting occurs when a statistical model or machine learning algorithm cannot capture the underlying trend of the data. Intuitively, underfitting occurs when the model or the algorithm does not fit the data well enough. Specifically, underfitting occurs if the model or algorithm shows low variance but high bias. Underfitting is often a result of an excessively simple model. Both overfitting and underfitting lead to poor predictions on new data sets.</p><p id="p-0097" num="0096">Collecting more data is a time-consuming and expensive process. One alternative to collecting additional raw data is altering data to make it appear as if it was more diverse. For example, data augmentation techniques may be used so that each time a sample is processed by a model, it is slightly different from the previous sample. This will make it harder for the model to learn parameters for each sample.</p><p id="p-0098" num="0097">Another good practice is to add noise to the input or to the output of a model. For example, adding noise to the input of a model serves the same purpose as data augmentation, but will also work toward making the model robust to natural perturbations encountered with input data.</p><p id="p-0099" num="0098">Additional types of data augmentation include random rotation, random scaling, random resizing, random shifting of an image, flipping an image, shading an image, adding random Gaussian noise to an image, changing a view of an image, randomly changing a contrast of an image, randomly changing a brightness of an image, randomly changing a color of an image, etc.</p><p id="p-0100" num="0099">Different augmentations are important for different kinds of classification. Additionally, different augmentations should be avoided for different kinds of classification. Further, the degree of randomness is also critical for the classification task. Currently, classification types (and associated degrees of randomness) are randomly selected or decided by one or more users. This random selection may be improved upon by more dynamically analyzing an effect of augmentation on images or text to be classified.</p><p id="p-0101" num="0100">In one embodiment, a deep reinforcement method may be implemented to leverage validation loss for assigning positive/negative rewards to learn optimal augmentation configurations. This implementation may analyze data-set distribution embedding similarities and may enable forking of virtual training instances in a cloud computing environment. This implementation may also perform validation on a sample set to choose the most effective configuration for applying on to the whole data set.</p><p id="p-0102" num="0101">In one embodiment, given input training data, a system may create a small sample set (e.g., 1/10 or 1/100th of the total input training data set, etc.). The sample set may be passed through an augmentation prediction module, which predicts a top-K number of augmentations to apply.</p><p id="p-0103" num="0102">Additionally, in one embodiment, different training instances may be created in the cloud for each predicted augmentation. In each training instance, the associated augmentation may be applied, and the sample set may be trained to capture a training and validation loss for the augmented data.</p><p id="p-0104" num="0103">In another embodiment, once all the training instances are completed, the augmentation which had the least validation loss may be selected to augment all of the input training data.</p><p id="p-0105" num="0104">Further, in one embodiment, the above process may be initialized with random augmentation predictions with a high number of training fork instances. Based on the calculated validation loss for each augmentation, a positive or negative reward may be assigned to the augmentation in the context of the input data.</p><p id="p-0106" num="0105">Thus, using reinforcement learning, the system may learn which augmentation combinations result in the highest performance for a trained model, based on the data set. In response to another new data set, the new data set may be represented in the embedding space, and instead of randomly choosing the augmentations, highly rated augmentations based on similar trained data sets may be chosen for augmenting the new data set.</p><p id="p-0107" num="0106">Creating Embedding Representations</p><p id="p-0108" num="0107">Now referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a flowchart of a method <b>700</b> for creating embedding representations is shown according to one embodiment. The method <b>700</b> may be performed in accordance with the present invention in any of the environments depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>, among others, in various embodiments. Of course, more or less operations than those specifically described in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be included in method <b>700</b>, as would be understood by one of skill in the art upon reading the present descriptions.</p><p id="p-0109" num="0108">Each of the steps of the method <b>700</b> may be performed by any suitable component of the operating environment. For example, in various embodiments, the method <b>700</b> may be partially or entirely performed by one or more servers, computers, or some other device having one or more processors therein. The processor, e.g., processing circuit(s), chip(s), and/or module(s) implemented in hardware and/or software, and preferably having at least one hardware component may be utilized in any device to perform one or more steps of the method <b>700</b>. Illustrative processors include, but are not limited to, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), etc., combinations thereof, or any other suitable computing device known in the art.</p><p id="p-0110" num="0109">As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, method <b>700</b> may initiate with operation <b>702</b>, where a data set is received. Additionally, method <b>700</b> may proceed with decision <b>704</b>, where a type of data within the data set is determined. If it is determined in decision <b>704</b> that the data within the data set is image data, then method <b>700</b> may proceed with operation <b>706</b>, where image embedding is performed on the data within the data set to create a plurality of embedding representations. For example, CNN embedding may be performed on the data within the data set.</p><p id="p-0111" num="0110">Additionally, it is determined in decision <b>704</b> that the data within the data set is text data, then method <b>700</b> may proceed with operation <b>708</b>, where text embedding is performed on the data within the data set to create a plurality of embedding representations. For example, BERT embedding may be performed on the data within the data set. Further, method <b>700</b> may proceed with operation <b>710</b>, where created embedding representations are stored in an annoy index. In one embodiment, the annoy index may include a database for storing available embedding representations.</p><p id="p-0112" num="0111">In this way, a database of stored embedding representations may be created for comparison to incoming data sets to determine one or more similar stored data sets.</p><p id="p-0113" num="0112">Determining Data Set Similarity</p><p id="p-0114" num="0113">Now referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, a flowchart of a method <b>800</b> for determining a similarity between data sets is shown according to one embodiment. The method <b>800</b> may be performed in accordance with the present invention in any of the environments depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>, among others, in various embodiments. Of course, more or less operations than those specifically described in <figref idref="DRAWINGS">FIG. <b>8</b></figref> may be included in method <b>800</b>, as would be understood by one of skill in the art upon reading the present descriptions.</p><p id="p-0115" num="0114">Each of the steps of the method <b>800</b> may be performed by any suitable component of the operating environment. For example, in various embodiments, the method <b>800</b> may be partially or entirely performed by one or more servers, computers, or some other device having one or more processors therein. The processor, e.g., processing circuit(s), chip(s), and/or module(s) implemented in hardware and/or software, and preferably having at least one hardware component may be utilized in any device to perform one or more steps of the method <b>800</b>. Illustrative processors include, but are not limited to, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), etc., combinations thereof, or any other suitable computing device known in the art.</p><p id="p-0116" num="0115">As shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, method <b>800</b> may initiate with operation <b>802</b>, where a first data set and a second data set are received. Additionally, method <b>800</b> may proceed with operation <b>804</b>, where embedding representations are created for both the first data set and the second data set. For example, embedding representations may be created for each data set using the exemplary method detailed in <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0117" num="0116">Further, method <b>800</b> may proceed with operation <b>806</b>, where a cosine distance is computed for each data pair across the embedding representations of the first data set and the second data set. Further still, method <b>800</b> may proceed with operation <b>808</b>, where the cosine distances for each data pair are aggregated to create a total score for the first data set and the second data set. For example, a lower score for two data sets indicates a higher similarity between the data sets.</p><p id="p-0118" num="0117">In this way, a level of similarity between the first data set and the second data set may be determined.</p><p id="p-0119" num="0118">Reward-Based Augmentation Fine Tuning</p><p id="p-0120" num="0119">Now referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, a flowchart of a method <b>900</b> for adjusting a weighting of augmentations is shown according to one embodiment. The method <b>900</b> may be performed in accordance with the present invention in any of the environments depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>, among others, in various embodiments. Of course, more or less operations than those specifically described in <figref idref="DRAWINGS">FIG. <b>9</b></figref> may be included in method <b>900</b>, as would be understood by one of skill in the art upon reading the present descriptions.</p><p id="p-0121" num="0120">Each of the steps of the method <b>900</b> may be performed by any suitable component of the operating environment. For example, in various embodiments, the method <b>900</b> may be partially or entirely performed by one or more servers, computers, or some other device having one or more processors therein. The processor, e.g., processing circuit(s), chip(s), and/or module(s) implemented in hardware and/or software, and preferably having at least one hardware component may be utilized in any device to perform one or more steps of the method <b>900</b>. Illustrative processors include, but are not limited to, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), etc., combinations thereof, or any other suitable computing device known in the art.</p><p id="p-0122" num="0121">As shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, method <b>900</b> may initiate with operation <b>902</b>, where a data set is received. Additionally, method <b>900</b> may proceed with operation <b>904</b>, where randomly selected augmentations are applied to a sample set derived from the data set to create augmented sample sets. Further, method <b>900</b> may proceed with operation <b>906</b>, where classifier model instances are trained using the augmented sample sets, and classification is performed using the trained models.</p><p id="p-0123" num="0122">Further still, method <b>900</b> may proceed with operation <b>908</b>, where a validation loss is calculated for each of the trained models. Also, method <b>900</b> may proceed with operation <b>910</b>, where a positive or negative weight is applied to each of the augmentations according to their associated validation loss. For example, a first augmentation that results in a trained model with a lower validation loss may be assigned a greater weight than a second augmentation that results in a trained model with a higher validation loss.</p><p id="p-0124" num="0123">In this way, augmentations may be weighted according to their model training effectiveness for a particular data set.</p><p id="p-0125" num="0124">Training Instance Forking</p><p id="p-0126" num="0125">Now referring to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, a flowchart of a method <b>1000</b> for performing training instance forking is shown according to one embodiment. The method <b>1000</b> may be performed in accordance with the present invention in any of the environments depicted in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>, among others, in various embodiments. Of course, more or less operations than those specifically described in <figref idref="DRAWINGS">FIG. <b>10</b></figref> may be included in method <b>1000</b>, as would be understood by one of skill in the art upon reading the present descriptions.</p><p id="p-0127" num="0126">Each of the steps of the method <b>1000</b> may be performed by any suitable component of the operating environment. For example, in various embodiments, the method <b>1000</b> may be partially or entirely performed by one or more servers, computers, or some other device having one or more processors therein. The processor, e.g., processing circuit(s), chip(s), and/or module(s) implemented in hardware and/or software, and preferably having at least one hardware component may be utilized in any device to perform one or more steps of the method <b>1000</b>. Illustrative processors include, but are not limited to, a central processing unit (CPU), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), etc., combinations thereof, or any other suitable computing device known in the art.</p><p id="p-0128" num="0127">As shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, method <b>1000</b> may initiate with operation <b>1002</b>, where a data set is received. Additionally, method <b>1000</b> may proceed with operation <b>1004</b>, where a predetermined number of augmentations are predicted for the data set. In one embodiment, the augmentations may be predicted in response to identifying a similarity between the received data set and a preexisting data set, and retrieving weights associated with augmentations for the preexisting data set. For instance, the augmentations may be arranged according to weight, and a predetermined number of augmentations may be selected, starting with the highest rated augmentation.</p><p id="p-0129" num="0128">Further, method <b>1000</b> may proceed with operation <b>1006</b>, where a sample data set is derived from the received data set. Further still, method <b>1000</b> may proceed with operation <b>1008</b>, where a plurality of training instances is forked within a system, where each instance applies one of the predicted augmentations to the sample data set, trains a model with the augmented data set, and determines a validation loss for the trained model. Also, method <b>1000</b> may proceed with operation <b>1010</b>, where validation losses for all of the predicted augmentations are compared, and the augmentation with the smallest validation loss is selected to augment the data set.</p><p id="p-0130" num="0129">In this way, forking may be used to apply augmentations in parallel, utilizing a distributed system such as a cloud computing environment.</p><p id="p-0131" num="0130">The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out embodiments of the present invention.</p><p id="p-0132" num="0131">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0133" num="0132">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0134" num="0133">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, configuration data for integrated circuitry, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++, or the like, and procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform embodiments of the present invention.</p><p id="p-0135" num="0134">Embodiments of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0136" num="0135">These computer readable program instructions may be provided to a processor of a computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement embodiments of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0137" num="0136">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0138" num="0137">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the blocks may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be accomplished as one step, executed concurrently, substantially concurrently, in a partially or wholly temporally overlapping manner, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0139" num="0138">Moreover, a system according to various embodiments may include a processor and logic integrated with and/or executable by the processor, the logic being configured to perform one or more of the process steps recited herein. By integrated with, what is meant is that the processor has logic embedded therewith as hardware logic, such as an application specific integrated circuit (ASIC), a FPGA, etc. By executable by the processor, what is meant is that the logic is hardware logic; software logic such as firmware, part of an operating system, part of an application program; etc., or some combination of hardware and software logic that is accessible by the processor and configured to cause the processor to perform some functionality upon execution by the processor. Software logic may be stored on local and/or remote memory of any memory type, as known in the art. Any processor known in the art may be used, such as a software processor module and/or a hardware processor such as an ASIC, a FPGA, a central processing unit (CPU), an integrated circuit (IC), a graphics processing unit (GPU), etc.</p><p id="p-0140" num="0139">It will be clear that the various features of the foregoing systems and/or methodologies may be combined in any way, creating a plurality of combinations from the descriptions presented above.</p><p id="p-0141" num="0140">It will be further appreciated that embodiments of the present invention may be provided in the form of a service deployed on behalf of a customer to offer service on demand.</p><p id="p-0142" num="0141">The descriptions of the various embodiments of the present invention have been presented for purposes of illustration, but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method, comprising:<claim-text>applying a predetermined augmentation to a sample set of training data to create an augmented sample set;</claim-text><claim-text>training a model with the augmented sample set;</claim-text><claim-text>determining a performance of the trained model;</claim-text><claim-text>assigning a weight to the predetermined augmentation based on the determined performance; and</claim-text><claim-text>determining whether to apply the predetermined augmentation to a larger training data set before the training data set is applied to the model, based on the weight assigned to the predetermined augmentation.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>receiving a current training data set to be applied to the model;</claim-text><claim-text>identifying characteristics of the current training data set;</claim-text><claim-text>comparing the characteristics of the current training data set to characteristics of each of a plurality of preexisting training data sets;</claim-text><claim-text>determining one of the plurality of preexisting training data sets having a highest similarity to the current training data set, based on the comparing;</claim-text><claim-text>identifying weights assigned to each of a plurality of predetermined augmentations for the determined preexisting training data set having the highest similarity to the training data set; and</claim-text><claim-text>selecting one or more of the plurality of predetermined augmentations for the determined preexisting training data set to be applied to the current training data set before the current training data set is applied to the model, based on the weights.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the model includes a neural network.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the sample set of the training data set is a predetermined percentage of the training data set, the percentage being less than 100%.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predetermined augmentation includes a process that changes one or more aspects of each data instance within the training data set to create an augmented data set.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein for the predetermined augmentation, the augmented sample set is input to the model as training data.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the weight assigned to the predetermined augmentation is determined based on a comparison of a first output of the model trained with the augmented sample set to a second output of another instance of the model trained with a non-augmented sample set.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the weight for the predetermined augmentation is assigned to a grouping of the predetermined augmentation, the training data set, and the model.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a plurality of predetermined augmentations are ranked based on their associated weights, and a predetermined number of augmentations having the highest weights are selected to be applied to the training data set to create an augmented training data set.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer-implemented method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the augmented training data set is input into the model to train the model to perform one or more operations.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising implementing a deep reinforcement method that leverages validation loss to assign positive and negative rewards to the predetermined augmentation to learn an optimal augmentation configuration for the model.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predetermined augmentation is applied to the sample set by automatically forking a large varied set of virtual training instances in a cloud environment to validate which of a plurality of predetermined augmentations that includes the predetermined augmentation has a highest performance for the sample set.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A computer program product for determining optimal augmentations for a training data set, the computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a processor to cause the processor to perform a method comprising:<claim-text>applying, by the processor, a predetermined augmentation to a sample set of training data to create an augmented sample set;</claim-text><claim-text>training, by the processor, a model with the augmented sample set;</claim-text><claim-text>determining, by the processor, a performance of the trained model;</claim-text><claim-text>assigning, by the processor, a weight to the predetermined augmentation, based on the determined performance; and</claim-text><claim-text>determining, by the processor, whether to apply the predetermined augmentation to a larger training data set before the training data set is applied to the model, based on the weight assigned to the predetermined augmentation.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, comprising:<claim-text>receiving, by the processor, a current training data set to be applied to the model;</claim-text><claim-text>identifying, by the processor, characteristics of the current training data set;</claim-text><claim-text>comparing, by the processor, the characteristics of the current training data set to characteristics of each of a plurality of preexisting training data sets;</claim-text><claim-text>determining, by the processor, one of the plurality of preexisting training data sets having a highest similarity to the current training data set, based on the comparing;</claim-text><claim-text>identifying, by the processor, weights assigned to each of a plurality of predetermined augmentations for the determined preexisting training data set having the highest similarity to the training data set; and</claim-text><claim-text>selecting, by the processor, one or more of the plurality of predetermined augmentations for the determined preexisting training data set to be applied to the current training data set before the current training data set is applied to the model, based on the weights.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the model includes a neural network.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the sample set of the training data set is a predetermined percentage of the training data set, the percentage being less than 100%.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the predetermined augmentation includes a process that changes one or more aspects of each data instance within the training data set to create an augmented data set.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the augmented sample set is input to the model as training data.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer program product of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the weight assigned to the predetermined augmentation is determined based on a comparison of a first output of the model trained with the augmented sample set to a second output of another instance of the model trained with a non-augmented sample set.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A system, comprising:<claim-text>a processor; and</claim-text><claim-text>logic integrated with the processor, executable by the processor, or integrated with and executable by the processor, the logic being configured to:<claim-text>apply a predetermined augmentation to a sample set of training data to create an augmented sample set;</claim-text><claim-text>train a model with the augmented sample set;</claim-text><claim-text>determine a performance of the trained model;</claim-text><claim-text>assign a weight to the predetermined augmentation based on the determined performance; and</claim-text><claim-text>determine whether to apply the predetermined augmentation to a larger training data set before the training data set is applied to the model, based on the weight assigned to the predetermined augmentation.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>