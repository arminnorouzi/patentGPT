<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004385A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004385</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364780</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3001</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5072</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5016</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3012</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>544</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">ACCELERATED PROCESSING DEVICE AND METHOD OF SHARING DATA FOR MACHINE LEARNING</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Advanced Micro Devices, Inc.</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Kazakov</last-name><first-name>Maxim V.</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Advanced Micro Devices, Inc.</orgname><role>02</role><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A processing device is provided which comprises a plurality of compute units configured to process data, a plurality of arithmetic logic units, instantiated separate from the plurality of compute units, and configured to store the data at the arithmetic logic units and perform calculations using the data and an interconnect network, connecting the arithmetic logic units and configured to provide the arithmetic logic units with shared access to the data for communication between the arithmetic logic units. The interconnect network is also configured to provide the compute units with shared access to the data for communication between the compute units.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="103.04mm" wi="158.75mm" file="US20230004385A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="168.49mm" wi="146.13mm" orientation="landscape" file="US20230004385A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="212.94mm" wi="153.42mm" orientation="landscape" file="US20230004385A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="208.87mm" wi="150.79mm" orientation="landscape" file="US20230004385A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="223.35mm" wi="157.48mm" orientation="landscape" file="US20230004385A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="171.79mm" wi="151.21mm" orientation="landscape" file="US20230004385A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="223.52mm" wi="145.88mm" orientation="landscape" file="US20230004385A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Machine learning (e.g., deep learning) is widely used in a variety of technologies (e.g., image classification) to make predictions or decisions to perform a particular task (e.g., whether an image includes a certain object). For example, a convolutional neural network (CNN) is a class of deep learning algorithms widely used in machine learning applications. These networks typically include multiple layers. At each layer, a set of filters is applied to the output of previous layer, and the outputs of each layer are written to and read from memory.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0003" num="0002">A more detailed understanding can be had from the following description, given by way of example in conjunction with the accompanying drawings wherein:</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an example device in which one or more features of the disclosure can be implemented;</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating example components for implementing one or more features of the disclosure;</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating example components of an accelerated processing device for implementing one or more features of the disclosure;</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating example components of the accelerated processing device shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> with additional detail;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating example interconnections between components of the accelerated processing device shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>; and</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating an example method of data sharing according to features of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION</heading><p id="p-0010" num="0009">Machine learning models typically use significant memory bandwidth, which can lead to bandwidth bottleneck, negatively impacting performance, and increased power consumption. The amount of memory used to store output data at different layers of machine learning neural networks is typically large such that the data cannot be saved in on-chip memory. Accordingly, storing the data includes transfer of the data to and from off-chip memory.</p><p id="p-0011" num="0010">Deep learning algorithms (e.g., CNNs, recurrent neural networks and other forms of artificial neural networks) typically include matrix multiplication. Accelerated processors, such as GPUs, have recently been used to perform various matrix multiplication techniques which employ parallelization to increase the efficiency of matrix multiplication. For example, two matrices are typically divided into smaller portions (e.g., columns, rows, and portions of columns and rows) and a matrix multiplication operation of the two matrices is performed by executing a plurality of matrix multiplication computations each including the multiplication of a portion of one matrix with a portion of another matrix. The matrix multiplication computations are mapped to and executed by different processor cores of a processor network to perform the matrix multiplication operation.</p><p id="p-0012" num="0011">Conventional GPU architectures are not well suited for machine learning. Operations processed during execution of machine learning applications, typically include a series of operations, such as matrix multiplication operations followed by other operations (e.g., post processing operations, such as ReLU and BatchNorm) in which operations are performed using the data resulting from the matrix multiplication operations. The data resulting from the matrix multiplication operations is processed, during these post processing operations, in the CUs of the GPU. Accordingly, if sufficient bandwidth is not available for the CUs to access the resulting data, bottlenecks occur. The cache subsystem architecture (e.g., L1, L2 cache and so on) of conventional GPUs does not, however, provide sufficient bandwidth to share the data between the CUs quickly enough to prevent bottlenecks, which negatively impacts the overall performance.</p><p id="p-0013" num="0012">Recent developments to GPU architecture prevent these bottlenecks by instantiating, within in each CU, dedicated arithmetic logic units ALUs used to process the matrix multiplication operations while post processing operations are realized on existing ALU units of the CU. While these dedicated ALUs, instantiated within in each CU prevent the bottlenecks described above, the dedicated ALUs typically cause other types of bottlenecks resulting from data being inefficient fetched multiple times during matrix multiplication operations.</p><p id="p-0014" num="0013">For example, matrix multiplication typically includes reusable data. When two matrices are multiplied, the data for the first matrix is used for multiple blocks of the second matrix. The same data for the first matrix is fetched repeatedly into different CUs to multiply with blocks of another matrix. That is, bottlenecks (i.e., matrix multiplication bottlenecks) typically result because the same data is inefficient fetched multiple times, from the cache subsystem architecture of the GPU, for the dedicated arithmetic logic units ALUs in each CU.</p><p id="p-0015" num="0014">Some conventional accelerated processors are designed for data reuse and include interconnects between the ALUs instantiated in each CU for data sharing between CUs to reduce these matrix multiplication bottlenecks. These dedicated accelerated processors, however, are not well suited for executing non-matrix multiplication operations.</p><p id="p-0016" num="0015">The present disclosure provides devices and methods for efficiently executing matrix multiplication operations and non-matrix multiplication operations. Features of the present disclosure include ALUs, instantiated separate from the CUs and dedicated ALU interconnects, connecting the ALUs, and configured to provide shared access to data by the CUs. Each ALU includes its own register file (e.g., scratchpad memory) for storing the data provided to the ALUs and receiving data resulting from executing operations, such as matrix multiplication calculations. The register files are accessible by each CUs to store the data, which the ALUs use to perform calculations and to read the data to perform as post processing operations.</p><p id="p-0017" num="0016">Although the data is sent from the ALUs to the CU to execute the post matrix multiplication operations, features of the present disclosure provide bandwidth sufficient to avoid bottlenecks for execution of matrix multiplication operations and bandwidth sufficient to avoid bottlenecks for execution of other operations such as postprocessing operations. Accordingly, the overall efficiency is increased.</p><p id="p-0018" num="0017">A processing device is provided which comprises a plurality of compute units configured to process data, a plurality of arithmetic logic units, instantiated separate from the plurality of compute units, and configured to store the data at the arithmetic logic units and perform calculations using the data and an interconnect network, connecting the arithmetic logic units and configured to provide the arithmetic logic units with shared access to the data for communication between the arithmetic logic units.</p><p id="p-0019" num="0018">A method of data sharing is provided which comprises receiving, at one of a plurality of arithmetic logic units instantiated separate from a plurality of compute units, an instruction to perform a matrix multiplication calculation when data, used to perform the matrix multiplication calculation, is available in a local register file of the one arithmetic logic unit, accessing the data from the local register file to perform the matrix multiplication calculation and when the data is not available in a local register file, but is available in a register file of one of the other arithmetic logic units, accessing the data from the register file of the other arithmetic logic unit via one or more interconnects connecting the arithmetic logic units.</p><p id="p-0020" num="0019">A processing device is provided which comprises a plurality of groups of compute units configured to process data, a plurality of groups of arithmetic logic units instantiated separate from the plurality of groups of compute units and configured to store the data at the arithmetic logic units and perform calculations using the data and a plurality of interconnect networks, each connecting the arithmetic logic units of one of the groups of arithmetic logic units and providing the arithmetic logic units, of the one group of arithmetic logic units, shared access to the data.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an example device <b>100</b> in which one or more features of the disclosure can be implemented. The device <b>100</b> can include, for example, a computer, a gaming device, a handheld device, a set-top box, a television, a mobile phone, or a tablet computer. The device <b>100</b> includes a processor <b>102</b>, a memory <b>104</b>, a storage <b>106</b>, one or more input devices <b>108</b>, and one or more output devices <b>110</b>. The device <b>100</b> can also optionally include an input driver <b>112</b> and an output driver <b>114</b>. It is understood that the device <b>100</b> can include additional components not shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0022" num="0021">In various alternatives, the processor <b>102</b> includes a central processing unit (CPU), a graphics processing unit (GPU), a CPU and GPU located on the same die, or one or more processor cores, wherein each processor core can be a CPU or a GPU. In various alternatives, the memory <b>104</b> is be located on the same die as the processor <b>102</b>, or is located separately from the processor <b>102</b>. The memory <b>104</b> includes a volatile or non-volatile memory, for example, random access memory (RAM), dynamic RAM (DRAM), or a cache.</p><p id="p-0023" num="0022">The storage <b>106</b> includes a fixed or removable storage, for example, a hard disk drive, a solid state drive, an optical disk, or a flash drive. The input devices <b>108</b> include, without limitation, a keyboard, a keypad, a touch screen, a touch pad, a detector, a microphone, an accelerometer, a gyroscope, a biometric scanner, or a network connection (e.g., a wireless local area network card for transmission and/or reception of wireless IEEE 802 signals). The output devices <b>110</b> include, without limitation, a display, a speaker, a printer, a haptic feedback device, one or more lights, an antenna, or a network connection (e.g., a wireless local area network card for transmission and/or reception of wireless IEEE 802 signals).</p><p id="p-0024" num="0023">The input driver <b>112</b> communicates with the processor <b>102</b> and the input devices <b>108</b>, and permits the processor <b>102</b> to receive input from the input devices <b>108</b>. The output driver <b>114</b> communicates with the processor <b>102</b> and the output devices <b>110</b>, and permits the processor <b>102</b> to send output to the output devices <b>110</b>. It is noted that the input driver <b>112</b> and the output driver <b>114</b> are optional components, and that the device <b>100</b> will operate in the same manner if the input driver <b>112</b> and the output driver <b>114</b> are not present. The output driver <b>114</b> includes an accelerated processing device (&#x201c;APD&#x201d;) <b>116</b> which is coupled to a display device <b>118</b>. The APD is configured to accept compute commands and graphics rendering commands from processor <b>102</b>, to process those compute and graphics rendering commands, and to provide pixel output to display device <b>118</b> for display. As described in further detail below, the APD <b>116</b> includes one or more parallel processing units configured to perform computations in accordance with a single-instruction-multiple-data (&#x201c;SIMD&#x201d;) paradigm. Thus, although various functionality is described herein as being performed by or in conjunction with the APD <b>116</b>, in various alternatives, the functionality described as being performed by the APD <b>116</b> is additionally or alternatively performed by other computing devices having similar capabilities that are not driven by a host processor (e.g., processor <b>102</b>) and configured to provide graphical output to a display device <b>118</b>. For example, it is contemplated that any processing system that performs processing tasks in accordance with a SIMD paradigm may be configured to perform the functionality described herein. Alternatively, it is contemplated that computing systems that do not perform processing tasks in accordance with a SIMD paradigm performs the functionality described herein.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of the device <b>100</b>, illustrating additional details related to execution of processing tasks on the APD <b>116</b>. The processor <b>102</b> maintains, in system memory <b>104</b>, one or more control logic modules for execution by the processor <b>102</b>. The control logic modules include an operating system <b>120</b>, a kernel mode driver <b>122</b>, and applications <b>126</b>. These control logic modules control various features of the operation of the processor <b>102</b> and the APD <b>116</b>. For example, the operating system <b>120</b> directly communicates with hardware and provides an interface to the hardware for other software executing on the processor <b>102</b>. The kernel mode driver <b>122</b> controls operation of the APD <b>116</b> by, for example, providing an application programming interface (&#x201c;API&#x201d;) to software (e.g., applications <b>126</b>) executing on the processor <b>102</b> to access various functionality of the APD <b>116</b>. The kernel mode driver <b>122</b> also includes a just-in-time compiler that compiles programs for execution by processing components (such as the SIMD units <b>138</b> discussed in further detail below) of the APD <b>116</b>.</p><p id="p-0026" num="0025">The APD <b>116</b> executes commands and programs for selected functions, such as graphics operations, such as matrix multiplication operations, as well as non-graphics operations that may be suited for parallel processing. The APD <b>116</b> can be used for executing graphics pipeline operations such as pixel operations, geometric computations, and rendering an image to display device <b>118</b> based on commands received from the processor <b>102</b>. The APD <b>116</b> also executes compute processing operations that are not directly related to graphics operations, such as operations related to video, physics simulations, computational fluid dynamics, or other tasks, based on commands received from the processor <b>102</b>.</p><p id="p-0027" num="0026">The APD <b>116</b> includes compute units <b>132</b> that include one or more SIMD units <b>138</b> that perform operations at the request of the processor <b>102</b> in a parallel manner according to a SIMD paradigm. The SIMD paradigm is one in which multiple processing elements share a single program control flow unit and program counter and thus execute the same program but are able to execute that program with different data. In one example, each SIMD unit <b>138</b> includes sixteen lanes, where each lane executes the same instruction at the same time as the other lanes in the SIMD unit <b>138</b> but can execute that instruction with different data. Lanes can be switched off with predication if not all lanes need to execute a given instruction. Predication can also be used to execute programs with divergent control flow. More specifically, for programs with conditional branches or other instructions where control flow is based on calculations performed by an individual lane, predication of lanes corresponding to control flow paths not currently being executed, and serial execution of different control flow paths allows for arbitrary control flow.</p><p id="p-0028" num="0027">The basic unit of execution in compute units <b>132</b> is a work-item. Each work-item represents a single instantiation of a program that is to be executed in parallel in a particular lane. Work-items can be executed simultaneously as a &#x201c;wavefront&#x201d; on a single SIMD processing unit <b>138</b>. One or more wavefronts are included in a &#x201c;work group,&#x201d; which includes a collection of work-items designated to execute the same program. A work group can be executed by executing each of the wavefronts that make up the work group. In alternatives, the wavefronts are executed sequentially on a single SIMD unit <b>138</b> or partially or fully in parallel on different SIMD units <b>138</b>. Wavefronts can be thought of as the largest collection of work-items that can be executed simultaneously on a single SIMD unit <b>138</b>. Thus, if commands received from the processor <b>102</b> indicate that a particular program is to be parallelized to such a degree that the program cannot execute on a single SIMD unit <b>138</b> simultaneously, then that program is broken up into wavefronts which are parallelized on two or more SIMD units <b>138</b> or serialized on the same SIMD unit <b>138</b> (or both parallelized and serialized as needed). A scheduler <b>136</b> performs operations related to scheduling various wavefronts on different compute units <b>132</b> and SIMD units <b>138</b>.</p><p id="p-0029" num="0028">The parallelism afforded by the compute units <b>132</b> is suitable for graphics related operations such as pixel value calculations, vertex transformations, and other graphics operations. Thus in some instances, a graphics pipeline <b>134</b>, which accepts graphics processing commands from the processor <b>102</b>, provides computation tasks to the compute units <b>132</b> for execution in parallel.</p><p id="p-0030" num="0029">The compute units <b>132</b> are also used to perform computation tasks not related to graphics or not performed as part of the &#x201c;normal&#x201d; operation of a graphics pipeline <b>134</b> (e.g., custom operations performed to supplement processing performed for operation of the graphics pipeline <b>134</b>). An application <b>126</b> or other software executing on the processor <b>102</b> transmits programs that define such computation tasks to the APD <b>116</b> for execution.</p><p id="p-0031" num="0030">The APD <b>116</b> is configured to execute machine learning applications, including matrix multiplication operations as well as non-matrix multiplication operations. As described in more detail below, the APD <b>116</b> is configured to execute matrix multiplication operations execute other operations, such as post matrix multiplication operations.</p><p id="p-0032" num="0031">As described above, the amount of memory used to store the activation tensor data at different layers of neural networks is typically large (e.g., in the early layers) such that the activation tensor data cannot be saved in on-chip memory (e.g., memory at the APD <b>116</b>). Accordingly, storing the activation tensor data includes transfer of the data between the APD <b>116</b> and off-chip memory (e.g., memory <b>104</b>) via a link (e.g., a bus). The APD <b>116</b> is configured to compress the data to be transferred to off-chip memory (e.g., save bandwidth).</p><p id="p-0033" num="0032">The APD <b>116</b> is configured to compress the tensor data by changing the order in which the tensor values are stored according to any of a plurality of feature map sparsity metrics, using any of a plurality of different types of memory formatting with channel first configuration, and using any of a plurality of types of compression algorithms. For simplified explanation purposes, the examples described herein include delta-based compression of <b>4</b>D tensor values by changing the order in which the tensor values are written to memory according to NHWC (i.e., channel first) formatting based on sparsity of the feature maps.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating example components of an accelerated processing device for implementing one or more features of the present disclosure. For simplified explanation, the accelerated processing device is described as a GPU <b>300</b>. The GPU <b>300</b> is an example of an accelerated processing device.</p><p id="p-0035" num="0034">As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, GPU <b>300</b> include a plurality of compute units <b>302</b>. Each compute unit <b>302</b> includes a corresponding level 1 cache controller <b>306</b> in communication with a corresponding level 1 cache <b>304</b>. As further shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, GPU <b>300</b> includes a level 2 cache controller <b>310</b> in communication with level 2 cache <b>308</b>. Level 2 cache <b>308</b> is shared by each of the CUs <b>302</b>. Cache controller <b>310</b> can also be in communication with a next cache level (higher cache level), as indicated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0036" num="0035">GPU <b>300</b> also includes ALU network <b>312</b>. ALU network <b>312</b> includes a plurality of ALUs, instantiated separate from the CUs <b>302</b> as well as dedicated ALU interconnects, connecting the ALUs to provide shared access to data, by the CUs <b>302</b>, in register files of the ALUs as described in more detail below with regard to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating example components of the GPU <b>300</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> with additional detail. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, GPU <b>300</b> includes a first group of CUs <b>302</b>(<b>1</b>), a second group of CUs <b>301</b>(<b>2</b>), a first ALU network <b>312</b>(<b>1</b>), a second ALU network <b>312</b>(<b>2</b>). The GPU <b>300</b> also includes level 2 cache <b>304</b> and interconnects <b>408</b> for data access, by the CUs <b>302</b>, to the level 2 cache <b>304</b>.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates two groups of CUs (i.e., <b>302</b>(<b>1</b>) and <b>301</b>(<b>2</b>)) and two ALU networks (i.e., <b>312</b>(<b>1</b>) and <b>312</b>(<b>2</b>)). The number of CU groups and <b>301</b>(<b>2</b>)) and the number of ALU networks shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> is merely an example. Features of the present disclosure can be implemented using any number CU groups and any number of ALU networks. <figref idref="DRAWINGS">FIG. <b>4</b></figref> also illustrates twenty CUs <b>302</b> in each CU group (<b>302</b>(<b>1</b>) and <b>301</b>(<b>2</b>)) and eight ALUs <b>412</b> in each ALU networks (<b>312</b>(<b>1</b>) and <b>312</b>(<b>2</b>)). The number of CUs shown in each group and the number ALUs shown in each ALU network is merely an example. Features of the present disclosure can be implemented using any number of CUs per group and any number ALUs per ALU network.</p><p id="p-0039" num="0038">Each of the ALU networks <b>312</b>(<b>1</b>) and <b>312</b>(<b>2</b>) include a plurality of ALUs <b>412</b> and a plurality of interconnects <b>406</b>. Each ALU <b>412</b> includes its own corresponding register file, such as for example scratchpad memory <b>502</b> shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The interconnects <b>406</b> provide each of the ALUs <b>412</b> with shared access to the data stored at other ALUs <b>412</b> for communication between the ALUs <b>412</b>. The interconnects <b>406</b> also provide each of the CUs <b>302</b> with shared access to the data stored at any of the ALUs <b>412</b> for communication between the CUs <b>302</b>. As shown in FIG. Accordingly, the register files (e.g., scratchpad memory <b>502</b>) are used to store data provided to the ALUs <b>412</b> (e.g., by other ALUs <b>412</b> and CUs <b>302</b>) and to store data resulting from performing calculations during execution of operations, such as matrix multiplication operations and post matrix multiplication operations. The data stored in the scratchpad memory <b>502</b> is also read from other ALUs <b>412</b> and CUs <b>302</b> to perform matrix multiplication calculations and perform postprocessing operations.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating example interconnections between components of the accelerated processing device shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The arrows shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> are used to represent interconnects between the ALUs and CUs <b>302</b>. The register files of each ALU <b>412</b> is directly accessible by a plurality of CUs <b>302</b>. For example, as indicated by arrow <b>504</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the scratchpad memory <b>502</b> of the top ALU <b>412</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref> is in direct communication with three of the CUs <b>302</b> (<b>3</b> leftmost CUs <b>302</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>) and is connected to the scratchpad memory <b>502</b> of the adjacent ALU <b>412</b> (as indicated by arrow <b>506</b>). The scratchpad memories <b>502</b> of other ALUs <b>412</b> of the ALU network are connected via arrows <b>508</b>. That is, the scratchpad memory <b>502</b> of the other ALUs <b>412</b> of a corresponding ALU network are indirect accessible by the top ALU <b>412</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref> via the interconnects represented by arrows <b>506</b> and <b>508</b>.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating an example method <b>600</b> of data sharing according to features of the present disclosure.</p><p id="p-0042" num="0041">As shown at block <b>602</b>, the method <b>600</b> includes receiving an instruction to perform a matrix multiplication calculation. For example, an instruction to perform the matrix multiplication calculation is received from one of the CUs <b>302</b>.</p><p id="p-0043" num="0042">As described above, in many cases, previously stored data is reusable for performing matrix multiplication calculations. Accordingly, the ALU first determines whether reusable data is available (i.e., stored) in its own local register file (e.g., scratchpad memory) at decision block <b>604</b>. When the reusable data is available in its own local register file (YES decision), the ALU accesses the data, at block <b>606</b>, and uses the data along with other accessed data to perform the matrix multiplication calculation using the data at block <b>608</b>.</p><p id="p-0044" num="0043">When the reusable data is not available in its own local register file (NO decision), the ALU determines whether reusable data is available (i.e., stored) in a register file of another ALU (e.g., closest ALU), at decision block <b>610</b>. When the reusable data is available in a register file of another ALU (YES decision), the ALU accesses the data, via one or more of the interconnects <b>406</b>, from the register file of the other ALU, at block <b>612</b>, and uses the data along with other accessed data to perform the matrix multiplication calculation using the data at block <b>608</b>.</p><p id="p-0045" num="0044">When the reusable data is not available in the register file of another ALU (NO decision), the ALU accesses the data from memory (e.g., cache memory or main memory) at block <b>614</b>, and uses the data along with other accessed data to perform the matrix multiplication calculation using the data at block <b>608</b>.</p><p id="p-0046" num="0045">When the matrix multiplication calculation is completed, the data resulting from the matrix multiplication calculation performed at block <b>608</b> is stored in the local register file of the ALU at block <b>616</b>. The result data can then be accessed by a CU to perform post processing operations described above. For example, the CU directly accesses the result data via an interconnect indicated by the arrows <b>504</b> (shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>) or accesses the result data from another ALU via one or more interconnects indicated by the arrows <b>504</b> and <b>506</b> ((shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>).</p><p id="p-0047" num="0046">Accordingly, the accelerated processing device efficiently executes the matrix multiplication operations and the post processing operations using the high bandwidth architecture described herein.</p><p id="p-0048" num="0047">It should be understood that many variations are possible based on the disclosure herein. Although features and elements are described above in particular combinations, each feature or element can be used alone without the other features and elements or in various combinations with or without other features and elements.</p><p id="p-0049" num="0048">The various functional units illustrated in the figures and/or described herein (including, but not limited to, the processor <b>102</b>, the input driver <b>112</b>, the input devices <b>108</b>, the output driver <b>114</b>, the output devices <b>110</b>, the accelerated processing device <b>116</b>, CU groups <b>302</b>(<b>1</b>) and <b>301</b>(<b>2</b>), ALU networks <b>312</b>(<b>1</b>) and <b>312</b>(<b>2</b>), ALU interconnects <b>406</b> and local register files, such as scratchpad memory <b>508</b>, may be implemented as a general purpose computer, a processor, or a processor core, or as a program, software, or firmware, stored in a non-transitory computer readable medium or in another medium, executable by a general purpose computer, a processor, or a processor core. The methods provided can be implemented in a general purpose computer, a processor, or a processor core. Suitable processors include, by way of example, a general purpose processor, a special purpose processor, a conventional processor, a digital signal processor (DSP), a plurality of microprocessors, one or more microprocessors in association with a DSP core, a controller, a microcontroller, Application Specific Integrated Circuits (ASICs), Field Programmable Gate Arrays (FPGAs) circuits, any other type of integrated circuit (IC), and/or a state machine. Such processors can be manufactured by configuring a manufacturing process using the results of processed hardware description language (HDL) instructions and other intermediary data including netlists (such instructions capable of being stored on a computer readable media). The results of such processing can be maskworks that are then used in a semiconductor manufacturing process to manufacture a processor which implements features of the disclosure.</p><p id="p-0050" num="0049">The methods or flow charts provided herein can be implemented in a computer program, software, or firmware incorporated in a non-transitory computer-readable storage medium for execution by a general purpose computer or a processor. Examples of non-transitory computer-readable storage mediums include a read only memory (ROM), a random access memory (RAM), a register, cache memory, semiconductor memory devices, magnetic media such as internal hard disks and removable disks, magneto-optical media, and optical media such as CD-ROM disks, and digital versatile disks (DVDs).</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A processing device comprising:<claim-text>a plurality of compute units configured to process data;</claim-text><claim-text>a plurality of arithmetic logic units, instantiated separate from the plurality of compute units, and configured to store the data at the arithmetic logic units and perform calculations using the data; and</claim-text><claim-text>an interconnect network, connecting the arithmetic logic units and configured to provide the arithmetic logic units with shared access to the data for communication between the arithmetic logic units.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The processing device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the interconnect network is also configured to provide the compute units with shared access to the data for communication between the compute units.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The processing device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each arithmetic logic unit comprises a dedicated register file configured to store the data.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The processing device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the dedicated register files are scratchpad memory.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The processing device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a plurality of interconnect networks, wherein,<claim-text>the compute units include groups of compute units,</claim-text><claim-text>the arithmetic logic units include groups of arithmetic logic units and</claim-text><claim-text>each interconnect network connects the arithmetic logic units, of one of the groups of arithmetic logic units, with each other and provides shared access to the data for communication between the arithmetic logic units of the one group of arithmetic logic units.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The processing device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the interconnect network is configured to provide a data bandwidth sufficient to avoid pipeline bottlenecks:<claim-text>during execution of matrix multiplication operations; and</claim-text><claim-text>during execution of post processing operations using the data resulting from the matrix multiplication operations.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The processing device of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the data bandwidth of the interconnect network is greater than another data bandwidth of a second level cache memory which shares data among the plurality of compute units.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The processing device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising another interconnect network which connects the compute units with memory and is not accessible by the arithmetic logic units for data communication.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A method of data sharing comprising;<claim-text>receiving, at one of a plurality of arithmetic logic units instantiated separate from a plurality of compute units, an instruction to perform a matrix multiplication calculation;</claim-text><claim-text>when data, used to perform the matrix multiplication calculation, is available in a local register file of the one arithmetic logic unit, accessing the data from the local register file to perform the matrix multiplication calculation; and</claim-text><claim-text>when the data is not available in a local register file, but is available in a register file of another of the arithmetic logic units, accessing the data from the register file of the other arithmetic logic unit via one or more interconnects connecting the arithmetic logic units.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>determining, by the one arithmetic logic unit, whether or not the data is available in the local register file; and</claim-text><claim-text>when the data is determined to be not available in the local register file, determining, by the one arithmetic logic unit, whether the data is available in the register file of the other arithmetic logic unit.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising accessing the data from memory when the data is determined to be not available in the register file of the other arithmetic logic unit.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising accessing the data from memory via another interconnect network which connects the compute units with memory and is not accessible by the arithmetic logic units for data communication.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising performing, by the one arithmetic logic unit, the matrix multiplication calculation and storing data resulting from the matrix multiplication calculation in the local register file.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising accessing by one of the plurality of compute units, the data resulting from the matrix multiplication calculation in the local register file via the one or more interconnects connecting the arithmetic logic units.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein<claim-text>the compute units include groups of compute units,</claim-text><claim-text>the arithmetic logic units include groups of arithmetic logic units and</claim-text><claim-text>each interconnect network connects the arithmetic logic units, of one of the groups of arithmetic logic units, with each other and provides shared access to the data for communication between the arithmetic logic units of the one group of arithmetic logic units.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>accessing the data from the register file of the other arithmetic logic unit, via one or more interconnects connecting the arithmetic logic units, to perform the matrix multiplication calculation without causing a pipeline bottleneck; and</claim-text><claim-text>performing post processing operations using the data resulting from the matrix multiplication operations without causing the pipeline bottleneck.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the data bandwidth of the interconnect network is greater than another data bandwidth of a second level cache memory which shares data among the plurality of compute units.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A processing device comprising:<claim-text>a plurality of groups of compute units configured to process data;</claim-text><claim-text>a plurality of groups of arithmetic logic units instantiated separate from the plurality of groups of compute units and configured to store the data at the arithmetic logic units and perform calculations using the data; and</claim-text><claim-text>a plurality of interconnect networks, each connecting the arithmetic logic units of one of the groups of arithmetic logic units and providing the arithmetic logic units, of the one group of arithmetic logic units, shared access to the data.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The processing device of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein each interconnect network is configured to provide the compute units with shared access to the data.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The processing device of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein each arithmetic logic unit comprises a dedicated register file configured to store the data.</claim-text></claim></claims></us-patent-application>