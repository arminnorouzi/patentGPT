<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007039A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007039</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17931381</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1433</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Matching Configuration Items with Machine Learning</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16897991</doc-number><date>20200610</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11470107</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17931381</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>ServiceNow, Inc.</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Waplington</last-name><first-name>Brian James</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system includes persistent storage containing configuration items (CIs) representing discovered attribute values of computing resources associated with a managed network, and an application configured to perform operations, including obtaining test result data generated based on a third-party scanning system executing tests of a particular computing resource associated with the managed network. The test result data includes attribute values of the particular computing resource. The operations also include generating, by way of an embedding model and based on the attribute values, an embedding vector representing the attribute values, and comparing the embedding vector to a plurality of candidate embedding vectors, each representing the discovered attribute values of a corresponding CI of the CIs. The operations further include, based on comparing the embedding vector to the plurality of candidate embedding vectors, selecting a particular CI of the CIs, and updating the particular CI to additionally represent the test result data.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="128.69mm" wi="141.99mm" file="US20230007039A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="144.02mm" wi="162.14mm" orientation="landscape" file="US20230007039A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="178.65mm" wi="134.03mm" file="US20230007039A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="232.41mm" wi="165.69mm" orientation="landscape" file="US20230007039A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.41mm" wi="164.08mm" orientation="landscape" file="US20230007039A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="197.53mm" wi="167.81mm" orientation="landscape" file="US20230007039A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="218.36mm" wi="158.67mm" file="US20230007039A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="232.49mm" wi="168.99mm" orientation="landscape" file="US20230007039A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="232.49mm" wi="168.99mm" orientation="landscape" file="US20230007039A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="229.19mm" wi="168.99mm" file="US20230007039A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="229.19mm" wi="168.99mm" file="US20230007039A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="232.41mm" wi="165.44mm" orientation="landscape" file="US20230007039A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="215.56mm" wi="166.79mm" file="US20230007039A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of and claims priority to U.S. patent application Ser. No. 16/897,991, filed Jun. 10, 2020, and titled &#x201c;Matching Configuration Items with Machine Learning,&#x201d; which is hereby incorporated by reference as if fully set forth in this description.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">A managed network may utilize the services of various computing systems. These computing systems may perform various operations with respect to the computing resources that make up the managed network, including testing the computing resources and collecting information about the computing resources. Each computing system may represent and/or store the collected information according to different formats, syntaxes, and/or rules. Thus, accurately matching a first set of information collected for a given computing resource by a first computing system with a second set of information collected for the given computing resource by a second computing system is difficult.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">A remote network management platform may be used to manage a managed network. One aspect of this management may involve discovery of the various computing resources that make up the managed network and mapping of relationships between the computing resources. The remote network management platform may represent the discovered and mapped computing resources as configuration items (CIs), which may be stored in a configuration management database (CMDB). Specifically, the CIs may represent the discovered attribute values of various properties and aspects of the computing resources, including the relationships therebetween. Thus, the CMDB may store a representation of the various computing resources that make up the managed network.</p><p id="p-0005" num="0004">The managed network may also utilize various services provided by third-party systems other than the remote network management platform. For example, the managed network may utilize a third-party vulnerability scanning system configured to identify vulnerabilities in the computing resources of the managed network. Other third-party systems may provide other types of services. The third-party systems may generate test result data that represents the results of tests, reviews, searches, or other analyses performed by the third-party system on the computing resources of the managed network. It may be desirable to integrate the test result data generated for a particular computing resource with the CI that represents the particular computing resource in the CMDB. Thus, the CMDB may provide a centralized location to store and manage data generated by various systems with respect to the particular computing resource.</p><p id="p-0006" num="0005">The test result data generated by the third-party systems may include attribute values that at least partially identify the tested computing resource. However, the attribute values may be generated by the third-party system according to a format, syntax, and/or rules different from the format, syntax, and/or rules used by the remote network management platform when generating the discovered attribute values of the CIs. Thus, a rule-based approach for matching the tested computing resource with its corresponding CI may sometimes fail due to these formatting, syntactical, and/or rule differences. Writing additional rules that account for all possible formatting, syntactical, and/or rule variations may be impractical, especially where multiple third-party systems are involved, where these systems may change over time, and/or where the number of rules and/or variations thereof is large.</p><p id="p-0007" num="0006">Accordingly, an application is provided that uses an embedding model to generate embedding vectors that represent the various attribute values of the tested computing resource and the CIs. The embedding model may be trained, based on the CIs stored in the CMDB of a given managed network, to group related/similar CIs together, and spread apart CIs that are unrelated and/or different. Thus, rather than comparing the attribute values to one another directly, the application compares the embedding vector of the tested computing resource to a plurality of candidate embedding vectors of the CIs stored in the CMDB. Based on this comparison of the embedding vectors, the application may determine which CI of these CIs most likely corresponds to the computing resource tested by the third-party system. Rather than relying on predefined rules to account for formatting and syntactical differences, the application measures a distance between two embedding vectors to quantify how similar the underlying sets of attributes are to one another.</p><p id="p-0008" num="0007">In some implementations, each attribute value may be represented by one or more corresponding dimensions of the embedding vector, and this representation may be exclusive of other attribute values. That is, for example, a first attribute value may be represented by a first dimension of the embedding vector and a second attribute value may be represented by a second dimension of the embedding vector, but the second attribute value might not affect the value of the first dimension and the first attribute value might not affect the value of the second dimension. Thus, when a third-party system provides less than a complete set of attribute values, the embedding vectors may be compared with respect to the dimensions for which attribute values have been provided, but not with respect to dimensions for which the third-party system did not specify an attribute value. Accordingly, in addition to handling syntactical variations, the application is also able to match the tested computing resource to a CI when some attribute values are missing.</p><p id="p-0009" num="0008">Further, each managed network may be associated with its own embedding model. That is, the embedding model of a given managed network may be trained based on the CIs associated with the given managed network, thus allowing the embedding model to learn which computing resources in the given managed network are considered similar/related and which are considered different/unrelated. Thus, when generating an embedding value for a computing resource tested by the third-party system based on the attribute values provided by the third-party system, the embedding model may generate an embedding vector that accurately represents the tested computing resource in the context of the given managed network.</p><p id="p-0010" num="0009">Accordingly, a first example embodiment may involve obtaining test result data generated based on a third-party scanning system executing one or more tests of a particular computing resource associated with a managed network. The test result data may include one or more attribute values of the particular computing resource. Persistent storage disposed within a remote network management platform may contain CIs representing discovered attribute values of computing resources associated with the managed network. The first example embodiment may also involve generating, by way of an embedding model and based on the one or more attribute values of the particular computing resource, an embedding vector representing the one or more attribute values of the particular computing resource. The first example embodiment may additionally involve comparing the embedding vector to a plurality of candidate embedding vectors. Each respective candidate embedding vector of the plurality of candidate embedding vectors may represent the discovered attribute values of a corresponding CI of the CIs contained in the persistent storage. The first example embodiment may further involve, based on comparing the embedding vector to the plurality of candidate embedding vectors, selecting a particular CI of the CIs contained in the persistent storage. The first example embodiment may yet further involve updating the particular CI to additionally represent at least a portion of the test result data.</p><p id="p-0011" num="0010">In a second example embodiment, persistent storage may be disposed within a remote network management platform and may contain CIs representing discovered attribute values of computing resources associated with a managed network. An application may be configured to perform operations including obtaining test result data generated based on a third-party scanning system executing one or more tests of a particular computing resource associated with the managed network. The test result data may include one or more attribute values of the particular computing resource. The operations may also include generating, by way of an embedding model and based on the one or more attribute values of the particular computing resource, an embedding vector representing the one or more attribute values of the particular computing resource. The operations may additionally include comparing the embedding vector to a plurality of candidate embedding vectors. Each respective candidate embedding vector of the plurality of candidate embedding vectors may represent the discovered attribute values of a corresponding CI of the CIs contained in the persistent storage. The operations may further include, based on comparing the embedding vector to the plurality of candidate embedding vectors, selecting a particular CI of the CIs contained in the persistent storage. The operations may yet further include updating the particular CI to additionally represent at least a portion of the test result data.</p><p id="p-0012" num="0011">In a third example embodiment, an article of manufacture may include a non-transitory computer-readable medium, having stored thereon program instructions that, upon execution by a computing system, cause the computing system to perform operations in accordance with the first example embodiment or the second example embodiment.</p><p id="p-0013" num="0012">In a fourth example embodiment, a computing system may include at least one processor, as well as memory and program instructions. The program instructions may be stored in the memory, and upon execution by the at least one processor, cause the computing system to perform operations in accordance with the first example embodiment or the second example embodiment.</p><p id="p-0014" num="0013">In a fifth example embodiment, a system may include various means for carrying out each of the operations of the first example embodiment or the second example embodiment.</p><p id="p-0015" num="0014">These, as well as other embodiments, aspects, advantages, and alternatives, will become apparent to those of ordinary skill in the art by reading the following detailed description, with reference where appropriate to the accompanying drawings. Further, this summary and other descriptions and figures provided herein are intended to illustrate embodiments by way of example only and, as such, that numerous variations are possible. For instance, structural elements and process steps can be rearranged, combined, distributed, eliminated, or otherwise changed, while remaining within the scope of the embodiments as claimed.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a schematic drawing of a computing device, in accordance with example embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a schematic drawing of a server device cluster, in accordance with example embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a remote network management architecture, in accordance with example embodiments.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a communication environment involving a remote network management architecture, in accordance with example embodiments.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> depicts another communication environment involving a remote network management architecture, in accordance with example embodiments.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is a flow chart, in accordance with example embodiments.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> illustrates components of a software application, in accordance with example embodiments.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> illustrates an embedding vector, in accordance with example embodiments.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>7</b>A and <b>7</b>B</figref> illustrate a message flow diagram, in accordance with example embodiments.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a vulnerability management architecture, in accordance with example embodiments.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow chart, in accordance with example embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0027" num="0026">Example methods, devices, and systems are described herein. It should be understood that the words &#x201c;example&#x201d; and &#x201c;exemplary&#x201d; are used herein to mean &#x201c;serving as an example, instance, or illustration.&#x201d; Any embodiment or feature described herein as being an &#x201c;example&#x201d; or &#x201c;exemplary&#x201d; is not necessarily to be construed as preferred or advantageous over other embodiments or features unless stated as such. Thus, other embodiments can be utilized and other changes can be made without departing from the scope of the subject matter presented herein.</p><p id="p-0028" num="0027">Accordingly, the example embodiments described herein are not meant to be limiting. It will be readily understood that the aspects of the present disclosure, as generally described herein, and illustrated in the figures, can be arranged, substituted, combined, separated, and designed in a wide variety of different configurations. For example, the separation of features into &#x201c;client&#x201d; and &#x201c;server&#x201d; components may occur in a number of ways.</p><p id="p-0029" num="0028">Further, unless context suggests otherwise, the features illustrated in each of the figures may be used in combination with one another. Thus, the figures should be generally viewed as component aspects of one or more overall embodiments, with the understanding that not all illustrated features are necessary for each embodiment.</p><p id="p-0030" num="0029">Additionally, any enumeration of elements, blocks, or steps in this specification or the claims is for purposes of clarity. Thus, such enumeration should not be interpreted to require or imply that these elements, blocks, or steps adhere to a particular arrangement or are carried out in a particular order.</p><heading id="h-0006" level="1">I. Introduction</heading><p id="p-0031" num="0030">A large enterprise is a complex entity with many interrelated operations. Some of these are found across the enterprise, such as human resources (HR), supply chain, information technology (IT), and finance. However, each enterprise also has its own unique operations that provide essential capabilities and/or create competitive advantages.</p><p id="p-0032" num="0031">To support widely-implemented operations, enterprises typically use off-the-shelf software applications, such as customer relationship management (CRM) and human capital management (HCM) packages. However, they may also need custom software applications to meet their own unique requirements. A large enterprise often has dozens or hundreds of these custom software applications. Nonetheless, the advantages provided by the embodiments herein are not limited to large enterprises and may be applicable to an enterprise, or any other type of organization, of any size.</p><p id="p-0033" num="0032">Many such software applications are developed by individual departments within the enterprise. These range from simple spreadsheets to custom-built software tools and databases. But the proliferation of siloed custom software applications has numerous disadvantages. It negatively impacts an enterprise's ability to run and grow its operations, innovate, and meet regulatory requirements. The enterprise may find it difficult to integrate, streamline, and enhance its operations due to lack of a single system that unifies its subsystems and data.</p><p id="p-0034" num="0033">To efficiently create custom applications, enterprises would benefit from a remotely-hosted application platform that eliminates unnecessary development complexity. The goal of such a platform would be to reduce time-consuming, repetitive application development tasks so that software engineers and individuals in other roles can focus on developing unique, high-value features.</p><p id="p-0035" num="0034">In order to achieve this goal, the concept of Application Platform as a Service (aPaaS) is introduced, to intelligently automate workflows throughout the enterprise. An aPaaS system is hosted remotely from the enterprise, but may access data, applications, and services within the enterprise by way of secure connections. Such an aPaaS system may have a number of advantageous capabilities and characteristics. These advantages and characteristics may be able to improve the enterprise's operations and workflows for IT, HR, CRM, customer service, application development, and security.</p><p id="p-0036" num="0035">The aPaaS system may support development and execution of model-view-controller (MVC) applications. MVC applications divide their functionality into three interconnected parts (model, view, and controller) in order to isolate representations of information from the manner in which the information is presented to the user, thereby allowing for efficient code reuse and parallel development. These applications may be web-based, and offer create, read, update, delete (CRUD) capabilities. This allows new applications to be built on a common application infrastructure.</p><p id="p-0037" num="0036">The aPaaS system may support standardized application components, such as a standardized set of widgets for graphical user interface (GUI) development. In this way, applications built using the aPaaS system have a common look and feel. Other software components and modules may be standardized as well. In some cases, this look and feel can be branded or skinned with an enterprise's custom logos and/or color schemes.</p><p id="p-0038" num="0037">The aPaaS system may support the ability to configure the behavior of applications using metadata. This allows application behaviors to be rapidly adapted to meet specific needs. Such an approach reduces development time and increases flexibility. Further, the aPaaS system may support GUI tools that facilitate metadata creation and management, thus reducing errors in the metadata.</p><p id="p-0039" num="0038">The aPaaS system may support clearly-defined interfaces between applications, so that software developers can avoid unwanted inter-application dependencies. Thus, the aPaaS system may implement a service layer in which persistent state information and other data are stored.</p><p id="p-0040" num="0039">The aPaaS system may support a rich set of integration features so that the applications thereon can interact with legacy applications and third-party applications. For instance, the aPaaS system may support a custom employee-onboarding system that integrates with legacy HR, IT, and accounting systems.</p><p id="p-0041" num="0040">The aPaaS system may support enterprise-grade security. Furthermore, since the aPaaS system may be remotely hosted, it should also utilize security procedures when it interacts with systems in the enterprise or third-party networks and services hosted outside of the enterprise. For example, the aPaaS system may be configured to share data amongst the enterprise and other parties to detect and identify common security threats.</p><p id="p-0042" num="0041">Other features, functionality, and advantages of an aPaaS system may exist. This description is for purpose of example and is not intended to be limiting.</p><p id="p-0043" num="0042">As an example of the aPaaS development process, a software developer may be tasked to create a new application using the aPaaS system. First, the developer may define the data model, which specifies the types of data that the application uses and the relationships therebetween. Then, via a GUI of the aPaaS system, the developer enters (e.g., uploads) the data model. The aPaaS system automatically creates all of the corresponding database tables, fields, and relationships, which can then be accessed via an object-oriented services layer.</p><p id="p-0044" num="0043">In addition, the aPaaS system can also build a fully-functional MVC application with client-side interfaces and server-side CRUD logic. This generated application may serve as the basis of further development for the user. Advantageously, the developer does not have to spend a large amount of time on basic application functionality. Further, since the application may be web-based, it can be accessed from any Internet-enabled client device. Alternatively or additionally, a local copy of the application may be able to be accessed, for instance, when Internet service is not available.</p><p id="p-0045" num="0044">The aPaaS system may also support a rich set of pre-defined functionality that can be added to applications. These features include support for searching, email, templating, workflow design, reporting, analytics, social media, scripting, mobile-friendly output, and customized GUIs.</p><p id="p-0046" num="0045">Such an aPaaS system may represent a GUI in various ways. For example, a server device of the aPaaS system may generate a representation of a GUI using a combination of HTML and JAVASCRIPT&#xae;. The JAVASCRIPT&#xae; may include client-side executable code, server-side executable code, or both. The server device may transmit or otherwise provide this representation to a client device for the client device to display on a screen according to its locally-defined look and feel. Alternatively, a representation of a GUI may take other forms, such as an intermediate form (e.g., JAVA&#xae; byte-code) that a client device can use to directly generate graphical output therefrom. Other possibilities exist.</p><p id="p-0047" num="0046">Further, user interaction with GUI elements, such as buttons, menus, tabs, sliders, checkboxes, toggles, etc. may be referred to as &#x201c;selection&#x201d;, &#x201c;activation&#x201d;, or &#x201c;actuation&#x201d; thereof. These terms may be used regardless of whether the GUI elements are interacted with by way of keyboard, pointing device, touchscreen, or another mechanism.</p><p id="p-0048" num="0047">An aPaaS architecture is particularly powerful when integrated with an enterprise's network and used to manage such a network. The following embodiments describe architectural and functional aspects of example aPaaS systems, as well as the features and advantages thereof.</p><heading id="h-0007" level="1">II. Example Computing Devices and Cloud-Based Computing Environments</heading><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a simplified block diagram exemplifying a computing device <b>100</b>, illustrating some of the components that could be included in a computing device arranged to operate in accordance with the embodiments herein. Computing device <b>100</b> could be a client device (e.g., a device actively operated by a user), a server device (e.g., a device that provides computational services to client devices), or some other type of computational platform. Some server devices may operate as client devices from time to time in order to perform particular operations, and some client devices may incorporate server features.</p><p id="p-0050" num="0049">In this example, computing device <b>100</b> includes processor <b>102</b>, memory <b>104</b>, network interface <b>106</b>, and input/output unit <b>108</b>, all of which may be coupled by system bus <b>110</b> or a similar mechanism. In some embodiments, computing device <b>100</b> may include other components and/or peripheral devices (e.g., detachable storage, printers, and so on).</p><p id="p-0051" num="0050">Processor <b>102</b> may be one or more of any type of computer processing element, such as a central processing unit (CPU), a co-processor (e.g., a mathematics, graphics, or encryption co-processor), a digital signal processor (DSP), a network processor, and/or a form of integrated circuit or controller that performs processor operations. In some cases, processor <b>102</b> may be one or more single-core processors. In other cases, processor <b>102</b> may be one or more multi-core processors with multiple independent processing units. Processor <b>102</b> may also include register memory for temporarily storing instructions being executed and related data, as well as cache memory for temporarily storing recently-used instructions and data.</p><p id="p-0052" num="0051">Memory <b>104</b> may be any form of computer-usable memory, including but not limited to random access memory (RAM), read-only memory (ROM), and non-volatile memory (e.g., flash memory, hard disk drives, solid state drives, compact discs (CDs), digital video discs (DVDs), and/or tape storage). Thus, memory <b>104</b> represents both main memory units, as well as long-term storage. Other types of memory may include biological memory.</p><p id="p-0053" num="0052">Memory <b>104</b> may store program instructions and/or data on which program instructions may operate. By way of example, memory <b>104</b> may store these program instructions on a non-transitory, computer-readable medium, such that the instructions are executable by processor <b>102</b> to carry out any of the methods, processes, or operations disclosed in this specification or the accompanying drawings.</p><p id="p-0054" num="0053">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, memory <b>104</b> may include firmware <b>104</b>A, kernel <b>104</b>B, and/or applications <b>104</b>C. Firmware <b>104</b>A may be program code used to boot or otherwise initiate some or all of computing device <b>100</b>. Kernel <b>104</b>B may be an operating system, including modules for memory management, scheduling and management of processes, input/output, and communication. Kernel <b>104</b>B may also include device drivers that allow the operating system to communicate with the hardware modules (e.g., memory units, networking interfaces, ports, and buses) of computing device <b>100</b>. Applications <b>104</b>C may be one or more user-space software programs, such as web browsers or email clients, as well as any software libraries used by these programs. Memory <b>104</b> may also store data used by these and other programs and applications.</p><p id="p-0055" num="0054">Network interface <b>106</b> may take the form of one or more wireline interfaces, such as Ethernet (e.g., Fast Ethernet, Gigabit Ethernet, and so on). Network interface <b>106</b> may also support communication over one or more non-Ethernet media, such as coaxial cables or power lines, or over wide-area media, such as Synchronous Optical Networking (SONET) or digital subscriber line (DSL) technologies. Network interface <b>106</b> may additionally take the form of one or more wireless interfaces, such as IEEE 802.11 (Wifi), BLUETOOTH&#xae;, global positioning system (GPS), or a wide-area wireless interface. However, other forms of physical layer interfaces and other types of standard or proprietary communication protocols may be used over network interface <b>106</b>. Furthermore, network interface <b>106</b> may comprise multiple physical interfaces. For instance, some embodiments of computing device <b>100</b> may include Ethernet, BLUETOOTH&#xae;, and Wifi interfaces.</p><p id="p-0056" num="0055">Input/output unit <b>108</b> may facilitate user and peripheral device interaction with computing device <b>100</b>. Input/output unit <b>108</b> may include one or more types of input devices, such as a keyboard, a mouse, a touch screen, and so on. Similarly, input/output unit <b>108</b> may include one or more types of output devices, such as a screen, monitor, printer, and/or one or more light emitting diodes (LEDs). Additionally or alternatively, computing device <b>100</b> may communicate with other devices using a universal serial bus (USB) or high-definition multimedia interface (HDMI) port interface, for example.</p><p id="p-0057" num="0056">In some embodiments, one or more computing devices like computing device <b>100</b> may be deployed to support an aPaaS architecture. The exact physical location, connectivity, and configuration of these computing devices may be unknown and/or unimportant to client devices. Accordingly, the computing devices may be referred to as &#x201c;cloud-based&#x201d; devices that may be housed at various remote data center locations.</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a cloud-based server cluster <b>200</b> in accordance with example embodiments. In <figref idref="DRAWINGS">FIG. <b>2</b></figref>, operations of a computing device (e.g., computing device <b>100</b>) may be distributed between server devices <b>202</b>, data storage <b>204</b>, and routers <b>206</b>, all of which may be connected by local cluster network <b>208</b>. The number of server devices <b>202</b>, data storages <b>204</b>, and routers <b>206</b> in server cluster <b>200</b> may depend on the computing task(s) and/or applications assigned to server cluster <b>200</b>.</p><p id="p-0059" num="0058">For example, server devices <b>202</b> can be configured to perform various computing tasks of computing device <b>100</b>. Thus, computing tasks can be distributed among one or more of server devices <b>202</b>. To the extent that these computing tasks can be performed in parallel, such a distribution of tasks may reduce the total time to complete these tasks and return a result. For purposes of simplicity, both server cluster <b>200</b> and individual server devices <b>202</b> may be referred to as a &#x201c;server device.&#x201d; This nomenclature should be understood to imply that one or more distinct server devices, data storage devices, and cluster routers may be involved in server device operations.</p><p id="p-0060" num="0059">Data storage <b>204</b> may be data storage arrays that include drive array controllers configured to manage read and write access to groups of hard disk drives and/or solid state drives. The drive array controllers, alone or in conjunction with server devices <b>202</b>, may also be configured to manage backup or redundant copies of the data stored in data storage <b>204</b> to protect against drive failures or other types of failures that prevent one or more of server devices <b>202</b> from accessing units of data storage <b>204</b>. Other types of memory aside from drives may be used.</p><p id="p-0061" num="0060">Routers <b>206</b> may include networking equipment configured to provide internal and external communications for server cluster <b>200</b>. For example, routers <b>206</b> may include one or more packet-switching and/or routing devices (including switches and/or gateways) configured to provide (i) network communications between server devices <b>202</b> and data storage <b>204</b> via local cluster network <b>208</b>, and/or (ii) network communications between server cluster <b>200</b> and other devices via communication link <b>210</b> to network <b>212</b>.</p><p id="p-0062" num="0061">Additionally, the configuration of routers <b>206</b> can be based at least in part on the data communication requirements of server devices <b>202</b> and data storage <b>204</b>, the latency and throughput of the local cluster network <b>208</b>, the latency, throughput, and cost of communication link <b>210</b>, and/or other factors that may contribute to the cost, speed, fault-tolerance, resiliency, efficiency, and/or other design goals of the system architecture.</p><p id="p-0063" num="0062">As a possible example, data storage <b>204</b> may include any form of database, such as a structured query language (SQL) database. Various types of data structures may store the information in such a database, including but not limited to tables, arrays, lists, trees, and tuples. Furthermore, any databases in data storage <b>204</b> may be monolithic or distributed across multiple physical devices.</p><p id="p-0064" num="0063">Server devices <b>202</b> may be configured to transmit data to and receive data from data storage <b>204</b>. This transmission and retrieval may take the form of SQL queries or other types of database queries, and the output of such queries, respectively. Additional text, images, video, and/or audio may be included as well. Furthermore, server devices <b>202</b> may organize the received data into web page or web application representations. Such a representation may take the form of a markup language, such as the hypertext markup language (HTML), the extensible markup language (XML), or some other standardized or proprietary format. Moreover, server devices <b>202</b> may have the capability of executing various types of computerized scripting languages, such as but not limited to Perl, Python, PHP Hypertext Preprocessor (PHP), Active Server Pages (ASP), JAVASCRIPT&#xae;, and so on. Computer program code written in these languages may facilitate the providing of web pages to client devices, as well as client device interaction with the web pages. Alternatively or additionally, JAVA&#xae; may be used to facilitate generation of web pages and/or to provide web application functionality.</p><heading id="h-0008" level="1">III. Example Remote Network Management Architecture</heading><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a remote network management architecture, in accordance with example embodiments. This architecture includes three main components&#x2014;managed network <b>300</b>, remote network management platform <b>320</b>, and public cloud networks <b>340</b>&#x2014;all connected by way of Internet <b>350</b>.</p><heading id="h-0009" level="1">A. Managed Networks</heading><p id="p-0066" num="0065">Managed network <b>300</b> may be, for example, an enterprise network used by an entity for computing and communications tasks, as well as storage of data. Thus, managed network <b>300</b> may include client devices <b>302</b>, server devices <b>304</b>, routers <b>306</b>, virtual machines <b>308</b>, firewall <b>310</b>, and/or proxy servers <b>312</b>. Client devices <b>302</b> may be embodied by computing device <b>100</b>, server devices <b>304</b> may be embodied by computing device <b>100</b> or server cluster <b>200</b>, and routers <b>306</b> may be any type of router, switch, or gateway.</p><p id="p-0067" num="0066">Virtual machines <b>308</b> may be embodied by one or more of computing device <b>100</b> or server cluster <b>200</b>. In general, a virtual machine is an emulation of a computing system, and mimics the functionality (e.g., processor, memory, and communication resources) of a physical computer. One physical computing system, such as server cluster <b>200</b>, may support up to thousands of individual virtual machines. In some embodiments, virtual machines <b>308</b> may be managed by a centralized server device or application that facilitates allocation of physical computing resources to individual virtual machines, as well as performance and error reporting. Enterprises often employ virtual machines in order to allocate computing resources in an efficient, as needed fashion. Providers of virtualized computing systems include VMWARE&#xae; and MICROSOFT&#xae;.</p><p id="p-0068" num="0067">Firewall <b>310</b> may be one or more specialized routers or server devices that protect managed network <b>300</b> from unauthorized attempts to access the devices, applications, and services therein, while allowing authorized communication that is initiated from managed network <b>300</b>. Firewall <b>310</b> may also provide intrusion detection, web filtering, virus scanning, application-layer gateways, and other applications or services. In some embodiments not shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, managed network <b>300</b> may include one or more virtual private network (VPN) gateways with which it communicates with remote network management platform <b>320</b> (see below).</p><p id="p-0069" num="0068">Managed network <b>300</b> may also include one or more proxy servers <b>312</b>. An embodiment of proxy servers <b>312</b> may be a server application that facilitates communication and movement of data between managed network <b>300</b>, remote network management platform <b>320</b>, and public cloud networks <b>340</b>. In particular, proxy servers <b>312</b> may be able to establish and maintain secure communication sessions with one or more computational instances of remote network management platform <b>320</b>. By way of such a session, remote network management platform <b>320</b> may be able to discover and manage aspects of the architecture and configuration of managed network <b>300</b> and its components. Possibly with the assistance of proxy servers <b>312</b>, remote network management platform <b>320</b> may also be able to discover and manage aspects of public cloud networks <b>340</b> that are used by managed network <b>300</b>.</p><p id="p-0070" num="0069">Firewalls, such as firewall <b>310</b>, typically deny all communication sessions that are incoming by way of Internet <b>350</b>, unless such a session was ultimately initiated from behind the firewall (i.e., from a device on managed network <b>300</b>) or the firewall has been explicitly configured to support the session. By placing proxy servers <b>312</b> behind firewall <b>310</b> (e.g., within managed network <b>300</b> and protected by firewall <b>310</b>), proxy servers <b>312</b> may be able to initiate these communication sessions through firewall <b>310</b>. Thus, firewall <b>310</b> might not have to be specifically configured to support incoming sessions from remote network management platform <b>320</b>, thereby avoiding potential security risks to managed network <b>300</b>.</p><p id="p-0071" num="0070">In some cases, managed network <b>300</b> may consist of a few devices and a small number of networks. In other deployments, managed network <b>300</b> may span multiple physical locations and include hundreds of networks and hundreds of thousands of devices. Thus, the architecture depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> is capable of scaling up or down by orders of magnitude.</p><p id="p-0072" num="0071">Furthermore, depending on the size, architecture, and connectivity of managed network <b>300</b>, a varying number of proxy servers <b>312</b> may be deployed therein. For example, each one of proxy servers <b>312</b> may be responsible for communicating with remote network management platform <b>320</b> regarding a portion of managed network <b>300</b>. Alternatively or additionally, sets of two or more proxy servers may be assigned to such a portion of managed network <b>300</b> for purposes of load balancing, redundancy, and/or high availability.</p><heading id="h-0010" level="1">B. Remote Network Management Platforms</heading><p id="p-0073" num="0072">Remote network management platform <b>320</b> is a hosted environment that provides aPaaS services to users, particularly to the operator of managed network <b>300</b>. These services may take the form of web-based portals, for example, using the aforementioned web-based technologies. Thus, a user can securely access remote network management platform <b>320</b> from, for example, client devices <b>302</b>, or potentially from a client device outside of managed network <b>300</b>. By way of the web-based portals, users may design, test, and deploy applications, generate reports, view analytics, and perform other tasks.</p><p id="p-0074" num="0073">As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, remote network management platform <b>320</b> includes four computational instances <b>322</b>, <b>324</b>, <b>326</b>, and <b>328</b>. Each of these computational instances may represent one or more server nodes operating dedicated copies of the aPaaS software and/or one or more database nodes. The arrangement of server and database nodes on physical server devices and/or virtual machines can be flexible and may vary based on enterprise needs. In combination, these nodes may provide a set of web portals, services, and applications (e.g., a wholly-functioning aPaaS system) available to a particular enterprise. In some cases, a single enterprise may use multiple computational instances.</p><p id="p-0075" num="0074">For example, managed network <b>300</b> may be an enterprise customer of remote network management platform <b>320</b>, and may use computational instances <b>322</b>, <b>324</b>, and <b>326</b>. The reason for providing multiple computational instances to one customer is that the customer may wish to independently develop, test, and deploy its applications and services. Thus, computational instance <b>322</b> may be dedicated to application development related to managed network <b>300</b>, computational instance <b>324</b> may be dedicated to testing these applications, and computational instance <b>326</b> may be dedicated to the live operation of tested applications and services. A computational instance may also be referred to as a hosted instance, a remote instance, a customer instance, or by some other designation. Any application deployed onto a computational instance may be a scoped application, in that its access to databases within the computational instance can be restricted to certain elements therein (e.g., one or more particular database tables or particular rows within one or more database tables).</p><p id="p-0076" num="0075">For purposes of clarity, the disclosure herein refers to the arrangement of application nodes, database nodes, aPaaS software executing thereon, and underlying hardware as a &#x201c;computational instance.&#x201d; Note that users may colloquially refer to the graphical user interfaces provided thereby as &#x201c;instances.&#x201d; But unless it is defined otherwise herein, a &#x201c;computational instance&#x201d; is a computing system disposed within remote network management platform <b>320</b>.</p><p id="p-0077" num="0076">The multi-instance architecture of remote network management platform <b>320</b> is in contrast to conventional multi-tenant architectures, over which multi-instance architectures exhibit several advantages. In multi-tenant architectures, data from different customers (e.g., enterprises) are comingled in a single database. While these customers' data are separate from one another, the separation is enforced by the software that operates the single database. As a consequence, a security breach in this system may impact all customers' data, creating additional risk, especially for entities subject to governmental, healthcare, and/or financial regulation. Furthermore, any database operations that impact one customer will likely impact all customers sharing that database. Thus, if there is an outage due to hardware or software errors, this outage affects all such customers. Likewise, if the database is to be upgraded to meet the needs of one customer, it will be unavailable to all customers during the upgrade process. Often, such maintenance windows will be long, due to the size of the shared database.</p><p id="p-0078" num="0077">In contrast, the multi-instance architecture provides each customer with its own database in a dedicated computing instance. This prevents comingling of customer data, and allows each instance to be independently managed. For example, when one customer's instance experiences an outage due to errors or an upgrade, other computational instances are not impacted. Maintenance down time is limited because the database only contains one customer's data. Further, the simpler design of the multi-instance architecture allows redundant copies of each customer database and instance to be deployed in a geographically diverse fashion. This facilitates high availability, where the live version of the customer's instance can be moved when faults are detected or maintenance is being performed.</p><p id="p-0079" num="0078">In some embodiments, remote network management platform <b>320</b> may include one or more central instances, controlled by the entity that operates this platform. Like a computational instance, a central instance may include some number of application and database nodes disposed upon some number of physical server devices or virtual machines. Such a central instance may serve as a repository for specific configurations of computational instances as well as data that can be shared amongst at least some of the computational instances. For instance, definitions of common security threats that could occur on the computational instances, software packages that are commonly discovered on the computational instances, and/or an application store for applications that can be deployed to the computational instances may reside in a central instance. Computational instances may communicate with central instances by way of well-defined interfaces in order to obtain this data.</p><p id="p-0080" num="0079">In order to support multiple computational instances in an efficient fashion, remote network management platform <b>320</b> may implement a plurality of these instances on a single hardware platform. For example, when the aPaaS system is implemented on a server cluster such as server cluster <b>200</b>, it may operate virtual machines that dedicate varying amounts of computational, storage, and communication resources to instances. But full virtualization of server cluster <b>200</b> might not be necessary, and other mechanisms may be used to separate instances. In some examples, each instance may have a dedicated account and one or more dedicated databases on server cluster <b>200</b>. Alternatively, a computational instance such as computational instance <b>322</b> may span multiple physical devices.</p><p id="p-0081" num="0080">In some cases, a single server cluster of remote network management platform <b>320</b> may support multiple independent enterprises. Furthermore, as described below, remote network management platform <b>320</b> may include multiple server clusters deployed in geographically diverse data centers in order to facilitate load balancing, redundancy, and/or high availability.</p><heading id="h-0011" level="1">C. Public Cloud Networks</heading><p id="p-0082" num="0081">Public cloud networks <b>340</b> may be remote server devices (e.g., a plurality of server clusters such as server cluster <b>200</b>) that can be used for outsourced computation, data storage, communication, and service hosting operations. These servers may be virtualized (i.e., the servers may be virtual machines). Examples of public cloud networks <b>340</b> may include AMAZON WEB SERVICES&#xae; and MICROSOFT&#xae; AZURE&#xae;. Like remote network management platform <b>320</b>, multiple server clusters supporting public cloud networks <b>340</b> may be deployed at geographically diverse locations for purposes of load balancing, redundancy, and/or high availability.</p><p id="p-0083" num="0082">Managed network <b>300</b> may use one or more of public cloud networks <b>340</b> to deploy applications and services to its clients and customers. For instance, if managed network <b>300</b> provides online music streaming services, public cloud networks <b>340</b> may store the music files and provide web interface and streaming capabilities. In this way, the enterprise of managed network <b>300</b> does not have to build and maintain its own servers for these operations.</p><p id="p-0084" num="0083">Remote network management platform <b>320</b> may include modules that integrate with public cloud networks <b>340</b> to expose virtual machines and managed services therein to managed network <b>300</b>. The modules may allow users to request virtual resources, discover allocated resources, and provide flexible reporting for public cloud networks <b>340</b>. In order to establish this functionality, a user from managed network <b>300</b> might first establish an account with public cloud networks <b>340</b>, and request a set of associated resources. Then, the user may enter the account information into the appropriate modules of remote network management platform <b>320</b>. These modules may then automatically discover the manageable resources in the account, and also provide reports related to usage, performance, and billing.</p><heading id="h-0012" level="1">D. Communication Support and Other Operations</heading><p id="p-0085" num="0084">Internet <b>350</b> may represent a portion of the global Internet. However, Internet <b>350</b> may alternatively represent a different type of network, such as a private wide-area or local-area packet-switched network.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>4</b></figref> further illustrates the communication environment between managed network <b>300</b> and computational instance <b>322</b>, and introduces additional features and alternative embodiments. In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, computational instance <b>322</b> is replicated across data centers <b>400</b>A and <b>400</b>B. These data centers may be geographically distant from one another, perhaps in different cities or different countries. Each data center includes support equipment that facilitates communication with managed network <b>300</b>, as well as remote users.</p><p id="p-0087" num="0086">In data center <b>400</b>A, network traffic to and from external devices flows either through VPN gateway <b>402</b>A or firewall <b>404</b>A. VPN gateway <b>402</b>A may be peered with VPN gateway <b>412</b> of managed network <b>300</b> by way of a security protocol such as Internet Protocol Security (IPSEC) or Transport Layer Security (TLS). Firewall <b>404</b>A may be configured to allow access from authorized users, such as user <b>414</b> and remote user <b>416</b>, and to deny access to unauthorized users. By way of firewall <b>404</b>A, these users may access computational instance <b>322</b>, and possibly other computational instances. Load balancer <b>406</b>A may be used to distribute traffic amongst one or more physical or virtual server devices that host computational instance <b>322</b>. Load balancer <b>406</b>A may simplify user access by hiding the internal configuration of data center <b>400</b>A, (e.g., computational instance <b>322</b>) from client devices. For instance, if computational instance <b>322</b> includes multiple physical or virtual computing devices that share access to multiple databases, load balancer <b>406</b>A may distribute network traffic and processing tasks across these computing devices and databases so that no one computing device or database is significantly busier than the others. In some embodiments, computational instance <b>322</b> may include VPN gateway <b>402</b>A, firewall <b>404</b>A, and load balancer <b>406</b>A.</p><p id="p-0088" num="0087">Data center <b>400</b>B may include its own versions of the components in data center <b>400</b>A. Thus, VPN gateway <b>402</b>B, firewall <b>404</b>B, and load balancer <b>406</b>B may perform the same or similar operations as VPN gateway <b>402</b>A, firewall <b>404</b>A, and load balancer <b>406</b>A, respectively. Further, by way of real-time or near-real-time database replication and/or other operations, computational instance <b>322</b> may exist simultaneously in data centers <b>400</b>A and <b>400</b>B.</p><p id="p-0089" num="0088">Data centers <b>400</b>A and <b>400</b>B as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may facilitate redundancy and high availability. In the configuration of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, data center <b>400</b>A is active and data center <b>400</b>B is passive. Thus, data center <b>400</b>A is serving all traffic to and from managed network <b>300</b>, while the version of computational instance <b>322</b> in data center <b>400</b>B is being updated in near-real-time. Other configurations, such as one in which both data centers are active, may be supported.</p><p id="p-0090" num="0089">Should data center <b>400</b>A fail in some fashion or otherwise become unavailable to users, data center <b>400</b>B can take over as the active data center. For example, domain name system (DNS) servers that associate a domain name of computational instance <b>322</b> with one or more Internet Protocol (IP) addresses of data center <b>400</b>A may re-associate the domain name with one or more IP addresses of data center <b>400</b>B. After this re-association completes (which may take less than one second or several seconds), users may access computational instance <b>322</b> by way of data center <b>400</b>B.</p><p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. <b>4</b></figref> also illustrates a possible configuration of managed network <b>300</b>. As noted above, proxy servers <b>312</b> and user <b>414</b> may access computational instance <b>322</b> through firewall <b>310</b>. Proxy servers <b>312</b> may also access configuration items <b>410</b>. In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, configuration items <b>410</b> may refer to any or all of client devices <b>302</b>, server devices <b>304</b>, routers <b>306</b>, and virtual machines <b>308</b>, any applications or services executing thereon, as well as relationships between devices, applications, and services. Thus, the term &#x201c;configuration items&#x201d; may be shorthand for any physical or virtual device, or any application or service remotely discoverable or managed by computational instance <b>322</b>, or relationships between discovered devices, applications, and services. Configuration items may be represented in a CMDB of computational instance <b>322</b>.</p><p id="p-0092" num="0091">As noted above, VPN gateway <b>412</b> may provide a dedicated VPN to VPN gateway <b>402</b>A. Such a VPN may be helpful when there is a significant amount of traffic between managed network <b>300</b> and computational instance <b>322</b>, or security policies otherwise suggest or require use of a VPN between these sites. In some embodiments, any device in managed network <b>300</b> and/or computational instance <b>322</b> that directly communicates via the VPN is assigned a public IP address. Other devices in managed network <b>300</b> and/or computational instance <b>322</b> may be assigned private IP addresses (e.g., IP addresses selected from the 10.0.0.0-10.255.255.255 or 192.168.0.0-192.168.255.255 ranges, represented in shorthand as subnets 10.0.0.0/8 and 192.168.0.0/16, respectively).</p><heading id="h-0013" level="1">IV. Example Device, Application, and Service Discovery</heading><p id="p-0093" num="0092">In order for remote network management platform <b>320</b> to administer the devices, applications, and services of managed network <b>300</b>, remote network management platform <b>320</b> may first determine what devices are present in managed network <b>300</b>, the configurations and operational statuses of these devices, and the applications and services provided by the devices, as well as the relationships between discovered devices, applications, and services. As noted above, each device, application, service, and relationship may be referred to as a configuration item. The process of defining configuration items within managed network <b>300</b> is referred to as discovery, and may be facilitated at least in part by proxy servers <b>312</b>.</p><p id="p-0094" num="0093">For purposes of the embodiments herein, an &#x201c;application&#x201d; may refer to one or more processes, threads, programs, client modules, server modules, or any other software that executes on a device or group of devices. A &#x201c;service&#x201d; may refer to a high-level capability provided by multiple applications executing on one or more devices working in conjunction with one another. For example, a high-level web service may involve multiple web application server threads executing on one device and accessing information from a database application that executes on another device.</p><p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> provides a logical depiction of how configuration items can be discovered, as well as how information related to discovered configuration items can be stored. For sake of simplicity, remote network management platform <b>320</b>, public cloud networks <b>340</b>, and Internet <b>350</b> are not shown.</p><p id="p-0096" num="0095">In <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, CMDB <b>500</b> and task list <b>502</b> are stored within computational instance <b>322</b>. Computational instance <b>322</b> may transmit discovery commands to proxy servers <b>312</b>. In response, proxy servers <b>312</b> may transmit probes to various devices, applications, and services in managed network <b>300</b>. These devices, applications, and services may transmit responses to proxy servers <b>312</b>, and proxy servers <b>312</b> may then provide information regarding discovered configuration items to CMDB <b>500</b> for storage therein. Configuration items stored in CMDB <b>500</b> represent the environment of managed network <b>300</b>.</p><p id="p-0097" num="0096">Task list <b>502</b> represents a list of activities that proxy servers <b>312</b> are to perform on behalf of computational instance <b>322</b>. As discovery takes place, task list <b>502</b> is populated. Proxy servers <b>312</b> repeatedly query task list <b>502</b>, obtain the next task therein, and perform this task until task list <b>502</b> is empty or another stopping condition has been reached.</p><p id="p-0098" num="0097">To facilitate discovery, proxy servers <b>312</b> may be configured with information regarding one or more subnets in managed network <b>300</b> that are reachable by way of proxy servers <b>312</b>. For instance, proxy servers <b>312</b> may be given the IP address range 192.168.0/24 as a subnet. Then, computational instance <b>322</b> may store this information in CMDB <b>500</b> and place tasks in task list <b>502</b> for discovery of devices at each of these addresses.</p><p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> also depicts devices, applications, and services in managed network <b>300</b> as configuration items <b>504</b>, <b>506</b>, <b>508</b>, <b>510</b>, and <b>512</b>. As noted above, these configuration items represent a set of physical and/or virtual devices (e.g., client devices, server devices, routers, or virtual machines), applications executing thereon (e.g., web servers, email servers, databases, or storage arrays), relationships therebetween, as well as services that involve multiple individual configuration items.</p><p id="p-0100" num="0099">Placing the tasks in task list <b>502</b> may trigger or otherwise cause proxy servers <b>312</b> to begin discovery. Alternatively or additionally, discovery may be manually triggered or automatically triggered based on triggering events (e.g., discovery may automatically begin once per day at a particular time).</p><p id="p-0101" num="0100">In general, discovery may proceed in four logical phases: scanning, classification, identification, and exploration. Each phase of discovery involves various types of probe messages being transmitted by proxy servers <b>312</b> to one or more devices in managed network <b>300</b>. The responses to these probes may be received and processed by proxy servers <b>312</b>, and representations thereof may be transmitted to CMDB <b>500</b>. Thus, each phase can result in more configuration items being discovered and stored in CMDB <b>500</b>.</p><p id="p-0102" num="0101">In the scanning phase, proxy servers <b>312</b> may probe each IP address in the specified range of IP addresses for open Transmission Control Protocol (TCP) and/or User Datagram Protocol (UDP) ports to determine the general type of device. The presence of such open ports at an IP address may indicate that a particular application is operating on the device that is assigned the IP address, which in turn may identify the operating system used by the device. For example, if TCP port <b>135</b> is open, then the device is likely executing a WINDOWS&#xae; operating system. Similarly, if TCP port <b>22</b> is open, then the device is likely executing a UNIX&#xae; operating system, such as LINUX&#xae;. If UDP port <b>161</b> is open, then the device may be able to be further identified through the Simple Network Management Protocol (SNMP). Other possibilities exist. Once the presence of a device at a particular IP address and its open ports have been discovered, these configuration items are saved in CMDB <b>500</b>.</p><p id="p-0103" num="0102">In the classification phase, proxy servers <b>312</b> may further probe each discovered device to determine the version of its operating system. The probes used for a particular device are based on information gathered about the devices during the scanning phase. For example, if a device is found with TCP port <b>22</b> open, a set of UNIX&#xae;-specific probes may be used. Likewise, if a device is found with TCP port <b>135</b> open, a set of WINDOWS&#xae;-specific probes may be used. For either case, an appropriate set of tasks may be placed in task list <b>502</b> for proxy servers <b>312</b> to carry out. These tasks may result in proxy servers <b>312</b> logging on, or otherwise accessing information from the particular device. For instance, if TCP port <b>22</b> is open, proxy servers <b>312</b> may be instructed to initiate a Secure Shell (SSH) connection to the particular device and obtain information about the operating system thereon from particular locations in the file system. Based on this information, the operating system may be determined. As an example, a UNIX&#xae; device with TCP port <b>22</b> open may be classified as AIX&#xae;, HPUX, LINUX&#xae;, MACOS&#xae;, or SOLARIS&#xae;. This classification information may be stored as one or more configuration items in CMDB <b>500</b>.</p><p id="p-0104" num="0103">In the identification phase, proxy servers <b>312</b> may determine specific details about a classified device. The probes used during this phase may be based on information gathered about the particular devices during the classification phase. For example, if a device was classified as LINUX&#xae;, a set of LINUX&#xae;-specific probes may be used. Likewise, if a device was classified as WINDOWS&#xae; 2012, as a set of WINDOWS&#xae;-2012-specific probes may be used. As was the case for the classification phase, an appropriate set of tasks may be placed in task list <b>502</b> for proxy servers <b>312</b> to carry out. These tasks may result in proxy servers <b>312</b> reading information from the particular device, such as basic input/output system (BIOS) information, serial numbers, network interface information, media access control address(es) assigned to these network interface(s), IP address(es) used by the particular device and so on. This identification information may be stored as one or more configuration items in CMDB <b>500</b>.</p><p id="p-0105" num="0104">In the exploration phase, proxy servers <b>312</b> may determine further details about the operational state of a classified device. The probes used during this phase may be based on information gathered about the particular devices during the classification phase and/or the identification phase. Again, an appropriate set of tasks may be placed in task list <b>502</b> for proxy servers <b>312</b> to carry out. These tasks may result in proxy servers <b>312</b> reading additional information from the particular device, such as processor information, memory information, lists of running processes (applications), and so on. Once more, the discovered information may be stored as one or more configuration items in CMDB <b>500</b>.</p><p id="p-0106" num="0105">Running discovery on a network device, such as a router, may utilize SNMP. Instead of or in addition to determining a list of running processes or other application-related information, discovery may determine additional subnets known to the router and the operational state of the router's network interfaces (e.g., active, inactive, queue length, number of packets dropped, etc.). The IP addresses of the additional subnets may be candidates for further discovery procedures. Thus, discovery may progress iteratively or recursively.</p><p id="p-0107" num="0106">Once discovery completes, a snapshot representation of each discovered device, application, and service is available in CMDB <b>500</b>. For example, after discovery, operating system version, hardware configuration, and network configuration details for client devices, server devices, and routers in managed network <b>300</b>, as well as applications executing thereon, may be stored. This collected information may be presented to a user in various ways to allow the user to view the hardware composition and operational status of devices, as well as the characteristics of services that span multiple devices and applications.</p><p id="p-0108" num="0107">Furthermore, CMDB <b>500</b> may include entries regarding dependencies and relationships between configuration items. More specifically, an application that is executing on a particular server device, as well as the services that rely on this application, may be represented as such in CMDB <b>500</b>. For example, suppose that a database application is executing on a server device, and that this database application is used by a new employee onboarding service as well as a payroll service. Thus, if the server device is taken out of operation for maintenance, it is clear that the employee onboarding service and payroll service will be impacted. Likewise, the dependencies and relationships between configuration items may be able to represent the services impacted when a particular router fails.</p><p id="p-0109" num="0108">In general, dependencies and relationships between configuration items may be displayed on a web-based interface and represented in a hierarchical fashion. Thus, adding, changing, or removing such dependencies and relationships may be accomplished by way of this interface.</p><p id="p-0110" num="0109">Furthermore, users from managed network <b>300</b> may develop workflows that allow certain coordinated activities to take place across multiple discovered devices. For instance, an IT workflow might allow the user to change the common administrator password to all discovered LINUX&#xae; devices in a single operation.</p><p id="p-0111" num="0110">In order for discovery to take place in the manner described above, proxy servers <b>312</b>, CMDB <b>500</b>, and/or one or more credential stores may be configured with credentials for one or more of the devices to be discovered. Credentials may include any type of information needed in order to access the devices. These may include userid/password pairs, certificates, and so on. In some embodiments, these credentials may be stored in encrypted fields of CMDB <b>500</b>. Proxy servers <b>312</b> may contain the decryption key for the credentials so that proxy servers <b>312</b> can use these credentials to log on to or otherwise access devices being discovered.</p><p id="p-0112" num="0111">The discovery process is depicted as a flow chart in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>. At block <b>520</b>, the task list in the computational instance is populated, for instance, with a range of IP addresses. At block <b>522</b>, the scanning phase takes place. Thus, the proxy servers probe the IP addresses for devices using these IP addresses, and attempt to determine the operating systems that are executing on these devices. At block <b>524</b>, the classification phase takes place. The proxy servers attempt to determine the operating system version of the discovered devices. At block <b>526</b>, the identification phase takes place. The proxy servers attempt to determine the hardware and/or software configuration of the discovered devices. At block <b>528</b>, the exploration phase takes place. The proxy servers attempt to determine the operational state and applications executing on the discovered devices. At block <b>530</b>, further editing of the configuration items representing the discovered devices and applications may take place. This editing may be automated and/or manual in nature.</p><p id="p-0113" num="0112">The blocks represented in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> are examples. Discovery may be a highly configurable procedure that can have more or fewer phases, and the operations of each phase may vary. In some cases, one or more phases may be customized, or may otherwise deviate from the exemplary descriptions above.</p><p id="p-0114" num="0113">In this manner, a remote network management platform may discover and inventory the hardware, software, and services deployed on and provided by the managed network. As noted above, this data may be stored in a CMDB of the associated computational instance as configuration items. For example, individual hardware components (e.g., computing devices, virtual servers, databases, routers, etc.) may be represented as hardware configuration items, while the applications installed and/or executing thereon may be represented as software configuration items.</p><p id="p-0115" num="0114">The relationship between a software configuration item installed or executing on a hardware configuration item may take various forms, such as &#x201c;is hosted on&#x201d;, &#x201c;runs on&#x201d;, or &#x201c;depends on&#x201d;. Thus, a database application installed on a server device may have the relationship &#x201c;is hosted on&#x201d; with the server device to indicate that the database application is hosted on the server device. In some embodiments, the server device may have a reciprocal relationship of &#x201c;used by&#x201d; with the database application to indicate that the server device is used by the database application. These relationships may be automatically found using the discovery procedures described above, though it is possible to manually set relationships as well.</p><p id="p-0116" num="0115">The relationship between a service and one or more software configuration items may also take various forms. As an example, a web service may include a web server software configuration item and a database application software configuration item, each installed on different hardware configuration items. The web service may have a &#x201c;depends on&#x201d; relationship with both of these software configuration items, while the software configuration items have a &#x201c;used by&#x201d; reciprocal relationship with the web service. Services might not be able to be fully determined by discovery procedures, and instead may rely on service mapping (e.g., probing configuration files and/or carrying out network traffic analysis to determine service level relationships between configuration items) and possibly some extent of manual configuration.</p><p id="p-0117" num="0116">Regardless of how relationship information is obtained, it can be valuable for the operation of a managed network. Notably, IT personnel can quickly determine where certain software applications are deployed, and what configuration items make up a service. This allows for rapid pinpointing of root causes of service outages or degradation. For example, if two different services are suffering from slow response times, the CMDB can be queried (perhaps among other activities) to determine that the root cause is a database application that is used by both services having high processor utilization. Thus, IT personnel can address the database application rather than waste time considering the health and performance of other configuration items that make up the services.</p><heading id="h-0014" level="1">V. Example Application for Embedding CI Attribute Values</heading><p id="p-0118" num="0117">A third-party scanning system may generate data regarding a computing resource (e.g., physical or virtual computing device, software application, etc.) associated with a managed network. The data may be generated based on the third-party scanning system executing one or more tests (e.g., scans, searches, analyses, checks, assessments, inspections, and/or evaluations) on the computing resource, and may thus be referred to as test result data. It may be beneficial to store at least part of this test result data in association with one or more previously-discovered CIs for the computing resource to provide a more complete record of the computing resource, and to avoid storage of duplicative data.</p><p id="p-0119" num="0118">However, it may be difficult to accurately select the previously-discovered CIs for the computing resource based on the test result data generated by the third-party scanning system. Namely, the test result data generated by the third-party scanning system may use a format, syntax, and/or rules to generate attribute values of the computing resource that differ from the format, syntax, and/or rules used by the discovery process when generating and/or storing the discovered attribute values of the previously-discovered CIs. Thus, rule-based matching algorithms (e.g., string comparison techniques) might not provide a sufficient level of matching accuracy, and/or might not work at all in some cases.</p><p id="p-0120" num="0119">Accordingly, <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> illustrates an example system that may be used to match data generated by a third-party scanning system to a previously-discovered CI. Specifically, persistent storage <b>602</b> may store therein records or other representations of CI <b>604</b> through CI <b>608</b> (i.e., CIs <b>604</b>-<b>608</b>). For example, CIs <b>604</b>-<b>608</b> may be contained and organized in CMDB <b>500</b>, which may be stored in persistent storage <b>602</b>. Each of CIs <b>604</b>-<b>608</b> may be associated with a corresponding set of discovered attribute values. Namely, CI <b>604</b> may be associated with discovered attribute values <b>606</b> indicative of various attributes, properties, and/or aspects of CI <b>604</b>, and CI <b>608</b> may be associated with discovered attribute values <b>610</b> indicative of various attributes, properties, and/or aspects of CI <b>604</b>. Discovered attribute values <b>606</b>-<b>610</b> may be determined, for example, by a discovery application executing one or more discovery patterns on managed network <b>300</b>. However, attribute values <b>606</b>-<b>610</b> may also be determined by way of other discovery processes and/or applications executed on, for, with respect to, and/or on behalf of managed network <b>300</b>.</p><p id="p-0121" num="0120">A third-party scanning system may be configured to execute one or more tests of a computing resource associated with managed network <b>300</b>, and generate test result data <b>612</b> based on execution of the one or more tests. As illustrated in and discussed with respect to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the third-party scanning system may be configured to test computing resources within managed network <b>300</b> for vulnerabilities, and test result data <b>612</b> may thus represent vulnerabilities detected thereby for a particular computing resource. However, the third-party scanning system may additionally or alternatively be configured to test computing resources within managed network <b>300</b> for reasons other than vulnerability detection. For example, the third-party scanning system may be configured to scan the computing resources for usage statistics (e.g., processing hardware usage, storage usage, application usage, network usage, etc.) and/or test the performance of the computing resources (e.g., by determining an execution time of benchmark software), among other possible operations.</p><p id="p-0122" num="0121">Regardless of the specific function of the third-party scanning system, test result data <b>612</b> may include test result <b>616</b> and computing resource attribute value(s) <b>614</b>. Computing resource attribute value(s) <b>614</b> may be indicative of the attributes, properties, and/or aspects of the computing resource tested by the third-party scanning system. Notably, rather than being collected by the discovery application, attribute value(s) <b>614</b> may be collected by the third-party scanning system, but may nevertheless represent attributes, properties, and/or aspects of the tested computing resource similar to or the same as those that are collected by the discovery application. Thus, attribute value(s) <b>614</b> may constitute information that at least partially identifies the tested computing resource and/or its corresponding CI in persistent storage <b>602</b>.</p><p id="p-0123" num="0122">In some cases, this tested computing resource may already be discovered and represented by a corresponding CI of CIs <b>604</b>-<b>608</b>. However, test result <b>616</b> may include information that is not yet associated with the corresponding CI of the computing resource. For example, test result <b>616</b> might not be associated with the corresponding CI because remote network management platform <b>320</b> may rely on the third-party scanning system for generating test result <b>616</b>, rather than collecting such information during, for example, the discovery process. Thus, it may be desirable to associate test result <b>616</b> with the corresponding CI of the tested computing resource (rather than creating an additional, duplicative CI) in order to provide a more complete and accurate record of the tested computing resource. Additionally, storing test result <b>616</b> in persistent storage <b>602</b> provides a centralized location for most or all information collected regarding the tested computing resource and allows, for example, for viewing of any vulnerabilities of the tested computing resource alongside other attribute values thereof.</p><p id="p-0124" num="0123">In some cases, attribute value(s) <b>614</b> may closely or exactly match the discovered attribute values of the CI representing the tested computing resource. For example, character strings representing attribute value(s) <b>614</b> may exactly match with one or more character strings representing discovered attribute values <b>610</b> of CI <b>608</b>. Thus, one or more rule-based algorithms may be used to match the tested computing resource to CI <b>608</b>, and test result <b>616</b> may be added to CI <b>608</b> on the basis of this match.</p><p id="p-0125" num="0124">In other cases, however, attribute value(s) <b>614</b> might not closely or exactly match any of the respective discovered attribute values of CIs <b>604</b>-<b>608</b> (although the tested computing resource may nevertheless already be represented by one of CIs <b>604</b>-<b>608</b>). For example, the third-party scanning system may use a format, syntax, and/or rules when generating attribute value(s) <b>614</b> that is different from the format, syntax, and/or rules used (e.g., by the discovery application) when generating and/or storing CIs <b>604</b>-<b>608</b>. Thus, for example, the character strings representing attribute value(s) <b>614</b> may differ from the character strings representing discovered attribute values <b>610</b> of CI <b>608</b> even when CI <b>608</b> represents the tested computing resource. In such cases, when the exact difference in format, syntax, and/or rules is not accounted for by the rule-based algorithms, the one or more rule-based algorithms may fail to match the tested computing resource to a CI.</p><p id="p-0126" num="0125">Accordingly, application <b>600</b> may be configured to match test result data <b>612</b> to a corresponding CI of CIs <b>604</b> -<b>608</b> based on embeddings of the respective attribute values. Thus, application <b>600</b> may include embedding model <b>620</b>, vector comparator <b>630</b>, and vector matcher <b>640</b>. Embedding model <b>620</b>, vector comparator <b>630</b>, and vector matcher <b>640</b> may represent hardware and/or software components, modules, and/or functions of application <b>600</b>. In some implementations, application <b>600</b> may be disposed in and/or executed by a computational instance of remote network management platform <b>320</b>.</p><p id="p-0127" num="0126">Embedding model <b>620</b> may be a machine learning model, such an artificial neural network, configured to generate an embedding vector based on one or more attribute values provided thereto as input. Thus, embedding model <b>620</b> may be configured to generate candidate embedding vector <b>624</b> based on discovered attribute values <b>606</b>, candidate embedding vector <b>628</b> based on discovered attribute values <b>610</b>, and embedding vector <b>622</b> based on computing resource attribute(s) <b>614</b>. The structure of the embedding vectors is illustrated in and discussed in more detail with respect to <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>. Embedding vectors <b>624</b>-<b>628</b> may be referred to as candidate embedding vectors because each is a potential match for embedding vector <b>622</b>.</p><p id="p-0128" num="0127">In some implementations, some or all of the attribute values may be represented as character strings. Thus, embedding model <b>620</b> may be a character string embedding model configured to generate embedding vectors based on the character strings. For example, embedding model <b>620</b> may include, utilize, and/or implement aspects of Word2Vec, GloVe, fastText, Gensim, or other word embedding architectures. In other implementations, some or all of the attribute values may be represented as integer and/or floating point values, and thus embedding model <b>620</b> may be configured to generate embedding vectors based on the integer and/or floating point values. In yet other implementations, a combination of character string, integer, and/or floating point values inputs may be possible, and embedding model <b>620</b> may thus include different sub-models configured to process these different data formats.</p><p id="p-0129" num="0128">Vector comparator <b>630</b> may be configured to compare embedding vector <b>622</b> to each of candidate embedding vectors <b>624</b>-<b>628</b> and determine corresponding similarity metrics. Specifically, a comparison of embedding vector <b>622</b> with candidate embedding vector <b>624</b> may generate similarity metric <b>634</b> and a comparison of embedding vector <b>622</b> with candidate embedding vector <b>628</b> may generate similarity metric <b>638</b>. In some implementations, the similarity metric may be a Euclidean distance between the embedding vectors being compared.</p><p id="p-0130" num="0129">In other implementations, the similarity metric may be a cosine distance between the embedding vectors being compared. Other similarity metrics are possible. Similarity metrics <b>634</b>-<b>638</b> may thus measure respective distances between embedding vector <b>622</b> and each of candidate embedding vectors <b>624</b>-<b>628</b>, respectively, in a vector space defined by embedding model <b>620</b>. These distances may be indicative of how similar attribute value(s) <b>614</b> are to each of discovered attribute values <b>606</b>-<b>610</b>.</p><p id="p-0131" num="0130">Vector matcher <b>640</b> may be configured to select, based on similarity metrics <b>634</b>- <b>638</b>, a CI from CIs <b>604</b>-<b>608</b> that best matches the tested computing resource, as indicated by CI match <b>642</b>. Specifically, vector matcher <b>640</b> may select the CI associated with discovered attribute values that most closely match attribute value(s) <b>614</b>, as measured by way of similarity metrics <b>634</b>-<b>638</b> based on embedding vectors <b>624</b>-<b>628</b> and <b>622</b>. In some cases, selection of the CI may be automated. In one example, vector matcher <b>640</b> may be configured to select the CI associated with the highest similarity metric of similarity metrics <b>634</b>-<b>638</b>. In another example, the CI may be additionally or alternatively selected based on its corresponding similarity metric exceeding a threshold similarity value, such as 75%, 80%, 90%, or another desired threshold value (which may also be expressed as a corresponding distance rather than a percentage). Thus, in some cases, vector matcher <b>640</b> may determine that a match for embedding vector <b>622</b> does not exist based on, for example, each of similarity metrics <b>634</b>-<b>638</b> failing to exceed the threshold similarity value.</p><p id="p-0132" num="0131">In a further example, vector matcher <b>640</b> and/or other components of application <b>600</b> may be configured to display some of similarity metrics <b>634</b>-<b>638</b> by way of a user interface to allow for manual CI matching. For example, the n highest similarity metrics of similarity metrics <b>634</b>-<b>638</b> may be displayed, where n is an integer value such as 3, 4, 5, 8, etc., and may be modifiable. In some cases, the user interface may also display attribute value(s) <b>614</b> and the discovered attribute values of the CIs corresponding to the n highest similarity metrics. A user may be able to select one of the CIs associated with the n highest similarity metrics based on the displayed information, thereby indicating the best CI match for the tested computing resource. In some cases, the user may additionally or alternatively indicate that none of CIs <b>604</b>-<b>608</b> represents the discovered computing resource, and a new CI is to be generated therefor. Thus, selection of the CI may be manual, but may be assisted by the information generated and displayed by application <b>600</b>.</p><p id="p-0133" num="0132">CI match <b>642</b> may indicate the selected CI that most likely corresponds to the tested computing resource, or an absence of a successful match. An indication of CI match <b>642</b> may be provided to persistent storage <b>602</b>, as indicated by line <b>650</b>, thereby causing persistent storage <b>602</b> to store at least test result <b>616</b> in association with the selected CI (or a new CI in the absence of a successful match). For example, when CI match <b>642</b> indicates that CI <b>608</b> most likely corresponds to the tested computing resource, persistent storage <b>602</b> may store test result <b>616</b> as part of discovered attribute values <b>610</b>.</p><heading id="h-0015" level="1">VI. Example Embedding Vector Structure</heading><p id="p-0134" num="0133"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> illustrates an example relationship between a set of attribute values and dimensions of its corresponding embedding vector, such as between attribute value(s) <b>614</b> and dimensions of embedding vector <b>622</b>. The third-party scanning system may define the set of attributes, properties, and/or aspects of the tested computing resource that attribute value(s) <b>614</b> represent. Thus, this the set of attributes, properties, and/or aspects of the tested computing resource may vary with different third-party scanning systems. In one example, the set of attributes, properties, and/or aspects of the tested computing resource may include third-party scanning system identifier <b>660</b>, Network Basic Input/Output System (NetBIOS) identifier <b>662</b>, computing resource name <b>664</b>, fully qualified domain name (FQDN) <b>666</b>, IP address <b>668</b>, and/or DNS entry <b>670</b>.</p><p id="p-0135" num="0134">Third-party scanning system identifier <b>660</b> may be an identifier assigned to the tested computing resource by the third-party scanning system. NetBIOS identifier <b>662</b> may be an identifier assigned to the tested computing resource by NetBIOS. Computing resource name <b>664</b> may be a name associated with the tested computing resource, such as a hostname or a software application name, among other possibilities. FQDN <b>666</b> may represent at least a portion of a FQDN associated with the tested computing resource. IP address <b>668</b> may represent one or more of an IP address associated with the tested computing resource, and/or an IP address associated with another related computing resource (e.g., network adapter). DNS entry <b>670</b> may represent DNS information associated with the tested computing resource or another related computing resource.</p><p id="p-0136" num="0135">In some cases, the set of computing resource attributes, properties, and/or aspects represented by discovered attribute values <b>606</b>-<b>610</b> may be larger than that represented by attribute value(s) <b>614</b>. That is, discovered attributes <b>606</b>-<b>610</b> may include attribute values that the third-party scanning system does not collect. Accordingly, embedding model <b>620</b> may be configured to consider the attributes, properties, and/or aspects represented by attribute value(s) <b>614</b>, and ignore the attributes, properties, and/or aspects that are not represented by attribute value(s) <b>614</b> (but that might be represented by discovered attribute values <b>606</b>-<b>610</b>). Specifically, the attributes, properties, and/or aspects that are not represented by attribute value(s) <b>614</b> may be ignored since they are not usable for comparison.</p><p id="p-0137" num="0136">Embedding vector may be an N-dimensional vector, and may thus include embedding values D<sub>1</sub>, D<sub>2</sub>, D<sub>3</sub>, D<sub>4</sub>, D<sub>5</sub>, D<sub>6</sub>, D<sub>7</sub>, and D<sub>8 </sub>through D<sub>N </sub>(i.e., D<sub>1</sub>-D<sub>N</sub>). Embedding model <b>620</b> may be configured to map each of attribute value(s) <b>614</b> to one or more corresponding dimensions of embedding vector <b>622</b>. In some cases, each of attribute value(s) <b>614</b> may be mapped to the one or more corresponding dimensions of embedding vector <b>622</b> exclusively of other attribute values. For example, third-party system identifier may be mapped to D<sub>1</sub>, NetBIOS identifier <b>662</b> may be mapped to D<sub>2</sub>and D<sub>3</sub>, computing resource name <b>664</b> may be mapped to D<sub>4</sub>, FQDN <b>666</b> may be mapped to D<sub>5</sub>, D<sub>6</sub>, and D<sub>7</sub>, IP address <b>668</b> may be mapped to D<sub>8</sub>, and DNS entry <b>670</b> may be mapped to D<sub>N</sub>. Thus, D<sub>1 </sub>may represent third-party scanning system identifier <b>660</b>, but might not represent any other attributes of attribute value(s) <b>614</b>. Similarly, D<sub>5</sub>, D<sub>6</sub>, and D<sub>7 </sub>may represent FQDN <b>666</b>, but might not represent any other attributes of attribute value(s) <b>614</b>, and so on.</p><p id="p-0138" num="0137">In some cases, the number of dimensions of embedding vector <b>622</b> assigned and/or dedicated to a particular attribute of attribute value(s) <b>614</b> may be used to define a relative weight or importance of the particular attribute. Specifically, a relative weight or importance of the particular attribute may be increased by increasing the number of dimensions assigned to the particular attribute (e.g., from 2 to 3), or decreased by decreasing the number of dimensions assigned to the particular attribute (e.g., from 2 to 1). Increasing the number of dimensions used to represent the particular attribute allows embedding vector <b>622</b> to store additional information regarding the particular attribute and thus more completely and/or accurately represent the particular attribute. In one example, attribute values that are expected to remain constant over time (e.g., computing resource name <b>664</b> representing, for example, a media access control (MAC) address) may be assigned a higher weight or importance, and thus more dimensions of embedding vector <b>622</b>, than attribute values expected to change over time (e.g., IP address <b>668</b>). In another example, longer attribute values (e.g., as measured by an expected number of characters) may be assigned more dimensions of embedding vector <b>622</b> than shorter attribute values. In some implementations, the relative weighing between attribute value(s) <b>614</b> may be based on other factors.</p><p id="p-0139" num="0138">Accordingly, embedding model <b>620</b> may include a plurality of sub-models, each configured to generate the embedding values for a corresponding one or more of attribute value(s) <b>614</b>. The outputs of the plurality of sub-models may be combined to form embedding vector <b>622</b>. Notably, while <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> illustrates attribute value(s) <b>614</b> and embedding vector <b>622</b>, the discussion thereof is equally applicable to discovered attribute values <b>606</b>-<b>608</b> and candidate embedding vectors <b>624</b>-<b>628</b>.</p><p id="p-0140" num="0139">Structuring embedding model <b>620</b> and the embedding vectors in this manner allows application <b>600</b> to account for missing attribute values. Namely, the third-party scanning system might not always collect and/or provide each of attribute value(s) <b>614</b>. That is, one or more of third-party scanning system identifier <b>660</b>, NetBIOS identifier <b>662</b>, computing resource name <b>664</b>, FQDN <b>666</b>, IP address <b>668</b>, and/or DNS entry <b>670</b> may be missing from attribute value(s) <b>614</b>, depending, for example, on the computing resource undergoing testing and/or the specific third-party scanning system executing the testing. Similarly, discovered attribute values <b>606</b>-<b>610</b> may additionally or alternatively be missing values for one or more of these attributes.</p><p id="p-0141" num="0140">Thus, when a particular attribute value is missing, vector comparator <b>630</b> may ignore the corresponding dimensions of embedding vector <b>622</b> and candidate embedding vectors <b>624</b>-<b>628</b> when computing similarity metrics <b>634</b>-<b>638</b>. For example, when a value for computing resource name <b>664</b> is missing, D<sub>4 </sub>may be ignored. In some implementations, embedding vector <b>622</b> and candidate embedding vectors <b>624</b>-<b>628</b> may be modified to remove therefrom any dimensions corresponding to missing attribute values, resulting in updated embedding vectors having a smaller dimension than the original embedding vector (e.g., embedding vector <b>622</b> and candidate embedding vectors <b>624</b>-<b>628</b> with D<sub>4 </sub>removed). Vector comparator may then compare the updated embedding vectors when calculating similarity metrics <b>634</b>-<b>638</b>.</p><p id="p-0142" num="0141">If the mapping between attribute values and embedding vector dimensions were not fixed and/or predefined, entries of the embedding vector might not be selectively ignorable/removable. Thus, similarity metrics <b>634</b>-<b>638</b> might treat the absence of an attribute value as a valid value (e.g., a zero or null value), resulting in erroneous similarity metrics. For example, if aspects of FQDN <b>666</b> were represented by each of D<sub>1</sub>-D<sub>N </sub>and a value for FQDN <b>666</b> was missing, ignoring the entirety of embedding vector <b>622</b> would not be possible. Similarly, if aspects of NetBIOS identifier <b>662</b> and IP address <b>668</b> were collectively represented by D<sub>2</sub>, D<sub>4</sub>, and D<sub>8</sub>, and the value of IP address <b>668</b> was missing, ignoring any one of D<sub>2</sub>, D<sub>4</sub>, and D<sub>8 </sub>might result in ignoring useful information about NetBIOS identifier <b>662</b>, and vice versa.</p><p id="p-0143" num="0142">Graph <b>680</b> illustrates graphical representation <b>682</b> of the values of embedding vector <b>622</b> along dimensions D<sub>2</sub>and D<sub>3</sub>. The other dimensions of embedding vector <b>622</b> may be similarly graphed in two or three dimensions to visually illustrate at least portions of embedding vector <b>622</b>. Embedding model <b>620</b> may be trained to generate embedding vectors such that semantically similar attribute values are separated from one another by no more than a threshold distance in the vector space defined by embedding model <b>620</b>. Thus, a first NetBIOS identifier value may correspond to graphical representation <b>682</b> of the corresponding dimensions of embedding vector <b>622</b>, and a second semantically similar NetBIOS identifier value may cause embedding model <b>620</b> to generate values for the D<sub>2 </sub>and D<sub>3 </sub>dimensions that, when graphed in graph <b>680</b>, land within threshold distance <b>684</b> of graphical representation <b>682</b>. Thus, embedding model <b>620</b> may preserve the semantic similarity between attributes when transforming these attributes into the vector space.</p><p id="p-0144" num="0143">In implementations where portions of discovered attribute values <b>606</b>-<b>610</b> and/or attribute values <b>614</b> are representing by character strings (e.g., words, phrases, and/or parts of words), embedding vector <b>622</b> may be viewed or referred to as a word vector. A word vector may be determined for each word present in a corpus of text records (e.g., discovered attribute values <b>606</b>-<b>610</b>) such that words (e.g., attribute values) having similar meanings (or &#x201c;semantic content&#x201d;) are associated with word vectors that are near each other within a semantically encoded vector space (e.g., the vector space defined by D<sub>1</sub>-D<sub>N</sub>). Such vectors may have tens, hundreds, or more elements and thus may define an N-space where N is a number of dimensions. These word vectors allow the underlying meaning of words to be compared or otherwise operated on by a computing device. Accordingly, the use of word vectors may allow for a significant improvement over simpler word list or word matrix methods.</p><p id="p-0145" num="0144">Word vectors can be used to quickly and efficiently compare the overall semantic content of samples of text (e.g., one or more attribute values), allowing a similarity metric between the samples of text to be determined. This can include determining a Euclidean distance, a cosine similarity, a sum of squared distances over each of the N dimensions, or some other measure of similarity between the word vectors of the words in each of the text samples. In some implementations, the word vectors may be provided as input to an artificial neural network, a support vector machine, a decision tree, or some other machine learning algorithm in order to perform sentiment analysis, to classify or cluster samples of text, to determine a level of similarity between samples of text, or to perform some other word/attribute processing task.</p><p id="p-0146" num="0145">Word vectors may be determined for a set of words in a variety of ways. In an example, a matrix of the word vectors can be an input layer of an artificial neural network. The artificial neural network (including the matrix of word vectors) can then be trained with a large number of character strings from a database to determine the contextual relationships between words (e.g., attribute values) appearing in these character strings.</p><p id="p-0147" num="0146">Algebraic vector operations can be used on word vectors. Thus, subtracting the vector representation of &#x201c;mail&#x201d; from the vector representation of &#x201c;email&#x201d; is expected to produce a vector with a magnitude close to 0. However, subtracting the vector representation of &#x201c;VPN&#x201d; from the vector representation of &#x201c;email&#x201d; is expected to produce a vector with higher magnitudes. In this manner, the model indicates that &#x201c;email&#x201d; and &#x201c;mail&#x201d; have closer meanings than &#x201c;email&#x201d; and &#x201c;VPN&#x201d;. Thus, after training, words with similar meanings can map to a similar position in the vector space. For example, the vectors for &#x201c;powerful&#x201d; and &#x201c;strong&#x201d; may appear close to each other, whereas the vectors for &#x201c;gerbil&#x201d; and &#x201c;hypotenuse&#x201d; may be farther apart. Additions and subtractions between word vectors can also carry meaning. Using vector algebra on the determined word vectors, analogy questions, such as &#x201c;King&#x201d;&#x2212;&#x201c;man&#x201d;+&#x201c;woman&#x201d;=&#x201c;Queen&#x201d;, can be answered.</p><p id="p-0148" num="0147">In general, the closer that the vector difference between two word vectors is to 0, the greater the similarity (e.g., similarity metrics <b>634</b>-<b>638</b>) of the words they represent. Such a comparison may identify one or more character string vectors from databases or another source that &#x201c;match&#x201d; in this fashion. In some cases, this may be the character string vectors with the highest similarity, or any text string vector with a similarity that is greater than a pre-determined value.</p><heading id="h-0016" level="1">VII. Example Embedding Model Training and Usage</heading><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref> illustrate a message flow diagram of example training and usage of aspects of application <b>600</b>. Specifically, in order to train embedding model <b>620</b>, application <b>600</b> may be configured to transmit, to persistent storage <b>602</b>, a request for CIs representing discovered attributes of computing resources, as illustrated by arrow <b>702</b>. Based on or in response to receipt of the request at arrow <b>702</b>, persistent storage <b>602</b> may be configured to transmit, to application <b>600</b>, the requested CIs, as illustrated by arrow <b>704</b>. The transmitted CIs may define the training data set for embedding model <b>620</b>. Specifically, the subset of the discovered attribute values of these CIs that is also expected to be found in the test result data provided by the third-party scanning system may define the training data.</p><p id="p-0150" num="0149">Based on or in response to receipt of the CIs by application <b>600</b> at arrow <b>704</b>, application <b>600</b> may be configured to train the embedding model based on the discovered attribute values represented in the CIs, as indicated by block <b>706</b>. In one example, the ground-truth data used for training may be provided by the relationships between the CIs, which may be indicated as part of the discovered attribute values of the CIs. That is, each CI may be related to one or more other CIs through various types of relationships. These types of relationships may include, for example, a first CI being a parent of a second CI, the first CI using the second CI, the first CI being hosted on the second CI, and so on. These relationships may form/define a map and/or hierarchy that illustrates how each CI relates to other CIs. In some cases, the map and/or hierarchy may include all of the discovered CIs of managed network <b>300</b>.</p><p id="p-0151" num="0150">Thus, the map and/or hierarchy, as well as the types of relationships illustrated therein, may be indicative of how similar the CIs are to one another. For example, two CIs that have a direct relationship may be considered more similar than two CIs linked together by way of a third CI therebetween. Similarly, some types of relationships between CIs (e.g., two CIs being part of the same cluster) may be indicative of greater similarity between these CIs than other types of relationships between these CIs (e.g., the first CI using the second CI).</p><p id="p-0152" num="0151">Embedding model <b>620</b> may be trained to generate embedding vectors that approximate the relationships indicated by the map and/or hierarchy. That is, embedding model <b>620</b> may preserve the semantic information and structure of the map/hierarchy when generating embedding vectors. Accordingly, CIs that are close to one another in the map and/or hierarchy may be associated with embedding vectors that are close to one another in vector space. In some implementations, the training of embedding model <b>620</b> may be structured according to the continuous bag of words (CBOW) model, where embedding model <b>620</b> is configured to predict one or more discovered attribute values of a particular CI based on the discovered attribute values of CIs related to the particular CI. In other implementations, the training of embedding model <b>620</b> may be structured according to the skip-gram model, where embedding model <b>620</b> is configured to predict the discovered attribute values of CIs related to the particular CI based on one or more discovered attribute values of the particular CI.</p><p id="p-0153" num="0152">Thus, much like a natural language word embedding model may be trained based on the context that a given word is used in (e.g., in a sentence or paragraph), embedding model <b>620</b> may be trained based on the context in which a given CI is found within the map/hierarchy. In other examples, the ground-truth data used for training of embedding model <b>620</b> may be different, may be structured differently, and/or the training may define similarity between CIs in other ways.</p><p id="p-0154" num="0153">Based on or in response to training of the embedding model at block <b>706</b>, application <b>600</b> may be configured to generate candidate embedding vectors representing the CIs transmitted at arrow <b>704</b>, as indicated by block <b>708</b>. That is, application <b>600</b> may use the trained embedding model to embed the discovered attribute values of each CI in vector space. These candidate embeddings may be saved and used at a later time for comparison to embedding vectors generated to represent the attribute values of computing resources tested by third-party scanning system <b>700</b>. Thus, the candidate embedding vectors might not be recomputed each time a new embedding vector is generated for a tested computing resource.</p><p id="p-0155" num="0154">As the CIs stored in persistent storage <b>602</b> are updated over time, embedding model <b>620</b> may be retrained to reflect the changes to the CIs and the discovered attribute values thereof. In one example, embedding model <b>620</b> may be retrained based on or in response to at least a threshold number of CIs being added, updated, and/or modified. In another example, embedding model <b>620</b> may be retrained periodically (e.g., every hour, day, week, or month). Retraining embedding model <b>620</b> allows the model to remain accurate and up-to-date with respect to changing CIs.</p><p id="p-0156" num="0155">Notably, in some implementations, each respective managed network may be associated with a corresponding embedding model that is trained on the CIs specific to the respective managed network. By training on the CIs of a particular managed network, the embedding model may more accurately embed attribute values (e.g., as measured by preservation of semantic information) associated with computing resources in the particular managed network. Stated another way, since different managed networks may include different CIs arranged in different ways and having different discovered attribute values, a single shared embedding model trained on CIs sourced from these different managed networks might not be as accurate as a network-specific embedding model. For example, a given computing resource may be used in different ways and/or placed in different contexts depending on the particular managed network. A network-specific embedding model may account for the particular arrangement of computing resources of the corresponding managed network, and thus generate more accurate embeddings for the corresponding managed network than a more general embedding model.</p><p id="p-0157" num="0156">Third-party scanning system <b>700</b> may be configured to execute tests of a computing resource within managed network <b>300</b>, as indicated by block <b>710</b>. For example, the tests may be executed periodically, in response to occurrence of a predetermined trigger event, or in response to a request from one or more users, among other possibilities. Based on or in response to execution of the tests at block <b>710</b>, third-party scanning system <b>700</b> may be configured to generate test result data (e.g., test result data <b>612</b>) which includes attribute values of the tested computing resource, as indicated by block <b>712</b>. Application <b>600</b> may be configured to transmit, to third-party scanning system <b>700</b>, a request for the test result data, as indicated by arrow <b>713</b>. In some implementations, the request at arrow <b>713</b> may be transmitted based on or in response to third-party scanning system <b>700</b> informing application <b>600</b> and/or another component of remote network management platform <b>320</b> that the test result data is available. Based on or in response to reception of the request at block <b>713</b>, third-party scanning system <b>700</b> may be configured to transmit the test result data to application <b>600</b>, as indicated by arrow <b>714</b>.</p><p id="p-0158" num="0157">In some implementations, based on or in response to reception of test result data at arrow <b>714</b>, application <b>600</b> may be configured to attempt to match the tested computing resource to a CI found in persistent storage <b>602</b> using one or more rule-based algorithms, as indicated by block <b>716</b>. The rule-based algorithms may include, for example, algorithms configured to compare character strings representing the attribute values of the tested computing resource and character strings representing the discovered attribute values of one or more CIs. Other rule-based algorithms are possible. In some cases, the rule-based algorithms may accurately match the tested computing resource to a correspond CI, and use of embedding model <b>620</b> thus might not be necessary. Embedding model <b>620</b> may nevertheless be used to verify the match determined by the rule-based algorithms.</p><p id="p-0159" num="0158">In other cases, the rule-based algorithms might be unable to accurately match the tested computing resource to a correspond CI. Based on or in response to the rule-based algorithms failing to find an accurate match, application <b>600</b> may be configured to request generation and storage of an unmatched CI to represent the test result data, as indicated by arrow <b>718</b>. The unmatched CI may store a representation of test result data <b>612</b>, including attribute value(s) <b>614</b> and test result <b>616</b>. Turning to <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, based on or in response to reception of the request at arrow <b>718</b>, persistent storage <b>602</b> may be configured to generate and store the unmatched CI, as indicated by block <b>720</b>. When persistent storage <b>602</b> already includes a CI corresponding to the tested computing resource, the unmatched CI may be duplicative, and it may thus be desirable to combine the unmatched CI with the CI already in persistent storage <b>602</b>.</p><p id="p-0160" num="0159">The unmatched CI may be stored so that it may be retrieved later and either manually or automatically matched to another CI in persistent storage <b>602</b>. Accordingly, application <b>600</b> may be configured to transmit, to persistent storage <b>602</b>, a request for the unmatched CI, as indicated by arrow <b>722</b>. Based on or in response to reception of the request at arrow <b>722</b>, persistent storage <b>602</b> may be configured to transmit, to application <b>600</b>, the unmatched CI representing the test result data, as indicated by arrow <b>724</b>.</p><p id="p-0161" num="0160">In one example, a user may use application <b>600</b> to retrieve the unmatched CIs and manually match the unmatched CIs to corresponding CIs stored in persistent storage <b>602</b> based on manual review of the attribute values thereof. In another example, the user's review and matching of the CIs may be assisted by output of application <b>600</b>. In a further example, embedding model <b>620</b> may be used to batch the processing of a plurality of unmatched CIs, and application <b>600</b> may match the unmatched CIs to other CIs automatically, without user input. In a yet further example, embedding model <b>620</b> may be used to process the test result data generated by third-party scanning system without generation and storage of unmatched CIs. Thus, in such implementations, the operations of arrow <b>718</b> through arrow <b>724</b> may be omitted (as indicated by the dashed line pattern). In an additional example, application <b>600</b> may be used to match the tested computing resource to a CI without also using the rule-based algorithms, thus allowing for the operations of block <b>716</b> to be omitted (as indicated by the dashed line pattern).</p><p id="p-0162" num="0161">Based on or in response to reception of the test result data at arrow <b>714</b> or arrow <b>724</b>, application <b>600</b> may be configured to generate, using the embedding model, an embedding vector representing the attribute values of the computing resource tested by third-party scanning system <b>700</b>, as indicated by block <b>726</b>. Based on or in response to generation of the embedding vector at block <b>726</b>, application <b>600</b> may be configured to compare the embedding vector to the candidate embedding vectors generated at block <b>708</b>, as indicated by block <b>728</b>. Based on or in response to results of the comparison at block <b>728</b>, application <b>600</b> may be configured to select a CI that most likely matches the tested computing resource, as indicated by block <b>730</b>. In cases where the comparison at block <b>728</b> indicates that a matching CI has not been identified with sufficient confidence (e.g., when tested computing resource is not yet represented by any of the vectors generated at block <b>708</b>), a new CI may be generated to represent the tested computing resource.</p><p id="p-0163" num="0162">Based on or in response to selection of the CI, application <b>600</b> may be configured to transmit, to persistent storage <b>602</b>, a request for an update to the selected CI, as indicated by arrow <b>732</b>. The requested update may indicate to incorporate at least part of the test result data into the CI, to thereby record the test result data as part of the CI. Based on or in response to reception of the request at arrow <b>732</b>, persistent storage <b>602</b> may be configured to update the selected CI to represent the test result data, as indicated by block <b>734</b>. In cases where the CI is updated based on data from an unmatched CI, the unmatched CI may be deleted based on or in response to updating the CI at block <b>734</b>. In cases where no matching CI is identified, a new CI may be generated and stored to represent the tested computing resource instead of updating an existing CI. Additional details of the operations of block <b>726</b> through block <b>734</b> are discussed in with respect to <figref idref="DRAWINGS">FIGS. <b>6</b>A and <b>6</b>B</figref>.</p><p id="p-0164" num="0163">Notably, in some cases, the attribute values of the tested CI might not exactly match the discovered attribute values of the CIs stored in persistent storage <b>602</b>. Accordingly, the input of embedding model <b>620</b> may be structured to allow for inputs that have not been previously observed as part of the training data set. In some implementations, the attribute values may be represented as character strings, and each previously-seen character string may be mapped to a corresponding real value (e.g., represented as an input vector) that is provided as input to embedding model <b>620</b>. Embedding model <b>620</b> may be configured to map this real value to an embedding vector.</p><p id="p-0165" num="0164">Thus, application <b>600</b> and/or embedding model <b>620</b> may allow for encoding of previously-unseen character strings as combinations of previously-seen n-grams. Each n-gram may map (e.g., using a hash function) to a corresponding real value. Thus, for example, previously-unseen computing resource name &#x201c;WinServ100&#x201d; may be represented as a combination of (i) the trigram (i.e., 3-gram) &#x201c;Win,&#x201d; (ii) the 4-gram &#x201c;Serv,&#x201d; and (iii) the trigram &#x201c;100,&#x201d; each of which may have been previously seen in the training data set. Accordingly, the real value representing &#x201c;WinServ100&#x201d; may be a function (e.g., a weighted sum) of the real values assigned to represent &#x201c;Win,&#x201d; &#x201c;Serv,&#x201d; and &#x201c;100.&#x201d; Alternatively, previously-unseen computing resource name &#x201c;WinServ100&#x201d; may be represented as a combination of (i) the 7-gram &#x201c;WinServ&#x201d; and (ii) the trigram &#x201c;100.&#x201d; Yet another possibility involves representing &#x201c;WinServ100&#x201d; as a combination of its individual characters. Other combinations of n-grams are possible. To support such previously-unseen words, embedding model <b>620</b> may be trained by breaking down each character string of the training data into combinations of n-grams.</p><heading id="h-0017" level="1">VIII. Example Vulnerability Management Architecture</heading><p id="p-0166" num="0165"><figref idref="DRAWINGS">FIG. <b>8</b></figref> depicts vulnerability management architecture <b>800</b>. Architecture <b>800</b> includes managed network <b>300</b>, remote network management platform <b>320</b>, and third-party vulnerability detection and assessment cloud <b>806</b> (referred to as cloud <b>806</b> for short), all connected by Internet <b>350</b>.</p><p id="p-0167" num="0166">Managed network <b>300</b> is largely the same as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, but just showing configuration items <b>802</b>, vulnerability scanner <b>804</b>, and proxy server(s) <b>312</b>. Each of configuration items <b>802</b> may represent a virtual or physical computing device and/or a software application installed upon such a computing device. Configuration items <b>802</b> may correspond to configuration items <b>604</b>-<b>608</b> of <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>. Vulnerability scanner <b>804</b> may be a dedicated unit of software and/or a virtual or physical computing device that is deployed within managed network <b>300</b> to detect vulnerabilities relating to configuration items <b>802</b>. Proxy server(s) <b>312</b> may take on the same or similar functionality as described above.</p><p id="p-0168" num="0167">In some embodiments, vulnerability scanner <b>804</b> may include a software agent that is deployed on multiple endpoints, where each endpoint is represented as one or more of configuration items <b>802</b>. In these or other embodiments, vulnerability scanner <b>804</b> may include one or more software applications deployed on one or more dedicated computing devices. In either situation, vulnerability scanner <b>804</b> may scan or otherwise remotely access configuration items <b>802</b> to detect vulnerabilities. For example, vulnerability scanner <b>804</b> may scan configuration items <b>802</b>-e.g., probe for open TCP/IP ports on computing devices, and/or log on to computing devices to determine the operating system, software applications installed thereon, and versions thereof. In some embodiments, vulnerability scanner <b>804</b> may store the results of these scans locally, or may transmit the results to cloud <b>806</b>.</p><p id="p-0169" num="0168">Cloud <b>806</b> and/or vulnerability scanner <b>804</b> provide an example of third-party scanning system <b>700</b>. However, third-party scanning system <b>700</b> may also represent other types of systems that interact with managed network <b>300</b>. Specifically, cloud <b>806</b> and/or vulnerability scanner <b>804</b> represent software tools configured to perform automated vulnerability detection. Some of these tools include, but are not limited to, NESSUS&#xae;, QUALYSGUARD&#xae;, and RAPID7&#xae;. For purposes of simplicity, various vulnerability detection and assessment tools are referred to herein as third-party vulnerability tools.</p><p id="p-0170" num="0169">The vulnerabilities detected by the third-party vulnerability tools may relate to known defects in hardware, operating systems, and/or software packages deployed throughout a managed network. Exploitation of a vulnerability may result in a negative impact to the data confidentiality, integrity, and/or availability of one or more computing devices. Such vulnerabilities may be associated with different severities. It should be noted that vulnerabilities are not the same as active security threats. Vulnerabilities indicate that a problem has been identified independent of whether the vulnerability has been actually exploited. Active security threats, on the other hand, are ongoing exploitations that often require immediate attention.</p><p id="p-0171" num="0170">Remote network management platform <b>320</b> is the same or similar to that of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, but showing only one computational instance, computational instance <b>322</b>, for sake of simplicity. Computational instance <b>322</b> includes CMDB <b>500</b>. As described above, CMDB <b>500</b> may include representations of configuration items <b>802</b>, including multiple discovered attribute values for each. CMDB <b>500</b> may correspond to and/or be stored in persistent storage <b>602</b>.</p><p id="p-0172" num="0171">Cloud <b>806</b> is an optional component that might not be present when vulnerability scanner <b>804</b> stores the results of scans locally. However, when present, cloud <b>806</b> receives these results, and cloud <b>806</b> may store and assess the results. For instance, cloud <b>806</b> may identify vulnerabilities based on the operating system and version thereof, operating system configuration, software application and version thereof, software configuration, and possibly other metrics as well. The identified vulnerabilities may be stored and then made available by way of an interface, such as a web-based graphical user interface, a JavaScript Object Notation (JSON) interface, an XML interface, or some other form of interface.</p><p id="p-0173" num="0172">In particular, computational instance <b>322</b> may be configured to obtain the identified vulnerabilities from cloud <b>806</b>, or from vulnerability scanner <b>806</b> by way of proxy server(s) <b>312</b>. Computational instance <b>322</b> may combine this information with additional information from CMDB <b>500</b> to provide various metrics (e.g., risk score) per vulnerability. These metrics may be used to prioritize how security managers of managed network <b>300</b> address vulnerabilities.</p><heading id="h-0018" level="1">IX. Example Operations</heading><p id="p-0174" num="0173"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow chart illustrating an example embodiment. The process illustrated by <figref idref="DRAWINGS">FIG. <b>9</b></figref> may be carried out by a computing device, such as computing device <b>100</b>, and/or a cluster of computing devices, such as server cluster <b>200</b>. However, the process can be carried out by other types of devices or device subsystems. For example, the process could be carried out by a computational instance of a remote network management platform or a portable computer, such as a laptop or a tablet device.</p><p id="p-0175" num="0174">The embodiments of <figref idref="DRAWINGS">FIG. <b>9</b></figref> may be simplified by the removal of any one or more of the features shown therein. Further, these embodiments may be combined with features, aspects, and/or implementations of any of the previous figures or otherwise described herein.</p><p id="p-0176" num="0175">Block <b>900</b> involves obtaining test result data generated based on a third-party scanning system executing one or more tests of a particular computing resource associated with a managed network. The test result data may include one or more attribute values of the particular computing resource. Persistent storage disposed within a remote network management platform may contain CIs representing discovered attribute values of computing resources associated with the managed network.</p><p id="p-0177" num="0176">Block <b>902</b> involves generating, by way of an embedding model and based on the one or more attribute values of the particular computing resource, an embedding vector representing the one or more attribute values of the particular computing resource.</p><p id="p-0178" num="0177">Block <b>904</b> involves comparing the embedding vector to a plurality of candidate embedding vectors. Each respective candidate embedding vector of the plurality of candidate embedding vectors may represent the discovered attribute values of a corresponding CI of the CIs contained in the persistent storage.</p><p id="p-0179" num="0178">Block <b>906</b> involves, based on comparing the embedding vector to the plurality of candidate embedding vectors, selecting a particular CI of the CIs contained in the persistent storage.</p><p id="p-0180" num="0179">Block <b>908</b> involves updating the particular CI to additionally represent at least a portion of the test result data.</p><p id="p-0181" num="0180">In some embodiments, the third-party scanning system may be a vulnerability scanning system configured to scan the computing resources associated with the managed network for vulnerabilities.</p><p id="p-0182" num="0181">In some embodiments, obtaining the test result data may include receiving the test result data from the third-party scanning system in response to completion of execution of the one or more tests of the particular computing resource. The one or more tests may be configured to determine the one or more attribute values of the particular computing resource.</p><p id="p-0183" num="0182">In some embodiments, obtaining the test result data may include retrieving, from the persistent storage, an unmatched CI generated to represent the test result data and the one or more attribute values of the particular computing resource. The unmatched CI may be generated based on one or more rule-based algorithms determining that the one or more attribute values of the particular computing resource do not correspond to the discovered attribute values of the computing resources associated with the managed network.</p><p id="p-0184" num="0183">In some embodiments, updating the particular CI to additionally represent at least the portion of the test result data may include updating the particular CI based on the unmatched CI and deleting the unmatched CI.</p><p id="p-0185" num="0184">In some embodiments, comparing the embedding vector to the plurality of candidate embedding vectors may include generating, for each respective candidate embedding vector of the plurality of candidate embedding vectors, a corresponding similarity metric between the embedding vector and the respective candidate embedding vector.</p><p id="p-0186" num="0185">In some embodiments, the corresponding similarity metric may be a Euclidean distance between the embedding vector and the respective candidate embedding vector.</p><p id="p-0187" num="0186">In some embodiments, selecting the particular CI of the CIs contained in the persistent storage may include determining that the corresponding similarity metric associated with the particular CI exceeds a threshold similarity value, and selecting the particular CI based on determining that the corresponding similarity metric associated with the particular CI exceeds the threshold similarity value.</p><p id="p-0188" num="0187">In some embodiments, selecting the particular CI of the CIs contained in the persistent storage may include determining that the corresponding similarity metric associated with the particular CI is a highest similarity metric of the corresponding similarity metrics generated for the plurality of candidate embedding vectors, and selecting the particular CI based on determining that the corresponding similarity metric associated with the particular CI is the highest similarity metric.</p><p id="p-0189" num="0188">In some embodiments, selecting the particular CI of the CIs contained in the persistent storage may include displaying, by way of a user interface and for each respective candidate embedding vector of at least a subset of the plurality of candidate embedding vectors, results of comparing the embedding vector to the respective candidate embedding vector, and receiving, by way of the user interface, a selection of the particular CI.</p><p id="p-0190" num="0189">In some embodiments, the one or more attribute values of the particular computing resource may include one or more of: (i) an attribute value representing an identifier assigned to the particular computing resource by the third-party scanning system, (ii) an attribute value representing an identifier assigned to the particular computing resource by a NetBIOS, (iii) an attribute value representing a name associated with the particular computing resource, (iv) an attribute value representing at least a portion of an FQDN associated with the particular computing resource (v) an attribute value representing an internet protocol (IP) address associated with the particular computing resource, or (vi) an attribute value representing a DNS entry associated with the particular computing resource.</p><p id="p-0191" num="0190">In some embodiments, the embedding vector may include a plurality of dimensions and, for each respective dimension of the plurality of dimensions, a corresponding embedding value. Each respective attribute value of the one or more attribute values of the particular computing resource may be represented by corresponding one or more dimensions of the plurality of dimensions of the embedding vector.</p><p id="p-0192" num="0191">In some embodiments, the corresponding one or more dimensions representing the respective attribute value may be predefined and may include a subset of the plurality of dimensions. The one or more dimensions may represent the respective attribute value exclusively of other attribute values of the one or more attribute values of the particular computing resource.</p><p id="p-0193" num="0192">In some embodiments, each respective attribute value of the one or more attribute values of the particular computing resource may be represented by a corresponding character string. The embedding model may be a character string embedding model configured to generate the embedding vector based on the corresponding character strings that represent the one or more attribute values.</p><p id="p-0194" num="0193">In some embodiments, the discovered attribute values of the computing resources associated with the managed network may correspond to a first set of attributes. The one or more tests may be configured to determine attribute values of a subset of the first set of attributes. The embedding model may be trained based on training attribute values selected from a subset of the discovered attribute values corresponding to the subset of the first set of attributes.</p><p id="p-0195" num="0194">In some embodiments, the remote network management platform may be configured to manage a plurality of managed networks. Each respective managed network of the plurality of managed networks may be associated with a corresponding embedding model trained based on the CIs representing discovered attribute values of computing resources associated with the respective managed network.</p><p id="p-0196" num="0195">In some embodiments, the embedding model may be trained to generate embedding vectors such that respective embedding vectors representing corresponding attribute values having at least a threshold degree of semantic similarity are separated from one another by no more than a threshold distance in a vector space defined by the embedding model.</p><p id="p-0197" num="0196">In some embodiments, the embedding model may be retrained based on changes over time to the discovered attribute values of computing resources associated with the managed network.</p><p id="p-0198" num="0197">In some embodiments, the embedding model may include an artificial neural network.</p><p id="p-0199" num="0198">In some embodiments, additional test result data generated based on the third-party scanning system executing one or more tests of an additional computing resource associated with the managed network may be obtained. The additional test result data may include additional one or more attribute values of the additional computing resource. An additional embedding vector representing the additional one or more attribute values of the additional computing resource may be generated by way of the embedding model and based on the additional one or more attribute values of the additional computing resource. The additional embedding vector may be compared to the plurality of candidate embedding vectors. Based on comparing the additional embedding vector to the plurality of candidate embedding vectors, it may be determined that the additional computing resource does not correspond to any of the CIs contained in the persistent storage. A new CI may be generated to represent the additional computing resource and at least a portion of the additional test result data.</p><p id="p-0200" num="0199">In some embodiments, a computing system may include means for obtaining test result data generated based on a third-party scanning system executing one or more tests of a particular computing resource associated with a managed network. The test result data may include one or more attribute values of the particular computing resource. Persistent storage disposed within a remote network management platform may contain CIs representing discovered attribute values of computing resources associated with the managed network. The computing system may also include means for generating, based on the one or more attribute values of the particular computing resource, an embedding vector representing the one or more attribute values of the particular computing resource. The computing system may additionally include means for comparing the embedding vector to a plurality of candidate embedding vectors. Each respective candidate embedding vector of the plurality of candidate embedding vectors may represent the discovered attribute values of a corresponding CI of the CIs contained in the persistent storage. The computing system may further include means for, based on comparing the embedding vector to the plurality of candidate embedding vectors, selecting a particular CI of the CIs contained in the persistent storage. The computing system may yet further include means for updating the particular CI to additionally represent at least a portion of the test result data.</p><heading id="h-0019" level="1">X. Closing</heading><p id="p-0201" num="0200">The present disclosure is not to be limited in terms of the particular embodiments described in this application, which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its scope, as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure, in addition to those described herein, will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims.</p><p id="p-0202" num="0201">The above detailed description describes various features and operations of the disclosed systems, devices, and methods with reference to the accompanying figures. The example embodiments described herein and in the figures are not meant to be limiting. Other embodiments can be utilized, and other changes can be made, without departing from the scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure, as generally described herein, and illustrated in the figures, can be arranged, substituted, combined, separated, and designed in a wide variety of different configurations.</p><p id="p-0203" num="0202">With respect to any or all of the message flow diagrams, scenarios, and flow charts in the figures and as discussed herein, each step, block, and/or communication can represent a processing of information and/or a transmission of information in accordance with example embodiments. Alternative embodiments are included within the scope of these example embodiments. In these alternative embodiments, for example, operations described as steps, blocks, transmissions, communications, requests, responses, and/or messages can be executed out of order from that shown or discussed, including substantially concurrently or in reverse order, depending on the functionality involved. Further, more or fewer blocks and/or operations can be used with any of the message flow diagrams, scenarios, and flow charts discussed herein, and these message flow diagrams, scenarios, and flow charts can be combined with one another, in part or in whole.</p><p id="p-0204" num="0203">A step or block that represents a processing of information can correspond to circuitry that can be configured to perform the specific logical functions of a herein-described method or technique. Alternatively or additionally, a step or block that represents a processing of information can correspond to a module, a segment, or a portion of program code (including related data). The program code can include one or more instructions executable by a processor for implementing specific logical operations or actions in the method or technique. The program code and/or related data can be stored on any type of computer readable medium such as a storage device including RAM, a disk drive, a solid state drive, or another storage medium.</p><p id="p-0205" num="0204">The computer readable medium can also include non-transitory computer readable media such as computer readable media that store data for short periods of time like register memory and processor cache. The computer readable media can further include non-transitory computer readable media that store program code and/or data for longer periods of time. Thus, the computer readable media may include secondary or persistent long term storage, like ROM, optical or magnetic disks, solid state drives, or compact-disc read only memory (CD-ROM), for example. The computer readable media can also be any other volatile or non-volatile storage systems. A computer readable medium can be considered a computer readable storage medium, for example, or a tangible storage device.</p><p id="p-0206" num="0205">Moreover, a step or block that represents one or more information transmissions can correspond to information transmissions between software and/or hardware modules in the same physical device. However, other information transmissions can be between software modules and/or hardware modules in different physical devices.</p><p id="p-0207" num="0206">The particular arrangements shown in the figures should not be viewed as limiting. It should be understood that other embodiments can include more or less of each element shown in a given figure. Further, some of the illustrated elements can be combined or omitted. Yet further, an example embodiment can include elements that are not illustrated in the figures.</p><p id="p-0208" num="0207">While various aspects and embodiments have been disclosed herein, other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purpose of illustration and are not intended to be limiting, with the true scope being indicated by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computing system comprising:<claim-text>persistent storage containing configuration items (CIs) representing a plurality of attribute values of computing resources; and</claim-text><claim-text>a processor configured to perform operations comprising:<claim-text>obtaining one or more attribute values of a particular computing resource;</claim-text><claim-text>generating, using a machine learning model and based on the one or more attribute values of the particular computing resource, an embedding vector representing the one or more attribute values of the particular computing resource;</claim-text><claim-text>comparing the embedding vector to one or more candidate embedding vectors, wherein each respective candidate embedding vector of the one or more candidate embedding vectors represents at least one attribute value of a corresponding CI of the CIs contained in the persistent storage;</claim-text><claim-text>based on comparing the embedding vector to the one or more candidate embedding vectors, selecting a particular CI of the CIs contained in the persistent storage; and</claim-text><claim-text>updating the particular CI to additionally represent at least one of the one or more attribute values of the particular computing resource.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of attribute values of the computing resources are determined by a remote network management platform by executing a discovery process with respect to a managed network containing the computing resources.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computing system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein obtaining the one or more attribute values comprises:<claim-text>obtaining the one or more attribute values of the particular computing resource from a third-party system configured to scan the managed network.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computing system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the third-party system is a vulnerability scanning system configured to scan the managed network for vulnerabilities, and wherein obtaining the one or more attribute values comprises:<claim-text>receiving test result data from the third-party system in response to completion of execution of one or more tests of the particular computing resource, wherein the one or more tests are configured to determine the one or more attribute values of the particular computing resource.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining the one or more attribute values comprises:<claim-text>retrieving, from the persistent storage, an unmatched CI generated to represent the one or more attribute values of the particular computing resource, wherein the unmatched CI is generated based on one or more rule-based algorithms determining that the one or more attribute values of the particular computing resource do not correspond to the plurality of attribute values of the computing resources.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computing system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein updating the particular CI to additionally represent at least one of the one or more attribute values of the particular computing resource comprises:<claim-text>updating the particular CI based on the unmatched CI; and</claim-text><claim-text>deleting the unmatched CI.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein comparing the embedding vector to the one or more candidate embedding vectors comprises:<claim-text>generating, for each respective candidate embedding vector of the one or more candidate embedding vectors, a corresponding similarity metric between the embedding vector and the respective candidate embedding vector.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computing system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the corresponding similarity metric is one or more of (i) a Euclidean distance between the embedding vector and the respective candidate embedding vector or (ii) a cosine distance between the embedding vector and the respective candidate embedding vector.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computing system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein selecting the particular CI of the CIs contained in the persistent storage comprises:<claim-text>determining that the corresponding similarity metric associated with the particular CI exceeds a threshold similarity value; and</claim-text><claim-text>selecting the particular CI based on determining that the corresponding similarity metric associated with the particular CI exceeds the threshold similarity value.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computing system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein selecting the particular CI of the CIs contained in the persistent storage comprises:<claim-text>determining that the corresponding similarity metric associated with the particular CI is a highest similarity metric of the corresponding similarity metrics generated for the one or more candidate embedding vectors; and</claim-text><claim-text>selecting the particular CI based on determining that the corresponding similarity metric associated with the particular CI is the highest similarity metric.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein selecting the particular CI of the CIs contained in the persistent storage comprises:<claim-text>displaying, by way of a user interface and for each respective candidate embedding vector of the one or more candidate embedding vectors, results of comparing the embedding vector to the respective candidate embedding vector; and</claim-text><claim-text>receiving, by way of the user interface, a selection of the particular CI.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more attribute values of the particular computing resource represent one or more of: (i) an identifier assigned to the particular computing resource by a third-party scanning system, (ii) an identifier assigned to the particular computing resource by a Network Basic Input/Output System (NetBIOS), (iii) a name associated with the particular computing resource, (iv) at least a portion of a fully qualified domain name (FQDN) associated with the particular computing resource (v) an internet protocol (IP) address associated with the particular computing resource, or (vi) a domain name system (DNS) entry associated with the particular computing resource.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the embedding vector comprises a plurality of dimensions and, for each respective dimension of the plurality of dimensions, a corresponding embedding value, wherein each respective attribute value of the one or more attribute values of the particular computing resource is represented by a corresponding one or more dimensions of the plurality of dimensions of the embedding vector.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computing system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the corresponding one or more dimensions representing the respective attribute value are predefined and comprise a subset of the plurality of dimensions, and wherein the one or more dimensions represent the respective attribute value exclusively of other attribute values of the one or more attribute values of the particular computing resource.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each respective attribute value of the one or more attribute values of the particular computing resource is represented by a corresponding character string, and wherein the machine learning model is configured to generate the embedding vector based on one or more corresponding character strings that represent the one or more attribute values.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of attribute values of the computing resources corresponds to a first set of attributes, wherein the one or more attribute values of the particular computing resource correspond to a subset of the first set of attributes, and wherein the machine learning model is trained based on training attribute values corresponding to the subset of the first set of attributes.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the embedding vector comprises:<claim-text>selecting, based on a managed network to which the particular computing resource belongs, the machine learning model from a plurality of machine learning models corresponding to a plurality of managed networks, wherein each respective machine learning model of the plurality of machine learning models is trained based on CIs representing training attribute values of computing resources of a corresponding managed network.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computing system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the machine learning model is retrained based on changes over time to the plurality of attribute values of the computing resources.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A computer-implemented method comprising:<claim-text>obtaining one or more attribute values of a particular computing resource, wherein persistent storage contains configuration items (CIs) representing a plurality of attribute values of computing resources;</claim-text><claim-text>generating, using a machine learning model and based on the one or more attribute values of the particular computing resource, an embedding vector representing the one or more attribute values of the particular computing resource;</claim-text><claim-text>comparing the embedding vector to one or more candidate embedding vectors, wherein each respective candidate embedding vector of the one or more candidate embedding vectors represents at least one attribute value of a corresponding CI of the CIs contained in the persistent storage;</claim-text><claim-text>based on comparing the embedding vector to the one or more candidate embedding vectors, selecting a particular CI of the CIs contained in the persistent storage; and</claim-text><claim-text>updating the particular CI to additionally represent at least one of the one or more attribute values of the particular computing resource.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory computer-readable medium having stored thereon instructions that, when executed by a computing system, cause the computing system to perform operations comprising:<claim-text>obtaining one or more attribute values of a particular computing resource, wherein persistent storage contains configuration items (CIs) representing a plurality of attribute values of computing resources;</claim-text><claim-text>generating, using a machine learning model and based on the one or more attribute values of the particular computing resource, an embedding vector representing the one or more attribute values of the particular computing resource;</claim-text><claim-text>comparing the embedding vector to one or more candidate embedding vectors, wherein each respective candidate embedding vector of the one or more candidate embedding vectors represents at least one attribute value of a corresponding CI of the CIs contained in the persistent storage;</claim-text><claim-text>based on comparing the embedding vector to the one or more candidate embedding vectors, selecting a particular CI of the CIs contained in the persistent storage; and</claim-text><claim-text>updating the particular CI to additionally represent at least one of the one or more attribute values of the particular computing resource.</claim-text></claim-text></claim></claims></us-patent-application>