<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004458A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004458</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17779105</doc-number><date>20191125</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>07</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0769</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0775</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0721</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">IDENTIFIERS OF CRASH EVENT WORK ITEMS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Hewlett-Packard Development Company, L.P.</orgname><address><city>Spring</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Stewart</last-name><first-name>Christopher Tomas</first-name><address><city>Spring</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Avery</last-name><first-name>Marcus Leo</first-name><address><city>Spring</city><state>TX</state><country>US</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/US2019/063062</doc-number><date>20191125</date></document-id><us-371c12-date><date>20220523</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In some examples, a system comprises a network interface; a storage device comprising machine-readable instructions; and a processor coupled to the network interface, the processor to access the storage device, wherein execution of the machine-readable instructions causes the processor to: collect crash event data; categorize the crash event data by an application executing when the crash event occurred; identify a crash event corresponding to the crash event data; create an identifier for the crash event; compare the identifier of the crash event to a list of work items, wherein each work item has an identifier; and update the list of work items based on the comparison.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="96.86mm" wi="158.75mm" file="US20230004458A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="188.04mm" wi="122.17mm" orientation="landscape" file="US20230004458A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="194.14mm" wi="125.39mm" orientation="landscape" file="US20230004458A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="197.19mm" wi="134.87mm" orientation="landscape" file="US20230004458A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="194.48mm" wi="130.81mm" orientation="landscape" file="US20230004458A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="186.69mm" wi="112.61mm" orientation="landscape" file="US20230004458A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="187.96mm" wi="133.52mm" orientation="landscape" file="US20230004458A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="180.26mm" wi="112.18mm" orientation="landscape" file="US20230004458A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="180.93mm" wi="120.31mm" orientation="landscape" file="US20230004458A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Event data is information pertaining to the daily operations of hardware components and applications of a computing device. When an application of the computing device fails (e.g., crashes), the application may generate event data pertaining to the crash event (e.g., crash event data). Crash event data may include information usable for diagnosing and analyzing the failure to determine a root cause of the failure. Based on the diagnosis and analysis, the application may be modified to prevent future occurrences of the crash event.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0003" num="0002">Various examples will be described below referring to the following figures:</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a schematic diagram of a system in accordance with various examples;</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a schematic diagram of a processing environment of a system in accordance with various examples;</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a schematic diagram of a processing environment of a system in accordance with various examples;</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a schematic diagram of a processing environment of a system in accordance with various examples;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts a schematic diagram of a system in accordance with various examples;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts a schematic diagram of a system in accordance with various examples;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a flow diagram of a method in accordance with various examples; and</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>8</b></figref> depicts a flow diagram of a method in accordance with various examples.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION</heading><p id="p-0012" num="0011">As explained above, an application (e.g., machine-readable instructions) of a computing device (e.g., laptop, notebook, tablet, smartphone, mobile device, or some other electronic device with an ability to capture data about operations of the device) may crash. For example, if an application attempts to utilize more memory than the computing device has available, the application may freeze operations of the computing device, close down in a disruptive manner, or cease to respond to user commands. The crash event may result in the generation of event data (e.g., crash event data) usable for diagnosing and analyzing the crash event to determine a root cause of the crash event.</p><p id="p-0013" num="0012">Crash event data may include features that identify and describe the crash event. The features may include: an identifier of the application; an exception category (e.g., managed, unmanaged); an exception type (e.g., defined by the application to assist in locating the machine-readable instructions of the application associated with the exception); a stack trace (e.g., data regarding operations performed by the application prior to the crash event); a version of the application; an operating system of the computing device (e.g., WINDOWS&#xae;, ANDROID&#xae;, MAC OS&#xae;); an identifier of the computing device; an enterprise (e.g., business, company) to which the computing device belongs; or other relevant information that may assist in diagnosing, analyzing, or resolving the failure. For the previous example in which the application attempted to utilize more memory than available, the features of the crash event data may include an exception category of managed; an exception type indicating memory access; and a stack trace comprising a list of machine-readable instructions executing immediately prior to the failure and data utilized by the list of machine-readable instructions, for example.</p><p id="p-0014" num="0013">A computing device may include multiple hardware components and multiple applications. Event data may be generated by any of the hardware components or applications. As a result, hundreds or thousands of events may be generated daily. Sorting through the event data to determine which events are crash events may be difficult due to the quantity of events. For example, the event data may be collected once a week. To identify a crash event of the event data, the quantity of events to sort through is hundreds or thousands multiplied by seven. In another example, the computing device may be part of a system that includes other computing devices. For the system to identify a crash event of the event data, the system may need to sort through hundreds or thousands of events multiplied by the number of multiple computing devices of the system.</p><p id="p-0015" num="0014">Instead of sorting through event data, enterprises that develop applications often rely on a user of the application to report a crash event. When the user reports the crash event, a work item (e.g., bug, incident, ticket, alert) is generated. The work item is for a developer of the application. The work item includes information about the crash event that might assist the developer in preventing the crash event from occurring in the future. However, the user of the application may fail to report the crash event. Additionally, the user may be one of many users who experience failures and do not report the crashes. The lack of user-provided reporting results in an incomplete and inaccurate representation of crash events. By utilizing a system to automatically collect the event data on a scheduled basis, sort through the event data to locate crash event data and create work items, crash events of an application may be identified and resolved without relying on end users of the application to report the crash events.</p><p id="p-0016" num="0015">This disclosure describes various examples of a system creating identifiers for crash event work items. The system locates a crash event of crash event data. The system creates an identifier from features pertaining to the crash event. Crash events that share the same features utilized to create the identifier also share the same identifier. The identifier is compared to the identifiers for crash event work items. The work items are updated based on the comparison.</p><p id="p-0017" num="0016">In one example in accordance with the present disclosure, a system is provided. The system comprises a network interface; a storage device comprising machine-readable instructions; and a processor coupled to the network interface, the processor to access the storage device. Execution of the machine-readable instructions causes the processor to collect crash event data; categorize crash event data by an application executing when the crash event occurred; identify a crash event corresponding to crash event data; create an identifier for the crash event; compare the identifier of the crash event to a list of work items, where each work item has an identifier; and update the list of work items based on the comparison.</p><p id="p-0018" num="0017">In another example in accordance with the present disclosure, a non-transitory computer-readable medium is provided. The non-transitory computer-readable medium stores machine-readable instructions which when executed by a processor, cause the processor to: identify a crash event of a computing device; create an identifier for the crash event; compare the identifier to a list of work items; and update the list of work items based on the comparison.</p><p id="p-0019" num="0018">In yet another example in accordance with the present disclosure, a method is provided. The method comprises identifying a crash event of an application of a computing device; identifying features of the crash event; creating an identifier based on the features; determining if the identifier equals an identifier of a work item in a list of work items; and updating the list of work items based on the determination.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a schematic diagram of a system <b>100</b>, in accordance with various examples. The system <b>100</b> comprises computing devices <b>102</b> and a processing environment <b>105</b> coupled to the computing devices <b>102</b>. A computing device <b>104</b> of the computing devices <b>102</b> may be a laptop, notebook, tablet, smartphone, mobile device, or some other electronic device with an ability to capture data about operations of the device, for example. The processing environment <b>105</b> may be a computing device (e.g., server, central server, edge server, or some other suitable computing device) or a network of computing devices (e.g., local area network (LAN), wide area network (WAN), virtual private network (VPN), client/server network, Internet (e.g., cloud), or any other suitable system for sharing processing and memory resources).</p><p id="p-0021" num="0020">The processing environment <b>105</b> comprises a network interface <b>106</b>, a processor <b>108</b> coupled to the network interface <b>106</b>, and storage devices <b>109</b>. The processor <b>108</b> may be a microprocessor, a microcomputer, a microcontroller, or other suitable processor or controller, for example. In some examples, such as when the storage devices <b>109</b> are remotely managed storage devices (e.g., enterprise cloud, public cloud, data center, server, or some other suitable storage device), the processor <b>108</b> may be communicatively coupled to the storage devices <b>109</b> via a path <b>114</b> coupling the network interface <b>106</b> and the storage devices <b>109</b>. In other examples, such as when the processor <b>108</b> and the storage devices <b>109</b> are located on a computing device, the storage devices <b>109</b> may be coupled via a path <b>116</b> to the processor <b>108</b>. A storage device <b>110</b> of the storage devices <b>109</b> may be a hard drive, solid state drive (SSD), flash memory, random access memory (RAM), or other suitable memory, for example. The storage device <b>110</b> may store machine-readable instructions <b>112</b>, which, when executed, cause the processor <b>108</b> to perform some or all of the actions attributed herein to the processor <b>108</b>.</p><p id="p-0022" num="0021">In various examples, the computing device <b>104</b> may have an identifier, while another computing device of the computing devices <b>102</b> may have another identifier. In some examples, the computing device <b>104</b> may utilize one operating system (e.g., WINDOWS&#xae;, ANDROID&#xae;, MAC OS&#xae;), while another computing device of the computing devices <b>102</b> may utilize another operating system. In other examples, the computing device <b>104</b> may belong to one enterprise, while another computing device of the computing devices <b>102</b> may belong to another enterprise. In some examples, the computing devices <b>102</b> are owned by one enterprise. Features of the crash event data such as an identifier of a computing device on which the crash event occurred, an operating system of the computing device, and an enterprise to which the computing device belongs may assist in resolving a crash event. Once the application is updated to prevent future occurrences of the crash event, the features may be usable to determine which computing devices of which enterprises should be provided an updated version of the application.</p><p id="p-0023" num="0022">In various examples, the computing devices <b>102</b> and the system <b>100</b> belong to the same enterprise. In other examples, an enterprise owning an application installed on the computing devices <b>102</b> is also the enterprise owning the system <b>100</b>. In some examples, an enterprise to which the computing devices <b>102</b> belong has granted an enterprise owning the processing environment <b>105</b> access rights to the computing devices <b>102</b>. In other examples, an enterprise owning the processing environment <b>105</b> has granted an enterprise to which the computing devices <b>102</b> belong access rights to the storage devices <b>109</b>. The enterprise to which the computing devices <b>102</b> belong may grant the enterprise owning the processing environment <b>105</b> access rights to data of the computing devices <b>102</b> stored on the storage devices <b>109</b>. For example, the enterprise to which the computing devices <b>102</b> belong may have the ability to upload data for storage on the storage devices <b>109</b>. The processing environment <b>105</b> may then access the data to identify data of interest (e.g., crash event data) and analyze the data (e.g., trends, root causes of failures). In some examples, the processing environment <b>105</b>, having been granted previous access rights, may access the data automatically on a scheduled basis (e.g., daily, weekly, monthly).</p><p id="p-0024" num="0023">In some examples, by granting access rights across multiple enterprises, an enterprise associated with the processing environment <b>105</b> may gather more crash event data of an application associated with a crash event. Having more data regarding the crash event may enable the enterprise to better prioritize the crash event. For example, if the crash event is occurring on multiple computing devices of multiple enterprises, the enterprise may assign a high priority to diagnosing, analyzing, and resolving the crash event. Additionally, more data may allow the enterprise to gather a wider variety of information to assist in diagnosing, analyzing, and resolving the crash event. For example, the enterprise may determine that the crash event is occurring on computing devices with one operating system, but that it is not occurring on computing devices having another operating system.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a schematic diagram of the processing environment <b>105</b> of the system <b>100</b>, in accordance with various examples. As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the processing environment <b>105</b> may be a computing device or may be a network of computing devices. In one example, the processing environment <b>105</b> includes a computing device comprising the network interface <b>106</b>, the storage device <b>110</b>, and the processor <b>108</b>. The processor <b>108</b> is coupled to the storage device <b>110</b> via the path <b>116</b> and to the network interface <b>106</b>. In another example, the processing environment <b>105</b> includes a network of computing devices. A computing device comprises the network interface <b>106</b> coupled to the processor <b>108</b>. The processor <b>108</b> communicatively couples to the remotely managed storage device <b>110</b> via the path <b>114</b>, which couples the remotely managed storage device <b>110</b> to the network interface <b>106</b> of the computing device. In various examples, the storage device <b>110</b> may store machine-readable instructions, which, when executed, cause the processor <b>108</b> to perform some or all of the actions attributed herein to the processor <b>108</b>.</p><p id="p-0026" num="0025">In some examples, the storage device <b>110</b> comprises machine-readable instructions <b>200</b>, <b>202</b>, <b>204</b>, <b>206</b>, <b>208</b>, and <b>210</b>. The machine-readable instructions <b>200</b>, <b>202</b>, <b>204</b>, <b>206</b>, <b>208</b>, <b>210</b> may be machine-readable instructions <b>112</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>), for example. The machine-readable instructions <b>200</b>, <b>202</b>, <b>204</b>, <b>206</b>, <b>208</b>, <b>210</b> may be machine-readable instructions for execution by the processor <b>108</b>. The machine-readable instructions <b>200</b>, <b>202</b>, <b>204</b>, <b>206</b>, <b>208</b>, <b>210</b> may cause the processor <b>108</b> to collect crash event data of a computing device (e.g., <b>104</b>) and update a list of work items based on an identifier for a crash event of the crash event data. Execution of machine-readable instruction <b>200</b> may cause the processor <b>108</b> to collect crash event data. Execution of machine-readable instruction <b>202</b> may cause the processor <b>108</b> to categorize crash event data by an application executing when the crash event occurred. Execution of machine-readable instruction <b>204</b> may cause the processor <b>108</b> to identify a crash event corresponding to crash event data. Execution of machine-readable instruction <b>206</b> may cause the processor <b>108</b> to create an identifier for the crash event. Execution of machine-readable instruction <b>208</b> may cause the processor <b>108</b> to compare the identifier of the crash event to a list of work items, where each work item of the list of work items has an identifier. Execution of machine-readable instruction <b>210</b> may cause the processor <b>108</b> to update the list of work items based on the comparison.</p><p id="p-0027" num="0026">As discussed above, an application of a computing device (e.g., <b>104</b>) may fail, resulting in the creation of a crash event. The crash event may generate event data pertaining to the crash event (e.g., crash event data). In various examples, crash event data may be stored on the computing device (e.g., <b>104</b>) or may be stored on a storage device (e.g., <b>110</b>) within a processing environment (e.g., <b>105</b>). In some examples, the processor <b>108</b> may collect crash event data from the computing device <b>104</b>. In other examples, the processor <b>108</b> may collect crash event data of the computing device <b>104</b> from the storage device <b>110</b>. In various examples, the processor <b>108</b> may automatically collect crash event data on a scheduled basis. For example, the processor <b>108</b> may collect crash event data every hour, daily, weekly, or on some other routine basis.</p><p id="p-0028" num="0027">In various examples, the crash event data may be stored with event data of the computing device (e.g., <b>104</b>). The processor <b>108</b> may collect the event data from the computing device <b>104</b> or from the storage device <b>110</b>. The processor <b>108</b> may sort through event data and discard any event that is not crash event data. In various examples, the processor <b>108</b> may determine if event data is crash event data by examining features of the event data to determine if the event data includes an exception category. The exception category indicates a crash event associated with an application. The exception category may be managed or unmanaged. A managed exception indicates an exception generated by machine-executable instructions operating within a runtime environment. The runtime environment allows for the generation of stack traces to record operations associated with the machine-executable instructions. An unmanaged exception indicates an exception generated by machine-executable instructions executed by an operating system of a computing device. In some examples, the unmanaged exception does not generate a stack trace.</p><p id="p-0029" num="0028">As discussed above, a computing device may include multiple applications. Each application of the multiple applications may fail and generate crash event data. Features of crash event data may include an identifier of an application that generated the crash event. The identifier of the application is usable by the processor <b>108</b> to categorize crash event data by the application responsible for the crash. In various examples, the processor <b>108</b> may aggregate crash event data of an application by sorting crash event data having the same identifier of an application into a data structure (e.g., lookup table, database). The data structure may be stored on storage device <b>110</b> or another storage device of the storage devices <b>109</b>, for example. The processor <b>108</b> may aggregate crash event data of each application having an identifier in crash event data of multiple applications. The processor <b>108</b> may identify a crash event corresponding to the crash event data of a data structure pertaining to an identifier of an application. In other examples, the processor <b>108</b> may not aggregate crash event data by an application prior to identifying a crash event corresponding to the crash event data.</p><p id="p-0030" num="0029">As discussed above, crash event data may include features usable for analyzing the failure. The features may include an identifier of an application, an exception category, an exception type, a stack trace, a version of the application, an operating system of the application, an identifier of the computing device, an enterprise to which the computing device belongs, or other relevant information that may assist in analyzing the failure. The processor <b>108</b> may create an identifier for the crash event by utilizing a subset of the features of the crash event data. For example, the processor <b>108</b> may utilize a hashing function to generate an identifier of the crash event data. In one example, such as when the exception category is managed, the exception type and the stack trace may be combined into a string variable. The string variable may be an input into the hashing function. The output of the hashing function is the identifier of the crash event. In another example, such as when the exception category is unmanaged, the exception type and the version of the application may be combined into a string variable for input into the hashing function.</p><p id="p-0031" num="0030">In some examples, the list of work items is a list of identifiers associated with work items stored in a data structure (e.g., lookup table, database) comprising work items. The data structure may be stored on the storage device <b>110</b> or on another storage device of the storage devices <b>109</b>, for example. The processor <b>108</b> searches the list of work items to determine if the identifier of the crash event matches an identifier of a work item in the list of work items (e.g., machine-readable instruction <b>208</b>).</p><p id="p-0032" num="0031">In various examples, updating the list of work items includes both the creation of a new work item as well as the modification of an existing work item. If the identifier of the crash event does not exist in the list of work items, then a new work item is created and the list is updated to include the new work item. In some examples, the creation of a new work item adds the new work item to the data structure of work items. The creation of the new work item stores the features of the crash event in a data structure of the new work item. For example, the new work item has the identifier of the crash event as an identifier of the work item and may also have an identifier of an application that generated the crash event; an exception category; an exception type; a stack trace; a version of the application; an operating system of the application; an identifier of the computing device; and an enterprise to which the computing device belongs. In some examples, the creation of the new work item stores a subset of the features of the crash event. For example, the new work item may include either a version of the application or an operating system of the application. In another example, such as when the exception category is unmanaged, the new work item may not include the stack trace.</p><p id="p-0033" num="0032">In various examples, if the identifier of the crash event does exist in the list of work items, then a work item associated with the identifier is modified. In some examples, the modification of an existing work item may not include storing the features of the crash event in the data structure of the existing work item. Instead, subset of features may be updated to reflect an increase in a number of occurrences of the crash event since a last update, an increase in a number of devices affected by the crash event since the last update, an increase in a number of crashes per device since the last update, or changing a flag to indicate that the work item has been updated. The last update is determined by when the work item was created or modified, whichever event is more recent in time.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a schematic diagram of the processing environment <b>105</b> of the system <b>100</b>, in accordance with various examples. As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the processing environment <b>105</b> may be a computing device comprising the network interface <b>106</b>, the storage device <b>110</b>, and the processor <b>108</b>. The processor <b>108</b> is coupled to the storage device <b>110</b> via the path <b>116</b> and to the network interface <b>106</b>. In other examples, the processing environment <b>105</b> may be a network of computing devices with a computing device of the network comprising the processor <b>108</b> coupled to the network interface <b>106</b>. The processor <b>108</b> is communicatively coupled to the remotely managed storage device <b>110</b> via the path <b>114</b> coupling the remotely managed storage device <b>110</b> and the network interface <b>106</b>. In various examples, the storage device <b>110</b> may store machine-readable instructions, which, when executed, cause the processor <b>108</b> to perform some or all of the actions attributed herein to the processor <b>108</b>.</p><p id="p-0035" num="0034">In some examples, the storage device <b>110</b> comprises machine-readable instructions <b>300</b>, <b>302</b>, <b>304</b>, <b>306</b>, and <b>308</b>. The machine-readable instructions <b>300</b>, <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> may be machine-readable instructions <b>112</b>, for example. The machine-readable instructions <b>300</b>, <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> may be machine-readable instructions for execution by the processor <b>108</b>. Execution of the machine-readable instructions <b>300</b>, <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> may cause the processor <b>108</b> to aggregate crash events having a same feature and to adjust a count associated with the crash event. Execution of machine-readable instruction <b>300</b> may cause the processor <b>108</b> to identify features of a first crash event of the crash event data. Execution of machine-readable instruction <b>302</b> may cause the processor <b>108</b> to identify features of a second crash event of the crash event data. Execution of machine-readable instruction <b>304</b> may cause the processor <b>108</b> to aggregate the data of the first crash event with the data of the second crash event in response to the features of the first crash event being the same as the features of the second crash event. Execution of machine-readable instruction <b>306</b> may cause the processor <b>108</b> to determine if the first crash event and the second crash event occurred on the same computing device. Execution of machine-readable instruction <b>308</b> may cause the processor <b>108</b> to adjust, based on the determination, a number of crash occurrences, a number of devices affected by the first crash event, and/or a number of crashes per device related to the first crash event.</p><p id="p-0036" num="0035">As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, in various examples, the processor <b>108</b> may aggregate crash event data of an application by sorting through the crash event data and compiling into a data structure crash event data having a same identifier of an application. The processor <b>108</b> may aggregate crash event data of each application having an identifier in the crash event data of multiple applications. The processor <b>108</b> may identify features of a first crash event of the crash event data of a list of crash events for an application. The processor <b>108</b> may identify features of a second crash event of the crash event data of a list of crash events for an application.</p><p id="p-0037" num="0036">In various examples, the processor <b>108</b> may compare a subset of the features of the first crash event to a subset of the features of the second crash event to determine if the subsets of features are the same. For example, the processor <b>108</b> may compare the exception category, the exception type, and the stack trace of the first crash event to the exception category, the exception type, and the stack trace of the second crash event. In another example, the processor <b>108</b> may compare the exception category, the exception type, and the version of the application of the first crash event to the exception category, the exception type, and the version of the application of the second crash event. If the subset of features for the first crash event equals the subset of features for the second crash event, the processor <b>108</b> may aggregate the data (e.g., machine-readable instruction <b>304</b>).</p><p id="p-0038" num="0037">Aggregating the data may include updating a list of identifiers of computing devices affected by the first crash event. For example, if there is not a list of identifiers of computing devices affected by the first crash event, the processor <b>108</b> may create the list of identifiers and store the identifier of the computing device of the first crash event. In some examples, the crash event data of the first crash event may be linked to the identifier of the computing device of the first crash event, such that if a user selected the link the crash event data is accessible. The list of identifiers of computing devices affected by the first crash event may be stored on the storage device <b>110</b> or on another storage device of the storage devices <b>109</b>, for example. In some examples, the list of identifiers of computing devices affected by the first crash event may be included in the data structure of a work item having the identifier of the first crash event. In another example, if the list of identifiers of computing devices affected by the first crash event does exist, then the identifier of the computing device associated with second crash event may be compared to each identifier of the list of computing devices to determine if the computing device of the second crash event is on the list. If the computing device is not on the list, the list may be modified to include the identifier of the computing device of the second crash event. In some examples, the crash event data of the second crash event may be linked to the identifier of the computing device. Linking the crash event data to the identifier of the computing device may provide a developer of the application associated with the crash event access to some or all of the features of the crash event on the computing device.</p><p id="p-0039" num="0038">As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the processor <b>108</b> may collect data from multiple computing devices (e.g., computing devices <b>102</b>). Crash event data from a first computing device (e.g., computing device <b>104</b>) may have as a feature an identifier of the first computing device. Crash event data from a second computing device may have as a feature an identifier of the second computing device. The processor <b>108</b> may compare the identifier of a computing device associated with the first crash event to the identifier of a computing device associated with the second crash event. If the identifiers are not the same, then the processor <b>108</b> may increase a number of devices affected by the first crash event and a number of crash occurrences. If the identifiers are the same, then the processor <b>108</b> may increase a number of crash occurrences and a number of crashes per the first computing device.</p><p id="p-0040" num="0039">In one example, a first crash event has as a feature an identifier of a first computing device. A second crash event has as a feature an identifier of a second computing device. A list of identifiers of computing devices affected by the first crash event includes the identifier of the second computing device. The processor <b>108</b> may increase the number of crash occurrences as well as the number of crashes per the second computing device. In another example, the list of identifiers of a computing device affected by the first crash does not include the identifier of the second computing device. The processor <b>108</b> may increase the number of crash occurrences, increase the number of devices affected by the first crash event, increase the number of crashes associated with the second computing device, and add the identifier of the second computing device to the list of computing devices affected by the first crash event. In some examples, the list of identifiers of a computing device affected by the first crash, the number of crash occurrences, the number of devices affected by the first crash event, and the number of crashes associated with each computing device in the list of computing devices may be stored in the data structure of the work item sharing an identifier with the first crash event.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a schematic diagram of the processing environment <b>105</b> of the system <b>100</b>, in accordance with various examples. As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the processing environment <b>105</b> may be a computing device comprising the network interface <b>106</b>, the storage device <b>110</b>, and the processor <b>108</b>. The processor <b>108</b> coupled to the storage device <b>110</b> via the path <b>116</b> and to the network interface <b>106</b>. In other examples, the processing environment <b>105</b> may be a network of computing devices with a computing device of the network comprising the processor <b>108</b> coupled to the network interface <b>106</b>. The processor <b>108</b> is communicatively coupled to the remotely managed storage device <b>110</b> via the path <b>114</b> coupling the remotely managed storage device <b>110</b> and the network interface <b>106</b>. In various examples, the storage device <b>110</b> may store machine-readable instructions, which, when executed, cause the processor <b>108</b> to perform some or all of the actions attributed herein to the processor <b>108</b>.</p><p id="p-0042" num="0041">In some examples, the storage device <b>110</b> comprises machine-readable instructions <b>400</b>, <b>402</b>, and <b>404</b>. The machine-readable instructions <b>400</b>, <b>402</b>, <b>404</b> may be machine-readable instructions <b>112</b>, for example. The machine-readable instructions <b>400</b>, <b>402</b>, <b>404</b> may be machine-readable instructions for execution by the processor <b>108</b>. Execution of the machine-readable instructions <b>400</b>, <b>402</b>, <b>404</b> may cause the processor <b>108</b> to update a list of work items based on a comparison of an identifier of a work item of the list of work items and an identifier of a crash event. Execution of machine-readable instruction <b>400</b> may cause the processor <b>108</b> to determine if the work item of the list of work items has an identifier equal to the identifier of the crash event. Execution of machine-readable instruction <b>402</b> may cause the processor <b>108</b> to create a work item with an identifier equal to the identifier of the crash event and store the crash event data with the work item. Execution of machine-readable instruction <b>404</b> may cause the processor <b>108</b> to modify the work item, the modification comprising data about a number of crash occurrences since a last update, a number of devices affected since a last update, and/or a number of crashes per device since a last update.</p><p id="p-0043" num="0042">As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, in some examples, in response to the processor <b>108</b> determining that a work item of a list of work items does have an identifier equal to an identifier of a crash event, the processor <b>108</b> updates the list of work items by modifying the work item. (See discussion above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> and <figref idref="DRAWINGS">FIG. <b>3</b></figref> for examples.) In other examples, in response to the processor <b>108</b> determining that a work item of the list of work items does not have an identifier equal to an identifier of a crash event, the processor updates the list of work items by creating a work item with an identifier equal to an identifier of the crash event and storing the crash event data with the work item. (See discussion above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> for examples.)</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts a schematic diagram of a system <b>500</b>, in accordance with various examples. The system <b>500</b> comprises a computer-readable medium <b>504</b> and a processor <b>502</b> coupled to the computer-readable medium <b>504</b>. The system <b>500</b> may be the processing environment <b>105</b>, for example. The system <b>500</b> may be a computing device or a network of computing devices, as discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The computer-readable medium <b>504</b> may be a storage device such as a hard drive, solid state drive (SSD), flash memory, random access memory (RAM), or other suitable memory, for example. The computer-readable medium <b>504</b> may be the storage device <b>110</b>, for example. The computer-readable medium <b>504</b> may be local to the computing device or may be on a remotely managed storage device (e.g., enterprise cloud, public cloud, data center, server, or some other suitable storage device), as discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The processor <b>502</b> may be a microprocessor, a microcomputer, a microcontroller, or another suitable embedded processor or embedded controller, for example. The processor <b>502</b> may be the processor <b>108</b>, for example. The processor <b>502</b> may be local to the computing device comprising the computer-readable medium <b>504</b> or may be on a remotely managed computing device, as discussed above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The computer-readable medium <b>504</b> may store machine-readable instructions, which, when executed, cause the processor <b>502</b> to perform some or all of the actions attributed herein to the processor <b>502</b>.</p><p id="p-0045" num="0044">The computer-readable medium <b>504</b> comprises machine-readable instructions <b>506</b>, <b>508</b>, <b>510</b>, and <b>512</b>. The machine-readable instructions <b>506</b>, <b>508</b>, <b>510</b>, <b>512</b> may be machine-readable instructions <b>112</b>, for example. The machine-readable instructions <b>506</b>, <b>508</b>, <b>510</b>, <b>512</b> may be machine-readable instructions for execution by the processor <b>502</b>. Execution of the machine-readable instructions <b>506</b>, <b>508</b>, <b>510</b>, <b>512</b> may cause the processor <b>502</b> to identify a crash event and update a list of work items based on an identifier of the crash event. Execution of machine-readable instruction <b>506</b> may cause the processor <b>502</b> to identify a crash event of a computing device (e.g., computing device <b>104</b>). Execution of machine-readable instruction <b>508</b> may cause the processor <b>502</b> to create an identifier for the crash event. Execution of machine-readable instruction <b>510</b> may cause the processor <b>502</b> to compare the identifier to a list of work items. Execution of instruction <b>512</b> may cause the processor <b>502</b> to update the list of work items based on the comparison.</p><p id="p-0046" num="0045">As discussed above, an application of a computing device (e.g., <b>104</b>) may fail, resulting in the creation of a crash event. The crash event may generate event data pertaining to the crash event (e.g., crash event data). As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, in various examples, the crash event data may be stored with event data of the computing device. The processor <b>502</b> may collect the event data from a storage device of the computing device or from the storage devices of a processing environment (e.g., <b>105</b>). In various examples, the processor <b>502</b> may automatically collect crash event data on a scheduled basis. For example, the processor <b>108</b> may collect crash event data every hour, daily, weekly, or on some other routine basis. The processor <b>502</b> may sort through event data and discard any event that is not crash event data. In various examples, the processor <b>502</b> may determine if event data is crash event data by searching for the exception category of the crash event data.</p><p id="p-0047" num="0046">In some examples, the processor <b>502</b> may collect crash event data from multiple computing devices. However, the processor <b>502</b> may be tasked with diagnosing, analyzing, and resolving a crash event of distinct computing devices. For example, the processor <b>502</b> may be tasked with diagnosing, analyzing, and resolving a crash event of an application utilized by an enterprise. The processor <b>502</b> may search for the identifier of a computing device feature of the crash event data to locate computing devices belonging to the enterprise.</p><p id="p-0048" num="0047">In some examples, the processor <b>502</b> may create an identifier for the crash event by utilizing a subset of the features of the crash event data. (See discussion above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> for an example.) For examples in which the processor <b>502</b> is tasked with diagnosing, analyzing, and resolving a crash event of distinct computing devices, the processor <b>502</b> may include an identifier of a computing device associated with the crash event when creating the identifier for the crash event. The processor <b>502</b> may compare the identifier for the crash event to identifiers of work items in a list of work items. The processor <b>502</b> may update the list of work items based on the comparison. (See discussion above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> for an example.)</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts a schematic diagram of the system <b>500</b>, in accordance with various examples. As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the system <b>500</b> comprises the computer-readable medium <b>504</b> and the processor <b>502</b> coupled to the computer-readable medium <b>504</b>. The system <b>500</b> may be the processing environment <b>105</b>, for example. The computer-readable medium <b>504</b> may be the storage device <b>110</b>, for example. The processor <b>502</b> may be the processor <b>108</b>, for example.</p><p id="p-0050" num="0049">In some examples, the computer-readable medium <b>504</b> may comprise machine-readable instructions <b>600</b>, <b>602</b>, <b>604</b>, and <b>606</b>. The machine-readable instructions <b>600</b>, <b>602</b>, <b>604</b>, <b>606</b> may be machine-readable instructions <b>112</b>, for example. The machine-readable instructions <b>600</b>, <b>602</b>, <b>604</b>, <b>606</b> may be machine-readable instructions for execution by the processor <b>502</b>. Execution of the machine-readable instructions <b>600</b>, <b>602</b>, <b>604</b>, <b>606</b> may cause the processor <b>502</b> to aggregate crash event data having the same identifier and update a list of work items with the aggregated crash event data. Execution of machine-readable instruction <b>600</b> may cause the processor <b>502</b> to aggregate crash event data having the same identifier. Execution of machine-readable instruction <b>602</b> may cause the processor <b>502</b> to determine if an identifier of a crash event equals an identifier of a work item of a list of work items. Execution of machine-readable instruction <b>604</b> may cause the processor <b>502</b> to create a new work item in the list of work items with an identifier equal to the identifier of the crash event and store data of the crash event with the new work item. Execution of machine-readable instruction <b>606</b> may cause the processor <b>502</b> to update the work item of the list of work items with information of the crash event, where the update comprises a number of crash occurrences since a last update, a number of computing devices affected since a last update, a number of crashes per computing device since a last update, or a combination thereof.</p><p id="p-0051" num="0050">In various examples, such as when processing a large batch of crash event data, the processor <b>502</b> may create an identifier for the crash event utilizing a subset of features, such as the exception category, the exception type, and the stack trace. The processor <b>502</b> may create an identifier for each crash event of the crash event data. The processor <b>502</b> may aggregate crash events having a same identifier into a list. The processor <b>502</b> may set a number of crash occurrences for the list equal to the number of crash events in the list. Utilizing the identifier of the computing device feature of the crash event data, the processor <b>502</b> may create a list of computing devices affected by the crash events having a same identifier. Each distinct identifier of a computing device is listed and a number of crashes per device is incremented for each crash event having the identifier of the computing device. A number of devices affected by the crash event equals the number of distinct identifiers of a computing device in the list. The processor <b>502</b> may compare the identifier of the crash event with the identifiers of a list of work items. If the identifier of the crash event is not in the list of work items, the processor <b>502</b> may create a new work item having the identifier of the crash event and amend to the new work item the list of computing devices affected by the crash event, the number of crashes per device, the number of devices affected by the crash event, and the total number of occurrences. If the identifier of the crash event is in the list of work items, then the processor <b>502</b> may aggregate the existing work item list of computing devices affected by the crash event with the most recent list of computing devices affected by the crash event. The processor <b>502</b> may update the number of crashes per device, the number of devices affected by the crash event, and the total number of occurrences of the existing work item to include the most recent numbers. The processor <b>502</b> may flag the existing work item to indicate the work item has been updated.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a flow diagram of a method <b>700</b>, in accordance with various examples. The method <b>700</b> may be performed, for instance, by the processor <b>108</b>, <b>502</b>. The method includes identifying a crash event of an application of a computing device (<b>702</b>). The method also includes identifying features of the crash event (<b>704</b>). In addition, the method includes creating an identifier based on the features (<b>706</b>). Additionally, the method includes determining if the identifier equals an identifier of a work item in a list of work items (<b>708</b>). The method also includes updating the list of work items based on the determination (<b>710</b>).</p><p id="p-0053" num="0052">As discussed above with respect to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the processor <b>502</b> may collect event data from a storage device of the computing device or from the storage devices of a processing environment (e.g., <b>105</b>). The processor <b>502</b> may sort through event data and discard any event that is not crash event data. In various examples, the processor <b>502</b> may determine if event data is crash event data by searching for the exception category of the crash event data. In some examples, the processor <b>502</b> may create an identifier for the crash event by utilizing a subset of the features of the crash event data. (See discussion above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> for an example.) For examples in which the processor <b>502</b> is tasked with diagnosing, analyzing, and resolving a crash event of a distinct application, the processor <b>502</b> may include an identifier of an application associated with the crash event when creating the identifier for the crash event. The processor <b>502</b> may determine if the identifier for the crash event equals an identifier of a work item in a list of work items. The processor <b>502</b> may update the list of work items based on the determination. (See discussion above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> for an example.)</p><p id="p-0054" num="0053">In other examples, such as when processing a large batch of crash event data, the processor <b>502</b> may create an identifier for the crash event utilizing a subset of features, such as identifier of an application, exception category, the exception type, stack trace. The processor <b>502</b> may create an identifier for each crash event of the crash event data. As discussed with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref> above, the processor <b>502</b> may aggregate crash events having a same identifier, determine if an identifier of a crash event equals an identifier of a work item in a list of work items, and update the list of work items based on the determination.</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>8</b></figref> depicts a flow diagram of a method <b>800</b>, in accordance with various examples. The method <b>800</b> may be performed, for instance, by the processor <b>108</b>, <b>502</b>. The method includes determining an exception category, an exception type, a stack trace, a version of the application, an operating system of the application, or a combination thereof, of a crash event (<b>802</b>). The method also includes utilizing a hashing function on two or more features to create an identifier of the crash event (<b>804</b>). (See discussion above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref> for an example.) In addition, the method includes determining if a second crash event of the application has a same feature as the crash event (<b>806</b>). Additionally, the method includes adjusting, based on the determination, a number of crash occurrences associated with the crash event (<b>808</b>). (See discussion above with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref> for an example.)</p><p id="p-0056" num="0055">The above discussion is meant to be illustrative of the principles and various examples of the present disclosure. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.</p><p id="p-0057" num="0056">In the figures, certain features and components disclosed herein may be shown exaggerated in scale or in somewhat schematic form, and some details of certain elements may not be shown in the interest of clarity and conciseness. In some of the figures, for clarity and conciseness, a component or an aspect of a component may be omitted.</p><p id="p-0058" num="0057">In the following discussion and in the claims, the terms &#x201c;including&#x201d; and &#x201c;comprising&#x201d; are used in an open-ended fashion, and thus should be interpreted to mean &#x201c;including, but not limited to . . . .&#x201d; Also, the term &#x201c;couple&#x201d; or &#x201c;couples&#x201d; is intended to be broad enough to encompass both indirect and direct connections. Thus, if a first device couples to a second device, that connection may be through a direct connection or through an indirect connection via other devices, components, and connections. As used herein, including in the claims, the word &#x201c;or&#x201d; is used in an inclusive manner. For example, &#x201c;A or B&#x201d; means any of the following: &#x201c;A&#x201d; alone, &#x201c;B&#x201d; alone, or both &#x201c;A&#x201d; and &#x201c;B.&#x201d; In addition, when used herein including the claims, the word &#x201c;generally&#x201d; or &#x201c;substantially&#x201d; means within a range of plus or minus 10% of the stated value. As used herein, the term &#x201c;computing device,&#x201d; refers to an electronic device that is to carry out machine readable instructions, and may include internal components, such as, processors, power sources, memory devices, etc. For example, a computing device may include, among other things, a personal computer, a smart phone, a tablet computer, a laptop computer, a personal data assistant, etc.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system comprising:<claim-text>a network interface;</claim-text><claim-text>a storage device comprising machine-readable instructions; and</claim-text><claim-text>a processor coupled to the network interface, the processor to access the storage device, wherein execution of the machine-readable instructions causes the processor to:<claim-text>collect crash event data;</claim-text><claim-text>categorize the crash event data by an application executing when the crash event occurred;</claim-text><claim-text>identify a crash event corresponding to the crash event data;</claim-text><claim-text>create an identifier for the crash event;</claim-text><claim-text>compare the identifier of the crash event to a list of work items, wherein each work item has an identifier; and</claim-text><claim-text>update the list of work items based on the comparison.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein execution of the machine-readable instructions causes the processor to:<claim-text>identify features of a first crash event of the crash event data;</claim-text><claim-text>identify features of a second crash event of the crash event data; and</claim-text><claim-text>aggregate the data of the first crash event with the data of the second crash event in response to the features of the first crash event being the same as the features of the second crash event.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein execution of the machine-readable instructions cause the processor to collect crash event data automatically on a scheduled basis.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein execution of the machine-readable instructions causes the processor to:<claim-text>determine if the first crash event and the second crash event occurred on a single computing device; and</claim-text><claim-text>adjust, based on the determination, a number of crash occurrences, a number of devices affected by the first crash event, and a number of crashes per device related to the first crash event.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein execution of the machine-readable instructions causes the processor to modify a work item of the list of work items having an identifier equal to the identifier of the crash event, the modification comprising data about a number of crash occurrences since a last update, a number of devices affected since a last update, a number of crashes per device since a last update, or a combination thereof.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein execution of the machine-readable instructions causes the processor to update the list of work items by creating a work item with an identifier equal to the identifier of the crash event and storing the crash event data with the work item.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A non-transitory computer-readable medium storing machine-readable instructions which when executed by a processor, cause the processor to:<claim-text>identify a crash event of a computing device;</claim-text><claim-text>create an identifier for the crash event;</claim-text><claim-text>compare the identifier to a list of work items; and</claim-text><claim-text>update the list of work items based on the comparison.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computer-readable medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein execution of the machine-readable instructions causes the processor to create the identifier based on a feature of the crash event, wherein the feature is selected from an application, an exception category, an exception type, a stack trace, a version of the application, an operating system of the application, or a combination thereof.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer-readable medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein execution of the machine-readable instructions causes the processor to aggregate crash event data having identical identifiers.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer-readable medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein execution of the machine-readable instructions causes the processor to update a work item of the list of work items with information of the crash event in response to the comparison indicating that the identifier equals an identifier of the work item, wherein the update comprises a number of crash occurrences since a last update, a number of computing devices affected since a last update, a number of crashes per computing device since a last update, or a combination thereof.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer-readable medium of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein execution of the machine-readable instructions causes the processor to create a new work item in the list of work items with an identifier equal to the identifier of the crash event and to store data of the crash event with the new work item in response to the comparison indicating the identifier does not equal an identifier of a work item of the list of work items.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A method comprising:<claim-text>identifying a crash event of an application of a computing device;</claim-text><claim-text>identifying features of the crash event;</claim-text><claim-text>creating an identifier based on the features;</claim-text><claim-text>determining if the identifier equals an identifier of a work item in a list of work items; and</claim-text><claim-text>updating the list of work items based on the determination.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein identifying a crash event comprises aggregating crash events with the same features by:<claim-text>determining if a second crash event of the application has a same feature as the crash event; and</claim-text><claim-text>adjusting, based on the determination, a number of crash occurrences associated with the crash event.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein identifying features of the crash event comprises determining an exception category, an exception type, a stack trace, a version of the application, an operating system of the application, or a combination thereof.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein creating an identifier comprises utilizing a hashing function on two or more of the features.</claim-text></claim></claims></us-patent-application>