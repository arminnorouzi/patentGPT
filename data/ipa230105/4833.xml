<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004834A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004834</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364857</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>274</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>30</main-group><subgroup>0201</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>274</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">PREDICTING CUSTOM FIELDS FROM TEXT</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Intuit Inc.</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Subramaniam</last-name><first-name>Vignesh Thirukazhukundram</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Harsola</last-name><first-name>Shrutendra</first-name><address><city>Madhya Pradesh</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Raturi</last-name><first-name>Vikas</first-name><address><city>Uttar Pradesh</city><country>IN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Kaveti</last-name><first-name>Naveen Kumar</first-name><address><city>Hyderabad</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method predicts custom fields from text. Transaction text is normalized from transaction data to generate normalized text. A field prediction and a type prediction are selected using prediction data and the normalized text. The prediction data is generated using a machine learning model trained to identify field predictions from free form text. The field prediction and the type prediction are presented to a client device. In response to user input from the client device, the transaction data is updated with the field prediction.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="89.41mm" wi="158.75mm" file="US20230004834A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="189.40mm" wi="155.28mm" orientation="landscape" file="US20230004834A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="242.99mm" wi="171.79mm" orientation="landscape" file="US20230004834A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="211.33mm" wi="158.50mm" orientation="landscape" file="US20230004834A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="245.03mm" wi="177.55mm" orientation="landscape" file="US20230004834A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="245.03mm" wi="177.55mm" orientation="landscape" file="US20230004834A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="242.91mm" wi="177.46mm" orientation="landscape" file="US20230004834A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="245.11mm" wi="177.88mm" orientation="landscape" file="US20230004834A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="223.94mm" wi="124.29mm" file="US20230004834A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Transaction data includes descriptions of transactions between different entities. The transaction data for a transaction may include fields, custom fields, and free form text. The fields, which may be used by multiple users of the system, store information relevant to the transaction.</p><p id="p-0003" num="0002">Custom fields store specific types of data for a particular user or group of users. Not all users make use of the same custom fields. Free form text may be entered by a user and is unstructured. The user may include information in the free form text that is relevant to a custom field. One challenge is to predict the names for the custom fields from information in the free form text.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0004" num="0003">In general, in one or more aspects, the disclosure relates to a method that predicts custom fields from text. Transaction text is normalized from transaction data to generate normalized text. A field prediction and a type prediction are selected using prediction data and the normalized text. The prediction data is generated using a machine learning model trained to identify field predictions from free form text. The field prediction and the type prediction are presented to a client device. In response to user input from the client device, the transaction data is updated with the field prediction.</p><p id="p-0005" num="0004">In general, in one or more aspects, the disclosure relates to a system that includes at least one server, a machine learning model, and an application, executing on the at least one server. Transaction text is normalized from transaction data to generate normalized text; A field prediction and a type prediction are selected using prediction data and the normalized text. The prediction data is generated using the machine learning model trained to identify field predictions from free form text. The field prediction and the type prediction are presented to a client device. In response to user input from the client device, the transaction data is updated with the field prediction.</p><p id="p-0006" num="0005">In general, in one or more aspects, the disclosure relates to a method that predicts custom fields from text. Transaction text, for transaction data, is received as free form text from a client device responsive to the client device receiving the transaction text from an input field of a form displayed on the client device. The transaction text is normalized to generate normalized text. A field prediction and a type prediction are selected using prediction data and the normalized text. The prediction data is generated using a machine learning model trained to identify field predictions from the free form text. The field prediction and the type prediction are presented to the client device. The field prediction is displayed on the form.</p><p id="p-0007" num="0006">Other aspects of the invention will be apparent from the following description and the appended claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows diagrams of systems in accordance with disclosed embodiments.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> show processes in accordance with disclosed embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, and <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> show examples in accordance with disclosed embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> show computing systems in accordance with disclosed embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0012" num="0011">Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.</p><p id="p-0013" num="0012">In the following detailed description of embodiments of the invention, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid unnecessarily complicating the description.</p><p id="p-0014" num="0013">Throughout the application, ordinal numbers (e.g., first, second, third, etc.) may be used as an adjective for an element (i.e., any noun in the application). The use of ordinal numbers is not to imply or create any particular ordering of the elements nor to limit any element to being only a single element unless expressly disclosed, such as by the use of the terms &#x201c;before&#x201d;, &#x201c;after&#x201d;, &#x201c;single&#x201d;, and other such terminology. Rather, the use of ordinal numbers is to distinguish between the elements. By way of an example, a first element is distinct from a second element, and the first element may encompass more than one element and succeed (or precede) the second element in an ordering of elements.</p><p id="p-0015" num="0014">In general, embodiments of the disclosure predict the names for custom fields from the free form text in transaction data. The system generates field predictions for the names of custom fields that may be added to a transaction. The type of data for the custom field is also predicted with a type prediction.</p><p id="p-0016" num="0015">To generate the predictions, the system analyzes historical transaction data to generate prediction data. The historical transaction data is analyzed by normalizing text from transactions and normalizing the names of custom fields from the transactions. The system identifies the custom fields, and the data types thereof, that are commonly used. The system generates the prediction data for the commonly used custom field names and data types. The system then uses the prediction data to generate predictions from free form text in a transaction. The predictions are presented to the user. The prediction data may be continuously updated (e.g., daily) to provide relevant predictions for custom fields to the users of the system.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>1</b></figref> show a diagram of embodiments that are in accordance with the disclosure. <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows the system (<b>100</b>) that predicts custom fields from text. The embodiments of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be combined and may include or be included within the features and embodiments described in the other figures of the application. The features and elements of <figref idref="DRAWINGS">FIG. <b>1</b></figref> are, individually and as a combination, improvements to machine learning technology and computing systems. The various elements, systems, and components shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be omitted, repeated, combined, and/or altered as shown from <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Accordingly, the scope of the present disclosure should not be considered limited to the specific arrangements shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0018" num="0017">Turning to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the system (<b>100</b>) predicts custom fields from free form text. The system (<b>100</b>) includes the server (<b>121</b>), the client device (<b>111</b>), and the repository (<b>140</b>). While depicted using a client server architecture, embodiments of the system (<b>100</b>) may be implemented on a single computing system.</p><p id="p-0019" num="0018">The client device (<b>111</b>) is a computing systems (further described in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>). Examples of the client device (<b>111</b>) include desktop computers, mobile devices, laptop computers, tablet computers, etc. The client device (<b>111</b>) includes the client application (<b>112</b>).</p><p id="p-0020" num="0019">The client application (<b>112</b>) is a program running on the client device (<b>111</b>). The client application (<b>112</b>) is operated by a user to access the server application (<b>128</b>) to process transactions using online services that may be hosted by the server (<b>121</b>). The client application (<b>112</b>) displays predictions from the server application (<b>128</b>). The client application (<b>112</b>) may be a native application or may be a browser application that sends and receives messages to and from the applications hosted by the server (<b>121</b>).</p><p id="p-0021" num="0020">The server (<b>121</b>) is a computing system (further described in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>). The server (<b>121</b>) may include multiple physical and virtual computing systems that form part of a cloud computing environment. In one embodiment, execution of the programs and applications of server (<b>121</b>) is distributed to multiple physical and virtual computing systems in the cloud computing environment. In one embodiment, the server (<b>121</b>) includes the training application (<b>122</b>) and the server application (<b>128</b>). The training application (<b>122</b>) and the server application (<b>128</b>) may operate on different servers and be controlled by different parties, the same party, or combinations thereof.</p><p id="p-0022" num="0021">The training application (<b>122</b>) is a program operating on the server (<b>121</b>) that generates the prediction data (<b>145</b>) from the transaction data (<b>142</b>). The training application uses the name collator (<b>124</b>), the type predictor (<b>125</b>), the count generator (<b>126</b>), and the selector (<b>127</b>). The training application (<b>122</b>) also uses the text normalizer (<b>123</b>).</p><p id="p-0023" num="0022">The name collator (<b>124</b>) is a program that collates variants of a field name. In one embodiment, the name collator (<b>124</b>) receives a list of names and identifies the names that have the same or similar meaning. For example, with the list &#x201c;sales rep&#x201d;, &#x201c;sales representative&#x201d;, &#x201c;sale rep&#x201d;, &#x201c;sale reps&#x201d;, &#x201c;account number&#x201d;, and &#x201c;acct no&#x201d;, the names &#x201c;sales rep&#x201d;, &#x201c;sales representative&#x201d;, &#x201c;sale rep&#x201d;, and &#x201c;sale reps&#x201d; have the same meaning and the names &#x201c;account number&#x201d; and &#x201c;acct no&#x201d; have the same meaning.</p><p id="p-0024" num="0023">The type predictor (<b>125</b>) is a program that predicts the type (also referred to as a data type) of a custom field in the transaction data (<b>142</b>). In one embodiment, the type predictor determines, using the name of the field, whether the field is a numerical value, a date value, a string value, etc.</p><p id="p-0025" num="0024">The count generator (<b>126</b>) is a program that generate counts of the field names used by custom fields. In one embodiment, the count generator (<b>126</b>) counts the number of times a custom field name appears in the free from text of the transactions for an entity.</p><p id="p-0026" num="0025">The selector (<b>127</b>) is a program that selects a number of predictions for names of custom fields for an entity. In one embodiment, the selector (<b>127</b>) receives a list of possible predictions for custom field names and reduces the size of the list using a threshold (e.g., the five names with usages rates greater than the rest of the names).</p><p id="p-0027" num="0026">The text normalizer (<b>123</b>) is a program that normalizes text. The text normalizer (<b>123</b>) may convert text to lower case, remove stop words and punctuation, trim white space, correct spelling, stem words, etc. The text normalizer (<b>123</b>) may be used by both the training application (<b>122</b>) and the server application (<b>128</b>).</p><p id="p-0028" num="0027">The server application (<b>128</b>) is a program that predicts custom field names from the free form text in transactions. In one embodiment, the server application (<b>128</b>) hosts a website accessed by the client application (<b>112</b>). The server application (<b>128</b>) includes the prediction generator (<b>130</b>).</p><p id="p-0029" num="0028">The prediction generator (<b>130</b>) is a program that predicts the name and type of a custom field based on normalized text from a transaction. In one embodiment, the prediction generator (<b>130</b>) receives normalized text of a transaction. From the normalized text, the prediction generator (<b>130</b>) generates the predicted names and types of one or multiple custom fields for the transaction using the prediction data (<b>146</b>) from the repository (<b>140</b>).</p><p id="p-0030" num="0029">The repository (<b>140</b>) is a computing system that may include multiple computing devices in accordance with the computing system (<b>400</b>) and the nodes (<b>422</b>) and (<b>424</b>) described below in <figref idref="DRAWINGS">FIGS. <b>4</b>A and <b>4</b>B</figref>. The repository (<b>140</b>) may be hosted by a cloud services provider. The cloud services provider may provide hosting, virtualization, and data storage services as well as other cloud services and to operate and control the data, programs, and applications that store and retrieve data from the repository (<b>140</b>). The data in the repository (<b>140</b>) includes the transaction data (<b>142</b>) and the prediction data (<b>145</b>).</p><p id="p-0031" num="0030">The transaction data (<b>142</b>), including the transaction data (<b>143</b>), includes records of transactions performed by users of the system. The transaction data (<b>143</b>) is the data for one transaction that is stored in the repository (<b>140</b>). In one embodiment, the transactions are financial transactions that identify the payor, payee, amount, and date. Each transaction includes several fields that each have a field name. Users of the system may include custom fields and custom field names for the data in the transactions in the transaction data (<b>142</b>). The transaction data (<b>142</b>) includes training transactions, which are historical transactions that may be used to train the system (<b>100</b>). The transaction data (<b>142</b>) may include transactions from multiple entities that use different customized field names for the same data (e.g., &#x201c;sales rep&#x201d;, &#x201c;sales representative&#x201d;, &#x201c;sale rep&#x201d;, and &#x201c;sale reps&#x201d;, may all have the same meaning). Each transaction in the transaction data (<b>142</b>) includes free form text that may be input by a user and recorded to the system (<b>100</b>). The free form text may include data for a custom field.</p><p id="p-0032" num="0031">The prediction data (<b>145</b>), including the prediction data (<b>146</b>), includes the data used to generate predictions of the names and data types of custom fields for transactions. In one embodiment, the prediction data (<b>146</b>) is the data for one company and is stored in the repository (<b>140</b>). In one embodiment, the prediction data (<b>145</b>) includes a machine learning model. In one embodiment, the prediction data (<b>145</b>) may include an object file. The object file may be encoded in accordance with the JavaScript object notation standard.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref> show data flows and diagrams of processes in accordance with the disclosure. <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> shows a process and data flow for training a machine learning model to make field predictions. <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> shows a process and data flow for using the field predictions to add custom fields to transaction data. The embodiments of <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref> may be combined and may include or be included within the features and embodiments described in the other figures of the application. The features of <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref> are, individually and as an ordered combination, improvements to machine learning technology and computing systems. While the various steps in the flowcharts are presented and described sequentially, one of ordinary skill will appreciate that at least some of the steps may be executed in different orders, may be combined or omitted, and at least some of the steps may be executed in parallel. Furthermore, the steps may be performed actively or passively. For example, some steps may be performed using polling or be interrupt driven. By way of an example, determination steps may not have a processor process an instruction unless an interrupt is received to signify that condition exists. As another example, determinations may be performed by performing a test, such as checking a data value to test whether the value is consistent with the tested condition.</p><p id="p-0034" num="0033">Turning to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the training application (<b>212</b>) generates the prediction data (<b>245</b>) from the transaction data (<b>214</b>). The training application (<b>212</b>) receives the transaction data (<b>214</b>) and extracts the transaction text (<b>217</b>) from the transaction data (<b>214</b>). The transaction text (<b>218</b>) is extracted from the transaction data (<b>215</b>). During training the transaction text (<b>217</b>) may be referred to as training transaction text.</p><p id="p-0035" num="0034">The transaction text (<b>218</b>) may include text from multiple fields that is combined (e.g., concatenated). The text may be extracted from a &#x201c;memo&#x201d; field, which is a free form field of text into which a user of the system may input a description of the transaction. The transaction text (<b>218</b>) may also include text from a line item description. The transaction data (<b>215</b>) may include multiple line items that identify a product and each line item may include description text, an item identifier, and an amount. When the item identifier and an amount are null (i.e., a null item identifier and a null amount), the description text from the line item may be extracted from the transaction data (<b>215</b>) and included with the text from the &#x201c;memo&#x201d; field as the transaction text (<b>218</b>). In one embodiment, the description text and text from the memo field may be processed as separate transaction text items in the transaction text (<b>217</b>).</p><p id="p-0036" num="0035">At Step <b>202</b>, transaction text is normalized. The text normalizer (<b>220</b>) receives the transaction text (<b>218</b>) and generates the normalized text (<b>223</b>). The process is repeated for the transaction text (<b>217</b>) to generate the normalized text (<b>222</b>). The text normalizer (<b>220</b>) may apply multiple algorithms to the transaction text (<b>218</b>), including converting the text to lower case, removing stop words and punctuation (e.g., &#x201c;is&#x201d;, &#x201c;and&#x201d;, &#x201c;are&#x201d;, &#x201c;etc.&#x201d;, etc.), trimming white space (e.g., convert contiguous whitespace to a single space), spell correction, and normalization, and stemming. The normalization replaces known abbreviations and short hand with full words (e.g., &#x201c;po #&#x201d; replaced with &#x201c;purchase order number&#x201d;). Stemming replaces different versions of the same word with a single word or token. A token may be an integer that uniquely identifies a word in a vocabulary of words.</p><p id="p-0037" num="0036">The field names (<b>225</b>) (also referred to as training field names during training) are extracted from the transaction data (<b>214</b>). The training field names include the names of custom fields from the transaction data (<b>214</b>). The field name (<b>226</b>) is one of the field names extracted from the transaction data (<b>215</b>).</p><p id="p-0038" num="0037">At Step <b>204</b>, training field names are normalized. The text normalizer (<b>220</b>) receives the field name (<b>226</b>) and generates the normalized name (<b>229</b>). The process is repeated for the field names (<b>225</b>) to generate the normalized names (<b>228</b>). The text normalizer (<b>220</b>) is again used to apply the same multiple algorithms to the training field names extracted from the transaction data (<b>214</b>).</p><p id="p-0039" num="0038">At Step <b>206</b>, type predictions are identified. The type predictions are identified by the type predictor (<b>236</b>) after generating the normalized names (<b>229</b>). In one embodiment, the type predictor (<b>236</b>) identifies the number of times a particular data type (string, floating point value, integer value, etc.) is used for a custom field from the transaction data (<b>214</b>).</p><p id="p-0040" num="0039">For each custom field, the number of times the field is used to store numerical values (referred to as the number of numeric values) and the number of times the field used to store any value (referred to as the total number of values) are computed. A ratio for the numerical values is computed by dividing the number of numeric values by the total number of values. If the ratio exceeds a predefined threshold value, then the type prediction is a numeric type and otherwise the type prediction is a text type.</p><p id="p-0041" num="0040">At Step <b>208</b> normalized field names are collated. The name collator (<b>231</b>) receives the normalized names (<b>228</b>) and generates the collated names (<b>233</b>). A name for a custom field may have several variants that use different spellings or abbreviations for the same words. The name collator (<b>231</b>) collates the different variants of the same name. For example, &#x201c;po #&#x201d;, &#x201c;po number&#x201d;, and &#x201c;purchase order #&#x201d; are different variants for the same field &#x201c;purchase order number&#x201d;. The different variants have the same normalized name, which may be used as the value of the collected name for the collection of variants. Collation of the normalized names (<b>228</b>) may be performed for each combination company, industry, and country identifiers for the companies using the system. The collated names (<b>233</b>) are matched to the type predictions (<b>238</b>). For example, the collated name (<b>234</b>) is matched to the type prediction (<b>239</b>).</p><p id="p-0042" num="0041">The count generator (<b>241</b>) counts the number of occurrences that collated names (<b>233</b>) appear in the normalized text (<b>222</b>). In one embodiment, the count generator (<b>241</b>) creates a sparse matrix with company identifiers for the rows, the collated names (<b>233</b>) as the columns, and the number of occurrences of a collated name in the transaction data (<b>214</b>) in the cells of the table. The sparse matrix may be converted to a coordinate format matrix with rows for the company identifiers, a column that identifies a collated name, and a column that identifies the count for the collated name.</p><p id="p-0043" num="0042">At Step <b>210</b> field predictions and type predictions are selected. The selector (<b>243</b>) generates the prediction data (<b>245</b>) from the collated names (<b>233</b>), the normalized text (<b>223</b>), and the type predictions (<b>238</b>). In one embodiment, the selector (<b>243</b>) receives a coordinate format matrix from the count generator (<b>241</b>), which processed the collated names (<b>233</b>) and the normalized text (<b>223</b>). The coordinate format matrix may be sorted by the selector to order the rows of the coordinate format matrix from most counted collated names to least counted collated names. A threshold number of the most counted collated names (e.g., the top 10 collated names) may form the prediction data (<b>246</b>) with the type predictions (<b>238</b>) for the collated names identified in the coordinate format matrix. The prediction data (<b>246</b>) may be structured as a list with each element of the list including a collated name, a list of variants, and a type prediction. The list of the prediction data (<b>246</b>) has as many elements as the threshold number of rows selected from the coordinate format matrix.</p><p id="p-0044" num="0043">Turning to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, the server application (<b>262</b>) generates and transmits the field predictions (<b>277</b>) from the transaction data (<b>264</b>). The transaction data (<b>264</b>) is a subset of the transaction data (<b>263</b>) and is for a transaction that the user of the client device (<b>282</b>) is inputting or adjusting using the client application (<b>284</b>). In one embodiment, the transaction data (<b>264</b>) is input to the client device (<b>282</b>) and then received from the client device (<b>282</b>) and stored to the repository (<b>287</b>). In one embodiment, the transaction data (<b>264</b>) is retrieved from the repository (<b>287</b>) and presented to the client device (<b>282</b>) for adjustment by the user.</p><p id="p-0045" num="0044">The transaction text (<b>266</b>) is extracted from the transaction data (<b>264</b>). The transaction text (<b>266</b>) may be extracted from multiple free form text fields from the transaction data (<b>264</b>) and combined (e.g., appended). In one embodiment, the transaction text (<b>266</b>) is extracted from a line item description and a memo text field with text from the line item description appended to text from the memo text field.</p><p id="p-0046" num="0045">At Step <b>252</b>, the transaction text (<b>266</b>), from the transaction data (<b>264</b>), is normalized to generate the normalized text (<b>270</b>). In one embodiment the transaction text (<b>266</b>) is normalized by the text normalizer (<b>268</b>). The text normalizer (<b>268</b>) may convert text to lower case, remove stop words and punctuation, trim white space, correct spelling, stem words, etc. The text normalizer (<b>268</b>) may be the same as the text normalizer (<b>220</b>) (of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) used by the training application (<b>212</b>) (of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>).</p><p id="p-0047" num="0046">At Step <b>254</b>, the field predictions (<b>276</b>) are generated from the normalized text (<b>270</b>). The prediction generator (<b>272</b>) uses the prediction data (<b>274</b>) with the normalized text (<b>270</b>) to generate the field predictions (<b>276</b>) with the corresponding type predictions (<b>279</b>). In one embodiment, the prediction data (<b>274</b>) is retrieved from the prediction data (<b>273</b>) of the repository (<b>287</b>). The retrieval selects the prediction data (<b>274</b>) from the prediction data (<b>273</b>) using a company identifier, an industry identifier, and a country identifier that corresponds to the company identifier, industry identifier, and country identifier for the organization of the user of the client device (<b>282</b>). The prediction data (<b>274</b>) includes a list of collated names (with variants). The prediction generator (<b>272</b>) matches the words and phrases in the normalized text (<b>270</b>) to the collated names and variants of the prediction data (<b>274</b>) to identify the field predictions (<b>276</b>). In one embodiment, when multiple words or phrases from the normalized text (<b>270</b>) match to a collated name, the prediction generator (<b>272</b>) may match the word or phrase having the longest string length or the most words to the collated name. The type predictions (<b>279</b>) are linked to the field predictions (<b>276</b>) as previously determined by the training application (<b>212</b>) (of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>).</p><p id="p-0048" num="0047">At Step <b>256</b>, the field predictions (<b>277</b>) and the type predictions (<b>280</b>) are presented to the client device (<b>282</b>). Each of the field predictions (<b>276</b>) and corresponding type predictions (<b>279</b>) may be transmitted to the client device (<b>282</b>) and displayed. The client application (<b>284</b>) may display each of the field predictions (<b>276</b>) and receive a selection of the field prediction (<b>277</b>). In response to selecting the field prediction (<b>277</b>), the client application (<b>284</b>) may display a window that is prepopulated with the field prediction (<b>277</b>) and the type prediction (<b>280</b>). The user may then select to add a custom field to the transaction data (<b>264</b>). The custom field added may use the name from the field prediction (<b>277</b>) and the type from the type prediction (<b>280</b>).</p><p id="p-0049" num="0048">At Step <b>258</b>, the transaction data (<b>264</b>) is updated. The server application (<b>262</b>) may receive the update (from the client device (<b>282</b>)), which includes the name and type for a custom field to add to the transaction data (<b>264</b>). The server application (<b>262</b>) may store the update to the transaction data (<b>264</b>) to the repository (<b>287</b>).</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIGS. <b>3</b>A, <b>3</b>B, <b>3</b>C, and <b>3</b>D</figref> show examples of systems and interfaces that add custom fields to transaction data using field predictions. The embodiments shown in <figref idref="DRAWINGS">FIGS. <b>3</b>A, <b>3</b>B, <b>3</b>C, and <b>3</b>D</figref> may be combined and may include or be included within the features and embodiments described in the other figures of the application. The features and elements of <figref idref="DRAWINGS">FIGS. <b>3</b>A, <b>3</b>B, <b>3</b>C, and <b>3</b>D</figref> are, individually and as a combination, improvements to machine learning technology and computing systems. The various features, elements, widgets, components, and interfaces shown in <figref idref="DRAWINGS">FIGS. <b>3</b>A, <b>3</b>B, <b>3</b>C, and <b>3</b>D</figref> may be omitted, repeated, combined, and/or altered as shown. Accordingly, the scope of the present disclosure should not be considered limited to the specific arrangements shown in <figref idref="DRAWINGS">FIGS. <b>3</b>A, <b>3</b>B, <b>3</b>C, and <b>3</b>D</figref>.</p><p id="p-0051" num="0050">Turning to <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the user interface (<b>300</b>) is a graphical user interface that presents and collects data for a transaction (e.g., &#x201c;Invoice #<b>1002</b>&#x201d;), including free form text. The user interface (<b>300</b>) includes several interactive user interface elements that display data about a transaction. The user interface (<b>300</b>) includes the line item (<b>302</b>), the line item (<b>304</b>), and the message field (<b>306</b>).</p><p id="p-0052" num="0051">The first line item (<b>302</b>) includes transaction data for the transaction. The transaction is the purchase of <b>10</b> pens for a total amount of $10.00.</p><p id="p-0053" num="0052">The second line item (<b>304</b>) is a second line item for the transaction. The second line item (<b>304</b>) is blank.</p><p id="p-0054" num="0053">The message field (<b>306</b>) is a text field that includes free form text. The text from the message field (<b>306</b>) is extracted and processed by the system to identify field predictions and types based on the words and phrases in the text of the message field (<b>306</b>) for the transaction.</p><p id="p-0055" num="0054">If the description for the second line item (<b>304</b>) included text in the description field, then the text from the description field for the line item (<b>304</b>) may be extracted and combined with the text from the message field (<b>306</b>) to identify field predictions for the free form text for the transaction shown with the user interface (<b>300</b>). Since the other fields (outside of the description field) of the line item (<b>302</b>) include data, the text from the description field from the line item (<b>302</b>) is not extracted and not processed to identify field predictions.</p><p id="p-0056" num="0055">Turning to <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the user interface (<b>320</b>) is updated from the user interface (<b>300</b>) in response to the free form text being entered into the message field (<b>306</b>). The user interface (<b>320</b>) is updated to include the recommendation field (<b>322</b>).</p><p id="p-0057" num="0056">The recommendation field (<b>322</b>) includes links with text that identifies the field predictions generated from the text from the message field (<b>306</b>). The field prediction &#x201c;P.O. Number&#x201d; is from the free form text &#x201c;PO Num&#x201d; and the field prediction &#x201c;Sales Rep&#x201d; is from the free form text &#x201c;Sales Rep&#x201d;. The field predictions are generated with prediction data trained for the company, industry, and country of the organization of the user operating the client device executing the user interface (<b>320</b>).</p><p id="p-0058" num="0057">Turning to <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the user interface (<b>340</b>) is updated from the user interface (<b>320</b>) in response to selection of the &#x201c;P.O. Number&#x201d; link from the recommendation field (<b>322</b>). The user interface (<b>340</b>) is updated to include the window (<b>342</b>).</p><p id="p-0059" num="0058">The window (<b>342</b>) is a form used to enter a custom field for the transaction displayed in the user interface (<b>340</b>). The window (<b>342</b>) is prepopulated with the name &#x201c;P.O. Number&#x201d; from the field prediction and with the data type &#x201c;Text and number&#x201d; from the type prediction linked to the field prediction.</p><p id="p-0060" num="0059">Additional properties for the custom field may be set using additional elements of the window (<b>342</b>). The category of transactions to which the custom field from the field prediction should be applied (e.g., one of &#x201c;customer&#x201d;, &#x201c;transaction&#x201d;, or &#x201c;vendor&#x201d;). Also, the forms that may include the custom field may be selected (e.g., one or more of &#x201c;sales receipt&#x201d;, &#x201c;invoice&#x201d;, &#x201c;estimate&#x201d;, etc.).</p><p id="p-0061" num="0060">Turning to <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, the user interface (<b>360</b>) is updated from the user interface (<b>340</b>) in response to saving the custom field in the window (<b>342</b>) (of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>). The user interface (<b>360</b>) is updated to include the field (<b>362</b>) for the &#x201c;P.O. Number&#x201d; (purchase order number), which is included in the transaction data for the transaction but will not be printed when the invoice (&#x201c;#<b>1002</b>&#x201d;) is printed.</p><p id="p-0062" num="0061">Embodiments of the invention may be implemented on a computing system. Any combination of a mobile, a desktop, a server, a router, a switch, an embedded device, or other types of hardware may be used. For example, as shown in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the computing system (<b>400</b>) may include one or more computer processor(s) (<b>402</b>), non-persistent storage (<b>404</b>) (e.g., volatile memory, such as a random access memory (RAM), cache memory), persistent storage (<b>406</b>) (e.g., a hard disk, an optical drive such as a compact disk (CD) drive or a digital versatile disk (DVD) drive, a flash memory, etc.), a communication interface (<b>412</b>) (e.g., Bluetooth interface, infrared interface, network interface, optical interface, etc.), and numerous other elements and functionalities.</p><p id="p-0063" num="0062">The computer processor(s) (<b>402</b>) may be an integrated circuit for processing instructions. For example, the computer processor(s) (<b>402</b>) may be one or more cores or micro-cores of a processor. The computing system (<b>400</b>) may also include one or more input device(s) (<b>410</b>), such as a touchscreen, a keyboard, a mouse, a microphone, a touchpad, an electronic pen, or any other type of input device.</p><p id="p-0064" num="0063">The communication interface (<b>412</b>) may include an integrated circuit for connecting the computing system (<b>400</b>) to a network (not shown) (e.g., a local area network (LAN), a wide area network (WAN) such as the Internet, a mobile network, or any other type of network) and/or to another device, such as another computing device.</p><p id="p-0065" num="0064">Further, the computing system (<b>400</b>) may include one or more output device(s) (<b>408</b>), such as a screen (e.g., a liquid crystal display (LCD), a plasma display, a touchscreen, a cathode ray tube (CRT) monitor, a projector, or other display device), a printer, an external storage, or any other output device. One or more of the output device(s) (<b>408</b>) may be the same or different from the input device(s) (<b>410</b>). The input and output device(s) (<b>410</b> and (<b>408</b>)) may be locally or remotely connected to the computer processor(s) (<b>402</b>), non-persistent storage (<b>404</b>), and persistent storage (<b>406</b>). Many different types of computing systems exist, and the aforementioned input and output device(s) (<b>410</b> and (<b>408</b>)) may take other forms.</p><p id="p-0066" num="0065">Software instructions in the form of computer readable program code to perform embodiments of the invention may be stored, in whole or in part, temporarily or permanently, on a non-transitory computer readable medium such as a CD, a DVD, a storage device, a diskette, a tape, flash memory, physical memory, or any other computer readable storage medium. Specifically, the software instructions may correspond to computer readable program code that, when executed by a processor(s), is configured to perform one or more embodiments of the invention.</p><p id="p-0067" num="0066">The computing system (<b>400</b>) in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may be connected to or be a part of a network. For example, as shown in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the network (<b>420</b>) may include multiple nodes (e.g., node X (<b>422</b>), node Y (<b>424</b>)). Each node may correspond to a computing system, such as the computing system (<b>400</b>) shown in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, or a group of nodes combined may correspond to the computing system (<b>400</b>) shown in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. By way of an example, embodiments of the invention may be implemented on a node of a distributed system that is connected to other nodes. By way of another example, embodiments of the invention may be implemented on a distributed computing system having multiple nodes, where each portion of the invention may be located on a different node within the distributed computing system. Further, one or more elements of the aforementioned computing system (<b>400</b>) may be located at a remote location and connected to the other elements over a network.</p><p id="p-0068" num="0067">Although not shown in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the node may correspond to a blade in a server chassis that is connected to other nodes via a backplane. By way of another example, the node may correspond to a server in a data center. By way of another example, the node may correspond to a computer processor or micro-core of a computer processor with shared memory and/or resources.</p><p id="p-0069" num="0068">The nodes (e.g., node X (<b>422</b>), node Y (<b>424</b>)) in the network (<b>420</b>) may be configured to provide services for a client device (<b>426</b>). For example, the nodes may be part of a cloud computing system. The nodes may include functionality to receive requests from the client device (<b>426</b>) and transmit responses to the client device (<b>426</b>). The client device (<b>426</b>) may be a computing system, such as the computing system (<b>400</b>) shown in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. Further, the client device (<b>426</b>) may include and/or perform all or a portion of one or more embodiments of the invention.</p><p id="p-0070" num="0069">The computing system (<b>400</b>) or group of computing systems described in <figref idref="DRAWINGS">FIGS. <b>4</b>A and <b>4</b>B</figref> may include functionality to perform a variety of operations disclosed herein. For example, the computing system(s) may perform communication between processes on the same or different system. A variety of mechanisms, employing some form of active or passive communication, may facilitate the exchange of data between processes on the same device. Examples representative of these inter-process communications include, but are not limited to, the implementation of a file, a signal, a socket, a message queue, a pipeline, a semaphore, shared memory, message passing, and a memory-mapped file. Further details pertaining to a couple of these non-limiting examples are provided below.</p><p id="p-0071" num="0070">Based on the client-server networking model, sockets may serve as interfaces or communication channel end-points enabling bidirectional data transfer between processes on the same device. Foremost, following the client-server networking model, a server process (e.g., a process that provides data) may create a first socket object. Next, the server process binds the first socket object, thereby associating the first socket object with a unique name and/or address. After creating and binding the first socket object, the server process then waits and listens for incoming connection requests from one or more client processes (e.g., processes that seek data). At this point, when a client process wishes to obtain data from a server process, the client process starts by creating a second socket object. The client process then proceeds to generate a connection request that includes at least the second socket object and the unique name and/or address associated with the first socket object. The client process then transmits the connection request to the server process. Depending on availability, the server process may accept the connection request, establishing a communication channel with the client process, or the server process, busy in handling other operations, may queue the connection request in a buffer until server process is ready. An established connection informs the client process that communications may commence. In response, the client process may generate a data request specifying the data that the client process wishes to obtain. The data request is subsequently transmitted to the server process. Upon receiving the data request, the server process analyzes the request and gathers the requested data. Finally, the server process then generates a reply including at least the requested data and transmits the reply to the client process. The data may be transferred, more commonly, as datagrams or a stream of characters (e.g., bytes).</p><p id="p-0072" num="0071">Shared memory refers to the allocation of virtual memory space in order to substantiate a mechanism for which data may be communicated and/or accessed by multiple processes. In implementing shared memory, an initializing process first creates a shareable segment in persistent or non-persistent storage. Post creation, the initializing process then mounts the shareable segment, subsequently mapping the shareable segment into the address space associated with the initializing process. Following the mounting, the initializing process proceeds to identify and grant access permission to one or more authorized processes that may also write and read data to and from the shareable segment. Changes made to the data in the shareable segment by one process may immediately affect other processes, which are also linked to the shareable segment. Further, when one of the authorized processes accesses the shareable segment, the shareable segment maps to the address space of that authorized process. Often, only one authorized process may mount the shareable segment, other than the initializing process, at any given time.</p><p id="p-0073" num="0072">Other techniques may be used to share data, such as the various data described in the present application, between processes without departing from the scope of the invention. The processes may be part of the same or different application and may execute on the same or different computing system.</p><p id="p-0074" num="0073">Rather than or in addition to sharing data between processes, the computing system performing one or more embodiments of the invention may include functionality to receive data from a user. For example, in one or more embodiments, a user may submit data via a graphical user interface (GUI) on the user device. Data may be submitted via the graphical user interface by a user selecting one or more graphical user interface widgets or inserting text and other data into graphical user interface widgets using a touchpad, a keyboard, a mouse, or any other input device. In response to selecting a particular item, information regarding the particular item may be obtained from persistent or non-persistent storage by the computer processor. Upon selection of the item by the user, the contents of the obtained data regarding the particular item may be displayed on the user device in response to the user's selection.</p><p id="p-0075" num="0074">By way of another example, a request to obtain data regarding the particular item may be sent to a server operatively connected to the user device through a network. For example, the user may select a uniform resource locator (URL) link within a web client of the user device, thereby initiating a Hypertext Transfer Protocol (HTTP) or other protocol request being sent to the network host associated with the URL. In response to the request, the server may extract the data regarding the particular selected item and send the data to the device that initiated the request. Once the user device has received the data regarding the particular item, the contents of the received data regarding the particular item may be displayed on the user device in response to the user's selection. Further to the above example, the data received from the server after selecting the URL link may provide a web page in Hyper Text Markup Language (HTML) that may be rendered by the web client and displayed on the user device.</p><p id="p-0076" num="0075">Once data is obtained, such as by using techniques described above or from storage, the computing system, in performing one or more embodiments of the invention, may extract one or more data items from the obtained data. For example, the extraction may be performed as follows by the computing system (<b>400</b>) in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. First, the organizing pattern (e.g., grammar, schema, layout) of the data is determined, which may be based on one or more of the following: position (e.g., bit or column position, Nth token in a data stream, etc.), attribute (where the attribute is associated with one or more values), or a hierarchical/tree structure (consisting of layers of nodes at different levels of detail-such as in nested packet headers or nested document sections). Then, the raw, unprocessed stream of data symbols is parsed, in the context of the organizing pattern, into a stream (or layered structure) of tokens (where each token may have an associated token &#x201c;type&#x201d;).</p><p id="p-0077" num="0076">Next, extraction criteria are used to extract one or more data items from the token stream or structure, where the extraction criteria are processed according to the organizing pattern to extract one or more tokens (or nodes from a layered structure). For position-based data, the token(s) at the position(s) identified by the extraction criteria are extracted. For attribute/value-based data, the token(s) and/or node(s) associated with the attribute(s) satisfying the extraction criteria are extracted. For hierarchical/layered data, the token(s) associated with the node(s) matching the extraction criteria are extracted. The extraction criteria may be as simple as an identifier string or may be a query presented to a structured data repository (where the data repository may be organized according to a database schema or data format, such as XML).</p><p id="p-0078" num="0077">The extracted data may be used for further processing by the computing system. For example, the computing system (<b>400</b>) of <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, while performing one or more embodiments of the invention, may perform data comparison. Data comparison may be used to compare two or more data values (e.g., A, B). For example, one or more embodiments may determine whether A&#x3e;B, A=B, A !=B, A&#x3c;B, etc. The comparison may be performed by submitting A, B, and an opcode specifying an operation related to the comparison into an arithmetic logic unit (ALU) (i.e., circuitry that performs arithmetic and/or bitwise logical operations on the two data values). The ALU outputs the numerical result of the operation and/or one or more status flags related to the numerical result. For example, the status flags may indicate whether the numerical result is a positive number, a negative number, zero, etc. By selecting the proper opcode and then reading the numerical results and/or status flags, the comparison may be executed. For example, in order to determine if A&#x3e;B, B may be subtracted from A (i.e., A&#x2212;B), and the status flags may be read to determine if the result is positive (i.e., if A&#x3e;B, then A&#x2212;B&#x3e;0). In one or more embodiments, B may be considered a threshold, and A is deemed to satisfy the threshold if A=B or if A&#x3e;B, as determined using the ALU. In one or more embodiments of the invention, A and B may be vectors, and comparing A with B requires comparing the first element of vector A with the first element of vector B, the second element of vector A with the second element of vector B, etc. In one or more embodiments, if A and B are strings, the binary values of the strings may be compared.</p><p id="p-0079" num="0078">The computing system (<b>400</b>) in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may implement and/or be connected to a data repository. For example, one type of data repository is a database. A database is a collection of information configured for ease of data retrieval, modification, re-organization, and deletion. A Database Management System (DBMS) is a software application that provides an interface for users to define, create, query, update, or administer databases.</p><p id="p-0080" num="0079">The user, or software application, may submit a statement or query into the DBMS. Then the DBMS interprets the statement. The statement may be a select statement to request information, update statement, create statement, delete statement, etc. Moreover, the statement may include parameters that specify data, or data container (database, table, record, column, view, etc.), identifier(s), conditions (comparison operators), functions (e.g., join, full join, count, average, etc.), sort (e.g., ascending, descending), or others. The DBMS may execute the statement. For example, the DBMS may access a memory buffer, a reference or index a file for read, write, deletion, or any combination thereof, for responding to the statement. The DBMS may load the data from persistent or non-persistent storage and perform computations to respond to the query. The DBMS may return the result(s) to the user or software application.</p><p id="p-0081" num="0080">The computing system (<b>400</b>) of <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may include functionality to present raw and/or processed data, such as results of comparisons and other processing. For example, presenting data may be accomplished through various presenting methods. Specifically, data may be presented through a user interface provided by a computing device. The user interface may include a GUI that displays information on a display device, such as a computer monitor or a touchscreen on a handheld computer device. The GUI may include various GUI widgets that organize what data is shown as well as how data is presented to a user. Furthermore, the GUI may present data directly to the user, e.g., data presented as actual data values through text, or rendered by the computing device into a visual representation of the data, such as through visualizing a data model.</p><p id="p-0082" num="0081">For example, a GUI may first obtain a notification from a software application requesting that a particular data object be presented within the GUI. Next, the GUI may determine a data object type associated with the particular data object, e.g., by obtaining data from a data attribute within the data object that identifies the data object type. Then, the GUI may determine any rules designated for displaying that data object type, e.g., rules specified by a software framework for a data object class or according to any local parameters defined by the GUI for presenting that data object type. Finally, the GUI may obtain data values from the particular data object and render a visual representation of the data values within a display device according to the designated rules for that data object type.</p><p id="p-0083" num="0082">Data may also be presented through various audio methods. In particular, data may be rendered into an audio format and presented as sound through one or more speakers operably connected to a computing device.</p><p id="p-0084" num="0083">Data may also be presented to a user through haptic methods. For example, haptic methods may include vibrations or other physical signals generated by the computing system. For example, data may be presented to a user using a vibration generated by a handheld computer device with a predefined duration and intensity of the vibration to communicate the data.</p><p id="p-0085" num="0084">The above description of functions presents only a few examples of functions performed by the computing system (<b>400</b>) of <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> and the nodes (e.g., node X (<b>422</b>), node Y (<b>424</b>)) and/or client device (<b>426</b>) in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>. Other functions may be performed using one or more embodiments of the invention.</p><p id="p-0086" num="0085">While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>normalizing transaction text from transaction data to generate normalized text;</claim-text><claim-text>selecting a field prediction and a type prediction using prediction data and the normalized text,<claim-text>wherein the prediction data is generated using a machine learning model trained to identify field predictions from free form text, and</claim-text><claim-text>wherein the machine learning model is trained by:<claim-text>collating normalized field names to generate collated field names by counting occurrences of training normalized text with the normalized field names in training transaction data;</claim-text></claim-text></claim-text><claim-text>presenting the field prediction and the type prediction to a client device; and</claim-text><claim-text>updating, in response to user input from the client device, the transaction data with the field prediction.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>training the machine learning model by:<claim-text>normalizing training transaction text from the training transaction data to generate the training normalized text;</claim-text><claim-text>normalizing custom field names from the training transaction data to generate the normalized field names;</claim-text><claim-text>identifying training type predictions for the normalized field names; and</claim-text><claim-text>selecting a threshold number of field predictions using the collated field names and the training type predictions to generate prediction data.</claim-text></claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>collating the normalized field names using industry identifiers, country identifiers, and company identifiers.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>selecting a threshold number of field predictions on a daily basis.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>updating the training transaction data to include the transaction data updated in response to the user input.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>extracting the transaction text from a line item description, linked to at least one of a null item identifier and a null amount, of a transaction in the transaction data.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>extracting the transaction text from a message in a header of a transaction in the transaction data.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>collating the normalized field names by identifying a plurality of variants for a normalized field name of the normalized field name.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>selecting a threshold number of field predictions to include a plurality of variants for a normalized field name of the normalized field name.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>presenting the field prediction and the type prediction in a window in response to selection of a link.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system comprising:<claim-text>at least one server comprising at least one processor;</claim-text><claim-text>a machine learning model; and</claim-text><claim-text>an application, executing instructions on the at least one server and the at least one processor, the instructions configured for:<claim-text>normalizing transaction text from transaction data to generate normalized text;</claim-text><claim-text>selecting a field prediction and a type prediction using prediction data and the normalized text,<claim-text>wherein the prediction data is generated using the machine learning model trained to identify field predictions from free form text, and</claim-text><claim-text>collating normalized field names to generate collated field names by counting occurrences of training normalized text with the normalized field names in training transaction data;</claim-text></claim-text><claim-text>presenting the field prediction and the type prediction to a client device; and</claim-text><claim-text>updating, in response to user input from the client device, the transaction data with the field prediction.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The server of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the application is further configured for:<claim-text>receiving the transaction text as free form text from a client device responsive to the client device receiving the transaction text as user input.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The server of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the application is further configured for:<claim-text>presenting the field prediction in a link displayed with the transaction data.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The server of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the application is further configured for:<claim-text>presenting a window prepopulated with the field prediction and the type prediction in response to selection of a link for the field prediction.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The server of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the application is further configured for:<claim-text>adding, to the transaction data, a custom field corresponding to the field prediction in response to selection of a save button in a window prepopulated with the field prediction.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The server of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the application further comprises:<claim-text>a training application, executing on the at least one server, configured for:<claim-text>training the machine learning model by:<claim-text>normalizing training transaction text from the training transaction data to generate the training normalized text;</claim-text><claim-text>normalizing custom field names from the training transaction data to generate the normalized field names;</claim-text><claim-text>identifying training type predictions for the normalized field names; and</claim-text><claim-text>selecting a threshold number of field predictions using the collated field names and the training type predictions to generate prediction data.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The server of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the application is further configured for:<claim-text>collating the normalized field names using industry identifiers, country identifiers, and company identifiers.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The server of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the application is further configured for:<claim-text>selecting a threshold number of field predictions on a daily basis.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A method comprising:<claim-text>receiving transaction text, for transaction data, as free form text from a client device responsive to the client device receiving the transaction text from an input field of a form displayed on the client device;</claim-text><claim-text>normalizing the transaction text to generate normalized text;</claim-text><claim-text>selecting a field prediction and a type prediction using prediction data and the normalized text,<claim-text>wherein the prediction data is generated using a machine learning model trained to identify field predictions from the free form text, and</claim-text><claim-text>wherein the machine learning model is trained by:<claim-text>collating the normalized field names to generate collated field names by counting occurrences of training normalized text with the normalized field names in training transaction data; and</claim-text></claim-text></claim-text><claim-text>presenting the field prediction and the type prediction to the client device, wherein the field prediction is displayed on the form.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, further comprising:<claim-text>training the machine learning model by:<claim-text>normalizing training transaction text from the training transaction data to generate the training normalized text;</claim-text><claim-text>normalizing custom field names from the training transaction data to generate the normalized field names;</claim-text><claim-text>identifying training type predictions for the normalized field names; and</claim-text><claim-text>selecting a threshold number of field predictions using the collated field names and the training type predictions to generate prediction data.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>