<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004456A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004456</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17931021</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>07</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>34</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0727</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0619</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0659</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0683</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0751</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>0793</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3034</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3409</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Addressing Storage Device Performance</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17160359</doc-number><date>20210127</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11449375</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17931021</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16263229</doc-number><date>20190131</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10963326</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17160359</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15338498</doc-number><date>20161031</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10235229</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16263229</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62384493</doc-number><date>20160907</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>PURE STORAGE, INC.</orgname><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>BERNAT</last-name><first-name>ANDREW</first-name><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>CIHLA</last-name><first-name>JAMES</first-name><address><city>SAN JOSE</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>KIM</last-name><first-name>JUNGKEUN</first-name><address><city>PALO ALTO</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>MCLEARY</last-name><first-name>IRIS</first-name><address><city>SAN FRANCISCO</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>YURZOLA</last-name><first-name>DAMIAN</first-name><address><city>SAN JOSE</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Improving storage device performance including initiating, on a storage device, execution of a rehabilitative action from a set of rehabilitative actions that can be performed on the storage device; determining that the storage device is operating outside of a defined range of expected operating parameters after the rehabilitative action has been executed; and initiating execution of a higher level rehabilitative action responsive to determining that the higher level rehabilitative action exists.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="161.12mm" wi="158.75mm" file="US20230004456A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="230.46mm" wi="165.44mm" file="US20230004456A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="220.81mm" wi="160.02mm" file="US20230004456A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="222.42mm" wi="146.98mm" file="US20230004456A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="243.76mm" wi="168.99mm" file="US20230004456A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="243.76mm" wi="168.99mm" file="US20230004456A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="243.76mm" wi="168.99mm" file="US20230004456A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="243.76mm" wi="168.99mm" file="US20230004456A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="243.76mm" wi="168.99mm" file="US20230004456A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="243.76mm" wi="168.99mm" file="US20230004456A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="234.27mm" wi="167.47mm" file="US20230004456A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a continuation application for patent entitled to a filing date and claiming the benefit of earlier-filed U.S. Pat. No. 11,449,375, issued Sep. 20, 2022, herein incorporated by reference in its entirety, which is a continuation of U.S. Pat. No. 10,963,326, issued Mar. 30, 2021, which is a continuation of U.S. Pat. No. 10,235,229, issued Mar. 19, 2019, which claims priority from U.S. Provisional Application No. 62/384,493, filed Sep. 7, 2016.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0003" num="0002"><figref idref="DRAWINGS">FIG. <b>1</b></figref> sets forth a block diagram of a storage system configured for rehabilitating storage devices according to embodiments of the present disclosure.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>2</b></figref> sets forth a block diagram of a storage array controller useful in rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>3</b></figref> sets forth a block diagram illustrating a write buffer device useful in storage arrays where storage devices may be rehabilitated according to embodiments of the present invention.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>4</b></figref> sets forth a flow chart illustrating an example method for rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>8</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>9</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>10</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0013" num="0012">Example methods, apparatuses, and products for rehabilitating storage devices in a storage array that includes a plurality of storage devices in accordance with the present invention are described with reference to the accompanying drawings, beginning with <figref idref="DRAWINGS">FIG. <b>1</b></figref>. <figref idref="DRAWINGS">FIG. <b>1</b></figref> sets forth a block diagram of a storage system (<b>100</b>) configured for rehabilitating storage devices according to embodiments of the present disclosure.</p><p id="p-0014" num="0013">The storage system (<b>100</b>) depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes a plurality of storage arrays (<b>102</b>, <b>104</b>), although rehabilitating storage devices in a storage array that includes a plurality of storage devices in accordance with embodiments of the present disclosure may be carried out in storage systems that include only a single storage array. Each storage array (<b>102</b>, <b>104</b>) may be embodied as a collection of computer hardware devices that provide persistent data storage to users of the storage system (<b>100</b>). Each storage array (<b>102</b>, <b>104</b>) may include a collection of data storage devices that are mounted within one or more chassis, racks, or other enclosure. Although not expressly depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, each storage array (<b>102</b>, <b>104</b>) may include a plurality of power supplies that deliver power to one or more components within the storage system (<b>100</b>) via a power bus, each storage array (<b>102</b>, <b>104</b>) may include a plurality of data communications networks that enables one or more components within the storage system (<b>100</b>) to communicates, each storage array (<b>102</b>, <b>104</b>) may include a plurality of cooling components that are used to cool one or more components within the storage system (<b>100</b>), and so on.</p><p id="p-0015" num="0014">The example storage arrays (<b>102</b>, <b>104</b>) depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may provide persistent data storage for computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) that are coupled to the storage system (<b>100</b>) via one or more data communications networks. Each of the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be embodied, for example, as a server, a workstation, a personal computer, a notebook, a smartphone, a tablet computer, or the like. The computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) in the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> are coupled for data communications to the storage arrays (<b>102</b>, <b>104</b>) through a storage area network (&#x2018;SAN&#x2019;) (<b>158</b>). The SAN (<b>158</b>) may be implemented with a variety of data communications fabrics, devices, and protocols. Example fabrics for such a SAN (<b>158</b>) may include Fibre Channel, Ethernet, Infiniband, Serial Attached Small Computer System Interface (&#x2018;SAS&#x2019;), and the like. Example data communications protocols for use in such a SAN (<b>158</b>) may include Advanced Technology Attachment (&#x2018;ATA&#x2019;), Fibre Channel Protocol, SCSI, iSCSI, HyperSCSI, and others. Readers will appreciate that a SAN is just one among many possible data communications couplings which may be implemented between a computing device (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) and a storage array (<b>102</b>, <b>104</b>). For example, the storage devices (<b>146</b>, <b>150</b>) within the storage arrays (<b>102</b>, <b>104</b>) may also be coupled to the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) as network attached storage (&#x2018;NAS&#x2019;) capable of facilitating file-level access, or even using a SAN-NAS hybrid that offers both file-level protocols and block-level protocols from the same system. Any other such data communications coupling is well within the scope of embodiments of the present disclosure.</p><p id="p-0016" num="0015">The computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are also coupled for data communications to the storage arrays (<b>102</b>, <b>104</b>) through a local area network (<b>160</b>) (&#x2018;LAN&#x2019;). The LAN (<b>160</b>) of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may also be implemented with a variety of fabrics and protocols. Examples of such fabrics include Ethernet (<b>802</b>.<b>3</b>), wireless (<b>802</b>.<b>11</b>), and the like. Examples of such data communications protocols include Transmission Control Protocol (&#x2018;TCP&#x2019;), User Datagram Protocol (&#x2018;UDP&#x2019;), Internet Protocol (&#x2018;IP&#x2019;), HyperText Transfer Protocol (&#x2018;HTTP&#x2019;), Wireless Access Protocol (&#x2018;WAP&#x2019;), Handheld Device Transport Protocol (&#x2018;HDTP&#x2019;), Real Time Protocol (&#x2018;RTP&#x2019;) and others as will occur to those of skill in the art. The LAN (<b>160</b>) depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be coupled to other computing devices not illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, for example, via the Internet (<b>172</b>). Although only one storage array (<b>104</b>) is expressly depicted as being coupled to the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) via the LAN (<b>160</b>), readers will appreciate that other storage arrays (<b>102</b>) in the storage system (<b>100</b>) may also be coupled to the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) via the same LAN (<b>160</b>) or via a different LAN.</p><p id="p-0017" num="0016">Each storage array (<b>102</b>, <b>104</b>) depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes a plurality of storage array controllers (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>). Each storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be embodied as a module of automated computing machinery comprising computer hardware, computer software, or a combination of computer hardware and software. Each storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be configured to carry out various storage-related tasks such as, for example, writing data received from the one or more of the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) to storage, erasing data from storage, retrieving data from storage to provide the data to one or more of the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>), monitoring and reporting of disk utilization and performance, performing RAID (Redundant Array of Independent Drives) or RAID-like data redundancy operations, compressing data, encrypting data, and so on.</p><p id="p-0018" num="0017">Each storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be implemented in a variety of ways, including as a Field Programmable Gate Array (&#x2018;FPGA&#x2019;), a Programmable Logic Chip (&#x2018;PLC&#x2019;), an Application Specific Integrated Circuit (&#x2018;ASIC&#x2019;), or computing device that includes discrete components such as a central processing unit, computer memory, and various adapters. Each storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may include, for example, a data communications adapter configured to support communications via the SAN (<b>158</b>) and the LAN (<b>160</b>). Although only one of the storage array controllers (<b>120</b>) in the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is depicted as being coupled to the LAN (<b>160</b>) for data communications, readers will appreciate that each storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be independently coupled to the LAN (<b>160</b>). Each storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may also include, for example, an I/O controller or the like that couples the storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) for data communications, through a midplane (<b>114</b>, <b>116</b>), to a number of storage devices (<b>146</b>, <b>150</b>), and a number of write buffer devices (<b>148</b>, <b>152</b>) that are utilized as write caches.</p><p id="p-0019" num="0018">In the example depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the presence of multiple storage array controllers (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) in each storage array (<b>102</b>, <b>104</b>) can enable each storage array (<b>102</b>, <b>104</b>) to be highly available as there are independent, redundant storage array controllers (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) that are capable of servicing access requests (e.g., reads, writes) to the storage arrays (<b>102</b>, <b>104</b>). In some embodiments, each storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) in a particular storage array (<b>102</b>, <b>104</b>) may appear to be active to the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) as each storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be available for receiving requests to access the storage array (<b>102</b>, <b>104</b>) from the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) via the SAN (<b>158</b>) or LAN (<b>160</b>). Although storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be available for receiving requests to access the storage array (<b>102</b>, <b>104</b>), however, in some embodiments only one storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may actively be allowed to direct access requests to the storage devices (<b>146</b>, <b>150</b>) or write buffer devices (<b>148</b>, <b>152</b>). For ease of explanation, a storage array controller that is allowed to direct access requests to the storage devices (<b>146</b>, <b>150</b>) or write buffer devices (<b>148</b>, <b>152</b>) may be referred to herein as an &#x2018;active&#x2019; storage array controller whereas a storage array controller that is not allowed to direct access requests to the storage devices (<b>146</b>, <b>150</b>) or write buffer devices (<b>148</b>, <b>152</b>) may be referred to herein as a &#x2018;passive&#x2019; storage array controller. Readers will appreciate that because a passive storage array controller may still receive requests to access the storage array (<b>102</b>, <b>104</b>) from the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) via the SAN (<b>158</b>) or LAN (<b>160</b>), the passive storage array controller may be configured to forward any access requests received by the passive storage array controller to the active storage array controller.</p><p id="p-0020" num="0019">Consider an example in which a first storage array controller (<b>106</b>) in a first storage array (<b>102</b>) is the active storage array controller that is allowed to direct access requests to the storage devices (<b>146</b>) or write buffer devices (<b>148</b>) within the first storage array (<b>102</b>), while a second storage array controller (<b>118</b>) in the first storage array (<b>102</b>) is the passive storage array controller that is not allowed to direct access requests to the storage devices (<b>146</b>) or write buffer devices (<b>148</b>) within the first storage array (<b>102</b>). In such an example, the second storage array controller (<b>118</b>) may continue to receive access requests from the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) via the SAN (<b>158</b>) or LAN (<b>160</b>). Upon receiving access requests from the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>), the second storage array controller (<b>118</b>) may be configured to forward such access requests to the first storage array controller (<b>106</b>) via a communications link between the first storage array controller (<b>106</b>) and the second storage array controller (<b>118</b>). Readers will appreciate that such an embodiment may reduce the amount of coordination that must occur between the first storage array controller (<b>106</b>) and the second storage array controller (<b>118</b>) relative to an embodiment where both storage array controllers (<b>106</b>, <b>118</b>) are allowed to simultaneously modify the contents of the storage devices (<b>146</b>) or write buffer devices (<b>148</b>).</p><p id="p-0021" num="0020">Although the example described above refers to an embodiment where the first storage array controller (<b>106</b>) is the active storage array controller while the second storage array controller (<b>118</b>) is the passive storage array controller, over time such designations may switch back and forth. For example, an expected or unexpected event may occur that results in a situation where the first storage array controller (<b>106</b>) is the passive storage array controller while the second storage array controller (<b>118</b>) is the active storage array controller. An example of an unexpected event that could cause a change in the roles of each storage array controller (<b>106</b>, <b>118</b>) is the occurrence of a failure or error condition with the first storage array controller (<b>106</b>) that causes the storage array (<b>102</b>) to fail over to the second storage array controller (<b>118</b>). An example of an expected event that could cause a change in the roles of each storage array controller (<b>106</b>, <b>118</b>) is the expiration of a predetermined period of time, as the first storage array controller (<b>106</b>) may be responsible for interacting with the storage devices (<b>146</b>) and the write buffer devices (<b>148</b>) during a first time period while the second storage array controller (<b>118</b>) may be responsible for interacting with the storage devices (<b>146</b>) and the write buffer devices (<b>148</b>) during a second time period. Readers will appreciate that although the preceding paragraphs describe active and passive storage array controllers with reference to the first storage array (<b>102</b>), the storage array controllers (<b>112</b>, <b>120</b>) that are part of other storage arrays (<b>104</b>) in the storage system (<b>100</b>) may operate in a similar manner.</p><p id="p-0022" num="0021">Each storage array (<b>102</b>, <b>104</b>) depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes one or more write buffer devices (<b>148</b>, <b>152</b>). Each write buffer device (<b>148</b>, <b>152</b>) may be configured to receive, from the one of the storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>), data to be stored in one or more of the storage devices (<b>146</b>, <b>150</b>). In the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, writing data to the write buffer device (<b>148</b>, <b>152</b>) may be carried out more quickly than writing data to the storage device (<b>146</b>, <b>150</b>). The storage array controllers (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may therefore be configured to effectively utilize the write buffer devices (<b>148</b>, <b>152</b>) as a quickly accessible buffer for data destined to be written to one or the storage devices (<b>146</b>, <b>150</b>). By utilizing the write buffer devices (<b>148</b>, <b>152</b>) in such a way, the write latency experienced by users of the storage system (<b>100</b>) may be significantly improved relative to storage systems that do not include such write buffer devices (<b>148</b>, <b>152</b>). The write latency experienced by users of the storage system (<b>100</b>) may be significantly improved relative to storage systems that do not include such write buffer devices (<b>148</b>, <b>152</b>) because the storage array controllers (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may send an acknowledgment to the user of the storage system (<b>100</b>) indicating that a write request has been serviced once the data associated with the write request has been written to one or the write buffer devices (<b>148</b>, <b>152</b>), even if the data associated with the write request has not yet been written to any of the storage devices (<b>146</b>, <b>150</b>).</p><p id="p-0023" num="0022">The presence of the write buffer devices (<b>148</b>, <b>152</b>) may also improve the utilization of the storage devices (<b>146</b>, <b>150</b>) as a storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) can accumulate more writes and organize writing to the storage devices (<b>146</b>, <b>150</b>) for greater efficiency. Greater efficiency can be achieved, for example, as the storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may have more time to perform deeper compression of the data, the storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be able to organize the data into write blocks that are in better alignment with the underlying physical storage on the storage devices (<b>146</b>, <b>150</b>), the storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be able to perform deduplication operations on the data, and so on. Such write buffer devices (<b>148</b>, <b>152</b>) effectively convert storage arrays of solid-state drives (e.g., &#x201c;Flash drives&#x201d;) from latency limited devices to throughput limited devices. In such a way, the storage array controller (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be given more time to better organize what is written to the storage devices (<b>146</b>, <b>150</b>), but after doing so, are not then mechanically limited like disk-based arrays are.</p><p id="p-0024" num="0023">Each storage array (<b>102</b>, <b>104</b>) depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes one or more storage devices (<b>146</b>, <b>150</b>). A &#x2018;storage device&#x2019; as the term is used in this specification refers to any device configured to record data persistently. The term &#x2018;persistently&#x2019; as used here refers to a device's ability to maintain recorded data after loss of a power source. Examples of storage devices may include mechanical, spinning hard disk drives, solid-state drives, and the like.</p><p id="p-0025" num="0024">The storage array controllers (<b>106</b>, <b>112</b>) of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be useful in rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure. The storage array controllers (<b>106</b>, <b>112</b>) may assist in rehabilitating storage devices by: receiving a request to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters; selecting, from a hierarchy of rehabilitative actions that can be performed on the storage device, a rehabilitative action to perform on the storage device in dependence upon information describing a number of times that one or more of the rehabilitative actions have been performed on the storage device; initiating execution of the selected rehabilitative action; determining whether the storage device is operating outside of the defined range of expected operating parameters after the selected rehabilitative action has been executed; responsive to determining that the storage device is operating outside of the defined range of expected operating parameters after the selected rehabilitative action has been executed, determining whether a higher level rehabilitative action exists; responsive to determining that the higher level rehabilitative action exists, initiating execution of the higher level rehabilitative action; responsive to determining that the higher level rehabilitative action does not exist, designating the storage device for replacement; profiling input/output (&#x2018;I/O&#x2019;) performance on the storage device; injecting errors into the storage device; determining whether the storage device can recover from the errors; updating the information describing the number of times that each rehabilitative action has been performed on the storage device; updating, in dependence upon a decay schedule, the information describing the number of times that each rehabilitative action has been performed on the storage device; storing, within a predetermined location on one or more storage devices in the storage array, information describing the number of times that each rehabilitative action has been performed on the storage device; determining whether an error that cannot be corrected by one or more of the lower level rehabilitative actions has occurred; responsive to determining that an error that cannot be corrected by one or more of the lower level rehabilitative actions has occurred, selecting a rehabilitative action that is at a higher level in the hierarchy of rehabilitative actions than the lower level rehabilitative actions; receiving a request to rehabilitate a storage device; initiating execution of a lowest level rehabilitative action that has not been performed a maximum number of times, wherein the lowest level rehabilitative action is part of a hierarchy of rehabilitative actions that can be performed on the storage device; maintaining, in computer memory, information describing the number of times that each rehabilitative action has been performed on the storage device; writing, to one or more storage devices in the storage array, the information describing the number of times that each rehabilitative action has been performed on the storage device; determining whether the storage device operating outside of a defined range of expected operating parameters after the lowest level rehabilitative action has been executed; responsive to determining that the storage device is operating outside of the defined range of expected operating parameters after the lowest level rehabilitative action has been executed, determining whether a higher level rehabilitative action exists; responsive to determining that the higher level rehabilitative action exists, initiating execution of the higher level rehabilitative action; responsive to determining that the higher level rehabilitative action does not exist, designating the storage device for replacement; receiving a request to rehabilitate a component in the storage array; selecting, from a hierarchy of rehabilitative actions that can be performed on the component, a rehabilitative action to perform in dependence upon a number of times that each rehabilitative action has been performed on the component; initiating execution of the selected rehabilitative action; and performing other functions as will be described in greater detail below.</p><p id="p-0026" num="0025">The arrangement of computing devices, storage arrays, networks, and other devices making up the example system illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are for explanation, not for limitation. Systems useful according to various embodiments of the present disclosure may include different configurations of servers, routers, switches, computing devices, and network architectures, not shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, as will occur to those of skill in the art.</p><p id="p-0027" num="0026">Rehabilitating storage devices in a storage array that includes a plurality of storage devices in accordance with embodiments of the present disclosure is generally implemented with computers. In the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, for example, all the computing devices (<b>164</b>, <b>166</b>, <b>168</b>, <b>170</b>) and storage controllers (<b>106</b>, <b>112</b>, <b>118</b>, <b>120</b>) may be implemented to some extent at least as computers. For further explanation, therefore, <figref idref="DRAWINGS">FIG. <b>2</b></figref> sets forth a block diagram of a storage array controller (<b>202</b>) useful in rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure.</p><p id="p-0028" num="0027">The storage array controllers (<b>202</b>, <b>206</b>) depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be similar to the storage array controllers depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, as the storage array controllers (<b>202</b>, <b>206</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be communicatively coupled, via a midplane (<b>210</b>), to one or more storage devices (<b>216</b>) and to one or more write buffer devices (<b>218</b>) that are included as part of a storage array (<b>220</b>). The storage array controllers (<b>202</b>, <b>206</b>) may be coupled to the midplane (<b>210</b>) via one or more data communications links (<b>204</b>, <b>208</b>) and the midplane (<b>206</b>) may be coupled to the storage devices (<b>216</b>) and the memory buffer devices (<b>218</b>) via one or more data communications links (<b>212</b>, <b>214</b>). The data communications links (<b>204</b>, <b>208</b>, <b>212</b>, <b>214</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be embodied, for example, as a Peripheral Component Interconnect Express (&#x2018;PCIe&#x2019;) bus, as a Serial Attached SCSI (&#x2018;SAS&#x2019;) data communications link, and so on. Although only one of the storage array controllers (<b>202</b>) is depicted in detail, readers will appreciate that other storage array controllers (<b>206</b>) may include similar components. For ease of explanation, however, the detailed view of one of the storage array controllers (<b>202</b>) will be described below.</p><p id="p-0029" num="0028">The storage array controller (<b>202</b>) detailed in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can include at least one computer processor (<b>240</b>) or &#x2018;CPU&#x2019; as well as random access memory (&#x2018;RAM&#x2019;) (<b>244</b>). The computer processor (<b>240</b>) may be connected to the RAM (<b>244</b>) via a data communications link (<b>238</b>), which may be embodied as a high speed memory bus such as a Double-Data Rate 4 (&#x2018;DDR4&#x2019;) bus. Although the storage array controller (<b>202</b>) detailed in <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes only a single computer processor, however, readers will appreciate that storage array controllers useful in rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure may include additional computer processors. Likewise, although the storage array controller (<b>202</b>) detailed in <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes only a RAM (<b>244</b>), readers will appreciate that storage array controllers useful in rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure may include additional forms of computer memory such as flash memory.</p><p id="p-0030" num="0029">The storage array controller (<b>202</b>) detailed in <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes an operating system (<b>246</b>) that is stored in RAM (<b>246</b>). Examples of operating systems useful in storage array controllers (<b>202</b>, <b>206</b>) configured for rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure include UNIX&#x2122;, Linux&#x2122;, Microsoft Windows&#x2122;, and others as will occur to those of skill in the art. The operating system (<b>246</b>) depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be embodied, for example, as system software that manages computer hardware and software resources on the storage array controller (<b>202</b>).</p><p id="p-0031" num="0030">The storage array controller (<b>202</b>) detailed in <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes an array operating environment (<b>252</b>) that is stored in RAM (<b>252</b>). The array operating environment (<b>252</b>) may be embodied as one or more modules of computer program instructions used to enable the storage array controller (<b>202</b>) to service access requests that are directed to the storage array (<b>220</b>). The array operating environment (<b>252</b>) may be responsible for generating I/O requests (e.g., read requests, write requests) that are sent to the storage devices (<b>216</b>) or the write buffer devices (<b>218</b>). The array operating environment (<b>252</b>) may be further configured to perform various functions that result in more efficient utilization of the resources within the storage array (<b>220</b>). The array operating environment (<b>252</b>) may be configured, for example, to compress data prior to writing the data to one of the storage devices (<b>216</b>), to perform data deduplication operations, to pool data that is to be written to one of the storage devices (<b>216</b>) so that data may be written in blocks of a predetermined size, and so on.</p><p id="p-0032" num="0031">The storage array controller (<b>202</b>) detailed in <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes a storage device rehabilitation module (<b>256</b>), a module that includes computer program instructions useful in rehabilitating storage devices in a storage array that includes a plurality of storage devices according to embodiments of the present disclosure. The storage device rehabilitation module (<b>256</b>) may assist in rehabilitating storage devices by: receiving a request to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters; selecting, from a hierarchy of rehabilitative actions that can be performed on the storage device, a rehabilitative action to perform on the storage device in dependence upon information describing a number of times that one or more of the rehabilitative actions have been performed on the storage device; initiating execution of the selected rehabilitative action; determining whether the storage device is operating outside of the defined range of expected operating parameters after the selected rehabilitative action has been executed; responsive to determining that the storage device is operating outside of the defined range of expected operating parameters after the selected rehabilitative action has been executed, determining whether a higher level rehabilitative action exists; responsive to determining that the higher level rehabilitative action exists, initiating execution of the higher level rehabilitative action; responsive to determining that the higher level rehabilitative action does not exist, designating the storage device for replacement; profiling I/O performance on the storage device; injecting errors into the storage device; determining whether the storage device can recover from the errors; updating the information describing the number of times that each rehabilitative action has been performed on the storage device; updating, in dependence upon a decay schedule, the information describing the number of times that each rehabilitative action has been performed on the storage device; storing, within a predetermined location on one or more storage devices in the storage array, information describing the number of times that each rehabilitative action has been performed on the storage device; determining whether an error that cannot be corrected by one or more of the lower level rehabilitative actions has occurred; responsive to determining that an error that cannot be corrected by one or more of the lower level rehabilitative actions has occurred, selecting a rehabilitative action that is at a higher level in the hierarchy of rehabilitative actions than the lower level rehabilitative actions; receiving a request to rehabilitate a storage device; initiating execution of a lowest level rehabilitative action that has not been performed a maximum number of times, wherein the lowest level rehabilitative action is part of a hierarchy of rehabilitative actions that can be performed on the storage device; maintaining, in computer memory, information describing the number of times that each rehabilitative action has been performed on the storage device; writing, to one or more storage devices in the storage array, the information describing the number of times that each rehabilitative action has been performed on the storage device; determining whether the storage device operating outside of a defined range of expected operating parameters after the lowest level rehabilitative action has been executed; responsive to determining that the storage device is operating outside of the defined range of expected operating parameters after the lowest level rehabilitative action has been executed, determining whether a higher level rehabilitative action exists; responsive to determining that the higher level rehabilitative action exists, initiating execution of the higher level rehabilitative action; responsive to determining that the higher level rehabilitative action does not exist, designating the storage device for replacement; receiving a request to rehabilitate a component in the storage array; selecting, from a hierarchy of rehabilitative actions that can be performed on the component, a rehabilitative action to perform in dependence upon a number of times that each rehabilitative action has been performed on the component; initiating execution of the selected rehabilitative action; and performing other functions as will be described in greater detail below.</p><p id="p-0033" num="0032">The storage array controller (<b>202</b>) detailed in <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes a plurality of host bus adapters (<b>222</b>, <b>224</b>, <b>250</b>) that are coupled to the computer processor (<b>240</b>) via a data communications link (<b>230</b>, <b>232</b>, <b>258</b>). Each host bus adapter (<b>222</b>, <b>224</b>, <b>250</b>) may be embodied as a module of computer hardware that connects the host system (i.e., the storage array controller) to other network and storage devices. Each of the host bus adapters (<b>222</b>, <b>224</b>, <b>250</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be embodied, for example, as a Fibre Channel adapter that enables the storage array controller (<b>202</b>) to connect to a SAN, as a Target Channel Adapter, as a SCSI/Storage Target Adapter, and so on. The storage array controller (<b>202</b>) depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes a plurality of Ethernet adapters (<b>226</b>, <b>228</b>) that enables the storage array controller (<b>202</b>) to connect to a LAN or other data communications network. Each of the host bus adapters (<b>222</b>, <b>224</b>, <b>250</b>) and the Ethernet adapters (<b>226</b>, <b>228</b>) may be coupled to the computer processor (<b>240</b>) via a data communications link (<b>230</b>, <b>232</b>, <b>234</b>, <b>236</b>, <b>258</b>) such as, for example, a PCIe bus.</p><p id="p-0034" num="0033">The storage array controller (<b>202</b>) detailed in <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes a switch (<b>254</b>) that is coupled to the computer processor (<b>240</b>) via a data communications link (<b>248</b>). The switch (<b>254</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be embodied as a computer hardware device that can create multiple endpoints out of a single endpoint, thereby enabling multiple devices to share what was initially a single endpoint. The switch (<b>254</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be embodied, for example, as a PCIe switch that is coupled to a PCIe bus and presents multiple PCIe connection points to the midplane (<b>210</b>).</p><p id="p-0035" num="0034">The storage array controller (<b>202</b>) of <figref idref="DRAWINGS">FIG. <b>2</b></figref> may also include a data communications link (<b>242</b>) for coupling the storage array controller (<b>202</b>) to other storage array controllers (<b>206</b>). Such a data communications link (<b>242</b>) may be embodied, for example, as a QuickPath Interconnect (&#x2018;QPI&#x2019;) interconnect, as PCIe non-transparent bridge (&#x2018;NTB&#x2019;) interconnect, and so on. Readers will recognize that these components, protocols, adapters, and architectures are for illustration only, not limitation. Such a storage array controller may be implemented in a variety of different ways, each of which is well within the scope of the present disclosure.</p><p id="p-0036" num="0035">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b></figref> sets forth a block diagram illustrating a write buffer device (<b>312</b>) useful in storage arrays where storage devices may be rehabilitated according to embodiments of the present invention. The write buffer device (<b>312</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> is similar to the write buffer devices depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The write buffer device (<b>312</b>) may be included in a storage array (<b>302</b>) that includes a plurality of storage array controllers (<b>304</b>, <b>306</b>) that are communicatively coupled to a plurality of storage devices (<b>310</b>) and also communicatively coupled to a plurality of write buffer devices (<b>312</b>) via a midplane (<b>308</b>).</p><p id="p-0037" num="0036">The write buffer device (<b>312</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> includes two data communications ports (<b>314</b>, <b>316</b>). The data communications ports (<b>314</b>, <b>316</b>) of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be embodied, for example, as computer hardware for communicatively coupling the write buffer device (<b>312</b>) to a storage array controller (<b>304</b>, <b>306</b>) via the midplane (<b>308</b>). For example, the write buffer device (<b>312</b>) may be communicatively coupled to the first storage array controller (<b>304</b>) via a first data communications port (<b>314</b>) and the write buffer device (<b>312</b>) may also be communicatively coupled to the second storage array controller (<b>306</b>) via a second data communications port (<b>316</b>). Although the write buffer device (<b>312</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> includes two data communications ports (<b>314</b>, <b>316</b>), readers will appreciate that write buffer devices useful for buffering data to be written to an array of non-volatile storage devices may include only one data communications port or, alternatively, additional data communications ports not depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0038" num="0037">The write buffer device (<b>312</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes a controller (<b>320</b>). The controller (<b>320</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be embodied, for example, as computer hardware for receiving memory access requests (e.g., a request to write data to memory in the write buffer device) via the data communications ports (<b>314</b>, <b>316</b>) and servicing such memory access requests. The controller (<b>320</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be embodied, for example, as an ASIC, as a microcontroller, and so on. The controller (<b>320</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be communicatively coupled the data communications ports (<b>314</b>, <b>316</b>), for example, via a PCIe data communications bus.</p><p id="p-0039" num="0038">The write buffer device (<b>312</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes a plurality of DRAM memory modules, embodied in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as DRAM dual in-line memory modules (&#x2018;DIMMs&#x2019;) (<b>338</b>). The DRAM DIMMs (<b>338</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be coupled to the controller (<b>320</b>) via a memory bus such as a DDR (<b>318</b>) memory bus such that the controller (<b>320</b>) can be configured to write data to the DRAM DIMMs (<b>338</b>) via the DDR (<b>318</b>) memory bus.</p><p id="p-0040" num="0039">The write buffer device (<b>312</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes a primary power source (<b>326</b>). The primary power source (<b>326</b>) may be embodied as computer hardware for providing electrical power to the computing components that are within the write buffer device (<b>312</b>). The primary power source (<b>326</b>) may be embodied, for example, as a switched-mode power supply that supplies electric energy to an electrical load by converting alternating current (&#x2018;AC&#x2019;) power from a mains supply to a direct current (&#x2018;DC&#x2019;) power, as a DC-to-DC converter that converts a source of direct current (DC) from one voltage level to another, and so on. The primary power source (<b>326</b>) of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is coupled to the controller (<b>320</b>) via a power line (<b>322</b>) that the primary power source (<b>326</b>) can use to deliver power to the controller (<b>320</b>). The primary power source (<b>326</b>) of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is also coupled to the DRAM DIMMs (<b>338</b>) via a power line (<b>330</b>) that the primary power source (<b>326</b>) can use to deliver power to the DRAM DIMMs (<b>338</b>). The primary power source (<b>326</b>) of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is also coupled to a power source controller (<b>340</b>) via a power line (<b>332</b>) that the primary power source (<b>326</b>) can use to deliver power to the power source controller (<b>340</b>). The primary power source (<b>326</b>) can monitor which components are receiving power through the use of one or more control lines (<b>324</b>), serial presence detect (&#x2018;SPD&#x2019;) lines (<b>328</b>), or other mechanism for detecting the presence of a device and detecting that power is being provided to the device. Readers will appreciate that write devices useful for buffering data to be written to an array of non-volatile storage devices may include additional computing components not depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, each of which may also receive power from the primary power source (<b>326</b>).</p><p id="p-0041" num="0040">The write buffer device (<b>312</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes a backup power source (<b>344</b>). The backup power source (<b>344</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> represents a power source capable of providing power to the DRAM DIMMs (<b>338</b>) in the event that the primary power source (<b>326</b>) fails. In such a way, the DRAM DIMMs (<b>338</b>) may effectively serve as non-volatile memory, as a failure of the primary power source (<b>326</b>) will not cause the contents of the DRAM DIMMs (<b>338</b>) to be lost because the DRAM DIMMs (<b>338</b>) will continue to receive power from the backup power source (<b>344</b>). Such a backup power source (<b>344</b>) may be embodied, for example, as a supercapacitor.</p><p id="p-0042" num="0041">The write buffer device (<b>312</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes a power source controller (<b>340</b>). The power source controller (<b>340</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be embodied as a module of computer hardware configured to identify a failure of the primary power source (<b>326</b>) and to cause power to be delivered to the DRAM DIMMs (<b>338</b>) from the backup power source (<b>344</b>). In such an example, power may be delivered to the DRAM DIMMs (<b>338</b>) from the backup power source (<b>344</b>) via a first power line (<b>342</b>) between the power source controller (<b>340</b>) and the backup power source (<b>344</b>), as well as a second power line (<b>334</b>) between the backup power source controller (<b>340</b>) and the DRAM DIMMs (<b>338</b>). The backup power source controller (<b>340</b>) depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be embodied, for example, as an analog circuit, an ASIC, a microcontroller, and so on. The power source controller (<b>340</b>) can monitor whether the DRAM DIMMs (<b>338</b>) have power through the use of one or more control lines (<b>336</b>) that may be coupled to the DRAM DIMMs (<b>338</b>), as well as one or more control lines that may be coupled to the primary power source (<b>326</b>). In such an example, by exchanging signals between the DRAM DIMMs (<b>338</b>), the primary power source (<b>326</b>), and the power source controller (<b>340</b>), the power source controller (<b>340</b>) may identify whether power is being provided to the DRAM DIMMs (<b>338</b>) by the primary power source (<b>326</b>).</p><p id="p-0043" num="0042">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the controller (<b>320</b>) may be configured to receive, from a storage array controller (<b>304</b>, <b>306</b>) via the one or more data communications ports (<b>314</b>, <b>316</b>), an instruction to write data to the one or more DRAM DIMMs (<b>338</b>). Such an instruction may include, for example, the location at which to write the data, the data to be written to the DRAM DIMMs (<b>338</b>), the identity of the host that issued the instruction, the identity of a user associated with the instruction, or any other information needed to service the instruction. In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the NVRAM controller (<b>320</b>) may be further configured to write the data to the one or more DRAM DIMMs (<b>338</b>) in response to receiving such an instruction.</p><p id="p-0044" num="0043">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the controller (<b>320</b>) may be further configured to send an acknowledgment indicating that the data has been written to the array (<b>302</b>) of non-volatile storage devices in response to writing the data to the one or more DRAM DIMMs (<b>338</b>). The controller (<b>320</b>) may send the acknowledgment indicating that the data has been written to the array (<b>302</b>) of non-volatile storage devices in response to writing the data to the DRAM DIMMs (<b>338</b>) in the write buffer device (<b>312</b>). Readers will appreciate that although some forms of DRAM DIMMs (<b>338</b>) are considered to be volatile memory, because the DRAM DIMMs (<b>338</b>) are backed by redundant power sources (<b>326</b>, <b>344</b>), writing the data to the DRAM DIMMs (<b>338</b>) in the write buffer device (<b>312</b>) may be treated the same as writing the data to traditional forms of non-volatile memory such as the storage devices (<b>310</b>). Furthermore, the DRAM DIMMs (<b>338</b>) in the write buffer device (<b>312</b>) can include one or more NVDIMMs. As such, once the data has been written to the DRAM DIMMs (<b>338</b>) in the write buffer device (<b>312</b>), an acknowledgement may be sent indicating that the data has been safely and persistently written to the array (<b>302</b>) of non-volatile storage devices.</p><p id="p-0045" num="0044">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the controller (<b>320</b>) may be further configured to determine whether the primary power source (<b>326</b>) has failed. The controller (<b>320</b>) may determine whether the primary power source (<b>326</b>) has failed, for example, by receiving a signal over the control line (<b>324</b>) indicating that the primary power source (<b>326</b>) has failed or is failing, by detecting a lack of power from the primary power source (<b>326</b>), and so on. In such an example, the controller (<b>320</b>) may be coupled to the backup power source (<b>344</b>) or may have access to another source of power such that the controller (<b>320</b>) can remain operational if the primary power source (<b>326</b>) does fail.</p><p id="p-0046" num="0045">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the controller (<b>320</b>) may be further configured to initiate a transfer of data contained in the one or more DRAM DIMMs (<b>338</b>) to flash memory in the write buffer device (<b>312</b>) in response to determining that the primary power source (<b>326</b>) has failed. The controller (<b>320</b>) may initiate a transfer of data contained in the one or more DRAM DIMMs (<b>338</b>) to flash memory in the write buffer device (<b>312</b>), for example, by signaling an NVDIMM to write the data contained in the one or more DRAM DIMMs (<b>338</b>) to flash memory on the NVDIMM.</p><p id="p-0047" num="0046">Although the preceding paragraphs describe storage systems and many of the hardware components and software components contained therein, readers will appreciate that rehabilitating storage devices in a storage array that includes a plurality of storage devices may be carried out in other types of storage systems that include different hardware components and different software components. For example, rehabilitating storage devices in a storage array that includes a plurality of storage devices may be carried out in a storage system that includes a plurality of blades, where each blade can include processing resources such as one or more computer processors, storage resources such as one or more storage devices, or any combination thereof.</p><p id="p-0048" num="0047">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b></figref> sets forth a flow chart illustrating an example method for rehabilitating storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in a storage array (<b>402</b>) that includes a plurality of storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) according to embodiments of the present disclosure. Although depicted in less detail, the storage array (<b>402</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be similar to the storage arrays described above as the storage array (<b>402</b>) may include storage devices such as SSDs and NVRAM devices, as well as storage array controllers and other components described above.</p><p id="p-0049" num="0048">The example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be carried out, for example, by a storage device rehabilitation module (<b>406</b>). The storage device rehabilitation module (<b>406</b>) may be embodied, for example, as one or more modules of computer program instructions that are executing on computer hardware such as a computer processor. The storage device rehabilitation module (<b>406</b>) may be embodied as one or more standalone modules, as one or more modules within a larger application such as the array operating environment described above with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, or in other ways. Although not expressly illustrated in the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the storage device rehabilitation module (<b>406</b>) may be executing, for example, on computer hardware that is contained in a storage array controller as described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref>, on computer hardware that is contained in one or more blades that are part of a storage system that includes a plurality of blades, and so on.</p><p id="p-0050" num="0049">The example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> can include receiving (<b>408</b>) a request (<b>404</b>) to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters. The one or more operating parameter may include, for example, read latency, write latency, input/output operations per second (&#x2018;IOPS&#x2019;), power consumption rate, error rates for one or more errors, throughput, average response time, or any other quantifiable metric that can be used to describe the performance of a storage device. Each operating parameter may be associated with a defined performance range that is used to determine whether a storage device is behaving in an acceptable manner. For example, a storage device may be expected to exhibit a sequential read speed of between 400 MB/s and 500 MB/s. In such an example, the defined performance range for a sequential read speed operating parameter would be 400 MB/s to 500 MB/s.</p><p id="p-0051" num="0050">Readers will appreciate that the defined performance range for each operating parameter may be based on information provided by the manufacturer of the storage device, based on values gathered during testing of the storage device, or in other ways. Readers will further appreciate that in some embodiments the defined performance range for a particular operating parameter may be specified as a minimum value with no specified maximum value. For example, the performance range for an IOPS operating parameter may have a minimum value of 30,000 IOPS with no specified maximum value. Likewise, in some embodiments the defined performance range for a particular operating parameter may be specified as a maximum value with no specified minimum value. For example, the performance range for a response time operating parameter may have a maximum value of 30 nanoseconds with no specified minimum value.</p><p id="p-0052" num="0051">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, receiving (<b>408</b>) a request (<b>404</b>) to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters may be carried out, for example, by the storage device rehabilitation module (<b>406</b>) receiving a message from one or more other modules in the storage array (<b>402</b>) that tracks the performance of the storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>402</b>). The request (<b>404</b>) that is received by the storage device rehabilitation module (<b>406</b>) may include information such as an identifier of the particular storage device that is operating outside of a defined performance range for one or more operating parameters, information identifying the particular operating parameters for which the storage device is operating outside of the defined performance range, information identifying a particular error encountered by the storage device, and so on.</p><p id="p-0053" num="0052">The example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> can also include selecting (<b>410</b>), from a hierarchy of rehabilitative actions that can be performed on the storage device, a rehabilitative action to perform on the storage device. Each rehabilitative action may be embodied as some action that is intended to improve the performance of a storage device that is operating outside of a defined performance range for one or more operating parameters. Examples of such rehabilitative actions may include, for example, temporarily preventing the storage device from servicing I/O operations directed to the storage array (<b>402</b>) and running a performance diagnostics suite on the storage device, power cycling the storage device, executing a secure erase of the storage device, and so on. The rehabilitative actions may be organized into a hierarchy of rehabilitative actions as executing one rehabilitative action may be determined to be more disruptive to the normal operation of the storage array (<b>402</b>) than executing another rehabilitative action. Using the example rehabilitative actions described above, temporarily preventing the storage device from servicing I/O operations directed to the storage array (<b>402</b>) and running a performance diagnostics suite on the storage device may be the lowest level (i.e., least disruptive) rehabilitative action in the hierarchy while executing a secure erase of the storage device may be the highest level (i.e., most disruptive) rehabilitative action in the hierarchy.</p><p id="p-0054" num="0053">Readers will appreciate that limitations may be placed on the number of times that a particular rehabilitative action should be performed on a particular storage device. Limitations may be placed on the number of times that a particular rehabilitative action should be performed on a particular storage device, for example, because repeatedly performing a particular rehabilitative action over and over again can be taken as an indication that the rehabilitative action is not correcting the behavior of a particular storage device. When a particular rehabilitative action is not correcting the behavior of a storage device, it may be desirable to execute a higher level rehabilitative action in the hierarchy in an attempt to correct the behavior of a particular storage device. As such, the rehabilitative action to perform on the storage device may be selected (<b>410</b>) in dependence upon information describing a number of times that one or more of the rehabilitative actions have been performed on the storage device. The information describing the number of times that one or more of the rehabilitative actions have been performed on the storage device may be stored, for example, within memory contained in a storage array controller that is executing the storage device rehabilitation module (<b>406</b>), within one or more of the storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>402</b>), and so on. The rehabilitative action to perform on the storage device may be selected (<b>410</b>) in dependence upon information describing the number of times that one or more of the rehabilitative actions have been performed on the storage device, for example, by comparing the information describing the number of times that one or more of the rehabilitative actions have been performed on the storage device to a predetermined threshold associated with each of the rehabilitative actions that specifies the maximum number of times that a particular rehabilitative action can be performed on a particular storage device. In such an example, the lowest level rehabilitative action in the hierarchy that has not been performed a maximum number of times may be selected (<b>410</b>) as the rehabilitative action to perform.</p><p id="p-0055" num="0054">Consider an example in which a request (<b>404</b>) to rehabilitate a first storage device (<b>414</b>) in the storage array (<b>402</b>) is received (<b>408</b>). In such an example, assume that the following table is maintained within memory contained in a storage array controller that is executing the storage device rehabilitation module (<b>406</b>):</p><p id="p-0056" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Rehabilitative Action Table</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="center"/><colspec colname="2" colwidth="56pt" align="center"/><colspec colname="3" colwidth="56pt" align="center"/><colspec colname="4" colwidth="56pt" align="center"/><tbody valign="top"><row><entry/><entry>Device ID</entry><entry>Action ID</entry><entry>Times Performed</entry><entry>Maximum</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="center"/><colspec colname="2" colwidth="56pt" align="center"/><colspec colname="3" colwidth="56pt" align="char" char="."/><colspec colname="4" colwidth="56pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>414</entry><entry>1</entry><entry>125</entry><entry>125</entry></row><row><entry/><entry>414</entry><entry>2</entry><entry>15</entry><entry>20</entry></row><row><entry/><entry>414</entry><entry>3</entry><entry>4</entry><entry>5</entry></row><row><entry/><entry>416</entry><entry>1</entry><entry>0</entry><entry>125</entry></row><row><entry/><entry>416</entry><entry>2</entry><entry>0</entry><entry>20</entry></row><row><entry/><entry>416</entry><entry>3</entry><entry>0</entry><entry>5</entry></row><row><entry/><entry>418</entry><entry>1</entry><entry>3</entry><entry>125</entry></row><row><entry/><entry>418</entry><entry>2</entry><entry>1</entry><entry>20</entry></row><row><entry/><entry>418</entry><entry>3</entry><entry>0</entry><entry>5</entry></row><row><entry/><entry>420</entry><entry>1</entry><entry>0</entry><entry>100</entry></row><row><entry/><entry>420</entry><entry>2</entry><entry>0</entry><entry>15</entry></row><row><entry/><entry>420</entry><entry>3</entry><entry>0</entry><entry>3</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0057" num="0055">In Table 1, information is maintained identifying the number of times each of three rehabilitative actions have been performed. In such an example, assume that a rehabilitative action associated with an identifier of 1 is the lowest level rehabilitative action in a hierarchy, a rehabilitative action associated with an identifier of 2 is the second highest level rehabilitative action in the hierarchy, and a rehabilitative action associated with an identifier of 3 is the highest level rehabilitative action in the hierarchy. In an example where a request (<b>404</b>) to rehabilitate a first storage device (<b>414</b>) in the storage array (<b>402</b>) is received (<b>408</b>), because the lowest level rehabilitative action has already been performed on the first storage device (<b>414</b>) the maximum number of times that the rehabilitative action can be performed on the first storage device (<b>414</b>), the rehabilitative action associated with an identifier of 2 may be selected (<b>410</b>) as the rehabilitative action to perform on the first storage device (<b>414</b>). Readers will appreciate that although the information identifying the number of times that a particular rehabilitative action has been performed on a particular storage device is illustrated above as being contained in a table, such information may be stored in a variety of other formats.</p><p id="p-0058" num="0056">The example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> can also include initiating (<b>412</b>) execution of the selected rehabilitative action. Readers will appreciate that in some instances a particular rehabilitative action may be performed by an entity such as a storage array controller that is executing the storage device rehabilitation module (<b>406</b>), while in other instances other components within the storage array (<b>402</b>) may be executing a rehabilitative action. For example, if the rehabilitative action is to power cycle a storage device, such a rehabilitative action may ultimately be performed by a power supply, the storage device itself, another component in the storage array (<b>402</b>), or any combination thereof. Initiating (<b>412</b>) execution of the selected rehabilitative action may therefore be carried out, for example, by the storage device rehabilitation module (<b>406</b>) issuing a command to another component in the storage array (<b>402</b>) to perform the selected rehabilitative action. In embodiments where the storage device rehabilitation module (<b>406</b>) can perform the selected rehabilitative action, initiating (<b>412</b>) execution of the selected rehabilitative action may be carried out by the storage device rehabilitation module (<b>406</b>) invoking the computer program instructions that carry out the selected rehabilitative action. Readers will appreciate that in other embodiments, initiating (<b>412</b>) execution of the selected rehabilitative action may be carried out by both the storage device rehabilitation module (<b>406</b>) and other components in the storage array (<b>402</b>) performing various tasks.</p><p id="p-0059" num="0057">For further explanation, <figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in a storage array (<b>402</b>) that includes a plurality of storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) according to embodiments of the present disclosure. The example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> also includes receiving (<b>408</b>) a request (<b>404</b>) to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters, selecting (<b>410</b>), from a hierarchy of rehabilitative actions that can be performed on the storage device, a rehabilitative action to perform on the storage device, and initiating (<b>412</b>) execution of the selected rehabilitative action.</p><p id="p-0060" num="0058">The example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> also includes determining (<b>502</b>) whether the storage device is operating outside of a defined performance range for one or more operating parameters after the selected rehabilitative action has been executed. Determining (<b>502</b>) whether the storage device is operating outside of a defined performance range for one or more operating parameters after the selected rehabilitative action has been executed may be carried out, for example, by running one or more diagnostics suites on the storage device. Such a diagnostics suite may be selected, for example, based on which operating parameters the storage device was operating outside of the defined performance range. For example, if the storage device was operating outside of a defined performance range associated with a power consumption operating parameter, a different diagnostics suite may be selected than would be selected if the storage device was operating outside of a defined performance range associated with a write latency operating parameter.</p><p id="p-0061" num="0059">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, determining (<b>502</b>) whether the storage device is operating outside of a defined performance range for one or more operating parameters after the selected rehabilitative action has been executed can include profiling (<b>504</b>) I/O performance on the storage device. Profiling (<b>504</b>) I/O performance on the storage device may be carried out, for example, by executing one or more test suites that are used to evaluate how well a storage device is operating. Such test suites may include, for example, a series of I/O requests that can be used to measure how the average read latency of the storage device, the average write latency of the storage device, how many IOPS the storage device is performing, how many errors the storage device is generating, and so on. In such an example, the measured values may be compared to the defined performance range for one or more operating parameters to determine (<b>502</b>) whether the storage device is operating outside of a defined performance range for one or more operating parameters after the selected rehabilitative action has been executed. Readers will appreciate that if the storage device rehabilitation module (<b>406</b>) determines that the storage device is not (<b>508</b>) operating outside of the defined performance range for one or more operating parameters after the selected rehabilitative action has been executed, the storage device rehabilitation module (<b>406</b>) may proceed by waiting for another request (<b>404</b>) to rehabilitate a storage device.</p><p id="p-0062" num="0060">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in response to affirmatively (<b>506</b>) determining that the storage device is operating outside of the defined performance range for one or more operating parameters after the selected rehabilitative action has been executed, the storage device rehabilitation module (<b>406</b>) may determine (<b>510</b>) whether a higher level rehabilitative action exists. Determining (<b>510</b>) whether a higher level rehabilitative action exists may be carried out, for example, by examining the hierarchy of rehabilitative actions to determine whether a higher level rehabilitative action exists in the hierarchy. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the relative term &#x2018;higher level&#x2019; is used to describe a rehabilitative action that are deemed to be more disruptive to the standard operation of the storage array (<b>402</b>) than &#x2018;lower level&#x2019; rehabilitative actions. For example, performing a secure erase of a particular storage device and rebuilding the erased data using a backup or redundancy (e.g., RAID or RAID-like) data may be deemed to be more disruptive to the standard operation of the storage array (<b>402</b>) than power cycling the particular storage device, and as such, performing a secure erase of a particular storage device and rebuilding the erased data using a backup or redundancy (e.g., RAID or RAID-like) data may be designated as a higher level rehabilitative action in a hierarchy than power cycling the particular storage device. Because executing a higher level rehabilitative action is deemed to be more disruptive to the standard operation of the storage array (<b>402</b>), it may be desirable to execute higher level rehabilitative actions only when lower level rehabilitative actions have failed to correct the behavior of a storage device that is operating outside of the defined performance range for one or more operating parameters.</p><p id="p-0063" num="0061">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in response to affirmatively (<b>512</b>) determining that the higher level rehabilitative action exists, the storage device rehabilitation module (<b>406</b>) may initiate (<b>514</b>) execution of the higher level rehabilitative action. Readers will appreciate that in some instances a particular rehabilitative action may be performed by an entity such as a storage array controller that is executing the storage device rehabilitation module (<b>406</b>), while in other instances other components within the storage array (<b>402</b>) may be executing a rehabilitative action. For example, if the rehabilitative action is to power cycle a storage device, such a rehabilitative action may ultimately be performed by a power supply, the storage device itself, another component in the storage array (<b>402</b>), or any combination thereof. Initiating (<b>514</b>) execution of the higher level rehabilitative action may therefore be carried out, for example, by the storage device rehabilitation module (<b>406</b>) issuing a command to another component in the storage array (<b>402</b>) to perform the higher level rehabilitative action. In embodiments where the storage device rehabilitation module (<b>406</b>) can perform the higher level rehabilitative action, initiating (<b>514</b>) execution of the higher level rehabilitative action may be carried out by the storage device rehabilitation module (<b>406</b>) invoking the computer program instructions that carry out the higher level rehabilitative action. Readers will appreciate that in other embodiments, initiating (<b>514</b>) execution of the higher level rehabilitative action may be carried out by both the storage device rehabilitation module (<b>406</b>) and other components in the storage array (<b>402</b>) performing various tasks.</p><p id="p-0064" num="0062">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in response to determining that the higher level rehabilitative action does not (<b>516</b>) exist, the storage device rehabilitation module (<b>406</b>) may designate (<b>518</b>) the storage device for replacement. Readers will appreciate that when it is determined that a higher level rehabilitative action than those rehabilitative actions that have already been executed does not (<b>516</b>) exist, there are no other rehabilitative actions to execute in an effort to correct the behavior of a storage device that is operating outside of the defined performance range for one or more operating parameters. Because a storage device that is operating outside of the defined performance range for one or more operating parameters can negatively impact overall system performance, it may be desirable to remove the storage device from the storage array (<b>402</b>).</p><p id="p-0065" num="0063">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, designating (<b>518</b>) the storage device for replacement may be carried out in a variety of ways. Designating (<b>518</b>) the storage device for replacement may be carried out, for example, by sending a message to a system administrator or other administrative entity indicating that the storage device should be removed from the storage array (<b>402</b>), by sending a message to system software in the storage array controller that causes the storage array controller to cease issuing I/O requests to the storage device, and so on. Designating (<b>518</b>) the storage device for replacement may be carried out, for example, by causing the storage device to be powered down such that system software executing in the storage array controller initiates data recovery processes that are triggered when a storage device in the storage array (<b>402</b>) fails. Readers will appreciate that although the example described in <figref idref="DRAWINGS">FIG. <b>5</b></figref> describes designating (<b>518</b>) the storage device for replacement, in some embodiments the storage device may simply be removed from the storage array (<b>402</b>) without replacing the storage device.</p><p id="p-0066" num="0064">For further explanation, <figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in a storage array (<b>402</b>) that includes a plurality of storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) according to embodiments of the present disclosure. The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes receiving (<b>408</b>) a request (<b>404</b>) to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters, selecting (<b>410</b>), from a hierarchy of rehabilitative actions that can be performed on the storage device, a rehabilitative action to perform on the storage device, and initiating (<b>412</b>) execution of the selected rehabilitative action.</p><p id="p-0067" num="0065">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes updating (<b>602</b>) the information describing the number of times that each rehabilitative action has been performed on the storage device. The information describing the number of times that each rehabilitative action has been performed on the storage device may be embodied, for example, as integer values that are used as counters, where each rehabilitative action is associated with a unique counter. In such an example, updating (<b>602</b>) the information describing the number of times that each rehabilitative action has been performed on the storage device may be carried out by incrementing the counter associated with a particular rehabilitative action each time the particular rehabilitative is executed.</p><p id="p-0068" num="0066">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes storing (<b>604</b>), within a predetermined location on one or more storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>420</b>), information describing the number of times that each rehabilitative action has been performed on the storage device. The predetermined location on one or more storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>420</b>) may be embodied, for example, as a predetermined address that is used store information describing the number of times that each rehabilitative action has been performed on the storage device. In an embodiment where the one or more storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) are embodied as SSDs, each SSD may be organized as 4 KB pages, where each page has a small amount of additional memory (referred to herein as a &#x2018;header&#x2019;) that is attached to the page. In such an embodiment, the information describing the number of times that each rehabilitative action has been performed on the storage device may be stored (<b>604</b>) in such a header and may be marked with a unique identifier that may be used by a storage array controller to detect that the information stored in the header is information describing the number of times that each rehabilitative action has been performed on the storage device. Readers will appreciate that by distributing such information across one or more storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>402</b>), a storage array controller may scan the storage devices to acquire the information describing the number of times that each rehabilitative action has been performed on the storage device. Such a configuration may be especially beneficial, for example, in storage arrays where one storage array controller serves as the active controller and another storage array controller. During failover or some other transition where the active/passive roles of each controller are switched, the formerly passive storage array controller can scan the storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) to determine the number of times that each rehabilitative action has been performed on the storage device.</p><p id="p-0069" num="0067">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes updating (<b>606</b>), in dependence upon a decay schedule, the information describing the number of times that each rehabilitative action has been performed on the storage device. A decay schedule may be embodied, for example, as rule that is used to reduce the number of times that each storage device is viewed as having performed one or more rehabilitative actions has been performed over time. Each rehabilitative action may be associated with its own decay schedule, which may be different for each rehabilitative action. Likewise, the decay schedule that is applied to one storage device may be different than the decay schedule that is applied to another storage device.</p><p id="p-0070" num="0068">Consider the example described above in which a lowest level rehabilitative action includes temporarily preventing the storage device from servicing I/O operations directed to the storage array (<b>402</b>) and running a performance diagnostics suite on the storage device, a mid-level rehabilitative action includes power cycling the storage device, and a highest level rehabilitative action includes executing a secure erase of the storage device. In such an example, the lowest level rehabilitative action may be associated with a decay schedule such that the number of times that the lowest level rehabilitative action has been performed is decreased by one every hour, the mid-level rehabilitative action may be associated with a decay schedule such that the number of times that the mid-level rehabilitative action has been performed is decreased by one every day, and the highest level rehabilitative action may be associated with a decay schedule such that the number of times that the highest level rehabilitative action has been performed is decreased by one every week. Through the use of such decay schedules, situations where a storage device was operating poorly but has since recovered can effectively be wiped from a storage device's history over time. Readers will further appreciate that, in addition to updating (<b>606</b>) the information describing the number of times that each rehabilitative action has been performed on a storage device in dependence upon a decay schedule, information describing the number of times that each rehabilitative action has been performed on a particular storage device may cease to be maintained at all if the particular storage device is removed from the storage array (<b>402</b>).</p><p id="p-0071" num="0069">For further explanation, <figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in a storage array (<b>402</b>) that includes a plurality of storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) according to embodiments of the present disclosure. The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes receiving (<b>408</b>) a request (<b>404</b>) to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters, selecting (<b>410</b>), from a hierarchy of rehabilitative actions that can be performed on the storage device, a rehabilitative action to perform on the storage device, and initiating (<b>412</b>) execution of the selected rehabilitative action.</p><p id="p-0072" num="0070">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, selecting (<b>410</b>) a rehabilitative action to perform on the storage device can include determining (<b>702</b>) whether an error that cannot be corrected by one or more of the lower level rehabilitative actions has occurred. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the request (<b>404</b>) to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters may include an identifier (e.g., an error code) of a particular error that has occurred. In such an example, storage device rehabilitation module (<b>406</b>) may maintain or otherwise have access to information that associates an identifier of a particular error with an identifier of the lowest level rehabilitative action in the hierarchy that can be used to successfully rehabilitate a storage device that is experiencing the particular error. Such information that associates an identifier of a particular error with an identifier of the lowest level rehabilitative action in the hierarchy that can be used to successfully rehabilitate a particular storage device that is experiencing the particular error may be established, for example, as a configuration parameter for the storage device rehabilitation module (<b>406</b>). Alternatively, information that associates an identifier of a particular error with an identifier of the lowest level rehabilitative action in the hierarchy that can be used to successfully rehabilitate a particular storage device that is experiencing the particular error may be learned over time. For example, if the storage device rehabilitation module (<b>406</b>) has never successfully rehabilitated a particular storage device that is experiencing a particular error by executing a particular rehabilitative action, in spite of the fact that the storage device rehabilitation module (<b>406</b>) has attempted to rehabilitate a particular storage device that is experiencing a particular error by executing a particular rehabilitative action more than a predetermined number of times, the storage device rehabilitation module (<b>406</b>) may determine that the particular rehabilitative action cannot be used to rehabilitate a particular storage device that is experiencing the particular error. In such an example, the storage device rehabilitation module (<b>406</b>) may determine (<b>702</b>) whether an error that cannot be corrected by one or more of the lower level rehabilitative actions has occurred by looking up the error identifier contained in the request (<b>404</b>) in the information that associates an identifier of a particular error with an identifier of the lowest level rehabilitative action in the hierarchy that can be used to successfully rehabilitate a particular storage device.</p><p id="p-0073" num="0071">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, selecting (<b>410</b>) a rehabilitative action to perform on the storage device can also include, in response to affirmatively (<b>704</b>) determining that an error that cannot be corrected by one or more of the lower level rehabilitative actions has occurred, selecting (<b>706</b>) a rehabilitative action that is at a higher level in the hierarchy of rehabilitative actions than the lower level rehabilitative actions. Consider the example described above in which a lowest level rehabilitative action includes temporarily preventing the storage device from servicing I/O operations directed to the storage array (<b>402</b>) and running a performance diagnostics suite on the storage device, a mid-level rehabilitative action includes power cycling the storage device, and a highest level rehabilitative action includes executing a secure erase of the storage device. In such an example, assume that the information that associates an identifier of a particular error with an identifier of the lowest level rehabilitative action in the hierarchy that can be used to successfully rehabilitate a particular storage device that is experiencing the particular error includes an entry indicating that errors with an identifier of &#x2018;1&#x2019; cannot be resolved by executing the lowest level rehabilitative action. In such an example, even if the lowest level rehabilitative action has not been executed the maximum number of times that is permissible, the storage device rehabilitation module (<b>406</b>) may affirmatively (<b>704</b>) determine (<b>702</b>) that an error that cannot be corrected by one or more of the lower level rehabilitative actions (e.g., the lowest level rehabilitative action) and the storage device rehabilitation module (<b>406</b>) may subsequently select (<b>706</b>) a rehabilitative action (e.g., the mid-level rehabilitative action of power cycling the storage device) that is at a higher level in the hierarchy of rehabilitative actions than the one or more of the lower level rehabilitative actions (e.g., the lowest level rehabilitative action) that cannot correct the error experienced by the storage device.</p><p id="p-0074" num="0072">For further explanation, <figref idref="DRAWINGS">FIG. <b>8</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in a storage array (<b>402</b>) that includes a plurality of storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) according to embodiments of the present disclosure. The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> is depicted as being carried out by a storage device rehabilitation module (<b>406</b>) that is executing on a storage array controller (<b>800</b>) such as the storage array controllers described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref>, although the method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> could also be carried out by a storage device rehabilitation module (<b>406</b>) that is executing on computer hardware that is contained in one or more blades that are part of a storage system that includes a plurality of blades or any other form of a storage system.</p><p id="p-0075" num="0073">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> includes receiving (<b>802</b>) a request to rehabilitate a storage device. Receiving (<b>802</b>) a request to rehabilitate a storage device may be carried out, for example, by the storage device rehabilitation module (<b>406</b>) receiving a message from one or more other modules in the storage array (<b>402</b>) that tracks the performance of the storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>402</b>). The request (<b>404</b>) that is received by the storage device rehabilitation module (<b>406</b>) may include information such as an identifier of the particular storage device that is to be rehabilitated, information identifying any particular operating parameters for which the storage device is operating outside of the defined performance range, information identifying a particular error encountered by the storage device, and so on.</p><p id="p-0076" num="0074">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes initiating (<b>804</b>) execution of a lowest level rehabilitative action that has not been performed a maximum number of times, where the lowest level rehabilitative action is part of a hierarchy of rehabilitative actions that can be performed on the storage device. Readers will appreciate that in some instances a particular rehabilitative action may be performed by an entity such as a storage array controller that is executing the storage device rehabilitation module (<b>406</b>), while in other instances other components within the storage array (<b>402</b>) may be executing a rehabilitative action. For example, if the rehabilitative action is to power cycle a storage device, such a rehabilitative action may ultimately be performed by a power supply, the storage device itself, another component in the storage array (<b>402</b>), or any combination thereof. Initiating (<b>804</b>) execution of the lowest level rehabilitative action that has not been performed a maximum number of times may therefore be carried out, for example, by the storage device rehabilitation module (<b>406</b>) issuing a command to another component in the storage array (<b>402</b>) to perform the selected rehabilitative action. In embodiments where the storage device rehabilitation module (<b>406</b>) can perform the selected rehabilitative action, initiating (<b>804</b>) execution of the lowest level rehabilitative action that has not been performed a maximum number of times may be carried out by the storage device rehabilitation module (<b>406</b>) invoking the computer program instructions that carry out the selected rehabilitative action. Readers will appreciate that in other embodiments, initiating (<b>804</b>) execution of the lowest level rehabilitative action that has not been performed a maximum number of times may be carried out by both the storage device rehabilitation module (<b>406</b>) and other components in the storage array (<b>402</b>) performing various tasks.</p><p id="p-0077" num="0075">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes maintaining (<b>806</b>), in computer memory, information describing the number of times that each rehabilitative action has been performed on the storage device. The computer memory may be embodied, for example, as RAM that is include in a storage array controller as described above. The information describing the number of times that each rehabilitative action has been performed on the storage device may be maintained (<b>806</b>) in computer memory, for example, by updating such information each time a particular rehabilitative action is invoked and updating such information according to a decay schedule, as described in greater detail above.</p><p id="p-0078" num="0076">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes writing (<b>808</b>), to one or more storage devices in the storage array, the information describing the number of times that each rehabilitative action has been performed on the storage device. The information describing the number of times that each rehabilitative action has been performed on the storage device may be written (<b>808</b>), for example, to a predetermined location within one or more of the storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>420</b>). The predetermined location on one or more storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>420</b>) may be embodied, for example, as a predetermined address that is used store information describing the number of times that each rehabilitative action has been performed on the storage device. In an embodiment where the one or more storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) are embodied as SSDs, each SSD may be organized as 4 KB pages, where each page has a small amount of additional memory (referred to herein as a &#x2018;header&#x2019;) that is attached to the page. In such an embodiment, the information describing the number of times that each rehabilitative action has been performed on the storage device may be written (<b>808</b>) to such a header and may be marked with a unique identifier that may be used by a storage array controller to detect that the information stored in the header is information describing the number of times that each rehabilitative action has been performed on the storage device. Readers will appreciate that by distributing such information across one or more storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in the storage array (<b>402</b>), a storage array controller may scan the storage devices to acquire the information describing the number of times that each rehabilitative action has been performed on the storage device. Such a configuration may be especially beneficial, for example, in storage arrays where one storage array controller serves as the active controller and another storage array controller. During failover or some other transition where the active/passive roles of each controller are switched, the formerly passive storage array controller can scan the storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) to determine the number of times that each rehabilitative action has been performed on the storage device.</p><p id="p-0079" num="0077">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes determining (<b>810</b>) whether the storage device operating outside of a defined range of expected operating parameters after the lowest level rehabilitative action has been executed. Determining (<b>810</b>) whether the storage device is operating outside of a defined performance range for one or more operating parameters after the selected rehabilitative action has been executed may be carried out, for example, by running one or more diagnostics suites on the storage device. Such a diagnostics suite may be selected, for example, based on which operating parameters the storage device was operating outside of the defined performance range. For example, if the storage device was operating outside of a defined performance range associated with a power consumption operating parameter, a different diagnostics suite may be selected than would be selected if the storage device was operating outside of a defined performance range associated with a write latency operating parameter.</p><p id="p-0080" num="0078">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, in response affirmatively (<b>812</b>) determining that the storage device is operating outside of the defined range of expected operating parameters after the lowest level rehabilitative action has been executed, the storage device rehabilitation module (<b>406</b>) may determine (<b>814</b>) whether a higher level rehabilitative action exists. Determining (<b>814</b>) whether a higher level rehabilitative action exists may be carried out, for example, by examining the hierarchy of rehabilitative actions to determine whether a higher level rehabilitative action exists in the hierarchy. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the relative term &#x2018;higher level&#x2019; is used to describe a rehabilitative action that are deemed to be more disruptive to the standard operation of the storage array (<b>402</b>) than &#x2018;lower level&#x2019; rehabilitative actions. For example, performing a secure erase of a particular storage device and rebuilding the erased data using a backup or redundancy (e.g., RAID or RAID-like) data may be deemed to be more disruptive to the standard operation of the storage array (<b>402</b>) than power cycling the particular storage device, and as such, performing a secure erase of a particular storage device and rebuilding the erased data using a backup or redundancy (e.g., RAID or RAID-like) data may be designated as a higher level rehabilitative action in a hierarchy than power cycling the particular storage device. Because executing a higher level rehabilitative action is deemed to be more disruptive to the standard operation of the storage array (<b>402</b>), it may be desirable to execute higher level rehabilitative actions only when lower level rehabilitative actions have failed to correct the behavior of a storage device that is operating outside of the defined performance range for one or more operating parameters.</p><p id="p-0081" num="0079">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, in response to affirmatively (<b>816</b>) determining that the higher level rehabilitative action exists, the storage device rehabilitation module (<b>406</b>) may initiate (<b>818</b>) execution of the higher level rehabilitative action. Readers will appreciate that in some instances a particular rehabilitative action may be performed by an entity such as a storage array controller that is executing the storage device rehabilitation module (<b>406</b>), while in other instances other components within the storage array (<b>402</b>) may be executing a rehabilitative action. For example, if the rehabilitative action is to power cycle a storage device, such a rehabilitative action may ultimately be performed by a power supply, the storage device itself, another component in the storage array (<b>402</b>), or any combination thereof. Initiating (<b>818</b>) execution of the higher level rehabilitative action may therefore be carried out, for example, by the storage device rehabilitation module (<b>406</b>) issuing a command to another component in the storage array (<b>402</b>) to perform the higher level rehabilitative action. In embodiments where the storage device rehabilitation module (<b>406</b>) can perform the higher level rehabilitative action, initiating (<b>818</b>) execution of the higher level rehabilitative action may be carried out by the storage device rehabilitation module (<b>406</b>) invoking the computer program instructions that carry out the higher level rehabilitative action. Readers will appreciate that in other embodiments, initiating (<b>818</b>) execution of the higher level rehabilitative action may be carried out by both the storage device rehabilitation module (<b>406</b>) and other components in the storage array (<b>402</b>) performing various tasks.</p><p id="p-0082" num="0080">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, in response to determining that the higher level rehabilitative action does not (<b>820</b>) exists, the storage device rehabilitation module (<b>406</b>) may designate (<b>822</b>) the storage device for replacement. Readers will appreciate that when it is determined that a higher level rehabilitative action than those rehabilitative actions that have already been executed does not (<b>820</b>) exist, there are no other rehabilitative actions to execute in an effort to correct the behavior of a storage device that is operating outside of the defined performance range for one or more operating parameters. Because a storage device that is operating outside of the defined performance range for one or more operating parameters can negatively impact overall system performance, it may be desirable to remove the storage device from the storage array (<b>402</b>).</p><p id="p-0083" num="0081">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, designating (<b>822</b>) the storage device for replacement may be carried out in a variety of ways. Designating (<b>822</b>) the storage device for replacement may be carried out, for example, by sending a message to a system administrator or other administrative entity indicating that the storage device should be removed from the storage array (<b>402</b>), by sending a message to system software in the storage array controller that causes the storage array controller to cease issuing I/O requests to the storage device, and so on. Designating (<b>822</b>) the storage device for replacement may be carried out, for example, by causing the storage device to be powered down such that system software executing in the storage array controller initiates data recovery processes that are triggered when a storage device in the storage array (<b>402</b>) fails. Readers will appreciate that although the example described in <figref idref="DRAWINGS">FIG. <b>8</b></figref> describes designating (<b>822</b>) the storage device for replacement, in some embodiments the storage device may simply be removed from the storage array (<b>402</b>) without replacing the storage device.</p><p id="p-0084" num="0082">Although the examples described above relate to embodiments where a request to rehabilitate a storage device is received, a rehabilitative action to perform is selected, and execution of the rehabilitative action is initiated, in other embodiment, such steps may be performed for any component in a storage array. For example, a request to rehabilitate a connectivity module that couples one or more storage devices to one or more storage array controllers may be received, a rehabilitative action to perform on the connectivity module may be selected from a hierarchy of rehabilitative actions that can be performed on the connectivity module, and execution of the selected rehabilitative action may be initiated. Such a connectivity module may include data communications links, data communications interfaces, networking components, and so on.</p><p id="p-0085" num="0083">For further explanation, <figref idref="DRAWINGS">FIG. <b>9</b></figref> sets forth a flow chart illustrating an additional example method for rehabilitating storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) in a storage array (<b>402</b>) that includes a plurality of storage devices (<b>414</b>, <b>416</b>, <b>418</b>, <b>420</b>) according to embodiments of the present disclosure. The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes receiving (<b>408</b>) a request (<b>404</b>) to rehabilitate a storage device that is operating outside of a defined performance range for one or more operating parameters, selecting (<b>410</b>), from a hierarchy of rehabilitative actions that can be performed on the storage device, a rehabilitative action to perform on the storage device, and initiating (<b>412</b>) execution of the selected rehabilitative action.</p><p id="p-0086" num="0084">The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes injecting (<b>902</b>) errors into the storage device. Readers will appreciate that storage devices may exhibit a variety of error states. For example, an I/O operation directed to the storage device may take longer than expected and complete successfully, an I/O operation directed to the storage device may take longer than expected and complete unsuccessfully, an I/O operation directed to the storage device may take longer than expected and completion may be preempted by a timeout, and so on. In such an example, in an effort to verify that software and hardware within the storage array (<b>402</b>) can recover from such inevitable errors, errors may be injected (<b>902</b>) into the storage device to test whether the storage array (<b>402</b>) can recover from such errors. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, injecting (<b>902</b>) errors into the storage device may be carried out through the use of commands that are issued by a host system such as a storage array controller, where such commands are supported by the storage device to replicate the occurrence of particular errors. Such commands may include, for example, an identifier of the error condition that is to be replicated, an identification of the storage device that is to replicate the occurrence of the identified error, and so on. Such commands may also include fields that enable the host system to specify when the error condition is to be replicated. For example, the host system may specify that the error condition is to be replicated at a particular date and time, the host system may specify that the error condition is to be replicated a certain amount of time after the command was issued, and so on. In such a way, the injection of errors may be delayed to a known point in time where the storage array (<b>402</b>) is not heavily utilized or otherwise delayed to a known point in time that is chosen based on various considerations.</p><p id="p-0087" num="0085">The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes determining (<b>904</b>) whether the storage device can recover from the errors. Readers will appreciate that recovering from such errors may require, for example, initiating the execution of various rehabilitative actions. Once the rehabilitative actions have been performed, a series of tests may be executed on the storage device to determine whether the storage device is operating as expected. In such a way, determining (<b>904</b>) whether the storage device can recover from the errors may be carried out by verifying that, in spite of the fact that errors were injected (<b>902</b>) into the storage device, the storage device is operating within a defined performance range for one or more operating parameters after taking actions to correct the injected (<b>902</b>) errors.</p><p id="p-0088" num="0086">Readers will appreciate that although the preceding paragraphs relate to the injection of specific errors, it may also be desirable to profile how storage devices perform at various points in their life cycles, so that the storage array (<b>402</b>) can best respond to the performance of a storage device as the device ages. Consider an example in which the storage device is an SSD. SSDs include NAND flash that must undergo program-erase (&#x2018;P/E&#x2019;) cycles as part of writing data to and erasing data from the SSD. In such an example, the lifespan of an SSD may be characterized in terms of how many P/E cycles are expected to be supported by the NAND flash in the SSD. For example, if the NAND flash within the SSD is expected to perform 100,000 P/E cycles, the lifespan of the NAND flash could be characterized as being 100,000 P/E cycles. Readers will appreciate that as an SSD ages (i.e., as more P/E cycles are performed on the NAND flash in the SSD) and the NAND flash within the SSD degrades, the response time and latency exhibited by the SSD may increase as firmware within the SSD must incur additional overhead to service an I/O request, such as performing error recovery tasks due to high bit-error rates in the underlying NAND flash when performing a read operation. In order to ensure that the storage array (<b>402</b>) is properly handling situations in which response times and latencies exhibited by the SSD increase due to the SSD aging, the storage array (<b>402</b>) may profile the performance of a storage device during the lifecycle of the storage device.</p><p id="p-0089" num="0087">For further explanation, <figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example method of profiling performance of a storage device during the lifecycle of the storage device according to embodiments of the present disclosure. Although not expressly illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, readers will appreciate that profiling performance of a storage device during the lifecycle of the storage device may be carried out in storage systems configured for rehabilitating storage devices according to embodiments of the present disclosure. The example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> includes determining (<b>1002</b>) the expected lifespan of a storage device. As described above, the expected lifespan of a storage device may be embodied, for example, as the number of P/E cycles that NAND flash within the SSD is expected to be able to perform. The expected lifespan of a storage device may be determined (<b>1002</b>), for example, based on information provided by the manufacturer of the storage device, based on information collected through testing of the storage device, and so on.</p><p id="p-0090" num="0088">The example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> also includes identifying (<b>1004</b>) a plurality of test points for the storage device. A test point for the storage device may be specified, for example, as a percentage of the expected lifespan of the storage device. For example, the test points may indicate that the storage device should be tested at 0% of its expected lifespan, at 25% of its expected lifespan, at 50% of its expected lifespan, at 75% of its expected lifespan, and at 100% of its expected lifespan. Using the example described above where the NAND flash within the SSD is expected to be able to perform 100,000 P/E cycles, the test points described in the preceding sentence would indicate that the storage device should be tested when NAND flash within the SSD has performed 0 P/E cycles, the storage device should be tested when NAND flash within the SSD has performed 25,000 P/E cycles, the storage device should be tested when NAND flash within the SSD has performed 50,000 P/E cycles, the storage device should be tested when NAND flash within the SSD has performed 75,000 P/E cycles, and the storage device should be tested when NAND flash within the SSD has performed 100,000 P/E cycles.</p><p id="p-0091" num="0089">Readers will appreciate that the test points may include additional parameters beyond the number of P/E cycles performed by NAND flash in the SSD. For example, the test points may also include a parameter that specifies the SSDs should, while powered down, be exposed to a predetermined ambient temperature for a predetermined amount of time as part of reaching a particular test point. In such an example, multiple test points may exist at the same (or roughly the same, within a predetermined threshold) wear level. For example, at each of the test points described above, it may be desirable to: 1) test the storage devices after the storage devices has been exposed to a predetermined ambient temperature for a predetermined amount of time that is equivalent to the storage device residing within an environment for one month where the ambient temperature is 40 degrees Celsius, and 2) test the storage devices after the storage devices has been exposed to a predetermined ambient temperature for a predetermined amount of time that is equivalent to the storage device residing within an environment for three months where the ambient temperature is 40 degrees Celsius. Readers will appreciate that such test points may be designed to emulate the expected conditions of a storage array that could include such storage devices, and that the test points may include any number of additional parameters beyond the number of P/E cycles performed by NAND flash in the SSD.</p><p id="p-0092" num="0090">The example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> also includes performing (<b>1006</b>) I/O requests until the storage device has reached a next test point. Performing (<b>1006</b>) I/O requests until the storage device has reached a next test point may be carried out, for example, by subjecting the storage device to a bandwidth limited sequential write workload that increases the amount of P/E cycles performed by the NAND flash in the SSDs to a level as specified in a next test point. Consider the example described above where the storage device should be tested when NAND flash within the SSD has performed 25,000 P/E cycles and the storage device should be tested when NAND flash within the SSD has performed 50,000 P/E cycles. In such an example, once testing has been completed when the SSD has performed 25,000 P/E cycles, the storage device may be subjected to a bandwidth limited sequential write workload that increases the amount of P/E cycles performed by the NAND flash in the SSDs from 25,000 to 50,000.</p><p id="p-0093" num="0091">The example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> also includes measuring (<b>1008</b>) I/O performance at the next test point. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, once the storage device has reached a next test point, I/O performance may be measured (<b>1008</b>) by performing a series of I/O operations on the storage device. Such a series of I/O operations may include, for example, performing one or more sub-series of random read requests at a particular transfer size and queue depth for a predetermined period of time, performing one or more sub-series of sequential read requests at a particular transfer size and queue depth for a predetermined period of time, or any combination thereof. In fact, such a series of I/O operations may include many variations on the transfer sizes and queue depths that are used in each sub-series, different sub-series may be ordered in a variety of ways, and so on. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, various aspects of I/O performance at the next test point may be measured (<b>1008</b>). For example, the average latency may be measured, the latency of the slowest 1% of I/O operations may be measured, the latency of the slowest 0.1% of I/O operations may be measured, the latency of the slowest 0.01% of I/O operations may be measured, and so on. Readers will appreciate that the latency of the slowest I/O operations may be measured to collect worst-case performance metrics, as such worst cases often require the highest degree of intervention from other components in the storage array. For example, it may be much faster to service a worst-case read request that is directed to a particular storage device by rebuilding the data stored on the particular storage device using RAID or RAID-like data stored on other storage devices in the storage array, rather than allowing the particular storage device to execute a worst-case read operation.</p><p id="p-0094" num="0092">Readers will appreciate that once the I/O performance of the storage device at a particular test point has been measured (<b>1008</b>), profiling I/O performance as a storage device ages may proceed by determining whether additional test points exist. If an additional test point exists (<b>1010</b>), profiling I/O performance of a storage device as the storage device ages may proceed by performing (<b>1006</b>) I/O requests until the storage device has reached a next test point. If no additional test points exist (<b>1012</b>), profiling I/O performance of a storage device as the storage device ages may proceed by creating (<b>1014</b>) one or more rules for handling the I/O performance exhibited at each test point, as described in more detail below.</p><p id="p-0095" num="0093">The example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> also includes creating (<b>1014</b>) one or more rules for handling the I/O performance exhibited at each test point. Creating (<b>1014</b>) one or more rules for handling the I/O performance exhibited at each test point. The one or more rules for handling the I/O performance exhibited at each test point may include, for example, a rule specifying that when a storage device is at 25% of its expected lifecycle, a read request should be serviced through rebuilding the data targeted by the read request using RAID or RAID-like data stored on other storage devices in the storage array when the latency of a pending read request hits a time threshold that matches the slowest 0.0001% of read requests identified during testing of the storage device at 25% of its expected lifecycle. Likewise, the one or more rules for handling the I/O performance exhibited at each test point may include a rule specifying that when a storage device is at 75% of its expected lifecycle, a read request should be serviced through rebuilding the data targeted by the read request using RAID or RAID-like data stored on other storage devices in the storage array when the latency of a pending read request hits a time threshold that matches the slowest 1% of read requests identified during testing of the storage device at 75% of its expected lifecycle. Readers will appreciate that the one or more rules for handling the I/O performance exhibited at each test point may be created (<b>1014</b>) so as to avoid certain situations such as an I/O operation pending for more than a predetermined period of time, and such rules may be used to determine when other components within the storage array should intervene with the servicing of an I/O operation. As such, creating (<b>1014</b>) one or more rules for handling the I/O performance exhibited at each test point may be carried out by evaluating various performance objectives and creating rules that enable a storage system to meet such performance objectives.</p><p id="p-0096" num="0094">Readers will appreciate that while the embodiments described above relate to embodiments where the storage device can be embodied as an SSD that includes NAND flash, the techniques described above can be applied and modified to apply to other technologies. Likewise, profiling the performance of a storage device over its lifecycle and developing rules that enable a storage system to better handle the performance of a storage device over its lifecycle may include additional or fewer steps, which are performed in different order than described above.</p><p id="p-0097" num="0095">Readers will appreciate that although the example methods described above are depicted in a way where a series of steps occurs in a particular order, no particular ordering of the steps is required unless explicitly stated. Example embodiments of the present invention are described largely in the context of a fully functional computer system for rehabilitating storage devices in a storage array that includes a plurality of storage devices. Readers of skill in the art will recognize, however, that the present invention also may be embodied in a computer program product disposed upon computer readable storage media for use with any suitable data processing system. Such computer readable storage media may be any storage medium for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of such media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a computer program product. Persons skilled in the art will recognize also that, although some of the example embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.</p><p id="p-0098" num="0096">The present invention may be a system, a method, and/or a computer program product. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.</p><p id="p-0099" num="0097">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0100" num="0098">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0101" num="0099">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0102" num="0100">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0103" num="0101">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0104" num="0102">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0105" num="0103">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0106" num="0104">Readers will appreciate that the steps described herein may be carried out in a variety ways and that no particular ordering is required. It will be further understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>initiating, on a storage device, execution of a rehabilitative action from a set of rehabilitative actions that can be performed on the storage device;</claim-text><claim-text>determining that the storage device is operating outside of a defined range of expected operating parameters after the rehabilitative action has been executed; and</claim-text><claim-text>initiating execution of a higher level rehabilitative action responsive to determining that the higher level rehabilitative action exists.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>designating the storage device for replacement responsive to determining that the higher level rehabilitative action does not exist.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:<claim-text>determining that the storage device is operating outside of the defined range of expected operating parameters after the higher level rehabilitative action has been executed; and</claim-text><claim-text>designating the storage device for replacement.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>injecting errors into the storage device; and</claim-text><claim-text>determining whether the storage device can recover from the errors.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>maintaining information identifying rehabilitative actions performed on the storage device.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining that the storage device is operating outside of a defined range of expected operating parameters after the rehabilitative action has been executed comprises profiling input/output (&#x2018;I/O&#x2019;) performance on the storage device.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining that the storage device is operating outside of a defined range of expected operating parameters after the rehabilitative action has been executed comprises profiling performance of the storage device responsive to completion of the rehabilitative action.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein initiating, on the storage device, execution of the rehabilitative action from the set of rehabilitative actions that can be performed on the storage device comprises:<claim-text>determining whether an error has occurred that cannot be corrected by one or more lower level rehabilitative actions; and</claim-text><claim-text>responsive to determining that the error has occurred, selecting a rehabilitative action that is at a higher level in the set of rehabilitative actions than the lower level rehabilitative actions.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the higher level rehabilitative action is more disruptive than the rehabilitative action.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the rehabilitative action is intended to improve the performance of the storage device.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. An apparatus that includes a computer memory and a computer processor, the computer memory including computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the steps of:<claim-text>initiating, on a storage device, execution of a rehabilitative action from a set of rehabilitative actions that can be performed on the storage device;</claim-text><claim-text>determining that the storage device is operating outside of a defined range of expected operating parameters after the rehabilitative action has been executed; and</claim-text><claim-text>initiating execution of a higher level rehabilitative action responsive to determining that the higher level rehabilitative action exists.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the step of:<claim-text>designating the storage device for replacement responsive to determining that the higher level rehabilitative action does not exist.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the steps of:<claim-text>determining that the storage device is operating outside of the defined range of expected operating parameters after the higher level rehabilitative action has been executed; and</claim-text><claim-text>designating the storage device for replacement.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the steps of:<claim-text>injecting errors into the storage device; and</claim-text><claim-text>determining whether the storage device can recover from the errors.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the step of:<claim-text>maintaining information identifying rehabilitative actions performed on the storage device.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein determining that the storage device is operating outside of a defined range of expected operating parameters after the rehabilitative action has been executed comprises profiling input/output (&#x2018;I/O&#x2019;) performance on the storage device.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein determining that the storage device is operating outside of a defined range of expected operating parameters after the rehabilitative action has been executed comprises profiling performance of the storage device responsive to completion of the rehabilitative action.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein initiating, on the storage device, execution of the rehabilitative action from the set of rehabilitative actions that can be performed on the storage device comprises:<claim-text>determining whether an error has occurred that cannot be corrected by one or more lower level rehabilitative actions; and</claim-text><claim-text>responsive to determining that the error has occurred, selecting a rehabilitative action that is at a higher level in the set of rehabilitative actions than the lower level rehabilitative actions.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the higher level rehabilitative action is more disruptive than the rehabilitative action.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A computer program product disposed upon a computer readable medium, the computer program product comprising computer program instructions that, when executed, cause a computer to carry out the steps of:<claim-text>initiating, on a storage device, execution of a rehabilitative action from a set of rehabilitative actions that can be performed on the storage device;</claim-text><claim-text>determining that the storage device is operating outside of a defined range of expected operating parameters after the rehabilitative action has been executed; and</claim-text><claim-text>initiating execution of a higher level rehabilitative action responsive to determining that the higher level rehabilitative action exists.</claim-text></claim-text></claim></claims></us-patent-application>