<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004361A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004361</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17853821</doc-number><date>20220629</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>KR</country><doc-number>10-2021-0085708</doc-number><date>20210630</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e61">CODE INSPECTION INTERFACE PROVIDING METHOD AND APPARATUS FOR IMPLEMENTING THE METHOD</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SAMSUNG SDS CO., LTD.</orgname><address><city>Seoul</city><country>KR</country></address></addressbook><residence><country>KR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>MOON</last-name><first-name>Hyung Suk</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>PARK</last-name><first-name>Hee Cheol</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>JHI</last-name><first-name>Yoon Chan</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>LEE</last-name><first-name>Jong Hwan</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A code inspection interface providing method according to an embodiment of this disclosure includes providing a graphical user interface (GUI) for performing code inspection, executing an analysis routine on an inspection target code when the inspection target code is selected through the GUI, and providing the result of executing the analysis routine. The analysis routine may include an operation of extracting an abstract syntax tree includes a plurality of nodes from the inspection target code. A code inspection interface providing method is capable of providing an interface that can analyze a code and detect a security vulnerability in real time regardless of the language version of the code and an apparatus for implementing the method.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="138.01mm" wi="136.48mm" file="US20230004361A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="152.99mm" wi="138.51mm" file="US20230004361A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="109.14mm" wi="128.44mm" file="US20230004361A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="124.21mm" wi="134.11mm" file="US20230004361A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="163.58mm" wi="137.33mm" file="US20230004361A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="159.17mm" wi="134.62mm" file="US20230004361A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="177.72mm" wi="130.73mm" file="US20230004361A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="78.91mm" wi="141.73mm" file="US20230004361A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="223.86mm" wi="68.16mm" orientation="landscape" file="US20230004361A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="222.59mm" wi="114.89mm" orientation="landscape" file="US20230004361A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="191.52mm" wi="88.90mm" orientation="landscape" file="US20230004361A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="222.59mm" wi="87.97mm" orientation="landscape" file="US20230004361A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="188.38mm" wi="131.23mm" orientation="landscape" file="US20230004361A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="129.54mm" wi="118.36mm" file="US20230004361A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="144.02mm" wi="132.93mm" file="US20230004361A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="111.59mm" wi="139.28mm" file="US20230004361A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="113.28mm" wi="103.63mm" file="US20230004361A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="148.51mm" wi="126.92mm" file="US20230004361A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION AND CLAIM OF PRIORITY</heading><p id="p-0002" num="0001">This application claims the benefit under 35 USC &#xa7; 119 of Korean Patent Application No. 10-2021-0085708, filed on Jun. 30, 2021, in the Korean Intellectual Property Office, the entire disclosure of which is incorporated herein by reference for all purposes.</p><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">1. Field</heading><p id="p-0003" num="0002">The present disclosure relates to a code inspection interface providing method and an apparatus for implementing the method, and more particularly, to a code inspection interface providing method for providing an interface for analyzing whether a code complies with a rule and/or analyzing security vulnerabilities and an apparatus for implementing the method.</p><heading id="h-0004" level="1">2. Description of the Related Art</heading><p id="p-0004" num="0003">Commercial and enterprise software generally requires a high level of security and is often required to comply with unique code writing rules set by a developer or user of the software.</p><p id="p-0005" num="0004">In the case of programs written in the most widely used programming languages such as C language, JAVA language and Python, analysis tools for analyzing whether a code complies with a rule and/or analyzing security vulnerabilities have been provided.</p><p id="p-0006" num="0005">However, the functions and utilization of a tool for inspecting a program code executed in conjunction with SAP, which is enterprise resource planning (ERP) for enterprises, and implemented in an advanced business application programming (ABAP) language are very limited.</p><p id="p-0007" num="0006">For example, if a grammar is changed as the ABAP language is upgraded, a new tool for code inspection has to be implemented.</p><p id="p-0008" num="0007">In addition, it takes a long time to detect a security vulnerability in a code, and it is difficult to analyze the security vulnerability in real time. Moreover, if a security vulnerability detection function is executed in a code analysis environment, there is a possibility that a security problem will occur.</p><p id="p-0009" num="0008">Therefore, there is a need for a technology that can analyze a code regardless of the language version of the code and detect a security vulnerability in real time at the same time as the development of the code.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0010" num="0009">Aspects of the present disclosure provide a code inspection interface providing method capable of providing an interface that can analyze a code and detect a security vulnerability in real time regardless of the language version of the code and an apparatus for implementing the method.</p><p id="p-0011" num="0010">Aspects of the present disclosure also provide a code inspection interface providing method capable of reducing development time by providing an environment in which security vulnerabilities can be analyzed and corrected in real time at the same time as the development of a code and an apparatus for implementing the method.</p><p id="p-0012" num="0011">Aspects of the present disclosure also provide a code inspection interface providing method capable of providing an accurate analysis result by setting a flexible rule set applicable according to a development environment and user settings, and an apparatus for implementing the method.</p><p id="p-0013" num="0012">However, aspects of the present disclosure are not restricted to the one set forth herein. The above and other aspects of the present disclosure will become more apparent to one of ordinary skill in the art to which the present disclosure pertains by referencing the detailed description of the present disclosure given below.</p><p id="p-0014" num="0013">In some embodiments, a code inspection interface providing method performed by a computing apparatus may comprise, providing a graphical user interface (GUI) for performing code inspection, executing an analysis routine on an inspection target code when the inspection target code is selected through the GUI and providing the result of executing the analysis routine, wherein the analysis routine comprises an operation of extracting an abstract syntax tree comprised of a plurality of nodes from the inspection target code.</p><p id="p-0015" num="0014">In some embodiments, the analysis routine may comprise a first analysis routine implemented in a first programming language and a second analysis routine implemented in a second programming language. The first analysis routine may comprise an operation of extracting an abstract syntax tree comprised of a plurality of nodes from the selected inspection target node and an operation of providing the extracted abstract syntax tree as an input to the second analysis routine, and the second analysis routine may comprise an operation of analyzing the inspection target code using at least a part of the abstract syntax tree provided by the first analysis routine.</p><p id="p-0016" num="0015">In some embodiments, the providing of the result of executing the analysis routine may comprise providing action guide information for the inspection target code based on the result of executing the analysis routine.</p><p id="p-0017" num="0016">In some embodiments, the providing of the GUI for performing code inspection may comprise displaying a first GUI for receiving an input for selecting the inspection target code, a second GUI for receiving an input for setting a rule set used by the analysis routine, and a third GUI for providing the result of executing the analysis routine.</p><p id="p-0018" num="0017">In some embodiments, the executing of the analysis routine on the inspection target code may comprise identifying a code section violating at least a part of a preset rule set from the inspection target code.</p><p id="p-0019" num="0018">In some embodiments, A code inspection interface providing apparatus may comprise: one or more processors; a communication interface communicating with an external device; a memory loading a computer program to be executed by the processors; and a storage storing the computer program, The computer program may comprise instructions for performing an operation of providing a GUI for performing code inspection, an operation of executing an analysis routine on an inspection target code when the inspection target code is selected through the GUI, and an operation of providing the result of executing the analysis routine, wherein the analysis routine extracts an abstract syntax tree comprised of a plurality of nodes from the inspection target code.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0020" num="0019">These and/or other aspects will become apparent and more readily appreciated from the following description of the embodiments, taken in conjunction with the accompanying drawings in which:</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a conceptual diagram for explaining embodiments of the present disclosure;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of a code inspection interface providing apparatus according to an embodiment of the present disclosure;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a code inspection interface providing method according to an embodiment of the present disclosure;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example illustrating an operation flow of an interface and a first analysis routine providing apparatus and a second analysis routine providing apparatus according to embodiments of the present disclosure;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example illustrating a rule compliance checking process of a code inspection interface providing apparatus according to embodiments of the present disclosure;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example illustrating a security analysis process according to embodiments of the present disclosure;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a table showing an exemplary category configuration of rule sets according to embodiments of the present disclosure;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example in which priority and severity attributes are given to each rule according to embodiments of the present disclosure;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is an example of calculating a rule violation score based on a code analysis result according to embodiments of the present disclosure;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is an example of an interface for selecting an inspection target code according to embodiments of the present disclosure;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is an example of an interface for providing a code analysis result according to embodiments of the present disclosure;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is an example of an interface for providing an action guide based on a code analysis result according to embodiments of the present disclosure;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIGS. <b>13</b> through <b>16</b></figref> are examples illustrating the flow of an operation of detecting whether exemplary rules applied for code analysis are violated according to embodiments of the present disclosure; and</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates the hardware configuration of an exemplary computing apparatus capable of implementing methods according to embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION</heading><p id="p-0035" num="0034">Hereinafter, preferred embodiments of the present disclosure will be described with reference to the attached drawings. Advantages and features of the present disclosure and methods of accomplishing the same may be understood more readily by reference to the following detailed description of preferred embodiments and the accompanying drawings. The present disclosure may, however, be embodied in many different forms and should not be construed as being limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the concept of the disclosure to those skilled in the art, and the present disclosure will only be defined by the appended claims.</p><p id="p-0036" num="0035">In adding reference numerals to the components of each drawing, it should be noted that the same reference numerals are assigned to the same components as much as possible even though they are shown in different drawings. In addition, in describing the present disclosure, when it is determined that the detailed description of the related well-known configuration or function may obscure the gist of the present disclosure, the detailed description thereof will be omitted.</p><p id="p-0037" num="0036">Unless otherwise defined, all terms used in the present specification (including technical and scientific terms) may be used in a sense that can be commonly understood by those skilled in the art. In addition, the terms defined in the commonly used dictionaries are not ideally or excessively interpreted unless they are specifically defined clearly. The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the disclosure. In this specification, the singular also includes the plural unless specifically stated otherwise in the phrase.</p><p id="p-0038" num="0037">In addition, in describing the component of this disclosure, terms, such as first, second, A, B, (a), (b), can be used. These terms are only for distinguishing the components from other components, and the nature or order of the components is not limited by the terms. If a component is described as being &#x201c;connected,&#x201d; &#x201c;coupled&#x201d; or &#x201c;contacted&#x201d; to another component, that component may be directly connected to or contacted with that other component, but it should be understood that another component also may be &#x201c;connected,&#x201d; &#x201c;coupled&#x201d; or &#x201c;contacted&#x201d; between each component.</p><p id="p-0039" num="0038">Hereinafter, embodiments of the present disclosure will be described in detail with reference to the accompanying drawings.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a conceptual diagram for explaining embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a code inspection interface providing apparatus <b>1</b> according to an embodiment of the present disclosure provides an interface through which a developer can perform code analysis while developing a program and receive the result of code analysis.</p><p id="p-0041" num="0040">First, the code inspection interface providing apparatus <b>1</b> receives selection of an inspection target code through a graphical user interface (GUI) provided to a developer's terminal device (operation <b>1010</b>) and executes an analysis routine on the selected inspection target code (operation <b>1011</b>). Here, the analysis routine may include a first analysis routine <b>1012</b> and a second analysis routine <b>1014</b> capable of analyzing the inspection target code based on different types of rule sets. For example, the first analysis routine <b>1012</b> may analyze the inspection target code by applying a rule set belonging to a category such as architecture, coding, develop rule, performance or dump, and the second analysis routine <b>1014</b> may analyze the inspection target code by applying a rule set related to security vulnerability.</p><p id="p-0042" num="0041">The first analysis routine <b>1012</b> and the second analysis routine <b>1014</b> may be implemented in different programming languages, and the programming language used for the first analysis routine <b>1012</b> may be the same as the programming language used for writing the inspection target code. For example, when the inspection target code is an advanced business application programming (ABAP) language of SAP, the first analysis routine <b>1012</b> may be implemented in the ABAP language, and the second analysis routine <b>1014</b> may be implemented in the JAVA language or the like.</p><p id="p-0043" num="0042">The first analysis routine <b>1012</b> may extract an abstract syntax tree (AST) from the inspection target code and analyze the inspection target code based on the extracted abstract syntax tree.</p><p id="p-0044" num="0043">The second analysis routine <b>1014</b> may receive the abstract syntax tree extracted by the first analysis routine <b>1012</b>, analyze the inspection target code using at least a part of the received abstract syntax tree, and output the analysis result to the first analysis routine <b>1012</b>.</p><p id="p-0045" num="0044">When the executing of the analysis routine (operation <b>1011</b>) by the first analysis routine <b>1012</b> and the second analysis routine <b>1014</b> is completed as described above, the result of executing the analysis routine is provided through the GUI (operation <b>1015</b>). Here, the result of executing the analysis routine may include details of a code section identified from the inspection target code as violating at least a part of the rule set applied to the first analysis routine <b>1012</b> and the second analysis routine <b>1014</b>. For example, the result of executing the analysis routine may include the type of an object included in the inspection target code, the name of the object, a violated rule, a source location, and an action guide. Here, the type of the object may be classified as, for example, PROG, FUNC, CLAS, ENQU, REPS, TYPE, or VIEW.</p><p id="p-0046" num="0045">In addition, the result of executing the analysis routine may show the number of rule violations according to severity attribute. For example, in giving a severity attribute classified as error, warning, or information to each rule and providing the result of executing the analysis routine, the number of rule violations may be aggregated and provided for each of error, warning, and information. Here, a rule violation score may be calculated using the number of rule violations corresponding to error and warning, and the scope of actions for the inspection target code may be determined depending on whether the calculated rule violation score is greater than or equal to a standard value.</p><p id="p-0047" num="0046">As described above, the code inspection interface providing apparatus <b>1</b> according to the embodiment of the present disclosure can provide an interface capable of analyzing a code and detecting a security vulnerability in real time regardless of the language version of the code. In addition, the code inspection interface providing apparatus <b>1</b> can provide an environment in which security vulnerabilities can be analyzed and corrected in real time at the same time as the development of the code.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of a code inspection interface providing apparatus <b>1</b> according to an embodiment of the present disclosure. The code inspection interface providing apparatus <b>1</b> according to the embodiment of the present disclosure may include a communication unit <b>16</b>, a storage unit <b>17</b> and a processor <b>11</b> and may be connected to a user terminal <b>10</b> through the communication unit <b>16</b>.</p><p id="p-0049" num="0048">The code inspection interface providing apparatus <b>1</b> may be an apparatus for providing an interface capable of performing a series of operations for code analysis and may be implemented as, for example, a computing apparatus such as a server or a PC.</p><p id="p-0050" num="0049">The communication unit <b>16</b> communicates with the user terminal <b>10</b> using a wired or wireless communication method. The communication unit <b>16</b> may communicate with the user terminal <b>10</b> using a wired communication method such as Ethernet or communicates with the user terminal <b>10</b> using a wireless communication method such as Wi-Fi or Bluetooth. The communication method of the communication unit <b>16</b> is not limited to the above methods, and the communication unit <b>16</b> may also communicate using other communication methods.</p><p id="p-0051" num="0050">The storage unit <b>17</b> may store information about a rule set used for an analysis routine of an inspection target code and information about the result of executing the analysis routine on the inspection target code. In addition, the storage unit <b>17</b> may store action guide information according to rule violation details, reference information for action exception handling, and information about rule violation score calculation standards.</p><p id="p-0052" num="0051">The processor <b>11</b> may include a GUI generation module <b>12</b>, a first analysis module <b>13</b> and a second analysis module <b>14</b> and may further include an additional module related to the provision of the result of analyzing an inspection target code. Although the GUI generation module <b>12</b>, the first analysis module <b>13</b>, and the second analysis module <b>14</b> are included in the same device in the illustrated example, they may also run on different devices.</p><p id="p-0053" num="0052">The GUI generation module <b>12</b> provides a GUI for performing code inspection. The GUI generation module <b>12</b> may generate a GUI related to selection, analysis, and result provision of an inspection target code and provide the GUI to a developer's terminal device.</p><p id="p-0054" num="0053">In an embodiment, the GUI generation module <b>12</b> may generate and provide a first GUI for receiving an input for selecting an inspection target code, a second GUI for receiving an input for setting a rule set used by an analysis routine, and a third GUI for providing the result of executing the analysis routine.</p><p id="p-0055" num="0054">The first analysis module <b>13</b> executes a first analysis routine on an inspection target code selected through a GUI provided by the GUI generation module <b>12</b>. The first analysis routine may include an operation of extracting an abstract syntax tree composed of a plurality of nodes from the inspection target code selected through the GUI and an operation of analyzing the inspection target code based on the extracted abstract syntax tree.</p><p id="p-0056" num="0055">Here, the first analysis routine may apply a preset rule when analyzing the inspection target code based on the abstract syntax tree and identify a code section violating at least a part of the preset rule set from the inspection target code.</p><p id="p-0057" num="0056">The first analysis module <b>13</b> may input the abstract syntax tree extracted by the first analysis routine to the second analysis module <b>14</b> so that the inspection target code can be further analyzed.</p><p id="p-0058" num="0057">The second analysis module <b>14</b> executes a second analysis routine on the inspection target code by using at least a part of the abstract syntax tree received from the first analysis module <b>13</b>.</p><p id="p-0059" num="0058">The second analysis routine may identify a code section violating at least a part of an applied rule set from the inspection target code by applying the rule set different from the rule set applied by the first analysis routine. For example, the first analysis routine may analyze the inspection target code by applying a rule set belonging to a category such as architecture, coding, develop rule, performance or dump, and the second analysis routine may analyze the inspection target code by applying a rule set related to security vulnerability.</p><p id="p-0060" num="0059">The second analysis module <b>14</b> may output the analysis result of the second analysis routine to the first analysis module <b>13</b>.</p><p id="p-0061" num="0060">The processor <b>11</b> provides the result of executing an analysis routine on the inspection target code, which is output from each of the first analysis module <b>13</b> and the second analysis module <b>14</b>, through a GUI.</p><p id="p-0062" num="0061">The result of executing the analysis routine may include details of a code section identified from the inspection target code as violating at least a part of the rule set applied to each of the first analysis routine and the second analysis routine. In addition, the result of executing the analysis routine may include the number of rule violations aggregated by severity attribute of each rule classified as error, warning, or information. In addition, the result of executing the analysis routine may include a rule violation score calculated using the number of rule violations corresponding to error and warning.</p><p id="p-0063" num="0062">In addition, the processor <b>11</b> may provide action guide information for each code section identified as violating at least a part of the rule set applied to an analysis routine by using the result of executing the analysis routine provided as described above.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a code inspection interface providing method according to an embodiment of the present disclosure.</p><p id="p-0065" num="0064">The code inspection interface providing method according to the embodiment of the present disclosure may be performed by a computing apparatus <b>100</b>, for example, by a code inspection interface providing apparatus <b>1</b>. The computing apparatus <b>100</b> performing the method according to the current embodiment may be a computing apparatus having an application program execution environment. It should be noted that a subject performing some operations included in the method according to the embodiment of the present disclosure may not be specified, in which case the subject is the computing apparatus <b>100</b>.</p><p id="p-0066" num="0065">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, first, a GUI for performing code inspection is provided in operation S<b>41</b>.</p><p id="p-0067" num="0066">As an embodiment, operation S<b>41</b> may include an operation of displaying a first GUI for receiving an input for selecting an inspection target code, a second GUI for receiving an input for setting a rule set used by an analysis routine for the inspection target code, and a third GUI for providing the result of executing the analysis routine.</p><p id="p-0068" num="0067">As an embodiment, operation S<b>41</b> may include an operation of providing a GUI for adding a new rule to the rule set used by the analysis routine, deleting an unused rule, and updating a rule.</p><p id="p-0069" num="0068">Next, in operation S<b>42</b>, when an inspection target code is selected through a GUI, an analysis routine is executed on the inspection target code. Here, the analysis routine includes an operation of extracting an abstract syntax tree composed of a plurality of nodes from the inspection target code. Since the abstract syntax tree is extracted from the inspection target code and a detailed analysis routine is executed using the extracted abstract syntax tree, even if the language version of the inspection target code is changed, there is no need to modify the detailed analysis routine, or the weight of the code to be modified may be reduced.</p><p id="p-0070" num="0069">As an embodiment, the analysis routine may include a first analysis routine implemented in a first programming language and a second analysis routine implemented in a second programming language. Here, the first analysis routine may include an operation of extracting an abstract syntax tree composed of a plurality of nodes from the selected inspection target code, an operation of providing the extracted abstract syntax tree as an input to the second analysis routine, and an operation of analyzing the inspection target code using at least a part of the abstract syntax tree. The second analysis routine may include an operation of analyzing the inspection target code using at least a part of the abstract syntax tree provided by the first analysis routine.</p><p id="p-0071" num="0070">As an embodiment, the first programming language may be a programming language used to write the inspection target code. For example, when the inspection target code is written in the ABAP language of SAP, the first analysis routine may be implemented in the ABAP language, and the second analysis routine may be implemented in the JAVA language.</p><p id="p-0072" num="0071">As an embodiment, operation S<b>42</b> may include an operation of identifying a code section violating at least a part of a preset rule set from the inspection target code.</p><p id="p-0073" num="0072">As an embodiment, in operation S<b>42</b>, the operation of identifying the code section may include an operation of generating a control flow graph showing an execution order of the inspection target code based on the abstract syntax tree and an operation of converting the inspection target code into an intermediate representation based on the abstract syntax tree.</p><p id="p-0074" num="0073">In addition, in operation S<b>42</b>, the operation of identifying the code section may include an operation of identifying a code section violating at least a part of the preset rule set based on the result of analyzing a call relationship between functions included in the inspection target code, a variable value used at a specific time, and a point where a change has occurred by an external input value.</p><p id="p-0075" num="0074">As an embodiment, operation S<b>42</b> may include an operation of selecting a rule subset to be applied to the analysis routine from among the preset rule set by using a priority attribute given to each rule. Here, the priority attribute given to each rule may be, for example, I level (high), II level (medium), or III level (low) according to the importance of the rule, and the rule subset to be applied to the analysis routine may be selected only from a priority attribute of, for example, I level (high).</p><p id="p-0076" num="0075">As an embodiment, operation S<b>42</b> may include an operation of identifying a code section violating a first rule for detecting a prohibited statement. For example, a sentence in which a macro is declared may be detected from the inspection target code based on the first rule, and whether at least one of a list of pre-stored prohibited statements has been used in the sentence in which the macro is declared may be detected.</p><p id="p-0077" num="0076">As an embodiment, operation S<b>42</b> may include an operation of identifying a code section violating a second rule for handling an exception of a remote function communication (RFC) function. For example, whether an exception related to the RFC function has been registered in the inspection target code may be identified based on the second rule, whether a RAISE Exception statement exists in a code section corresponding to the RFC function may be identified, and, if the RAISE Exception statement does not exist, whether the RAISE Exception statement exists in Include within Function Group may be identified.</p><p id="p-0078" num="0077">As an embodiment, operation S<b>42</b> may include an operation of identifying a code section violating a third rule for checking whether ENQUEUE and DEQUEUE are used in the RFC function. For example, whether a data manipulation language (DML) statement is used in a code section corresponding to the RFC function in the inspection target code may be identified based on the third rule, and if the DML statement is used, whether a character string &#x2018;ENQUEUE_E*&#x2019; exists may be identified.</p><p id="p-0079" num="0078">As an embodiment, operation S<b>42</b> may include an operation of identifying a code section violating a fourth rule for detecting buffering of a view in which two or more tables are joined. For example, when the type of the inspection target code is a view, whether the view exists in a database may be identified based on the fourth rule, and if joined tables exist in the view, whether buffering has been set in the view may be identified.</p><p id="p-0080" num="0079">The first through fourth rules will be described in more detail with reference to <figref idref="DRAWINGS">FIGS. <b>14</b> through <b>17</b></figref>.</p><p id="p-0081" num="0080">Finally, in operation S<b>43</b>, the result of executing the analysis routine is provided. Here, the result of executing the analysis routine may include details of a code section identified from the inspection target code as violating at least some rules of the rule set applied to the analysis routine. In addition, the result of executing the analysis routine may include the number of rule violations aggregated by severity attribute of each rule classified as error, warning, or information. In addition, the result of executing the analysis routine may include a rule violation score calculated using the number of rule violations corresponding to error and warning.</p><p id="p-0082" num="0081">As an embodiment, operation S<b>43</b> may include an operation of providing action guide information for the inspection target code based on the result of executing the analysis routine.</p><p id="p-0083" num="0082">In the method according to the embodiment of the present disclosure described above, it is possible to provide an interface capable of analyzing a code and detecting a security vulnerability in real time regardless of the language version of the code. In addition, it is possible to reduce development time by providing an environment in which security vulnerabilities can be analyzed and corrected in real time at the same time as the development of the code.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example illustrating an operation flow of an interface and a first analysis routine providing apparatus <b>2</b> and a second analysis routine providing apparatus <b>3</b> according to embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the interface and the first analysis routine providing apparatus <b>2</b> perform a series of operations of analyzing an inspection target code by executing a code inspection program. The second analysis routine providing apparatus <b>3</b> performs security analysis on the inspection target code when receiving a security analysis request from the interface and the first analysis routine providing apparatus <b>2</b> and provides the result of the security analysis to the interface and the first analysis routine providing apparatus <b>2</b>.</p><p id="p-0085" num="0084">In the illustrated example, when the interface and the first analysis routine providing apparatus <b>2</b> execute a code inspection program (operation S<b>21</b>), a security analysis request is transmitted to the second analysis routine providing apparatus <b>3</b> through a security engine execution call (operation S<b>22</b>). Here, information required for analysis such as an object type, an object name, a list of applied rules, a server ID, an analysis timeout per object, and an analysis ID may be transmitted.</p><p id="p-0086" num="0085">The second analysis routine providing apparatus <b>3</b> returns an &#x2018;OK&#x2019; value as a result of receiving the security analysis request and, when starting security analysis (operation S<b>31</b>), requests the interface and the first analysis routine providing apparatus <b>2</b> to extract an abstract syntax tree.</p><p id="p-0087" num="0086">The interface and the first analysis routine providing apparatus <b>2</b> extract the abstract syntax tree from the inspection target code (operation S<b>23</b>) at the request of the second analysis routine providing apparatus <b>3</b> and return the result to the second analysis routine providing apparatus <b>3</b>.</p><p id="p-0088" num="0087">The interface and the first analysis routine providing apparatus <b>2</b> may perform code analysis using the extracted abstract syntax tree (operation S<b>24</b>) and, at this time, may identify a code section violating at least a part of a preset rule set <b>241</b>.</p><p id="p-0089" num="0088">The second analysis routine providing apparatus <b>3</b> may also perform security analysis (operation S<b>33</b>) using the result of extracting the abstract syntax tree (operation S<b>32</b>) received from the interface and the first analysis routine providing apparatus <b>2</b> and, at this time, may identify a code section violating at least a part of a preset security rule set <b>331</b>.</p><p id="p-0090" num="0089">When completing the code analysis (operation S<b>24</b>), the interface and the first analysis routine providing apparatus <b>2</b> store the result of performing the code analysis (operation S<b>25</b>) and request the second analysis routine providing apparatus <b>3</b> to provide the result of performing the security analysis (operation S<b>33</b>).</p><p id="p-0091" num="0090">When completing the security analysis (operation S<b>33</b>), the second analysis routine providing apparatus <b>3</b> stores the result of performing the security analysis (operation S<b>34</b>) and then returns the result to the interface and the first analysis routine providing apparatus <b>2</b> and ends the security analysis (operation S<b>35</b>).</p><p id="p-0092" num="0091">The interface and first analysis routine providing apparatus <b>2</b> aggregate results using the stored code analysis result and the security analysis result returned from the second analysis routine providing apparatus <b>3</b> (operation S<b>26</b>) and then terminate the code inspection program (operation S<b>27</b>). Here, a rule violation score may be calculated from the code analysis result and the security analysis result by using a score calculation standard <b>261</b>. For example, the rule violation score may be calculated using the number of rule violations corresponding to error and warning and a ratio of the total number of lines of the code to the number of reference lines.</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example illustrating a rule compliance checking process of a code inspection interface providing apparatus according to embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, when performing code analysis (operation S<b>24</b>), the interface and the first analysis routine providing apparatus <b>2</b> may search for a rule set to be applied with reference to pre-stored rule sets <b>241</b> (operation S<b>241</b>) and detect a code section violating at least a part of the rule set from an inspection target code by using the found rule set (operation S<b>242</b>). Here, a line number of a code section violating a rule may be extracted.</p><p id="p-0094" num="0093">When aggregating the results of the code analysis (operation S<b>26</b>), the interface and the first analysis routine providing apparatus <b>2</b> may calculate a rule violation score with reference to a score calculation standard <b>261</b> (operation S<b>261</b>) and search for an action guide for each code section violating a rule with reference to action guide information <b>262</b> (operation S<b>262</b>).</p><p id="p-0095" num="0094">The interface and the first analysis routine providing apparatus <b>2</b> may perform action exception handling (operation S<b>2431</b>) in the process of performing code analysis (operation S<b>24</b>) and aggregating the results (operation S<b>26</b>). That is, a rule stored as action exception information <b>2611</b> may be excluded from rule violation score calculation through action exception management (operation S<b>2611</b>).</p><p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example illustrating a security analysis process according to embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, when performing security analysis (operation S<b>33</b>), the second analysis routine providing apparatus <b>3</b> may generate a control flow graph showing an execution order of an inspection target code (operation S<b>331</b>) using an abstract syntax tree received from the interface and the first analysis routine providing apparatus <b>2</b> (operation S<b>321</b>) and convert the inspection target code into an internal representation (operation S<b>332</b>).</p><p id="p-0097" num="0096">Using the control flow graph and the converted inspection target code, the second analysis routine providing apparatus <b>3</b> may analyze a call relationship between functions included in the inspection target code (operation S<b>333</b>), analyze a variable value used at a specific time (operation S<b>334</b>) and perform taint analysis on a point where a change has occurred by an external input value (operation S<b>335</b>) and identify a code section violating some rules of a preset security rule set <b>331</b> from the analysis result (operation S<b>336</b>).</p><p id="p-0098" num="0097">Due to the above operation of the interface and the first analysis routine providing apparatus <b>2</b> and the second analysis routine providing apparatus <b>3</b> according to the embodiment of the present disclosure, it is possible to provide an environment in which security vulnerabilities can be analyzed and corrected in real time at the same time as the development of a code. In addition, it is possible to provide an accurate analysis result by setting a flexible rule set applicable according to a development environment and user settings.</p><p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a table showing an exemplary category configuration of rule sets according to embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, an analysis routine executed by the interface and the first analysis routine providing apparatus <b>2</b> and the second analysis routine providing apparatus <b>3</b> may perform analysis by applying a preset rule set.</p><p id="p-0100" num="0099">As in the illustrated example, rule sets may be classified into a plurality of categories such as architecture, coding, develop rule, performance, dump, and vulnerability.</p><p id="p-0101" num="0100">In this case, a rule set corresponding to each category may include a plurality of rules classified into error, warning, and information.</p><p id="p-0102" num="0101">The interface and the first analysis routine providing apparatus <b>2</b> and the second analysis routine providing apparatus <b>3</b> may execute an analysis routine on an inspection target code by applying rule sets belonging to different categories. For example, the second analysis routine providing apparatus <b>3</b> may perform analysis by applying only a rule set related to security vulnerability, and the interface and the first analysis routine providing apparatus <b>2</b> may perform analysis by applying a rule set other than the rule set applied by the second analysis routine providing apparatus <b>3</b>.</p><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example in which priority and severity attributes are given to each rule according to embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, a priority attribute and a severity attribute may be given to each rule included in rule sets belonging to different categories. For example, a priority attribute such as I level (high), II level (medium), or III level (low) may be given to each rule according to the importance of the rule. In addition, a severity attribute such as error, warning, or information may be given to each rule.</p><p id="p-0104" num="0103">As an embodiment, when executing an analysis routine on an inspection target code, the code inspection interface providing apparatus <b>1</b> may select a rule subset to be applied to the analysis routine from among a preset rule set by using the priority attribute.</p><p id="p-0105" num="0104">As an embodiment, when providing the result of executing the analysis routine on the inspection target code, the code inspection interface providing apparatus <b>1</b> may classify and provide results by severity attribute of each rule.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is an example of calculating a rule violation score based on a code analysis result according to embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the code inspection interface providing apparatus <b>1</b> may provide a GUI for displaying the result of executing an analysis routine on an inspection target code.</p><p id="p-0107" num="0106">Here, details of a code section identified as violating a rule from the inspection target code may be displayed on the GUI. For example, information about an object type, an object name, the number of rule violations <b>51</b> corresponding to error, the number of violations <b>52</b> corresponding to warning, the total number of lines <b>53</b>, and a rule violation score <b>54</b> may be displayed.</p><p id="p-0108" num="0107">The rule violation score <b>54</b> may be calculated using a score calculation standard <b>55</b>, and the score calculation standard <b>55</b> may be calculated using the numbers of rule violations <b>51</b> and <b>52</b> corresponding to error and warning and a ratio PER of the total number of lines <b>53</b> to the reference number of lines.</p><p id="p-0109" num="0108"><figref idref="DRAWINGS">FIGS. <b>10</b> through <b>12</b></figref> are examples of an interface according to embodiments of the present disclosure.</p><p id="p-0110" num="0109">The example illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref> is a GUI for receiving an input for selecting an inspection target code and provides an interface for selecting an object type and object name to be analyzed and a rule set to be applied.</p><p id="p-0111" num="0110">The example illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref> is a GUI for providing the result of executing an analysis routine on an inspection target code and provides an interface for displaying summary information <b>61</b> of the execution result and details <b>62</b> of a code section identified as violating a rule from the execution result.</p><p id="p-0112" num="0111">The example illustrated in <figref idref="DRAWINGS">FIG. <b>12</b></figref> is a GUI for providing an action guide according to the result of executing an analysis routine on an inspection target code. When the number of a code section identified as violating a rule is selected (indicated by reference numeral <b>71</b>), a pop-up screen <b>72</b> displaying a source code of the code section is provided. When an action guide icon <b>73</b> for the selected code section is selected, a pop-up screen <b>74</b> displaying action guide information for the rule violated by the code section is provided.</p><p id="p-0113" num="0112"><figref idref="DRAWINGS">FIGS. <b>13</b> through <b>16</b></figref> are examples illustrating the flow of an operation of detecting whether exemplary rules applied for code analysis are violated according to embodiments of the present disclosure.</p><p id="p-0114" num="0113">Referring to <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the code inspection interface providing apparatus <b>1</b> may perform an operation of identifying a code section that violates a first rule for detecting a prohibited statement.</p><p id="p-0115" num="0114">Here, the first rule may be applied when code analysis is performed to detect whether any of a list of managed prohibited statements has been used in a macro. This means that by applying the first rule, it is possible to prevent a rule set for detecting a prohibited statement from being avoided only for development efficiency in a development process and possible to guarantee compliance with development standard rules.</p><p id="p-0116" num="0115">For example, when a rule that prohibits the use of a SELECT statement in a repetitive statement for the sake of program performance is applied, if the SELECT statement is used in a macro statement, analysis is not possible because the existing token analyzer cannot return the SELECT statement in the repetitive statement as a token. The first rule is a rule used to compensate for this limitation and easily detect the use of a prohibited statement in a macro.</p><p id="p-0117" num="0116">The operation of identifying a code section by applying the first rule described above includes the following detailed operations.</p><p id="p-0118" num="0117">First, in operation S<b>141</b>, a sentence in which a macro is declared is detected in an inspection target code. Here, operation S<b>141</b> may include an operation of determining whether the type of the inspection target code is any one of Executable Program, Modulepool Program, Function Group, Class, and Include Program.</p><p id="p-0119" num="0118">Next, in operation S<b>142</b>, it is detected whether at least one of a list of pre-stored prohibited statements has been used in the sentence in which the macro is declared. Accordingly, when the final result is returned in operation S<b>143</b>, a code section violating the first rule may be identified.</p><p id="p-0120" num="0119">Referring to <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the code inspection interface providing apparatus <b>1</b> may perform an operation of identifying a code section that violates a second rule for handling an exception of an RFC function. Here, the second rule may be applied when code analysis is performed to prevent an error or dump that may occur in remote function communication with an external system.</p><p id="p-0121" num="0120">The operation of identifying a code section by applying the second rule described above includes the following detailed operations.</p><p id="p-0122" num="0121">Specifically, it is identified whether an exception related to the RFC function has been registered in an inspection target code in operation S<b>151</b>. Then, it is identified whether a RAISE Exception statement exists in a code section corresponding to the RFC function in operation S<b>152</b>. Next, in operation S<b>153</b>, if the RAISE Exception statement does not exist, it is identified whether the RAISE Exception statement exists in Include within Function Group. Accordingly, when the final result is returned in operation S<b>154</b>, a code section violating the second rule may be identified.</p><p id="p-0123" num="0122">Referring to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, the code inspection interface providing apparatus <b>1</b> may perform an operation of identifying a code section that violates a third rule for checking whether ENQUEUE and DEQUEUE are used in the RFC function.</p><p id="p-0124" num="0123">Here, like the second rule described above, the third rule may be applied when code analysis is performed to prevent an error or dump that may occur in remote function communication with an external system. In particular, the third rule may be applied to detect whether the ENQUEUE and DEQUEUE statements are used when a DML statement is used in a development process, thereby ensuring data integrity and consistency.</p><p id="p-0125" num="0124">For example, since the DML statement is a statement that causes a database update, it may be developed to apply a TABLE LOCK through the ENQUEUE statement and, when the update is finished, release the TABLE LOCK through the DEQUEUE statement. The third rule is a rule used to detect whether the ENQUEUE and DEQUEUE statements are used when the DML statement is used as described above. When the database is updated by the DML statement, modification access by other users is prevented to synchronize data, thereby ensuring the integrity and consistency of the data.</p><p id="p-0126" num="0125">The operation of identifying a code section by applying the third rule described above includes the following detailed operations.</p><p id="p-0127" num="0126">In operation S<b>161</b>, it is identified whether a DML statement is used in a code section corresponding to the RFC function in an inspection target code. If the DML statement is used, it is identified whether a character string &#x2018;ENQUEUE_E*&#x2019; exists in operation S<b>162</b>. Accordingly, when the final result is returned in operation S<b>163</b>, a code section violating the third rule may be identified.</p><p id="p-0128" num="0127">Referring to <figref idref="DRAWINGS">FIG. <b>16</b></figref>, the code inspection interface providing apparatus <b>1</b> may perform an operation of identifying a code section that violates a fourth rule for detecting buffering of a view in which two or more tables are joined.</p><p id="p-0129" num="0128">Here, in a case where buffering is set in a view in which two or more tables are joined, the fourth rule may be applied when code analysis is performed to prevent all buffer data from being invalidated even when only some data is changed, unlike in buffering of a general table. In particular, by applying the fourth rule, it is possible to detect, in advance, a part where the entire buffer data can be deleted when DB WRITE occurs in the view or where performance degradation can be caused by a buffer load.</p><p id="p-0130" num="0129">For example, even if a buffering method of the view is set to single or generic, the view operates like a full buffer. Therefore, the entire buffer data can be deleted when DB WRITE occurs. In addition, if DB WRITE occurs frequently in the view, a buffer load may occur frequently, causing performance degradation. The fourth rule may be used to detect, in advance, a part where the entire buffer data can be deleted due to the above characteristics of the view and where performance degradation can be caused by a buffer load.</p><p id="p-0131" num="0130">The operation of identifying a code section by applying the fourth rule described above includes the following detailed operations.</p><p id="p-0132" num="0131">In operation S<b>171</b>, if the type of an inspection target code is a view, it is identified whether the view exists in a database. If joined tables exist in the view, it is identified whether buffering is set in the view in operation S<b>172</b>. Here, operation S<b>172</b> may include an operation of identifying whether a buffer type of the view is P, G, or X by referring to a table including information about the view. In this case, buffer type P refers to a single buffer, and only one entry is stored in the buffer. Buffer type P may be used when the number of times that the database is accessed, such as fetching records multiple times, is relatively large. Buffer type G refers to a generic buffer, and all entries of a table corresponding to a selected key value are stored in the buffer. In addition, buffer type X refers to a full buffer, and records of all tables are stored in the buffer.</p><p id="p-0133" num="0132">Finally, when the final result is returned in operation S<b>173</b>, a code section violating the fourth rule may be identified.</p><p id="p-0134" num="0133">As described above, according to the embodiments of the present disclosure, it is possible to provide an accurate analysis result by setting a flexible rule set applicable according to a development environment and user settings.</p><p id="p-0135" num="0134"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates the hardware configuration of an exemplars computing apparatus <b>100</b> capable of implementing methods according to embodiments of the present disclosure. Referring to <figref idref="DRAWINGS">FIG. <b>17</b></figref>, the computing apparatus <b>100</b> may include one or more processors <b>101</b>, a bus <b>107</b>, a network interface <b>102</b>, a memory <b>103</b> which loads a computer program <b>105</b> to be executed by the processors <b>101</b>, and a storage <b>104</b> which stores the computer program <b>105</b>. In <figref idref="DRAWINGS">FIG. <b>17</b></figref>, only the components related to the embodiments of the present disclosure are illustrated. Therefore, it will be understood by those of ordinary skill in the art to which the present disclosure pertains that other general-purpose components can be included in addition to the components illustrated in <figref idref="DRAWINGS">FIG. <b>17</b></figref>.</p><p id="p-0136" num="0135">The processors <b>101</b> control the overall operation of each component of the computing apparatus <b>100</b>. The processors <b>101</b> may include at least one of a central processing unit (CPU), a micro-processor unit (MPU), a micro-controller unit (MCU), a graphic processing unit (GPU), and any form of processor well known in the art to which the present disclosure pertains. In addition, the processors <b>101</b> may perform an operation on at least one application or program for executing methods/operations according to various embodiments of the present disclosure. The computing apparatus <b>100</b> may include one or more processors.</p><p id="p-0137" num="0136">The memory <b>103</b> stores various data, commands and/or information. The memory <b>103</b> may load one or more programs <b>105</b> from the storage <b>104</b> in order to execute methods/operations according to various embodiments of the present disclosure.</p><p id="p-0138" num="0137">For example, when the computer programs <b>105</b> are loaded into the memory <b>103</b>, logic (or modules) may be implemented on the memory <b>103</b>. The memory <b>103</b> may be, but is not limited to, a random access memory (RAM).</p><p id="p-0139" num="0138">The bus <b>107</b> provides a communication function between the components of the computing apparatus <b>100</b>. The bus <b>107</b> may be implemented as various forms of buses such as an address bus, a data bus, and a control bus.</p><p id="p-0140" num="0139">The network interface <b>102</b> supports wired and wireless Internet communication of the computing apparatus <b>100</b>. The network interface <b>102</b> may support various communication methods other than Internet communication. To this end, the network interface <b>102</b> may include a communication module well known in the art to which the present disclosure pertains.</p><p id="p-0141" num="0140">The storage <b>104</b> may non-temporarily store one or more programs <b>105</b>. The storage <b>104</b> may include a non-volatile memory such as a flash memory, a hard disk, a removable disk, or any form of computer-readable recording medium well known in the art to which the present disclosure pertains.</p><p id="p-0142" num="0141">The computer program <b>105</b> may include one or more instructions in which methods/operations according to various embodiments of the present disclosure are implemented. When the computer program <b>105</b> is loaded into the memory <b>103</b>, the processors <b>101</b> may execute the instructions to perform methods/operations according to various embodiments of the present disclosure.</p><p id="p-0143" num="0142">The technical features of the present disclosure described so far may be embodied as computer readable codes on a computer readable medium. The computer readable medium may be, for example, a removable recording medium (CD, DVD, Blu-ray disc, USB storage device, removable hard disk) or a fixed recording medium (ROM, RAM, computer equipped hard disk). The computer program recorded on the computer readable medium may be transmitted to other computing device via a network such as internet and installed in the other computing device, thereby being used in the other computing device.</p><p id="p-0144" num="0143">Although operations are shown in a specific order in the drawings, it should not be understood that desired results can be obtained when the operations must be performed in the specific order or sequential order or when all of the operations must be performed. In certain situations, multitasking and parallel processing may be advantageous. According to the above-described embodiments, it should not be understood that the separation of various configurations is necessarily required, and it should be understood that the described program components and systems may generally be integrated together into a single software product or be packaged into multiple software products.</p><p id="p-0145" num="0144">In concluding the detailed description, those skilled in the art will appreciate that many variations and modifications can be made to the preferred embodiments without substantially departing from the principles of the present disclosure. Therefore, the disclosed preferred embodiments of the disclosure are used in a generic and descriptive sense only and not for purposes of limitation.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for providing code inspection interface, the method performed by a computing apparatus, the method comprising:<claim-text>providing a graphical user interface (GUI) for performing code inspection;</claim-text><claim-text>executing an analysis routine on an inspection target code when the inspection target code is selected through the GUI; and</claim-text><claim-text>providing the result of executing the analysis routine,</claim-text><claim-text>wherein the analysis routine comprises an operation of extracting an abstract syntax tree comprised of a plurality of nodes from the inspection target code.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the analysis routine comprises:<claim-text>a first analysis routine implemented in a first programming language; and</claim-text><claim-text>a second analysis routine implemented in a second programming language,</claim-text><claim-text>wherein the first analysis routine comprises the operation of extracting the abstract syntax tree from the selected inspection target node and an operation of providing the extracted abstract syntax tree as an input to the second analysis routine; and</claim-text><claim-text>the second analysis routine comprises an operation of analyzing the inspection target code using at least a part of the abstract syntax tree provided by the first analysis routine.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first programming language is a programming language used to write the inspection target code.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the providing of the result of executing the analysis routine comprises providing action guide information for the inspection target code based on the result of executing the analysis routine.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the providing of the GUI comprises displaying a first GUI for receiving an input for selecting the inspection target code, a second GUI for receiving an input for setting a rule set used by the analysis routine, and a third GUI for providing the result of executing the analysis routine.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the executing of the analysis routine on the inspection target code comprises identifying a code section violating at least a part of a preset rule set from the inspection target code.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the identifying comprises:<claim-text>generating a control flow graph showing an execution order of the inspection target code, based on the abstract syntax tree; and</claim-text><claim-text>converting the inspection target code into an intermediate representation, based on the abstract syntax tree.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the identifying comprises identifying a code section violating at least a part of the preset rule set, based on the result of analyzing a call relationship between functions included in the inspection target code, a variable value used at a specific time, and a point where a change has occurred by an external input value.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the preset rule set comprises a plurality of rules, each being given a severity attribute; and<claim-text>the providing of the result of executing the analysis routine comprises providing the result of executing the analysis routine according to the severity attribute of each rule.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the preset rule set comprises a plurality of rules, each being given a priority attribute; and<claim-text>the executing of the analysis routine on the inspection target code comprises selecting a rule subset to be applied to the analysis routine from among the preset rule set by using the priority attribute.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the providing of the GUI for performing the code inspection comprises providing the GUI for adding a new rule to the preset rule set, deleting an unused rule, and updating a rule.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the preset rule set comprises a rule for detecting a prohibited statement; and<claim-text>the identifying comprises:<claim-text>detecting a sentence in which a macro is declared from the inspection target code, based on the rule for detecting the prohibited statement; and</claim-text><claim-text>detecting whether at least one of a list of pre-stored prohibited statements has been used in the sentence in which the macro is declared.</claim-text></claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the detecting of the sentence comprises determining whether a type of the inspection target code is any one of Executable Program, Modulepool Program, Function Group, Class, and Include Program.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the preset rule set comprises a rule for handling an exception of a remote function communication (RFC) function; and<claim-text>the identifying comprises:<claim-text>identifying whether an exception related to the RFC function has been registered in the inspection target code, based on the rule for handling the exception of the RFC function;</claim-text><claim-text>identifying whether a RAISE Exception statement exists in a code section corresponding to the RFC function; and</claim-text><claim-text>identifying whether the RAISE Exception statement exists in Include within Function Group if the RAISE Exception statement does not exist in the code section corresponding to the RFC function.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the preset rule set comprises a rule for checking whether ENQUEUE and DEQUEUE are used in the RFC function; and<claim-text>the identifying comprises:<claim-text>identifying whether a data manipulation language (DML) statement is used in a code section corresponding to the RFC function in the inspection target code, based on the rule for checking whether ENQUEUE and DEQUEUE are used in the RFC function; and</claim-text><claim-text>identifying whether a character string &#x2018;ENQUEUE_E*&#x2019; exists if the DML statement is used.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the preset rule set comprises a rule for detecting buffering of a view in which two or more tables are joined; and<claim-text>the identifying comprises:<claim-text>identifying whether a view exists in a database, based on the rule for detecting the buffering of the view, when the type of the inspection target code is the view; and</claim-text><claim-text>identifying whether buffering is set in the view if joined tables exist in the view.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the identifying of whether the buffering is set in the view comprises identifying whether a buffer type of the view is P, G, or X by referring to a table containing information of the view.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the providing of the result of executing the analysis routine comprises calculating a rule violation score of the inspection target code using the result of the identification of the code section violating at least a part of the preset rule set.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A computer-readable non-transitory recording medium storing a computer program that causes a computer to perform the method of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A code inspection interface providing apparatus comprising:<claim-text>one or more processors;</claim-text><claim-text>a communication interface communicating with an external device;</claim-text><claim-text>a memory loading a computer program to be executed by the processors; and</claim-text><claim-text>a storage storing the computer program comprising instructions for performing:</claim-text><claim-text>an operation of providing a graphical user interface (GUI) for performing code inspection;</claim-text><claim-text>an operation of executing an analysis routine on an inspection target code when the inspection target code is selected through the GUI; and</claim-text><claim-text>an operation of providing the result of executing the analysis routine, wherein the analysis routine extracts an abstract syntax tree comprised of a plurality of nodes from the inspection target code.</claim-text></claim-text></claim></claims></us-patent-application>