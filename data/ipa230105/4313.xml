<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004314A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004314</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17854678</doc-number><date>20220630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="regional"><country>EP</country><doc-number>21305901.7</doc-number><date>20210630</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>48</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0638</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4881</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>061</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0629</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHOD OF MANAGING JOBS IN AN INFORMATION SYSTEM AND ASSOCIATED SYSTEM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>BULL SAS</orgname><address><city>Les Clayes-sous-Bois</city><country>FR</country></address></addressbook><residence><country>FR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>GERPHAGNON</last-name><first-name>Jean-Olivier</first-name><address><city>Vif</city><country>FR</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>BULL SAS</orgname><role>03</role><address><city>Les Clayes-sous-Bois</city><country>FR</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An aspect of the invention relates to a method of managing jobs in a information system (SI) on which a plurality of jobs run, the information system (SI) comprising a plurality of computer nodes (NDi) and at least a first storage tier (NS<b>1</b>) associated with a first performance tier and a second storage tier (NS<b>2</b>) associated with a second performance tier lower than the first performance tier, each job being associated with a priority level determined from a set of parameters comprising the node or nodes (NDi) on which the job is to be executed, the method comprising a step of scheduling the jobs as a function of the priority level associated with each job; the set of parameters used for determining the priority level also comprising a first parameter relating to the storage tier to be used for the data necessary for the execution of the job in question and a second parameter relating to the position of the data necessary for the execution of the job (TAi) in question.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="113.88mm" wi="140.72mm" file="US20230004314A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="197.61mm" wi="142.75mm" file="US20230004314A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><p id="p-0002" num="0001">This application claims priority to European Patent Application Number 21305901.7, filed 30 Jun. 2021, the specification of which is hereby incorporated herein by reference.</p><heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading><heading id="h-0002" level="1">Field of the Invention</heading><p id="p-0003" num="0002">The technical field of one or more embodiments of the invention is the management of jobs and storage tiers in an information system.</p><p id="p-0004" num="0003">One or more embodiments of the invention relate to a job management method and in particular to a job management method that takes into account the level of data storage required for execution.</p><heading id="h-0003" level="1">Description of the Related Art</heading><p id="p-0005" num="0004">Data management, and in particular data storage, is an important aspect in the management of IT systems, especially high-performance computing (HPC) infrastructures. Indeed, the performance (bandwidth, low latency, etc.) of a storage medium is generally proportional to its cost. Also, most IT systems implement multi-tier solutions that are typically broken down into storage tiers, with each storage tier being associated with a performance tier.</p><p id="p-0006" num="0005">Data movement between the different storage tiers is usually managed via automatic data movement rules. These rules dynamically manage the movement of this data in order to maximize the use of the fastest tiers and are generally based on the time elapsed since the last access to the data, with movement to the lower-performance storage tier when this elapsed time is greater than a given threshold. This methodology is often referred to as HSM (Hierarchical Storage Management) in HPC infrastructure. While such moves are relatively fast when they occur between two high-performance storage tiers, they are problematic when one of the storage tiers has poor performance, such as bandwidth. However, any data move results in the work associated with the data taking longer to complete than when the data is immediately available on the correct storage tier. Also, it is preferable to have the data available at the right storage tier to minimize computation time and avoid unnecessary transfers.</p><p id="p-0007" num="0006">However, the methods proposed in the state of the art do not always succeed in achieving this objective. The limitations of existing methods can be shown through an example wherein a job must be executed every month using a dataset stored on a first storage tier associated with a high performance tier. When the data move comprises a rule to move unread data every month, the dataset in question is moved to a second, slower storage tier at the end of that time, while a new instance of the job discussed above will be executed the day after the move. It will therefore be necessary to repatriate the dataset from the second storage tier to the first storage tier before the job in question can be run again. Thus, in this example, two unnecessary trips will have been made. Of course, this is a textbook case, but this type of behavior is common on infrastructure and is often uncontrolled.</p><p id="p-0008" num="0007">There is therefore a need for a management process that reduces or eliminates unnecessary data moves.</p><heading id="h-0004" level="1">BRIEF SUMMARY OF THE INVENTION</heading><p id="p-0009" num="0008">One or more embodiments of the invention offers a solution to the above-described problems, by handling data moves not strictly via pre-established rules as is done in the state of the art, but by taking into account the storage tier and the position of the data necessary for the execution of the jobs in the scheduling of said jobs.</p><p id="p-0010" num="0009">At least one embodiment of the invention relates to a method of managing jobs in an information system on which a plurality of jobs run, the information system comprising a scheduler, a plurality of computer nodes and at least a first storage tier associated with a first performance tier and a second storage tier associated with a second performance tier lower than the first performance tier, each job being associated with a priority level determined from a set of parameters including the node(s) on which the job is to be executed, the method comprising a step of scheduling, by the scheduler, the jobs according to the priority level associated with each job. Furthermore, in the method according to one or more embodiments of the invention, the set of parameters used for determining the priority level also comprises a first parameter relating to the storage tier to be used for the data required for the execution of the job in question and a second parameter relating to the position of the data required for the execution of the job in question.</p><p id="p-0011" num="0010">In at least one embodiment of the invention, it is possible to take into account the storage tier and the position (for example, the access path) in the scheduling of jobs and thus limit unnecessary data moves from one storage tier to another. The originality of the solution proposed by the inventors comes in particular from the fact that, identifying the problem of unnecessary movement of data from one storage tier to another, they were able to see that it was possible to limit this problem, not by modifying the way in which the data was moved, but by modifying the way in which the jobs using this data were scheduled.</p><p id="p-0012" num="0011">In addition to the features mentioned in the preceding paragraph, the method according to at least one embodiment of the invention may have one or more complementary features from the following, taken individually or according to all technically plausible combinations:</p><p id="p-0013" num="0012">In at least one embodiment, the parameter set used for determining the priority level also comprises a parameter related to the user performing the job.</p><p id="p-0014" num="0013">In at least one embodiment, the system comprises a data movement solution responsible for moving data from a storage tier whose performance tier is different from the minimum performance tier to a lower performance tier storage tier after a predetermined time, the method comprising, when data required for a job scheduled to be executed is likely to be moved by the movement solution, a step of sending a signal to the movement solution causing said movement to be postponed or cancelled.</p><p id="p-0015" num="0014">&#x201c;Likely to be moved&#x201d; means that the data in question will be moved before the start of the job in question if only the static move rules (for example, related to the last access time) are applied.</p><p id="p-0016" num="0015">In at least one embodiment, the method comprises, upstream of the execution of a job, when the data necessary for its execution is not on the storage tier associated with the job in question, a step of moving the data necessary for the job to the storage tier having the performance tier associated with the job in question.</p><p id="p-0017" num="0016">In at least one embodiment, the method comprises, when a job has completed its execution and the data used by the particular job is not needed to execute one or more other jobs, a step of moving the data needed to execute the job to a storage tier having a lower performance tier than the storage tier on which the data resides.</p><p id="p-0018" num="0017">In at least one embodiment, the system comprises at least two storage tiers selected from the following five storage tiers, each associated with a performance tier:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0018">A first storage tier associated with a first level of performance;</li>    <li id="ul0001-0002" num="0019">A second storage tier associated with a second performance tier lower than the first performance tier;</li>    <li id="ul0001-0003" num="0020">A third storage tier associated with a third performance tier lower than the second performance tier;</li>    <li id="ul0001-0004" num="0021">A fourth storage tier associated with a fourth performance tier lower than the third performance tier;</li>    <li id="ul0001-0005" num="0022">A fifth storage tier associated with a fifth performance tier lower than the fourth performance tier.</li></ul></p><p id="p-0019" num="0023">In at least one embodiment, the data stored in the different storage tiers of are not replicated.</p><p id="p-0020" num="0024">At least one embodiment of the invention relates to an information system comprising a plurality of nodes and at least a first storage tier associated with a first performance tier and a second storage tier associated with a second performance tier lower than the first performance tier, the system comprising a scheduler configured to implement a method according to one or more embodiments of the invention.</p><p id="p-0021" num="0025">At least one embodiment of the invention relates to a computer program comprising instructions that cause the information system to perform the steps of the method according to one or more embodiments of the invention.</p><p id="p-0022" num="0026">At least one embodiment of the invention relates to a computer-readable medium on which the computer program according to one or more embodiments of the invention is saved.</p><p id="p-0023" num="0027">One or more embodiments of the invention and its different applications will be better understood upon reading the following disclosure and examining the accompanying figures.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0024" num="0028">The figures are presented by way of reference and are in no way limiting to one or more embodiments of the invention.</p><p id="p-0025" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a flowchart of the method according to one or more embodiments of the invention.</p><p id="p-0026" num="0030"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a schematic depiction of an information system according to one or more embodiments of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0027" num="0031">The figures are presented by way of reference and are in no way limiting to one or more embodiments of the invention. Unless otherwise stated, the same element appearing in different figures has the same reference.</p><heading id="h-0007" level="1">Method of Managing Jobs in an Information System</heading><p id="p-0028" num="0032">At least one embodiment of the invention shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref> relates to a method <b>100</b> for managing jobs TAi in an information system SI on which a plurality of jobs TAi run. For example, the information system SI can be a high performance computing infrastructure (generally abbreviated HPC) on which calculations are performed, the calculations being implemented through one or more jobs.</p><p id="p-0029" num="0033">More particularly, the information system SI comprises a plurality of computer nodes NDi (in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the system comprises n nodes). It is on these computer nodes NDi that the jobs TAi discussed above will be performed. A node NDi can correspond to a server, for example a computing server.</p><p id="p-0030" num="0034">The information system SI according to one or more embodiments of the invention also comprises at least two storage tiers NS<b>1</b>/NS<b>2</b>, each storage tier being associated with at least one storage means, these storage tiers making it possible to store the data necessary for the execution of jobs TAi. A storage medium associated with a given NS<b>1</b>/NS<b>2</b> storage tier can take the form of RAM or non-volatile memory (such as NVMe, SSD or HDD) or even a cloud storage medium. More generally, it can be any means of storing computer data.</p><p id="p-0031" num="0035">More particularly, the information system SI comprises at least a first storage tier NS<b>1</b> associated with a first performance tier and a second storage tier NS<b>2</b> associated with a second performance tier lower than the first performance tier. In at least one embodiment, the performance tier is an increasing function of the bandwidth of the storage means(s) associated with the storage tier under consideration NS<b>1</b>/NS<b>2</b> and a decreasing function of the latency of the storage means(s) associated with the storage tier under consideration NS<b>1</b>/NS<b>2</b> (relative to the node NDi(s) on which the job associated with the data is executed).</p><p id="p-0032" num="0036">In at least one embodiment, the information system SI comprises at least two storage tiers NS<b>1</b>/NS<b>2</b> from the following five storage tiers:<ul id="ul0002" list-style="none">    <li id="ul0002-0001" num="0037">a first level of local storage (generally fast and associated with storage resources such as NVMe or SSD drives local to the compute node in question), sometimes known in the field by the name scratch;</li>    <li id="ul0002-0002" num="0038">a second storage tier, known as buffer storage (associated with NVMe or SSD storage means) acting as a fast intermediary (or burst),</li>    <li id="ul0002-0003" num="0039">a third tier of parallel-access storage based on Lustre&#x2122; or IBM Spectrum Scale&#x2122; GPFS technologies (typically fast and combined with SSD or NVMe drive storage for metadata or cache, and standard rotating HDD drives for data);</li>    <li id="ul0002-0004" num="0040">a fourth storage tier, slower than the previous ones, with a much larger storage capacity and allowing data to be stored for a longer period of time while maintaining relatively reasonable access times (compared to the fifth storage tier presented next);</li>    <li id="ul0002-0005" num="0041">a fifth storage tier, called archiving or backup, allowing the use of technologies that are inexpensive in terms of volume (for example associated with storage resources such as tapes) but with very high access times and latencies.</li></ul></p><p id="p-0033" num="0042">The order of the storage tiers NS<b>1</b>/NS<b>2</b> in the preceding list is based on performance tier, with the first storage tier in the list having the highest performance tier and the fifth storage tier in the list having the lowest performance tier.</p><p id="p-0034" num="0043">In at least one embodiment, the data stored in the different storage tiers of are not replicated. In other words, for example, if data is on the first storage tier, then that same data will be absent from the other storage tiers. Furthermore, the data in question is present only once (i.e., in a single copy) on the storage tier in question. Thus, the stored data is not replicated on a given storage tier and is not replicated on the other storage tiers either. Preferably, a backup is made to protect against data loss.</p><p id="p-0035" num="0044">In order to manage the scheduling of the different jobs TAi, each job is associated with a priority level determined from a set of parameters including the node(s) NDi on which the job TAi must be executed. Preferably, in one or more embodiments, the parameter set used for determining the priority level also comprises a parameter related to the user performing the job TAi in question. In addition, by way of one or more embodiments, the method <b>100</b> comprises a step E<b>1</b> of scheduling, by means of a scheduler OR, the jobs TAi according to the priority level associated with each job TAi. In other words, the order wherein the different jobs TAi are executed is a function of the priority level assigned to each job TAi according to the set of parameters associated with that job TAi.</p><p id="p-0036" num="0045">The method <b>100</b> according to one or more embodiments of the invention is original in that the set of parameters for determining the priority level associated with each job TAi also comprises a first parameter relating to the storage tier to be used for the data necessary for the execution of the job TAi under consideration and a second parameter relating to the position (for example the access path) of the data necessary for the execution of the job TAi under consideration.</p><p id="p-0037" num="0046">By taking into account the storage tier and the position of the data when determining the priority level and thus when scheduling jobs TAi, it becomes possible to limit unnecessary data moves from one storage tier to another. The originality of the solution proposed by the inventors comes in particular from the fact that, identifying the problem of unnecessary movement of data from one storage tier to another, they were able to see that it was possible to limit this problem, not by modifying the way in which the data was moved, but by modifying the way in which the jobs TAi using this data were scheduled.</p><p id="p-0038" num="0047">In general, in at least one embodiment, the determination of the priority level is based on weights of the different parameters of the parameter set, such as the user who submitted the job (management of priority level according to the user or his group), the time when the job was submitted (to guarantee that a job will never remain blocked indefinitely), the past or current jobs executed by the user, and the available resources as well as the ones requested by the submitted job, the time spent in the queue (age), etc. (to give just a few examples of parameters that can be present in the parameter set). As mentioned earlier, in at least one embodiment of the invention, priority management is expanded with two new parameters relating to the data required to perform the job under consideration. It is therefore a multi-factor priority which is generally a multiplication of factors.</p><p id="p-0039" num="0048">In at least one embodiment, the priority level is determined using the following relationship:</p><p id="p-0040" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mi>IP</mi>  <mo>=</mo>  <mrow>   <munderover>    <mo>&#x220f;</mo>    <mrow>     <mi>i</mi>     <mo>=</mo>     <mn>1</mn>    </mrow>    <mi>n</mi>   </munderover>   <mrow>    <msub>     <mi>&#x3b1;</mi>     <mi>i</mi>    </msub>    <mo>&#x2062;</mo>    <msub>     <mi>P</mi>     <mi>i</mi>    </msub>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0041" num="0049">Where IP is the priority level, n is the number of parameters in the parameter set, P<sub>i </sub>is the value of parameter i and &#x3b1;<sub>i </sub>is a weighting factor associated with parameter i</p><p id="p-0042" num="0050">By way of illustration, in at least one embodiment, when scheduling is provided by Slurm&#x2122;, the launch of a job TAi can be done using the following command:</p><p id="p-0043" num="0051">$ srun -N 16 -n 1024 -my_data_path /globalfs/myjob/dataset/ -storage_level Lustre myjob</p><p id="p-0044" num="0052">As shown in this example, by way of one or more embodiments, in addition to the usual information provided to the scheduler OR, the scheduler is also provided with the position of the data (here by means of an access path through the parameter my_data_path) and the storage tier to be used (here by means of a name associated with the desired storage tier through the parameter storage_level).</p><p id="p-0045" num="0053">For comparison, here is the same command according to the state of the art:</p><p id="p-0046" num="0054">$ srun -N 16 -n 1024 myjob</p><p id="p-0047" num="0055">In the state of the art, the scheduler OR does not take into account the storage tier or the position of the data. This information is therefore not communicated to the scheduler OR.</p><p id="p-0048" num="0056">In general, in one or more embodiments, the use of data-related parameters in scheduling allows jobs TAi using the same data to be closer together, for example by making two jobs TAi using the same data have priority levels closer to each other than the priority levels associated with those same jobs had those priority levels been determined without data-related parameters (that is, determined according to the state of the art). The usefulness of such a reconciliation can be shown through an example wherein an application uses a data volume of 200 GB out of a total available volume of 1 TB (i.e. 20% of the total volume). This dataset must be on a first NS<b>1</b> storage tier (for example, burst buffer level) to optimize input/output operations. Given the usual data movement rules, data used by this application frequently moves between this storage tier and a second storage tier (for example, the Lustre parallel file system). If the execution of the jobs TAi using this data is close in time, then the moves mentioned above can be eliminated between the execution of the different jobs TAi associated with the application. In other words, bringing together jobs TAi that need to access this data over a given time frame reduces data moves between different storage tiers NS<b>1</b>/NS<b>2</b>. Preferably, in at least one embodiment, it will be possible to modify the data moves so that the data is not deleted at the end of the job TAi using that data (for example when it is planned to delete the data used by a job TAi after its execution), but rather as soon as the space is required or when a predefined time has elapsed since the last access to the data</p><p id="p-0049" num="0057">In at least one embodiment, the information system SI comprises a data movement solution SD in charge of moving the data present on a storage tier NS<b>2</b> whose performance tier is different from the minimum performance tier to a storage tier NS<b>2</b> with a lower performance tier after a predetermined time, this action being generally called Hierarchical Storage Management (already introduced previously). This movement solution SD can for example take the form of automatic data prioritization software or HSM software. Furthermore, by way of one or more embodiments, the method <b>100</b> comprises, when data necessary for a job whose execution is planned are likely to be moved by the moving solution SD, a step E<b>2</b> of sending, to the moving solution SD, a signal causing the postponement or cancellation of said movement. In other words, as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, according to one or more embodiments, the scheduler OR can communicate with the movement solution SD so that some of the data management is done through the scheduling of jobs TAi. This communication ensures that data that will soon be used is not unnecessarily moved to a lower storage tier than that required for the job TAi in question.</p><p id="p-0050" num="0058">In at least one embodiment, the method <b>100</b> comprises, upstream of the execution of a job TAi, when the data necessary for its execution is not on the storage tier associated with the job TAi in question, a step E<b>2</b>&#x2032; of moving the data necessary for the job TAi to the storage tier NS<b>1</b>/NS<b>2</b> having the performance tier associated with the job TAi in question. This displacement may for example be implemented by the data movement solution SD, the movement step E<b>2</b>&#x2032; then comprising the sending, by the scheduler OR, of a signal corresponding to said move to the movement solution SD. In at least one embodiment, the term &#x201c;upstream of the execution&#x201d; is to be understood as the fact that the job TAi under consideration is the next to be executed. However, other definitions are compatible with embodiments of the invention as long as this step E<b>2</b>&#x2032; is implemented in such a way as to allow the retrieval of the data necessary for the execution of the job TAi before the start of the execution of the job TAi in question.</p><p id="p-0051" num="0059">In at least one embodiment, the method <b>100</b> comprises, when a job TAi has completed its execution and the data used by the particular job TAi is not needed to execute one or more other jobs TAi, a step E<b>2</b>&#x2033; of moving the data needed to execute the job TAi to a storage tier NS<b>2</b> having a lower performance tier than the storage tier NS<b>1</b> on which the data resides. As before, this movement may for example be implemented by the data movement solution SD, the data movement step E<b>2</b>&#x2033; then comprising the sending, by the scheduler OR, of a signal corresponding to said move to the movement solution SD.</p><heading id="h-0008" level="1">Information System Implementing a Method According to one or More Embodiments of the Invention</heading><p id="p-0052" num="0060">At least one embodiment of the invention shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> relates to an information system SI configured to perform a method <b>100</b>. This information system SI can be a high performance computing infrastructure (generally abbreviated HPC) on which calculations are performed, the calculations being implemented through one or more jobs TAi.</p><p id="p-0053" num="0061">More particularly, in one or more embodiments, the information system SI comprises a plurality of computer nodes NDi (in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the system comprises n nodes). It is on these computer nodes NDi that the jobs TAi discussed above will be performed. A node NDi can correspond to a server, for example a computing server. More generally, in at least one embodiment, a computer node NDi comprises a computing means (for example, a processor) used to perform one or more calculations associated with a job TAi. It also comprises a memory used to store the data necessary for the execution of a calculation for the time necessary for this execution. It also comprises communication means (for example, a network card) so that it can communicate with the other nodes NDi or the different storage tiers NS<b>1</b>/NS<b>2</b> of the information system SI. These communication means are also used to communicate with the scheduler OR in charge of scheduling the jobs TAi.</p><p id="p-0054" num="0062">As described above, the information system SI according to one or more embodiments of the invention also comprises at least two storage tiers NS<b>1</b>/NS<b>2</b>, each storage tier being associated with at least one storage means, these storage tiers making it possible to store the data necessary for the execution of jobs TAi. A storage medium associated with a given storage tier MS<b>1</b>/MS<b>2</b> can take the form of a random access memory or a non-volatile memory. More generally, it can be any means of storing computer data.</p><p id="p-0055" num="0063">More particularly, in at least one embodiment, the information system SI comprises at least a first storage tier NS<b>1</b> associated with a first performance tier and a second storage tier NS<b>2</b> associated with a second performance tier lower than the first performance tier. In at least one embodiment, the performance tier is an increasing function of the bandwidth of the storage means(s) associated with the storage tier under consideration NS<b>1</b>/NS<b>2</b> and a decreasing function of the latency of the storage means(s) associated with the storage tier under consideration NS<b>1</b>/NS<b>2</b> (relative to the node NDi(s) on which the job TAi associated with the data is executed).</p><p id="p-0056" num="0064">In at least one embodiment, the information system SI comprises at least two storage tiers NS<b>1</b>/NS<b>2</b> from the following five storage tiers:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0065">a first level of local storage (generally fast and associated with storage resources such as NVMe or SSD drives local to the compute node in question), sometimes known in the field by the name scratch;</li>    <li id="ul0003-0002" num="0066">a second storage tier, known as buffer storage (associated with NVMe or SSD storage means) acting as a fast intermediary (or burst),</li>    <li id="ul0003-0003" num="0067">a third tier of parallel-access storage based on Lustre or Spectrum Scale GPFS technologies (typically fast and combined with SSD or NVMe drive storage for metadata or cache, and standard rotating HDD drives for data);</li>    <li id="ul0003-0004" num="0068">a fourth storage tier, slower than the previous ones, with a much larger storage capacity and allowing data to be stored for a longer period of time while maintaining relatively reasonable access times (compared to the fifth storage tier presented next);</li>    <li id="ul0003-0005" num="0069">a fifth storage tier, called archiving or backup, allowing the use of technologies that are inexpensive in terms of volume (for example, associated with storage resources such as tapes) but with very high access times and latencies.</li></ul></p><p id="p-0057" num="0070">The ordering of the storage tiers NS<b>1</b>/NS<b>2</b> in the preceding list is based on performance tier, with the first storage tier in the list having the highest performance tier and the fifth storage tier in the list having the lowest performance tier.</p><heading id="h-0009" level="1">Other Possible Applications</heading><p id="p-0058" num="0071">One or more embodiments of the invention have been shown through an example related to high performance computing, but it can find other applications. For example, in at least one embodiment, the compute nodes NDi can be servers located in a first cloud and the first storage tier NS<b>1</b> can be associated with a storage means in the first cloud and the second storage tier NS<b>2</b> can be associated with a storage means in a second cloud different from the first cloud and therefore having a lower performance for these servers NDi. The execution of jobs TAi on these servers NDi will therefore have to take into account the performance associated with each storage tier NS<b>1</b>/NS<b>2</b> to schedule the jobs TAi.</p><p id="p-0059" num="0072">This is, of course, just another example, but the management method <b>100</b> according to one or more embodiments of the invention can be implemented in any information system SI that comprises one or more nodes NDi on which jobs TAi are executed and at least two storage tiers NS<b>1</b>/NS<b>2</b> with different performance.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004314A1-20230105-M00001.NB"><img id="EMI-M00001" he="7.79mm" wi="76.20mm" file="US20230004314A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of managing jobs in an information system on which a plurality of jobs run, the information system comprising a scheduler, a plurality of computer nodes and at least a first storage tier associated with a first performance tier and a second storage tier associated with a second performance tier lower than the first performance tier, each job of said plurality of jobs being associated with a priority level determined from a set of parameters including at least one node of the plurality of computer nodes on which the each job is to be executed, the method comprising:<claim-text>scheduling, by the scheduler, the plurality of jobs according to the priority level associated with said each job of the plurality of jobs;</claim-text><claim-text>wherein the set of parameters used for determining the priority level also comprises a first parameter relating to a storage tier of said first storage tier and said second storage tier to be used for data required for execution of the each job in question and a second parameter relating to a position of the data required for the execution of the each job in question.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the information system comprises a data movement solution responsible for moving data from said first storage tier whose performance tier is different from a minimum performance tier to said second storage tier after a predetermined time, wherein the method further comprises, when said data required for said each job scheduled to be executed is likely to be moved by the data movement solution, sending a signal to the data movement solution causing movement of said data to be postponed or cancelled.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising, upstream of the execution of said each job, when the data necessary for its execution is not on the storage tier associated with the each job in question, moving the data necessary for the each job to the storage tier comprising a performance tier of said first performance tier and said second performance tier associated with the each job in question.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising, when said each job has completed its execution and the data used by the each job is not needed to execute one or more other jobs of said plurality of job, moving the data needed to execute the each job to the second storage tier comprising a lower performance tier than said first storage tier on which the data resides.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the information system further comprises at least two storage tiers selected from five storage tiers, wherein each storage tier of said at least two storage tiers is associated with a performance tier and wherein said five storage tiers comprise:<claim-text>the first storage tier associated with the first performance tier;</claim-text><claim-text>the second storage tier associated with the second performance tier lower than the first performance tier;</claim-text><claim-text>a third storage tier associated with a third performance tier lower than the second performance tier;</claim-text><claim-text>a fourth storage tier associated with a fourth performance tier lower than the third performance tier;</claim-text><claim-text>a fifth storage tier associated with a fifth performance tier lower than the fourth performance tier.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. A computer system comprising:<claim-text>a plurality of nodes;</claim-text><claim-text>at least a first storage tier associated with a first performance tier and a second storage tier associated with a second performance tier lower than the first performance tier; and,</claim-text><claim-text>a scheduler configured to implement a method of managing jobs in an information system on which a plurality of jobs run, each job of said plurality of jobs being associated with a priority level determined from a set of parameters including at least one node of the plurality of nodes on which the each job is to be executed, the method comprising<claim-text>scheduling, by the scheduler, the plurality of jobs according to the priority level associated with said each job of the plurality of jobs;</claim-text><claim-text>wherein the set of parameters used for determining the priority level also comprises a first parameter relating to a storage tier of said first storage tier and said second storage tier to be used for data required for execution of the each job in question and a second parameter relating to a position of the data required for the execution of the each job in question.</claim-text></claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer system according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising a computer program comprising instructions that cause the computer system to implement the method.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory computer-readable medium on which a computer program comprising instructions recorded, wherein the instructions cause a computer system to implement a method of managing jobs in an information system on which a plurality of jobs run,<claim-text>said computer system comprising<claim-text>a plurality of nodes;</claim-text><claim-text>at least a first storage tier associated with a first performance tier and a second storage tier associated with a second performance tier lower than the first performance tier; and</claim-text><claim-text>a scheduler configured to implement the method of managing jobs in the information system, each job of said plurality of jobs being associated with a priority level determined from a set of parameters including at least one node of the plurality of nodes on which the each job is to be executed,</claim-text></claim-text><claim-text>said method comprising:<claim-text>scheduling, by the scheduler, the plurality of jobs according to the priority level associated with said each job of the plurality of jobs;</claim-text><claim-text>wherein the set of parameters used for determining the priority level also comprises a first parameter relating to a storage tier of said first storage tier and said second storage tier to be used for data required for execution of the each job in question and a second parameter relating to a position of the data required for the execution of the each job in question.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>