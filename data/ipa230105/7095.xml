<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007096A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007096</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363603</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>258</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEM AND METHOD FOR A REAL-TIME APPLICATION PROGRAMMING INTERFACE BROKER SERVICE ACROSS CLOUD SERVICE PROVIDERS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Dell Products L.P.</orgname><address><city>Hopkinton</city><state>MA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Wilson</last-name><first-name>Lucas Avery</first-name><address><city>Cedar Park</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Patel</last-name><first-name>Dharmesh M.</first-name><address><city>Round Rock</city><state>TX</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for managing cloud service providers (CSPs) includes obtaining, by a CSP application broker, an application programming interface (API) request from an application, performing a target CSP analysis to identify a target CSP to service the API call, performing an API call modification based on the target CSP to obtain a CSP API call, sending the CSP API call to the target CSP, obtain a target API response from the target CSP, perform a CSP API response modification to obtaining a modified API response, and sending the translated API response to the application, wherein the application and the CSP application broker operate in the CSP.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="234.95mm" wi="84.84mm" file="US20230007096A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="219.88mm" wi="168.23mm" orientation="landscape" file="US20230007096A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="242.57mm" wi="104.99mm" file="US20230007096A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="204.98mm" wi="88.90mm" file="US20230007096A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="230.80mm" wi="149.18mm" orientation="landscape" file="US20230007096A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="206.25mm" wi="121.50mm" file="US20230007096A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Computing devices in a system may include any number of internal components such as processors, memory, and persistent storage. Cloud service providers may host applications that provide services for users. The cloud service providers may utilize any number of computing devices. The computing devices of a cloud service provider may include functions that are specific to a cloud service provider.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0003" num="0002">In general, in one aspect, the invention relates to a method for managing a cloud service provider (also referred to as a CSP). The method includes obtaining, by a CSP application broker, an application programming interface (API) request from an application, performing a target CSP analysis to identify a target CSP to service the API call, performing an API call modification based on the target CSP to obtain a CSP API call, sending the CSP API call to the target CSP, obtain a target API response from the target CSP, perform a CSP API response modification to obtain a modified API response, and sending the translated API response to the application, wherein the application and the CSP application broker operate in the CSP.</p><p id="p-0004" num="0003">In general, in one aspect, the invention relates to a non-transitory computer readable medium that includes computer readable program code, which when executed by a computer processor enables the computer processor to perform a method for managing cloud service providers (CSPs). The method includes obtaining, by a CSP application broker, an application programming interface (API) request from an application, performing a target CSP analysis to identify a target CSP to service the API call, performing an API call modification based on the target CSP to obtain a CSP API call, sending the CSP API call to the target CSP, obtain a target API response from the target CSP, perform a CSP API response modification to obtain a modified API response, and sending the translated API response to the application, wherein the application and the CSP application broker operate in the CSP.</p><p id="p-0005" num="0004">In general, in one aspect, the invention relates to a system that includes a processor and memory that includes instructions, which when executed by the processor, perform a method. The method includes obtaining, by a CSP application broker, an application programming interface (API) request from an application, performing a target CSP analysis to identify a target CSP to service the API call, performing an API call modification based on the target CSP to obtain a CSP API call, sending the CSP API call to the target CSP, obtain a target API response from the target CSP, perform a CSP API response modification to obtaining a modified API response, and sending the translated API response to the application, wherein the application and the CSP application broker operate in the CSP.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0006" num="0005">Certain embodiments of the invention will be described with reference to the accompanying drawings. However, the accompanying drawings illustrate only certain aspects or implementations of the invention by way of example and are not meant to limit the scope of the claims.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a diagram of a system in accordance with one or more embodiments of the invention.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> shows a flowchart for managing application programming interface (API) calls in accordance with one or more embodiments of the invention.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> shows a flowchart for managing translated API calls in accordance with one or more embodiments of the invention.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example in accordance with one or more embodiments of the invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a diagram of a computing device in accordance with one or more embodiments of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0012" num="0011">Specific embodiments will now be described with reference to the accompanying figures. In the following description, numerous details are set forth as examples of the invention. It will be understood by those skilled in the art that one or more embodiments of the present invention may be practiced without these specific details and that numerous variations or modifications may be possible without departing from the scope of the invention. Certain details known to those of ordinary skill in the art are omitted to avoid obscuring the description.</p><p id="p-0013" num="0012">In the following description of the figures, any component described with regard to a figure, in various embodiments of the invention, may be equivalent to one or more like-named components described with regard to any other figure. For brevity, descriptions of these components will not be repeated with regard to each figure. Thus, each and every embodiment of the components of each figure is incorporated by reference and assumed to be optionally present within every other figure having one or more like-named components. Additionally, in accordance with various embodiments of the invention, any description of the components of a figure is to be interpreted as an optional embodiment, which may be implemented in addition to, in conjunction with, or in place of the embodiments described with regard to a corresponding like-named component in any other figure.</p><p id="p-0014" num="0013">In general, embodiments of the invention relate to methods and systems for managing cloud service providers. Specifically, embodiments of the invention relate to a method for brokering application programming interface (API) calls across multiple cloud service providers (CSPs). The API calls may be initiated by an application of a first cloud service provider to a CSP-specific function in a second CSP. The API calls may be brokered using a CSP application broker. The CSP application broker may obtain an API call to be performed by a function. The CSP application broker may identify a CSP-specific function to service the API call. The identification may be based on historical API call behaviors and/or previous selections. The identified CSP-specific function may be one of a second CSP. In such scenarios, the CSP application broker may perform a translation to the API call based on the function protocol of the second CSP. The translated API call may be provided to the identified function, and an API response may be obtained. The obtained API response may be translated based on the native application protocol of the CSP in which the CSP application broker operates.</p><p id="p-0015" num="0014">In one or more embodiments of the invention, additional metrics based on the servicing of the API call by the second CSP may be obtained and stored by the CSP application broker. The additional metrics may specify usage information of the computing resources in the CSP by the identified function. Further, the additional metrics may specify the incurred cost on the application. The incurred cost may include for example, any financial cost incurred on the application for the utilization of a function for a second CSP. Additionally, the cost may specify a latency cost (e.g., the time taken for the API call to be serviced following the translation and sending by the CSP application broker. In one or more embodiments of the invention, such additional metrics may be used by the CSP application broker for future identifications of CSP-specific functions of future API calls.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example system in accordance with one or more embodiments of the invention. The system includes two or more cloud service providers (<b>130</b>, <b>160</b>) connected via a network (<b>180</b>). The system may include additional, fewer, and/or different components without departing from the invention. Each cloud service provider (CSP) (<b>130</b>, <b>160</b>) includes one or more applications (<b>132</b>), a CSP application broker (<b>140</b>), and any number of CSP-specific functions (<b>150</b>). Each component may be operably connected to any of the other components via any combination of wired and/or wireless connections. Each component illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> is discussed below.</p><p id="p-0017" num="0016">In one or more embodiments of the invention, the cloud service provider (<b>130</b>) host applications (<b>132</b>) (also referred to as CSP applications). The applications (<b>132</b>) may be logical entities executed using computing resources (not shown) of the cloud service provider (<b>130</b>). Each of the applications (<b>132</b>) may be performing similar or different processes. In one or more embodiments of the invention, the applications (<b>132</b>) provide services to users, e.g., clients (not shown). The applications may be, for example, instances of databases, email servers, and/or other applications without departing from the invention. In one or more embodiments of the invention, the CSP applications (<b>132</b>) utilizes the services of CSP-specific functions (<b>150</b>) (further discussed below).</p><p id="p-0018" num="0017">In one or more of embodiments of the invention, the applications (<b>132</b>) are implemented as computer instructions, e.g., computer code, stored on a persistent storage that when executed by a processor(s) of a computing device (see, e.g., <figref idref="DRAWINGS">FIG. <b>4</b></figref>) cause the computing device to provide the functionality of the applications (<b>132</b>) described throughout this application.</p><p id="p-0019" num="0018">In one or more embodiments of the invention, the CSP application broker (<b>140</b>) manages commands initiated by the CSP applications (<b>132</b>). The commands may be implemented as API calls sent by one of the CSP applications (<b>132</b>). To perform the aforementioned functionality, the CSP application broker (<b>140</b>) may include a CSP API call translator (<b>142</b>), a historical API call database (<b>144</b>), and a target CSP identifier (<b>146</b>). The CSP application broker (<b>140</b>) may include additional, fewer, and/or different components without departing from the invention.</p><p id="p-0020" num="0019">In one or more embodiments of the invention, the CSP API call translator (<b>142</b>) translates API calls and/or API response from a first CSP protocol to a second CSP protocol. The translation may be based on the CSP to which the CSP application broker intends to send the API call and/or API response. For example, if the CSP application broker (<b>140</b>) is to send an API call to a second CSP (e.g., <b>160</b>), the CSP API call translator (<b>142</b>) may translate the API call to a format readable using a CSP protocol of a CSP-specific function of the second CSP (<b>160</b>). The translations of the API calls and/or API responses may be performed in accordance with <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0021" num="0020">In one or more embodiments of the invention, the historical API call database (<b>144</b>) is a data structure that stores metrics corresponding to previous API calls. The previous API calls may be such API calls serviced by the CSP (<b>130</b>) or by other CSPs (e.g., <b>160</b>) in the system. The metrics may specify information regarding the API calls. Such information may include, but is not limited to, the financial cost of performing the API call, the latency cost (e.g., time taken to perform the API call), the CSP(s) utilized to complete the API call, and the computing resource use of the computing devices performing the function(s). Such metrics stored in the historical API call database (<b>144</b>) may be used by the CSP application broker (<b>140</b>) to identify future CSPs for future API calls. In one or more embodiments of the invention, the historical API call database (<b>144</b>) may further include information regarding the CSP-specific functions (<b>150</b>) of other CSPs and their predicted costs (either financial, latency-related, etc.).</p><p id="p-0022" num="0021">In one or more embodiments of the invention, the target CSP identifier (<b>146</b>) includes functionality for identifying a target CSP to perform an obtained API call. The target CSP identifier (<b>146</b>) may perform the identification in accordance with the method of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0023" num="0022">In one or more of embodiments of the invention, the CSP application broker (<b>140</b>) are implemented as computer instructions, e.g., computer code, stored on a persistent storage that when executed by a processor(s) of a computing device (see, e.g., <figref idref="DRAWINGS">FIG. <b>4</b></figref>) cause the computing device to provide the functionality of the CSP application broker (<b>140</b>) described throughout this application.</p><p id="p-0024" num="0023">In one or more embodiments of the invention, the CSP application broker (<b>140</b>) is implemented as a logical device. The logical device may utilize the computing resources of any number of computing devices and thereby provide the functionality of the CSP application broker (<b>140</b>) described throughout this application.</p><p id="p-0025" num="0024">In one or more embodiments of the invention, the CSP-specific functions (<b>150</b>) provide functionality to the CSP applications (<b>132</b>). The CSP-specific functions (also referred to as functions) may provide the functionality using computing resources of the corresponding CSP (<b>130</b>). The applications (<b>132</b>) may utilize the computing resources of the CSP (<b>130</b>) via the CSP-specific functions (<b>150</b>). The usage of the computing resources via the CSP-specific functions (<b>150</b>) may be based on previously-agreed upon terms between the users of the applications (<b>132</b>) and the owners/operators of the CSP (<b>130</b>). For example, the user may be subscribed to a monthly subscription to one or more of the CSP-specific functions (<b>150</b>). Examples of CSP-specific functions include, but are not limited to: data processing of data generated by the applications (<b>132</b>), monitoring network traffic for the applications (<b>132</b>), managing user logins for the users of the applications (<b>132</b>), and providing security functions.</p><p id="p-0026" num="0025">In one or more embodiments of the invention, the cloud service provider (<b>130</b>) is implemented as a logical device. The logical device may utilize the computing resources of any number of computing devices and thereby provide the functionality of the cloud service provider (<b>130</b>) described throughout this application.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> show flowcharts in accordance with one or more embodiments of the invention. While the various steps in the flowcharts are presented and described sequentially, one of ordinary skill in the relevant art will appreciate that some or all of the steps may be executed in different orders, may be combined or omitted, and some or all steps may be executed in parallel. In one embodiment of the invention, the steps shown in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> may be performed in parallel with any other steps shown in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> without departing from the scope of the invention.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> shows a flowchart for processing API calls in accordance with one or more embodiments of the invention. The method shown in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> may be performed by, for example, a CSP application broker (<b>140</b>, <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Other components of the system illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may perform the method of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> without departing from the invention.</p><p id="p-0029" num="0028">Turning to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, in step <b>200</b>, an application programming interface (API) request is obtained from an application in the CSP. In one or more embodiments of the invention, the API call includes a request to utilize a function for the operation of the application. The function may provide functionalities of, for example, performing data processing, monitoring network traffic for a specified period of time, managing the logins of users for the application, performing security functions, and/or any other functions without departing from the invention.</p><p id="p-0030" num="0029">In one or more embodiments of the invention, the API call includes a function call and a set of parameters. The function call and the set of parameters may be in a format readable using a CSP protocol of the CSP in which the function operates.</p><p id="p-0031" num="0030">In step <b>202</b>, a target CSP analysis is performed to identify a target CSP to perform the API call. In one or more embodiments of the invention, the target CSP analysis includes analyzing the historical API call database to determine potential CSP-specific functions that may service the API call. For example, the historical API call database may specify a function, operating in a second CSP, capable of servicing the API call. The historical API call database may further specify the financial cost, latency cost of the function in the second CSP servicing the API call. The CSP application broker may use the aforementioned information to determine that the function, operating in the second CSP, is the optimal function to service the API call. Following the determination, the second CSP is identified as the target CSP.</p><p id="p-0032" num="0031">In step <b>204</b>, a CSP API modification is performed on the API call based on the target CSP to obtain a CSP API call. In one or more embodiments of the invention, the CSP API modification is a process for generating the CSP API call using the function call and parameters of the API call. The function call and parameters are used to populate the CSP API call that matches the protocol of the target CSP in which the function operates. In this manner, the CSP API call is readable to the aforementioned function.</p><p id="p-0033" num="0032">In step <b>206</b>, the CSP API call is sent to the identified target CSP. In one or more embodiments of the invention, the CSP API call may be sent directly to the CSP-specific function operating in the identified target CSP. Alternatively, the CSP API call may be sent to a second CSP application broker operating in the target CSP.</p><p id="p-0034" num="0033">In step <b>208</b>, a CSP API response is obtained from the target CSP. In one or more embodiments of the invention, the CSP API response specifies the servicing (or lack thereof) of the API call. Further, the CSP API response may specify additional metrics corresponding to the servicing. For example, the additional metrics may include a timestamp indicating when the API call was serviced, the computing resources used to perform the CSP-specific function, the financial cost for the CSP-specific function to service the API call, and/or any other metrics without departing from the invention. The CSP API response may be in a format readable to the CSP hosting the CSP-specific function.</p><p id="p-0035" num="0034">In step <b>210</b>, a CSP API response modification is performed to obtain a modified API response. The modified API response may be generated by populating an API response that matches the protocol of the CSP in which the application sending the API call operates. The modified API response may specify the information included in the obtained CSP response.</p><p id="p-0036" num="0035">In step <b>212</b>, the modified API response is sent to the CSP application. In one or more embodiments of the invention, by sending the modified API response, the application is notified of the servicing (or, in some occasions, the lack thereof) of the API call initially sent by the application. By providing the modified API response in a format readable to the protocol of the CSP in which the application operates, the application has no need to be aware of the function servicing the API call as one being in a different CSP.</p><p id="p-0037" num="0036">In step <b>214</b>, the historical API call database is updated based on the modified API response. In one or more embodiments of the invention, the historical API call database is updated based on the obtained additional metrics discussed above.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> shows a flowchart for managing translated API calls in accordance with one or more embodiments of the invention. The method shown in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> may be performed by, for example, a CSP-specific function (e.g., <b>150</b>, <figref idref="DRAWINGS">FIG. <b>1</b></figref>) of a CSP (e.g., <b>160</b>, <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Other components of the system illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may perform the method of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> without departing from the invention.</p><p id="p-0039" num="0038">In step <b>220</b>, a CSP API call is obtained from a CSP application broker. The translated CSP API may be the one discussed in steps <b>204</b> and <b>206</b>. Such CSP API call may be in a format readable using the CSP protocol of the CSP-specific function performing the method of <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>.</p><p id="p-0040" num="0039">In step <b>222</b>, servicing of the CSP API call is initiated using a corresponding function in the CSP. In one or more embodiments of the invention, the servicing includes providing the computing resources of the CSP to perform the requested function specified in the CSP API call. The servicing may be performed by the CSP-specific function of the CSP.</p><p id="p-0041" num="0040">In step <b>224</b>, a notification of servicing of the CSP API call is obtained. In one or more embodiments of the invention, the CSP-specific function may generate a notification that specifies the servicing (or lack thereof) of the CSP API call.</p><p id="p-0042" num="0041">In step <b>226</b>, a CSP API response is sent to the CSP application broker. In one or more embodiments of the invention, the CSP API response may include the generated notification. Specifically, the CSP API response may specify the servicing (or lack thereof) of the CSP API call. Further, the CSP API response may specify additional metrics corresponding to the servicing. The CSP API response may be in a format readable to the CSP hosting the CSP-specific function.</p><heading id="h-0005" level="1">Example</heading><p id="p-0043" num="0042">The following section describes an example. The example, illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, is not intended to limit the invention and is independent from any other examples discussed in this application. Turning to the example, consider a scenario in which a machine learning model implementation application is executing on a first cloud service provider (CSP).</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example system in accordance with one or more embodiments of the invention. For the sake of brevity, not all components of the example system may be illustrated. The example system includes CSP A (<b>330</b>) and CSP B (<b>340</b>) connected via a network (not shown). CSP A (<b>330</b>) provides the computing resources for the machine learning model implementation application (<b>332</b>) to execute. The machine learning model implementation application (<b>332</b>) requires to utilize a machine learning training function using training data to improve the machine learning model. The machine learning model implementation application (<b>332</b>) sends an API call to be serviced by a machine learning training function (<b>342</b>) [1].</p><p id="p-0045" num="0044">CSP A (<b>330</b>) further includes a CSP application broker (<b>334</b>). The CSP application broker (<b>334</b>) may intercept the API call from the application (<b>332</b>). The API call may specify performing the machine learning training using a training data set. The CSP application broker (<b>334</b>) may perform the method of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> to identify both machine learning training function A (<b>336</b>) and machine learning training function B (<b>342</b>). Specifically, the CSP application broker (<b>334</b>) utilizes a historical API call database (not shown) to determine the time spent to perform the machine learning training for each machine learning training function (e.g., <b>336</b>, <b>342</b>).</p><p id="p-0046" num="0045">The CSP application broker (<b>334</b>) determines that the total time taken to perform the machine learning training is performed faster by machine learning training function B (<b>342</b>) than machine learning training function A (<b>336</b>). Based on this determination, and the fact that machine learning training function B (<b>342</b>) executes on CSP B (<b>340</b>), CSP application broker (<b>334</b>) identifies CSP B (<b>340</b>) as the target CSP. The CSP application broker (<b>334</b>) generates a CSP API call that is in a readable format for CSP B (<b>340</b>) [2]. The CSP application broker (<b>334</b>) sends the CSP API call to machine learning training function B (<b>342</b>) in CSP B (<b>340</b>) [3].</p><p id="p-0047" num="0046">In response to obtaining the CSP API call, the machine learning training function (<b>342</b>) performs the machine learning training using the training data set stored in CSP B (<b>340</b>). Following the machine learning training function (<b>342</b>) performing the machine learning training, a CSP API response is produced by machine learning training function B (<b>342</b>). The CSP API response is intercepted by the CSP application broker (<b>334</b>) [4]. The CSP application broker (<b>334</b>) identifies the intended recipient of the CSP API response as the machine learning model implementation application (<b>332</b>).</p><p id="p-0048" num="0047">Based on this identification, the CSP application broker (<b>334</b>) performs a CSP API response modification in accordance with the method of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> [5]. The result is a modified API response. The modified API response is provided to the machine learning model implementation application (<b>332</b>) [6]. The modified API response specifies the servicing of the machine learning training. The modified API response further includes the trained machine learning model. The machine learning model implementation application (<b>332</b>) may implement the obtained trained machine learning model.</p><p id="p-0049" num="0048">Following the provided modified API response, the CSP application broker (<b>334</b>) stores an entry in the historical API call database that specifies the servicing of the API call. Additionally, the entry specifies additional metrics based on the servicing. The additional metrics include the time taken for the machine learning training function to train the machine learning model, the amount of data in the training dataset, the financial cost of utilizing CSP B (<b>340</b>) to perform the training, and the time taken to transfer the trained machine learning model to CSP A (<b>330</b>).</p><heading id="h-0006" level="1">End of Example</heading><p id="p-0050" num="0049">As discussed above, embodiments of the invention may be implemented using computing devices. <figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a diagram of a computing device in accordance with one or more embodiments of the invention. The computing device (<b>400</b>) may include one or more computer processors (<b>402</b>), non-persistent storage (<b>404</b>) (e.g., volatile memory, such as random access memory (RAM), cache memory), persistent storage (<b>406</b>) (e.g., a hard disk, an optical drive such as a compact disk (CD) drive or digital versatile disk (DVD) drive, a flash memory, etc.), a communication interface (<b>412</b>) (e.g., Bluetooth interface, infrared interface, network interface, optical interface, etc.), input devices (<b>410</b>), output devices (<b>408</b>), and numerous other elements (not shown) and functionalities. Each of these components is described below.</p><p id="p-0051" num="0050">In one embodiment of the invention, the computer processor(s) (<b>402</b>) may be an integrated circuit for processing instructions. For example, the computer processor(s) may be one or more cores or micro-cores of a processor. The computing device (<b>400</b>) may also include one or more input devices (<b>410</b>), such as a touchscreen, keyboard, mouse, microphone, touchpad, electronic pen, or any other type of input device. Further, the communication interface (<b>412</b>) may include an integrated circuit for connecting the computing device (<b>400</b>) to a network (not shown) (e.g., a local area network (LAN), a wide area network (WAN) such as the Internet, mobile network, or any other type of network) and/or to another device, such as another computing device.</p><p id="p-0052" num="0051">In one embodiment of the invention, the computing device (<b>400</b>) may include one or more output devices (<b>408</b>), such as a screen (e.g., a liquid crystal display (LCD), a plasma display, touchscreen, cathode ray tube (CRT) monitor, projector, or other display device), a printer, external storage, or any other output device. One or more of the output devices may be the same or different from the input device(s). The input and output device(s) may be locally or remotely connected to the computer processor(s) (<b>402</b>), non-persistent storage (<b>404</b>), and persistent storage (<b>406</b>). Many different types of computing devices exist, and the aforementioned input and output device(s) may take other forms.</p><p id="p-0053" num="0052">One or more embodiments of the invention may be implemented using instructions executed by one or more processors of the data management device. Further, such instructions may correspond to computer readable instructions that are stored on one or more non-transitory computer readable mediums.</p><p id="p-0054" num="0053">One or more embodiments of the invention may improve the operation of one or more computing devices. More specifically, embodiments of the invention reduce the limitations of applications operating on a cloud service providers from utilizing functions of other cloud service providers if the second cloud service providers reduce the cost and/or improve the execution of the applications. Embodiments of the invention include providing a cloud service provider application broker that enable obtained API calls to be modified such that the other cloud service providers may execute the modified API calls. Any CSP responses obtained from the other CSP may be modified such that the application sending the initial API call determines how the API call is serviced. In this manner, the application does not need to modify its instructions to enable usage of other functions in other CSPs.</p><p id="p-0055" num="0054">While the invention has been described above with respect to a limited number of embodiments, those skilled in the art, having the benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for managing an application in a cloud service provider (CSP), the method comprising:<claim-text>obtaining, by a CSP application broker, an application programming interface (API) request from an application;</claim-text><claim-text>performing a target CSP analysis to identify a target CSP to service the API call;</claim-text><claim-text>performing an API call modification based on the target CSP to obtain a CSP API call;</claim-text><claim-text>sending the CSP API call to the target CSP;</claim-text><claim-text>obtaining a target API response from the target CSP;</claim-text><claim-text>perform a CSP API response modification to obtain a modified API response; and</claim-text><claim-text>sending the translated API response to the application,</claim-text><claim-text>wherein the application and the CSP application broker operate in the CSP.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the API call is in a format readable to the CSP, and wherein the translated API call is in a format readable to the target CSP.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the performing the target CSP analysis comprises:<claim-text>identifying a function associated with the API call;</claim-text><claim-text>making a determination that the target CSP comprises the function; and</claim-text><claim-text>based on the determination, selecting the target CSP.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the function is specific to the target CSP.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the determination is based on a historical API call database.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, the method further comprising:<claim-text>updating the historical API call database based on the target API response to obtain an updated historical API call database;</claim-text><claim-text>after updating the historical API call database:<claim-text>obtaining a second API call from the application;</claim-text><claim-text>performing a second target CSP analysis using the updated historical API call database to identify a second target CSP to service the API call;</claim-text><claim-text>performing a second API call modification based on the target CSP to obtain a second CSP API call;</claim-text><claim-text>sending the second CSP API call to the target CSP;</claim-text><claim-text>obtaining a second CSP API response from the target CSP;</claim-text><claim-text>perform a second CSP API response modification to obtain a second modified API response; and</claim-text><claim-text>sending the second modified API response to the application.</claim-text></claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the target CSP and the CSP are operatively connected via a network.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory computer readable medium comprising computer readable program code, which when executed by a computer processor enables the computer processor to perform a method for managing cloud service providers (CSPs), the method comprising:<claim-text>obtaining, by a CSP application broker, an application programming interface (API) request from an application;</claim-text><claim-text>performing a target CSP analysis to identify a target CSP to service the API call;</claim-text><claim-text>performing an API call modification based on the target CSP to obtain a CSP API call;</claim-text><claim-text>sending the CSP API call to the target CSP;</claim-text><claim-text>obtaining a target API response from the target CSP;</claim-text><claim-text>perform a CSP API response modification to obtain a modified API response; and</claim-text><claim-text>sending the translated API response to the application,</claim-text><claim-text>wherein the application and the CSP application broker operate in the CSP.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the API call is in a format readable to the CSP, and wherein the translated API call is in a format readable to the target CSP.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the performing the target CSP analysis comprises:<claim-text>identifying a function associated with the API call;</claim-text><claim-text>making a determination that the target CSP comprises the function; and</claim-text><claim-text>based on the determination, selecting the target CSP.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the function is specific to the target CSP.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the determination is based on a historical API call database.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00010">claim 10</claim-ref>, the method further comprising:<claim-text>updating the historical API call database based on the target API response to obtain an updated historical API call database;</claim-text><claim-text>after updating the historical API call database:<claim-text>obtaining a second API call from the application;</claim-text><claim-text>performing a second target CSP analysis using the updated historical API call database to identify a second target CSP to service the API call;</claim-text><claim-text>performing a second API call modification based on the target CSP to obtain a second CSP API call;</claim-text><claim-text>sending the second CSP API call to the target CSP;</claim-text><claim-text>obtaining a second CSP API response from the target CSP;</claim-text><claim-text>perform a second CSP API response modification to obtain a second modified API response; and</claim-text><claim-text>sending the second modified API response to the application.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the target CSP and the CSP are operatively connected via a network.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A system comprising:<claim-text>a processor; and</claim-text><claim-text>memory comprising instructions, which when executed by the processor, perform a method comprising:<claim-text>obtaining, by a CSP application broker, an application programming interface (API) request from an application;</claim-text><claim-text>performing a target CSP analysis to identify a target CSP to service the API call;</claim-text><claim-text>performing an API call modification based on the target CSP to obtain a CSP API call;</claim-text><claim-text>sending the CSP API call to the target CSP;</claim-text><claim-text>obtaining a target API response from the target CSP;</claim-text><claim-text>perform a CSP API response modification to obtain a modified API response; and</claim-text><claim-text>sending the translated API response to the application,</claim-text><claim-text>wherein the application and the CSP application broker operate in the CSP.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the API call is in a format readable to the CSP, and wherein the translated API call is in a format readable to the target CSP.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the performing the target CSP analysis comprises:<claim-text>identifying a function associated with the API call;</claim-text><claim-text>making a determination that the target CSP comprises the function; and</claim-text><claim-text>based on the determination, selecting the target CSP.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the function is specific to the target CSP.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the determination is based on a historical API call database.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, the method further comprising:<claim-text>updating the historical API call database based on the target API response to obtain an updated historical API call database;</claim-text><claim-text>after updating the historical API call database:<claim-text>obtaining a second API call from the application;</claim-text><claim-text>performing a second target CSP analysis using the updated historical API call database to identify a second target CSP to service the API call;</claim-text><claim-text>performing a second API call modification based on the target CSP to obtain a second CSP API call;</claim-text><claim-text>sending the second CSP API call to the target CSP;</claim-text><claim-text>obtaining a second CSP API response from the target CSP;</claim-text><claim-text>perform a second CSP API response modification to obtain a second modified API response; and</claim-text><claim-text>sending the second modified API response to the application.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>