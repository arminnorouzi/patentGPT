<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004417A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004417</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17903327</doc-number><date>20220906</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>45558</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>542</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2009</main-group><subgroup>45579</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHOD AND APPARATUS TO SELECT ASSIGNABLE DEVICE INTERFACES FOR VIRTUAL DEVICE COMPOSITION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Intel Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>NARAYANAN</last-name><first-name>Karthik V.</first-name><address><city>Chandler</city><state>AZ</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>SRINIVASAN</last-name><first-name>Raghunathan</first-name><address><city>Chandler</city><state>AZ</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>KUMAR</last-name><first-name>Karthik</first-name><address><city>Chandler</city><state>AZ</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Scalable I/O Virtualization (Scalable IOV) allows efficient and scalable sharing of Input/Output (I/O) devices across a large number of containers or Virtual Machines. Scalable IOV defines the granularity of sharing of a device as an Assignable Device Interface (ADI). In response to a request for a virtual device composition, an ADI is selected based on affinity to the same NUMA node as the running virtual machine, utilization metrics for the Input-Output Memory Management Unit (IOMMU) unit and utilization metrics of a device of a same device class. Selecting the ADI based on locality and utilization metrics reduces latency and increases throughput for a virtual machine running critical or real-time workloads.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="206.84mm" wi="158.75mm" file="US20230004417A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="215.05mm" wi="162.48mm" file="US20230004417A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="230.63mm" wi="162.98mm" file="US20230004417A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="227.08mm" wi="168.06mm" file="US20230004417A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="191.77mm" wi="145.37mm" orientation="landscape" file="US20230004417A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="230.21mm" wi="165.86mm" file="US20230004417A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="222.59mm" wi="137.92mm" file="US20230004417A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="225.72mm" wi="167.56mm" orientation="landscape" file="US20230004417A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="218.10mm" wi="158.50mm" file="US20230004417A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Virtualization allows system software called a virtual machine monitor (VMM), also known as a hypervisor, to create multiple isolated execution environments called virtual machines (VMs) in which operating systems (OSs) and applications can run. Virtualization is extensively used in enterprise and cloud data centers as a mechanism to consolidate multiple workloads onto a single physical machine while still keeping the workloads isolated from each other.</p><p id="p-0003" num="0002">With software-based Input/Output (I/O) virtualization, the VMM exposes a virtual device (such as network interface controller (NIC) functionality, for example) to a VM. A software device model in the VMM or host operating system (OS) emulates the behavior of the virtual device. The software device model translates virtual device commands to physical device commands before forwarding the commands to the physical device.</p><p id="p-0004" num="0003">VMMs may make use of platform support for Direct Memory Access (DMA) and interrupt remapping capability (such as Intel&#xae; VT-d) to support &#x2018;direct device assignment&#x2019; allowing guest software to directly access the assigned device. This direct device assignment provides the best I/O virtualization performance since the VMM is no longer in the way of most guest software accesses to the device. However, this approach requires the device to be exclusively assigned to a VM and does not support sharing of the device across multiple VMs.</p><p id="p-0005" num="0004">Single Root I/O Virtualization (SR-IOV) is a PCI-SIG defined specification for hardware-assisted I/O virtualization that defines a standard way for partitioning endpoint devices for direct sharing across multiple VMs or containers. An SR-IOV capable endpoint device may support one or more Physical Functions (PFs), each of which may support multiple Virtual Functions (VFs). The PF functions as the resource management entity for the device and is managed by a PF driver in the host OS. Each VF can be assigned to a VM or container for direct access. SR-IOV is supported by multiple high performance I/O devices such as network and storage controller devices as well as programmable or reconfigurable devices such as Graphics processing Units (GPUs), Field Programmable Gate Arrays (FPGAs) and other emerging accelerators. In some embodiments, SR-IOV is implemented using PCIe. In other embodiments, interconnects other than PCIe may be used.</p><p id="p-0006" num="0005">As hyper-scale computing models proliferate along with an increasing number of processing elements (for example, processing cores) on modern processors, a high-volume computing platform (for example, computer server) is used to host an order of magnitude higher number of bare-metal or machine containers than traditional VMs. Many of these usages such as network function virtualization (NFV) or heterogeneous computing with accelerators require high performance hardware-assisted I/O virtualization. These dynamically provisioned high-density usages (that is, on the order of 1,000 domains) demand more scalable and fine-grained I/O virtualization solutions than are provided by traditional virtualization usages supported by SR-IOV capable devices.</p><p id="p-0007" num="0006">Scalable I/O virtualization (Scalable IOV) defines a scalable and flexible approach to hardware-assisted I/O virtualization targeting hyper-scale usages. Scalable IOV builds on an already existing set of Peripheral Component Interconnect (PCI) Express capabilities, enabling the Scalable IOV architecture to be easily supported by compliant PCI Express endpoint device designs and existing software ecosystems.</p><p id="p-0008" num="0007">Scalable IOV enables highly scalable and high-performance sharing of I/O devices across isolated domains, while containing the cost and complexity for endpoint device hardware to support such scalable sharing. Depending on the usage model, the isolated domains may be traditional VMs, machine containers, bare-metal containers, or application processes.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">Features of embodiments of the claimed subject matter will become apparent as the following detailed description proceeds, and upon reference to the drawings, in which like numerals depict like parts, and in which:</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an example of a high-level software architecture for Scalable IOV</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a logical view of Assignable Device Interface (ADIs) with varying numbers of device backend resources, and virtualization software composing virtual device (VDEV) instances with one or more ADIs</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of a system that includes a plurality of nodes, a plurality of IOMMUs and a plurality of Scalable IOV devices;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example of an ADI selection tree in a system supporting non-uniform memory (NUMA) that includes a plurality of Input/Output Memory Management Units (IOMMU) that span across multiple nodes;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowgraph of a method to select an ADI for a device class;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowgraph of a method to perform an intelligent selection of an ADI for a device class;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a sequence flow diagram to perform an intelligent selection of an ADI for a device class; and</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an embodiment of a server <b>800</b> in a cloud computing system.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0018" num="0017">Although the following Detailed Description will proceed with reference being made to illustrative embodiments of the claimed subject matter, many alternatives, modifications, and variations thereof will be apparent to those skilled in the art. Accordingly, it is intended that the claimed subject matter be viewed broadly, and be defined as set forth in the accompanying claims.</p><heading id="h-0003" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0019" num="0018">Scalable IOV allows efficient and scalable sharing of I/O devices across a large number of containers or VMs. The I/O devices support a large number of command/completion interfaces for efficient multiplexing/demultiplexing of I/O. Scalable IOV assigns the I/O device interfaces to isolated domains at a fine granularity. Scalable IOV defines the granularity of sharing of a device as an Assignable Device Interface (ADI). Each ADI instance on the device encompasses the set of resources on the I/O device that are allocated by software to support direct-path operations for a virtual device.</p><p id="p-0020" num="0019">A Virtual Device (VDEV) is an abstraction through which a shared physical device is exposed to a VM. Each VDEV is backed by one or more ADIs from a similar class of devices.</p><p id="p-0021" num="0020">Orchestration software can statically configure fine grained device resources that can be assigned to a VM. This is typically performed using a VM configuration file. However, the static mapping needs to be modified if the VDEV composition needs to be changed. Thus, static mapping is not scalable across different nodes in a cluster.</p><p id="p-0022" num="0021">An Operating System (OS) can track a free pool of ADIs for each device class. On a request for a VDEV composition, the first available ADI can be selected from the free pool. However, the best available ADI from the free pool may not be selected to compose the VDEV. This may result in higher latencies and poorer throughput for critical workloads running in the VM. For example, a high priority, latency sensitive process/VM can obtain a sub-optimal ADI assignment, resulting in Service Level Agreements (SLAs) being missed whereas a low priority (for example, garbage collection or statistics gathering) function can obtain an optimal ADI assignment.</p><p id="p-0023" num="0022">The ADI selection mechanism does not have visibility into application requirements, application priorities, utilization metrics (for example for Input/Output Memory Management Units (IOMMU)). Furthermore, there is a lack of intelligence in decision making including capabilities to make intelligent decisions and/or implement pre-defined heuristics in ADI assignments.</p><p id="p-0024" num="0023">Instead of selecting the first available ADI from a free ADI pool in response to a request for a VDEV composition, an ADI is selected based on locality and utilization metrics of different interacting components. The ADI is dynamically selected based on affinity to the same NUMA node as the running VM.</p><p id="p-0025" num="0024">Selecting the ADI based on locality and utilization metrics reduces latency and increases throughput for a VM running critical or real-time workloads. The ADI is selected based on affinity to the same NUMA node as the running VM, utilization metrics for the IOMMU unit and utilization metrics of a device of same device class. System software can use an API to request intelligent selection of an ADI for a device class by traversing the ADI selection tree to select the ADI for the device class. The traverse of the ADI selection tree is performed in response to the request from an application through an application programming interface (API) call.</p><p id="p-0026" num="0025">This allows the VDEV composition module to use the ADIs from devices having the lowest utilization metrics. This enables efficient allocation and usage of platform hardware resources and flexibility and scalability, by efficiently utilizing device resources. Critical/real-time workloads inside the VM, can run efficiently and have better performance.</p><p id="p-0027" num="0026">Various embodiments and aspects of the inventions will be described with reference to details discussed below, and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However, in certain instances, well-known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.</p><p id="p-0028" num="0027">Reference in the specification to &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; means that a particular feature, structure, or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase &#x201c;in one embodiment&#x201d; in various places in the specification do not necessarily all refer to the same embodiment.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an example of a high-level software architecture for Scalable IOV <b>100</b>. System software includes a host Operating System (OS) <b>150</b> and a VMM <b>180</b>. The host OS <b>150</b> includes a Virtual Device Composition Module (VDCM) <b>102</b> that is responsible for composing one or more virtual device (VDEV) <b>104</b> instances utilizing one or more Assignable Device Interfaces (ADIs) <b>106</b>, <b>108</b>, by emulating VDEV slow path operations/accesses and mapping the VDEV fast path accesses to ADI instances allocated and configured on the physical device. VDCM <b>102</b> allows Scalable IOV devices to avoid implementing slow path operations in hardware and instead to focus device hardware to efficiently scale the ADIs <b>106</b>, <b>108</b>.</p><p id="p-0030" num="0029">Additionally, virtualization management software (for example, VMM <b>180</b>) uses VDCM <b>102</b> software interfaces for enhanced virtual device resource and state management, enabling capabilities such as suspend, resume, reset, and migration of virtual devices. Depending on the specific VMM implementation, VDCM <b>102</b> is instantiated as a separate user or kernel module or may be packaged as part of a host driver.</p><p id="p-0031" num="0030">Host driver <b>112</b> is loaded and executed as part of host OS <b>150</b> or VMM (hypervisor) software <b>180</b>. The VMM (hypervisor) software <b>180</b> can include and integrate OS components from host OS <b>150</b>, such as a kernel. For example, VMware ESXi is a hypervisor that includes and integrates OS components, such as a kernel. In addition to the role of a normal device driver, host driver <b>112</b> implements software interfaces as defined by host OS <b>150</b> or VMM <b>180</b> infrastructure to support enumeration, configuration, instantiation, and management of a plurality of ADIs <b>128</b>, <b>130</b>, <b>132</b>, <b>134</b>. Host driver <b>112</b> is responsible for configuring each ADI <b>128</b>, <b>130</b>, <b>132</b>, <b>134</b> such as its Process Address Space Identifier (PASID), device-specific Interrupt Message Storage (IMS) for storing ADI's interrupt messages, memory mapped I/O (MMIO) register resources for fast-path access to the ADI <b>128</b>, <b>130</b>, <b>132</b>, <b>134</b>, and any device-specific resources. Reset of an ADI <b>128</b>, <b>130</b>, <b>132</b>, <b>134</b> is performed through software interfaces to host driver <b>112</b> via ADI reset configuration <b>110</b>.</p><p id="p-0032" num="0031">With software-based Input/Output (I/O) virtualization, the VMM exposes a virtual device (such as network interface controller (NIC) functionality, for example) to a VM. Some examples of a NIC are part of an Infrastructure Processing Unit (IPU) or data processing unit (DPU) or utilized by an IPU or DPU. An IPU or DPU can include a network interface, memory devices, and one or more programmable or fixed function processors (e.g., CPU or XPU) to perform offload of operations that could have been performed by a host CPU or XPU or remote CPU or XPU. In some examples, the IPU or DPU can perform virtual switch operations, manage storage transactions (e.g., compression, cryptography, virtualization), and manage operations performed on other IPUs, DPUs, servers, or devices.</p><p id="p-0033" num="0032">Table 1 illustrates an example of a high-level set of operations that host driver <b>112</b> supports for managing ADIs <b>128</b>, <b>130</b>, <b>132</b>, <b>134</b>. These operations are invoked through software interfaces defined by specific system software (for example, host OS <b>150</b> or VMM <b>180</b>) implementations.</p><p id="p-0034" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Host driver interfaces for Scalable IOV</entry></row><row><entry>Description</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><tbody valign="top"><row><entry>Scalable IOV capability reporting for the PF.</entry></row><row><entry>Enumeration of types and maximum number of ADIs/VDEVs.</entry></row><row><entry>Enumeration of resource requirements for each ADI type.</entry></row><row><entry>Enumeration and setting of deployment compatibility for ADIs.</entry></row><row><entry>Allocation, configuration, reset, drain, abort, release of ADI and its</entry></row><row><entry>constituent resources.</entry></row><row><entry>Setting and managing PASID identity of ADIs.</entry></row><row><entry>Managing device-specific Interrupt Message Storage (IMS) for ADIs.</entry></row><row><entry>Enabling guest to host communication channel (if supported).</entry></row><row><entry>Configuring device-specific Quality of Service (QoS) properties of ADIs.</entry></row><row><entry>Enumerating and managing migration compatibility of ADIs.</entry></row><row><entry>Suspending/saving state of ADIs, and restoring/resuming state of ADIs.</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0035" num="0033">Virtual Device Composition Module (VDCM) <b>102</b> is a device specific component responsible for composing one or more virtual device (VDEV) <b>104</b> instances using one or more ADIs <b>106</b>, <b>108</b> allocated by host driver <b>112</b>. VDCM <b>102</b> implements software-based virtualization of VDEV <b>104</b> slow path operations and arranges for fast path operations to be submitted directly to the backing ADIs <b>128</b>, <b>130</b>, <b>132</b>, <b>134</b>. Host OS <b>150</b> or VMM <b>180</b> implementations supporting such hardware-assisted virtual device composition may require VDCM <b>102</b> to be implemented and packaged by device vendors in different ways. For example, in some OS or VMM implementations, VDCM <b>102</b> is packaged as user-space modules or libraries that are installed as part of the device's host driver <b>112</b>. In other implementations, VDCM <b>102</b> is a kernel module. If implemented as a library, VDCM <b>102</b> may be statically or dynamically linked with the VMM-specific virtual machine resource manager (VMRM) responsible for creating and managing VM resources. If implemented in the host OS kernel, VDCM <b>102</b> can be part of host driver <b>112</b>.</p><p id="p-0036" num="0034">Guest driver <b>124</b>, resident in guest VM <b>122</b>, manages VDEV instances <b>104</b> composed by VDCM <b>102</b>. Fast path accesses <b>126</b> by guest driver <b>124</b> are issued directly to ADIs <b>132</b>, <b>134</b> behind VDEV <b>104</b>, while slow path accesses <b>120</b> are intercepted and virtualized by VM resource manager (VMRM) <b>116</b> and VDCM <b>102</b>. Guest driver <b>124</b> can be deployed as a separate driver or as a unified driver that supports both host OS <b>150</b> and guest VM <b>122</b> functionality.</p><p id="p-0037" num="0035">Virtual Device (VDEV) <b>104</b> is the abstraction through which a shared physical device is exposed to software in guest VM <b>122</b>. VDEVs <b>104</b> are exposed to guest VM <b>122</b> as virtual PCI Express enumerated devices, with virtual resources such as virtual Requester-ID, virtual configuration space registers, virtual memory Base Address Registers (BARs), virtual MSI-X table, etc. Each VDEV <b>104</b> may be backed by one or more ADIs <b>128</b>, <b>130</b>, <b>132</b>, <b>134</b>. The ADIs backing a VDEV <b>104</b> typically belong to the same Physical Function (PF) <b>152</b> but implementations are possible where they are allocated across multiple PFs (for example, to support device fault tolerance or load balancing). The physical function (PF) <b>152</b> can include hardware queues <b>136</b>, <b>138</b>, <b>140</b>, <b>142</b>.</p><p id="p-0038" num="0036"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a logical view of ADIs with varying numbers of device backend resources, and virtualization software composing virtual device (VDEV) instances <b>208</b>, <b>210</b>, <b>212</b> with one or more ADIs <b>220</b>, <b>222</b>, <b>224</b>, <b>226</b>. A virtual device (VDEV) can be composed from ADIs of a Scalable IOV device and assigned to a guest virtual machine (VM). A virtual machine can also be referred to as a partition.</p><p id="p-0039" num="0037">There are one or more guest virtual machines (VMs) such as guest virtual machine 1 <b>202</b>, guest virtual machine 2 <b>204</b>, . . . guest virtual machine J <b>206</b>, where J is a natural number, being executed by a computing platform. There are one or more virtual devices (VDEVs) such as virtual device 1 <b>208</b>, virtual device 2 <b>210</b>, . . . virtual device K <b>212</b>, where K is a natural number, being executed by the computing platform. Each guest virtual machine <b>202</b>, <b>204</b>, <b>206</b> may call one or more virtual devices <b>208</b>, <b>210</b>, <b>212</b> for I/O requests. For example, guest virtual machine <b>202</b> calls virtual device 1 <b>208</b>, guest virtual machine 2 <b>204</b> calls virtual device 2 <b>210</b>, and so on to guest virtual machine J calls virtual device K <b>212</b>. There may be any number of guest virtual machines <b>202</b>, <b>204</b>, <b>206</b>. There may be any number of virtual devices <b>208</b>, <b>210</b>, <b>212</b>. The maximum number of virtual devices being called by any one guest virtual machine is implementation dependent. Within endpoint device hardware (that is, Scalable IOV device <b>250</b>), there are one or more ADIs, such as ADI 1 <b>220</b>, ADI 2 <b>222</b>, ADI 3 <b>224</b>, . . . ADI M <b>226</b>, where M is a natural number. There may be any number of ADIs in Scalable IOV device <b>250</b> (that is, it is implementation dependent), and there are one or more Scalable IOV devices (for example, network I/O devices) in the computing platform. The number of Scalable IOV devices <b>250</b> used in a computing platform is implementation dependent. Each ADI uses one or more device backend resources. For example, ADI 1 <b>220</b> uses backend resource 1 (R-1) <b>228</b>, ADI 2 <b>222</b> uses backend resource 2 (R-2) <b>230</b>, ADI 3 <b>224</b> uses backend resource 3 (R-3) <b>232</b>, backend resource 4 (R-4) <b>234</b>, and backend resource 5 (R-5) <b>236</b>, and ADI M <b>226</b> uses backend resource N (R-N) <b>238</b>. The number of backend resources in Scalable IOV device <b>250</b> is implementation dependent.</p><p id="p-0040" num="0038">A host operating system/VMM <b>252</b> performs slow path software emulation <b>214</b>, <b>216</b>, <b>218</b>. Any virtual device <b>208</b>, <b>210</b>, <b>212</b> may take a slow path or a fast path for I/O requests for ADIs. For example, virtual device 1 <b>208</b> can call slow path software emulation <b>214</b>, fast path direct mapping <b>240</b> to ADI 1 <b>220</b> or fast path direct mapping <b>246</b> to ADI 2 <b>222</b> via fast path direct mapping <b>240</b>. For example, virtual device 2 <b>210</b> can call slow path software emulation <b>216</b> or fast path direct mapping <b>242</b> to ADI 3 <b>224</b>. For example, virtual device K <b>212</b> can call slow path software emulation <b>218</b> or fast path direct mapping <b>244</b> to ADI M <b>226</b>.</p><p id="p-0041" num="0039"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of a system <b>300</b> that includes a plurality of nodes <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b>, a plurality of IOMMUs <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b> and a plurality of Scalable IOV devices <b>328</b>, <b>330</b>, <b>332</b>, <b>334</b>, <b>336</b>, <b>338</b>, <b>340</b>, <b>342</b>, <b>344</b>.</p><p id="p-0042" num="0040">A root complex <b>354</b> includes the plurality of IOMMUs <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b>, the plurality of Scalable IOV devices <b>328</b>, <b>330</b>, <b>332</b>, <b>334</b>, <b>336</b>, <b>338</b>, <b>340</b>, <b>342</b>, <b>344</b> and a plurality of ADIs <b>350</b>. The root complex <b>354</b> also includes a host bridge <b>312</b> communicatively coupled to a system bus <b>310</b> and a memory bus <b>322</b>. The system bus <b>310</b> is also communicatively coupled with the plurality of nodes <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b>. The memory bus <b>322</b> is communicatively coupled to a memory <b>352</b>.</p><p id="p-0043" num="0041">The plurality of nodes <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> communicate via the system bus <b>310</b> with the root complex <b>354</b> using the PCIe (Peripheral Component Interconnect Express) protocol. The PCIe standards are available at www.pcisig.com.</p><p id="p-0044" num="0042">Each of the plurality of nodes <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> includes a processor and is associated with a NUMA node and a proximity domain (PD). NUMA is a computer memory architecture used in multiprocessing, where memory access time is dependent on the location of the memory relative to the processor. NUMA nodes are reported through an Advanced Configuration and Power Interface (ACPI) Static Resource Affinity Table (SRAT). ACPI is a standard for device configuration and power management by the operating system.</p><p id="p-0045" num="0043">The ACPI SRAT stores topology information for the processors and memory that describes physical locations of the processors and memory in the system. The operating system scans the ACPI SRAT at boot time and uses the information stored in the ACPI STRAT to allocate memory. For example, the ACPI STRAT allows the operating system to associate processors, memory ranges and generic initiators (for example, heterogenous processors and accelerators, GPUs and I/O devices with integrated compute or DMA engines) with system locality/proximity domains and clock domains.</p><p id="p-0046" num="0044">In the system shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> the IOMMUs <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b> (labeled IOMMU 0-I) span across the nodes <b>302</b>, <b>304</b>, <b>306</b>, <b>308</b> (labeled node 0-N). Each NUMA node provides the association between each IOMMU and the proximity domain (PD) to which the IOMMU belongs. Scalable IOV devices <b>328</b>, <b>330</b>, <b>332</b>, <b>334</b>, <b>336</b>, <b>338</b>, <b>340</b>, <b>342</b>, <b>344</b> (labeled dev 0-8) are assigned to respective IOMMUs <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b> (labeled IOMMU 0-I). Scalable IOV devices <b>328</b>, <b>330</b>, <b>332</b>, <b>334</b>, <b>336</b>, <b>338</b>, <b>340</b>, <b>342</b>, <b>344</b> (labeled dev 0-8) are associated with one or more Assignable Device interfaces (ADI) <b>350</b>. A Remapping Hardware Static Affinity structure (RHSA) in the BIOS provides the association between each IOMMU <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b> and the proximity domain to which that IOMMU <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b> belongs.</p><p id="p-0047" num="0045">The memory <b>352</b> can be a volatile memory. Volatile memory is memory whose state (and therefore the data stored on it) is indeterminate if power is interrupted to the device. Nonvolatile memory refers to memory whose state is determinate even if power is interrupted to the device. Dynamic volatile memory requires refreshing the data stored in the device to maintain state. One example of dynamic volatile memory includes DRAM (dynamic random access memory), or some variant such as synchronous DRAM (SDRAM). A memory subsystem as described herein may be compatible with a number of memory technologies, such as DDR3 (double data rate version 3, original release by JEDEC (Joint Electronic Device Engineering Council) on Jun. 27, 2007, currently on release 21), DDR4 (DDR version 4, JESD79-4 initial specification published in September 2012 by JEDEC), DDR4E (DDR version 4, extended, currently in discussion by JEDEC), LPDDR3 (low power DDR version 3, JESD209-3B, August 2013 by JEDEC), LPDDR4 (LOW POWER DOUBLE DATA RATE (LPDDR) version 4, JESD209-4, originally published by JEDEC in August 2014), WIO2 (Wide I/O 2 (WideIO2), JESD229-2, originally published by JEDEC in August 2014), HBM (HIGH BANDWIDTH MEMORY DRAM, JESD235, originally published by JEDEC in October 2013), DDR5 (DDR version 5, currently in discussion by JEDEC), LPDDR5, originally published by JEDEC in January 2020, HBM2 (HBM version 2), originally published by JEDEC in January 2020, or others or combinations of memory technologies, and technologies based on derivatives or extensions of such specifications. The JEDEC standards are available at www.jedec.org.</p><p id="p-0048" num="0046"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example of an ADI selection tree <b>400</b> in a system supporting non-uniform memory (NUMA) that includes a plurality of Input/Output Memory Management Units (IOMMU) <b>404</b>, <b>406</b>, <b>408</b>, <b>410</b>, <b>412</b>, <b>414</b> that span across multiple nodes. The ADI selection tree <b>400</b> includes root <b>402</b>. System Basic Input/Output (BIOS) starts at root <b>402</b> and enumerates the association between each IOMMU unit <b>404</b>, <b>406</b>, <b>408</b>, <b>410</b>, <b>412</b>, <b>414</b> and the proximity domain (PD) to which the IOMMU unit <b>404</b>, <b>406</b>, <b>408</b>, <b>410</b>, <b>412</b>, <b>414</b> belongs. Each Scalable IOV device (Dev 0-7) implemented in the PCIe bus hierarchy is attached to an IOMMU unit <b>404</b>, <b>406</b>, <b>408</b>, <b>410</b>, <b>412</b>, <b>414</b>. A device driver (for example, host driver <b>112</b>) enumerates the list of available ADIs <b>450</b> to system software during device registration. The ADI selection tree <b>400</b> allows intelligent selection of an ADI <b>450</b> for a VDEV <b>104</b> based on affinity to the same NUMA node as the running VM, utilization metrics for the IOMMU unit <b>404</b>, <b>406</b>, <b>408</b>, <b>410</b>, <b>412</b>, <b>414</b> and utilization metrics of a Scalable IOV device <b>416</b>, <b>418</b>, <b>420</b>, <b>422</b>, <b>424</b>, <b>426</b>, <b>428</b>, <b>430</b> of a same device class.</p><p id="p-0049" num="0047">System software can use an Application Programming Interface (API) to request intelligent selection of an ADI <b>450</b> for a device class. The inputs to the ADI selection tree <b>400</b> include intelligent selection policy, VM NUMA home node and device class.</p><p id="p-0050" num="0048">In the example shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, there are six IOMMU units <b>404</b>, <b>406</b>, <b>408</b>, <b>410</b>, <b>412</b>, <b>414</b>, IOMMU 0 <b>404</b>, IOMMU 3 <b>410</b> and IOMMU 5 <b>414</b> each has one Scalable IOV device, IOMMU 1 <b>404</b> and IOMMU 4 <b>412</b> each have two Scalable IOV devices. Each Scalable IOV device has 1-8 ADIs <b>450</b>.</p><p id="p-0051" num="0049">During boot-up, the operation system (OS) kernel builds the ADI Selection Tree <b>400</b> using the ACPI SRAT and Intel&#xae; Virtualization Technology for Directed I/O (VT-d) tables (DMA-remapping hardware unit definition Structure (DRHD) and RHSA). A DMA-remapping hardware unit definition (DRHD) structure uniquely represents a remapping hardware unit present in the platform. The system BIOS is responsible for detecting remapping hardware functions in the platform and for locating memory-mapped remapping hardware registers in host system address space.</p><p id="p-0052" num="0050">The ADI Selection Tree <b>400</b> maintains a hierarchical relationship between NUMA nodes, IOMMUs, Scalable IOV devices and ADIs. The ADI Selection Tree <b>400</b> also maintains utilization metrics for each remapping unit and devices in a sorted tree. These utilization metrics are updated by the OS kernel at regular intervals, typically seconds.</p><p id="p-0053" num="0051">When a VM powers-on, the NUMA Home node affinity to which the VM's resources are allocated is determined. System software uses an intelligent selection policy to request ADIs <b>106</b>, <b>108</b> from the Virtual Device Composition Module (VDCM) <b>102</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>). The Virtual Device Composition Module (VDCM) <b>102</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) uses the ADI Selection Tree <b>400</b> to determine available ADIs for a specific class of device based on locality and utilization metrics.</p><p id="p-0054" num="0052">In addition, in order to preserve priorities that may be determined at the application level by users, an optional user configuration file can be used to specify a priority High, Medium, Low) for a VM and an option to incorporate priorities in the selection policy, or override the selection policy with priorities. If there is a conflict in resource allocation, the priority assigned to each VM is used to determine the best ADI to assign. For example, if two VMs request a VDEV composition, based upon the VM's priority (High/Med/Low), the ADI is assigned to the VM with the higher priority.</p><p id="p-0055" num="0053">Utilization metrics for the IOMMUs can be determined by periodically polling individual performance monitoring counters in the IOMMUs. Utilization metrics for the Scalable IOV devices can be determined by periodically calling an Application Program Interface (API) to the host driver <b>112</b>. The inputs to the API are Selection Policy, VM Numa Home Node, and Device Class. The selection Policy can be intelligent, static, or dynamic. The output of the API is the ADI that is selected based on the input values.</p><p id="p-0056" num="0054">The utilization metrics for the IOMMU and Scalable IOV devices are used to select an available ADI for a proximity domain in the ADI Selection Tree <b>400</b>. In the ADI Selection tree <b>400</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, IOMMU 1 <b>406</b> and IOMMU 2 <b>408</b> belong to proximity domain PD1. The utilization metrics for IOMMU 1 <b>406</b> and IOMMU 2 <b>408</b> are read from monitoring counters in the IOMMUs. The IOMMU with the lowest utilization is selected. For example, if the utilization of IOMMU 1 <b>406</b> is 35% and the utilization of IOMMU 2 <b>408</b> is 65%, IOMMU 1 <b>406</b>, IOMMU 1 <b>406</b>, the IOMMU with the lowest utilization is selected.</p><p id="p-0057" num="0055">IOMMU 1 <b>406</b> has two Scalable IOV devices <b>418</b>, <b>420</b>. The Scalable IOV device with the lowest utilization is selected. For example, if the utilization of Scalable IOVs device <b>418</b> is 10% and the utilization of Scalable IOVs device <b>420</b> is 40%, scalable IOV device <b>418</b> with the lowest utilization is selected. At the ADI level, one of the available ADIs is selected.</p><p id="p-0058" num="0056"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowgraph of a method to select an ADI for a device class.</p><p id="p-0059" num="0057">At block <b>500</b>, during power on of the VM, a new virtual device (VDEV) is composed from a list of available ADIs by querying the ADI Selection Tree.</p><p id="p-0060" num="0058">At block <b>502</b>, the ADI selection policy can be static, dynamic or intelligent. If the ADI selection policy is intelligent, processing continues with block <b>504</b>. If the ADI selection policy is static, processing continues with block <b>510</b>. If the ADI selection policy is dynamic, processing continues with block <b>512</b></p><p id="p-0061" num="0059">At block <b>504</b>, the ADI selection tree described in conjunction with <figref idref="DRAWINGS">FIG. <b>4</b></figref> is generated. Processing continues with block <b>506</b>.</p><p id="p-0062" num="0060">At block <b>506</b>, the operating system periodically updates utilization metrics in the ADI selection tree shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> at periodic intervals (in seconds). The operating system periodically updates the utilization metrics based on a poll interval that can be user-defined or OS defined. For example, the poll interval can be between 5-30 seconds. In an embodiment, the default poll interval is 30 seconds.</p><p id="p-0063" num="0061">At block <b>508</b>, an intelligent search is performed using the ADI selection tree in <figref idref="DRAWINGS">FIG. <b>4</b></figref> to select the ADI for the device class. The intelligent search is described later in conjunction with <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0064" num="0062">At block <b>510</b>, the ADI selection policy is static. The ADI is selected from the static configuration stored in a VM configuration file.</p><p id="p-0065" num="0063">At block <b>512</b>, the ADI selection policy is dynamic. The first free ADI is selected from the free pool from any device matching the device class.</p><p id="p-0066" num="0064"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowgraph of a method to perform an intelligent selection of an ADI for a device class.</p><p id="p-0067" num="0065">At block <b>600</b>, user priority inputs (high/medium/low) are read from the VM configuration file, the selection policy is intelligent and the NUMA preferred node of the running VM and input device class for which an ADI is to be selected are determined. Processing continues with block <b>602</b>.</p><p id="p-0068" num="0066">At block <b>602</b>, based on the NUMA preferred node and Device Class, the operating system traverses the ADI Selection Tree <b>400</b>. The operating system traverses to the IOMMU child node matching the NUMA preferred node. IOMMU child nodes are sorted in the order of increasing utilization metrics. If multiple IOMMU child nodes are present, the operating system selects the IOMMU child node with the lowest utilization metrics. Processing continues with block <b>604</b>.</p><p id="p-0069" num="0067">At block <b>604</b>, after the IOMMU child node has been selected, the operating system walks to the Device child nodes for the selected IOMMU child node for the requested Device Class. Device child nodes are sorted in the order of increasing utilization metrics. If multiple Device child nodes are present, the operating system selects the device child node with the lowest utilization metrics. Processing continues with block <b>606</b>.</p><p id="p-0070" num="0068">At block <b>606</b>, after the device child node has been selected. The device child node is queried for free ADIs. If there is a free ADI in the free pool of ADIs, processing continues with block <b>608</b>. If not, processing continues with block <b>610</b>.</p><p id="p-0071" num="0069">At block <b>608</b>, there is a free ADI in the free pool of ADIs, the ADI is returned</p><p id="p-0072" num="0070">At block <b>610</b>, an ADI is not available for the device for the IOMMU matching the NUMA preferred node, the next IOMMU (under non-NUMA preferred Node) with lowest utilization metric is selected. Processing continues with block <b>604</b>.</p><p id="p-0073" num="0071"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a sequence flow diagram <b>700</b> to perform an intelligent selection of an ADI for a device class.</p><p id="p-0074" num="0072">During initialization <b>750</b>, the kernel (OS) <b>706</b> reads the ACPI table in system BIOS <b>704</b> and reads DMA Remapping Reporting (DMAR) sub-tables in the IOMMU <b>702</b>. The sub-tables that are read include Intel&#xae; Virtualization Technology for Directed I/O (VT-d) sub-tables (DRHD Structure (DMA Remapping Hardware Unit Definition Structure) and RHSA Structure (Remapping Hardware Static Affinity Structure)) and an ACPI Specification sub-table (SRAT (System Resource Affinity Table)).</p><p id="p-0075" num="0073">During periodic update <b>752</b>, the device driver <b>712</b> sends the device driver's list of ADI resources to the ADI manager <b>708</b> in the operating system. The ADI manager <b>708</b> stores the free list of ADIs. The kernel (OS) <b>706</b> updates the ADI Selection tree <b>400</b>. The kernel (OS) <b>706</b> sends a utilization query to the IOMMU <b>702</b> to obtain the utilization of each IOMMU. The kernel (OS) <b>706</b> sends a query to the device driver <b>712</b> to obtain the utilization of each device. The kernel (OS) <b>706</b> performs an update of the ADI Selection Tree <b>400</b> based on the utilization of each IOMMU and each device.</p><p id="p-0076" num="0074">During normal operation <b>754</b>, in response to a request for an ADI received from the VDCM (OS) <b>710</b>, the kernel (OS) <b>706</b> walks the ADI Selection Tree <b>400</b>, retrieves the ADI and returns the ADI ID number to the VDCM (OS) <b>710</b>.</p><p id="p-0077" num="0075"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an embodiment of a server <b>800</b> in a cloud computing system. Server <b>800</b> includes a system on chip (SOC or SoC) <b>804</b> which combines processor, graphics, memory, and Input/Output (I/O) control logic into one SoC package.</p><p id="p-0078" num="0076">The SoC <b>804</b> includes at least one Central Processing Unit (CPU) module <b>808</b>, a memory controller <b>814</b>, and a Graphics Processor Unit (GPU) module <b>810</b>. In other embodiments, the memory controller <b>814</b> may be external to the SoC <b>804</b> and the GPU module may be external to the SoC <b>804</b>. The CPU module <b>808</b> includes at least one processor core <b>802</b> and a level 2 (L2) cache <b>806</b>.</p><p id="p-0079" num="0077">Although not shown, the processor core <b>802</b> may internally include one or more instruction/data caches (L1 cache), execution units, prefetch buffers, instruction queues, branch address calculation units, instruction decoders, floating point units, retirement units, etc. The CPU module <b>808</b> may correspond to a single core or a multi-core general purpose processor, such as those provided by Intel&#xae; Corporation, according to one embodiment. In an embodiment the SoC <b>804</b> may be an Intel&#xae; Xeon&#xae; Scalable Processor (SP) or an Intel&#xae; Xeon&#xae; data center (D) SoC.</p><p id="p-0080" num="0078">The memory controller <b>814</b> may be coupled to a persistent memory module <b>828</b> and a volatile memory module <b>826</b> via a memory bus <b>830</b>. The persistent memory module <b>828</b> may include one or more persistent memory device(s) <b>834</b>. The persistent memory module <b>828</b> can be a dual-in-line memory module (DIMM) or a small outline dual in-line memory module (SO-DIMM).</p><p id="p-0081" num="0079">The host operating system <b>150</b> including the VDCM <b>102</b>, VM Resource manager <b>116</b> and the host driver <b>112</b> is stored in the volatile memory module <b>826</b>. The host operating system <b>150</b> can be Microsoft&#xae; Windows&#xae; (Network Driver Interface System (NDIS) or NetAdapter drivers), Linux&#xae;, VMware&#xae; ESXi, Microsoft&#xae; Hyper-V, Linux&#xae; Kernel-based Virtual Machine (KVM), or Xen Project&#xae; Hypervisor.</p><p id="p-0082" num="0080">The persistent memory module <b>828</b> includes persistent memory device(s) <b>834</b>. A non-volatile memory (NVM) device is a memory whose state is determinate even if power is interrupted to the device. In one embodiment, the NVM device can comprise a block addressable memory device, such as NAND technologies, or more specifically, multi-threshold level NAND flash memory (for example, Single-Level Cell (&#x201c;SLC&#x201d;), Multi-Level Cell (&#x201c;MLC&#x201d;), Quad-Level Cell (&#x201c;QLC&#x201d;), Tri-Level Cell (&#x201c;TLC&#x201d;), or some other NAND). A NVM device can also include a byte-addressable write-in-place three dimensional crosspoint memory device, or other byte addressable write-in-place NVM devices (also referred to as persistent memory), such as single or multi-level Phase Change Memory (PCM) or phase change memory with a switch (PCMS), NVM devices that use chalcogenide phase change material (for example, chalcogenide glass), resistive memory including metal oxide base, oxygen vacancy base and Conductive Bridge Random Access Memory (CB-RAM), nanowire memory, ferroelectric random access memory (FeRAM, FRAM), magneto resistive random access memory (MRAM) that incorporates memristor technology, spin transfer torque (STT)-MRAM, a spintronic magnetic junction memory based device, a magnetic tunneling junction (MTJ) based device, a DW (Domain Wall) and SOT (Spin Orbit Transfer) based device, a thyristor based memory device, or a combination of any of the above, or other memory.</p><p id="p-0083" num="0081">The Graphics Processor Unit (GPU) module <b>810</b> may include one or more GPU cores and a GPU cache which may store graphics related data for the GPU core. The GPU core may internally include one or more execution units and one or more instruction and data caches. Additionally, the Graphics Processor Unit (GPU) module <b>810</b> may contain other graphics logic units that are not shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, such as one or more vertex processing units, rasterization units, media processing units, and codecs.</p><p id="p-0084" num="0082">Within the I/O subsystem <b>812</b>, one or more I/O adapter(s) <b>816</b> are present to translate a host communication protocol utilized within the processor core(s) <b>802</b> to a protocol compatible with particular I/O devices. Some of the protocols that I/O adapter(s) <b>816</b> may be utilized for translation include Peripheral Component Interconnect (PCI)-Express (PCIe); Universal Serial Bus (USB); Serial Advanced Technology Attachment (SATA) and Institute of Electrical and Electronics Engineers (IEEE) 1594 &#x201c;Firewire&#x201d;.</p><p id="p-0085" num="0083">The I/O adapter(s) <b>816</b> may communicate over bus <b>846</b> with external I/O devices <b>824</b> which may include, for example, user interface device(s) including a display and/or a touch-screen display <b>840</b>, printer, keypad, keyboard, communication logic, wired and/or wireless, storage device(s) including hard disk drives (&#x201c;HDD&#x201d;), solid-state drives (&#x201c;SSD&#x201d;), removable storage media, Digital Video Disk (DVD) drive, Compact Disk (CD) drive, Redundant Array of Independent Disks (RAID), tape drive or other storage device. The storage devices may be communicatively and/or physically coupled together through one or more buses using one or more of a variety of protocols including, but not limited to, SAS (Serial Attached SCSI (Small Computer System Interface)), PCIe (Peripheral Component Interconnect Express), NVMe (NVM Express) over PCIe (Peripheral Component Interconnect Express), and SATA (Serial ATA (Advanced Technology Attachment)). The I/O adapter(s) <b>816</b> may include a Peripheral Component Interconnect Express (PCIe) adapter.</p><p id="p-0086" num="0084">Additionally, there may be one or more wireless protocol I/O adapters. Examples of wireless protocols, among others, are used in personal area networks, such as IEEE 802.15 and Bluetooth, 4.0; wireless local area networks, such as IEEE 802.11-based wireless protocols; and cellular protocols.</p><p id="p-0087" num="0085">Power source <b>842</b> provides power to the components of server <b>800</b>. More specifically, power source <b>842</b> typically interfaces to one or multiple power supplies <b>844</b> in server <b>800</b> to provide power to the components of server <b>800</b>. In one example, power supply <b>844</b> includes an AC to DC (alternating current to direct current) adapter to plug into a wall outlet. Such AC power can be renewable energy (e.g., solar power) power source <b>842</b>. In one example, power source <b>842</b> includes a DC power source, such as an external AC to DC converter. In one example, power source <b>842</b> or power supply <b>844</b> includes wireless charging hardware to charge via proximity to a charging field. In one example, power source <b>842</b> can include an internal battery or fuel cell source.</p><p id="p-0088" num="0086">Flow diagrams as illustrated herein provide examples of sequences of various process actions. The flow diagrams can indicate operations to be executed by a software or firmware routine, as well as physical operations. In one embodiment, a flow diagram can illustrate the state of a finite state machine (FSM), which can be implemented in hardware and/or software. Although shown in a particular sequence or order, unless otherwise specified, the order of the actions can be modified. Thus, the illustrated embodiments should be understood as an example, and the process can be performed in a different order, and some actions can be performed in parallel. Additionally, one or more actions can be omitted in various embodiments; thus, not all actions are required in every embodiment. Other process flows are possible.</p><p id="p-0089" num="0000">To the extent various operations or functions are described herein, they can be described or defined as software code, instructions, configuration, and/or data. The content can be directly executable (&#x201c;object&#x201d; or &#x201c;executable&#x201d; form), source code, or difference code (&#x201c;delta&#x201d; or &#x201c;patch&#x201d; code). The software content of the embodiments described herein can be provided via an article of manufacture with the content stored thereon, or via a method of operating a communication interface to send data via the communication interface. A non-transitory machine-readable storage medium can cause a machine to perform the functions or operations described, and includes any mechanism that stores information in a form accessible by a machine (for example, computing device, electronic system, etc.), such as recordable/non-recordable media (for example, read only memory (ROM), random access memory (RAM), magnetic disk storage media, optical storage media, flash memory devices, etc.). A communication interface includes any mechanism that interfaces to any of a hardwired, wireless, optical, etc., medium to communicate to another device, such as a memory bus interface, a processor bus interface, an Internet connection, a disk controller, etc. The communication interface can be configured by providing configuration parameters and/or sending signals to prepare the communication interface to provide a data signal describing the software content. The communication interface can be accessed via one or more commands or signals sent to the communication interface.</p><p id="p-0090" num="0087">Various components described herein can be a means for performing the operations or functions described. Each component described herein includes software, hardware, or a combination of these. The components can be implemented as software modules, hardware modules, special-purpose hardware (e.g., application specific hardware, application specific integrated circuits (ASICs), digital signal processors (DSPs), etc.), embedded controllers, hardwired circuitry, etc.</p><p id="p-0091" num="0088">Besides what is described herein, various modifications can be made to the disclosed embodiments and implementations of the invention without departing from their scope.</p><p id="p-0092" num="0089">Therefore, the illustrations and examples herein should be construed in an illustrative, and not a restrictive sense. The scope of the invention should be measured solely by reference to the claims that follow.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. One or more non-transitory machine-readable storage medium comprising a plurality of instructions stored thereon that, in response to being executed, cause a system to:<claim-text>store, a selection tree, the selection tree including a plurality of Input/Output Memory Management Units (IOMMU) for a preferred node and a device for each IOMMU; and</claim-text><claim-text>traverse the selection tree to select an Assignable Device Interface (ADI) for a virtual device (VDEV) based on affinity to a same node as a running Virtual Machine (VM), first utilization metrics for the IOMMUs and second utilization metrics of a device of a same device class.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The one or more non-transitory machine-readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the traverse of the selection tree is performed in response to a request from an application through an application programming interface (API) call.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The one or more non-transitory machine-readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of instructions, when executed, further cause the system to periodically update the first utilization metrics and the second utilization metrics in the selection tree.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The one or more non-transitory machine-readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of instructions, when executed, further cause the system to select an IOMMU with a lowest first utilization metrics.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The one or more non-transitory machine-readable storage medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the plurality of instructions, when executed, further cause the system to select the device with a lowest second utilization metrics.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The one or more non-transitory machine-readable storage medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the device is Scalable I/O virtualization.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The one or more non-transitory machine-readable storage medium of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further cause the system to select a first free ADI.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The one or more non-transitory machine-readable storage medium of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the preferred node is a NUMA preferred node and the same node is a NUMA same node.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A method comprising:<claim-text>storing a selection tree including a plurality of Input/Output Memory Management Units (IOMMU) for a preferred node and a device for each IOMMU; and</claim-text><claim-text>traversing the selection tree to select an Assignable Device Interface (ADI) for a virtual device (VDEV) based on affinity to a same node as a running Virtual Machine (VM), first utilization metrics for the IOMMUs and second utilization metrics of a device of a same device class.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the traversing of the selection tree is performed in response to a request from an application through an application programming interface (API) call.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>periodically updating the first utilization metrics and the second utilization metrics in the selection tree.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>selecting an IOMMU with a lowest first utilization metrics.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:<claim-text>selecting the device with a lowest second utilization metrics.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the device is Scalable I/O virtualization.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:<claim-text>selecting a first free ADI.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the preferred node is a NUMA preferred node and the same node is a NUMA same node.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A system comprising:<claim-text>a central processing unit having a plurality of cores and a memory controller; and</claim-text><claim-text>a memory coupled to the memory controller;</claim-text><claim-text>wherein the system is configured to:<claim-text>store, in the memory, a selection tree, the selection tree including a plurality of Input/Output Memory Management Units (IOMMU) for a preferred node and a device for each IOMMU; and</claim-text><claim-text>traverse the selection tree to select an Assignable Device Interface (ADI) for a virtual device (VDEV) based on affinity to a same node as a running Virtual Machine (VM), first utilization metrics for the IOMMUs and second utilization metrics of a device of a same device class.</claim-text></claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the traverse of the selection tree is performed in response to a request from an application through an application programming interface (API) call.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the system to periodically update the first utilization metrics and the second utilization metrics in the selection tree.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the system to select an IOMMU with a lowest first utilization metrics.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the system to select the device with a lowest second utilization metrics.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the device is Scalable I/O virtualization.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The system of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the preferred node is a NUMA preferred node and the same node is a NUMA same node.</claim-text></claim></claims></us-patent-application>