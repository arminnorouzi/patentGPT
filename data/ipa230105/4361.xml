<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004362A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004362</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17931422</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0482</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>04847</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>445</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>33</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0482</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>04847</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>445</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>33</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0685</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">CODE EXECUTION AND DATA PROCESSING PIPELINE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17204440</doc-number><date>20210317</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11442705</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17931422</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16262150</doc-number><date>20190130</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10970049</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17204440</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62624492</doc-number><date>20180131</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Palantir Technologies Inc.</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Ball</last-name><first-name>Eliot</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Jenny</last-name><first-name>Matthew</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Gates</last-name><first-name>Nicholas</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Price-Wright</last-name><first-name>Erin</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Khan</last-name><first-name>Kamran</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Manis</last-name><first-name>Gregory</first-name><address><city>Brooklyn</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>Wu</last-name><first-name>Emeline</first-name><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method performed by one or more processors comprises displaying code, receiving user selection of a portion of code, determining one or more settable data items, generating a template, displaying the template, receiving a user input value for the settable data items by the template, and executing the code with each of the settable data items set to the received user input value. A data processing pipeline is configured to pass a data item to a first transformer to provide first transformed data, store the first transformed data in a temporary memory, write the first transformed data to the data storage system, and pass the transformed data from the temporary memory to a second transformer.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="119.38mm" wi="158.75mm" file="US20230004362A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="234.10mm" wi="180.76mm" orientation="landscape" file="US20230004362A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="230.89mm" wi="100.75mm" file="US20230004362A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="175.85mm" wi="161.46mm" orientation="landscape" file="US20230004362A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="118.19mm" wi="130.30mm" orientation="landscape" file="US20230004362A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="212.01mm" wi="146.98mm" orientation="landscape" file="US20230004362A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="197.19mm" wi="157.23mm" orientation="landscape" file="US20230004362A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="194.56mm" wi="131.83mm" orientation="landscape" file="US20230004362A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">INCORPORATION BY REFERENCE TO ANY PRIORITY APPLICATIONS</heading><p id="p-0002" num="0001">The present application is a continuation of U.S. patent application Ser. No. 17/204,440, filed on Mar. 17, 2021, which is a continuation of U.S. Pat. No. 10,970,049, issued on Apr. 6, 2021, which claims priority benefit of U.S. Provisional Patent Application No. 62/624,492, filed Jan. 31, 2018. The entire disclosure of each of the above items is hereby made part of this specification as if set forth fully herein and incorporated by reference for all purposes, for all that it contains.</p><p id="p-0003" num="0002">Any and all applications for which a foreign or domestic priority claim is identified in the Application Data Sheet as filed with the present application are hereby incorporated by reference under 37 CFR 1.57.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0004" num="0003">The subject innovations relate to executing code and to a data processing pipeline.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0005" num="0004">Computers are very powerful tools for processing data. A computerized data pipeline is a useful mechanism for processing large amounts of data. A typical data pipeline is an ad-hoc collection of computer software scripts and programs for processing data extracted from &#x201c;data sources&#x201d; and for providing the processed data to &#x201c;data sinks&#x201d;.</p><p id="p-0006" num="0005">Between the data sources and the data sinks, a data pipeline system is typically provided as a software platform to automate the movement and transformation of data from data sources to data sinks. In essence, the data pipeline system shields the data sinks from having to interface with the data sources or even being configured to process data in the particular formats provided by the data sources. Typically, data from the data sources received by the data sinks is processed by the data pipeline system in some way. For example, a data sink may receive data from the data pipeline system that is a combination (e.g., a join) of data of from multiple data sources, all without the data sink being configured to process the individual constituent data formats.</p><p id="p-0007" num="0006">One purpose of a data pipeline system is to execute data transformation steps on data obtained from data sources to provide the data in formats expected by the data sinks. A data transformation step may be defined as a set of computer commands or instructions (e.g., a database query) which, when executed by the data pipeline system, transforms one or more input datasets to produce one or more output or &#x201c;target&#x201d; datasets. Data that passes through the data pipeline system may undergo multiple data transformation steps. Such a step can have dependencies on the step or steps that precede it.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007">The features of the subject innovations are set forth in the appended claims. However, for purpose of explanation, several aspects of the disclosed subject matter are set forth in the following figures.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example of a computer system configured to develop and run a data processing pipeline, in accordance with example embodiments;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating an example method by which templates are generated and the associated code executed using the template, in accordance with example embodiments;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a representative drawing, illustrating an example graphical user interface configured to generate templates, in accordance with example embodiments;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a representative drawing, illustrating an example graphical user interface of a generated template configured to receive values for the display settable data items, in accordance with example embodiments;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a representative drawing, illustrating an example graphical user interface of a data pipeline development environment, in accordance with example embodiments;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram, illustrating the interactions between a data processing pipeline and the storage devices of an example computer system, in accordance with example embodiments; and</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram of a computing device in which software-implemented processes of the subject innovations may be embodied.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">The detailed description set forth below is intended as a description of various configurations of the subject innovations and is not intended to represent the only configurations in which the subject innovations may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject innovations. However, the subject innovations are not limited to the specific details set forth herein and may be practiced without these specific details. In some instances, some structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject innovations.</p><heading id="h-0006" level="1">General Overview</heading><p id="p-0017" num="0016">For ease of explanation, the subject innovations are largely described in the context of a data pipeline system. It should, however, be recognized that some aspects of these innovations are applicable in other contexts. Examples of such contexts include, but are not limited to, software development environments.</p><p id="p-0018" num="0017">As noted above, a typical data pipeline system is an ad-hoc collection of computer software scripts and programs for processing data extracted from &#x201c;data sources&#x201d; and for providing the processed data to &#x201c;data sinks&#x201d;. Managing and developing such an ad-hoc collection may, however, be technically difficult, particularly when there are multiple transformation steps with later steps having dependencies on preceding steps. It should be further noted that these difficulties in management and development are likely to lead to unstable systems that do not fulfil their desired purpose. Similarly, they make it very difficult, if not impossible, for users without specialist expertise to develop and manage these systems.</p><p id="p-0019" num="0018">Furthermore, an ad-hoc collection of software scripts and programs is not well suited to displaying pipeline results. Not only does this prevent such users from fully benefiting from a pipeline system, it is a significant hindrance to pipeline developers who rely on such results, particularly of intermediary steps, to debug and enhance the pipeline system.</p><p id="p-0020" num="0019">Additionally, pipeline system implementations that prioritize data integrity and robustness over performance make it difficult for results to be displayed quickly.</p><p id="p-0021" num="0020">The subject innovations relate to systems and methods for developing and executing a data processing pipeline. The aspects of these innovations relating to developing such a data processing pipeline will be addressed first with those relating to executing the pipeline being addressed second.</p><p id="p-0022" num="0021">These first aspects relate to providing a pipeline development system that enables users without specialist expertise to develop a data processing pipeline. The system presents an interface to allow users to specify the data used and transforms performed by each step of the pipeline. Each step uses data items from an underlying data storage system, e.g. a database, and/or data items produced by preceding steps in the data processing pipeline. A wide range of transforms are also possible. Examples of such transforms are database joins, complex numerical operations, data format conversion, or any combination thereof. The development environment may also allow users to run the developed data processing pipeline and display the results produced by each of the intermediary steps to users in a consistent manner.</p><p id="p-0023" num="0022">Various methods are made available to users for specifying transforms in the pipeline development system. One method is by providing code for performing a transform. It should be noted that providing transform code does not require users to have specialist expertise in data pipeline systems. Specialized APIs are provided so that users can easily access the data items on which the transform depends. Therefore, users are able to provide code for performing the transform without needing knowledge of the mechanisms by which the data items are provided. Alternatively or in addition, the provided code may consist only of mathematical operations that are able to be applied to each of the data items.</p><p id="p-0024" num="0023">Another method for users to specify a transform to use is by selecting one or more transforms from a list of provided transforms. This list of transforms contains transforms previously provided to the system as code, pre-configured transforms that are included in the development system, or both. This allows users who cannot program to specify the transforms to be performed, although it only allows them to select from a list of predefined transforms.</p><p id="p-0025" num="0024">Transform templates allow users who cannot program to specify transforms and configure them. In this scenario, the user first selects a transform template. The transform template relates to some section of predefined code. The template allows a given user to set one or more settable data items, e.g. parameters and/or variables, of the code. In essence, this enables non-programming users to configure the transform. Examples of the types of settable data items include formula parameters, column names and units of measure. A given user may set the data by entering text or numbers in to a form field on the template and/or selection from a list of options e.g. in a drop down list.</p><p id="p-0026" num="0025">A transform template generator is provided. This is configured to generate a transform template from a provided code transform. The transform template generator presents an interface relating to the provided code transform to a given user. At least some of the provided code of the transform is displayed in this interface. The user then selects a portion of the displayed code. From the selected portion of the displayed code, one or more settable data items, such as parameters and/or variables, are determined by the template generator. Internally, the template generator maintains a store of settable data items to be included in the template being generated. The determined settable data items are added to this store. The user may need to give some input, e.g. click on a button or press a keyboard key, to add the determined settable items to the list or they may be automatically added when the code portion is selected by the user. Items may be added, using the above steps, until all of the items that the user wants to be included in the template are in the list. The template is then generated. Typically, generation occurs subsequent to the template generator receiving some input, e.g. a mouse click on a generate button, from the user. The generated template is then stored by the pipeline development system so that it can be accessed by the system's users.</p><p id="p-0027" num="0026">The second aspects relate to providing an enhanced data pipeline implementation that performs its steps more quickly and with reduced system resource usage.</p><p id="p-0028" num="0027">The enhanced data pipeline implementation of the second aspects persistently store the results of intermediary steps while also avoiding a fraction of the persistent storage accesses. In this implementation, a step in the pipeline receives one or more data items from a data storage system or from preceding steps in the pipeline. A transform is then performed on these data items. The transformed data items are stored in a temporary memory, typically main memory, and an operation to persistently store them is started. If the next step of the pipeline depends on the transformed data items, the associated transform reads the transformed data items from the temporary memory and continues with its own transform. This step of the pipeline, therefore, avoids performing a slow persistent storage read and instead only has to perform a faster temporary memory read. This enhanced implementation also allows transform operations to be performed simultaneously with the persistent storage of the results of preceding transforms.</p><p id="p-0029" num="0028">Accessing the persistent storage media typically takes significantly longer than performing transforms. This is primarily because persistent storage media accesses are much slower than CPU and main memory accesses. By avoiding accesses to persistent storage media, where possible, system resource usage is reduced and pipeline execution is sped up.</p><p id="p-0030" num="0029">Instead of only storing the results of intermediary steps to and retrieving them from a temporary memory, in which case the results of the intermediary steps would not be persistently stored, according to the second aspects the results of intermediary steps are also stored in persistent storage media. This allows faults in the pipeline system to be understood and fixed, particularly as regards determining the point at which the pipeline malfunctioned. Finally, these results may have utility in related pipelines. Persistently storing these results ensures that they are accessible for use in these related pipelines.</p><p id="p-0031" num="0030">Further benefits of this enhanced implementation relate to displaying the results of the pipeline steps. The results of each pipeline step do not have to be written to the persistent storage media to be displayed. Instead, they are contained in temporary memory. It is, therefore, possible to display all of the results of the pipeline steps to the user before these write operations have been completed. This enables these results to be displayed to users much more quickly. Users, therefore, experience rapid result display and the benefits of storing the results to a persistent storage medium.</p><heading id="h-0007" level="1">Example Computer System</heading><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a computer system <b>100</b> configured to perform extraction. As shown, the computer system <b>100</b> includes a client computing device <b>112</b> used by a human user <b>110</b>, a server <b>130</b>, a database <b>140</b>, a data pipeline system <b>150</b> and a temporary memory <b>160</b>. The client computing device <b>112</b> and the server <b>130</b> may be configured to communicate with one another via a network <b>120</b>. The network <b>120</b> may include the Internet, an intranet, a local area network, a wide area network, a wired network, a wireless network, a virtual private network (VPN), and/or any combination of networks. For ease of understanding, various components of the system have each been described with reference to one or more computing devices. It should be noted that, in some embodiments, any number of these components may be collocated on the same computing device.</p><p id="p-0033" num="0032">The client computing device <b>112</b> may for instance be a laptop computer, a desktop computer, a mobile phone, a personal digital assistant (PDA), a tablet computer, a netbook, a television with one or more processors, embedded therein or coupled thereto, a physical machine or a virtual machine. The client computing device <b>112</b> may include one or more of a keyboard, a mouse, a display <b>114</b>, or a touch screen (of which display <b>114</b> may be a part of). For example, the client computing device <b>112</b> may be composed of hardware components like those of computing device <b>500</b> described below with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>. The client computing device <b>112</b> may also include a web browser or a client application configured to display, in a graphical user interface <b>116</b> of the client computing device <b>112</b> display <b>114</b>, a computer program for developing and executing data processing pipelines.</p><p id="p-0034" num="0033">The graphical user interface <b>116</b> may be presented in a web browser window, a client application window, an operating system window, an integrated development environment window, a virtual terminal window or other computer graphical user interface window. While only one user <b>110</b> and one client computing device <b>112</b> are illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the subject innovations may be implemented in conjunction with one or more users <b>110</b> and one or more client computing devices <b>112</b>.</p><p id="p-0035" num="0034">The server <b>130</b> may be implemented as a single server computing device or as multiple server computing devices arranged in a distributed or clustered computing arrangement. Each such server computing device may be composed of hardware components like those of computing device <b>500</b> described below with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0036" num="0035">The server <b>130</b> may include one or more processors (e.g., CPUs), a network interface, and memory. The processor(s) may be configured to execute computer instructions that are stored in one or more computer-readable media, for example, the memory of the server <b>130</b>. The server <b>130</b> may include a network interface that is configured to allow the server <b>130</b> to transmit and receive data in a network, e.g., network <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The network interface may include one or more network interface cards (NICs). The memory of the server <b>130</b> may store data or instructions. The instructions stored in the memory may include the data pipeline system control module.</p><p id="p-0037" num="0036">The server <b>130</b> includes a data pipeline development environment <b>132</b> configured to develop a data pipeline to be executed on a data pipeline system <b>150</b>. The data pipeline development environment enables a user to specify data items <b>144</b> used by the pipeline, created data objects <b>146</b> created by the pipeline, and transforms and dependencies between them. This specification may be stored as data pipeline configuration data <b>142</b>. The data pipeline development environment may also run the data pipeline using the data pipeline system <b>150</b> and display the results of the steps of the data pipeline to the user <b>110</b> via the client <b>112</b> and GUI (graphical user interface) <b>116</b>. While the data pipeline development environment <b>132</b> is shown as being located on the server <b>130</b>, it should be noted that in many embodiments at least some of the specified functionality is stored in and/or executed on the client <b>112</b>. Examples of these embodiments include client-server applications where a GUI <b>116</b>, e.g. via a web browser or desktop application, interacts with a server <b>130</b> via a network <b>120</b>, which provides a portion of the foregoing functionality.</p><p id="p-0038" num="0037">In many embodiments, the data pipeline development environment <b>132</b> is an integrated development environment (IDE), a software environment providing many facilities for software development, such as source code editing and code execution, within an integrated system.</p><p id="p-0039" num="0038">The data pipeline development environment <b>132</b> includes a template generator <b>134</b>. The template generator <b>134</b> provides functionality enabling a user <b>110</b> to generate a transform template. The transform template may be stored on the database <b>140</b> as pipeline configuration data <b>142</b>. This enables the user <b>110</b> to reuse the template and allows other users to use it.</p><p id="p-0040" num="0039">The database <b>140</b> is used to retrieve and store data items such as data items <b>144</b> and created data objects <b>146</b>. The database <b>140</b> may also store pipeline configuration data <b>142</b>. The database <b>140</b> may be implemented as a single server computing device or as multiple server computing devices arranged in a distributed or clustered computing arrangement. Each such server computing device may be composed of hardware components like those of computing device <b>500</b> described below with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0041" num="0040">The database <b>140</b> may include one or more processors (e.g., CPUs), a network interface, and memory. The processor(s) may be configured to execute computer instructions that are stored in one or more computer-readable media, for example, the memory of the database <b>140</b>. The database <b>140</b> may include a network interface that is configured to allow the database <b>140</b> to transmit and receive data in one or more networks, e.g., a network connecting the server <b>130</b> and the database <b>140</b> and a network connecting the data pipeline system <b>140</b> to the database <b>140</b>, which may be the same or different network as the network that connects the server <b>130</b> and the database <b>140</b>. The network interface may include one or more network interface cards (NICs). The memory of the database <b>140</b> may store data or instructions. The instructions stored in the memory may include the database server module <b>142</b>. While reference has been made to a database, it should be noted that alternatively or in addition any other data storage mechanism may be used, e.g. a file storage system, a distributed file system, and/or in-memory objects.</p><p id="p-0042" num="0041">The pipeline configuration data <b>142</b> may be stored in markup language format, e.g. XML or YAML, and/or a series of database rows. In addition or alternatively, the pipeline configuration data may be stored as interpretable and/or executable code. There are a variety of other formats that could be used to store this data such as proprietary binary formats, text data and/or command line parameters. The pipeline configuration data <b>142</b> includes indications of transforms, the data items <b>144</b> to be used, the data objects <b>146</b> to be created and dependencies between them.</p><p id="p-0043" num="0042">The data items <b>144</b> may be rows of a database table, or entries contained in a document-oriented or objected-oriented database. The data items <b>144</b> may also be in-memory objects. Alternatively, the data items <b>144</b> may be files, markup-language data, code portions, spreadsheets and/or images. It should be recognized that the types of data items <b>144</b> are not limited to only one of the preceding categories and could be any number or combination of these categories. For example, some portion of the data items <b>144</b> could be files and some other portion could be database rows. The types of the created data objects <b>146</b> could be any number of the types specified above. The created data objects may also be graphs configured to be displayed in the data pipeline development environment <b>132</b>.</p><p id="p-0044" num="0043">The data pipeline system <b>150</b> includes functionality for running a data pipeline. The data pipeline system <b>150</b> may use the data pipeline configuration data <b>142</b> stored on database <b>140</b> to determine the steps of the data pipeline. The data pipeline system <b>150</b> may use data items <b>144</b>. The data pipeline system <b>150</b> may also use and/or store created data objects <b>146</b>.</p><p id="p-0045" num="0044">The data pipeline system <b>150</b> may be implemented as a single server computing device or as multiple server computing devices arranged in a distributed or clustered computing arrangement. Each such server computing device may be composed of hardware components like those of computing device <b>500</b> described below with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0046" num="0045">The data pipeline system <b>150</b> may include one or more processors (e.g., CPUs), a network interface, and memory. The processor(s) may be configured to execute computer instructions that are stored in one or more computer-readable media, for example, the memory of the data pipeline system <b>150</b>. The data pipeline system <b>150</b> may include a network interface that is configured to allow the data pipeline system <b>150</b> to transmit and receive data in a network, e.g., a network connecting the data pipeline system <b>150</b> and the database <b>140</b> which may be the same or different network as the network that connects the data pipeline system <b>150</b> and the server <b>130</b>. The network interface may include one or more network interface cards (NICs).</p><p id="p-0047" num="0046">A temporary memory <b>160</b>, such as a random access memory (RAM), is accessible by the data pipeline system <b>150</b>. Typically, the temporary memory <b>160</b> is a component of at least one of the server computing devices of data pipeline system <b>150</b>. Alternatively, the temporary memory may be located on another machine and/or a RAM blade and transferred across a high bandwidth, low latency network from these systems.</p><p id="p-0048" num="0047">It should be noted that temporary memory refers to its usage as a temporary store and does not necessitate that said memory is volatile, e.g. RAM. In some embodiments, the temporary memory <b>160</b> is a type of non-volatile memory, such as a solid state drive (SSD) and/or any other non-volatile solid state memory. An SSD is faster but is both more expensive and has a more limited capacity than a hard disk drive (HDD). It may be advantageous to use an SSD as a temporary memory. This would be particularly beneficial when the database <b>140</b> uses a HDD for storage. Alternatively, the temporary memory <b>160</b> may comprise both RAM and one or more non-volatile solid state memories, such as SSDs. The RAM provides a faster, smaller store that may be used first with the non-volatile solid state memory providing fallback capacity.</p><p id="p-0049" num="0048">The data pipeline system <b>150</b> may store data items <b>144</b> and created data objects <b>146</b> in the temporary memory <b>160</b> in addition to or instead of in the database <b>140</b>. This may allow the data pipeline to perform transforms and output results more quickly as the temporary memory is likely to be significantly faster than the database <b>140</b>.</p><heading id="h-0008" level="1">Transform Template Generation and Execution</heading><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating an example method <b>200</b> by which transform templates are displayed and executed. The method <b>200</b> is performed by software when executed by one or more computing devices (e.g., the computing device <b>500</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>). In some embodiments, the one or more computing systems are part of the client <b>112</b>, the server <b>130</b>, and/or the data pipeline system <b>150</b>.</p><p id="p-0051" num="0050">The method <b>200</b> begins at step <b>210</b>, where the transform template generator <b>134</b> displays some code of a code transform that is available to the data pipeline development environment <b>132</b>, henceforth referred to as the IDE without limitation, to a user <b>110</b>. The code is in a programming language supported by the IDE <b>132</b> and/or the data pipeline system <b>134</b>. Examples include, but are not limited to, Python, Java, Scala and C#. Alternatively or in addition, the code is in some supported markup language format, such XML, HTML or YAML. In some embodiments, the code includes sections which are in different programming languages and/or markup languages. For example, the displayed code may include sections of both Python and YAML, or sections of both C# and XML.</p><p id="p-0052" num="0051">In step <b>220</b>, a user selection of some portion of the code is received by the template generator <b>134</b>. The user may select the portion of code by tapping and dragging over the code using a mouse or touch screen interface. Alternatively or in addition, the user may use a keyboard shortcut to select the code. If the code is displayed on the computing device on which the template generator <b>134</b> is located, the selection may be received by the template generator <b>134</b> via an API and/or application variable. In other embodiments, the user selection is received by the template generator <b>134</b> via a network <b>120</b>. The user selection may be received using a variety of appropriate protocols, e.g. REST, SOAP or RabbitMQ.</p><p id="p-0053" num="0052">In step <b>230</b>, the settable data items, e.g. variables, parameters and column names, are determined from the selected portion of code. The template generator <b>134</b> may then store this name and/or a reference to the settable data item for use in the template. The settable data items may be determined when a user input is made (e.g. a button is pressed) and/or automatically when an appropriate selection is made.</p><p id="p-0054" num="0053">In some instances, the selected portion of code contains just the name of a settable data item. This name may simply be stored. However, to avoid errors, the template generator <b>134</b> may need to recognize that the selected portion of code is, in fact, a settable data item name. The template generator <b>134</b> may do this by analyzing the context within which the selected portion of code is contained, e.g. using a regular expression. Alternatively or in addition, it may use a metaprogramming library to analyze the received code. There may be other instances of this settable data item within the code that can be recognized using the same techniques.</p><p id="p-0055" num="0054">In other circumstances, the selected portion of code contains extraneous text in addition to the settable data item name. In these instances, similar techniques to those specified for recognizing the settable data item name may be used to extract the settable data item name from the selected portion of code. There may be multiple instances of the settable data item name within the code and/or multiple settable data item names may be contained within the selected portion. Similar techniques, such as regular expressions, may be used to recognize these. All or some references to or names of these settable data items may then be stored.</p><p id="p-0056" num="0055">In some scenarios, a portion of code may be selected that does not reference a settable data item name, e.g. a string or a floating point number. The template generator <b>134</b> may recognize that this value is still settable, e.g. the value can be replaced by any other string or number. In these circumstances, the template generator <b>134</b> may store the location of this value within the code instead of a name. If there are other instances of this value, the template generator <b>134</b> may also store these locations. Alternatively, using similar techniques to those previously described, the template generator may be able to determine the corresponding settable data item name.</p><p id="p-0057" num="0056">It should be noted that the template generator may support any number of the foregoing techniques for determining the settable data item. The steps above may be repeated several times until all of the settable data items that the user desires in the template have been stored by the template generator <b>134</b>. In this way, multiple user selections are received and used to determine the settable data items.</p><p id="p-0058" num="0057">In step <b>240</b>, a template is generated using the stored settable data items names and/or references. This template also contains a reference to the stored code. The generated template may be stored in a variety of formats including both markup language and executable code. Examples of markup languages include HTML, XML and YAML. Alternatively, the template may be stored as a database record or in a custom proprietary format. The stored template is typically a specification used to display an interface in the subsequent step. Typical formats for such a specification are any of the foregoing markup languages or data contained in one or more database tables. Alternatively, the stored template may be executable code which when run causes the template to be displayed.</p><p id="p-0059" num="0058">The template generator <b>134</b> may first convert the stored details in to a common internal representation. A template may then be created from these along with any other needed configuration. The template is stored using appropriate APIs to store and write in any of the formats specified above. This configuration may be stored globally, e.g. as part of the pipeline configuration data <b>142</b>.</p><p id="p-0060" num="0059">In step <b>250</b>, the template is displayed. The template may be displayed immediately on generation and/or may be displayed later, e.g. when selected by a user. The displayed template presents an interface to the user indicating the settable data items and presenting an interface whereby they are able to set them. If the stored template is executable code, the template is executed and subsequently displayed. While they may be desirable, no further steps are strictly necessary. If the stored template is a specification, the template is processed to receive the details necessary to display the template interface. A template interface is then dynamically displayed using the stored generated template.</p><p id="p-0061" num="0060">The template is typically displayed by the IDE <b>132</b>, which uses a suitable mechanism to generate the interface. Suitable mechanisms include web frameworks, e.g. AngularJS, Apache TomCat or Django, or desktop application frameworks, e.g. Qt, GTK, WPF or Swing.</p><p id="p-0062" num="0061">In step <b>260</b>, values are received for the settable data items. These are received from a user <b>110</b> via the displayed template using any suitable input mechanism. Examples of such mechanisms include touch screen input, keyboard entry and selecting from a drop down list using a mouse. The values may be received immediately upon their entry and/or may be received on some further input, e.g. a screen tap or button press.</p><p id="p-0063" num="0062">In some embodiments, the values are received by the IDE <b>132</b>. The IDE <b>132</b> uses them, in combination with the related code, to create a transform that may be added to a data pipeline. The details of this transform, including the received values, may be stored as part of the pipeline configuration data <b>142</b> and displayed as a transform in the IDE <b>132</b>. In this case, the method proceeds to step <b>270</b> when the data pipeline is run. For example, the data pipeline may be run when a run command is received from the user <b>110</b> via the IDE. Alternatively, a command to run the data pipeline may be received from another user and/or an administrator.</p><p id="p-0064" num="0063">In other embodiments, the values are received directly by the data pipeline system <b>150</b>. In this case, the method proceeds to step <b>270</b> immediately.</p><p id="p-0065" num="0064">In step <b>270</b>, the code is executed on the data pipeline system <b>150</b> with the settable data items set to the received values. These settable data items may be set using any or any combination of a variety of mechanisms, e.g. replacing or otherwise changing the text characters of the code, metaprogramming and API calls. As previously specified, this may happen subsequent to receiving values or after a command to run the relevant pipeline.</p><heading id="h-0009" level="1">Example Template Generator User Interface</heading><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example graphical user interface <b>300</b> (e.g., a web browser window) configured to enable a user <b>110</b> to generate a transform template according to the method described in steps <b>210</b>-<b>240</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The interface <b>300</b> may be displayed via the display <b>114</b> of the client computing device <b>112</b>.</p><p id="p-0067" num="0066">The interface <b>300</b> includes a textbox <b>310</b> containing code. Alternatively, non-editable text on the interface <b>300</b> may display the code. The code is typically the code of a transform that has been specified by the user <b>110</b> or some other user. In this instance, the code returns the sum of two settable data items x and y. The box <b>310</b> may be scrollable, e.g. using a scrollbar and/or a touchscreen gesture, to allow more code to be displayed than can fit within the box. In this example, a portion of code <b>312</b> that references a settable data item, y, has been selected.</p><p id="p-0068" num="0067">The list <b>320</b> shows the settable data items whose references and/or names have already been stored by the template generator <b>134</b>. In this example, a reference to the function parameter x has already been stored.</p><p id="p-0069" num="0068">The button <b>330</b> allows the user <b>110</b> to store a reference to the settable data item corresponding to the selected portion of the code <b>312</b>. In the instance shown, the user causes storage of the name of and/or a reference to variable y by providing an input, such as pressing button <b>330</b>. A representation of the template variable y is then caused to be displayed in the list <b>320</b>.</p><p id="p-0070" num="0069">The button <b>340</b> allows the user <b>110</b> to generate a template based on the code and the stored names of and/or references to settable data items. When this button is selected by the user, the template is generated and may be stored and/or displayed.</p><heading id="h-0010" level="1">Example Template User Interface</heading><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example graphical user interface <b>400</b> (e.g., a web browser window) of a transform template. The transform template may have been generated according to steps <b>210</b>-<b>240</b> of the foregoing method. It may be used to perform step <b>260</b> of this method. The interface <b>400</b> may be displayed via the display <b>114</b> of the client computing device <b>112</b>.</p><p id="p-0072" num="0071">The interface <b>400</b> contains a title <b>410</b>. The title <b>410</b> specifies the name of the template. This may be the name of the function from which the template was generated or may be a user specified name.</p><p id="p-0073" num="0072">The first input box <b>420</b> and the second input box <b>430</b> allow the interface <b>400</b> to receive values for settable data items x and y, respectively, from a user <b>110</b>. The input boxes <b>420</b>, <b>430</b> are provided with labels that indicate the settable data item to which they relate.</p><p id="p-0074" num="0073">When the OK button <b>440</b> receives a user input, e.g. a mouse click, the data items are received by the IDE <b>132</b>. A transform is then created based on the code associated with the template and the received data items. This transform is displayed in the IDE <b>132</b> for use in the current pipeline. It may also store the transform details, including the received values, in the pipeline configuration data <b>142</b>. The values are then used when the data pipeline is run. Alternatively, the values may be received by the data pipeline system <b>150</b>, and the code associated with the template executed with settable data items set to the received values.</p><heading id="h-0011" level="1">Example Data Pipeline Development Environment User Interface</heading><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example graphical user interface <b>600</b> (e.g., a web browser window) of a data pipeline development environment (e.g., data pipeline IDE <b>132</b>). The interface <b>600</b> provides a representation of the data pipeline currently under development and enables the user to configure the data pipeline. This configuration of the data pipeline may involve adding data elements, adding transforms, editing either of the foregoing, specifying dependencies between pipeline elements and/or specifying the properties of data pipeline elements. The data pipeline displayed may have been created using the interface <b>600</b> and/or may have been inferred from an existing data pipeline. The interface <b>600</b> may also provide functionality to run the pipeline and to display the results. The interface <b>600</b> may be displayed via the display <b>114</b> of the client computing device <b>112</b>.</p><p id="p-0076" num="0075">The interface <b>600</b> may contain a key <b>610</b> indicating how the different elements of the interface are represented. The key may be used, e.g. by the user <b>110</b>, to quickly determine the type of each element in the user interface without needing to access external help documentation. For example, the key shows that arrows represent dependencies between the elements of the data pipeline. Input on one of the elements contained in the key <b>610</b> may also be received by the interface <b>600</b>. In response to this input being received, the respective element is added to the data processing pipeline under development. This input may be a mouse click on these elements, a keyboard shortcut, or a drag and drop action.</p><p id="p-0077" num="0076">The interface <b>600</b> displays symbols <b>620</b>, <b>622</b>, <b>624</b> indicating the data items (e.g., data items <b>144</b>) used by the data processing pipeline. Data items may be added to the pipeline using the key <b>610</b> as previously specified. Alternatively or in addition, data items may be added using some other input mechanism, e.g. a keyboard shortcut. New corresponding symbols are then displayed in the interface <b>600</b>. Further details of the data item may be displayed by the interface <b>600</b> in response to it receiving some input corresponding to the symbol, e.g. a user hovering over (mousing over) the symbol, tapping the symbol or double clicking on the symbol. Receiving input corresponding to these symbols <b>620</b>, <b>622</b>, <b>624</b> may also cause the interface <b>600</b> to display a sub interface and/or another window whereby the user <b>110</b> can configure the properties of the data item and/or how it is used. Properties may include the database to be used, the table name to be used and its user friendly name to display in the pipeline development environment <b>132</b>. Indications of how the data item is to be used may include how it should be cached, and the number of elements of the underlying data item to be loaded. Alternatively or in addition, these details may be specified when the transform is added to the pipeline.</p><p id="p-0078" num="0077">The interface <b>600</b> displays symbols <b>630</b>, <b>632</b> representing transforms used by the pipeline development environment. The data items/objects upon which the transform depends are represented as arrows in the interface <b>600</b>. These transforms may take any of the forms previously specified, e.g. code transforms, selected transforms and/or transforms created from a template. A transform may be added to the pipeline using the key <b>610</b> as previously specified. Alternatively or in addition, data items may be added using some other input mechanism, e.g. a keyboard shortcut. New corresponding symbols are then displayed in the interface <b>600</b>. A sub interface and/or window adapted for configuring the transform (e.g. interface <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) may be displayed by the interface <b>600</b> in response to it receiving some input corresponding to the symbol, e.g. a user hovering over (mousing over) the symbol, tapping the symbol or double clicking on the symbol. The sub interface and/or window for configuring the transform may have been previously generated using a template generator graphical user interface (e.g. interface <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>). Similarly, a sub interface and/or window adapted for specifying the transform may be displayed when such input is received. The transform may be specified by entering code in to an entry form, selecting a transform from a displayed list, or selecting a template from a list and entering the values of the settable data items using an interface (e.g. interface <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). Other properties of the transform may also be specified. These may include the user friendly name of the transform, the data items/objects on which the transform depends and/or the programming framework version used to execute the transform. Alternatively or in addition, the transform may be specified and these properties set when the transform is added.</p><p id="p-0079" num="0078">For ease of explanation, the transforms and data items will be referred to in this paragraph using the reference numerals of their symbols. In the first example transform <b>630</b>, a table is created containing columns A and B. The first table <b>620</b> contains a column A and the second table <b>622</b> contains a column B. The tables are then joined using a key reference from one table to the other, e.g. a column of table <b>620</b> contains a primary key of table <b>622</b>. The columns A and B are then returned from the joined result. This transform may be performed using any appropriate technology, e.g. SQL or a database access library. In the second example transform <b>632</b>, a graph is created from the created table <b>640</b> and the database table <b>624</b>. A SQL library, e.g. SQLAlchemy or Hibernate, may be used to retrieve the required data, column C, from the database table <b>624</b>. The transform then combines this with column B from the created data object <b>640</b> and creates a graph using a charting library, e.g. Matplotlib or JFreeChart.</p><p id="p-0080" num="0079">The interface <b>600</b> displays symbols <b>640</b>, <b>642</b> representing data objects <b>146</b> that have been or are able to be created by the pipeline transforms. These created data objects <b>146</b> may take any of the forms previously specified, e.g. tables or graphs. The created data objects are shown automatically when a transform <b>630</b> has been created. An arrow from the transform symbol <b>630</b>, <b>632</b> to the created data object symbol <b>640</b>, <b>642</b> shows which transform is used to create the data object. Further details of the data item may be displayed by the interface <b>600</b> in response to it receiving input corresponding to the symbol, e.g. a user hovering over (mousing over) the symbol, tapping the symbol or double clicking on the symbol. Receiving input corresponding to these symbols <b>640</b>, <b>642</b> may also cause the interface <b>600</b> to display a sub interface and/or another window whereby the user <b>110</b> can configure the properties of the created data object. Properties may include the database to store the created data object in, the table to store it in and its user friendly name to display in the pipeline development environment. Alternatively or in addition, these properties may be set when the symbol <b>640</b>, <b>642</b> for the created data object is automatically added.</p><p id="p-0081" num="0080">Examples of the further details displayed on appropriate input to the created data object symbols are shown in <b>650</b> and <b>652</b>. <b>650</b> shows the table indicated by created data object symbol <b>640</b> and created by transform <b>630</b>. <b>652</b> shows the graph indicated by created data object symbol <b>642</b> and created by transform <b>632</b>. This may be a separate window displayed on some mouse input, e.g. a double click, and/or may appear within the interface <b>600</b> when the user <b>110</b> hovers over the created data object symbol <b>640</b>.</p><p id="p-0082" num="0081">A button <b>660</b> may be provided to run the data pipeline. The button may respond to any appropriate input, e.g. a mouse click and/or a touch screen tap. The data pipeline system <b>150</b> is then run with the data pipeline displayed in the data pipeline development environment <b>132</b>. If the data pipeline is unable to be run for any reason, the interface <b>600</b> may display an error indicating the reasons why the data pipeline cannot be run. Similarly, if the data pipeline system <b>150</b> attempts to run the pipeline but fails for any reason, the interface <b>600</b> may display details of the failure and any available information that can be used for debugging.</p><heading id="h-0012" level="1">Example of Enhanced Data Pipeline Implementation</heading><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram of an enhanced data pipeline implementation <b>700</b> relating to a second aspect of the invention as described in the overview. The implementation illustrated may be performed by the data pipeline system <b>150</b>. It should be noted that the symbols <b>620</b>-<b>640</b> as used in <figref idref="DRAWINGS">FIG. <b>6</b></figref> refer to elements of a data pipeline itself in this figure rather than user interface elements.</p><p id="p-0084" num="0083">As before, data items <b>620</b> and <b>622</b> are used by a transform <b>630</b> to create some new data object, e.g. a table or chart. Once the transform has been completed, a first write operation <b>710</b> writes the created data object to a temporary memory <b>160</b>. In parallel or subsequently, a second write operation <b>712</b> writes the created data object to a database <b>140</b>. In both instances, the second write operation <b>712</b> is much slower than the first write operation <b>710</b>. The created data object <b>640</b> may, therefore, be read from the temporary memory <b>160</b> before write operation <b>712</b> has completed. In some instances, the data object is read for display as in read operation <b>720</b>. In other instances, the data object is read by a subsequent transform in the pipeline as in read operation <b>722</b>. It should also be noted that, due to temporary memory <b>160</b> being significantly faster than the database <b>140</b>, it is still beneficial to read the created data object from temporary memory even after write operation <b>712</b> has completed.</p><p id="p-0085" num="0084">In some embodiments, write operation <b>712</b> depends on write operation <b>710</b>. For example, the temporary memory <b>160</b> may be used as a write-back cache. In this instance, write operation <b>710</b> occurs first. The data pipeline, and potentially other data pipelines and processes, may then access the created data object <b>640</b> from the temporary memory <b>160</b>. The write operation <b>712</b> may then be postponed until a later point. At this point, the created data object <b>640</b> is written from temporary memory <b>160</b> to database <b>140</b>. This write operation may happen when the created data object is due to be removed from the temporary memory <b>160</b>. It may be due to be removed because the temporary memory requires the space to store another created data object or a system shutdown is imminent. Alternatively or in addition, the write operation <b>712</b> may occur at regular intervals as a safeguard against system failure. These regular intervals may be configured to be a fixed value, e.g. every two minutes; or may be determined by the system as to dynamically tradeoff between performance and robustness depending on the characteristics of the data and/or the system. The dynamically determined interval may be determined by a statistical algorithm that uses historical logs to determine the estimated probability of data loss for a given interval.</p><p id="p-0086" num="0085">The foregoing implementation provides considerable advantages as it allows the created data objects <b>640</b> to be displayed quickly in interface <b>600</b>. It also enables the data pipeline <b>700</b> to be executed on the data pipeline system <b>150</b> significantly more quickly. The results of the transforms <b>630</b> and <b>632</b>, and any steps which are dependent upon them, may therefore be obtained more quickly. In addition, writing back to the database <b>140</b> ensures that a persistent copy of the data is also stored, and so may be used and displayed at later dates. The illustrated implementation is, therefore, significantly more robust than systems that write only to temporary memory <b>160</b>.</p><heading id="h-0013" level="1">Example Computing Device</heading><p id="p-0087" num="0086">Referring now to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, it is a block diagram that illustrates an example computing device <b>500</b> in which software-implemented processes of the subject innovations may be embodied. Computing device <b>500</b> and its components, including their connections, relationships, and functions, is meant to be example only, and not meant to limit implementations of the subject innovations. Other computing devices suitable for implementing the subject innovations may have different components, including components with different connections, relationships, and functions.</p><p id="p-0088" num="0087">Computing device <b>500</b> may include a bus <b>502</b> or other communication mechanism for addressing main memory <b>506</b> and for transferring data between and among the various components of device <b>500</b>.</p><p id="p-0089" num="0088">Computing device <b>500</b> may also include one or more hardware processors <b>504</b> coupled with bus <b>502</b> for processing information. A hardware processor <b>504</b> may be a general purpose microprocessor, a system on a chip (SoC), or other processor suitable for implementing the subject innovations.</p><p id="p-0090" num="0089">Main memory <b>506</b>, such as a random access memory (RAM) or other dynamic storage device, also may be coupled to bus <b>502</b> for storing information and instructions to be executed by processor(s) <b>504</b>. Main memory <b>506</b> also may be used for storing temporary variables or other intermediate information during execution of software instructions to be executed by processor(s) <b>504</b>.</p><p id="p-0091" num="0090">Such software instructions, when stored in non-transitory storage media accessible to processor(s) <b>504</b>, render computing device <b>500</b> into a special-purpose computing device that is customized to perform the operations specified in the instructions. The terms &#x201c;instructions&#x201d;, &#x201c;software&#x201d;, &#x201c;software instructions&#x201d;, &#x201c;program&#x201d;, &#x201c;computer program&#x201d;, &#x201c;computer-executable instructions&#x201d;, and &#x201c;processor-executable instructions&#x201d; are to be broadly construed to cover any machine-readable information, whether or not human-readable, for instructing a computing device to perform specific operations, and including, but not limited to, application software, desktop applications, scripts, binaries, operating systems, device drivers, boot loaders, shells, utilities, system software, JAVASCRIPT, web pages, web applications, plugins, embedded software, microcode, compilers, debuggers, interpreters, virtual machines, linkers, and text editors.</p><p id="p-0092" num="0091">Computing device <b>500</b> also may include read only memory (ROM) <b>508</b> or other static storage device coupled to bus <b>502</b> for storing static information and instructions for processor(s) <b>504</b>.</p><p id="p-0093" num="0092">One or more mass storage devices <b>510</b> may be coupled to bus <b>502</b> for persistently storing information and instructions on fixed or removable media, such as magnetic, optical, solid-state, magnetic-optical, flash memory, or any other available mass storage technology. The mass storage may be shared on a network, or it may be dedicated mass storage. Typically, at least one of the mass storage devices <b>510</b> (e.g., the main hard disk for the device) stores a body of program and data for directing operation of the computing device, including an operating system, user application programs, driver and other support files, as well as other data files of all sorts.</p><p id="p-0094" num="0093">Computing device <b>500</b> may be coupled via bus <b>502</b> to display <b>512</b>, such as a liquid crystal display (LCD) or other electronic visual display, for displaying information to a computer user. In some configurations, a touch sensitive surface incorporating touch detection technology (e.g., resistive, capacitive, etc.) may be overlaid on display <b>512</b> to form a touch sensitive display for communicating touch gesture (e.g., finger or stylus) input to processor(s) <b>504</b>.</p><p id="p-0095" num="0094">An input device <b>514</b>, including alphanumeric and other keys, may be coupled to bus <b>502</b> for communicating information and command selections to processor <b>504</b>. In addition to or instead of alphanumeric and other keys, input device <b>514</b> may include one or more physical buttons or switches such as, for example, a power (on/off) button, a &#x201c;home&#x201d; button, volume control buttons, or the like.</p><p id="p-0096" num="0095">Another type of user input device may be a cursor control <b>514</b>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <b>504</b> and for controlling cursor movement on display <b>512</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.</p><p id="p-0097" num="0096">While in some configurations, such as the configuration depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, one or more of display <b>512</b>, input device <b>514</b>, and cursor control <b>514</b> are external components (e.g., peripheral devices) of computing device <b>500</b>, some or all of display <b>512</b>, input device <b>514</b>, and cursor control <b>514</b> are integrated as part of the form factor of computing device <b>500</b> in other configurations.</p><p id="p-0098" num="0097">Functions of the disclosed systems, methods, and modules may be performed by computing device <b>500</b> in response to processor(s) <b>504</b> executing one or more programs of software instructions contained in main memory <b>506</b>. Such instructions may be read into main memory <b>506</b> from another storage medium, such as storage device(s) <b>510</b>. Execution of the software program instructions contained in main memory <b>506</b> cause processor(s) <b>504</b> to perform the functions of the disclosed systems, methods, and modules.</p><p id="p-0099" num="0098">While in some implementations, functions of the disclosed systems and methods are implemented entirely with software instructions, hard-wired or programmable circuitry of computing device <b>500</b> (e.g., an ASIC, a FPGA, or the like) may be used in place of or in combination with software instructions to perform the functions, according to the requirements of the particular implementation at hand.</p><p id="p-0100" num="0099">The term &#x201c;storage media&#x201d; as used herein refers to any non-transitory media that store data and/or instructions that cause a computing device to operate in a specific fashion. Such storage media may comprise non-volatile media and/or volatile media. Non-volatile media includes, for example, non-volatile random access memory (NVRAM), flash memory, optical disks, magnetic disks, or solid-state drives, such as storage device <b>510</b>. Volatile media includes dynamic memory, such as main memory <b>506</b>. Common forms of storage media include, for example, a floppy disk, a flexible disk, hard disk, solid-state drive, magnetic tape, or any other magnetic data storage medium, a CD-ROM, any other optical data storage medium, any physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, NVRAM, flash memory, any other memory chip or cartridge.</p><p id="p-0101" num="0100">Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example, transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus <b>502</b>. Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.</p><p id="p-0102" num="0101">Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor(s) <b>504</b> for execution. For example, the instructions may initially be carried on a magnetic disk or solid-state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computing device <b>500</b> can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus <b>502</b>. Bus <b>502</b> carries the data to main memory <b>506</b>, from which processor(s) <b>504</b> retrieves and executes the instructions. The instructions received by main memory <b>506</b> may optionally be stored on storage device(s) <b>510</b> either before or after execution by processor(s) <b>504</b>.</p><p id="p-0103" num="0102">Computing device <b>500</b> also may include one or more communication interface(s) <b>518</b> coupled to bus <b>502</b>. A communication interface <b>518</b> provides a two-way data communication coupling to a wired or wireless network link <b>520</b> that is connected to a local network <b>522</b> (e.g., Ethernet network, Wireless Local Area Network, cellular phone network, Bluetooth wireless network, or the like). Communication interface <b>518</b> sends and receives electrical, electromagnetic, or optical signals that carry digital data streams representing various types of information. For example, communication interface <b>518</b> may be a wired network interface card, a wireless network interface card with an integrated radio antenna, or a modem (e.g., ISDN, DSL, or cable modem).</p><p id="p-0104" num="0103">Network link(s) <b>520</b> typically provide data communication through one or more networks to other data devices. For example, a network link <b>520</b> may provide a connection through a local network <b>522</b> to a host computer <b>524</b> or to data equipment operated by an Internet Service Provider (ISP) <b>526</b>. ISP <b>526</b> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the &#x201c;Internet&#x201d; <b>528</b>. Local network(s) <b>522</b> and Internet <b>528</b> use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link(s) <b>520</b> and through communication interface(s) <b>518</b>, which carry the digital data to and from computing device <b>500</b>, are example forms of transmission media.</p><p id="p-0105" num="0104">Computing device <b>500</b> can send messages and receive data, including program code, through the network(s), network link(s) <b>520</b> and communication interface(s) <b>518</b>. In the Internet example, a server <b>530</b> might transmit a requested code for an application program through Internet <b>528</b>, ISP <b>526</b>, local network(s) <b>522</b> and communication interface(s) <b>518</b>.</p><p id="p-0106" num="0105">The received code may be executed by processor <b>504</b> as it is received, and/or stored in storage device <b>510</b>, or other non-volatile storage for later execution.</p><p id="p-0107" num="0106">The above-described computer hardware is presented for purpose of illustrating certain underlying computer components that may be employed for implementing the subject innovations. The subject innovations, however, are not necessarily limited to any particular computing environment or computing device configuration. Instead, the subject innovations may be implemented in any type of system architecture or processing environment that one skilled in the art, in light of this disclosure, would understand as capable of supporting the features and functions of the subject innovations as presented herein. In an embodiment, the computer hardware, when executing software that causes the computer hardware to perform the various processes discussed herein, becomes a special purpose computer that performs particular useful applications.</p><heading id="h-0014" level="1">Extensions and Alternatives</heading><p id="p-0108" num="0107">As previously specified, aspects of these innovations are applicable in contexts other than a data pipeline system. In particular, it would be clear to the person skilled in the art that the template generation and execution functionality relating to the methods and user interfaces illustrated in <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>5</b></figref> may be applied in any software development environment. The development environment need not be a pipeline development environment.</p><p id="p-0109" num="0108">Such an example embodiment is a Python development environment. In this embodiment, the section of code displayed by step <b>210</b> of the method <b>200</b> and within the textbox <b>310</b> of interface <b>300</b> may be a Python module. The settable data items determined by step <b>230</b> may be Python module variables, instance attributes, method parameters and/or function parameters. These are determined using a selected portion of code <b>312</b> as previously described. Otherwise, template generation may occur generally as described in relation to the data pipeline system</p><p id="p-0110" num="0109">Some small modifications to the illustrated template interface <b>400</b> and associated method steps <b>250</b>, <b>260</b>, <b>270</b> may, however, be effected. For example, the title <b>410</b> may relate to the Python module or class name of the code displayed in textbox <b>310</b>. Similarly, in response to receiving input to button <b>440</b>, said code, e.g. the Python module, may be executed by the Python development environment with the settable data items set to the specified values. Alternatively, a code file, e.g. a Python module file, may be added to the currently open project in the Python development environment with the settable data items set to the specified values.</p><p id="p-0111" num="0110">It is understood that any specific order or hierarchy of steps in the processes disclosed is an illustration of example approaches. Based upon design preferences, it is understood that the specific order or hierarchy of steps in the processes may be rearranged, or that all illustrated steps be performed. Some of the steps may be performed simultaneously. For example, in certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components illustrated above should not be understood as requiring such separation, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p><p id="p-0112" num="0111">Various modifications to these aspects will be readily apparent, and the principles defined herein may be applied to other aspects. Thus, the claims are not intended to be limited to the aspects shown herein, but is to be accorded the full scope consistent with the language claims, where reference to an element in the singular is not intended to mean &#x201c;one and only one&#x201d; unless specifically so stated, but rather &#x201c;one or more.&#x201d; Unless specifically stated otherwise, the term &#x201c;some&#x201d; refers to one or more. Unless specifically stated otherwise, the term &#x201c;may&#x201d; is used to express one or more non-limiting possibilities. Headings and subheadings, if any, are used for convenience only and do not limit the subject innovations.</p><p id="p-0113" num="0112">A phrase, for example, an &#x201c;aspect&#x201d;, an &#x201c;embodiment&#x201d;, a &#x201c;configuration&#x201d;, or an &#x201c;implementation&#x201d; does not imply that the aspect, the embodiment, the configuration, or the implementation is essential to the subject innovations or that the aspect, the embodiment, the configuration, or the implementation applies to all aspects, embodiments, configurations, or implementations of the subject innovations. A disclosure relating to an aspect, an embodiment, a configuration, or an implementation may apply to all aspects, embodiments, configurations, or implementations, or one or more aspects, embodiments, configurations, or implementations. A phrase, for example, an aspect, an embodiment, a configuration, or an implementation may refer to one or more aspects, embodiments, configurations, or implementations and vice versa.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method performed by one or more processors, the method comprising:<claim-text>displaying a user interface depicting data transformation code, the data transformation code programmed to transform data items when executed;</claim-text><claim-text>receiving a user selection of a first code segment of the data transformation code;</claim-text><claim-text>determining and storing a reference to each of one or more settable items from the first code segment; and</claim-text><claim-text>generating a data transformation template indicating the one or more settable items from the first code segment, wherein the data transformation template is usable by a data transformation device to:</claim-text><claim-text>receive a user input value for each of the one or more settable items; and</claim-text><claim-text>execute, on one or more data items, the data transformation code with the one or more settable items set to the corresponding received user input value.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving multiple user selections; and</claim-text><claim-text>determining the one or more settable items based on at least the multiple user selections.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data transformation template is further usable by the data transformation device to:<claim-text>while executing the data transformation code, set at least one of the settable items by changing text characters in the data transformation code.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data transformation template is further usable by the data transformation device to:<claim-text>while executing the data transformation code, set at least one of the settable items by application programming interface calls.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. A computing system of comprising:<claim-text>a hardware computer processor;<claim-text>a non-transitory computer readable medium having software instructions stored thereon, the software instructions executable by the hardware computer processor to cause the computing system to perform operations comprising:</claim-text><claim-text>displaying a user interface depicting data transformation code, the data transformation code programmed to transform data items when executed;</claim-text><claim-text>receiving a user selection of a first code segment of the data transformation code;</claim-text><claim-text>determining and storing a reference to each of one or more settable items from the first code segment; and</claim-text><claim-text>generating a data transformation template indicating the one or more settable items from the first code segment, wherein the data transformation template is usable by a data transformation device to:</claim-text><claim-text>receive a user input value for each of the one or more settable items; and</claim-text><claim-text>execute, on one or more data items, the data transformation code with the one or more settable items set to the corresponding received user input value.</claim-text></claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computing system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:<claim-text>receiving multiple user selections; and</claim-text><claim-text>determining the one or more settable items based on at least the multiple user selections.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computing system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the data transformation template is further usable by the data transformation device to:<claim-text>while executing the data transformation code, set at least one of the settable items by changing text characters in the data transformation code.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computing system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the data transformation template is further usable by the data transformation device to:<claim-text>while executing the data transformation code, set at least one of the settable items by application programming interface calls.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A non-transitory computer readable medium having software instructions stored thereon, the software instructions executable by a hardware computer processor to cause a computing system to perform operations comprising:<claim-text>displaying a user interface depicting data transformation code, the data transformation code programmed to transform data items when executed;</claim-text><claim-text>receiving a user selection of a first code segment of the data transformation code;</claim-text><claim-text>determining and storing a reference to each of one or more settable items from the first code segment; and</claim-text><claim-text>generating a data transformation template indicating the one or more settable items from the first code segment, wherein the data transformation template is usable by a data transformation device to:</claim-text><claim-text>receive a user input value for each of the one or more settable items; and</claim-text><claim-text>execute, on one or more data items, the data transformation code with the one or more settable items set to the corresponding received user input value.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>receiving multiple user selections; and</claim-text><claim-text>determining the one or more settable items based on at least the multiple user selections.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the data transformation template is further usable by the data transformation device to:<claim-text>while executing the data transformation code, set at least one of the settable items by changing text characters in the data transformation code.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the data transformation template is further usable by the data transformation device to:<claim-text>while executing the data transformation code, set at least one of the settable items by application programming interface calls.</claim-text></claim-text></claim></claims></us-patent-application>