<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007364A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007364</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17842121</doc-number><date>20220616</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>8358</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>1</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>442</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>2389</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>437</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>435</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>858</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>81</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>84</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>845</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>8358</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>1</main-group><subgroup>0085</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>44204</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>23892</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>437</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>435</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>8586</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>812</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>84</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>8456</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>21</main-group><subgroup>2389</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEM AND METHOD FOR SIGNALING SECURITY AND DATABASE POPULATION</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17011834</doc-number><date>20200903</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11368766</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17842121</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16094456</doc-number><date>20181017</date></document-id><parent-status>ABANDONED</parent-status><parent-pct-document><document-id><country>WO</country><doc-number>PCT/US2017/028198</doc-number><date>20170418</date></document-id></parent-pct-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17011834</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62367018</doc-number><date>20160726</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62324294</doc-number><date>20160418</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Verance Corporation</orgname><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Zhao</last-name><first-name>Jian</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Winograd</last-name><first-name>Joseph M.</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The disclosed technology relates to methods, devices, systems and computer program products that facilitate access to metadata associated with a content. In one example, a method is described that includes receiving a multimedia content at a receiver device, extracting a watermark message from a first segment of the multimedia content, using at least a portion of the first watermark message to obtain additional information regarding the first segment of the multimedia content that includes the first watermark message, and associating and storing one or more values of the first watermark message and the additional information. The method further includes repeating the above operations to extract additional watermark messages from additional segments of the content and to form a table or array of items that can be accessed by specifying the one or more values of the first watermark message or one or more values of the additional watermark messages.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="99.99mm" wi="158.75mm" file="US20230007364A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="228.68mm" wi="165.52mm" orientation="landscape" file="US20230007364A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="62.74mm" wi="132.00mm" file="US20230007364A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="207.60mm" wi="152.91mm" orientation="landscape" file="US20230007364A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="214.80mm" wi="155.62mm" orientation="landscape" file="US20230007364A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="181.53mm" wi="158.92mm" orientation="landscape" file="US20230007364A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="195.33mm" wi="150.45mm" orientation="landscape" file="US20230007364A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="184.83mm" wi="129.46mm" orientation="landscape" file="US20230007364A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="203.03mm" wi="133.43mm" orientation="landscape" file="US20230007364A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="203.20mm" wi="129.88mm" orientation="landscape" file="US20230007364A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="200.58mm" wi="122.34mm" orientation="landscape" file="US20230007364A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="146.73mm" wi="125.90mm" orientation="landscape" file="US20230007364A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="200.32mm" wi="136.82mm" file="US20230007364A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="200.32mm" wi="136.82mm" file="US20230007364A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="145.80mm" wi="149.44mm" orientation="landscape" file="US20230007364A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="161.04mm" wi="115.32mm" orientation="landscape" file="US20230007364A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="159.00mm" wi="98.72mm" orientation="landscape" file="US20230007364A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="165.52mm" wi="132.25mm" file="US20230007364A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This patent document is a continuation of U.S. patent application Ser. No. 17/011,834, filed on Sep. 3, 2020, which is a continuation of U.S. patent application Ser. No. 16/094,456, filed on Oct. 17, 2018, now abandoned, which is a 371 application of International Patent Application No. PCT/US2017/028198, filed Apr. 18, 2017, which claims the benefit of priority of U.S. Provisional Patent Application No. 62/324,294, filed on Apr. 18, 2016, and U.S. Provisional Patent Application No. 62/367,018, filed on Jul. 26, 2016, the entire contents of which are incorporated by reference as part of the disclosure of this document.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The subject matter of this patent document relates to management of multimedia content and more specifically to managing and populating various metadata databases, as well as facilitating the acquisition of metadata associated with a content.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The use and presentation of multimedia content on a variety of mobile and fixed platforms have rapidly proliferated. By taking advantage of storage paradigms, such as cloud-based storage infrastructures, reduced form factor of media players, and high-speed wireless network capabilities, users can readily access and consume multimedia content regardless of the physical location of the users or the multimedia content. A multimedia content, such as an audiovisual content, can include a series of related images, which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any. Such a content can be accessed from various sources including local storage such as hard drives or optical disks, remote storage such as Internet sites or cable/satellite distribution servers, over-the-air broadcast channels, etc.</p><p id="p-0005" num="0004">In some scenarios, such a multimedia content, or portions thereof, may contain only one type of content, including, but not limited to, a still image, a video sequence and an audio clip, while in other scenarios, the multimedia content, or portions thereof, may contain two or more types of content such as audiovisual content and a wide range of metadata. The metadata can, for example include one or more of the following: channel identification, program identification, content and content segment identification, content size, the date at which the content was produced or edited, identification information regarding the owner and producer of the content, timecode identification, copyright information, closed captions, and locations such as URLs where advertising content, software applications, interactive services content, and signaling that enables various services, and other relevant data that can be accessed. In general, metadata is the information about the content essence (e.g., audio and/or video content) and associated services (e.g., interactive services, targeted advertising insertion).</p><p id="p-0006" num="0005">The metadata can enable content management, annotation, packaging, and search throughout content production and distribution value chain. Since the introduction of digital TVs, metadata has been introduced to enable digital interactive features and services. Various standardization efforts (such as MPEG-7, MPEG-21, TV-Anytime, DVB-SI, ATSC) strive to produce metadata standards with predefined data structures and transport methods for describing essence to support interoperability and unified services.</p><p id="p-0007" num="0006">While such metadata may be useful in some applications, especially for enabling broadcast interactive services, they must be interleaved, prepended or appended to a multimedia content, which occupies additional bandwidth and, more importantly, can be lost when content is transformed into a different format (such as digital to analog conversion, transcoded into a different file format, etc.), processed (such as transcoding), and/or transmitted through a communication protocol/interface (such as HDMI, adaptive streaming).</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a system for identifying a content that is provided by a broadcaster to a consumer device and for acquiring of various metadata including interactive content.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an exemplary structure of a watermark payload structure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates another system for identifying a content that is provided by a broadcaster to a consumer device and for acquiring of various metadata including interactive content.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an exemplary layering architecture associated with watermarks embedded in an audio component of a multimedia content.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an exemplary table for storing service and content information in accordance with an exemplary embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram illustrating two examples for populating a metadata database in accordance with the disclosed embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram illustrating how population of a fingerprinting database can be facilitated using the extracted watermarks in accordance with an exemplary embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating how population of data recovery files can be facilitated using metadata obtained via fingerprints in accordance with an exemplary embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram illustrating how retrieval of additional metadata can be facilitated using fingerprints and watermarks in accordance with an exemplary embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram illustrating how retrieval of additional metadata can be facilitated using fingerprints and watermarks in accordance with an exemplary embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram illustrating how embedding of a second set of watermarks can be facilitated using information obtained from a first set of watermarks in accordance with an exemplary embodiment.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a set of operations that can be carried out to facilitate access to metadata associated with a content in accordance with an exemplary embodiment.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a set of operations that can be carried out to populate a database of information based on information obtained from a broadcast multimedia content in accordance with an exemplary embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates an exemplary fingerprint configuration for a video frame in accordance with an exemplary embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates an exemplary message block fingerprint list for a video content in accordance with an exemplary embodiment.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates an exemplary watermark interface in accordance with an exemplary embodiment.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates a block diagram of a device within which various disclosed embodiments may be implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">SUMMARY OF CERTAIN EMBODIMENTS</heading><p id="p-0025" num="0024">The disclosed technology relates to methods, devices, systems and computer program products that facilitate access to metadata associated with a content. The disclosed technology provides for secure and efficient access to information such as secondary content, metadata and advertisements associated with a content, allows population of metadata databases associated with the content, and prevents unauthorized access to such information.</p><p id="p-0026" num="0025">One aspect of the disclosed technology relates to a method for facilitating access to metadata associated with a content, that includes receiving a multimedia content at a first receiver device that includes a first watermark extractor that is implemented at least partially in hardware, and (a) extracting a first watermark message from a first segment of the multimedia content using the first watermark extractor, (b) using at least a portion of the first watermark message to obtain additional information regarding the first segment of the multimedia content that includes the first watermark message, and (c) associating and storing one or more values of the first watermark message and the additional information. The method further includes repeating operations (a) to (c) to extract additional watermark messages from additional segments of the multimedia content and to form a table or array of items that can be accessed by specifying the one or more values of the first watermark message or one or more values of the additional watermark messages.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0027" num="0026">In the following description, for purposes of explanation and not limitation, details and descriptions are set forth in order to provide a thorough understanding of the disclosed embodiments. However, it will be apparent to those skilled in the art that the present invention may be practiced in other embodiments that depart from these details and descriptions.</p><p id="p-0028" num="0027">Additionally, in the subject description, the word &#x201c;exemplary&#x201d; is used to mean serving as an example, instance, or illustration. Any embodiment or design described herein as &#x201c;exemplary&#x201d; is not necessarily to be construed as preferred or advantageous over other embodiments or designs. Rather, use of the word exemplary is intended to present concepts in a concrete manner.</p><p id="p-0029" num="0028">As noted earlier, metadata that is associated with a multimedia content can be lost or impaired during, for example, conversion of the multimedia content from a first format to a second format. To reduce or eliminate the need for interleaving or bundling the broadcast content with metadata that can be lost or removed, some systems utilize watermarking techniques to either carry the metadata as part of watermarks that are embedded into the essence of the content (i.e., they become part of the content itself as imperceptible signals) or use embedded watermarks to enable access to a remote server, from which metadata can be recovered. Advanced Television Systems Committee (ATSC), Inc., Call for Proposals For ATSC-3.0 AUTOMATIC CONTENT RECOGNITION WATERMARKING SOLUTIONS&#x2014;ATSC Technology Group 3 (&#x201c;ATSC 3.0&#x201d;) (S33 Doc. 067r3) provides guidelines for such a watermark-enabled broadcast system. ATSC 3.0 allows applications to run on a TV to provide interactive services, targeted advertising with local ad replacement, and audience measurement, video-on-demand, etc. based on detection of embedded watermarks from a content. Where such systems are deployed, there are particular concerns with authentication, integrity verification, and confidentiality of information that are sent and received to from various devices to and from the remote servers. Moreover, it becomes necessary to populate the remote servers with appropriate information in a secure and efficient manner.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a system for identifying a content that is provided by a broadcaster to a consumer device and for acquiring of various metadata including interactive content. The system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is compatible with the requirements of ATSC 3.0.</p><p id="p-0031" num="0030">The content in <figref idref="DRAWINGS">FIG. <b>1</b></figref> is embedded with watermarks by a Domain Member prior to broadcast. For example, such a Domain Member can be a content producer or a Broadcaster. A Broadcaster transmits the content to one or more user premises. Such content is often received at a receiver such as a set-top box (STB), where decompression and formatting operations may take place before the content is provided (typically via a HDMI interface) to a viewing device (sometimes referred to as the &#x201c;Receiver&#x201d; or the &#x201c;Receiver Device&#x201d;). Such a Receiver can be compliant with the ATSC 3.0 standard. Decompression and formatting may alternatively take place within the Receiver. The Receiver which includes a watermark detector, examines the received content for the presence of watermarks. Such a detector can obtain the embedded timecodes from the recovered watermarks to enable a determination of content interruptions, as well as metadata recovery in accordance with the disclosed embodiments. The Receiver also includes the processing components (e.g., microprocessors, FPGAs or other electronic circuitry and associated program code) to conduct fingerprint computations, as well as processing and analysis of a metadata streams or fields that may be received at the Receiver device). The Receiver can also be in communication with additional databases (not shown), such as fingerprint database, that allows exchange of computed fingerprints, metadata or other information.</p><p id="p-0032" num="0031">It should be noted that while in some implementations, the Receiver is a separate component than the set-top box, in other implementations the Receiver may include, or be part of a larger device that includes, any one or combinations of additional components such as a set-top box, a display, keyboard or other user interface devices, or a watermark detector, as well as processors (e.g., microprocessors, digital signal processors (DSPs), etc.) and other circuitry that may be needed for implementation of such device, or devices.</p><p id="p-0033" num="0032">The watermark structure in some exemplary embodiments includes the following fields: a Domain ID and a Sequence ID. Each Domain ID is assigned by a central authority to a Domain Registrant who controls assignment and use of the Sequence ID codes under that domain. Each Domain ID maps one-to-one to an Internet domain name which is used to retrieve metadata associated with Sequence IDs in that domain. The Domain Registrar in <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a unique centralized entity responsible for registering such Domain IDs and publishing the mapping between the Domain IDs and domain names to Domain Lookup Servers. Domain registration is a process wherein a Domain ID is uniquely assigned to a Domain Registrant entity. The Domain Registrar provides Domain Registrant with a process (e.g., designated as REGISTER in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) to establish and maintain the relationship between the Domain ID and a domain name (e.g., Internet format). Multiple Domain IDs may be mapped to the same domain name. The Domain Registrar further maintains a database of all mappings from Domain IDs to domain names. The Domain Registrar employs a standardized protocol (e.g., designated as PUBLISH in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) to publish new and modified domain mappings to Domain Lookup Services that can include Domain Lookup Servers, as well as any other devices that may be needed to implement Domain Lookup Services. This protocol used by the Domain Registrar enables interoperability between the central Domain Registrar and all Domain lookup services. In some implementations, support for PUBLISH protocol is mandatory on both the Domain Lookup Servers and the Domain Registrar.</p><p id="p-0034" num="0033">Domain Lookup Server(s) maintain a copy of the Domain Registration database which maps each registered Domain ID to a domain name and keeps it current using the PUBLISH protocol with the Domain Registrar. Domain Lookup Server(s) also employ a standardized protocol (e.g., designated as LOOKUP in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) to provide domain name mappings from the database in response to Domain ID lookup queries originated by the Receivers. The use of a standardized LOOKUP protocol allows interoperability between any Receiver and any Domain Lookup Server. In some embodiments the Receivers are ATSC-compatible or ATSC-complaint. That is, those receivers comply with ATSC requirements, such as those under ATSC 3.0.</p><p id="p-0035" num="0034">Domain Servers can be Internet servers that are accessible at the domain name associated with a registered Domain ID and can provide metadata to Receivers in response to queries triggered by watermark detections. In some implementations, queries employ a standardized message protocol (e.g., designated as QUERY in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). A query is initiated by a Receiver and provides the domain server with a Domain ID and Sequence ID. The Domain Server responds with available metadata (e.g. broadcast channel identifier, a broadcast segment identifier, a timecode, a signaling) associated with the provided Domain ID and Sequence ID. Domain servers are not required to provide data for all required data fields available for all queries. In some embodiments, support for the QUERY protocol is mandatory on all Receivers and Domain Servers in order to enable interoperability among all receivers and content. This protocol enables interoperability between all receivers and all domain servers and support may be mandatory on both the receivers and the domain servers.</p><p id="p-0036" num="0035">In one example implementation, a 50-bit payload (&#x201c;VP1&#x201d; payload) can be embedded in every 1.5 seconds of the content. <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an exemplary structure of a watermark payload. The payload can be mapped to, or represented by, a watermark code. The watermark payload can include at least the following components or fields: a server code, an interval code and a trigger field. The Server Code is a value which is registered with a central authority designated by a Server Registrar (e.g., ATSC) that provides a mechanism for dividing the watermark code space among independent code-issuing entities (e.g., Server Registrants). For example, a Server Code can be registered by a content producer that wants to manage and use codes within content that they produce, a network that wants to manage and use codes within content that they distribute, or a service provider that wants to manage interactive services on their behalf. These independent code-issuing entities are sometimes referred to as &#x201c;ATSC Domains&#x201d; because the Server Code can also provide a one-to-one mapping to an Internet domain. The domain identifiers are recorded by the Server Registrar, are published to Server Lookup Services which maintain copies of the registration database, and can be accessed by receivers to discover the Internet domain name at which they can access servers hosting metadata associated with content embedded with that Server Code.</p><p id="p-0037" num="0036">The Server Registrant is responsible for coordinating the management of all Interval Codes associated with their assigned Server Code. Each Interval Code value can be associated uniquely with a specific interval of an instance of broadcast content. In some implementations, the interval is equal to the watermark duration (e.g., 1.5 seconds) but can be longer in circumstances where there is no need to enable a receiver to identify timing within the interval. The range of codes defined by an assigned Server Code and all associated Interval Codes is referred to as a Code Domain. The Trigger field of the VP1 watermark is a Boolean signal from the Content Source to the ATSC Receiver indicating that the ATSC Receiver should query for metadata or new interactive service content. In some implementations, a change in the value of the trigger field compared to previously detected trigger field is the indication that a query to a remote database can be, or should be, initiated to receive the metadata or the new content.</p><p id="p-0038" num="0037">The watermark payload can undergo various coding, modulation and formatting operations before being embedded into a content. For example, the payload may be error correction code (ECC) encoded, scrambled, interleaved with other packets, appended with a synchronization or registration header, encrypted or channel coded to form a sequence of bits with particular characteristics. As one example, a watermark may be formed that includes a 32-bit predetermined header and a 127-bit scrambled BCH (50,127,13) code. Once embedded into a host content, the host content can be disseminated through various channels and to ultimately reach a receiver. The received host content that includes embedded watermarks can be processed by a watermark extractor to recover the embedded watermark bits (or, more generally, symbols) by performing the reverse of the above coding, modulation or formatting schemes to recover the payload. In some instances, statistical techniques are used to recover the embedded symbols from the content using multiple instances of embedded watermarks.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>3</b></figref> also illustrates a system for identifying a content that is provided by a broadcaster to a consumer device and for acquiring of various metadata including interactive content. The system of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is compatible with the requirements of ATSC 3.0. Several components that are shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> can find analogous counterparts in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, the Server Registrar and the Domain Registrar; the Content, Signaling and Metadata Server and Domain Server; and the Server Lookup Service/server and Domain Lookup Server can carry out analogous operations. The various components in <figref idref="DRAWINGS">FIG. <b>3</b></figref> are further described below. A Server Registrar can be established for the purpose of registering ATSC Domains and assigning to each a unique Server Code. Registrants inform the registrar of a Server Name, which is the Internet domain name or URL at which metadata services associated with the Code Domain are located. The Server Registrar publishes the Server Code and associated Server Name to the Server Lookup Services.</p><p id="p-0040" num="0039">One or more Server Lookup Services are established. These services may be operated by ATSC, the Server Registrar, Content Owners, ATSC Receiver manufacturers, or a third party. Each Server Lookup Service maintains a database of all Server Code/Server Name associations published by the Server Registrar and responds to lookup requests from ATSC Receivers. The Server Lookup Services do not need to access or store any broadcast metadata; they simply provide ATSC Receivers with access to Server Names associated with Server Codes detected from broadcast watermarks.</p><p id="p-0041" num="0040">A Content Source, acting either as a Server Registrant or in concert with a Server Registrant, associates a valid registered Server Code and one or more unique Interval Codes and maps them to intervals of broadcast content essence. The Content Source embeds those codes in the broadcast content using a Watermark Inserter prior to delivery of the broadcast content to an MVPD. The Sever Code can be analogous to the Sequence ID described in the exemplary watermark payload above.</p><p id="p-0042" num="0041">The Interval Codes and the metadata for those same intervals of broadcast essence (e.g. any interactive content, signaling, metadata, triggers, channel identifier, media timeline timecode, etc.) are associated together in a database which is provided to a Content, Signaling, and Metadata Server (&#x201c;CSM Server&#x201d;). Content Sources may associate and embed watermarks continuously throughout their program material using sequentially increasing Interval Codes (e.g., analogous the Sequence ID described in the exemplary watermark payload above), may embed watermarks only in those intervals of content where interactive services are enabled, or may embed an Interval Code repeatedly through a program segment where an interactive service is available but does not require timing precision. Content Sources may register additional Code Domains in advance of depleting the Interval Code space associated with a given Server Code and may associate newly assigned Server Codes with the same Internet domain name to maintain infrastructure continuity.</p><p id="p-0043" num="0042">The CSM Server responds to various requests from ATSC Receivers, including delivery of signaling and interactive content based on interactive service data received from a complete broadcast stream. The CSM Server also responds to code metadata queries, in which a query containing the watermark payload (e.g. in the ASCII representational format) is submitted by the WM Client in an ATSC Receiver, with a request for metadata associated with the interval of broadcast content. The metadata included in the CSM Server response may include channel identifiers, timecodes, content or segment identifiers, triggers, etc. It should be noted that while metadata services can be hosted in the same servers as the content and signaling services, they may alternatively be hosted on different servers from those used for content and signaling services.</p><p id="p-0044" num="0043">To enable the architecture that is depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, open standards can be provided for the following three network protocols: PUBLISH, LOOKUP, and QUERY.</p><p id="p-0045" num="0044">PUBLISH is a protocol whereby the Server Registrar notifies interested ecosystem participants of a newly established or updated mapping between a Server Code and an Internet domain name and publishes the association to Server Lookup Services.</p><p id="p-0046" num="0045">LOOKUP is a protocol whereby an ATSC Receiver can submit a Server Code to a Server Lookup Service and receive a response containing the associated Server Name which has been most recently published by the Server Registrar.</p><p id="p-0047" num="0046">QUERY is a protocol whereby an ATSC Receiver can submit a Server Code and Interval Code to a CSM Server and receive ATSC metadata (e.g. channel, timecode, interactive services triggers, etc.) associated with the specified interval of broadcast content.</p><p id="p-0048" num="0047">ATSC Receivers may obtain broadcast content essence absent the full ATSC broadcast stream from an MVPD via a STB. The ATSC receiver may provide the content essence to the watermark client for detection of any embedded codes. As part of watermark client implementation in a given product, associations between Server Codes and Server Names can be stored in a cache (e.g., memory device), but it can also include the Internet address of a Server Lookup Service so that it may lookup newly registered or modified Server Names. The cache may be pre-populated at the time at ATSC Receiver manufacture to reduce traffic to Server Lookup Services.</p><p id="p-0049" num="0048">In some implementations, when the watermark client detects a watermark payload embedded in the content that it receives, it checks to determine whether or not the detected Server Code is present in its cache. If it is, the watermark client queries the CSM Server whose Server Name is associated with the Server Code to obtain the metadata associated with the detected watermark payload. If the Server Code from the detected watermark is not present in its cache, or if the contacted server fails to respond as expected, the watermark client may look up the current Server Name associated with the Server Code from the Server Lookup Service, cache the result, and then initiate a query directed at the newly identified Server Name.</p><p id="p-0050" num="0049">Watermark clients may be configured to initiate a query only for certain watermark detections; e.g. the first one after playback begins, the first one after a channel change, only those with the Trigger field set if a query has not been performed within the past, e.g., 30 seconds, etc.</p><p id="p-0051" num="0050">Certain Aspects of an Exemplary Watermark Structure: The watermark structure and the associated architecture can be better understood using the exemplary layering architecture that is shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> that assumes embedding of watermarks in audio component(s) of the multimedia content. The illustrated hierarchical watermark architecture includes a Stream Layer, a Segment Layer, a Payload Layer, a Data Link Layer and a Physical Layer. The smallest identifiable data at the physical layer is an audio sample at the physical layer; a specific number of audio samples host a watermark symbol at the Data Link Layer, and a specific number of watermark symbols form a watermark payload at the payload layer. <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows one example where each watermark payload can be mapped to a watermark code. Each watermark segment at the segment layer can include a plurality of watermark codes. The watermark segments can be embedded into one or more layers of the broadcast stream. For example, one or more channels of a 5.1 audio stream can have corresponding watermark codes embedded therein.</p><p id="p-0052" num="0051">Each layer has an associated specification that describes how mapping from one layer to another layer is accomplished. Examples of the content of such specifications are provided below.</p><p id="p-0053" num="0052">A Physical Layer specification defines the signal characteristics which map baseband audio samples representing broadcast audio in various formats (e.g. sampling rate, bit resolution) to a sequence of watermark symbols. This specification identifies the signal modulation and symbol encoding scheme for carriage of watermark data and, by implication, audio processing steps which may be employed for embedding, erasure, and detection of watermark symbols from audio signals. A Data Link Layer specification defines the symbol grammar that maps a sequence of watermark symbols to a valid watermark payload. This specification identifies the internal structure of a valid watermark, including the mechanisms employed in the watermark for facilitating synchronization, data transmission, control signaling, error correction, and error detection between a VP1 embedder and detector. A Payload Layer specification defines the data encoding that maps a watermark code to a watermark payload.</p><p id="p-0054" num="0053">A Segment Layer specification defines the semantics used to arrange watermark codes within a watermark segment. A watermark segment is a continuously watermarked interval of a broadcast (which may or may not align with a broadcast segment such as a show, show segment, ad, or promo). The Segment Layer specification can, for example, specify how watermark codes (including the Server Code, Interval Code, and Trigger described earlier) relate to one another within and between watermark segments, including arrangements to ensure correct operation of triggers and interactive applications which are timecode synchronized and/or real-time. A Stream Layer specification defines the application of VP1 watermarks to one or more watermark segments in broadcast streams of various formats. This specifies how the watermark is employed across a range of audio environments, such as various audio channel count, sampling rate, bit resolution, encoding format, alternate audio, enhanced audio, and immersive audio configurations.</p><p id="p-0055" num="0054">In the context of the hierarchical structure of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a receiver receives and processes the embedded content at the physical layer, and works it way up the hierarchical structure. In some embodiments, watermark information collected by receivers at different layers can be analyzed to obtain usage data to track or identify various user actions and content usage scenarios. Such usage data can, for example, include detection events reported by watermark detector based on the VP1 payloads and the change in successive VP1 payloads, and/or use case events indicating the content modifications identified by one or more detection events. For watermark payloads at any layer, an example mapping method is to build a database with the metadata needed to resolve the watermark information in a watermark interval into the usage in such interval. As described in further detail below, the watermark information in each watermark interval may be used as database keys for efficient search. Alternatively, the metadata database can be indexed using the original service time on the broadcast timeline.</p><p id="p-0056" num="0055">Metadata database indexed with watermark information: The metadata associated with the watermark information in a watermark interval contains information needed to create a Consumption Data Unit (CDU), as specified by ATSC in ATSC Candidate Standard: Service Usage Reporting (see http://atsc.org/wp_content-uploads/2015/12/S33-170r1_Service-Usage-Reporting.pdf). It includes identification information for the broadcast services, channels, and content (ads and program). It may also contain content delivery methods, content destination (presented on the primary or second screen, or stored as time-shifted content), and broadcast applications and their life cycles.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows exemplary Table 1 at a database which stores the service and content information and associated watermark information. In Table 1, Wi and Pi (for 1&#x2264;i&#x2264;57600) are the watermark symbol values and the VP1 payload in the i<sup>th </sup>watermark interval, respectively. The consecutive watermark intervals (i.e., 1.5-second intervals) from 1 to 57600 cover the 24-hour services of a first broadcaster. W&#x2032;i and P&#x2032;i (for 1&#x2264;i&#x2264;57600) are the watermark symbol values and the VP1 payload in the i<sup>th </sup>watermark interval, respectively, that cover the 24-hour services of a second broadcaster. It should be noted that a watermark payload typically includes a plurality of watermark symbols (see, for example, <figref idref="DRAWINGS">FIG. <b>4</b></figref>). In this context, each of the entries Wi and W&#x2032;i in Table 1 represents a plurality of watermark symbols that can correspond to a particular payload value. Referring back to Table 1, Service Presentation Time in UTC is the presentation time expressed in absolute UTC time value, especially for live broadcast. In one example, the Service Presentation Time in UTC for a DASH player is the sum of availabilityStartTime of the current MPD, the start time of the first period and the presentation time on Media Presentation timeline. SID1 and SID2 are the service identifiers of the first and second broadcast services, respectively. A service identifier can, for example, include a country code, a broadcast service ID assigned by an authority and service ID. EIDR1 and AD-ID1 are an Entertainment Identifier Registry (EIDR) number and an advertisement Identification (AD-ID) number that uniquely identify a program segment and an Advertisement of the first broadcast service, respectively. EIDR2 and AD-ID2 are an EIDR number and an AD-ID number that uniquely identify a program segment and an advertisement of the second broadcast service, respectively.</p><p id="p-0058" num="0057">At least some of the information in Table 1 can be obtained using watermarks that are embedded in the content using a compliant receiver (e.g., a receiver that operates in compliance with the ATSC 3.0 specification and rules). For example, at the data link and payload layers, the watermark symbol values can be decoded to a data structure containing the VP1 payload. Moreover, detection events reported by watermark detector based on the VP1 payloads and the change in successive VP1 payloads can be used to populate the table at the metadata database.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram illustrating two examples for populating a metadata database in accordance with the disclosed embodiments. For example, the configurations that are shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> can populate at least part of the entries in Table 1. The left-hand side of <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a watermark-based approach, in which one or more receivers <b>602</b>(<i>a</i>) to <b>602</b>(<i>k</i>) that receive multimedia contents (not shown), extract the embedded watermarks and send a request (illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> as operations <b>1</b>) to a content recovery server <b>604</b> to obtain metadata describing the service and content being viewed. The recovery server is, for example, an Internet server that provides signaling data to the receiver whose address is resolved using a VP1 Payload. The responses received (illustrated as operations <b>2</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) from the content recovery server <b>604</b> at the receivers <b>602</b>(<i>a</i>) to <b>602</b>(<i>k</i>) are used to populate the metadata database <b>608</b>. A usage data gathering sever <b>606</b> is optionally provided to serve as an intermediate server to collect and organize the metadata received from the receivers <b>602</b>(<i>a</i>) to <b>602</b>(<i>k</i>), and identify usage scenarios and statistics, before providing the information to the metadata server <b>608</b>.</p><p id="p-0060" num="0059">The right-hand side of <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a fingerprint-based approach, where one or more receivers <b>602</b>(<i>n</i>) to <b>602</b>(<i>z</i>), receive contents (not shown), compute fingerprints from the received content, and periodically or intermittently send (illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> as operations <b>3</b>) the generated fingerprints to a fingerprint matching server <b>610</b>. The response (shown as operation <b>4</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) received from the fingerprint matching server <b>610</b> includes the information about the service and content possibly indexed by watermark information (or service time on the broadcast timeline). An optional data usage gathering server <b>612</b> receives the information from the receivers <b>602</b>(<i>n</i>) to <b>602</b>(<i>z</i>), organize the metadata and identifies usage scenarios and statistics, before providing the information to the metadata server <b>614</b>.</p><p id="p-0061" num="0060">In an exemplary case, all recovery files for each and all broadcast services can be obtained from the content recovery server <b>604</b> using a protocol such as the one specified in ATSC Candidate Standard: Content Recovery in Redistribution Scenarios (see http://atsc.org/wp-content/uploads/2016/03/S33-178r2_Content-Recovery-in-Redistribution-Scnearios.pdf). For example, assume that the server code in the large domain for a broadcaster service is 0x0000FF and the interval codes for 24-hour of such service starts at 0x00002D00 and ends at 0x00004380. The following queries can be constructed to retrieve all associated recovery files for the 24-hour service:</p><p id="p-0062" num="0061">http://a336.00.00.FF.1.vp1.tv/a336/rdt/0000/FF/0000FF-00002D00</p><p id="p-0063" num="0062">http://a336.00.00.FF.1.vp1.tv/a336/rdt/0000/FF/0000FF-00002D001</p><p id="p-0064" num="0063">. . .</p><p id="p-0065" num="0064">http://a336.00.00.FF.1.vp1.tv/a336/rdt/0000/FF/0000FF-00004380</p><p id="p-0066" num="0065">The operations that are described in connection with <figref idref="DRAWINGS">FIG. <b>6</b></figref>, allow the metadata databases <b>608</b>, <b>614</b> to be populated using watermark-based and/or fingerprint-based techniques. When databases <b>608</b>, <b>614</b> are populated by both watermarks and fingerprints, data residing at those databases may be not congruous. Further harmonization between the databases help reduce redundancy and improve data accuracy. Examples of such incongruities include scenarios where the content interval associated with a watermark payload is not aligned with the content interval associated with each corresponding fingerprint (e.g., the two may have different boundaries or identification granularity), the watermark and the fingerprint are associated with different timelines or timing systems, the scenario in which the watermark is not detectable but a fingerprint match is obtained, or the watermark and the fingerprint are associated with different metadata.</p><p id="p-0067" num="0066">It should be noted that while <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows two separate metadata databases <b>608</b> and <b>614</b>, in some implementations a single database may be used. For example, a different subsection of the database may be designated for watermark-based and fingerprint-based data, respectively, which may be replaced and/or consolidated when the two sets of metadata are harmonized.</p><p id="p-0068" num="0067">To prevent non-compliant devices, such as receivers made by rogue manufacturers, compromised receivers, or Internet robots installed on computers, from accessing the recovery server, various techniques can be employed such as client authentication using Transport Layer Security (TLS) with client certificates, and authentication token managed by broadcast application and validated by usage data gathering server. Some of these techniques are described in detail in further sections of this document. Without such countermeasures, a rogue or unlicensed entity can (legitimately) acquire one or more licensed receivers and use those receivers to obtain and store content information (such as the information provided in Table 1); such a rogue entity would then simultaneously deploy unauthorized receivers that are capable of detecting watermark messages, but instead of querying an official/authorized metadata database, would communicate with use the database that includes the stored information to acquire metadata, services and secondary content for a broadcast service. For example, as noted earlier, the recovery of watermark information at one or more layers (e.g., at the data link layer or the data recovery layer) can be used as an index to obtain such information.</p><p id="p-0069" num="0068">Generation of usage data using watermark information and metadata database: In some embodiments, content usage information can be ascertained by extracting the embedded watermarks that are used to populate the metadata databases. For example, Tables 2 and 3 (below) show watermark information that is detected from two different receivers: Receiver A and Receiver B. Receiver A reports the watermark symbol values while Receiver B reports the VP1 payloads in accordance with the same convention described in connection with Table 1. The receiver wall clock time is represented in Coordinated Universal Time (UTC) and designates the start time of a watermark interval from which the watermark information is detected. A watermark interval (or VP1 Interval or cell) is an interval of content containing one or more VP1 Payloads with the same values.</p><p id="p-0070" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Records of detected watermark information on Receiver A</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="98pt" align="left"/><tbody valign="top"><row><entry/><entry>Watermark Symbol Values</entry><entry>Receiver Wall Clock Time</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>W1</entry><entry>2015-11-05T00:00:02.0Z</entry></row><row><entry/><entry>W2</entry><entry>2015-11-05T00:00:03.5Z</entry></row><row><entry/><entry>W3</entry><entry>2015-11-05T00:00:05.0Z</entry></row><row><entry/><entry>W&#x2032;5</entry><entry>2015-11-05T00:00:08.0Z</entry></row><row><entry/><entry>. . .</entry><entry>. . .</entry></row><row><entry/><entry>W&#x2032;1200</entry><entry>2015-11-05T00:30:02.0Z</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0071" num="0069">Based on the watermark information records in Table 2 and service/content information in Table 1, at least the following usage information can be generated for content consumed on Receiver A.</p><p id="p-0072" num="0070">(1) The content having EIDR1 on the first broadcast service was consumed from 2015-11-05T00:00:00.0Z to 2015-11-05T00:00:04.5Z (i.e., for a duration of three 1.-second watermarks) on broadcast service timeline (i.e., Service Presentation time in UTC as identified in Table 1); and (2) the content having EIDR2 on the second broadcast service was consumed from 2015-11-05T00:00:08.0Z to 2015-11-05T00:30:02.0Z on broadcast service timeline.</p><p id="p-0073" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Records of detected watermark information on Receiver B</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="112pt" align="left"/><tbody valign="top"><row><entry/><entry>VP1 Payload</entry><entry>Receiver wall clock time</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>P&#x2032;1</entry><entry>2015-11-05T00:00:02.0Z</entry></row><row><entry/><entry>P&#x2032;2</entry><entry>2015-11-05T00:00:03.5Z</entry></row><row><entry/><entry>P4</entry><entry>2015-11-05T00:00:08.0Z</entry></row><row><entry/><entry>. . .</entry><entry>. . .</entry></row><row><entry/><entry>P22</entry><entry>2015-11-06T24:00:32.0Z</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0074" num="0071">Based on the watermark information records in Table 3 and service/content information in Table 1, at least the following usage information can be generated for content consumed on Receiver B.</p><p id="p-0075" num="0072">(1) The content having EIDR2 on the second broadcast service was consumed from 2015-11-05T00:00:00.0Z to 2015-11-05T00:00:03.0Z on broadcast service timeline; and (2) the content having AD-ID1 on the first broadcast service was consumed from 2015-11-05T00:00:08.0Z to 2015-11-05T00:00:30.0Z on broadcast service timeline.</p><p id="p-0076" num="0073">Without certain countermeasures that are described later in this document, there is no viable technical solution to prevent rogue receiver manufacturers from making receivers without implementing VP1 protocol for usage monetization.</p><p id="p-0077" num="0074">Metadata ascertained via watermarks for usage data of connected device: A connected device (e.g., a device that has connectivity via the Internet or another communication channel to other devices, databases or entities) such as a set-top-box or a media player on laptop can collect usage data for business intelligence and audience measurement. Such usage data usually contains raw viewing data without the associated metadata. The raw viewing data includes basic information such as a record of user selection of channels using a remote control, the start and end times of viewing in a channel and the like.</p><p id="p-0078" num="0075">Using the disclosed techniques, a server that collects the raw viewing data from connected devices can associate the raw viewing data with associated metadata using a metadata database (as shown in Table 1) that is populated by information obtained from watermarks. The association may be performed by matching the viewing start and end times in the raw viewing data with the service presentation time in Table 1. For example, if the start and end times of viewing of a channel recorded on a connected device is D+2015-11-05T00:00:01.5Z and D+2015-11-05T00:00:03.0Z, respectively, the content identifier of such interval is EIDR1 and the service/channel identifier for such interval is SID1 according to Table 1. For live content, D is a known offset between the broadcast time and viewing time recording in the raw viewing data.</p><p id="p-0079" num="0076">In an alternate embodiment, instead of associating metadata with raw viewing data at a server, a connected device can obtain metadata ascertained with watermarks (e.g., as shown in operation <b>2</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>), and associate the metadata with the raw viewing data in the same way as the server does before sending the usage data to the server.</p><p id="p-0080" num="0077">Combined uses of watermarks and fingerprints: Digital fingerprinting and watermarking are two methods for automatic content identification. Each method has its pros and cons. In a typical fingerprinting-based technique, the content is divided into segments and certain inherent characteristics of the content segments are computed. Examples of such content characteristics include content energy, content frequency features, temporal characteristics and others. The computed fingerprints are typically converted to, or mapped to, a compact form and indexed (e.g., through computation of a hash value) for storage in a database. When the content is subsequently disseminated and received at a receiver device, fingerprints are computed for the received content (e.g., on a segment-by-segment basis) and compared to the stored fingerprints to identify the content and/or detect any missing or altered content segments. For fingerprinting-based techniques, the content is not modified so legacy content (e.g., content that has been already distributed without embedded watermarks) and/or content that is otherwise intended to be released without embedded watermarks, can be identified. However, fingerprints cannot distinguish encoding versions, or the distribution path/source of the same content. Moreover, fingerprinting-based techniques require a large and scalable infrastructure that allows for a large number of clients to periodically query potentially very large fingerprint databases.</p><p id="p-0081" num="0078">For watermarking method, different identifiers can be embedded into different copies of the same content so that the distribution encoding, path or source of the same content can be identified (in addition to the content identification). As watermark detection is performed on clients, no server infrastructure is required, which potentially results in lower latency in content identification than using fingerprint methods. However, the primary drawback is that watermarking requires modification of the content and thus legacy content that does not contain watermarks cannot be identified. In addition, watermark embedding introduces an extra process in content production and distribution workflow.</p><p id="p-0082" num="0079">When various versions of the same broadcast content is watermarked and/or fingerprinted, combined and complementary uses of watermarks and fingerprints can improve performance of automatic content identification. When watermarked and fingerprinted broadcast content is distributed to a diversity of receivers, there are various scenarios where watermarks and fingerprints can be complementarily used for recovery of supplemental content including missing signaling data.</p><p id="p-0083" num="0080">Using watermark information to trigger fingerprint matching: When a receiver is capable of watermark detection and fingerprint extraction, it can send a fingerprint query to a fingerprint server only when the detected watermarks identify a service change (such as channel change, content component change, tune-in) or indicate that a new signaling data, such as a dynamic event (e.g., an advertisement, a secondary content, etc.) is available. Using this technique, it is not necessary to compute and send fingerprints periodically to the fingerprint server, but such requests are sent more selectively only upon detection of the appropriate triggering events identified by the extracted watermarks. If the metadata information about the service and content is directly embedded in the watermarks, a service change can be identified if the service identification changes. If the metadata is obtained from a remote recovery server (e.g., the Content Recovery Server <b>604</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) using the detected watermark information, service change can be identified when discontinuity in watermark information is detected.</p><p id="p-0084" num="0081">One the advantages of using the combined watermarking and fingerprinting techniques is that the cost for operating the fingerprint server can be reduced using the watermarking information to trigger the fingerprint queries. As described earlier, the watermark information discontinuity can be detected at different layers, such as the physical layer, data link layer, watermark payload layer, or detection event layers.</p><p id="p-0085" num="0082">Populating the fingerprint database using metadata ascertained via watermarks: When a receiver is capable of watermark detection and fingerprint extraction, the watermark can be used to populate the fingerprint database to enable receivers that do no have watermark detection capability to obtain the metadata.</p><p id="p-0086" num="0083"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram illustrating how population of a fingerprinting database can be facilitated using the extracted watermarks in accordance with an exemplary embodiment. As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the Receiver A <b>702</b> includes components that can perform watermark extraction and also components that can generate fingerprints from a received content. Receiver A detects the watermarks from a content interval and also extracts the fingerprint from the same interval. The watermark information is used to construct a query (illustrated at operation <b>1</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>) to a recovery server <b>704</b> for the metadata associated with the watermark. Receiver A <b>702</b> then receives (illustrated at operation <b>2</b>) the metadata from the recovery server <b>704</b>, and sends (illustrated as operation <b>3</b>) the metadata together with the fingerprints extracted from the content interval (and optionally the watermark information obtained from the extracted watermarks) to a fingerprint server <b>708</b> where the fingerprints (and optionally the watermark information) and associated metadata are stored in the fingerprint database on the fingerprint server <b>708</b>. In some implementations where the metadata corresponding to the service and content is directly carried in the watermarks, the first and second steps (operations <b>1</b> and <b>2</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>) can be skipped.</p><p id="p-0087" num="0084">In the exemplary configuration of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, Receiver B <b>706</b> includes components that can generate fingerprints from a content. The fingerprint information is used to construct and send a query (operation <b>4</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>) to the fingerprint server <b>708</b> to obtain the metadata that had been fully or partially obtained via watermarks detected by Receiver A <b>702</b>, as previously described.</p><p id="p-0088" num="0085">It should be noted that in the exemplary configuration of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the content that is input to Receiver A is labeled &#x201c;Watermarked and fingerprinted content&#x201d; to covey that such content includes embedded watermarks and has previously been processed to produce associated fingerprints for storage at a fingerprint database. Similarly, the content that is input to Receiver B is labeled &#x201c;Fingerprinted content&#x201d; to covey that such content has previously been processed to produce associated fingerprints for storage at a fingerprint database.</p><p id="p-0089" num="0086">Population of recovery files using metadata ascertained via fingerprints: <figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram illustrating how population of data recovery files can be facilitated using metadata obtained via fingerprints in accordance with an exemplary embodiment. As shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, Receiver B <b>806</b> has the capability of both watermark extraction and fingerprint extraction. It first extracts the fingerprints from a content interval and constructs and sends a query (operation <b>1</b>) using the extracted fingerprints to a fingerprint server <b>808</b> that performs fingerprint matching. Receiver B <b>806</b> may optionally include the watermark information as part of the query. If a match is found, the fingerprint server <b>808</b> provides the metadata associated with the fingerprint as the response (operation <b>2</b>).</p><p id="p-0090" num="0087">Once Receiver B <b>806</b> receives the metadata associated with the interval from the fingerprint server <b>808</b>, it sends (operation <b>3</b>) such metadata together with the watermark information detected from the content interval to a recovery file production server (not explicitly shown). The recovery file production server then uses the received metadata to create one or more recovery files associated with the content interval, and makes these recovery files available on a content recovery server <b>804</b>. In some implementations, the functionalities associated with such a recovery file production server may be implemented on the content recovery server <b>806</b>. Once the recovery files are available, Receiver A <b>802</b> with capabilities of watermark extraction and content recovery can extract embedded watermarks from a received watermarked content, construct and send a watermark-based query (operation <b>4</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref>) to the content recovery server <b>804</b> and obtain the recovery files containing the metadata (operation <b>5</b>).</p><p id="p-0091" num="0088">Retrieval of additional metadata using metadata ascertained via fingerprints or watermarks: In some embodiments, two different sets of metadata may be obtained through watermarks and/or fingerprints. The steps to obtain such metadata can be performed in parallel and asynchronously, or sequentially.</p><p id="p-0092" num="0089"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram illustrating how retrieval of additional metadata can be facilitated using fingerprints and watermarks in accordance with an exemplary embodiment. In the configuration of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, retrieval of a second metadata is facilitated using a first metadata that is ascertained via fingerprints. As shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, Receiver <b>902</b> includes components capable of extracting watermarks and generating fingerprints from the received content. In operation <b>1</b>, fingerprints that are generated by Receiver <b>902</b> are used to form a query to the fingerprint server <b>906</b>. The query can optionally include watermark information obtained from the content. In operation <b>2</b>, the first metadata associated with a content interval is obtained from the fingerprint server <b>906</b> based on fingerprint information sent in the query. The first metadata may contain information regarding how to access the second metadata such as a URL of the server that hosts the second metadata. In operation <b>3</b>, Receiver <b>902</b> uses the first metadata and/or the detected watermark information to construct and send a content recovery query to a content recovery server <b>904</b>. The content recovery server <b>904</b>, at operation <b>4</b>, provides the second metadata associated with the same content interval to Receiver <b>902</b>. The first and second metadata may contain the same or different information about the content interval.</p><p id="p-0093" num="0090"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram illustrating how retrieval of additional metadata can be facilitated using fingerprints and watermarks in accordance with another exemplary embodiment. In the configuration of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, retrieval of a second metadata is facilitated using a first metadata that is ascertained via watermarks. As shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, Receiver <b>1002</b> extracts watermarks from a received content, forms and sends a query (operation <b>1</b>) to a content recovery server <b>1006</b>. In response, the content recovery server <b>1006</b> sends the first metadata (in operation <b>2</b>) associated with a content interval to Receiver <b>1002</b>. The first metadata may contain information about how to access the second metadata such as a URL of the signaling server that hosts the second metadata. At operation <b>3</b>, Receiver <b>1002</b> uses the received first metadata and/or the detected watermark information to construct and send (operation <b>3</b>) a signaling query to a signaling server <b>1004</b>. In response, the signaling server <b>1004</b> sends (at operation <b>4</b>) the second metadata to Receiver <b>1002</b>. The first and second metadata may contain the same or different information about the content interval.</p><p id="p-0094" num="0091">In some implementations, the signaling server <b>1004</b> can be a fingerprint server. In this case, the fingerprints extracted from the content interval associated with the first metadata may optionally be used to construct the signaling query. In embodiments where the first metadata is directly carried in the watermarks, operations <b>1</b> and <b>2</b> in <figref idref="DRAWINGS">FIG. <b>10</b></figref> can be skipped. The signaling query can be constructed using the information including the first metadata carried in the watermarks.</p><p id="p-0095" num="0092">Embedding additional watermarks using the metadata ascertained via fingerprints or watermarks: In some embodiments, additional watermark information can be embedded into the content interval using the metadata that is associated the same interval and ascertained via the first watermarks that are already present in the content.</p><p id="p-0096" num="0093"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram illustrating how embedding of a second set of watermarks can be facilitated using information obtained from a first set of watermarks in accordance with another exemplary embodiment. In the exemplary operations depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, a device <b>1102</b> detects the watermark information carried in a first set of watermarks that are embedded in the content. The device <b>1102</b> uses such watermark information to construct and send a query (operation <b>1</b>) to a content recovery server <b>1104</b>, and in response receives (operation <b>2</b>) metadata associated with the first set of watermarks from the content recovery server <b>1104</b>. The device <b>1102</b> then embeds (operation <b>3</b>) the second set of watermarks carrying some parts of the metadata such as content identifiers (e.g., EIDR and AD-ID) and/or the start and end times of the content interval associated with the metadata on the broadcast timeline. The second set of watermarks may also carry the information that identifies the distributor such as a broadcast network, a local broadcast station, a syndicator, a MVPD, a OTT provider, and the like.</p><p id="p-0097" num="0094">In some embodiments, the first and second set of watermarks are embedded using different watermarking technologies. The device <b>1102</b> can be a consumer device such as a set-top-box or a device that is used in content production or distribution system such as a transcoder and headend, and includes components that are capable of watermark detection and embedding. In embodiments that metadata is directly carried in the first set of watermarks, operations <b>1</b> and <b>2</b> in <figref idref="DRAWINGS">FIG. <b>11</b></figref> may be skipped.</p><p id="p-0098" num="0095"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a set of operations that can be carried out to facilitate access to metadata associated with a content in accordance with an exemplary embodiment. At <b>1202</b>, a multimedia content is received at a first receiver device that includes a first watermark extractor. The first watermark extractor can be implemented at least partially in hardware. At <b>1204</b>, a first watermark message is extracted from a first segment of the multimedia content using the first watermark extractor. At <b>1206</b>, at least a portion of the first watermark message is used to obtain additional information regarding the first segment of the multimedia content that includes the first watermark message. At <b>1208</b>, one or more values of the first watermark message are associated the additional information and stored. At <b>1210</b>, operations <b>1204</b> to <b>1208</b> are repeated to extract additional watermark messages from additional segments of the multimedia content and to form a table or array of items that can be accessed by specifying the one or more values of the first watermark message or one or more values of the additional watermark messages.</p><p id="p-0099" num="0096">In one exemplary embodiment, for each of the extracted watermark messages, the additional information includes one or more of the following: a service identifier associated with the corresponding segment of the multimedia content; a program identifier associated with the corresponding segment of the multimedia content; or a service presentation time that represents a time frame within which the corresponding segment of the multimedia content is presented. In another exemplary embodiment, using at least a portion of the first or the additional watermark messages to obtain the additional information includes forming a query for each of the first and the additional watermark messages to obtain the additional information from a metadata sever, wherein each query includes a sever code and an interval code obtained from the corresponding watermark message.</p><p id="p-0100" num="0097">According to another exemplary embodiment, associating the one or more values of the first watermark message and the additional information includes one or both of: associating a watermark payload value with the additional information, or associating a plurality of watermark symbol values with the additional information. In yet another exemplary embodiment, wherein specification of one or both of the watermark payload value or the plurality of watermark symbol values enables access to the corresponding additional information from the table or array of items.</p><p id="p-0101" num="0098">In another exemplary embodiment, the above noted method further includes receiving the multimedia content at a second receiver device that includes a second watermark extractor that is implemented at least partially in hardware, extracting the first watermark message and one or more of the additional watermark messages from the multimedia content using the second watermark extractor, and transmitting, for each of the extracted watermark messages, information including a payload value of the watermark message and a time value to a database, wherein the transmitted information in conjunction with the table or array of items enables a determination of a particular usage of the multimedia content. Such a time value can be local time value to the second watermark extractor. Further, this time value can be in different timing system, e.g., ATSC system time delivered in physical layer (i.e. broadcast service time), wall clock time of the receiver, the presentation time of content, expressed in UTC or NTP, etc.</p><p id="p-0102" num="0099">In another exemplary embodiment, the above noted method further includes receiving the multimedia content at a second receiver device that includes a second watermark extractor that is implemented at least partially in hardware, extracting the first watermark message and one or more of the additional watermark messages from the multimedia content using the second watermark extractor, and transmitting, for each of the extracted watermark messages, information including a plurality of symbols values of the watermark message and a time value at the second watermark extractor to a database, wherein the transmitted information in conjunction with the table or array of items enables a determination of a particular usage of the multimedia content. In the above noted scenarios, the particular usage of the multimedia content includes one or more of the following: (A) consumption duration of the multimedia content, (B) an identifier of the multimedia content, (C) a type of multimedia content that was consumed, or (D) a change in the multimedia content.</p><p id="p-0103" num="0100">In one exemplary embodiment, each of the extracted watermarks is extracted from an audio component of the multimedia content that is 1.5 seconds in duration. In another exemplary embodiment, the additional information is obtained by receiving a recovery data table from a recovery server located remotely from the first receiver device.</p><p id="p-0104" num="0101"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a set of operations that can be carried out to populate a database of information based on information obtained from a broadcast multimedia content in accordance with an exemplary embodiment. At <b>1302</b>, a multimedia content at receiver device that includes a watermark extractor. Such a watermark extractor can be implemented at least partially in hardware that include electronic circuitry. At <b>1304</b>, a plurality of watermark messages are extracted from the multimedia content. At <b>1306</b>, a plurality of queries are formed based on the plurality of extracted watermark messages to obtain metadata associated with the multimedia content. At <b>1308</b>, for each of the extracted watermark messages, information including the metadata and at least a portion of the watermark message is transmitted to a first database. At <b>1310</b>, one or more values of the watermark message is associated with the metadata and stored at a first database. At <b>1312</b>, for each of the extracted watermark messages, a fingerprint value is further associated with the watermark message that corresponds to a segment of the multimedia content.</p><p id="p-0105" num="0102">In one exemplary embodiment, the fingerprint value corresponds to a segment of the multimedia content that is time-aligned with a segment of the multimedia content that includes the corresponding watermark message. In another exemplary embodiment, the metadata associated with each watermark message at the first database is accessible by specification of one or more of the following: a payload value of the watermark message, a plurality of symbol values of the watermark message, or the fingerprint value that corresponds to the corresponding segment of the multimedia content. In yet another exemplary embodiment, the above noted method further includes associating the watermark message and the metadata with fingerprint-based metadata associated with each fingerprint value. In one embodiment, the fingerprint values and the associated fingerprint-based metadata reside at a second database that is in communication with the first database. In another embodiment, the fingerprint values and the associated fingerprint-based metadata reside at the first database.</p><p id="p-0106" num="0103">In another exemplary embodiment, metadata stored at the first database includes timing information associated with each of the watermark messages to the first database. In one exemplary embodiment, the above noted method further includes determining a particular usage of the multimedia content based on information residing at the first database. Such a usage can include consumption duration of the multimedia content, an identifier of the multimedia content, a type of multimedia content that was consumed, or a change in the multimedia content.</p><p id="p-0107" num="0104">Another exemplary embodiment relates to a method that can be carried out at a packager in broadcast production. Such a method includes embedding a watermark message that includes a VP1 payload, comprising a server code and an interval code in a content segment. The method further includes generating a fingerprint for the same content segment, and associating the server code with the fingerprint. For example, the server code can be used as an identifier or index to access the fingerprint information. The above noted method can also optionally include using the server code by a receiver to retrieve metadata from the fingerprint database.</p><p id="p-0108" num="0105">ATSC 3.0 Signaling Security Evaluation and Solutions: In the sections that follow security threats to ATSC 3.0 signaling data are described, and methods and systems to mitigate or thwart those security threats are presented.</p><p id="p-0109" num="0106">Target of Evaluation (TOE): The Target of Evaluation (TOE) in the sections that follow is described in the context of ATSC 3.0 receiver software functions running on any operating system or platform and used primarily to acquire, deliver and process ATSC signaling. It is understood, however, that various functions can be implemented using hardware, software, or a combination of both.</p><p id="p-0110" num="0107">A broadcast application, in some examples, is defined as a collection of HTML5 documents consisting of HTML pages, JavaScript, CSS, XML and multimedia files. The collection of these files can be packaged as one compressed file. It is assumed that these pages and resources are then made available via the local web server to the browser in the receiver. The interface between broadcast application and the receiver device allows the application to access resources of the receiver and provide data exchange between them. The signaling interface is responsible for collecting the service/application signaling and managing the updates to the service/application. Service/application signaling arrives over the broadcast delivery network, in video watermarks, or delivered through broadband servers (i.e., the Recovery Server and other internet server) bootstrapped by broadcast streams via OTA (Over-The-Air) or audio and/or video watermarks.</p><p id="p-0111" num="0108">Security Threats</p><p id="p-0112" num="0109">T.EAVESDROP&#x2014;Network Eavesdropping: A network eavesdropping scenario involves an attacker positioning himself on the network in order to monitor transmissions between the system and the intended destination of some potentially sensitive data. With respect to receivers, this includes monitoring the data exchanges: (1) between a Recovery Server and Watermark Client in the receiver; (2) between a Signaling Server and signaling interface in the receiver; and/or (3) between the broadcast application and the receiver. It should be noted that part of the header in this subjection (T.EAVESDROP) is written in a commonly used format in security analysis.</p><p id="p-0113" num="0110">By monitoring the data exchange in the above communications, an attacker (or its application) can collect usage information that can amount to privacy violation, can be used for determination of advertisement periods for automating ad skipping as described in later in this document, and for other unintended behaviors.</p><p id="p-0114" num="0111">Collusion Attack: In a collusion attack scenario, an attacker collects multiple versions of the content containing DASH periods resulted from a single public Xlink resolution in an MPD for a broadcast service from multiple receivers that may be located in different locations. A targeted ad period can be identified if a period has different source identifiers (identifying the different segments) in these versions. This attack may take place at either of the following communications: (1) between the broadcast application and external signaling server during Xlink resolving process; and/or (2) between the broadcast application runtime environment and the receiver. This attack would allow the attacker to program the recording schedule on a receiver to skip the ad periods at real-time.</p><p id="p-0115" num="0112">T.NETWORK Network Attack: In a network attack scenario, an attacker is positioned on a communications channel or elsewhere on the network infrastructure. Network attack is similar to network eavesdropping in that it includes an attacker positioning him/herself on the network. It differs from network eavesdropping in that it involves the attacker initiating communications with the target system, or modifying data between the target system and the data's legitimate destination. When the broadcast application runs on a separate device from the receiver (e.g., via a home network), network attacks can occur within network (e.g., home network). Instead of attacking the whole Internet, the attacker instead mounts his attacks on the networked devices.</p><p id="p-0116" num="0113">MITM (Man-In-The-Middle) Attack: MTIM is a type of Network Attack in which the attacker secretly relays and possibly alters the communication between a client and a server. Both the client and the server believe they are directly communicating with each other.</p><p id="p-0117" num="0114">With respect to ATSC 3.0 receiver, a MTIM attack scenario can take place as part of the following exemplary client-server communications: (1) sending malicious recovery data table (RDT) to the Watermark Client in the receiver or modifying the information en route to a recovery server; (2) sending malicious applications or signaling files to signaling interface or modifying the information en route to a Signaling Server; (3) other non-ATSC applications (e.g., generic Linux applications) in the receiver sending malicious signaling files or application updates to broadcast applications; and/or (4) applications running on other computers within the same home network sending malicious signaling files or application updates to broadcast applications.</p><p id="p-0118" num="0115">By delivering malicious signaling and/or applications (and their updates) to the ATSC 3.0 receiver, an attacker can completely hijack the receiver as the broadcast application has broad control on the screen of the receiver such as selection services and content presentation.</p><p id="p-0119" num="0116">DNS Poisoning: Domain Name System (DNS) Poisoning is a type of Network Attack that targets at the DNS infrastructure. In one DNS poisoning attack, data is introduced into a DNS resolver's cache by attackers, causing the name server to return an incorrect IP address, diverting traffic to the attacker's computer (or any other computer). In one example, the IP address DNS entries for a target website on a given DNS server is spoofed and replaced with the IP address of a server under attacker's control. In another example attack, the nameserver of the attacker's domain is redirected to the nameserver of the target domain, and then that nameserver is assigned an IP address specified by the attacker. In yet another example attack, the nameserver of another domain unrelated to the original request is redirected to an IP address specified by the attacker.</p><p id="p-0120" num="0117">Signaling Server DNS Poisoning: with respect to ATSC 3.0, a specific DNS Poisoning attack is to forge ATSC 3.0 bootstrap URIs including URLs for signaling server, electronic service guide (ESG) server, and Usage Reporting server. In ATSC 3.0, such bootstrap URIs can be delivered via OTA, broadband servers, or audio and/or video watermarks. For example, bootstrap URIs is delivered as URI Message in video watermark, bootstrap URIs is delivered in the svcInetUrl field of the service list table (SLT) table over OTA, and/or bootstrap URIs is delivered in the svcInetUrl field of the RDT through the VP1 Payload. SLT is a low-level signaling information which is used to build a basic broadcast service listing and provide bootstrap discovery of service signaling information.</p><p id="p-0121" num="0118">This attack is generally applicable to signaling delivery by Internet servers, and may result in resolving a server code or URL into an error (e.g., no resolution), an address of an unauthorized signaling server, or non-existing server address. It can at least disable the supplemental content provided by ATSC 3.0.</p><p id="p-0122" num="0119">T.SAMEORIGIN_VIOLATION: An origin is defined as a combination of URI scheme, hostname, and port number. The same-origin policy is an important concept in the web application security model. Under the policy, a web browser permits scripts contained in a first web page to access data in a second web page, but only if both web pages have the same origin. Violating the same-origin policy can be considered as a specialized type of network attack which involves web content violating access control policies enforced by a web browser to separate the content of different web domains. It is specifically identified as a threat to web browsers, since they implement the access control policies that are violated in these attacks.</p><p id="p-0123" num="0120">A possible solution is to add a URL for the broadcast application's starting page (e.g., index.html) into Service Layer Signaling (SLS) table. The scheme, hostname and the port number of the URL becomes the origin of the broadcast application.</p><p id="p-0124" num="0121">Note that the URL of the signaling server where the receiver can obtain such SLS is the signaling server URL, one of three bootstrap URIs in the bootstrap signaling carried in broadcast stream OTA (as SLT), in URI Message in video watermark, or in RDT enabled by VP1 Payload. This is the assumption used to evaluate the threats of the same origin violation.</p><p id="p-0125" num="0122">Session Hijacking: This is another example of a same-origin violation, in which insufficient protection of session tokens can lead to session hijacking, where a token is captured and reused in order to gain the privileges of the user who initiated the session.</p><p id="p-0126" num="0123">XSS and CSRF: These are other examples of a same-origin violation. Cross-site scripting (XSS) and Cross-Site Request Forgery (CSRF) attacks are methods used to compromise user credentials (usually by stealing the user's session token) to a web site. These attacks are more likely a result of server security problems, but some browsers incorporate technologies that try to detect the attacks.</p><p id="p-0127" num="0124">With respect to ATSC 3.0, a specific CSRF attack is the forgery of ATSC 3.0 bootstrap URIs. In ATSC 3.0 such bootstrap URIs can be delivered via OTA, broadband servers, or audio and/or video watermarks. This attack may be applicable to any of these bootstrap signaling delivery methods as further described below.</p><p id="p-0128" num="0125">Re-broadcast Attack&#x2014;Forged Origin over OTA: This is an example of an XSS or CSRF attack. For bootstrap URIs delivered via OTA, an attacker manipulates the origins of</p><p id="p-0129" num="0126">HTML documents in broadcast streams and re-broadcasts the manipulated streams. This attack is described in a paper published by researchers at Columbia University (May 2014) (www.cs.columbia.edu/&#x2dc;angelos/Papers/2014/redbutton-usenix-sec14.pdf).</p><p id="p-0130" num="0127">When an attacker changes the origin of HTML documents in broadcast streams to other sites such as social media or bank sites, a web browser would allow the broadcast application to access the cookies of the social media or bank sites as it considers the broadcast application has the origins of these sites.</p><p id="p-0131" num="0128">A remedy has been proposed by HbbTV and considered by ATSC 3.0: the origins of HTML documents delivered in broadcast streams are defined as a &#x201c;dvb:&#x201d; or &#x201c;astc3:&#x201d; URL constructed from information in the broadcast signal, instead of using an &#x201c;http&#x201d; or &#x201c;https&#x201d; URL as the origin. However, this remedy would not prevent a broadcast application from accessing the another broadcast application's local storage such as cookies with a forged origin starting with &#x201c;dvb:&#x201d; or &#x201c;atsc3:&#x201d;.</p><p id="p-0132" num="0129">T.WATERMARK Watermark Attack: Watermark attacks involve an attacker embedding or modifying ATSC 3.0 audio and/or video watermarks without authorization. When analyzing the security threats related to watermarks, it is assumed that network eavesdropping and network attacks described earlier have been appropriately eliminated or contained. Watermark attacks often involve an attacker pirating a content and distributing the content containing malicious audio and/or watermarks. The attacker may record the content received from legitimate distribution channel (e.g., OTA, cable, or OTT), embed malicious watermarks, and (1) distribute the content containing the malicious watermarks to the ATSC 3.0 receiver through a OTT receiver via HMDI; and/or (2) rebroadcast the content containing the malicious watermarks to a ATSC 3.0 receiver using unauthorized OTA transmitters.</p><p id="p-0133" num="0130">The attacker may also upload the content containing malicious watermarks to user generated content (UGC) and social media sites, or distribute such content as illegitimate subscription services (e.g., with proprietary apps or STB without ads).</p><p id="p-0134" num="0131">Audio and Video Watermark&#x2014;Copy Attack: In this attack scenario, an attacker embeds the watermarks carrying legitimate payloads in one content segment into another content segment by detecting the legitimate payloads from the first content and embedding them into the second content. These operations would allow an attacker to transfer the viewership credits from the owner of the first content segment to the owner of the second content segment.</p><p id="p-0135" num="0132">In this scenario, the supplemental content enabled by the legitimate watermark payloads is not likely to be related to the second content segment and may cause confusion to the consumers. An attacker can further set a display override field in in legitimate payloads to &#x201c;true&#x201d; to disable presentation of the supplement content. Such an attack is applicable to both ATSC 3.0 video and audio watermarks.</p><p id="p-0136" num="0133">VP1 Audio and Video Watermark&#x2014;DNS Flood: DNS flood is a type of Distributed Denial of Service (DDoS) attack in which the attacker targets one or more Domain Name System (DNS) servers with the goal to make these DNS servers unavailable to resolve legitimate recovery server addresses. In an attack scenario, an attacker embeds watermarks carrying malicious payloads with unregistered servers that would cause the receivers to frequently request for a resolution that does not exist. This attack turns all receivers that receive the content containing malicious payloads into botnets attempting to hamper resolution of resource records of one or more DNS servers. For example, an attacker may embed the VP1 Payloads in a content segment containing the following values: an unregistered server code and a query flag value change in every 1.5 interval of the content segment, and/or a different unregistered server code in every 1.5 interval of the content segment. This attack is applicable to VP1 audio and video watermark.</p><p id="p-0137" num="0134">VP1 Audio and Video Watermark&#x2014;Recovery Server DDoS: This attack would turn all receivers that receive the content containing malicious payloads into botnets with an attempt to make the recovery server unavailable. In an attack scenario, an attacker embeds the watermarks carrying malicious payloads with registered server codes that would cause the receivers to frequently query the legitimate recovery server. A registered server code is compliant with the ATSC specifications (e.g., correct payload format) and registered with a VP1 registrar. For example, an attacker may embed the VP1 Payloads in a content segment containing the following values: a registered server code that can be resolved to a recovery server address, and a query flag value change in every 1.5 interval of the content segment, and/or a discontinuous server code in every 1.5 interval of the content segment. This attack is applicable to VP1 audio and video watermark.</p><p id="p-0138" num="0135">VP1 Audio and Video&#x2014;False Display Override Flag: In an attack scenario, an attacker embeds new watermarks or modifies the existing audio or video watermarks in a content to carry a forged Display Override flag. This attack may allow an attacker to disable any supplemental content presented by broadcast application, including but limited to. targeted ads (as replacement to or overlay over primary program).</p><p id="p-0139" num="0136">Video Watermark&#x2014;DNS Flood: In an attack scenario, an attacker embeds new watermarks or modifies the existing watermarks in a content to carry malicious messages (e.g., BSID change every frame) that cause the receiver to perform frequent queries on non-existing server address (unsolvable by DNS). This is a similar to the DNS flood attack described earlier. It should be noted that the instant DNS Flood as related to video watermark differs from the previously described DNS attack. For example, the previous DDOS occurs 1) on DNS servers with unregistered VP1 Server code, or 2) on recovery server with forged VP1 payload (e.g., forged query flag or server code change that will cause frequent connection to recovery server). In the video watermark message case (except the case where the video watermark message is a VP1 Payload), most signaling information is directly carried in the video watermark message without the need to contact a broadband server. However, certain video watermark message change (e.g., BSID which uniquely identifies a service) may require a server (i.e. a signaling server that is different from the recovery server) connection to obtain additional service information.</p><p id="p-0140" num="0137">Video Watermark&#x2014;Signaling Server DDoS: This attack turns all receivers that receive the content containing malicious payloads into botnets with an attempt to make the signaling server unavailable. In an attack scenario, an attacker embeds the watermarks carrying malicious payloads containing different BSID and/or major_channel_no and minor_channel_no (which identify services) frequently (e.g., BSID values change in every video frame or every few frames). Each BSID change in the malicious payloads would trigger the receiver to query the legitimate signaling server (for service and application signaling).</p><p id="p-0141" num="0138">This attack is applicable to video watermark excluding VP1 Message. Various server-based countermeasures mitigating DDoS attacks have been extensively researched and deployed. Our solution will focus on preventing such attack caused by watermarks.</p><p id="p-0142" num="0139">Video Watermark&#x2014;Forgery of content id message( ): In an attack scenario, an attacker embeds the watermarks or modifies the existing watermarks in a content to carry forged content IDs (CIDs). This attack would allow an attacker to claim the viewership credits from the content containing the forged CIDs. The attacker may also change the BSID and major_channel_no and minor_channel_no values to be consistent with the forged CIDs. This attack is only applicable to video watermarks excluding VP1 Message.</p><p id="p-0143" num="0140">Video Watermark&#x2014;Forgery of dynamic event message( ): This attack would allow an attacker to send forged dynamic events to a legitimate broadcast application to perform undesired actions (e.g., disabling targeted ad replacement). In an attack scenario, an attacker embeds the watermarks or modifies the existing watermarks in a content to carry forged Dynamic Events. Dynamic events are sent to broadcast application in a proprietary format. However, such format can be easily unveiled by examining the broadcast application written in JavaScript. This attack is only applicable to video watermarks excluding VP1 Message.</p><p id="p-0144" num="0141">Video Watermark&#x2014;False emergency alert message( ): In an attack scenario, an attacker embeds the watermarks or modifies the existing watermarks in a content to carry false emergency alerts (e.g., the forged CAP_message_url for false CAP message that is likely presented by the receiver or a legitimate broadcast application). This attack would allow an attacker to issue false emergency alerts causing large-scale safety and security issues. This attack is only applicable to video watermarks excluding VP1 Message.</p><p id="p-0145" num="0142">Video Watermarks&#x2014;False display override message( ): In an attack scenario, an attacker embeds the watermarks or modifies the existing watermarks in a content to carry forged display_override_message( ) in video watermark. This attack may allow an attacker to disable any supplement content presented by broadcast application, including but limited to targeted ads (as replacement to or overlay over primary program).</p><p id="p-0146" num="0143">It should be noted that the threats or attacks described in this document are not mutually exclusive. They may be combined to create new attacks. For example, an attack can transfer signaling data recovered via audio watermarks to video watermarks by performing the following steps: (1) detect audio watermarks from a content and obtain the signaling data from a recovery server; (2) remove the audio watermark, and (3) modify the signaling data retrieved from the recovery server and insert the modified signaling data into video watermarks; or insert the same signaling data retrieved from the recovery server into a different content.</p><p id="p-0147" num="0144">Security Solutions</p><p id="p-0148" num="0145">In this section, we will focus on security solutions for threats introduced by watermarks. All security solutions for watermark threats rely on trust anchors provided by either TLS or code signing using public key infrastructure.</p><p id="p-0149" num="0146">TLS and Code Signing: To address the network eavesdropping and network attack threats described earlier, concerning signaling transmission between the TOE and remote network entities, the conformant TOE will use a trusted communication path. The TOE will be capable of communicating using one (or more) of these standard protocols: trusted ATSC 3.0 over-the-air transmission or TLS 1.3.</p><p id="p-0150" num="0147">The ATSC Security and Service Protection Standard for ATSC 2.0 specify TLS and key and certificate management. The signaling transmitted over-the-air can be secured using Code-Signing specified in the same standard. Additional security techniques and policy related to broadcast application security such as same origin and mixed content may be needed in ATSC 3.0.</p><p id="p-0151" num="0148">TLS: When the browser in a receiver loads a resource from an Internet server (e.g., example.com) over TLS, the browser is able to make three assertions to address the network eavesdropping and network attack threats.</p><p id="p-0152" num="0149">(1) Authentication: the receiver is communicating with a server that is allowed to claim to be example.com, and not one of the many, many servers through which the request has hopped. The connection can be authenticated.</p><p id="p-0153" num="0150">(2) Confidentiality: the receiver's communications with example.com cannot be trivially eavesdropped upon by middlemen, because the requests it makes and the responses it receives are encrypted.</p><p id="p-0154" num="0151">(3) Integrity: the receiver's communications with example.com cannot be trivially modified by middlemen, the encryption and authentication provide a guarantee of data integrity.</p><p id="p-0155" num="0152">TLS is applied to all of the following communications: (1) between a Recovery</p><p id="p-0156" num="0153">Server and Watermark Client in the receiver; (2) between a Signaling Server and Service/Application Signaling Manager in the receiver; and (3) between the broadcast application runtime environment and the local web server in the receiver.</p><p id="p-0157" num="0154">Code Signing: Code signing provides another layer of security on top of TLS in case that the signed data is delivered via TLS, or authentication and integrity for signed data delivered over unsecure channel. In this document, code signing can be used to provide authentication and integration for: Certain types of wm_message( ) that need to be carried directly in video watermarks; the Web origin of broadcast application delivered via OTA; and the broadcast application delivered via OTA.</p><p id="p-0158" num="0155">Limited Attempts and Whitelist: To address DNS flood attack, the receiver can make a limited number of query attempts when encountering a large number of sequential unresolvable Server Codes or URIs. Another approach is to deliver a whitelist of Server Codes. Both of the solutions are described in further detail below.</p><p id="p-0159" num="0156">Server Code Whitelist: In systems that implement the whitelist approach, the receiver queries a Receiver Server only if the detected VP1 Payload is in a whitelist (or not in a blacklist) of Server Codes stored in the receiver. The whitelist (or blacklist) is delivered to the receiver in OCSP object during previous TLS connection with a recovery server. This solution requires both TLS and recovery server support OCSP carrying a whitelist (or blacklist) for Server Code. Note that OCSP is required by ATSC 2.0 when TLS is used.</p><p id="p-0160" num="0157">Limited Attempts: In systems that implement the limited attempt approach, when a large number of VP1 Payloads contain Server Codes that are unsolvable by DNS, the receiver can make recovery server queries using only selective Server Codes to mitigate the threat. The same approach is applicable to the attack when a large number of unresolvable URIs (for signaling server, usage reporting server, or ESG server) carried in video watermark. DNS flood attack is mainly handled by DNS servers, which is out of scope of the document.</p><p id="p-0161" num="0158">VP1 Payload Verification Using RDT: In systems that implement this approach, to address the threats resulting from introducing malicious VP1 Payloads, the receiver verifies any VP1 Payload reported by watermark detector using the RDT retrieved from a trusted recovery server.</p><p id="p-0162" num="0159">Verification of Query Flag using the VP1 Payload in RDT: In systems that implement this approach, if the VP1 Payload in the RDT is not identical to the detected VP1 Payload causing the retrieval of the RDT, the receiver can discard the VP1 Payload, and subsequent N (e.g., N=10) VP1 Payloads if these VP1 Payloads are discontinuous or contain the query flag. If the RDT is not available (e.g., due to no Internet connection), the receiver terminates the application associated with the current service. This solution requires RDT to contain the query flag value in addition to server code and interval code.</p><p id="p-0163" num="0160">Verification of Discontinuous VP1 Payload Using RDT: In systems that implement this approach, if the VP1 Payload in the RDT is not identical to the detected VP1 Payload causing the retrieval of the RDT, the receiver discards the VP1 Payload and subsequent N (e.g., N=10) VP1 Payload if they are discontinuous. If the RDT is not available (e.g., due to no Internet connection), the receiver terminates the application associated with the current service.</p><p id="p-0164" num="0161">Deferred Verification of Display Override Flag Using VP1 Payload in RDT: In systems that implement this approach, if a Display Override flag in a VP1 Payload is detected, the receiver performs the required actions without delay. Additionally, it retrieves a RDT using the detected VP1 Payload, and compares it with the VP1 Payload in the RDT. If they are not identical, the receiver may reverse the actions caused by the Display Override flag, and can discard the subsequent Display Override flags for a period of time or the entire Watermark Segment. If RDT is not available (e.g., no Internet connection), the Display Override flag is considered valid without further verification. This solution requires RDT to contain Display Override flag in addition to server code and interval code.</p><p id="p-0165" num="0162">Cross-Verification of Video Watermark Messages with RDT: To address the threats resulting from malicious wm_message( ) directly carried in video watermark in a content, the receiver can verify the wm_message( ) using the RDT recovered through audio watermark in the same content. In this case, wm_message( ) and RDT contain the same signaling data that is synchronized with the content.</p><p id="p-0166" num="0163">The same signaling needs to be recovered using either audio or video watermarks because in some use cases only audio watermark or video watermarks can be detected on the receiver. For example, when the audio is muted on set-top box by the user, the receiver will not access to audio signal and can only rely on video watermarks to recover the signaling. If the user uses a set-top box function to display a full-screen ESG on the receiver, the video watermarks will become undetectable and the receiver can only reply the audio watermark to recover the signaling data.</p><p id="p-0167" num="0164">The solution requires that the same signaling is carried in the video watermarks and in RDT retrieved using the audio watermarks. The presentation times of the signaling data in wm_message( ) and RDT are identical from the same clock. In the case where wm_message( ) is present but VP1 Payload in audio watermarks is absent for a predefined period of time (e.g., 3-5 seconds), the receiver can determine that a forgery of wm_message( ) has been detected. The following subsections titled Direct Comparison and Validation with Hash Code in RDT provide further details.</p><p id="p-0168" num="0165">Direct Comparison: When a receiver detects the wm_message( ) from the video watermark and retrieves a RDT using the audio watermark, it performs the following cross verifications:</p><p id="p-0169" num="0166">(1) If a content id message( ) is detected, when content ID present is true, compare content id message( ) with contentID object in RDT. The verification fails if a content ID in content_id_message( ) at the time t is different from the content ID in the RDT that is valid from t<b>1</b> to t<b>2</b> (specified as the validFrom and validUntil values of the contentID object) and t<b>1</b>&#x2264;t&#x2264;t<b>2</b>.</p><p id="p-0170" num="0167">(2) If a content_id_message( ) is detected, when channel_ID_present is true, compare content_id_message( ) with sourceID object in RDT. Note that the county field of the sourceID is not used in comparison as it is absent in content_id_message( ).</p><p id="p-0171" num="0168">(3) If a uri_message( ) is detected, compare uir_message( ) with svcInetUrl object in the RDT. Note that uri_strlen field of uri_message( ) is not used in comparison as it is absent in RDT.</p><p id="p-0172" num="0169">(4) If a dynamic_event_message( ) is detected, compare dynamic_event_message( ) with the dynamic events retrieved from a recovery server using VP1 Payload.</p><p id="p-0173" num="0170">If any of the comparison fails, a forgery of wm_message( ) is detected. As a result, the receiver may decide to discard the wm_message( ) for certain period of time or the entire watermark segment.</p><p id="p-0174" num="0171">Validation with Hash Code in RDT: Instead of direct comparison of signaling data in wm_message( ) and RDT, as described above, an alternate solution is to store a hash code of the wm_message( ) in the RDT. The following steps are performed to create a hash code and place it into a RDT:</p><p id="p-0175" num="0172">(1) Determine whether a wm_message( ) needs to be verified using its hash code; for security reason, this determination is preferably be made randomly.</p><p id="p-0176" num="0173">(2) Once one or more wm_message( ) in a VP1 Interval are selected for verification,</p><p id="p-0177" num="0174">(a) calculate a hash code (e.g., 160 bits of SHA-1) for each of the selected wm_message( );</p><p id="p-0178" num="0175">(b) associate each hash code with the presentation time (T) of the last video frame carrying the wm_message( ); and</p><p id="p-0179" num="0176">(c) add one or more hash codes with associated presentation times into the immediately successive RDT.</p><p id="p-0180" num="0177">For verification, a receiver buffers each wm_message( ) and the presentation time of the last video frame from which the wm_message( ) is detected during the past 1.5 seconds. This buffer is reset once a discontinuous VP1 Payload or a query flag is detected. When a RDT containing one or more hash codes with associated presentation times is obtained, the receiver performs the following steps for verification:</p><p id="p-0181" num="0178">(1) identify the wm_message( ) that needs to be verified by matching the presentation times of the wm_message( ) in the buffer with the presentation times associated with the hash codes in the RDT; and</p><p id="p-0182" num="0179">(2) for each wm_message( ) with a matched presentation time:</p><p id="p-0183" num="0180">(a) calculate the hash code from the wm_message( ) in the same way as it was calculated prior to being placed in the RDT.</p><p id="p-0184" num="0181">(b) compare the hash code of the wm_message( ) with the corresponding hash code in the RDT.</p><p id="p-0185" num="0182">If any one of the comparison fails, a forgery of wm_message( ) is detected. The receiver may discard the video watermark for a period of time or the entire watermark segment.</p><p id="p-0186" num="0183">This solution requires: VP1 Payload in audio and/or video components of the content; and a hash code and associated presentation time for each wm_message( ) to be verified to be added to the RDT as specified in ATSC 3.0. The proposed changes to the RDT are described later in this document.</p><p id="p-0187" num="0184">Digitally Signed Video Watermark Messages: wm_message( ) can be digitally signed and the digital signature can be carried in video watermark for integrity and authentication verification by receivers. In particular, three types of wm_message( ) (&#x201c;signed messages&#x201d;) may need to be carried directly in video watermarks:</p><p id="p-0188" num="0185">(1) For emergency_alerts_message( ) hat carries the emergency alert information and display_override_message( ) that may carry the burned-in video emergency alert, an important requirement is to deliver them to the receiver even when the Internet is not available.</p><p id="p-0189" num="0186">(2) Compared to the RDT approach, carrying uri_message( ) directly in video watermark may reduce the latency. Signing this type of message can mitigate the risk for attacker to provide forged URLs (e.g., the URL for receivers to send usage reporting data).</p><p id="p-0190" num="0187">A digital signature is carried immediately following the message in the video watermark as described below. The digital signature is produced in the following steps:</p><p id="p-0191" num="0188">(1) Calculate a 160-bit SHA-1 hash value from wm_message_block( ) containing the self-verified message, and truncate the hash value to a 64-bit hash code by discarding the most significant bits;</p><p id="p-0192" num="0189">(2) Encrypt the 64-bit hash code using the private key of one of the code signing certificates that belong to the current service. The code signing certificates are managed in accordance the prescribed protocols and are available to the receiver. The encrypted hash code becomes a signature.</p><p id="p-0193" num="0190">(3) If the message is carried as multiple fragments in video watermark, a second 64-bit hash code is created from the entire message following the above steps 1) and 2). The encrypted second hash code becomes a message_signature.</p><p id="p-0194" num="0191">Table 5.2 of the ATSC 3.0 Candidate Standard is revised below to replace CRC_32 and message_CRC_32 fields with the signature and message_signature fields, respectively, for the wm_message( ) that requires digital signature as shown below. The revisions to the table are shown by the underlined text.</p><p id="p-0195" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5.2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Revised - Bit Stream Syntax for the Watermark Message Block</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="154pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="35pt" align="left"/><tbody valign="top"><row><entry/><entry>No. of</entry><entry/></row><row><entry>Syntax</entry><entry>Bits</entry><entry>Format</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>wm_message_block( ) {</entry><entry/><entry/></row><row><entry>&#x2003;wm_message_id</entry><entry>8</entry><entry>uimsbf</entry></row><row><entry>&#x2003;wm_message_block_length</entry><entry>8</entry><entry>uimsbf</entry></row><row><entry>&#x2003;wm_message_version</entry><entry>4</entry><entry>uimsbf</entry></row><row><entry>&#x2003;fragment_number</entry><entry>2</entry><entry>uimsbf</entry></row><row><entry>&#x2003;last_fragment</entry><entry>2</entry><entry>uimsbf</entry></row><row><entry>&#x2003;wm_message_bytes( )</entry><entry>var</entry></row><row><entry>&#x2003;if ((fragment_number == last_fragment) &#x26;&#x26;</entry></row><row><entry>&#x2003;(fragment_number != 0)) {</entry></row><row><entry>&#x2003;&#x2003;<u style="single">if&#x2009;&#x3c;messag&#x2009;message&#x2009;id&#x2009;identifies&#x2009;a</u></entry><entry><u style="single">64</u>&#x2002;</entry><entry><u style="single">bslbf</u></entry></row><row><entry>&#x2003;&#x2003;<u style="single">message&#x2009;type&#x2009;requiring&#x2009;code&#x2009;signing&#x3e;</u></entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;<u style="single">message&#x2009;signature</u></entry></row><row><entry>&#x2003;&#x2003;&#x2003;<u style="single">else</u> message_CRC_32</entry><entry>32&#x2002;</entry><entry>uimsbf</entry></row><row><entry>&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;<u style="single">if&#x2009;&#x3c;messag&#x2009;message&#x2009;id&#x2009;identifies&#x2009;a</u></entry><entry><u style="single">64</u>&#x2002;</entry><entry><u style="single">bslbf</u></entry></row><row><entry>&#x2003;&#x2003;<u style="single">message&#x2009;type&#x2009;requiring&#x2009;code&#x2009;signing&#x3e;</u></entry></row><row><entry>&#x2003;&#x2003;&#x2003;<u style="single">signature</u></entry></row><row><entry>&#x2003;&#x2003;<u style="single">else</u> CRC_32</entry><entry>32&#x2002;</entry><entry>uimsbf</entry></row><row><entry>}</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0196" num="0192">When the receiver detects a single fragment message with wm_message_id indicating digital signature is required, it performs the following steps for validation of self-verified messages:</p><p id="p-0197" num="0193">(1) Calculate the 64-bit hash code from the detected wm_message_block( ) in the same way as it was calculated prior to embedding in the video watermark.</p><p id="p-0198" num="0194">(2) Locate the code signing certificates for the current service (which may be identified using BSID and other service identifiers); an interface between watermark client and receiver may need to be defined to allow the watermark client to either call signature verification function or access to the code signing certificates.</p><p id="p-0199" num="0195">(3) Decrypt the detected signature using the public key in the code signing certificate.</p><p id="p-0200" num="0196">(4) Compare the decrypted signature with the 64-bit hash code. If they are identical, the message is validated.</p><p id="p-0201" num="0197">(5) If more than one code signing certificates associated with the current service are available, repeat steps 2)-4) until the validation is successful or all code signing certificates have been applied.</p><p id="p-0202" num="0198">If the validation fails, the receiver shall discard the wm_message( ). This solution requires the changes to Table 5.2 as highlighted above.</p><p id="p-0203" num="0199">Web Cryptography API: In addition to the solutions described above, WebCrypto</p><p id="p-0204" num="0200">API can be used to address the attack against dynamic_event_message( ) carried in video watermark. WebCrypto API describes a JavaScript API for performing basic cryptographic operations in web applications, such as hashing, signature generation and verification, and encryption and decryption. Additionally, it describes an API for web applications to generate and/or manage the keying material necessary to perform these operations. Broadcasters may wish to encrypt certain fields of dynamic_event_message( ): The WebCrypto API allows a broadcast application the decrypt such encrypted fields in the dynamic_event_message( ): The receiver treats dynamic_event_message( ) as opaque objects and pass them to the broadcast application.</p><p id="p-0205" num="0201">Association of Signaling Data with Content: To address the copy attack described earlier in this document, the receiver is configured to not only verify the signaling data carried in watermarks but also to determine that the content containing the signaling data is the same content in which the signaling data was originally embedded even after the content has been processed. Digital fingerprinting is commonly used to identify the content even after the content has been processed. The sections that follow describe a content identification methodology and system that uses video fingerprints. However, the described techniques are also applicable to audio fingerprints.</p><p id="p-0206" num="0202">In a content redistribution scenario, the content received by the receiver may have been significantly modified by an upstream device (e.g., STB) through partial or full screen overlays (e.g., EPG). Fortunately, most such modifications can be detected by the receiver. If the receiver identifies a significant modification to the audio or video components, it disables the verification based on audio or video fingerprints, respectively.</p><p id="p-0207" num="0203">Content Hash Verification: Let's assume a content hash generation function h=H(c) and a binary hash matching function M(h,c) which returns 1 for M(H(c),c&#x2032;) when c&#x2032; is a broadcast version of c and 0 for M(H(c),d), when c and d are different content with low probability of type 1 and 2 errors. In statistical hypothesis testing, a type I error is the incorrect rejection of a true null hypothesis (a &#x201c;false positive&#x201d;), while a type II error is incorrectly retaining a false null hypothesis (a &#x201c;false negative&#x201d;). More simply stated, a type I error is detecting an effect that is not present, while a type II error is the failure to detect an effect that is present.</p><p id="p-0208" num="0204">If a reference hash H(c) of the payload interval of the broadcast content c is included in the recovery data table for the watermark in that payload interval, then the receiver can use M(H(c),c&#x2032;) where c&#x2032; is the received content from which the payload is detected to validate that no copy attack has been performed. As described earlier, a copy attack is where an attacker places a watermark payload which is intended to be associated with a content into a different content. Other known mechanisms for securing the recovery data table such as DNS registrar and recovery data table signing are not effective against the copy attack.</p><p id="p-0209" num="0205">The above described hash verification technique has high applicability to securing the VP1 system, which is vulnerable to the copy attack. This disclosed content hash verification also differs from typical fingerprinting techniques in that it is not necessary to efficiently search for a matching hash from a large database of candidates; only a single hash match must be considered. It also differs in that the reference hash is transmitted to the device from the server rather than the candidate hash being transmitted from the device to the server.</p><p id="p-0210" num="0206">Requirements for Video Fingerprint: A fingerprint technique to address the copy attack needs to meet, or can benefit from, the requirements below.</p><p id="p-0211" num="0207">(1) Fingerprint extraction must introduce no or negligible latency in video watermark embedding.</p><p id="p-0212" num="0208">(2) Fingerprint extraction must require no more computation resources including CPU and memory than the video watermark embedding does.</p><p id="p-0213" num="0209">(3) The fingerprint should be video frame based, i.e., a fingerprint is generated from a single video frame.</p><p id="p-0214" num="0210">(4) The size of a fingerprint should be small, ideally less than 64 bits.</p><p id="p-0215" num="0211">(5) The fingerprints must be invariant to content processing such as frame rate change, compression and resolution change, after which the video watermark survives.</p><p id="p-0216" num="0212">(6) The fingerprint match may have a reasonable false positive rate (e.g., 1%) but must have a significantly low false negative rate (e.g., 10<sup>&#x2212;6</sup>).</p><p id="p-0217" num="0213">The disclosed solution requires a standardized fingerprint technology including algorithms for fingerprint extraction and match, and fingerprint data format. There are two trusted ways to make the pre-generated fingerprints available the receiver: including them in an RDT or carrying them in the video watermark using code signing.</p><p id="p-0218" num="0214">A Video fingerprint Technique: A video fingerprint technique is designed for the purpose of content verification. However, other fingerprint techniques such as the audio and video fingerprint standard specified by SMPTE for lib synchronization can be also used.</p><p id="p-0219" num="0215">Fingerprint Data Format: A fingerprint of a video frame includes one or more vectors, and each vector includes of the following fields: (1) w-bit window size that defines up to 2w sizes of rectangular windows of the video frame from the center; and (2) for each window size, an r-bit region relationship defines up to 2r relationships between the luminance values in 4 regions with equal size of the window. The luminance value in a region is calculated by summing the luminance values of all pixels in the region.</p><p id="p-0220" num="0216"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an exemplary fingerprint configuration with w=2 and r=4. Assume W and H are the width and height of the video frame. Four windows W<b>1</b>-W<b>4</b> are defined and width and height of each window is defined as W/Si and H/Si, respectively. Si (1&#x2264;i&#x2264;4) is a predefined constant ratio with values of 8,16,32,64 for W<b>1</b>, W<b>2</b>, W<b>3</b>, and W<b>4</b>, respectively. Twelve (12) relationships are defined in Table 1 where Luma(Ri) is the total luminance value of the region Ri (1&#x2264;i&#x2264;4) in a window, and T is a predefined threshold value with the default value 5%. The threshold value is defined based on the requirement for robustness of the fingerprint.</p><p id="p-0221" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Definition of relationship between</entry></row><row><entry>the luminance values in 4 regions</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="56pt" align="center"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="56pt" align="center"/><colspec colname="4" colwidth="56pt" align="left"/><tbody valign="top"><row><entry>Relationship</entry><entry/><entry>Relationship</entry><entry/></row><row><entry>Value</entry><entry>Relationship</entry><entry>Value</entry><entry>Relationship</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>0x00</entry><entry>Luma(R1) &#x3e;</entry><entry>0x06</entry><entry>Luma(R2) &#x3e;</entry></row><row><entry/><entry>Luma(R2) by T</entry><entry/><entry>Luma(R3) by T</entry></row><row><entry>0x01</entry><entry>Luma(R1) &#x3c;</entry><entry>0x07</entry><entry>Luma(R2) &#x3c;</entry></row><row><entry/><entry>Luma(R2) by T</entry><entry/><entry>Luma(R3) by T</entry></row><row><entry>0x02</entry><entry>Luma(R3) &#x3e;</entry><entry>0x08</entry><entry>Luma(R1) &#x3e;</entry></row><row><entry/><entry>Luma(R4) by T</entry><entry/><entry>Luma(R3) by T</entry></row><row><entry>0x03</entry><entry>Luma(R3) &#x3c;</entry><entry>0x09</entry><entry>Luma(R1) &#x3c;</entry></row><row><entry/><entry>Luma(R4) by T</entry><entry/><entry>Luma(R3) by T</entry></row><row><entry>0x04</entry><entry>Luma(R1) &#x3e;</entry><entry>0x0A</entry><entry>Luma(R2) &#x3e;</entry></row><row><entry/><entry>Luma(R4) by T</entry><entry/><entry>Luma(R4) by T</entry></row><row><entry>0x05</entry><entry>Luma(R1) &#x3c;</entry><entry>0x0B</entry><entry>Luma(R2) &#x3c;</entry></row><row><entry/><entry>Luma(R4) by T</entry><entry/><entry>Luma(R4) by T</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0222" num="0217">Fingerprint pre-generation: The following example facilitates understanding of fingerprint pre-generation.</p><p id="p-0223" num="0218">Let's assume N is the maximum number of vectors allowed for a video frame, n is the current number of vectors in the video frame and let's set the initial value of n to 0. For the current window, start from the window with the smallest size to the window with the largest window size, if m relationships in Table 3 are satisfied, set n to n+m. If n is equal or greater than N, store the first N vectors as the fingerprint data of the video frame. Otherwise, set the current window to the window with a larger size until all windows are used.</p><p id="p-0224" num="0219">As an example representing a fingerprint from a video frame as a result of the fingerprint extraction function, a vector of the fingerprint is stored as an ASCII character with window size in the fifth and sixth bits, and relationship value in the first to 4th bits, from the least significant bit. Note that it is possible that no fingerprint can be generated for a video frame.</p><p id="p-0225" num="0220">Fingerprint extraction and match: At content verification phase, the fingerprint is extracted from a video frame in the same way as the fingerprint pre-generation step described above except that the value of T defined in Table 3 is reduced depending on the requirement for the false positive rate. The smaller T value is, the higher the false positive rate, i.e. a different test content is more likely confirmed falsely as the original content. The default value of T at verification phase is 0.5%.</p><p id="p-0226" num="0221">Assume that the fingerprint extracted for matching from a video frame is f&#x221d;, and the pre-generated fingerprints from n consecutive video frames in a Message Block are f<b>1</b>, f<b>2</b>, . . . , fn (&#x201c;Message Block fingerprint list&#x201d;). If f matches with one of the fingerprints in the list f<b>1</b>, f<b>2</b>, . . . fn, content verification is confirmed. Two fingerprints f&#x2032; and fi (1&#x2264;i&#x2264;n) are matched if both window size and relationship values of every vector in fi are identical to the window size and relationship values of at least one vector in f&#x2032;.</p><p id="p-0227" num="0222">Content Verification with Video Fingerprint in RDT: This is an extension of the approach described earlier in this document. A fingerprint is calculated for each of the video frames in a Message Block. The fingerprints in a Message Block are formatted as a list of fingerprints (&#x201c;Message Block fingerprint list&#x201d;), and stored as digest in a RDT (further details are provided in the section that follows titled &#x201c;Exemplary RDT Extension&#x201d;). An example of Message Block fingerprint list is shown in <figref idref="DRAWINGS">FIG. <b>15</b></figref>.</p><p id="p-0228" num="0223">When the video watermark detector detects a discontinuous VP1 Payload that may indicate a service change or a query flag in the detected VP1 payload, it continues to: (1) perform the fingerprint extraction from the video frame where such VP1 Payload is detected; and (2) include the extracted fingerprint in the detection event reported to the watermark client.</p><p id="p-0229" num="0224">Once the watermark client receives a detection event that causes a recovery server query and contains a fingerprint, it performs the following steps for verification: (1) obtain the Message Block fingerprint list from digest object of the RDT retrieved from a recovery server; and (2) compare a fingerprint in the Message Block fingerprint list with the extracted fingerprint repeatedly until a match is found or all fingerprints in the Message Block fingerprint list have been used for comparison. If a match is found, the watermark client determines that the content from which the fingerprint extracted by the watermark detector is the same content from which the Message Block fingerprint list were extracted.</p><p id="p-0230" num="0225">In addition to the requirement to embed VP1 payloads in audio and/or video components of the content, this extension requires: (1) addition of a field in the RDT for Message Block fingerprint list as a digest associated with the VP1 Payload; and (2) including a fingerprint extraction function in the video watermark detector, and a fingerprint matching function in watermark client.</p><p id="p-0231" num="0226">The disclosed countermeasure relies on the availability of RDT that is only retrieved when service change occurs or a query flag is detected. An attacker can attempt to defeat the countermeasure by making RDT unavailable. However, if signaling data including the content identifier is not available to the receiver, it will not be able to identify the content being viewed and report the usage that would benefit for the attacker.</p><p id="p-0232" num="0227">Verification using Video Fingerprint Carried in Video Watermark: This is an extension of the approach described earlier in this document.</p><p id="p-0233" num="0228">fingerprint message( ) is defined as a new type of wm_message( ) to carry a fingerprint calculated from a video frame. When wm_message( ) is present, it is mandatory to carry a fingerprint message( ) periodically (e.g., at one fingerprint( ) in every 5 minutes a watermark segment). Like emergency_alerts_message( ) and display_override_message( ) fingerprint message( ) requires code signing as described earlier.</p><p id="p-0234" num="0229">When the video watermark detector detects a fingerprint_message( ), it performs fingerprint extraction from the video frame where such a fingerprint_message( ) is detected. The video watermark detector reports both fingerprint_message( ) and extracted fingerprint to the watermark client. When watermark client receives a fingerprint_message( ) it first verifies the digital signature for integrity and authentication of the a fingerprint_message( ) as described earlier in this document. If the verification is successful, the watermark client then compares the decrypted fingerprint_message( ) with the extracted fingerprint. If a match is found, the watermark client determines that the content from which the fingerprint extracted by the watermark detector is the same content from which the fingerprint_message( ) was calculated.</p><p id="p-0235" num="0230">Exemplary RDT Extension: Revised Table 5.24 below illustrates exemplary extensions to the data recovery table (RDT), and specifically to Table 5.24 that is specified in the ATSC 3.0 Candidate Standard. The extensions to the table are shown by the underlined text.</p><p id="p-0236" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="287pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5.24</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Revised - Recovery File Format Logical Structure</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="84pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="140pt" align="left"/><tbody valign="top"><row><entry>Element or Attribute Name</entry><entry>Use</entry><entry>Data Type</entry><entry>Format</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>RecoveryDataTable</entry><entry>1</entry><entry/><entry>Root element</entry></row><row><entry>&#x2002;thisComponent</entry><entry>1</entry><entry/><entry>The media component from which the VP1</entry></row><row><entry/><entry/><entry/><entry>Payload carrying serverCode and</entry></row><row><entry/><entry/><entry/><entry>intervalCode was detected.</entry></row><row><entry>&#x2003;serverCode</entry><entry>0 . . . 1</entry><entry>integer</entry><entry>The serverCode value from the query request to</entry></row><row><entry/><entry/><entry/><entry>which the recovery data table was provided as a</entry></row><row><entry/><entry/><entry/><entry>response.</entry></row><row><entry>&#x2003;intervalCode</entry><entry>0 . . . 1</entry><entry>integer</entry><entry>The intervalCode value from the query request</entry></row><row><entry/><entry/><entry/><entry>to which the recovery data table was provided</entry></row><row><entry/><entry/><entry/><entry>as a response.</entry></row><row><entry>&#x2003;<u style="single">qeuryFlag</u></entry><entry><u style="single">0&#x2009;.&#x2009;.&#x2009;.&#x2009;1</u></entry><entry><u style="single">boolean</u></entry></row><row><entry>&#x2003;<u style="single">displayOverrideFlag</u></entry><entry><u style="single">0&#x2009;.&#x2009;.&#x2009;.&#x2009;1</u></entry><entry><u style="single">boolean</u></entry></row><row><entry>&#x2003;<u style="single">componentDescription</u></entry><entry>1</entry><entry>object</entry><entry>The description of this component, . . .</entry></row><row><entry>&#x2003;<u style="single">digest</u></entry><entry><u style="single">0&#x2009;.&#x2009;.&#x2009;.&#x2009;N</u></entry><entry><u style="single">object</u></entry><entry><u style="single">See&#x2009;Digest&#x2009;definition.</u></entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0237" num="0231">Table 5.24A (below), which can be incorporated as part of Table 5.24, provides specific components and format structure of the Digest component of Revised Table 5.24.</p><p id="p-0238" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="322pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5.24A</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Specifics of Digest Component</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="84pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="42pt" align="left"/><colspec colname="4" colwidth="168pt" align="left"/><tbody valign="top"><row><entry>Element or Attribute Name</entry><entry>Use</entry><entry>Data Type</entry><entry>Format</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>Digest</entry><entry>1</entry><entry/><entry>z</entry></row><row><entry>&#x2003;digestType</entry><entry>1</entry><entry>integer</entry><entry>The type of the digest for the component. Two values are</entry></row><row><entry/><entry/><entry/><entry>defined: 0x00 indicates cryptographic digest of a video</entry></row><row><entry/><entry/><entry/><entry>watermark message; 0x01 indicates content digest of the</entry></row><row><entry/><entry/><entry/><entry>component. Note that 1) when the value is 0x00, the</entry></row><row><entry/><entry/><entry/><entry>mediaType of the component shall be &#x201c;video&#x201d;; 2) when</entry></row><row><entry/><entry/><entry/><entry>the value is 0x01 and the mediaType of the component is</entry></row><row><entry/><entry/><entry/><entry>&#x201c;audio&#x201d;, the content digest is an audio fingerprint; 3)</entry></row><row><entry/><entry/><entry/><entry>when the value is 0x01 and the mediaType of the</entry></row><row><entry/><entry/><entry/><entry>component is &#x201c;video&#x201d;, the content digest is an video</entry></row><row><entry/><entry/><entry/><entry>fingerprint.</entry></row><row><entry>&#x2003;digestData</entry><entry>1</entry><entry>string</entry><entry>The digest data of an audio or video frame.</entry></row><row><entry>&#x2003;validFrom</entry><entry>0 . . . 1</entry><entry>string (date-</entry><entry>When Digest is valid from; if not specified, the digest is</entry></row><row><entry/><entry/><entry>time)</entry><entry>calculated from a single video frame.</entry></row><row><entry>&#x2003;validUntil</entry><entry>0 . . . 1</entry><entry>string(date-</entry><entry>Up to when Digest is valid until; if not specified, use the</entry></row><row><entry/><entry/><entry>time)</entry><entry>last video frame where the VP1 Payload is detected for</entry></row><row><entry/><entry/><entry/><entry>matching.</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0239" num="0232">Additional Comments Regarding Security Countermeasure: The security solutions discussed above rely on the following trust anchors: (1) the RDT from a recovery server is trusted as it is secured by TLS; and (2) the signed messages carried in video watermark can be verified for integrity and authentication.</p><p id="p-0240" num="0233">Table 4 summarizes the threats to ATSC signaling data and the potential solutions addressing these threats. Note that the solutions are not mutually exclusive and multiple solutions can be employed or combined to countermeasure the attacks. The proposed security solutions or countermeasures can be implemented in the watermark detector and/or watermark client without or with the inputs from the receiver. An example of the inputs from the receiver is the code signing certificates provided by the receiver for self-verification solution.</p><p id="p-0241" num="0234">In addition to countermeasure solutions, at least three types of data provided by the receivers to Internet servers can be used to identify and trace certain attacks: (1) IP address of the receiver, 2) requests for RDT, and 3) usage data. For example, if the content identifiers in usage report for a service reported from receivers do not match the content identifiers in actual playlist or collected by broadcast monitoring, a red flag is raised for further investigation</p><p id="p-0242" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="392pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Summary of Threats to ATSC 3.0 Signaling and Associated Countermeasures</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="217pt" align="center"/><colspec colname="2" colwidth="77pt" align="left"/><colspec colname="3" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>Threats</entry><entry>Causes</entry><entry>Solutions</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="217pt" align="left"/><colspec colname="2" colwidth="77pt" align="left"/><colspec colname="3" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>T.EAVESDROP Network Eavesdropping</entry><entry>Between signaling</entry><entry>TLS</entry></row><row><entry/><entry>server and receiver</entry></row><row><entry/><entry>Between runtime and</entry><entry>TLS</entry></row><row><entry/><entry>proxy server</entry></row><row><entry>T.NETWORK Network Attack</entry><entry>Between signaling</entry><entry>TLS</entry></row><row><entry/><entry>server and receiver</entry></row><row><entry/><entry>Between runtime and</entry><entry>TLS</entry></row><row><entry/><entry>proxy server</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="105pt" align="left"/><colspec colname="2" colwidth="112pt" align="left"/><colspec colname="3" colwidth="77pt" align="left"/><colspec colname="4" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>T.SAMEORIGIN_VIOLATION</entry><entry>XSS and CSRF (Cross-Site Request</entry><entry>Forged SLS delivered</entry><entry>Code Signing</entry></row><row><entry/><entry>Forgery) (forged origin)</entry><entry>via OTA</entry></row><row><entry>T.WATERMARK</entry><entry>Audio and Video Watermark:</entry><entry>Copy watermark</entry><entry>Association of Signaling Data</entry></row><row><entry>Watermark Attack</entry><entry>Copy Attack</entry><entry/><entry>with Content</entry></row><row><entry/><entry>VP1 Audio and Video</entry><entry>Unresolvable Server</entry><entry>Limited Attempts and</entry></row><row><entry/><entry>Watermark: DNS Flood</entry><entry>Code</entry><entry>Whitelist</entry></row><row><entry/><entry>VP1 Audio and Video</entry><entry>Malicious Query Flag</entry><entry>Verification of Query Flag</entry></row><row><entry/><entry>Watermark: Recovery Server</entry><entry/><entry>using the VP1 Payload in RDT</entry></row><row><entry/><entry>DDoS</entry><entry>Discontinuous VP1</entry><entry>Verification of Discontinuous</entry></row><row><entry/><entry/><entry>Payload</entry><entry>VP1 Payload Using RDT</entry></row><row><entry/><entry>VP1 Audio and Video: False</entry><entry>False Display Override</entry><entry>Deferred Verification of</entry></row><row><entry/><entry>Display Override Flag</entry><entry/><entry>Display Override Flag Using</entry></row><row><entry/><entry/><entry/><entry>VP1 Payload in RDT</entry></row><row><entry/><entry>Video Watermark: DNS Flood</entry><entry>Unsolvable URIs</entry><entry>Limited Attempts and</entry></row><row><entry/><entry/><entry/><entry>Whitelist</entry></row><row><entry/><entry>Video Watermark: Signaling</entry><entry>False BSID</entry><entry>Cross-Verification of Video</entry></row><row><entry/><entry>Server DDoS</entry><entry/><entry>Watermark Messages with</entry></row><row><entry/><entry/><entry/><entry>RDT</entry></row><row><entry/><entry>Video Watermark: Forgery of</entry><entry>Forged CIDs</entry><entry>Cross-Verification of Video</entry></row><row><entry/><entry>content_id_message( )</entry><entry/><entry>Watermark Messages with</entry></row><row><entry/><entry/><entry/><entry>RDT</entry></row><row><entry/><entry>Video Watermark: Forgery of</entry><entry>Forged Dynamic Events</entry><entry>Web Cryptography API or</entry></row><row><entry/><entry>dynamic_event_message( )</entry><entry/><entry>Cross-</entry></row><row><entry/><entry/><entry/><entry>Verification of Video</entry></row><row><entry/><entry/><entry/><entry>Watermark Messages with</entry></row><row><entry/><entry/><entry/><entry>RDT</entry></row><row><entry/><entry>Video Watermark: False</entry><entry>False Emergency Alerts</entry><entry>Digitally Signed Video</entry></row><row><entry/><entry>emergency alert message( )</entry><entry/><entry>Watermark Messages</entry></row><row><entry/><entry>Video Watermarks: False</entry><entry>False Display Override</entry><entry>Digitally Signed Video</entry></row><row><entry/><entry>display_override_message( )</entry><entry/><entry>Watermark Messages</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0243" num="0235">Receiver Security Functionality: Most security functions addressing the threats introduced by watermarks can be implemented in Watermark Interface module as shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref>. Watermark Interface includes Watermark Client, Audio Watermark Detector and Video Watermark Detector, as shown in as shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref>. Audio (or Video) Watermark Detector takes the uncompressed audio (or video) content as an input, processes the content to extract watermark payloads, and reports Detection Events based on the detected payloads.</p><p id="p-0244" num="0236">The Watermark Client receives the Detection Events from both Audio Watermark Detector and Video Watermark Detector, processes the Detection Events, and provides a Watermark Client API to the receiver. The Watermark Client API includes events based on the current Detection Events and sometimes the future Detection Events from Audio and/or Video Watermark Detectors. The event API includes two types of events: the events delivered by broadcasters and the events caused by the upstream content modification as described in Table 5. It should be noted that the above noted API is an interface provided by the watermark client to the receiver. This is an event-driven APIs that allows the watermark client to notify the receiver of the upstream modification.</p><p id="p-0245" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="266pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Content Modifications</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="14pt" align="center"/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="210pt" align="left"/><tbody valign="top"><row><entry/><entry>Upstream</entry><entry/></row><row><entry>#</entry><entry>Modification</entry><entry>Description</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="14pt" align="char" char="."/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="210pt" align="left"/><tbody valign="top"><row><entry>1</entry><entry>Channel</entry><entry>The user switches to a new channel (including the initial automatic</entry></row><row><entry/><entry>Change</entry><entry>tuning), and the program of the new channel contains no watermark,</entry></row><row><entry/><entry/><entry>Audio Watermark only, Video Watermark only, or both Audio and</entry></row><row><entry/><entry/><entry>Video Watermarks.</entry></row><row><entry>2</entry><entry>Audio</entry><entry>The user switches to a new audio track of the same channel (e.g., a new</entry></row><row><entry/><entry>Change</entry><entry>language) that contains VP1 Payloads that are different from ones in</entry></row><row><entry/><entry/><entry>the previous audio track.</entry></row><row><entry>3</entry><entry>Video</entry><entry>The user switches to a new video of the same channel (e.g. a new</entry></row><row><entry/><entry>Change</entry><entry>camera angle) that contains VP1 Payloads that are different from ones</entry></row><row><entry/><entry/><entry>in the previous video.</entry></row><row><entry>4</entry><entry>Full-Screen</entry><entry>Full screen graphic overlay (e.g., due to full-screen EPG or placing the</entry></row><row><entry/><entry>Overlay</entry><entry>channel in PIP mode) that removes Video Watermark</entry></row><row><entry>5</entry><entry>Partial</entry><entry>Partial screen overlay on the Input Video that retains Video Watermark</entry></row><row><entry/><entry>Screen</entry><entry>(e.g., due to partial-screen EPG. closed caption, video banners)</entry></row><row><entry/><entry>Overlay</entry></row><row><entry>6</entry><entry>Audio Mute</entry><entry>Audio muted for at least 3 seconds due to audio routing or user audio</entry></row><row><entry/><entry/><entry>muting at the upstream source.</entry></row><row><entry>7</entry><entry>EAS</entry><entry>Both source audio and video are replaced by an Emergence Alert</entry></row><row><entry/><entry>Presentation</entry><entry>Message (EAS) to be presented without modification or obstructions</entry></row><row><entry/><entry/><entry>by any Enhancements.</entry></row><row><entry>8</entry><entry>Pause</entry><entry>Pause during playback of recorded content that contains Audio and/or</entry></row><row><entry/><entry/><entry>Video Watermark</entry></row><row><entry>9</entry><entry>Rewind</entry><entry>Rewind during playback of recorded content that contains Audio</entry></row><row><entry/><entry/><entry>and/or Video Watermark</entry></row><row><entry>10</entry><entry>Fast Forward</entry><entry>Fast forward during playback of recorded content that contains Audio</entry></row><row><entry/><entry/><entry>and/or Video Watermark</entry></row><row><entry>11</entry><entry>Skip Ahead</entry><entry>Skips ahead greater 8*1.5 + &#x2159; seconds of recorded content contains</entry></row><row><entry/><entry/><entry>Audio and/or Video Watermark during playback.</entry></row><row><entry>12</entry><entry>Skip Back</entry><entry>Skips back greater than 8*1.5 + &#x2159; seconds of recorded content</entry></row><row><entry/><entry/><entry>contains Audio and/or Video Watermark during playback.</entry></row><row><entry>13</entry><entry>Channel</entry><entry>Channel acquisition during Channel Change. Low Energy</entry></row><row><entry/><entry>Acquisition</entry><entry>Components (muted audio and blank video frames) are often</entry></row><row><entry/><entry/><entry>introduced during Channel Change.</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0246" num="0237">When the watermark detector detects a query flag or discontinuous VP1 Payload, it performs fingerprint extraction and includes the extracted fingerprint in the detection event reported to the watermark client, as described earlier in this document. When a query flag or discontinuous VP1 Payload is detected by watermark detector, the watermark client in the receiver performs the following:</p><p id="p-0247" num="0238">(1) request an HTTP connection with a Recovery Server over TLS with a list of trusted root certificates that are stored in the secure storage of the receiver (if the TLS connection is successful, the response of the Recovery Server includes a RDT);</p><p id="p-0248" num="0239">(2) compare the values of the detected VP1 payload and the VP1 payload in the RDT including the values of query flags, display override flags, server code, and interval code (if the values are identical, the detected VP1 payload can be trusted. Otherwise, the detected VP1 payload is forged and returns NULL);</p><p id="p-0249" num="0240">(3) if the OtherComponent object in RDT indicates that the same signaling can be recovered in video watermarks and RDT, and if a wm_message( ) is received from a video watermark detector, compare signaling data in wm_message( ) and the RDT as described in earlier in this document to determine whether they are identical. If not identical, the detected VP1 payload is forged and returns NULL.</p><p id="p-0250" num="0241">(4) If the detection event received by watermark client may cause reporting of service change and contains a fingerprint, it performs content verification by matching the fingerprints reported the watermark detector with the fingerprints in the RDT as described earlier in this document;</p><p id="p-0251" num="0242">(5) If the detection event received by watermark client may cause reporting of service change and contains a fingerprint, it performs content verification by matching the fingerprints reported the watermark detector with the fingerprints in the RDT as described earlier in this document.</p><p id="p-0252" num="0243">If a wm_message( ) is detected and there is no indication that the same signaling data is present in wm_message( ) and RDT, the watermark client performs the following: If the wm_message( ) is a message type that must be signed, and iff the signature or message signature is available, perform signature verification as described earlier in this document. However, if the signature or message signature is not available, or the verification is not successful, the wm_message( ) is discarded.</p><p id="p-0253" num="0244">One exemplar aspect of the disclosed technology relates to a method of attacking a watermark system includes acquiring a legitimate watermark containing a payload from a segment of a first content owned by a first content owner; and embedding watermarks containing the first payload into a segment of a second content owned by a second owner, wherein viewership credits are transferred to the second content owner. In one embodiment of such a method, the watermark is an audio watermark; in another embodiment, the watermark is a video watermark.</p><p id="p-0254" num="0245">Another exemplary aspect of the disclosed technology relates to a method of associating signaling data with content that include, after content has been processed, using a fingerprinting technique to determine that content containing signaling data is the same content in which the signaling data was originally embedded. In one embodiment of this method, the fingerprinting technique is based on a fingerprint from a single video frame. In one exemplary embodiment, the size of the fingerprint is less than 64 bits. In yet another embodiment, the fingerprint is invariant to content processing. In still another exemplary embodiment, the above method further includes making pre-generation fingerprints available to a receiver by employing at least one of the following: including the pre-generation fingerprints in a Recovery Data Table or using code signing.</p><p id="p-0255" num="0246">Another exemplary aspect of the disclosed technology relates to a method of associating signaling data with content that includes defining a content hash generation function h=H(c), defining a binary hash matching function M(h,c) which returns 1 for M(H(c),c&#x2032;) when c&#x2032; is a broadcast version of c and 0 for M(H(c),d) when c and d are different content with low probability of type 1 and 2 errors. The above method also comprises including a reference hash H(c) of the payload interval of the broadcast content c in a recovery data table for a watermark in a payload interval, and employing a receiver to use M(H(c), c&#x2032;), where c&#x2032; is the received content from which the payload is detected to validate that no copy attach has been performed, whereby after content has been processed, it can be determined that content containing signaling data is the same content in which the signaling data was originally embedded.</p><p id="p-0256" num="0247">Another exemplary aspect of the disclosed technology relates to a method of verifying a watermark payload that includes receiving in a receiver a watermark payload extracted from a watermark detector, determining if the received watermark payload is identical to a previously stored payload in a Recovery Data Table, and discarding the received watermark payload if it is not identical to the previously stored payload in the Recovery Data Table. In one exemplary embodiment, the Recovery Data Table includes a query flag value, a server code and an interval code. In another exemplary embodiment, the above method further includes terminating the application if the Recovery Data Table is not available.</p><p id="p-0257" num="0248">Another exemplary aspect of the disclosed technology relates to a method of verifying a watermark payload that includes receiving in a receiver a video watermark payload extracted from a watermark detector, receiving in a receiver an audio watermark payload extracted from a watermark detector, retrieving a Recovery Data Table using the received audio watermark, determining if the received video watermark payload is identical to a previously stored payload in the Recovery Data Table, and discarding the received video watermark payload if it is not identical to the previously stored payload in the Recovery Data Table.</p><p id="p-0258" num="0249">It is understood that the various embodiments of the present invention may be implemented individually, or collectively, in devices comprised of various hardware and/or software modules and components. These devices, for example, may comprise a processor, a memory unit, an interface that are communicatively connected to each other, and may range from desktop and/or laptop computers, to consumer electronic devices such as media players, mobile devices and the like. For example, <figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates a block diagram of a device <b>1700</b> within which various disclosed embodiments may be implemented. The device <b>1700</b> comprises at least one processor <b>1702</b> and/or controller, at least one memory <b>1704</b> unit that is in communication with the processor <b>1702</b>, and at least one communication unit <b>1706</b> that enables the exchange of data and information, directly or indirectly, through the communication link <b>1708</b> with other entities, devices and networks. The communication unit <b>1706</b> may provide wired and/or wireless communication capabilities in accordance with one or more communication protocols, and therefore it may comprise the proper transmitter/receiver antennas, circuitry and ports, as well as the encoding/decoding capabilities that may be necessary for proper transmission and/or reception of data and other information.</p><p id="p-0259" num="0250">Referring back to <figref idref="DRAWINGS">FIG. <b>17</b></figref> the connectivity between the modules and/or components within the modules may be provided using any one of the connectivity methods and media that is known in the art, including, but not limited to, communications over the Internet, wired, or wireless networks using the appropriate protocols.</p><p id="p-0260" num="0251">The components or modules that are described in connection with the disclosed embodiments can be implemented as hardware, software, or combinations thereof. For example, a hardware implementation can include discrete analog and/or digital components that are, for example, integrated as part of a printed circuit board. Alternatively, or additionally, the disclosed components or modules can be implemented as an Application Specific Integrated Circuit (ASIC) and/or as a Field Programmable Gate Array (FPGA) device. Some implementations may additionally or alternatively include a digital signal processor (DSP) that is a specialized microprocessor with an architecture optimized for the operational needs of digital signal processing associated with the disclosed functionalities of this application.</p><p id="p-0261" num="0252">Various embodiments described herein are described in the general context of methods or processes, which may be implemented in one embodiment by a computer program product, embodied in a computer-readable medium, including computer-executable instructions, such as program code, executed by a processor or by computers in networked environments. A computer-readable medium may include removable and non-removable storage devices including, but not limited to, Read Only Memory (ROM), Random Access Memory (RAM), compact discs (CDs), digital versatile discs (DVD), Blu-ray Discs, etc. Therefore, the computer-readable media described in the present application include non-transitory storage media. Generally, program modules may include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Computer-executable instructions, associated data structures, and program modules represent examples of program code for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps or processes.</p><p id="p-0262" num="0253">For example, one aspect of the disclosed embodiments relates to a computer program product that is embodied on a non-transitory computer readable medium. The computer program product includes program code for carrying out any one or and/or all of the operations of the disclosed embodiments.</p><p id="p-0263" num="0254">The foregoing description of embodiments has been presented for purposes of illustration and description. The foregoing description is not intended to be exhaustive or to limit embodiments of the present invention to the precise form disclosed, and modifications and variations are possible in light of the above teachings or may be acquired from practice of various embodiments. The embodiments discussed herein were chosen and described in order to explain the principles and the nature of various embodiments and its practical application to enable one skilled in the art to utilize the present invention in various embodiments and with various modifications as are suited to the particular use contemplated. The features of the embodiments described herein may be combined in all possible combinations of methods, apparatus, modules, systems, and computer program products, as well as in different sequential orders. Any embodiment may further be combined with any other embodiment.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-21" num="01-21"><claim-text><b>1</b>-<b>21</b>. (canceled)</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. A method for facilitating access to metadata associated with a multimedia content, comprising:<claim-text>at a first receiver device that includes a first watermark extractor that is implemented at least partially in hardware:<claim-text>extracting a plurality of watermark messages from the multimedia content, each of the plurality of watermark messages having been embedded in a segment of the multimedia content;</claim-text><claim-text>using at least a portion of a first watermark message of the plurality of watermark messages to obtain additional information regarding a first segment of the multimedia content that includes the first watermark message; and</claim-text><claim-text>associating and storing one or more values of the first watermark message, one or more values of other watermark messages extracted from other segments of the multimedia content by the first watermark extractor, and the additional information to form a table or array of items that can be accessed by specifying the one or more values of the first watermark message or one or more values of the other watermark messages;</claim-text></claim-text><claim-text>subsequent to formation of the table, receiving the multimedia content at a second receiver device that includes a second watermark extractor that is implemented at least partially in hardware and extracting the first watermark message and one or more additional watermark messages from the multimedia content using the second watermark extractor; and</claim-text><claim-text>transmitting, for each of the watermark messages extracted by the second watermark extractor, information including a value of the watermark message and a time value to a database, wherein the transmitted information in conjunction with the table or array of items enables a determination of a particular usage of the multimedia content.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein, for each of the extracted watermark messages, the additional information includes one or more of the following:<claim-text>a service identifier associated with the corresponding segment of the multimedia content;</claim-text><claim-text>a program identifier associated with the corresponding segment of the multimedia content; or</claim-text><claim-text>a service presentation time that represents a time frame within which the corresponding segment of the multimedia content is presented.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein using at least a portion of the first watermark message to obtain the additional information includes forming a query for the first watermark message to obtain the additional information from a metadata sever, wherein the query includes a sever code and an interval code obtained from the corresponding watermark message.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein associating the one or more values of the first watermark message and the one or more values of the other watermark messages and the additional information includes one or both of:<claim-text>associating a watermark payload value with the additional information, or</claim-text><claim-text>associating a plurality of watermark symbol values with the additional information.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The method of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein specification of one or both of the watermark payload value or the plurality of watermark symbol values enables access to the corresponding additional information from the table or array of items.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the transmitting includes transmitting information including a plurality of symbols values of the watermark message and the time value as the time value at the second watermark extractor to the database.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the particular usage of the multimedia content includes one or more of the following:<claim-text>(A) consumption duration of the multimedia content,</claim-text><claim-text>(B) an identifier of the multimedia content,</claim-text><claim-text>(C) a type of multimedia content that was consumed, or</claim-text><claim-text>(D) a change in the multimedia content.</claim-text></claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein each of the extracted watermark messages is extracted from an audio component of the multimedia content that is 1.5 seconds in duration.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the additional information is obtained by receiving a recovery data table from a recovery server located remotely from the first receiver device.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. A system comprising:<claim-text>a first device comprising a first processor and a first memory comprising processor executable code, the processor executable code when executed by the first processor causes the first device to:<claim-text>receive a multimedia content;</claim-text><claim-text>extract a first watermark message from a first segment of the multimedia content using a first watermark extractor;</claim-text><claim-text>use at least a portion of the first watermark message to obtain additional information regarding the first segment of the multimedia content that includes the first watermark message; and</claim-text><claim-text>associate and store one or more values of the first watermark message, one or more values of other watermark messages extracted from other segments of the multimedia content by the first watermark extractor, and the additional information to form a table or array of items that can be accessed by specifying the one or more values of the first watermark message or one or more values of the other watermark messages;</claim-text></claim-text><claim-text>a second device comprising a second processor and a second memory comprising processor executable code, the processor executable code when executed by the second processor causes the second device to:<claim-text>receive the multimedia content at the second device and extract the first watermark message and one or more additional watermark messages from the multimedia content; and</claim-text><claim-text>transmit, for each of the watermark messages extracted by the second watermark extractor, information including a value of the watermark message and a time value to a database, wherein the transmitted information in conjunction with the table or array of items enables a determination of a particular usage of the multimedia content</claim-text></claim-text></claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein, for each of the extracted watermark messages, the additional information includes one or more of the following:<claim-text>a service identifier associated with the corresponding segment of the multimedia content;</claim-text><claim-text>a program identifier associated with the corresponding segment of the multimedia content; or</claim-text><claim-text>a service presentation time that represents a time frame within which the corresponding segment of the multimedia content is presented.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the processor executable code when executed by the first processor causes the first device to use at least a portion of the first message to obtain the additional information by forming a query for the first watermark message to obtain the additional information from a metadata sever, wherein the query includes a sever code and an interval code obtained from the corresponding watermark message.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the processor executable code when executed by the first processor causes the first device to associate the one or more values of the first watermark message and the one or more values of the other watermark messages and the additional information by one or both of:<claim-text>associating a watermark payload value with the additional information, or</claim-text><claim-text>associating a plurality of watermark symbol values with the additional information.</claim-text></claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The system of <claim-ref idref="CLM-00034">claim 34</claim-ref>, wherein specification of one or both of the watermark payload value or the plurality of watermark symbol values enables access to the corresponding additional information from the table or array of items.</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the processor executable code when executed by the second processor causes the second device to transmit the information that includes transmitting information including a plurality of symbols values of the watermark message and the time value as the time value at the second watermark extractor to the database.</claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the particular usage of the multimedia content includes one or more of the following:<claim-text>(A) consumption duration of the multimedia content,</claim-text><claim-text>(B) an identifier of the multimedia content,</claim-text><claim-text>(C) a type of multimedia content that was consumed, or</claim-text><claim-text>(D) a change in the multimedia content.</claim-text></claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein each of the extracted watermark messages is extracted from an audio component of the multimedia content that is 1.5 seconds in duration.</claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The system of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the additional information is obtained by receiving a recovery data table from a recovery server located remotely from the first device.</claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. A computer program product, embodied on one or more computer readable media and comprising:<claim-text>program code for extracting a plurality of watermark messages from a multimedia content received at a first device, each of the plurality of watermark messages having been embedded in a segment of the multimedia content;</claim-text><claim-text>program code for using at least a portion of a first watermark message of the plurality of watermark messages to obtain additional information regarding a first segment of the multimedia content that includes the first watermark message;</claim-text><claim-text>program code for associating and storing one or more values of the first watermark message, one or more values of other watermark messages extracted from other segments of the multimedia content by the first device, and the additional information to form a table or array of items that can be accessed by specifying the one or more values of the first watermark message or one or more values of the other watermark messages;</claim-text><claim-text>program code for, subsequent to formation of the table, receiving the multimedia content at a second device and extracting the first watermark message and one or more additional watermark messages from the multimedia content at the second device; and</claim-text><claim-text>program code for transmitting, for each of the watermark messages extracted by the second device, information including a value of the watermark message and a time value to a database, wherein the transmitted information in conjunction with the table or array of items enables a determination of a particular usage of the multimedia content.</claim-text></claim-text></claim></claims></us-patent-application>