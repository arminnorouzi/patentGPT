<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004571A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004571</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17899160</doc-number><date>20220830</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>25</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>84</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>25</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>86</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2282</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>24558</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">STORING FEATURE SETS USING SEMI-STRUCTURED DATA STORAGE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17390883</doc-number><date>20210731</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11461351</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17899160</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>63202192</doc-number><date>20210531</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Snowflake Inc.</orgname><address><city>Bozeman</city><state>MT</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Field</last-name><first-name>Simon A.</first-name><address><city>Aylesbury</city><country>GB</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Ozer</last-name><first-name>Stuart</first-name><address><city>Oakland</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The subject technology receives, by a database system, raw input data from a source table provided by a machine learning development environment, the source table comprising multiple rows where each row includes multiple columns, the raw input data comprising values in a first format, the values comprising input features corresponding to datasets included in the raw input data for machine learning models, the machine learning development environment comprising an external system from the database system and is accessed by a plurality of different users that are external to the database system. The subject technology generates cell data for a feature store table based at least in part on the values from the source table. The subject technology performs at least one database operation to generate the feature store table including at least table metadata, column metadata, and the generated cell data.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="96.94mm" wi="158.75mm" file="US20230004571A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="225.89mm" wi="159.60mm" orientation="landscape" file="US20230004571A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="230.97mm" wi="160.10mm" orientation="landscape" file="US20230004571A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="240.96mm" wi="161.04mm" orientation="landscape" file="US20230004571A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="242.49mm" wi="159.85mm" orientation="landscape" file="US20230004571A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="223.27mm" wi="160.27mm" orientation="landscape" file="US20230004571A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="239.78mm" wi="148.08mm" orientation="landscape" file="US20230004571A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="228.60mm" wi="144.61mm" file="US20230004571A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="239.01mm" wi="155.70mm" file="US20230004571A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/390,883, filed Jul. 31, 2021, entitled &#x201c;SEMI-STRUCTURED DATA STORAGE AND PROCESSING FUNCTIONALITY TO STORE SPARSE FEATURE SETS,&#x201d; which claims priority to U.S. Provisional Patent Application Ser. No. 63/202,192, filed May 31, 2021, entitled &#x201c;SEMI-STRUCTURED DATA STORAGE AND PROCESSING FUNCTIONALITY TO STORE SPARSE FEATURE SETS,&#x201d; and the contents of each of which are incorporated herein by reference in their entireties for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">Embodiments of the disclosure relate generally to a network-based database system or a cloud data platform and, more specifically, to processing and storing data for machine learning models within the database system.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Cloud-based data warehouses and other database systems or data platforms are often utilized for developing machine learning models and applications that leverage such models. However, such systems may have difficulty in processing datasets for machine learning due to inherent structures or formats for storing such datasets which can reduce computational efficiency and increase storage utilization.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The present disclosure will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the disclosure.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing environment that includes a network-based data warehouse system in communication with a cloud storage platform, in accordance with some embodiments of the present disclosure.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating components of a compute service manager, in accordance with some embodiments of the present disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating components of an execution platform, in accordance with some embodiments of the present disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a computing environment conceptually illustrating an example software architecture, in accordance with some embodiments of the present disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates examples of database tables, in accordance with some embodiments of the present disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates examples of database tables, in accordance with some embodiments of the present disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram illustrating operations of a database system in performing a method, in accordance with some embodiments of the present disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a diagrammatic representation of a machine in the form of a computer system within which a set of instructions may be executed for causing the machine to perform any one or more of the methodologies discussed herein, in accordance with some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0014" num="0013">Reference will now be made in detail to specific example embodiments for carrying out the inventive subject matter. Examples of these specific embodiments are illustrated in the accompanying drawings, and specific details are set forth in the following description in order to provide a thorough understanding of the subject matter. It will be understood that these examples are not intended to limit the scope of the claims to the illustrated embodiments. On the contrary, they are intended to cover such alternatives, modifications, and equivalents as may be included within the scope of the disclosure.</p><p id="p-0015" num="0014">Machine learning (ML) has seen a rise in popularity in recent years due to the availability of massive amounts of raw input data, and advances in more powerful and efficient computing hardware. Machine learning may utilize models that are executed to provide predictions in particular applications.</p><p id="p-0016" num="0015">A machine learning lifecycle may include the following distinct stages: data collection, annotation, exploration, feature engineering, experimentation, training, evaluation, and deployment. The machine learning lifecycle can be iterative from data collection through evaluation. At each stage, any prior stage could be revisited, and each stage can also change the size and shape of the data used to generate the ML model.</p><p id="p-0017" num="0016">A machine learning development lifecycle may be highly-iterative and experimental. For example, experiments involving tens or hundreds of input features and model parameters may be required to produce an accurate and well-calibrated ML model. In an example, a team of users (e.g., developers) conduct experiments and tests with many data inputs, often in both local and distributed (e.g., networked) computing environments such as a machine learning development environment.</p><p id="p-0018" num="0017">In some examples, data and physical sciences or technology areas often generate datasets for storage and analysis that are &#x201c;tall&#x201d; (e.g., based on a number of multiple rows/observations), and also very wide (based on a number of multiple columns/features). Examples of such datasets include applications for genome base-pairs, recommendation-systems (customer&#xd7;purchase matrix), fraud detection, classification, and the like. Such datasets therefore can present challenges for storage and processing in conventional relational database systems. In particular, very wide datasets can go beyond physical table processing and storage limits of such relational database tables as supported in such relaxational database systems. In an example, these issues may be solved utilizing file-stores and clustered high-performance computing environments using various forms of sparse-matrix representations. Moreover, such challenges, and the limitations of conventional relational-database systems have also popularized the data-lake (e.g., file-store) for data/physical science processing.</p><p id="p-0019" num="0018">As described further herein, the subject technology provides techniques (e.g., sparse-matrix/key-value) to model the data values as &#x201c;cells&#x201d; making extensive use of semi-structured data processing and storage features to store the data-values, and their metadata (e.g., table, column, row level) in a single table using single variant (semi-structured) column for maximum application flexibility. Advantageously, in some implementations, embodiments of the subject technology provide considerable flexibility to implement standard pattern based approaches for selective data-retrieval, sparse (e.g., null/zero) value imputation, common transformations, and sparse-matrix computation methods via SQL and UDFs (e.g., user defined functions) inside the database, without the need for data extraction or external data-processing.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing environment <b>100</b> that includes a database system in the example form of a network-based database system <b>102</b>, in accordance with some embodiments of the present disclosure. To avoid obscuring the inventive subject matter with unnecessary detail, various functional components that are not germane to conveying an understanding of the inventive subject matter have been omitted from <figref idref="DRAWINGS">FIG. <b>1</b></figref>. However, a skilled artisan will readily recognize that various additional functional components may be included as part of the computing environment <b>100</b> to facilitate additional functionality that is not specifically described herein. In other embodiments, the computing environment may comprise another type of network-based database system or a cloud data platform.</p><p id="p-0021" num="0020">As shown, the computing environment <b>100</b> comprises the network-based database system <b>102</b> in communication with a cloud storage platform <b>104</b> (e.g., AWS&#xae;, Microsoft Azure Blob Storage&#xae;, or Google Cloud Storage), and a cloud credential store provider <b>106</b>. The network-based database system <b>102</b> is a network-based system used for reporting and analysis of integrated data from one or more disparate sources including one or more storage locations within the cloud storage platform <b>104</b>. The cloud storage platform <b>104</b> comprises a plurality of computing machines and provides on-demand computer system resources such as data storage and computing power to the network-based database system <b>102</b>.</p><p id="p-0022" num="0021">The network-based database system <b>102</b> comprises a compute service manager <b>108</b>, an execution platform <b>110</b>, and one or more metadata databases <b>112</b>. The network-based database system <b>102</b> hosts and provides data reporting and analysis services to multiple client accounts.</p><p id="p-0023" num="0022">The compute service manager <b>108</b> coordinates and manages operations of the network-based database system <b>102</b>. The compute service manager <b>108</b> also performs query optimization and compilation as well as managing clusters of computing services that provide compute resources (also referred to as &#x201c;virtual warehouses&#x201d;). The compute service manager <b>108</b> can support any number of client accounts such as end users providing data storage and retrieval requests, system administrators managing the systems and methods described herein, and other components/devices that interact with compute service manager <b>108</b>.</p><p id="p-0024" num="0023">The compute service manager <b>108</b> is also in communication with a client device <b>114</b>. The client device <b>114</b> corresponds to a user of one of the multiple client accounts supported by the network-based database system <b>102</b>. A user may utilize the client device <b>114</b> to submit data storage, retrieval, and analysis requests to the compute service manager <b>108</b>.</p><p id="p-0025" num="0024">The compute service manager <b>108</b> is also coupled to one or more metadata databases <b>112</b> that store metadata pertaining to various functions and aspects associated with the network-based database system <b>102</b> and its users. For example, a metadata database <b>112</b> may include a summary of data stored in remote data storage systems as well as data available from a local cache. Additionally, a metadata database <b>112</b> may include information regarding how data is organized in remote data storage systems (e.g., the cloud storage platform <b>104</b>) and the local caches. Information stored by a metadata database <b>112</b> allows systems and services to determine whether a piece of data needs to be accessed without loading or accessing the actual data from a storage device.</p><p id="p-0026" num="0025">As another example, a metadata database <b>112</b> can store one or more credential objects <b>115</b>. In general, a credential object <b>115</b> indicates one or more security credentials to be retrieved from a remote credential store. For example, the credential store provider <b>106</b> maintains multiple remote credential stores <b>118</b>-<b>1</b> to <b>118</b>-N. Each of the remote credential stores <b>118</b>-<b>1</b> to <b>118</b>-N may be associated with a user account and may be used to store security credentials associated with the user account. A credential object <b>115</b> can indicate one of more security credentials to be retrieved by the compute service manager <b>108</b> from one of the remote credential stores <b>118</b>-<b>1</b> to <b>118</b>-N (e.g., for use in accessing data stored by the storage platform <b>104</b>).</p><p id="p-0027" num="0026">The compute service manager <b>108</b> is further coupled to the execution platform <b>110</b>, which provides multiple computing resources that execute various data storage and data retrieval tasks. The execution platform <b>110</b> is coupled to storage platform <b>104</b> of the cloud storage platform <b>104</b>. The storage platform <b>104</b> comprises multiple data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N. In some embodiments, the data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N are cloud-based storage devices located in one or more geographic locations. For example, the data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N may be part of a public cloud infrastructure or a private cloud infrastructure. The data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N may be hard disk drives (HDDs), solid state drives (SSDs), storage clusters, Amazon S3&#x2122; storage systems, or any other data storage technology. Additionally, the cloud storage platform <b>104</b> may include distributed file systems (such as Hadoop Distributed File Systems (HDFS)), object storage systems, and the like.</p><p id="p-0028" num="0027">The execution platform <b>110</b> comprises a plurality of compute nodes. A set of processes on a compute node executes a query plan compiled by the compute service manager <b>108</b>. The set of processes can include: a first process to execute the query plan; a second process to monitor and delete cache files using a least recently used (LRU) policy and implement an out of memory (<b>00</b>M) error mitigation process; a third process that extracts health information from process logs and status to send back to the compute service manager <b>108</b>; a fourth process to establish communication with the compute service manager <b>108</b> after a system boot; and a fifth process to handle all communication with a compute cluster for a given job provided by the compute service manager <b>108</b> and to communicate information back to the compute service manager <b>108</b> and other compute nodes of the execution platform <b>110</b>.</p><p id="p-0029" num="0028">In some embodiments, communication links between elements of the computing environment <b>100</b> are implemented via one or more data communication networks. These data communication networks may utilize any communication protocol and any type of communication medium. In some embodiments, the data communication networks are a combination of two or more data communication networks (or sub-networks) coupled to one another. In alternative embodiments, these communication links are implemented using any type of communication medium and any communication protocol.</p><p id="p-0030" num="0029">The compute service manager <b>108</b>, metadata database(s) <b>112</b>, execution platform <b>110</b>, and storage platform <b>104</b>, are shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as individual discrete components. However, each of the compute service manager <b>108</b>, metadata database(s) <b>112</b>, execution platform <b>110</b>, and storage platform <b>104</b> may be implemented as a distributed system (e.g., distributed across multiple systems/platforms at multiple geographic locations). Additionally, each of the compute service manager <b>108</b>, metadata database(s) <b>112</b>, execution platform <b>110</b>, and storage platform <b>104</b> can be scaled up or down (independently of one another) depending on changes to the requests received and the changing needs of the network-based database system <b>102</b>. Thus, in the described embodiments, the network-based database system <b>102</b> is dynamic and supports regular changes to meet the current data processing needs.</p><p id="p-0031" num="0030">During typical operation, the network-based database system <b>102</b> processes multiple jobs determined by the compute service manager <b>108</b>. These jobs are scheduled and managed by the compute service manager <b>108</b> to determine when and how to execute the job. For example, the compute service manager <b>108</b> may divide the job into multiple discrete tasks (or transactions as discussed further herein) and may determine what data is needed to execute each of the multiple discrete tasks. The compute service manager <b>108</b> may assign each of the multiple discrete tasks to one or more nodes of the execution platform <b>110</b> to process the task. The compute service manager <b>108</b> may determine what data is needed to process a task and further determine which nodes within the execution platform <b>110</b> are best suited to process the task. Some nodes may have already cached the data needed to process the task and, therefore, be a good candidate for processing the task. Metadata stored in a metadata database <b>112</b> assists the compute service manager <b>108</b> in determining which nodes in the execution platform <b>110</b> have already cached at least a portion of the data needed to process the task. One or more nodes in the execution platform <b>110</b> process the task using data cached by the nodes and, if necessary, data retrieved from the cloud storage platform <b>104</b>. It is desirable to retrieve as much data as possible from caches within the execution platform <b>110</b> because the retrieval speed is typically much faster than retrieving data from the cloud storage platform <b>104</b>.</p><p id="p-0032" num="0031">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the computing environment <b>100</b> separates the execution platform <b>110</b> from the storage platform <b>104</b>. In this arrangement, the processing resources and cache resources in the execution platform <b>110</b> operate independently of the data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N in the cloud storage platform <b>104</b>. Thus, the computing resources and cache resources are not restricted to specific data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N. Instead, all computing resources and all cache resources may retrieve data from, and store data to, any of the data storage resources in the cloud storage platform <b>104</b>.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating components of the compute service manager <b>108</b>, in accordance with some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the compute service manager <b>108</b> includes an access manager <b>202</b> and a credential management system <b>204</b> coupled to an access metadata database <b>206</b>, which is an example of the metadata database(s) <b>112</b>. Access manager <b>202</b> handles authentication and authorization tasks for the systems described herein. The credential management system <b>204</b> facilitates use of remote stored credentials (e.g., credentials stored in one of the remote credential stores <b>118</b>-<b>1</b> to <b>118</b>-N) to access external resources such as data resources in a remote storage device. As used herein, the remote storage devices may also be referred to as &#x201c;persistent storage devices&#x201d; or &#x201c;shared storage devices.&#x201d; For example, the credential management system <b>204</b> may create and maintain remote credential store definitions and credential objects (e.g., in the access metadata database <b>206</b>). A remote credential store definition identifies a remote credential store (e.g., one or more of the remote credential stores <b>118</b>-<b>1</b> to <b>118</b>-N) and includes access information to access security credentials from the remote credential store. A credential object identifies one or more security credentials using non-sensitive information (e.g., text strings) that are to be retrieved from a remote credential store for use in accessing an external resource. When a request invoking an external resource is received at run time, the credential management system <b>204</b> and access manager <b>202</b> use information stored in the access metadata database <b>206</b> (e.g., a credential object and a credential store definition) to retrieve security credentials used to access the external resource from a remote credential store.</p><p id="p-0034" num="0033">A request processing service <b>208</b> manages received data storage requests and data retrieval requests (e.g., jobs to be performed on database data). For example, the request processing service <b>208</b> may determine the data to process a received query (e.g., a data storage request or data retrieval request). The data may be stored in a cache within the execution platform <b>110</b> or in a data storage device in storage platform <b>104</b>.</p><p id="p-0035" num="0034">A management console service <b>210</b> supports access to various systems and processes by administrators and other system managers. Additionally, the management console service <b>210</b> may receive a request to execute a job and monitor the workload on the system.</p><p id="p-0036" num="0035">The compute service manager <b>108</b> also includes a job compiler <b>212</b>, a job optimizer <b>214</b> and a job executor <b>216</b>. The job compiler <b>212</b> parses a job into multiple discrete tasks and generates the execution code for each of the multiple discrete tasks. The job optimizer <b>214</b> determines the best method to execute the multiple discrete tasks based on the data that needs to be processed. The job optimizer <b>214</b> also handles various data pruning operations and other data optimization techniques to improve the speed and efficiency of executing the job. The job executor <b>216</b> executes the execution code for jobs received from a queue or determined by the compute service manager <b>108</b>.</p><p id="p-0037" num="0036">A job scheduler and coordinator <b>218</b> sends received jobs to the appropriate services or systems for compilation, optimization, and dispatch to the execution platform <b>110</b>. For example, jobs may be prioritized and then processed in that prioritized order. In an embodiment, the job scheduler and coordinator <b>218</b> determines a priority for internal jobs that are scheduled by the compute service manager <b>108</b> with other &#x201c;outside&#x201d; jobs such as user queries that may be scheduled by other systems in the database (e.g., the storage platform <b>104</b>) but may utilize the same processing resources in the execution platform <b>110</b>. In some embodiments, the job scheduler and coordinator <b>218</b> identifies or assigns particular nodes in the execution platform <b>110</b> to process particular tasks. A virtual warehouse manager <b>220</b> manages the operation of multiple virtual warehouses implemented in the execution platform <b>110</b>. For example, the virtual warehouse manager <b>220</b> may generate query plans for executing received queries.</p><p id="p-0038" num="0037">Additionally, the compute service manager <b>108</b> includes a configuration and metadata manager <b>222</b>, which manages the information related to the data stored in the remote data storage devices and in the local buffers (e.g., the buffers in execution platform <b>110</b>). The configuration and metadata manager <b>222</b> uses metadata to determine which data files need to be accessed to retrieve data for processing a particular task or job. A monitor and workload analyzer <b>224</b> oversee processes performed by the compute service manager <b>108</b> and manages the distribution of tasks (e.g., workload) across the virtual warehouses and execution nodes in the execution platform <b>110</b>. The monitor and workload analyzer <b>224</b> also redistributes tasks, as needed, based on changing workloads throughout the network-based database system <b>102</b> and may further redistribute tasks based on a user (e.g., &#x201c;external&#x201d;) query workload that may also be processed by the execution platform <b>110</b>. The configuration and metadata manager <b>222</b> and the monitor and workload analyzer <b>224</b> are coupled to a data storage device <b>226</b>. Data storage device <b>226</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref> represents any data storage device within the network-based database system <b>102</b>. For example, data storage device <b>226</b> may represent buffers in execution platform <b>110</b>, storage devices in storage platform <b>104</b>, or any other storage device.</p><p id="p-0039" num="0038">As described in embodiments herein, the compute service manager <b>108</b> validates all communication from an execution platform (e.g., the execution platform <b>110</b>) to validate that the content and context of that communication are consistent with the task(s) known to be assigned to the execution platform. For example, an instance of the execution platform executing a query A should not be allowed to request access to data-source D (e.g., data storage device <b>226</b>) that is not relevant to query A. Similarly, a given execution node (e.g., execution node <b>302</b>-<b>1</b> may need to communicate with another execution node (e.g., execution node <b>302</b>-<b>2</b>), and should be disallowed from communicating with a third execution node (e.g., execution node <b>312</b>-<b>1</b>) and any such illicit communication can be recorded (e.g., in a log or other location). Also, the information stored on a given execution node is restricted to data relevant to the current query and any other data is unusable, rendered so by destruction or encryption where the key is unavailable.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating components of the execution platform <b>110</b>, in accordance with some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the execution platform <b>110</b> includes multiple virtual warehouses, including virtual warehouse <b>1</b>, virtual warehouse <b>2</b>, and virtual warehouse n. Each virtual warehouse includes multiple execution nodes that each include a data cache and a processor. The virtual warehouses can execute multiple tasks in parallel by using the multiple execution nodes. As discussed herein, the execution platform <b>110</b> can add new virtual warehouses and drop existing virtual warehouses in real-time based on the current processing needs of the systems and users. This flexibility allows the execution platform <b>110</b> to quickly deploy large amounts of computing resources when needed without being forced to continue paying for those computing resources when they are no longer needed. All virtual warehouses can access data from any data storage device (e.g., any storage device in cloud storage platform <b>104</b>).</p><p id="p-0041" num="0040">Although each virtual warehouse shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> includes three execution nodes, a particular virtual warehouse may include any number of execution nodes. Further, the number of execution nodes in a virtual warehouse is dynamic, such that new execution nodes are created when additional demand is present, and existing execution nodes are deleted when they are no longer necessary.</p><p id="p-0042" num="0041">Each virtual warehouse is capable of accessing any of the data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Thus, the virtual warehouses are not necessarily assigned to a specific data storage device <b>120</b>-<b>1</b> to <b>120</b>-N and, instead, can access data from any of the data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N within the cloud storage platform <b>104</b>. Similarly, each of the execution nodes shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> can access data from any of the data storage devices <b>120</b>-<b>1</b> to <b>120</b>-N. In some embodiments, a particular virtual warehouse or a particular execution node may be temporarily assigned to a specific data storage device, but the virtual warehouse or execution node may later access data from any other data storage device.</p><p id="p-0043" num="0042">In the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, virtual warehouse <b>1</b> includes three execution nodes <b>302</b>-<b>1</b>, <b>302</b>-<b>2</b>, and <b>302</b>-<i>n</i>. Execution node <b>302</b>-<b>1</b> includes a cache <b>304</b>-<b>1</b> and a processor <b>306</b>-<b>1</b>. Execution node <b>302</b>-<b>2</b> includes a cache <b>304</b>-<b>2</b> and a processor <b>306</b>-<b>2</b>. Execution node <b>302</b>-<i>n </i>includes a cache <b>304</b>-<i>n </i>and a processor <b>306</b>-<i>n</i>. Each execution node <b>302</b>-<b>1</b>, <b>302</b>-<b>2</b>, and <b>302</b>-<i>n </i>is associated with processing one or more data storage and/or data retrieval tasks. For example, a virtual warehouse may handle data storage and data retrieval tasks associated with an internal service, such as a clustering service, a materialized view refresh service, a file compaction service, a storage procedure service, or a file upgrade service. In other implementations, a particular virtual warehouse may handle data storage and data retrieval tasks associated with a particular data storage system or a particular category of data.</p><p id="p-0044" num="0043">Similar to virtual warehouse <b>1</b> discussed above, virtual warehouse <b>2</b> includes three execution nodes <b>312</b>-<b>1</b>, <b>312</b>-<b>2</b>, and <b>312</b>-<i>n</i>. Execution node <b>312</b>-<b>1</b> includes a cache <b>314</b>-<b>1</b> and a processor <b>316</b>-<b>1</b>. Execution node <b>312</b>-<b>2</b> includes a cache <b>314</b>-<b>2</b> and a processor <b>316</b>-<b>2</b>. Execution node <b>312</b>-<i>n </i>includes a cache <b>314</b>-<i>n </i>and a processor <b>316</b>-<i>n</i>. Additionally, virtual warehouse <b>3</b> includes three execution nodes <b>322</b>-<b>1</b>, <b>322</b>-<b>2</b>, and <b>322</b>-<i>n</i>. Execution node <b>322</b>-<b>1</b> includes a cache <b>324</b>-<b>1</b> and a processor <b>326</b>-<b>1</b>. Execution node <b>322</b>-<b>2</b> includes a cache <b>324</b>-<b>2</b> and a processor <b>326</b>-<b>2</b>. Execution node <b>322</b>-<i>n </i>includes a cache <b>324</b>-<i>n </i>and a processor <b>326</b>-<i>n. </i></p><p id="p-0045" num="0044">In some embodiments, the execution nodes shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> are stateless with respect to the data being cached by the execution nodes. For example, these execution nodes do not store or otherwise maintain state information about the execution node or the data being cached by a particular execution node. Thus, in the event of an execution node failure, the failed node can be transparently replaced by another node. Since there is no state information associated with the failed execution node, the new (replacement) execution node can easily replace the failed node without concern for recreating a particular state.</p><p id="p-0046" num="0045">Although the execution nodes shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> each includes one data cache and one processor, alternative embodiments may include execution nodes containing any number of processors and any number of caches. Additionally, the caches may vary in size among the different execution nodes. The caches shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> store, in the local execution node, data that was retrieved from one or more data storage devices in cloud storage platform <b>104</b>. Thus, the caches reduce or eliminate the bottleneck problems occurring in platforms that consistently retrieve data from remote storage systems. Instead of repeatedly accessing data from the remote storage devices, the systems and methods described herein access data from the caches in the execution nodes, which is significantly faster and avoids the bottleneck problem discussed above. In some embodiments, the caches are implemented using high-speed memory devices that provide fast access to the cached data. Each cache can store data from any of the storage devices in the cloud storage platform <b>104</b>.</p><p id="p-0047" num="0046">Further, the cache resources and computing resources may vary between different execution nodes. For example, one execution node may contain significant computing resources and minimal cache resources, making the execution node useful for tasks that require significant computing resources. Another execution node may contain significant cache resources and minimal computing resources, making this execution node useful for tasks that require caching of large amounts of data. Yet another execution node may contain cache resources providing faster input-output operations, useful for tasks that require fast scanning of large amounts of data. In some embodiments, the cache resources and computing resources associated with a particular execution node are determined when the execution node is created, based on the expected tasks to be performed by the execution node.</p><p id="p-0048" num="0047">Additionally, the cache resources and computing resources associated with a particular execution node may change over time based on changing tasks performed by the execution node. For example, an execution node may be assigned more processing resources if the tasks performed by the execution node become more processor-intensive. Similarly, an execution node may be assigned more cache resources if the tasks performed by the execution node require a larger cache capacity.</p><p id="p-0049" num="0048">Although virtual warehouses <b>1</b>, <b>2</b>, and n are associated with the same execution platform <b>110</b>, the virtual warehouses may be implemented using multiple computing systems at multiple geographic locations. For example, virtual warehouse <b>1</b> can be implemented by a computing system at a first geographic location, while virtual warehouses <b>2</b> and n are implemented by another computing system at a second geographic location. In some embodiments, these different computing systems are cloud-based computing systems maintained by one or more different entities.</p><p id="p-0050" num="0049">Additionally, each virtual warehouse is shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as having multiple execution nodes. The multiple execution nodes associated with each virtual warehouse may be implemented using multiple computing systems at multiple geographic locations. For example, an instance of virtual warehouse <b>1</b> implements execution nodes <b>302</b>-<b>1</b> and <b>302</b>-<b>2</b> on one computing platform at a geographic location and implements execution node <b>302</b>-<i>n </i>at a different computing platform at another geographic location. Selecting particular computing systems to implement an execution node may depend on various factors, such as the level of resources needed for a particular execution node (e.g., processing resource requirements and cache requirements), the resources available at particular computing systems, communication capabilities of networks within a geographic location or between geographic locations, and which computing systems are already implementing other execution nodes in the virtual warehouse.</p><p id="p-0051" num="0050">Execution platform <b>110</b> is also fault tolerant. For example, if one virtual warehouse fails, that virtual warehouse is quickly replaced with a different virtual warehouse at a different geographic location.</p><p id="p-0052" num="0051">A particular execution platform <b>110</b> may include any number of virtual warehouses. Additionally, the number of virtual warehouses in a particular execution platform is dynamic, such that new virtual warehouses are created when additional processing and/or caching resources are needed. Similarly, existing virtual warehouses may be deleted when the resources associated with the virtual warehouse are no longer necessary.</p><p id="p-0053" num="0052">In some embodiments, the virtual warehouses may operate on the same data in cloud storage platform <b>104</b>, but each virtual warehouse has its own execution nodes with independent processing and caching resources. This configuration allows requests on different virtual warehouses to be processed independently and with no interference between the requests. This independent processing, combined with the ability to dynamically add and remove virtual warehouses, supports the addition of new processing capacity for new users without impacting the performance observed by the existing users.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a computing environment <b>400</b> conceptually illustrating an example software architecture, in accordance with some embodiments of the present disclosure.</p><p id="p-0055" num="0054">Embodiments of subject technology model, pivot and store each intersection of a feature/entity (column/row) value as a row in a table, discarding empty (NULL) values from the relational form for storage efficiency. The subject technology also stores the table, column and row level metadata in similar format within the same table. Advantageously, this can eliminate the limitations of working in an original wide form where table and column limits prevent efficient storage and manipulation in a given database. Once stored in the new tall form, commonly required data-profiling and transformations can be applied to the features collectively and efficiently in a single query and pass over the data, reducing the complexity and errors that result when working with wide datasets. In an example, the techniques are enabled based at least on the efficiency of the subject system's storage and processing for working with data in tall semi-structured form, which is described further below in the discussion of <figref idref="DRAWINGS">FIG. <b>5</b></figref> and <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0056" num="0055">Additionally, in some embodiments, the subject system enables supporting changes and the storage of a Cells value over time, through addition timestamp/version of row. Logical updates to an individual cells value, in a wide row, can be made through the insertion of a new record for the row/column coordinate, without need to modify unchanged values on the row, or touch/change the prior value. This also enables the querying of data AS-OF any prior reference time.</p><p id="p-0057" num="0056">As illustrated, in embodiments, the compute service manager <b>108</b> includes an ingest engine <b>420</b>, feature store database <b>430</b>, cache <b>440</b>, feature transformer <b>450</b>, and compiler <b>460</b>.</p><p id="p-0058" num="0057">A machine learning development environment <b>415</b> can include (not shown) several components that facilitate development of machine learning models. For example, in some implementations, the machine learning development environment <b>415</b> includes components that support different users or data scientists, a customer schema, domain specific language packages, a sandbox environment (e.g., data science sandbox), and the like. It is appreciated that more or fewer components may be provided by the machine learning development environment and still be within the scope of the subject technology.</p><p id="p-0059" num="0058">As part of the machine learning development cycle, the aforementioned components of machine learning development environment <b>415</b> can facilitate the creation of raw input features <b>410</b>, corresponding to (raw) datasets for machine learning models and development, which are then received by the ingest engine <b>420</b> for processing.</p><p id="p-0060" num="0059">The ingest engine <b>420</b> can ingest the raw input features on a periodic basis for processing. The ingest engine <b>420</b> can unpivot data to a feature store form at <b>422</b>. The ingest engine <b>420</b> can perform additional operations to convert the data to a final feature store format during a feature store stage <b>424</b> such as generating additional metadata corresponding to table or column metadata (described further below) among other types of operations. Further, the ingest engine <b>420</b> merges the feature store data at <b>426</b> to the feature store database <b>430</b>.</p><p id="p-0061" num="0060">In some embodiments, as part of the machine learning model development cycle, the feature transformer <b>450</b> can perform one or more transformation operations for the data (e.g., to produce one or more derived features) and then store the transformed data back into the feature store database <b>430</b>. In this manner, a lineage from the original ingestion of the raw input features <b>410</b> up to the most recent transformation of data can be stored in the feature store database <b>430</b>.</p><p id="p-0062" num="0061">As further shown, data profiling <b>470</b> can provide functionality related to summarization and statistical profiling for the data in the feature store database <b>430</b> (e.g., across tens or hundreds of features at a time based on tags or filters). In an implementation, data profiling <b>470</b> can be performed on a periodic basis as new or additional data is received or stored in the feature store database <b>430</b>.</p><p id="p-0063" num="0062">Data from the feature store database <b>430</b> can be sent (e.g., using an egress component <b>474</b> or some other communication or data transfer interface) to developers or data scientists from the machine learning development environment <b>415</b> for training such data in a given machine learning model. For testing new input data for a trained model, data from feature store database <b>430</b> can be sent to one or more applications <b>480</b>. Such applications can include an embedded (trained) model that performs various predictions and other machine learning operations.</p><p id="p-0064" num="0063">Users (e.g., data scientists) from the machine learning development environment can send API (e.g., application programming interface) or YAML (e.g., &#x201c;YAML Ain&#x2032;t Markup Language&#x201d;) function/method calls to the compiler <b>460</b>, which may process such calls to perform the previously discussed transformation operations by the feature transformer <b>450</b>. Further, metadata queries <b>472</b> can be sent to the feature store database <b>430</b> as part of the machine learning model development cycle.</p><p id="p-0065" num="0064">As further shown, data from the feature store database <b>430</b> can be stored in cache <b>440</b>, which can then be sent to one or more applications <b>480</b>. In an example, such data may correspond to substantially &#x201c;real-time&#x201d; data for processing by a given machine learning model in the one or more applications <b>480</b>. A table mapping features to models or applications enables the specific subsets of features required to be cached and maintained, with time-variant versioning if required.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates examples of database tables, in accordance with some embodiments of the present disclosure.</p><p id="p-0067" num="0066">As illustrated, a source table <b>510</b> includes data (e.g., raw input features for machine learning model development, and the like). The source table <b>510</b> includes multiple columns of data (e.g., column a to column i in this example) in each row of the source table <b>510</b>. Thus, it is appreciated that the source table <b>510</b> represents a very &#x201c;wide&#x201d; table (e.g., many columns per row) for storing a given dataset.</p><p id="p-0068" num="0067">The source table <b>510</b> can be converted into a format shown in the table <b>520</b> corresponding to a feature store data format. In an example, the feature store data format converts the data from the source table <b>510</b> into a tall semi-structured form (e.g., less columns or less wide than the table <b>510</b>). The table <b>520</b>, in this example, includes a column for a table identifier (ID), a row ID, a column ID, and a value for each corresponding column value from the source table <b>510</b>.</p><p id="p-0069" num="0068">As further shown, a table metadata table <b>522</b> for storing table metadata (e.g., timestamp for when table was created, description information, table IDs, tag strings, and the like), and a column metadata table <b>524</b> for storing column metadata (e.g., timestamp for when data was ingested, data types, tag strings, table IDs, column IDs, order or ordinal position, and the like).</p><p id="p-0070" num="0069">The following discussion of <figref idref="DRAWINGS">FIG. <b>6</b></figref> describes other examples of how the data can be stored in the subject system in some embodiments.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates examples of database tables, in accordance with some embodiments of the present disclosure.</p><p id="p-0072" num="0071">As illustrated, a source table <b>610</b> can include different input data for storing in the subject system. The source table <b>610</b> includes multiple rows where each row includes multiple columns for different data. In this example the data includes data, in each row, for different vehicles and attributes corresponding to each vehicle.</p><p id="p-0073" num="0072">The subject system can perform an unpivot operation(s) to convert the data from the source table <b>610</b> to a table <b>620</b>. In this example, the table <b>620</b> includes the data from the source table <b>610</b> in a single column format. Each row in the table <b>620</b> includes a row type, a row object ID, and data value(s) (e.g., corresponding to a cell from the source table <b>610</b>, table metadata, or column metadata).</p><p id="p-0074" num="0073">In this example, the table <b>620</b> includes a row for table metadata, several rows for column metadata, and multiple rows for cell data (e.g., corresponding to each cell from a row of the source table <b>610</b>). However it understood that the table <b>620</b> can include more or fewer rows and still be within the scope of the subject technology.</p><p id="p-0075" num="0074">Due to at least in part of this column format for storing the cell data, query operations (or other types of database operations) can be more readily performed on logical groupings of data in the table <b>620</b>. In some embodiments, logical groupings can be maintained flexibly as an additional metadata type, within the table <b>620</b> as required, offering flexibility in application.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram illustrating operations of a database system in performing a method, in accordance with some embodiments of the present disclosure. The method <b>700</b> may be embodied in computer-readable instructions for execution by one or more hardware components (e.g., one or more processors) such that the operations of the method <b>700</b> may be performed by components of network-based database system <b>102</b>, such as components of the compute service manager <b>108</b> or a node in the execution platform <b>110</b>. Accordingly, the method <b>700</b> is described below, by way of example with reference thereto. However, it shall be appreciated that the method <b>700</b> may be deployed on various other hardware configurations and is not intended to be limited to deployment within the network-based database system <b>102</b>.</p><p id="p-0077" num="0076">At operation <b>702</b>, the ingest engine <b>420</b> receives raw input data from a source table, the raw input data including data including input features for a machine learning model, the raw input data being in a first format including at least multiple rows with each row including multiple columns of values.</p><p id="p-0078" num="0077">At operation <b>704</b>, based at least in part on the source table, the ingest engine <b>420</b> generates table metadata corresponding to the source table. In an embodiment, generating table metadata includes generating a table metadata table, the table metadata table including a set of rows, each row including particular metadata, the particular metadata including at least a timestamp for when the source table was created, description information, table identifier, or a tag string.</p><p id="p-0079" num="0078">At operation <b>706</b>, based at least in part on the received raw input data, the ingest engine <b>420</b> generates column metadata corresponding to values from the source table. In an embodiment, generating column metadata includes generating a column metadata table, the column metadata table including a set of rows, each row including particular metadata, the particular metadata including a timestamp for when data was ingested, data type, tag string, table identifier, column identifier, or ordinal position.</p><p id="p-0080" num="0079">At operation <b>708</b>, the ingest engine <b>420</b> generates cell data for a feature store table based at least in part on the values from the source table. In an embodiment, generating cell data includes generating a cell data table, the cell data table including a set of rows, each row including particular cell data, the cell data including a table identifier, a row identifier, a column ID, and a value for each corresponding column value from the source table. Moreover, the cell data table includes a number of columns less than a number of columns of the source table in an example.</p><p id="p-0081" num="0080">At operation <b>710</b>, the ingest engine <b>420</b> performs at least one database operation to generate the feature store table including at least the generated table metadata, the generated column metadata, and the generated cell data. In an embodiment, the at least one database operation includes an unpivot operation, or a union all insert operation. Alternatively, in an embodiment, both the unpivot operation and the union all insert operation are performed by the ingest engine <b>420</b> to generate the feature store table.</p><p id="p-0082" num="0081">In an embodiment, the feature store table includes multiple rows, each row including multiple columns, the multiple columns including a first column including data for a row, a second column including data for a row identifier, and a third column including data from the generated table metadata, the generated column metadata, and the generated cell data.</p><p id="p-0083" num="0082">In an embodiment, the unpivot operation performs a particular operation to convert multiple columns of data from the generated table metadata, the generated column metadata, and the generated cell data into a single row in a single column of data in the feature store table.</p><p id="p-0084" num="0083">In an embodiment, the union all insert operation includes combining data from the generated table metadata, the generated column metadata, and the generated cell data, and inserting the combined data into the feature store table as a one or more rows of data, the one or more rows of data being stored in a single column of the feature store table.</p><p id="p-0085" num="0084">Additionally, in an implementation, the feature store table includes data stored in a feature store format, the feature store format including multiple columns of data from the generated table metadata, the generated column metadata, and the generated cell data stored in a single column in the feature store table.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a diagrammatic representation of a machine <b>800</b> in the form of a computer system within which a set of instructions may be executed for causing the machine <b>800</b> to perform any one or more of the methodologies discussed herein, according to an example embodiment. Specifically, <figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a diagrammatic representation of the machine <b>800</b> in the example form of a computer system, within which instructions <b>816</b> (e.g., software, a program, an application, an applet, an app, or other executable code) for causing the machine <b>800</b> to perform any one or more of the methodologies discussed herein may be executed. For example, the instructions <b>816</b> may cause the machine <b>800</b> to execute any one or more operations of method <b>700</b>. As another example, the instructions <b>816</b> may cause the machine <b>800</b> to implement portions of the data flows illustrated in at least <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In this way, the instructions <b>816</b> transform a general, non-programmed machine into a particular machine <b>800</b> (e.g., the compute service manager <b>108</b> or a node in the execution platform <b>110</b>) that is specially configured to carry out any one of the described and illustrated functions in the manner described herein.</p><p id="p-0087" num="0086">In alternative embodiments, the machine <b>800</b> operates as a standalone device or may be coupled (e.g., networked) to other machines. In a networked deployment, the machine <b>800</b> may operate in the capacity of a server machine or a client machine in a server-client network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine <b>800</b> may comprise, but not be limited to, a server computer, a client computer, a personal computer (PC), a tablet computer, a laptop computer, a netbook, a smart phone, a mobile device, a network router, a network switch, a network bridge, or any machine capable of executing the instructions <b>816</b>, sequentially or otherwise, that specify actions to be taken by the machine <b>800</b>. Further, while only a single machine <b>800</b> is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include a collection of machines <b>800</b> that individually or jointly execute the instructions <b>816</b> to perform any one or more of the methodologies discussed herein.</p><p id="p-0088" num="0087">The machine <b>800</b> includes processors <b>810</b>, memory <b>830</b>, and input/output (I/O) components <b>850</b> configured to communicate with each other such as via a bus <b>802</b>. In an example embodiment, the processors <b>810</b> (e.g., a central processing unit (CPU), a reduced instruction set computing (RISC) processor, a complex instruction set computing (CISC) processor, a graphics processing unit (GPU), a digital signal processor (DSP), an application-specific integrated circuit (ASIC), a radio-frequency integrated circuit (RFIC), another processor, or any suitable combination thereof) may include, for example, a processor <b>812</b> and a processor <b>814</b> that may execute the instructions <b>816</b>. The term &#x201c;processor&#x201d; is intended to include multi-core processors <b>810</b> that may comprise two or more independent processors (sometimes referred to as &#x201c;cores&#x201d;) that may execute instructions <b>816</b> contemporaneously. Although <figref idref="DRAWINGS">FIG. <b>8</b></figref> shows multiple processors <b>810</b>, the machine <b>800</b> may include a single processor with a single core, a single processor with multiple cores (e.g., a multi-core processor), multiple processors with a single core, multiple processors with multiple cores, or any combination thereof.</p><p id="p-0089" num="0088">The memory <b>830</b> may include a main memory <b>832</b>, a static memory <b>834</b>, and a storage unit <b>836</b>, all accessible to the processors <b>810</b> such as via the bus <b>802</b>. The main memory <b>832</b>, the static memory <b>834</b>, and the storage unit <b>836</b> store the instructions <b>816</b> embodying any one or more of the methodologies or functions described herein. The instructions <b>816</b> may also reside, completely or partially, within the main memory <b>832</b>, within the static memory <b>834</b>, within machine storage medium <b>838</b> of the storage unit <b>836</b>, within at least one of the processors <b>810</b> (e.g., within the processor's cache memory), or any suitable combination thereof, during execution thereof by the machine <b>800</b>.</p><p id="p-0090" num="0089">The I/O components <b>850</b> include components to receive input, provide output, produce output, transmit information, exchange information, capture measurements, and so on. The specific I/O components <b>850</b> that are included in a particular machine <b>800</b> will depend on the type of machine. For example, portable machines such as mobile phones will likely include a touch input device or other such input mechanisms, while a headless server machine will likely not include such a touch input device. It will be appreciated that the I/O components <b>850</b> may include many other components that are not shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. The I/O components <b>850</b> are grouped according to functionality merely for simplifying the following discussion and the grouping is in no way limiting. In various example embodiments, the I/O components <b>850</b> may include output components <b>852</b> and input components <b>854</b>. The output components <b>852</b> may include visual components (e.g., a display such as a plasma display panel (PDP), a light emitting diode (LED) display, a liquid crystal display (LCD), a projector, or a cathode ray tube (CRT)), acoustic components (e.g., speakers), other signal generators, and so forth. The input components <b>854</b> may include alphanumeric input components (e.g., a keyboard, a touch screen configured to receive alphanumeric input, a photo-optical keyboard, or other alphanumeric input components), point-based input components (e.g., a mouse, a touchpad, a trackball, a joystick, a motion sensor, or another pointing instrument), tactile input components (e.g., a physical button, a touch screen that provides location and/or force of touches or touch gestures, or other tactile input components), audio input components (e.g., a microphone), and the like.</p><p id="p-0091" num="0090">Communication may be implemented using a wide variety of technologies. The I/O components <b>850</b> may include communication components <b>864</b> operable to couple the machine <b>800</b> to a network <b>880</b> or devices <b>870</b> via a coupling <b>882</b> and a coupling <b>872</b>, respectively. For example, the communication components <b>864</b> may include a network interface component or another suitable device to interface with the network <b>880</b>. In further examples, the communication components <b>864</b> may include wired communication components, wireless communication components, cellular communication components, and other communication components to provide communication via other modalities. The devices <b>870</b> may be another machine or any of a wide variety of peripheral devices (e.g., a peripheral device coupled via a universal serial bus (USB)). For example, as noted above, the machine <b>800</b> may correspond to any one of the compute service manager <b>108</b> or the execution platform <b>110</b>, and the devices <b>870</b> may include the client device <b>114</b> or any other computing device described herein as being in communication with the network-based database system <b>102</b> or the cloud storage platform <b>104</b>.</p><heading id="h-0006" level="2">Executable Instructions and Machine Storage Medium</heading><p id="p-0092" num="0091">The various memories (e.g., <b>830</b>, <b>832</b>, <b>834</b>, and/or memory of the processor(s) <b>810</b> and/or the storage unit <b>836</b>) may store one or more sets of instructions <b>816</b> and data structures (e.g., software) embodying or utilized by any one or more of the methodologies or functions described herein. These instructions <b>816</b>, when executed by the processor(s) <b>810</b>, cause various operations to implement the disclosed embodiments.</p><p id="p-0093" num="0092">As used herein, the terms &#x201c;machine-storage medium,&#x201d; &#x201c;device-storage medium,&#x201d; and &#x201c;computer-storage medium&#x201d; mean the same thing and may be used interchangeably in this disclosure. The terms refer to a single or multiple non-transitory storage devices and/or non-transitory media (e.g., a centralized or distributed database, and/or associated caches and servers) that store executable instructions and/or data. The terms shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media, including memory internal or external to processors. Specific examples of machine-storage media, computer-storage media, and/or device-storage media include non-volatile memory, including by way of example semiconductor memory devices, e.g., erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), field-programmable gate arrays (FPGAs), and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The terms &#x201c;machine-storage media,&#x201d; &#x201c;computer-storage media,&#x201d; and &#x201c;device-storage media&#x201d; specifically exclude carrier waves, modulated data signals, and other such media, at least some of which are covered under the term &#x201c;signal medium&#x201d; discussed below.</p><heading id="h-0007" level="2">Transmission Medium</heading><p id="p-0094" num="0093">In various example embodiments, one or more portions of the network <b>880</b> may be an ad hoc network, an intranet, an extranet, a virtual private network (VPN), a local-area network (LAN), a wireless LAN (WLAN), a wide-area network (WAN), a wireless WAN (WWAN), a metropolitan-area network (MAN), the Internet, a portion of the Internet, a portion of the public switched telephone network (PSTN), a plain old telephone service (POTS) network, a cellular telephone network, a wireless network, a Wi-Fi&#xae; network, another type of network, or a combination of two or more such networks. For example, the network <b>880</b> or a portion of the network <b>880</b> may include a wireless or cellular network, and the coupling <b>882</b> may be a Code Division Multiple Access (CDMA) connection, a Global System for Mobile communications (GSM) connection, or another type of cellular or wireless coupling. In this example, the coupling <b>882</b> may implement any of a variety of types of data transfer technology, such as Single Carrier Radio Transmission Technology (1&#xd7;RTT), Evolution-Data Optimized (EVDO) technology, General Packet Radio Service (GPRS) technology, Enhanced Data rates for GSM Evolution (EDGE) technology, third Generation Partnership Project (3GPP) including 3G, fourth generation wireless (4G) networks, Universal Mobile Telecommunications System (UMTS), High-Speed Packet Access (HSPA), Worldwide Interoperability for Microwave Access (WiMAX), Long Term Evolution (LTE) standard, others defined by various standard-setting organizations, other long-range protocols, or other data transfer technology.</p><p id="p-0095" num="0094">The instructions <b>816</b> may be transmitted or received over the network <b>880</b> using a transmission medium via a network interface device (e.g., a network interface component included in the communication components <b>864</b>) and utilizing any one of a number of well-known transfer protocols (e.g., hypertext transfer protocol (HTTP)). Similarly, the instructions <b>816</b> may be transmitted or received using a transmission medium via the coupling <b>872</b> (e.g., a peer-to-peer coupling) to the devices <b>870</b>. The terms &#x201c;transmission medium&#x201d; and &#x201c;signal medium&#x201d; mean the same thing and may be used interchangeably in this disclosure. The terms &#x201c;transmission medium&#x201d; and &#x201c;signal medium&#x201d; shall be taken to include any intangible medium that is capable of storing, encoding, or carrying the instructions <b>816</b> for execution by the machine <b>800</b>, and include digital or analog communications signals or other intangible media to facilitate communication of such software. Hence, the terms &#x201c;transmission medium&#x201d; and &#x201c;signal medium&#x201d; shall be taken to include any form of modulated data signal, carrier wave, and so forth. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.</p><heading id="h-0008" level="2">Computer-Readable Medium</heading><p id="p-0096" num="0095">The terms &#x201c;machine-readable medium,&#x201d; &#x201c;computer-readable medium,&#x201d; and &#x201c;device-readable medium&#x201d; mean the same thing and may be used interchangeably in this disclosure. The terms are defined to include both machine-storage media and transmission media. Thus, the terms include both storage devices/media and carrier waves/modulated data signals.</p><p id="p-0097" num="0096">The various operations of example methods described herein may be performed, at least partially, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of the method <b>500</b> may be performed by one or more processors. The performance of certain of the operations may be distributed among the one or more processors, not only residing within a single machine, but also deployed across a number of machines. In some example embodiments, the processor or processors may be located in a single location (e.g., within a home environment, an office environment, or a server farm), while in other embodiments the processors may be distributed across a number of locations.</p><heading id="h-0009" level="1">CONCLUSION</heading><p id="p-0098" num="0097">Although the embodiments of the present disclosure have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader scope of the inventive subject matter. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof show, by way of illustration, and not of limitation, specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be used and derived therefrom, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description, therefore, is not to be taken in a limiting sense, and the scope of various embodiments is defined only by the appended claims, along with the full range of equivalents to which such claims are entitled.</p><p id="p-0099" num="0098">Such embodiments of the inventive subject matter may be referred to herein, individually and/or collectively, by the term &#x201c;invention&#x201d; merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. Thus, although specific embodiments have been illustrated and described herein, it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments. Combinations of the above embodiments, and other embodiments not specifically described herein, will be apparent, to those of skill in the art, upon reviewing the above description.</p><p id="p-0100" num="0099">In this document, the terms &#x201c;a&#x201d; or &#x201c;an&#x201d; are used, as is common in patent documents, to include one or more than one, independent of any other instances or usages of &#x201c;at least one&#x201d; or &#x201c;one or more.&#x201d; In this document, the term &#x201c;or&#x201d; is used to refer to a nonexclusive or, such that &#x201c;A or B&#x201d; includes &#x201c;A but not B,&#x201d; &#x201c;B but not A,&#x201d; and &#x201c;A and B,&#x201d; unless otherwise indicated. In the appended claims, the terms &#x201c;including&#x201d; and &#x201c;in which&#x201d; are used as the plain-English equivalents of the respective terms &#x201c;comprising&#x201d; and &#x201c;wherein.&#x201d; Also, in the following claims, the terms &#x201c;including&#x201d; and &#x201c;comprising&#x201d; are open-ended; that is, a system, device, article, or process that includes elements in addition to those listed after such a term in a claim is still deemed to fall within the scope of that claim.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system comprising:<claim-text>at least one hardware processor; and</claim-text><claim-text>a memory storing instructions that cause the at least one hardware processor to perform operations comprising:</claim-text><claim-text>receiving, by a database system, raw input data from a source table provided by a machine learning development environment, the source table comprising multiple rows where each row includes multiple columns, the raw input data comprising values in a first format, the values comprising input features corresponding to datasets included in the raw input data for machine learning models, the machine learning development environment comprising an external system from the database system and is accessed by a plurality of different users that are external to the database system;</claim-text><claim-text>generating cell data for a feature store table based at least in part on the values from the source table; and</claim-text><claim-text>performing at least one database operation to generate the feature store table including at least table metadata, column metadata, and the generated cell data,</claim-text><claim-text>the generated feature store table comprising a second format that causes more efficient processing of data by the database system using a single query on the feature store table compared to processing the raw input data from the source table,</claim-text><claim-text>the second format comprising multiple columns of data from the table metadata, the column metadata, and the generated cell data being stored in single column in the feature store table.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating cell data comprises:<claim-text>generating a cell data table, the cell data table including a set of rows, each row comprising particular cell data, the cell data comprising a table identifier, a row identifier, a column ID, and a value for each corresponding column value from the source table.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the cell data table includes a number of columns less than a number of columns of the source table.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations further comprise:<claim-text>based at least in part on the source table, generating table metadata corresponding to the source table; and</claim-text><claim-text>based at least in part on the received raw input data, generating column metadata corresponding to values from the source table.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein generating table metadata comprises:<claim-text>generating a table metadata table, the table metadata table including a set of rows, each row comprising particular metadata, the particular metadata comprising at least a timestamp for when the source table was created, description information, table identifier, or a tag string.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein generating column metadata comprises:<claim-text>generating a column metadata table, the column metadata table including a set of rows, each row comprising particular metadata, the particular metadata comprising a timestamp for when data was ingested, data type, tag string, table identifier, column identifier, or ordinal position.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one database operation comprises an unpivot operation, or a union all insert operation.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the unpivot operation performs a particular operation to convert multiple columns of data from the generated table metadata, the generated column metadata, and the generated cell data into a single row in a single column of data in the feature store table.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the union all insert operation comprises:<claim-text>combining data from the table metadata, the column metadata, and the generated cell data; and</claim-text><claim-text>inserting the combined data into the feature store table as a one or more rows of data, the one or more rows of data being stored in a single column of the feature store table.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the feature store table comprises multiple rows, each row comprising multiple columns, the multiple columns including a first column including data for a row, a second column including data for a row identifier, and a third column including data from the generated table metadata, the generated column metadata, and the generated cell data.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A method comprising:<claim-text>receiving, by a database system, raw input data from a source table provided by a machine learning development environment, the source table comprising multiple rows where each row includes multiple columns, the raw input data comprising values in a first format, the values comprising input features corresponding to datasets included in the raw input data for machine learning models, the machine learning development environment comprising an external system from the database system and is accessed by a plurality of different users that are external to the database system;</claim-text><claim-text>generating cell data for a feature store table based at least in part on the values from the source table; and</claim-text><claim-text>performing at least one database operation to generate the feature store table including at least table metadata, column metadata, and the generated cell data,</claim-text><claim-text>the generated feature store table comprising a second format that causes more efficient processing of data by the database system using a single query on the feature store table compared to processing the raw input data from the source table,</claim-text><claim-text>the second format comprising multiple columns of data from the table metadata, the column metadata, and the generated cell data being stored in single column in the feature store table.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein generating cell data comprises:<claim-text>generating a cell data table, the cell data table including a set of rows, each row comprising particular cell data, the cell data comprising a table identifier, a row identifier, a column ID, and a value for each corresponding column value from the source table.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the cell data table includes a number of columns less than a number of columns of the source table.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:<claim-text>based at least in part on the source table, generating table metadata corresponding to the source table; and</claim-text><claim-text>based at least in part on the received raw input data, generating column metadata corresponding to values from the source table.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein generating table metadata comprises:<claim-text>generating a table metadata table, the table metadata table including a set of rows, each row comprising particular metadata, the particular metadata comprising at least a timestamp for when the source table was created, description information, table identifier, or a tag string.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein generating column metadata comprises:<claim-text>generating a column metadata table, the column metadata table including a set of rows, each row comprising particular metadata, the particular metadata comprising a timestamp for when data was ingested, data type, tag string, table identifier, column identifier, or ordinal position.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the at least one database operation comprises an unpivot operation, or a union all insert operation.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the unpivot operation performs a particular operation to convert multiple columns of data from the generated table metadata, the generated column metadata, and the generated cell data into a single row in a single column of data in the feature store table.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the union all insert operation comprises:<claim-text>combining data from the table metadata, the column metadata, and the generated cell data; and</claim-text><claim-text>inserting the combined data into the feature store table as a one or more rows of data, the one or more rows of data being stored in a single column of the feature store table.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the feature store table comprises multiple rows, each row comprising multiple columns, the multiple columns including a first column including data for a row, a second column including data for a row identifier, and a third column including data from the generated table metadata, the generated column metadata, and the generated cell data.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A computer-storage medium comprising instructions that, when executed by one or more processors of a machine, configure the machine to perform operations comprising:<claim-text>receiving, by a database system, raw input data from a source table provided by a machine learning development environment, the source table comprising multiple rows where each row includes multiple columns, the raw input data comprising values in a first format, the values comprising input features corresponding to datasets included in the raw input data for machine learning models, the machine learning development environment comprising an external system from the database system and is accessed by a plurality of different users that are external to the database system;</claim-text><claim-text>generating cell data for a feature store table based at least in part on the values from the source table; and</claim-text><claim-text>performing at least one database operation to generate the feature store table including at least table metadata, column metadata, and the generated cell data,</claim-text><claim-text>the generated feature store table comprising a second format that causes more efficient processing of data by the database system using a single query on the feature store table compared to processing the raw input data from the source table,</claim-text><claim-text>the second format comprising multiple columns of data from the table metadata, the column metadata, and the generated cell data being stored in single column in the feature store table.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The computer-storage medium of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein generating cell data comprises:<claim-text>generating a cell data table, the cell data table including a set of rows, each row comprising particular cell data, the cell data comprising a table identifier, a row identifier, a column ID, and a value for each corresponding column value from the source table.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The computer-storage medium of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the cell data table includes a number of columns less than a number of columns of the source table.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The computer-storage medium of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the operations further comprise:<claim-text>based at least in part on the source table, generating table metadata corresponding to the source table; and</claim-text><claim-text>based at least in part on the received raw input data, generating column metadata corresponding to values from the source table.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The computer-storage medium of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein generating table metadata comprises:<claim-text>generating a table metadata table, the table metadata table including a set of rows, each row comprising particular metadata, the particular metadata comprising at least a timestamp for when the source table was created, description information, table identifier, or a tag string.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The computer-storage medium of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein generating column metadata comprises:<claim-text>generating a column metadata table, the column metadata table including a set of rows, each row comprising particular metadata, the particular metadata comprising a timestamp for when data was ingested, data type, tag string, table identifier, column identifier, or ordinal position.</claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The computer-storage medium of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the at least one database operation comprises an unpivot operation, or a union all insert operation.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The computer-storage medium of <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein the unpivot operation performs a particular operation to convert multiple columns of data from the generated table metadata, the generated column metadata, and the generated cell data into a single row in a single column of data in the feature store table.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The computer-storage medium of <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein the union all insert operation comprises:<claim-text>combining data from the table metadata, the column metadata, and the generated cell data; and</claim-text><claim-text>inserting the combined data into the feature store table as a one or more rows of data, the one or more rows of data being stored in a single column of the feature store table.</claim-text></claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The computer-storage medium of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the feature store table comprises multiple rows, each row comprising multiple columns, the multiple columns including a first column including data for a row, a second column including data for a row identifier, and a third column including data from the generated table metadata, the generated column metadata, and the generated cell data.</claim-text></claim></claims></us-patent-application>