<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005532A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005532</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364029</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>13</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>13</main-group><subgroup>004</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>13</main-group><subgroup>0028</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>13</main-group><subgroup>0026</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>2013</main-group><subgroup>0045</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR ADAPTIVE SELF-REFERENCED READS OF MEMORY DEVICES</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Micron Technology, Inc.</orgname><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Mirichigni</last-name><first-name>Graziano</first-name><address><city>Vimercate (MB)</city><country>IT</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Muzzetto</last-name><first-name>Riccardo</first-name><address><city>Arcore (MB)</city><country>IT</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Bedeschi</last-name><first-name>Ferdinando</first-name><address><city>Biassono (MB)</city><country>IT</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods and systems include memory devices with a memory array comprising a plurality of memory cells. The memory devices include a control circuit operatively coupled to the memory array and configured to receive a read request for data and to apply a first voltage at a first time duration to the memory array based on the read request. The control circuit is additionally configured to count a number of the plurality of memory cells that have switched to an active read state based on the first voltage and to derive a second time duration. The control circuit is further configured to apply a second voltage at the second duration to the memory array. The control circuit is also configured to return the data based at least on bits stored in a first and a second set of the plurality of memory cells.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="180.34mm" wi="138.26mm" file="US20230005532A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="196.93mm" wi="140.29mm" file="US20230005532A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="220.73mm" wi="119.55mm" orientation="landscape" file="US20230005532A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="176.19mm" wi="125.14mm" orientation="landscape" file="US20230005532A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="241.30mm" wi="136.91mm" orientation="landscape" file="US20230005532A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="234.78mm" wi="119.13mm" orientation="landscape" file="US20230005532A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="162.64mm" wi="139.28mm" file="US20230005532A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="237.07mm" wi="146.90mm" file="US20230005532A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="241.30mm" wi="151.13mm" orientation="landscape" file="US20230005532A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="227.41mm" wi="135.97mm" orientation="landscape" file="US20230005532A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="226.99mm" wi="149.69mm" orientation="landscape" file="US20230005532A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="242.40mm" wi="149.44mm" orientation="landscape" file="US20230005532A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="246.72mm" wi="148.84mm" orientation="landscape" file="US20230005532A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="102.87mm" wi="125.56mm" file="US20230005532A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">This section is intended to introduce the reader to various aspects of art that may be related to various aspects of the present techniques, which are described and/or claimed below. This discussion is believed to be helpful in providing the reader with background information to facilitate a better understanding of the various aspects of the present disclosure. Accordingly, it should be understood that these statements are to be read in this light and not as admissions of prior art.</p><p id="p-0003" num="0002">Generally, a computing system includes processing circuitry, such as one or more processors or other suitable components, and memory devices, such as chips or integrated circuits. One or more memory devices may be used on a memory module, such as a dual in-line memory module (DIMM), to store data accessible to the processing circuitry. For example, based on a user input to the computing system, the processing circuitry may request that a memory module retrieve data corresponding to the user input from its memory devices. In some instances, the retrieved data may include firmware, or instructions executable by the processing circuitry to perform an operation and/or may include data to be used as an input for the operation. In addition, in some cases, data output from the operation may be stored in memory, such as to enable subsequent retrieval of the data from the memory.</p><p id="p-0004" num="0003">Some memory devices include memory cells that may be accessed by turning on a transistor that couples the memory cell (e.g., a capacitor) with a wordline or a bitline. In contrast, threshold-type memory devices include memory devices that are accessed by providing a voltage across a memory cell, where the data value is stored based on the threshold voltage of the memory cell. For example, the data value may be based on whether the threshold voltage of the memory cell is exceeded and, in response to the voltage provided across the memory cell, the memory cell conducts current. The data value stored may be changed, such as by applying a voltage sufficient to change the threshold voltage of the memory cell. One example of a threshold-type memory cell may be a cross-point memory cell.</p><p id="p-0005" num="0004">With threshold-type memories, wordlines and bitlines are used to transmit selection signals to respective memory cells. The selection signals may include signals characterized by voltage levels used to save data into or retrieve data from the memory cells. The wordlines and bitlines may couple to selection signal sources through drivers. The memory cells may be organized into one or more layers of memory cells, such as layers defined between overlapping wordlines and bitlines. These layers may be referred to as decks (e.g., memory decks). Various combinations of the wordlines, bitlines, and/or decoders may be referenced for use in a particular memory operation using addresses (e.g., memory addresses). The address may indicate which memory cell is to be selected using a combination of signals from the wordlines, bitlines, and/or decoders, and a particular value of the address may be based on ranges of addresses of the memory device. As may be appreciated, some memory cells at some intersections of the wordlines and bitlines may be farther from drivers than other memory cells at other intersections. To cause memory cells at various distances to be turned on from the respective decoders, the memory device may utilize one or more step voltages. It may be beneficial to improve read techniques for threshold-type memories.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">Various aspects of this disclosure may better be understood upon reading the following detailed description and upon reference to the drawings in which:</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a simplified block diagram illustrating certain features of a memory device including a memory array of memory cells, according to an embodiment of the present disclosure;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a side-view of a diagram illustrating the portion of the memory array of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an embodiment of the present disclosure;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of an embodiment of the memory device of <figref idref="DRAWINGS">FIG. <b>1</b></figref> where the memory array has been partitioned into multiple partitions, according to an embodiment of the present disclosure;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of a user data pattern encoding, according to an embodiment of the present disclosure;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating two ramping shapes suitable for reading data for the memory array of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an embodiment of the present disclosure;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a graph of a bell curve distribution of bit data that may be stored in the memory array of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an embodiment of the present disclosure;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart of a process suitable for adaptively reading data stored in the memory array of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an embodiment of the present disclosure;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a graph of electrical voltages steps applied to the memory array of <figref idref="DRAWINGS">FIG. <b>1</b></figref> to read data, according to an embodiment of the present disclosure;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a timing diagram illustrating fixed latency data transfers for certain systems that interface with the memory device of <figref idref="DRAWINGS">FIG. <b>1</b></figref> that may include fixed latency communications, according to an embodiment of the present disclosure;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a timing diagram illustrating a typical case read step and a worst case read step, according to an embodiment of the present disclosure;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a timing diagram having embodiments of a typical case read step and a worst case read step that may use a ready busy signal, according to an embodiment of the present disclosure;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a block diagram illustrating a partition architecture for the memory device of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an embodiment of the present disclosure; and</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>13</b></figref> a flowchart of a process that may be used to adaptively determine a time interval for a read step, according to an embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION</heading><p id="p-0020" num="0019">One or more specific embodiments will be described below. In an effort to provide a concise description of these embodiments, not all features of an actual implementation are described in the specification. It should be appreciated that in the development of any such actual implementation, as in any engineering or design project, numerous implementation-specific decisions must be made to achieve the developers' specific goals, such as compliance with system-related and business-related constraints, which may vary from one implementation to another. Moreover, it should be appreciated that such a development effort might be complex and time consuming, but would nevertheless be a routine undertaking of design, fabrication, and manufacture for those of ordinary skill having the benefit of this disclosure.</p><p id="p-0021" num="0020">Memories generally include an array of memory cells, where each memory cell is coupled between at least two access lines. For example, a memory cell may be coupled to access lines, such as a bitline and a wordline. Each access line may be coupled to a large number of memory cells. To select a memory cell, one or more drivers may provide selection signals (e.g., a voltage and/or a current) on the access lines to access storage capacities of the memory cell. By applying voltages and/or currents to the respective access lines, the memory cell may be accessed, such as to write data to the memory cell and/or read data from the memory cell.</p><p id="p-0022" num="0021">In some memories, memory cells of the array may be organized into decks of memory cells. A deck of memory cells may be a single plane of memory cells disposed between a layer of wordlines and a layer of bitlines. The array may be a stack of decks that includes any number of decks of memory cells (e.g., 1 deck, 2 decks, 4 decks, any number of decks) as different layers of the array.</p><p id="p-0023" num="0022">In some embodiments, a logic state of 1 (e.g., a SET state of a memory cell, which may also be referred to as a SET cell or bit) may correspond to a set of threshold voltages lower than a set of threshold voltages associated with a logic state of 0 (e.g., a RESET state of a memory cell, which may also be referred to as a RESET cell or bit). Accordingly, a lower voltage may be used to read SET cells when compared to RESET cells. An adaptive read technique may include application of a voltage (e.g., a read voltage) to a memory array that is configured to activate a group of memory cells containing encoded user data. In some embodiments, the read voltage may have a constant rate of increase with respect to time, e.g., exhibiting a ramp shape. In other embodiments, the read voltage may have an increasing staircase shape such that a first voltage is applied for a first period of time followed by a second different voltage for a second period of time, and so on.</p><p id="p-0024" num="0023">The applied voltage may initiate a series of switching events by activating the group of memory cells storing the encoded user data. The switching event may be attributed to a memory cell turning on (e.g., conducting an appreciable amount of current) when the applied voltage across the memory cell exceeds its threshold voltage (VTH). Hence, initiating the series of switching events in response to the increasing read voltage may be similar to identifying memory cells in an ascending order in terms of their threshold voltage values.</p><p id="p-0025" num="0024">The adaptive read techniques described herein may derive a more optimal number of steps, a more optimal voltage for a step (e.g., start voltage), and/or a more optimal time duration for each step. In certain embodiments, statistical assumptions based on SET cell distributions such as a minimum, a mean, a sigma, and the like, may be used to derive a staircase shape that may start from a more optimal voltage and apply an adaptively derived number of steps. Additionally or alternatively, the step duration may also be adaptively derived, based on, for example, a number of cells that are turning on at a given step. For example, a step may be turned on for a longer duration if there are memory cells still turning on when compared to a step that has less memory cells that turn on the given voltage.</p><p id="p-0026" num="0025">Indeed, the embodiments described herein may be used to adaptively adjust a time that a voltage applied for a read step. In certain embodiments, the adaptive adjustment includes using a lookup table (LUT). The LUT may include a current count of a number of memory cells that have been activated, and a time duration to use for the next step. Accordingly, a more optimized read voltage staircase shape may be derived.</p><p id="p-0027" num="0026">Turning now to the figures, <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of a portion of a memory device <b>100</b>. The memory device <b>100</b> may be any suitable form of memory, such as non-volatile memory (e.g., a cross-point memory) and/or volatile memory. The memory device <b>100</b> may include one or more memory cells <b>102</b>, one or more bitlines <b>104</b> (e.g., <b>104</b>-<b>0</b>, <b>104</b>-<b>1</b>, <b>104</b>-<b>2</b>, <b>104</b>-<b>3</b>), one or more wordlines <b>106</b> (e.g., <b>106</b>-<b>0</b>, <b>106</b>-<b>1</b>, <b>106</b>-<b>2</b>, <b>106</b>-<b>3</b>), one or more wordline decoders <b>108</b> (e.g., wordline decoding circuitry), and one or more bitline decoders <b>110</b> (e.g., bitline decoding circuitry). The memory cells <b>102</b>, bitlines <b>104</b>, wordlines <b>106</b>, wordline decoders <b>108</b>, and bitline decoders <b>110</b> may form a memory array <b>112</b>.</p><p id="p-0028" num="0027">Each of the memory cells <b>102</b> may include a selector and/or a storage element. When a voltage across a selector of a respective memory cell reaches a threshold, the storage element may be accessed to read a data value from and/or write a data value to the storage element. In some embodiments, each of the memory cells <b>102</b> may not include a separate selector and storage element, and have a configuration such that the memory cell nonetheless acts as having a selector and storage element (e.g., may include use of a material that behaves both like a selector material and a storage element material). For ease of discussion, <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be discussed in terms of bitlines <b>104</b>, wordlines <b>106</b>, wordline decoders <b>108</b>, and bitline decoders <b>110</b>, but these designations are non-limiting. The scope of the present disclosure should be understood to cover memory cells <b>102</b> that are coupled to multiple access lines and accessed through respective decoders, where an access line may be used to store data into a memory cell and read data from the memory cell <b>102</b>. Furthermore, the memory device <b>100</b> may include other circuitry, such as a biasing circuitry configured to bias the bitlines <b>104</b> or wordlines <b>106</b> in a corresponding direction. For example, the bitlines <b>104</b> may be biased with positive biasing circuitry while the wordlines <b>106</b> may be biased with negative biasing circuitry.</p><p id="p-0029" num="0028">The bitline decoders <b>110</b> may be organized in multiple groups of decoders. For example, the memory device <b>100</b> may include a first group of bitline decoders <b>114</b> (e.g., multiple bitline decoders <b>110</b>) and/or a second group of bitline decoders <b>116</b> (e.g., different group of multiple bitline decoders <b>110</b>). Similarly, the wordline decoders <b>108</b> may also be arranged into groups of wordline decoders <b>108</b>, such as a first group of wordline decoders <b>118</b> and/or a second group of wordline decoders <b>120</b>. Decoders may be used in combination with each other to drive the memory cells <b>102</b> (e.g., such as in pairs and/or pairs of pairs on either side of the wordlines <b>106</b> and/or bitlines <b>104</b>) when selecting a target memory cell <b>102</b>A from the memory cells <b>102</b>. For example, bitline decoder <b>110</b>-<b>3</b> may operate in conjunction with bitline decoder <b>110</b>&#x2032;-<b>3</b> and/or with wordline decoders <b>108</b>-<b>0</b>, <b>108</b>&#x2032;-<b>0</b> to select the memory cell <b>102</b>A. As may be appreciated herein, decoder circuitry on either ends of the wordlines <b>106</b> and/or bitlines <b>104</b> may be different.</p><p id="p-0030" num="0029">Each of the bitlines <b>104</b> and/or wordlines <b>106</b> may be metal traces disposed in the memory array <b>112</b>, and formed from metal, such as copper, aluminum, silver, tungsten, or the like. Accordingly, the bitlines <b>104</b> and the wordlines <b>106</b> may have a uniform resistance per length and a uniform parasitic capacitance per length, such that a resulting parasitic load may uniformly increase per length. It is noted that the depicted components of the memory device <b>100</b> may include additional circuitry not particularly depicted and/or may be disposed in any suitable arrangement. For example, a subset of the wordline decoders <b>108</b> and/or bitline decoders <b>110</b> may be disposed on different sides of the memory array <b>112</b> and/or on a different physical side of any plane including the circuitries.</p><p id="p-0031" num="0030">The memory device <b>100</b> may also include a control circuit <b>122</b>. The control circuit <b>122</b> may communicatively couple to respective of the wordline decoders <b>108</b> and/or bitline decoders <b>110</b> to perform memory operations, such as by causing the decoding circuitry (e.g., a subset of the wordline decoders <b>108</b> and/or bitline decoders <b>110</b>) to generate selection signals (e.g., selection voltage and/or selection currents) for selecting a target of the memory cells. In some embodiments, a positive voltage and a negative voltage may be provided on one or more of the bitlines <b>104</b> and/or wordlines <b>106</b>, respectively, to a target of the memory cells <b>102</b>. In some embodiments, the decoder circuits may provide biased electrical pulses (e.g., voltage and/or current) to the access lines to access the memory cell. The electrical pulse may be a square pulse, or in other embodiments, other shaped pulses may be used. In some embodiments, a voltage provided to the access lines may be a constant voltage.</p><p id="p-0032" num="0031">Activating the decoder circuits may enable the delivery of an electrical pulse to the target of the memory cells <b>102</b> such that the control circuit <b>122</b> is able to access data storage of the target memory cell, such as to read from or write to the data storage. After a target of the memory cells <b>102</b> is accessed, data stored within storage medium of the target memory cell may be read or written. Writing to the target memory cell may include changing the data value stored by the target memory cell. As previously discussed, the data value stored by a memory cell may be based on a threshold voltage of the memory cell. In some embodiments, a memory cell may be &#x201c;set&#x201d; to have a first threshold voltage or may be &#x201c;reset&#x201d; to have a second threshold voltage. A SET memory cell may have a lower threshold voltage than a RESET memory cell. By setting or resetting a memory cell, different data values may be stored by the memory cell. Reading a target of the memory cells <b>102</b> may include determining whether the target memory cell was characterized by the first threshold voltage and/or by the second threshold voltage. In this way, a threshold voltage window may be analyzed to determine a value stored by the target of the memory cells <b>102</b>. The threshold voltage window may be created by applying programming pulses with opposite polarity biasing to the memory cells <b>102</b> (e.g., in particular, writing to selector device (SD) material of the memory cell) and reading the memory cells <b>102</b> (e.g., in particular, reading a voltage stored by the SD material of the memory cell <b>102</b>) using a signal with a given (e.g., known) fixed polarity. In some embodiments, a selection input may be received from a host device <b>128</b>, such as a host processor reading data from the memory device <b>100</b> to cause the control circuit <b>122</b> to access particular memory cells <b>102</b>.</p><p id="p-0033" num="0032">The control circuit <b>122</b> may additionally adaptively read data from the memory cells <b>102</b>, for example, by applying a voltage in a certain pattern (e.g., staircase, ramp) to activate a group of memory cells storing data (e.g., encoded data). The voltage may be applied via bitlines <b>104</b> and wordlines <b>106</b>. The applied read voltage may then cause an activation event (e.g., switching event) readable via the wordline decoders <b>108</b> and the bitline decoders <b>110</b>. SET cells may activate at a first voltage threshold (Vth) lower than a second Vth of RESET cells. The voltage thresholds of the SET cells may be included in a first bell curve shape, while the voltage thresholds of the RESET cells may be included in a second bell curve shape. The first bell curve shape may not overlap the second bell curve shape. That is, all voltage thresholds in the first bell curve shape may be lower than any one of the voltage thresholds in the second voltage shape.</p><p id="p-0034" num="0033">In certain embodiments, statistical assumptions based on cell distributions such as a minimum, a mean, a sigma, and the like, may be used to derive a staircase shape used to apply a read voltage to the array <b>112</b>. The staircase shape may start from a more optimal voltage greater than 0 volts and apply an adaptively derived number of staircase steps. Additionally or alternatively, the step duration may also be adaptively derived, based on, for example, a number of cells that are turning on at a given step.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram illustrating a portion of a memory array <b>130</b> in accordance with an embodiment of the present disclosure. Inside the memory array <b>130</b>, the memory cells are located at intersections of certain lines (e.g., orthogonal lines). The memory array <b>130</b> may be a cross-point array including wordlines <b>106</b> (e.g., <b>106</b>-<b>0</b>, <b>106</b>-<b>1</b>, . . . , <b>106</b>-N) and bitlines <b>104</b> (e.g., <b>104</b> -<b>0</b>, <b>104</b>-<b>1</b>, . . . , <b>104</b>-M). A memory cell <b>102</b> may be located at each of the intersections of the wordlines <b>106</b> and bitlines <b>104</b>. The memory cells <b>102</b> may function in a two-terminal architecture (e.g., with a particular wordline <b>106</b> and the bitline <b>104</b> combination serving as the electrodes for the memory cell <b>102</b>).</p><p id="p-0036" num="0035">Each of the memory cells <b>102</b> may be resistance variable memory cells, such as resistive random-access memory (RRAM) cells, conductive-bridging random access memory (CBRAM) cells, phase-change memory (PCM) cells, and/or spin-transfer torque magnetic random-access memory (STT-RAM) cells, among other types of memory cells. Each of the memory cells <b>102</b> may include a memory element (e.g., memory material) and a selector element (e.g., a selector device (SD) material) and/or a material layer that functionally replaces a separate memory element layer and selector element layer. The selector element (e.g., SD material) may be disposed between a wordline contact (e.g., a layer interface between a respective one of the wordlines <b>106</b> and the memory material) and a bitline contact (e.g., a layer interface between a respective one of the bitlines <b>104</b> and the selector element) associated with a wordline or bitline forming the memory cell. Electrical signals may transmit between the wordline contact and the bitline contact when reading or writing operations are performed to the memory cell.</p><p id="p-0037" num="0036">The selector element may be a diode, a non-ohmic device (NOD), or a chalcogenide switching device, among others, or formed similar to the underlying cell structure. The selector element may include, in some examples, selector material, a first electrode material, and a second electrode material. The memory element of memory cell <b>102</b> may include a memory portion of the memory cell <b>102</b> (e.g., the portion programmable to different states). For instance, in resistance variable memory cells <b>102</b>, a memory element can include the portion of the memory cell having a resistance that is programmable to particular levels corresponding to particular states responsive to applied programming voltage and/or current pulses. In some embodiments, the memory cells <b>102</b> may be characterized as threshold-type memory cells that are selected (e.g., activated) based on a voltage and/or current crossing a threshold associated with the selector element and/or the memory element. Embodiments are not limited to a particular resistance variable material or materials associated with the memory elements of the memory cells <b>102</b>. For example, the resistance variable material may be a chalcogenide formed of various doped or undoped chalcogenide-based materials. Other examples of resistance variable materials that may be used to form storage elements include binary metal oxide materials, colossal magnetoresistive materials, and/or various polymer-based resistance variable materials, among others.</p><p id="p-0038" num="0037">In operation, the memory cells <b>102</b> may be programmed by applying a voltage (e.g., a write voltage) across the memory cells <b>102</b> via selected wordlines <b>106</b> and bitlines <b>104</b>. A sensing (e.g., read) operation may be performed to determine a state of one or more memory cells <b>102</b> by sensing current. For example, the current may be sensed on one or more bitlines <b>104</b> one or more wordlines <b>106</b> corresponding to the respective memory cells <b>102</b> in response to a particular voltage applied to the selected of the bitlines <b>104</b> wordlines <b>106</b> forming the respective memory cells <b>102</b>.</p><p id="p-0039" num="0038">As illustrated, the memory array <b>130</b> may be arranged in a cross-point memory array architecture (e.g., a three-dimensional (3D) cross-point memory array architecture) that extends in any direction (e.g., x-axis, y-axis, z-axis). The multi-deck cross-point memory array <b>130</b> may include a number of successive memory cells (e.g., <b>102</b>B, <b>102</b>C, <b>102</b>D) disposed between alternating (e.g., interleaved) decks of wordlines <b>106</b> and bitlines <b>104</b>. The number of decks may be expanded in number or may be reduced in number and should not be limited to the depicted volume or arrangement. Each of the memory cells <b>102</b> may be formed between wordlines <b>106</b> and bitlines <b>104</b> (e.g., between two access lines), such that a respective one of the memory cells <b>102</b> may be directly electrically coupled with (e.g., electrically coupled in series) with its respective pair of the bitlines <b>104</b> and wordlines <b>106</b> and/or formed from electrodes (e.g., contacts) made by a respective portion of metal of a respective pair of bitlines <b>104</b> and wordlines <b>106</b>. For example, the memory array <b>130</b> may include a three-dimensional matrix of individually-addressable (e.g., randomly accessible) memory cells <b>102</b> that may be accessed for data operations (e.g., sense and write) at a granularity as small as a single storage element and/or multiple storage elements. In some cases, the memory array <b>130</b> may include more or fewer bitlines <b>104</b>, wordlines <b>106</b>, and/or memory cells <b>102</b> than shown in the examples of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Each deck may include one or more memory cells <b>102</b> aligned in a same plane.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of an embodiment of a memory device <b>200</b> where the memory array <b>112</b> has been partitioned into multiple partitions <b>202</b> (e.g., partitions <b>202</b>-<i>a</i>, <b>202</b>-<i>b </i>. . . <b>202</b>-<i>n</i>). Each partition <b>202</b> may include an associated local control circuit <b>204</b> (e.g., local control circuit <b>204</b>-<i>a</i>, <b>204</b>-<i>b </i>. . . <b>204</b>-<i>n</i>). In some embodiments, the local control circuit <b>204</b> may be included in the control circuit <b>122</b> or interface with the control circuit <b>122</b>. Accordingly, each partition <b>202</b> may operate independent from other partitions <b>202</b>, which may enable parallel reads and writes of the memory array <b>112</b>.</p><p id="p-0041" num="0040">In some embodiments, the memory array <b>112</b> is a 3DXP memory array, and each individual partition <b>220</b> is a 1 Gigabyte partition. The memory device <b>200</b> may include 16 of the 1 Gigabyte partitions. In some examples, the memory within each partition <b>202</b> may be accessed with 16 bytes of granularity, thus providing 26 bits of memory address information to memory array <b>110</b>. Further, four bits can be used in this example to provide partition identification. It is to be noted that the particular partition sizes, number of partitions, and bits used for the commands and address operations described above are provided as examples only, and in other embodiments different partition sizes, numbers of partitions, and command/address bits may be used.</p><p id="p-0042" num="0041">In some embodiments, the data stored in the memory array <b>112</b> may be encoded, for example, by adding certain encoding bits. The encoding data bits may enable faster reads, as further described below. Turning now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the figure illustrates an embodiment of a user data pattern <b>400</b> that may be used by the adaptive read techniques described herein. The user data pattern <b>400</b> illustrates a non-encoded user data <b>402</b> which may then be encoded as a user data <b>404</b>. The non-encoded user data <b>402</b> may be referred to as an input vector in some cases. The encoded user data <b>404</b> may include additional bits (e.g., b1 through b4). The additional bits may be referred to as flip-bits and may indicate a status of the user data, as described below.</p><p id="p-0043" num="0042">The adaptive read may include an encoding technique for generating an encoded user data having a weight (e.g., a number of bits having the logic state of 1 out of a total number of bits in the user data) within a predetermined interval. In some embodiments, the interval is 50% through (50+50/k)% where k is a predetermined factor further described below. In some cases, the interval is expressed as [50%, (50+50/k)%]. For example, when k is equal to 4, the interval may be 50% to 62.5% (e.g., [50%, 62.5%]), 40% to 70%. A different weight other than 50% as a lower bound of the interval may be used. Illustrations in <figref idref="DRAWINGS">FIG. <b>4</b></figref> refer to 50% as a lower bound of the interval for a more concise description of the depicted features; however, other alternatives and different variations may be contemplated and fall within the scope of this disclosure.</p><p id="p-0044" num="0043">By way of example, the user data <b>402</b> is shown as having 16 bits (e.g., a1 through a16). In a case in which k is equal to 4, the predetermined interval for the encoded user data to meet may be of [50%, 62.5%]. Various forms of the encoded user data <b>404</b>, when k=4, are illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The encoding technique may add k number of flip-bits (e.g., b1 through b4 when k=4) to the user data <b>402</b> (e.g., a1 through a16) to generate the encoded user data <b>404</b>. In addition, the original user data pattern may be partitioned into k number of portions (e.g., four portions or segments when k=4). For example, a first portion may include bits a1 through a4. The first portion may be associated with a first flip bit, b1. A second portion may include bits a5 through a8. The second portion may be associated with the second flip bit, b2. A third portion may include bits a9 through a12. The third portion may be associated with the third flip bit, b3. A fourth portion may include bits a13 through a16. The fourth portion may be associated with the fourth flip bit, b4. In some embodiments, initial values of b1 through b4 correspond to the logic state of 1 (e.g., 1111 of the encoded user data pattern <b>406</b>). The logic state of 1 in the flip-bits may indicate that corresponding portions of the original user data are not inverted. Conversely, the logic state of 0 in the flip-bits may indicate that corresponding portions of the original user data are inverted.</p><p id="p-0045" num="0044">As described above, the adaptive read techniques described herein may determine a weight of the encoded user data pattern <b>404</b> as a percentage (e.g., adding the logic 1 bits and dividing the sum by the total number of unencoded bits). For example, the encoded user data <b>560</b>-<i>a </i>has a weight of 25% (e.g., 4 bits having the logic state of 1 out of 16 bits in the user data), which does not meet the predetermined interval of [50%, 62.5%] when k=4. Further, the encoding technique may vary the logic states of the flip-bits throughout all possible combinations of logic states of the flip-bits to find a particular encoded user data that has a particular weight within the predetermined interval (e.g., an interval of [50%, 62.5%] when k=4). When there are k flip-bits (e.g., k=4), there are a total of 2{circumflex over (&#x2003;)}k (e.g., <b>2</b>{circumflex over (&#x2003;)}<b>4</b>=<b>16</b> ) combinations, such as 1111, 1110, 1101, 1100, . . . , 0001, and 0000.</p><p id="p-0046" num="0045">When a logic state of a flip-bit corresponds to the logic state of 0, the adaptive read may invert the logic states of the corresponding portion of the user data and evaluate a weight. As illustrated, user data <b>406</b> does not include any inversions, and thus all flip-bits are set to 1. Inversion of data may then occur. By way of example, when the flip-bits are 1110 as shown in the encoded user data <b>408</b>, the logic states of the fourth portion (e.g., bits a13 through a16) are inverted to 1001 from 0110. Then, the encoding technique may determine that the encoded user data pattern <b>408</b> has a weight of 25% (e.g., 4 bits having the logic state of 1 out of 16 bits in the user data), which does not meet the predetermined condition of the weight within the interval of [50%, 62.5%]. The encoding technique may restore the logic states of the fourth portion back to 0110 and vary the content of the flip-bits to a next combination (e.g., 1101 as shown in the encoded user data <b>410</b>). The encoding technique may invert the logic states of the third portion (e.g., bits a9 through a12) to 1011 from 0100 as shown in the encoded user data <b>410</b> and determine that the encoded user data pattern <b>410</b> has a weight of 38% (e.g., 6 bits having the logic state of 1 out of 16 bits in the user data), which also does not meet the predetermined condition of the weight within the interval of [50%, 62.5%].</p><p id="p-0047" num="0046">The adaptive read may continue varying the content of the flip-bits, inverting logical values of the bits of corresponding portions of the user data according to the flip-bits, and thereby evaluating weights of the encoded user data until an encoded user data meets the predetermined condition (e.g., the interval of [50%, 62.5%]). For example, the encoded user data <b>412</b> has a weight of 38% and does not meet the predetermined condition of [50%, 62.5%] weight interval. The encoded user data pattern <b>414</b> has the flip-bit contents of 1011 and the second portion of the user data (e.g., bits a5 through a8) are inverted to 1111 from 0000. The weight of the encoded user data <b>414</b> is 50% (e.g., 8 bits having the logic state of 1 out of 16 bits in the user data), which meets the predetermined condition of having the weight between [50%, 62.5%].</p><p id="p-0048" num="0047">The coding technique may stop varying the content of the flip-bits based on determining that the encoded user data pattern <b>414</b> meets the predetermined condition and the coded user data pattern <b>414</b> may be stored in memory cells. The flip-bit contents (e.g., 1011) may then be used to decode the encoded user data when reading the encoded user data from the memory cells. For example, the logic states of bits a5 through a8 (e.g., 1111) of the encoded user data <b>414</b> may be inverted back to their original logic states (e.g., 0000) based on the value of the flip-bit, b2 (e.g., the logic state of 0 of b2 indicating the bits a5 through a8 having been inverted) when reading the encoded user data <b>414</b>. By storing encoded bits at a desired weight range, the techniques described herein may more quickly read the data stored in the memory device <b>100</b>.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating embodiments of two ramping shapes that may be used to read data stored in the memory device <b>100</b>. In the depicted embodiment, a first ramping shape (e.g., staircase shape) <b>450</b> is depicted, with an X axis representative of time and a Y axis representative of voltage. In the depicted embodiment, the ramping shape <b>450</b> includes four steps of fixed duration and number. A read command <b>452</b> may be received and the control circuit <b>122</b> may then initiate a first ramping step <b>454</b> to read data, for example, data <b>400</b>. The first ramping step <b>454</b> may initiate a series of switching events in the memory cells <b>102</b> that may be storing, for example, data having a logic 1.</p><p id="p-0050" num="0049">As mentioned earlier, the memory cells <b>102</b> storing the data may exhibit a bell curve distribution based on voltage. That is, the first ramping step <b>454</b> may not result in all memory cells <b>102</b> that store the logic 1 data exhibiting the switching behavior. Accordingly, additional voltage ramping may be applied. Further, the memory cells <b>102</b> that store logic 0 data may not exhibit the switching event until a voltage higher than that used to read all of the memory cells <b>102</b> storing logic 1 data is applied.</p><p id="p-0051" num="0050">Accordingly, the first ramping shape <b>450</b> may result in three additional ramp steps <b>456</b>, <b>458</b>, <b>460</b> being applied to the memory cells <b>102</b> so as to read both the logic 1 data (e.g., SET cell data) and the logic 0 data (e.g., RESET cell data). In the depicted embodiment, each of the ramp steps <b>454</b>, <b>456</b>, <b>458</b> and <b>460</b> includes the same time t. That is, each ramp step <b>454</b>, <b>456</b>, <b>458</b> and <b>460</b> executes for a time duration of t. After the last ramp step <b>460</b> is used to apply read voltage, the control circuit <b>122</b> may then use data output <b>462</b> to decode into return data, for example, to be provided to devices connected to the memory device <b>100</b>.</p><p id="p-0052" num="0051">In some cases, the data stored may be read more efficiently. For example, the adaptive read techniques may use variable number of ramping steps and/or variable ramp timings, as shown in ramping shape <b>464</b>. More specifically, the ramping shape <b>464</b> includes ramping steps <b>466</b>, <b>468</b>, and <b>470</b>, each of which may have a time t1, t2, tN different from each other. Indeed, the techniques described herein may adaptively determine both the number of steps to use, as well as the time to apply voltage for each step, as further described below.</p><p id="p-0053" num="0052">In certain embodiments, the techniques described herein may derive a distribution of SET cells and divide the SET distribution into multiple sigma regions (e.g., &#x2212;5 sigma to +5 sigma) in slices (e.g., 1 sigma slices), as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. More specifically, the figure illustrates an example SET distribution <b>500</b> for data that has been encoded as described above with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, to arrive, for example, at a weight of between [50%, 62.5%]. The SET distribution is shown as having a statistical mean (<o ostyle="single">X</o>), i.e., 0 sigma (0&#x3c3;), with an X axis representative of a read voltage threshold (Vth) value and a Y axis representative of a number of SET memory cells <b>102</b> that exhibit the switching event at the given Vth. That is, a cell may switch at a given Vth, thus showing that it is storing a logic 1.</p><p id="p-0054" num="0053">Due, for example, to the encoding scheme described above with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, approximately half (e.g., 50%) of the memory cells storing a logic 1 may thus exhibit the switching event at the mean voltage. That is, at <o ostyle="single">X</o> approximately half the SET memory cells <b>102</b> may have exhibited the switching event. The distribution <b>500</b> is further shown as having sigmas &#x2212;5&#x3c3;, &#x2212;4&#x3c3;, &#x2212;3&#x3c3;, &#x2212;2&#x3c3;, &#x2212;1&#x3c3;, +1&#x3c3;, +2&#x3c3;, +3&#x3c3;, +4&#x3c3;, +5&#x3c3; where a sigma is one standard deviation away from the mean. Accordingly, +2&#x3c3; is two standard deviations to the right of the mean, while &#x2212;2&#x3c3; is two standard deviations to the left of the mean, and so on. The standard deviation formula of</p><p id="p-0055" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mi>&#x3c3;</mi>  <mo>=</mo>  <msqrt>   <mfrac>    <mrow>     <mo>&#x2211;</mo>     <msup>      <mrow>       <mo>(</mo>       <mrow>        <mi>X</mi>        <mo>-</mo>        <mover>         <mi>X</mi>         <mo>_</mo>        </mover>       </mrow>       <mo>)</mo>      </mrow>      <mn>2</mn>     </msup>    </mrow>    <mrow>     <mi>n</mi>     <mo>-</mo>     <mn>1</mn>    </mrow>   </mfrac>  </msqrt> </mrow></math></maths></p><p id="p-0056" num="0000">where X is a Vth value for a data point in the X axis of a memory cell <b>102</b> and n is the total number of data points may be used to find 1 &#x3c3; or the first standard deviation and/or any other of the sigmas.</p><p id="p-0057" num="0054">As illustrated, region <b>502</b> is inside of 1 sigma, region <b>504</b> is inside of 2 sigma, region <b>506</b> is inside of 3 sigma, region <b>508</b> is inside of 4 sigma, and region <b>510</b> is inside of 5 sigma. Points outside of region <b>510</b> may then be included inside of 6 sigma. For a 64 bit codeword, the SET distribution <b>500</b> may be derived via 256 (i.e., 64&#xd7;4) data points (e.g., n=256) each data point (e.g., X) representative of a Vth for an individual SET memory cell <b>102</b> that stores a bit included in the codeword. The techniques described herein may adaptively define a ramping shape, such as the ramping shape <b>464</b>, by using a statistical distribution, such as the SET distribution <b>500</b>, to determine certain characteristics of the ramping shape (e.g., number of steps, voltages for a step, length of a step), as further described below.</p><p id="p-0058" num="0055"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart of an embodiment of a process <b>550</b> that may be used to adaptively determine a number of read steps and/or a voltage for the read step, for example, for a 64 bit codeword. The process <b>600</b> may be implemented, for example, by the control circuit <b>122</b>. The process <b>600</b>, in summary, may divide a SET distribution (e.g., distribution <b>500</b>) into an approach zone or range and a final step zone or range based, for example, by using the regions <b>502</b>, <b>504</b>, <b>506</b>, <b>508</b>, <b>510</b>. The approach zones may be used to apply one or more ramping steps, while the final step area may apply a single and final step, resulting in an adaptive ramping shape (e.g., ramping step <b>564</b>).</p><p id="p-0059" num="0056">In the depicted example, the process <b>550</b> may begin at block <b>552</b>, and then initialize (block <b>554</b>) one or more variables. For example, a Last variable representative of whether the process in is a final step area may be initialized to 0, while a Vramp variable representative of a voltage to apply to a step or ramp may also be initialized to zero. A Vstep variable representative of an amount to add to the voltage for each step may also be initialized. For example, the Vstep variable may be initialized to begin at a starting voltage (Vstart) value. In the depicted embodiment, the process <b>550</b> may then add (block <b>556</b>), Vramp to itself plus the value of the Vstep variable. The process <b>550</b> may also (block <b>556</b>) transmit a read voltage having a value of Vramp into the memory cells <b>102</b> storing data to be read. For example, the bitlines <b>104</b> and the wordlines <b>106</b> may be used to transmit the Vramp voltage.</p><p id="p-0060" num="0057">The SET memory cells <b>102</b> may then exhibit a switching event representative of the cell storing a logic 1. The process <b>550</b> may then count (block <b>558</b>) the number of memory cells <b>102</b> that have been read. The process <b>550</b> may then determine (decision <b>560</b>) if the variable Last is set to 1. If the variable Last is set to 1 (decision <b>560</b>) the process <b>500</b> may then stop (block <b>562</b>). If the variable Last is not set to 1 (decision <b>560</b>) the process <b>500</b> may then determine (decision <b>564</b>) if the number of SET cells that exhibited the switching event is less than or equal to 6. The number 6 may have been selected because it falls outside the 3 sigma region <b>504</b> for 64 bit codewords. Other numbers may be used based on the size of the codeword, such as 8 for 128 bit codewords, 12 for 256 bit codewords, and so on. The process <b>550</b> may then set (block <b>566</b>) the Vstep value to 3&#x3c3; and then iterate to block <b>556</b>. If the number of SET cells that exhibited the switching event is not less than or equal to 6 (decision <b>564</b>), the process <b>550</b> may then determine (decision <b>568</b>) if the number of SET cells that exhibited the switching event is greater than or equal to 7 and less than or equal to 41. The number 7 and 41 may be chosen because values in this range are outside 2&#x3c3;. Other values may be used based on codeword length.</p><p id="p-0061" num="0058">If the number of SET cells that exhibited the switching event is greater than or equal to 7 and less than or equal to 41 (decision <b>568</b>) the process <b>550</b> may then set (block <b>570</b>) the Vstep value to 2&#x3c3; and iterate to block <b>556</b>. If the number of SET cells that exhibited the switching event is not greater than or equal to 7 and less than or equal to 41 (decision <b>568</b>) the process <b>550</b> may then determine (decision <b>572</b>) if the number of SET cells that exhibited the switching event is greater than or equal to 42 and less than or equal to 128. The number 42 and 128 may be chosen because values in this range are outside 1&#x3c3;.</p><p id="p-0062" num="0059">If the number of SET cells that exhibited the switching event is greater than or equal to 42 and less than or equal to 128 (decision <b>572</b>) the process <b>550</b> may then set (block <b>574</b>) the Vstep value to 6&#x3c3;, set the Last variable to 1, and iterate to block <b>556</b>. If the number of SET cells that exhibited the switching event is not greater than or equal to 42 and less than or equal to 128 (decision <b>572</b>) the process <b>550</b> may then determine (decision <b>576</b>) if the number of SET cells that exhibited the switching event is greater than or equal to 129 and less than or equal to 215. The number 129 and 215 may be chosen because values in this range are inside 1&#x3c3;.</p><p id="p-0063" num="0060">If the number of SET cells that exhibited the switching event is greater than or equal to 129 and less than or equal to 215 (decision <b>576</b>) the process <b>550</b> may then set (block <b>578</b>) the Vstep value to 5&#x3c3;, set the Last variable to 1, and iterate to block <b>556</b>. If the number of SET cells that exhibited the switching event is not greater than or equal to 129 and less than or equal to 215 (decision <b>576</b>) the process <b>550</b> may then determine (decision <b>580</b>) if the number of SET cells that exhibited the switching event is greater than or equal to 216 and less than or equal to 256. The number 216 and 256 may be chosen because values in this range are inside 6&#x3c3;.</p><p id="p-0064" num="0061">If the number of SET cells that exhibited the switching event is greater than or equal to 216 and less than or equal to 256 (decision <b>580</b>) the process <b>550</b> may then set (block <b>584</b>) the Vstep value to 1&#x3c3;, set the Last variable to 1, and iterate to block <b>556</b>. In certain embodiments, the process <b>550</b> may utilize a look up table (LUT) or portions of a LUT as shown below with respect to Table 1. The LUT may be used to more quickly determine a voltage to apply for reading the SET memory cells <b>102</b> and to determine if further ramping steps are to be used.</p><p id="p-0065" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Read Voltages to Use Based on Number of SET Cells Turning On</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="70pt" align="center"/><colspec colname="3" colwidth="63pt" align="center"/><colspec colname="4" colwidth="49pt" align="center"/><tbody valign="top"><row><entry/><entry>Range of total</entry><entry/><entry/></row><row><entry/><entry>SET cells that</entry></row><row><entry>Zone</entry><entry>have turned on</entry><entry>Read Voltage STEP</entry><entry>Last Step</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="70pt" align="char" char="."/><colspec colname="3" colwidth="63pt" align="center"/><colspec colname="4" colwidth="49pt" align="center"/><tbody valign="top"><row><entry>Approach</entry><entry>&#x2264;6</entry><entry>3 sigma</entry><entry>0</entry></row><row><entry>Approach</entry><entry>&#x2002;[7:41]</entry><entry>2 sigma</entry><entry>0</entry></row><row><entry>Final Step</entry><entry>&#x2002;[42:128]</entry><entry>6 sigma</entry><entry>1</entry></row><row><entry>Final Step</entry><entry>[129:215]</entry><entry>5 sigma</entry><entry>1</entry></row><row><entry>Final Step</entry><entry>[216:256]</entry><entry>4 sigma</entry><entry>1</entry></row><row><entry>Final Step</entry><entry>&#x3e;256</entry><entry>1 sigma</entry><entry>1</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0066" num="0062">As noted earlier, a first start voltage may be applied, which may then result in one or more SET cells turning on. Table 1 may then be consulted, for example, by looking at the numeric ranges of the second column, to determine a new voltage to apply (e.g., voltage stored the third column), and also to determine if more ramping steps are to be provided (e.g., via the fourth column). By then applying the voltage from the third column, a new set of cells may be read and the total number of cells that have been read may then be used to determine if more ramping steps are to be used to read remaining SET cells. Once all the SET cells are read (e.g., after applying the Final Step voltage), all remaining unread memory cells <b>102</b> may be derived as being RESET memory cells.</p><p id="p-0067" num="0063">It is to be understood that the values in decisions <b>564</b>, <b>568</b>, <b>572</b>, <b>576</b>, <b>580</b>, and/or Table 1 above, are for example only. Other values may be used. For example, given a codeword having N bits, N may be divided into the regions <b>502</b>, <b>504</b>, <b>506</b>, <b>508</b>, <b>510</b> assuming, for example, a normal distribution for the encoded data (and/or for balanced data, e.g., data having an approximately equal logic 1 count to logic 0 count). In other embodiments, a manufacturer may perform statistical analysis on the read behavior of the memory cells of one or more memory devices <b>100</b> and then arrive at a distribution (e.g., distribution <b>500</b>) for the memory device <b>100</b> and store the resulting analysis as a LUT (e.g., Table 1).</p><p id="p-0068" num="0064">In one embodiment, boundaries (6, 41, 128, and 215) between the ranges have been chosen considering a gaussian distribution of 256 SET cells, for certain mean values. For example, if the mean value was at 4.4V and sigma=0.85mV. The values may correspond respectively to Mean&#x2212;2sigma, Mean&#x2212;1sigma, Mean, and Mean+1sigma of the SET distribution, as summarized in the table below.</p><p id="p-0069" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example only table to illustrate Vth values for mean</entry></row><row><entry>of 4.4 V and sigma = 0.85 mV with 256 SET cells.</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="112pt" align="left"/><colspec colname="1" colwidth="21pt" align="center"/><colspec colname="2" colwidth="84pt" align="center"/><tbody valign="top"><row><entry/><entry>Vth</entry><entry>Count</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="84pt" align="left"/><colspec colname="2" colwidth="21pt" align="char" char="."/><colspec colname="3" colwidth="84pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>Mean &#x2212; 2sigma</entry><entry>4.230</entry><entry>6</entry></row><row><entry/><entry>Mean &#x2212; 1sigma</entry><entry>4.315</entry><entry>41</entry></row><row><entry/><entry>Mean</entry><entry>4.400</entry><entry>128</entry></row><row><entry/><entry>Mean + 1sigma</entry><entry>4.485</entry><entry>215</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0070" num="0065">It may be beneficial to illustrate a selection of read voltage steps that may be provided by using the process <b>550</b> describe above. Turning now to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the figure includes a graph <b>600</b> illustrating an embodiment of total curve <b>602</b> that may be used to read SET memory cells <b>102</b>. The graph <b>600</b> includes a read voltage in the X axis and a number of SET memory cells in the Y axis. The Y axis is also shown to include sigma ranges 1 through 6 for the total count curve <b>602</b>, and the X axis is also shown to include sigma step ranges 1 through 6 for the read voltage. In the depicted embodiment, a dividing line <b>604</b> divides the graph <b>600</b> into an approach range or region <b>606</b> and a final step range or region <b>608</b>. In certain embodiments, the dividing line <b>604</b> may be equal to &#x2212;2&#x3c3; for a distribution <b>610</b> (e.g., equivalent to the distribution <b>500</b>). In a first step <b>612</b>, a first read voltage may be applied. For example, a Vstart read voltage may be applied to the memory cells <b>102</b> to cause one or more SET memory cells <b>102</b> to exhibit a switching event representative of the cell(s) storing a logic 1.</p><p id="p-0071" num="0066">The number of switched cells <b>102</b> may then be counted, if the number falls inside of the approach range <b>606</b> (e.g., as listed in Table 1 and described in <figref idref="DRAWINGS">FIG. <b>7</b></figref>), a second step <b>614</b> may then be taken. In the depicted embodiment, the second step <b>614</b> may be applied at a 3 sigma voltage and the new total for SET memory cells <b>102</b> that have exhibited the switching event may be counted. The figure shows the total count as being inside of the approach region <b>606</b> and thus a third step <b>616</b> may apply a voltage, such as a 2 sigma voltage. The 2 sigma voltage may result in a total count of switched SET memory cells having a value that falls outside of the approach region <b>606</b> and inside of the final step region <b>608</b>. Accordingly, a single final step <b>618</b> may be applied, for example, at a 5 sigma voltage. The final step <b>618</b> may the result in the discovery of all SET memory cells <b>102</b>, and the remaining memory cells <b>102</b> may be assumed to be RESET cells. By adaptively determining the number of total read steps and voltages for each read step to apply, the techniques described herein may more efficiently read data stored in the memory cells <b>102</b>.</p><p id="p-0072" num="0067">As mentioned earlier, the techniques described herein may also enable an adaptive time between ramping steps. That is, instead of using a fixed time for a duration of <b>454</b>, <b>456</b>, <b>458</b>, <b>460</b>, steps may have a time duration that varies, such as steps <b>466</b>, <b>468</b>, <b>470</b>. In one embodiment, the time duration may depend on a number of memory cells <b>102</b> that are sensed in parallel, for example, from the same wordline <b>106</b>. A greater number of sensed memory cells <b>106</b> may introduce a reciprocal disturb and may thus lead to a longer time duration for the step, e.g., a longer sensing time. After sensing the number of activated memory cells <b>102</b> (e.g., SET cells) for a first step, the control circuit <b>122</b> may then adaptively decide on a time duration for a second step, count a second number of activated memory cells <b>102</b>, and so on. The adaptive read techniques may also include fixed and/or variable latency suitable for handling various data scenarios (e.g., best case, typical case, worst case). Accordingly, a more efficient and faster converging self-referenced read operation may be provided, having a lower raw bit error rate (RBER).</p><p id="p-0073" num="0068"><figref idref="DRAWINGS">FIG. <b>9</b></figref> includes timing diagrams illustrating an embodiment of fixed latency data transfers for certain systems that may interface with the memory device <b>100</b> and that may use fixed latency communications. In the depicted embodiment, a first timing diagram <b>650</b> illustrates a worst (and also a best) case fixed latency time for steps (e.g. steps <b>454</b>, <b>456</b>, <b>458</b> and <b>460</b>) that have a fixed time duration. A second timing diagram <b>652</b> illustrates a fixed latency time for steps (e.g., steps <b>466</b>, <b>468</b>, or <b>470</b>) that have adaptive (e.g. varying) time duration. In the depicted embodiment, all steps in the first timing diagram <b>650</b> have approximately the same time duration <b>654</b>. A fixed duration step <b>656</b> is shown to include a sensing time <b>658</b>, an error correction (ecc time) <b>660</b>, and a data transfer time <b>662</b>. In use, the memory device <b>100</b> may issue a read command at time <b>662</b> on a command bus. The control circuit <b>122</b> may then respond to the read command by sensing data stored in the memory cells, e.g., by sending a voltage to activate SET memory cells <b>102</b> storing, for example, a logic 1. The sensing operation may transmit a staircase shaped voltage during the sensing time <b>658</b>, apply error correction to sensed data during the ecc time <b>660</b>, and subsequently transfer data during the data transfer time <b>662</b>. Data values <b>664</b> (e.g., 32 bits of data) may then be placed on a data bus at time <b>666</b>.</p><p id="p-0074" num="0069">The timing diagram <b>652</b>, while using adaptive steps <b>668</b>, <b>670</b>, is shown as also using the same fixed latency time, e.g., time <b>654</b> for communications. Accordingly, while the best time step <b>668</b> and the worst time step <b>670</b> are illustrated as having, for example, different sensing times <b>672</b>, <b>674</b>, different ecc times <b>676</b>, <b>678</b>, and/or different transfer times <b>680</b>, <b>682</b>, the adaptive steps <b>668</b>, <b>670</b> both wait for the end of the latency time <b>654</b> before transmitting data <b>684</b> (e.g., 32 bits of data). That is, a read command is initiated at time <b>686</b>, which is illustrated to be the same time as time <b>662</b>, and regardless of the timing for the adaptive step used (e.g., steps <b>668</b> and/or <b>670</b>), data <b>684</b> is provided at the same time <b>666</b> for both steps <b>668</b>, <b>670</b>. Accordingly, the techniques described herein may utilize data not valid (DNV) flags and/or ready buffer (R/B) signals to reduce data read times for certain read steps.</p><p id="p-0075" num="0070"><figref idref="DRAWINGS">FIG. <b>10</b></figref> includes timing diagrams having embodiments of a typical case read step and a worst case read step. More specifically, a timing diagram <b>700</b> illustrates a typical read step <b>702</b> and a timing diagram <b>704</b> illustrates a worst case read step <b>706</b>. The fixed latency time <b>654</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> is also shown for comparison. In the embodiment shown, a read command is issued at time <b>708</b>. The control circuit <b>122</b> may then issue the typical case read step <b>702</b> in response to the read command. The typical read step <b>702</b> may include a sensing time <b>710</b>, an ecc time <b>712</b>, and a data transfer time <b>714</b>. The typical case read step <b>702</b> may complete its data transfer time on or before the end of the fixed latency <b>654</b>. However, the worst case read step <b>706</b> may include a longer sensing time <b>716</b>, ecc time <b>718</b>, and/or data transfer time <b>720</b> when compared to the typical case read step <b>702</b>. Accordingly, the typical read step <b>702</b> may be ready for data communications before the worst case read step <b>706</b>.</p><p id="p-0076" num="0071">To improve data read efficiency, the techniques described herein may use data valid (DV) flags <b>722</b> and/or data not valid (DNV) flags <b>724</b>. For example, at the end of a certain time period (e.g., at the fixed latency period <b>654</b>, or 10, 20, 30, 50 nanoseconds before the end of the fixed latency period <b>654</b>), the DV flags <b>722</b> may be transmitted on a DNV bus by the control circuit <b>122</b> to denote that data <b>726</b> (e.g., 32 bits) now placed on the data bus is valid. If the time period (e.g., time <b>654</b>) expires and data is not ready to be processed, then the control circuit <b>122</b> may transmit DNV flags <b>724</b> on the DNV bus to denote data <b>728</b> is not ready for processing. Accordingly, read steps of differing time durations may more efficiently transfer data when the data is ready for processing.</p><p id="p-0077" num="0072">FIG.<b>11</b> includes timing diagrams having embodiments of a typical case read step and a worst case read step that may use a ready busy (R/B) signaling. In the depicted embodiment, a timing diagram <b>750</b> includes the typical case read step <b>702</b> and a timing diagram <b>752</b> includes the worst case read step <b>706</b>. In the depicted embodiment, a read command may arrive via the command bus at time <b>754</b>. Accordingly, a ready busy signal <b>756</b> for the typical case read step <b>702</b> is depicted as having a logic low value at time <b>754</b> to denote that data is not ready to be read. Likewise, a ready busy signal <b>758</b> for the worst case read step <b>706</b> is also depicted as having a logic low value at time <b>754</b> denoting that data is not ready to be read.</p><p id="p-0078" num="0073">The typical case read step <b>702</b> is illustrated as ending at time <b>760</b>. Accordingly, the ready busy signal <b>756</b> may now be set to a logic high at time <b>760</b>, denoting that data <b>762</b> placed on the data bus is now ready for processing. Likewise, the ready busy signal <b>758</b> may be set to a logic high at time <b>764</b>, denoting that data <b>766</b> placed on the data bus is now ready for processing. The control circuit <b>122</b> and/or external systems coupled to the memory device <b>100</b> may then use the ready busy signals, e.g., signals <b>756</b>, <b>758</b>, to read and process data, e.g., data <b>762</b>, <b>764</b>, when a read step resulted in valid data being placed on the data bus. By using ready busy signals, the techniques described herein may optimize timings of reads.</p><p id="p-0079" num="0074">As mentioned earlier, partitions <b>202</b> may be used, for example, to more efficiently read and write data in parallel. However, one side effect of using partitions <b>202</b> may include introducing reciprocal disturbs when sensing data. The techniques described herein may adaptively adjust a read time for steps based on a number of cells activated during read operations. Turning now to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the figure is a block diagram illustrating an embodiment of a partition architecture <b>800</b> that may result in certain &#x201c;disturbs&#x201d; based on parallel reads or writes.</p><p id="p-0080" num="0075">In the depicted embodiment, multiple partitions <b>202</b> are shown, for example, included in the memory device <b>100</b>. Each partition <b>202</b> may include multiple tiles <b>802</b> disposed on various layers or decks. Bit counts per tile <b>802</b> may vary depending, for example, on desired applications. That is, a memory device <b>100</b> may be provided to have a certain bit count per tile. Likewise, tiles <b>802</b> may be manufactured at various tile sizes. The figure illustrates 1 bit per tile (bit/tile) tiles <b>804</b>, 4 bit/tile tiles <b>806</b>, 8 bit/tile tiles <b>808</b>, 16 bit/tile tiles <b>810</b>, and 32 bit/tile tiles <b>812</b>. It is to be noted that other bit per tiles and/or tile sizes may be used.</p><p id="p-0081" num="0076">As the bit per tile count increases and/or as the tile size increases, &#x201c;disturbs&#x201d; may be introduced. That is, as memory cells <b>102</b> are sensed in parallel in the same wordline <b>106</b>, nearby memory cells <b>102</b> may be &#x201c;disturbed&#x201d; by the voltage introduced on the wordline <b>106</b>, and a greater overall read time may be required when compared to non-parallel reads. For example, a memory cell <b>102</b> may switch and inject current into the wordline <b>106</b>, and the next memory cell <b>102</b> may switch at a later time than expected due to changing RC values. The greater the number of memory cells <b>102</b> that may be sensed in parallel from the same wordline <b>106</b>, the higher the sensing time (e.g., sensing times <b>672</b>, <b>674</b>, <b>710</b>, <b>716</b>).</p><p id="p-0082" num="0077">The techniques described herein may use adaptive adjustment of time duration for each read step (e.g., steps <b>466</b>, <b>468</b>, <b>470</b>), for example, based on a count of the number of steps that have activated. In certain embodiments, the time duration for read steps may be more quickly derived by the use of a lookup table (LUT) that may include a first column having a count of SET cells that have activated and a second column that may include a time to apply voltage for the next read step in the read staircase. An example table is shown below.</p><p id="p-0083" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Time Adjustment Based on Number of SET Cells Turning On</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="98pt" align="center"/><colspec colname="2" colwidth="105pt" align="center"/><tbody valign="top"><row><entry/><entry>Count of SET Cells Activated</entry><entry>Next Time Step</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="98pt" align="center"/><colspec colname="2" colwidth="35pt" align="right"/><colspec colname="3" colwidth="70pt" align="left"/><tbody valign="top"><row><entry/><entry>Count &#x2264; 8</entry><entry>3</entry><entry>nanoseconds (ns)</entry></row><row><entry/><entry>&#x2002;8 &#x3c; Count &#x2264; 16</entry><entry>5</entry><entry>ns</entry></row><row><entry/><entry>16 &#x3c; Count &#x2264; 32</entry><entry>10</entry><entry>ns</entry></row><row><entry/><entry>32 &#x3c; Count &#x2264; 64</entry><entry>20</entry><entry>ns</entry></row><row><entry/><entry>64 &#x3c; Count &#x2264; 72</entry><entry>50</entry><entry>ns</entry></row><row><entry/><entry>&#x2002;72 &#x3c; Count &#x2264; 128</entry><entry>100</entry><entry>ns</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0084" num="0078">Table 3 illustrates some example values that may be used for 128 bit codewords. In use, the control circuit <b>122</b> may use a counter-based circuit to count a number of SET memory cells <b>102</b> that activate after a first step (e.g., step <b>466</b>), and then use Table 3 above to determine a time for a second step (e.g., step <b>468</b>), e.g. via comparator circuit. The time for a third step, fourth step, fifth step, sixth step, and so on, may then be determined based on a count of SET memory cells that have activated in the previous step. Indeed, an adaptive timing for read steps may be provided via lookup tables. An example process using lookup tables is described with respect to <figref idref="DRAWINGS">FIG. <b>13</b></figref>.</p><p id="p-0085" num="0079"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart of a process <b>850</b> that may be used to adaptively determine a time interval for a read step, such as adaptive steps <b>466</b>, <b>468</b>, <b>470</b>. The process <b>850</b> may be implemented by the control circuit <b>122</b>. In the depicted embodiment, the process <b>850</b> may apply a starting voltage (e.g., starting voltage step) and then count (block <b>852</b>) a number of SET memory cells <b>102</b> that may have activated. The SET memory cells <b>102</b> may be storing data using, for example, the encoding process described with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The process <b>850</b> may then use a lookup table (LUT) <b>854</b>, such as Table 3 described above, to determine a value (block <b>856</b>) for a time duration to use during the next step in the ramp (e.g., staircase ramp). That is, the process <b>850</b> may determine a time duration for applying voltage in the next step of the staircase based on the current count of activated SET cells. The process <b>850</b> may then apply the time duration to read (block <b>858</b>) the next step, for example, by applying a voltage at a certain value and for the desired time duration. In certain embodiments, the applied voltage value may be determined using process <b>550</b> described with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0086" num="0080">The process <b>850</b> may then iterate back to block <b>852</b> and count a number of SET memory cells <b>102</b> that may have been activated after completion of the current read step, and if there are more steps to apply, continue using the LUT <b>854</b>. In some embodiments, the number of steps to use for reading data may be determined using process <b>550</b> described with respect to <figref idref="DRAWINGS">FIG. <b>7</b></figref>. By iteratively applying voltage at a desired time duration, counting the resulting activated SET memory cells, and determining a timing duration for the next read step via the LUT <b>854</b>, the techniques described herein may adaptively determine timings for the next step and thus more efficiently read data from the memory array <b>112</b>. Timings for the next step, e.g., timings stored in the second column of Table 3, may be derived based on statistical analysis. For example, a manufacturer of the memory device <b>100</b> may test one or more of the memory devices <b>100</b> to empirically determine a more efficient time value for example, for reads at various codeword sizes.</p><p id="p-0087" num="0081">It is to be noted that the lookup tables described above may be created based on memory technology, usage model (e.g., used in servers storing data long term, short term, and so on), application (e.g., portable device memory, server memory, desktop computer memory, and the like), and may be updated during the lifetime of the memory device. It is to be noted that the lookup tables (e.g., Tables 1 and 3) described above may be created based on memory technology, usage model (e.g., used in servers storing data long term, short term, and so on), application (e.g., portable device memory, server memory, desktop computer memory, and the like), and may be updated during the lifetime of the memory device. Other steps durations in the lookup tables (e.g., Tables 1 and 3) may also include non monotonous trends. Likewise, parallel access within one tile may be used, and a longer resistive-capacitive (RC) recovery time may be accounted for as when tiles are access in parallel. For example, it may be expected that an increasing number of snapped cells (at each snap there is a sudden current increase and a corresponding voltage drop) may occur.</p><p id="p-0088" num="0082">While the present disclosure may be susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and have been described in detail herein. However, it should be understood that the present disclosure is not intended to be limited to the particular forms disclosed. Rather, the present disclosure is intended to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present disclosure as defined by the following appended claims.</p><p id="p-0089" num="0083">The techniques presented and claimed herein are referenced and applied to material objects and concrete examples of a practical nature that demonstrably improve the present technical field and, as such, are not abstract, intangible, or purely theoretical. Further, if any claims appended to the end of this specification contain one or more elements designated as &#x201c;means for [perform]ing [a function] . . . &#x201d; or &#x201c;step for [perform]ing [a function] . . . ,&#x201d; it is intended that such elements are to be interpreted under 35 U.S.C. 112(f). However, for any claims containing elements designated in any other manner, it is intended that such elements are not to be interpreted under 35 U.S.C. 112(f).</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230005532A1-20230105-M00001.NB"><img id="EMI-M00001" he="8.47mm" wi="76.20mm" file="US20230005532A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A memory device, comprising:<claim-text>a memory array comprising a plurality of memory cells;</claim-text><claim-text>a control circuit operatively coupled to the memory array, the control circuit configured to:<claim-text>receive a read request for data;</claim-text><claim-text>apply a first voltage having a first voltage duration to the memory array based on the read request, wherein a first set of memory cells of the plurality of memory cells is configured to be read as storing a first logic value based on the first voltage;</claim-text><claim-text>count a number of the plurality of memory cells that have switched to an active read state based on the first voltage;</claim-text><claim-text>derive a second voltage duration based on the number;</claim-text><claim-text>apply a second voltage having the second voltage duration to the memory array, wherein a second set of memory cells included in the plurality of memory cells is configured to be read as storing the first logic value based on the second voltage; and</claim-text><claim-text>return the data based at least on bits stored in the first and the second set of memory cells.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The memory device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the control circuit is configured to derive the second voltage duration based on the number by using a lookup table (LUT).</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The memory device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the LUT comprises a first column storing a range of activated memory cells and second column storing a time duration for use in an upcoming read step.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The memory device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the control circuit is configured to apply the second voltage at the second voltage duration by looking up if the number falls inside of the range of activated memory cells and applying the time duration as the second voltage duration if the number is inside of the range of activated memory cells.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The memory device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the control circuit is configured to transmit a data valid (DV) flag after the first voltage duration, after the second voltage duration, or a combination thereof.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The memory device of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the control circuit is configured to transmit a data not valid (DNV) flag before the first voltage duration, before the second voltage duration, or a combination thereof</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The memory device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the control circuit is configured to transmit a ready busy (R/B) signal having a logic high value after the first voltage duration, after the second voltage duration, or a combination thereof.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The memory device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the bits comprise encoded data having a weight range of between 40% and 70%.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The memory device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first logic value comprises a logic 1.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The memory device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first and the second voltages are included in a voltage staircase shape.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A method, comprising:<claim-text>receiving, at a control circuit included in a memory device, a read request for data;</claim-text><claim-text>applying a first voltage having a first voltage duration to a memory array of the memory device based on the read request, wherein a first set of memory cells of a plurality of memory cells of the memory array is configured to be read as storing a first logic value based on the first voltage;<claim-text>counting a number of the plurality of memory cells that have switched to an active read state based on the applying the first voltage;</claim-text><claim-text>deriving a second voltage duration based on the counting;</claim-text><claim-text>applying a second voltage having the second voltage duration to the memory array, wherein a second set of memory cells of the plurality of memory cells is configured to be read as storing the first logic value based on the second voltage; and</claim-text><claim-text>returning the data based at least on bits stored in the first and the second set of memory cells.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein applying the second voltage comprises determining if the number of the plurality of memory cells that have switched to an active read state falls inside of a range of activated memory cells.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein determining if the number of the plurality of memory cells that have switched to an active read state falls inside of a range of activated memory cells comprises using a lookup table (LUT).</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, comprising encoding the data as encoded data and storing the encoded data in the memory array before receiving the read request, and wherein returning the data comprises decoding the encoded data.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, comprising transmitting a data valid (DV) flag after the first voltage duration, after the second voltage duration, or a combination thereof, or transmitting a ready busy (R/B) signal having a logic high value after the first voltage duration, after the second voltage duration, or a combination thereof</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A memory device, comprising:<claim-text>a memory array comprising a plurality of memory cells;</claim-text><claim-text>a control circuit operatively coupled to the memory array, the control circuit configured to:<claim-text>receive a read request for data;</claim-text><claim-text>apply a first voltage having a first voltage duration to the memory array based on the read request, wherein a first set of memory cells of the plurality of memory cells is configured to be read as storing a first logic value based on the first voltage;</claim-text><claim-text>count a number of the plurality of memory cells that have switched to an active read state based on the first voltage;</claim-text><claim-text>determine if the number falls inside of a range of activated memory cells and derive a second voltage duration based on the determination;</claim-text><claim-text>apply a second voltage having the second voltage duration to the memory array, wherein a second set of memory cells of the plurality of memory cells is configured to be read as storing the first logic value based on the second voltage; and</claim-text><claim-text>return the data based at least on bits stored in the first and the second set of memory cells.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The memory device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the control circuit is configured to use a lookup table (LUT) to determine if the number falls inside of the range of activated memory cells.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The memory device of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein the LUT comprises a first column storing the range of activated memory cells and second column storing a time duration for use in an upcoming read step.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The memory device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the control circuit is configured to transmit a data valid (DV) flag after the first voltage duration, after the second voltage duration, or a combination thereof, or to transmit a ready busy (R/B) signal having a logic high value after the first voltage duration, after the second voltage duration, or a combination thereof.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The memory device of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the control circuit is configured to encode the data as encoded data having a weight between 40% and 70% and to store the encoded data in the memory array before receiving the read request, and wherein the control circuit is configured to return the data by decoding the encoded data.</claim-text></claim></claims></us-patent-application>