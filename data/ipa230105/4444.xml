<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004445A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004445</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17662459</doc-number><date>20220509</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5072</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>505</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>547</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>541</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">ASSESSING SECURITY VULNERABILITIES IN CLOUD-NATIVE APPLICATIONS</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63217045</doc-number><date>20210630</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Cisco Technology, Inc.</orgname><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Bosch</last-name><first-name>Hendrikus G.P.</first-name><address><city>Aalsmeer</city><country>NL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Birdsall</last-name><first-name>Randy</first-name><address><city>Fulton</city><state>MD</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Duminuco</last-name><first-name>Alessandro</first-name><address><city>Milano</city><country>IT</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Kaufman</last-name><first-name>Zohar</first-name><address><city>South Natanya</city><country>IL</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Mullender</last-name><first-name>Sape Jurri&#xeb;n</first-name><address><city>Amsterdam</city><country>NL</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">According to some embodiments, a method is performed by a distributed cloud-native application. The method comprises receiving a request from a user to perform an operation. The user is associated with a risk profile. The method further comprises determining a call path through the distributed cloud-native application to perform the operation and classifying a risk level associated with the determined call path based on a distributed call graph. The distributed call graph comprises a risk value for each call path through the distributed cloud-native application and each call path comprises one or more distributed cloud-native application components. The risk value is based on a weakness rating associated with each component in the call path. The method further comprises determining the risk level associated with the determined call path is acceptable based on the risk profile associated with the user and performing the operation.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="106.34mm" wi="131.66mm" file="US20230004445A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="185.76mm" wi="80.86mm" orientation="landscape" file="US20230004445A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="236.98mm" wi="133.69mm" file="US20230004445A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims priority to U.S. Provisional Application Ser. No. 63/217,045 entitled &#x201c;Assessing Security Vulnerabilities in Cloud-Native Applications,&#x201d; filed Jun. 30, 2021, the entire content of which is incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This disclosure generally relates to cloud computing, and more specifically to assessing security vulnerabilities in cloud-native applications.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Being cloud-native is an approach to building and running applications that fully use the advantages of the cloud model. A cloud-native application uses a collection of tools that manage and simplify the orchestration of the services that make up the application. These services, each with its own lifecycle, are connected by application programming interfaces (APIs) and are deployed as containers. The containers may be orchestrated by a container scheduler that manages where and when a container should be provisioned into an application and is responsible for lifecycle management.</p><p id="p-0005" num="0004">Cloud-native applications are designed to be portable to different deployment environments: for example, in a public, private, or hybrid cloud. Continuous delivery and DevOps are methods used to automate the process of building, validating, and deploying services into a production network.</p><p id="p-0006" num="0005">Securing the public cloud is an increasingly difficult challenge for businesses. As a result, information technology (IT) departments are searching for cloud security solutions that provide sufficient end-user security.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006">For a more complete understanding of the disclosed embodiments and their features and advantages, reference is now made to the following description, taken in conjunction with the accompanying drawings, in which:</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a call graph for a cloud-native application;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating a method performed by a distributed cloud-native application, according to some embodiments; and</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating an example cloud-native application host server, according to particular embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DESCRIPTION OF EXAMPLE EMBODIMENTS</heading><heading id="h-0006" level="2">Overview</heading><p id="p-0011" num="0010">Cloud-native applications are, in essence, highly distributed applications and assessing if such applications are vulnerable to hacking attempts is difficult. First, understanding which application parts are used in the distributed set of application components is often not known until the application runs. Then, with the introduction of external application programming interface (API) services, understanding how such components integrate with the main application complicates security analysis further. Tracing API services is more difficult if such functions are not owned by the enterprise managing the application. Lastly, cloud-native applications carry data between the various components, some of which may be sensitive. Understanding and controlling what data goes where is instrumental to reducing security risk.</p><p id="p-0012" num="0011">It is important to track the operations of cloud-native applications and capture their operations to enable security personnel and/or developers, with their tooling, to assess where applications are vulnerable. When security personnel and/or developers can automatically assess such vulnerabilities, they can mitigate the risk of such vulnerabilities and install specific security policies to quarantine certain application aspects, restrict distribution of sensitive data to such application components, report and instruct development teams to get the application security fixed and more.</p><p id="p-0013" num="0012">Particular embodiments include mapping customer requests against cloud-native applications and, using a risk/reward scheme, determining if proceeding with the customer request falls within the operating mode of the enterprise hosting the cloud-native application and/or the customer. The risk is based on building a distributed call graph of the application using existing tracing techniques and then augmenting the call graph with known vulnerabilities and weaknesses for all application assets and by performing dynamic testing against application components.</p><p id="p-0014" num="0013">According to some embodiments, a method is performed by a distributed cloud-native application. The method comprises receiving a request from a user to perform an operation. The user is associated with a risk profile. The method further comprises determining a call path through the distributed cloud-native application to perform the operation and classifying a risk level associated with the determined call path based on a distributed call graph. The distributed call graph comprises a risk value for each call path through the distributed cloud-native application and each call path comprises one or more distributed cloud-native application components. The risk value is based on a weakness rating associated with each component in the call path. The method further comprises determining the risk level associated with the determined call path is acceptable based on the risk profile associated with the user and performing the operation.</p><p id="p-0015" num="0014">An advantage of particular embodiments is that enterprises hosting cloud-native applications and the customers using these applications can determine, on a measurable scale (e.g., monetary) whether they wish to risk executing the customer request. By being able to do this on a transaction by transaction basis, both the enterprise hosting the application and the customer using the enterprise application have a granular mechanism for risk/reward control.</p><heading id="h-0007" level="1">EXAMPLE EMBODIMENTS</heading><p id="p-0016" num="0015">Particular embodiments capture the nature of the distributed cloud-native application by capturing its operations and their parameters in a call-graph. Such a call graph can then form the basis of an application model, which then forms the basis for security vulnerability analysis. Vulnerabilities can be found, e.g., by scanning image containers and matching their hashes to entries in well-known vulnerability databases; specific penetration testing can be triggered against API service functions when models are integrated in developer continuous integration (Cl)-chains through grey-box or white-box testing and fuzzing.</p><p id="p-0017" num="0016">Call-graph construction may use existing distributed tracing methods, including, but not limited to Jaeger, OpenTracing, OpenTelemetry or other ad-hoc distributed tracing techniques. If distributed tracing is not available, particular embodiments rely, e.g., on tracking remote procedure call (RPC) calls through the cloud-native application by instrumenting cloud-native side cars, e.g., Istio/envoy, to build up a call graph by tracking all intra- and inter-application message flows.</p><p id="p-0018" num="0017">Particular embodiments build a call graph representative of the distributed cloud-native application capturing all the key application components and how application components are used during operation. Particular embodiments record image hashes, file names, line numbers and functions activated in each of the components of the distributed cloud-native application, the repository these are kept in, the parameters that are carried between the application components of the cloud-native enterprise application and the dependencies on external API services.</p><p id="p-0019" num="0018">Particular embodiments assess, using the application call graph, if the execution of customer requests against the cloud-native application poses an acceptable or unacceptable risk for the enterprise hosting the application and/or the customer executing the transaction. If the risk is unacceptable, particular embodiments block and/or report this upfront before the customer transaction even starts. Stating what are acceptable/unacceptable risks is a combination of the customer's input, the enterprise input or a combination thereof and is likely based on monetary and/or reputation incentives.</p><p id="p-0020" num="0019">For example, assume a call graph represents an airline application hosted as a cloud-native application and the airline application addresses all functions for ordering airline tickets. Mapping the value of the operation for the enterprise on the application call graph (say, buying a ticket for a customer) leads to a risk/reward mapping. The reward is selling the ticket, the risk is that when a bad actor steals credit card information, personal information, or simply disrupts the transaction, the enterprise suffers monetary and/or reputation damages. If ordering a ticket means that the application executes functionality in a container that is built with images that have serious configuration or software vulnerabilities, and the customer states its policy that under no circumstances shall its identity be exposed to bad software, the customer transaction can be blocked on ingress. The call graph may facilitate many different kinds of policies.</p><p id="p-0021" num="0020">Building a distributed call graph across a cloud-native application is known technology. Jaeger, Opentelemetry and Opentracing provide a series of techniques to build a call graph between the various components. These techniques rely on augmenting the application sources, tying incoming hypertext transfer protocol (HTTP) requests to outgoing HTTP requests, augmenting these requests with the appropriate tracking identities and collecting all records with such information in a central repository. Recently, Opentracing has also been made available for Istio/Envoy, thereby making it possible to trace even over application components that have not been augmented with trace functions, albeit that in such cases call graphs are more likely statistical rather than precise.</p><p id="p-0022" num="0021">After a call graph has been established for the cloud-native application, particular embodiments augment the call graph with risks and vulnerabilities. As a non-exhaustive list, particular embodiments may perform one or more of the following functions.</p><p id="p-0023" num="0022">Some embodiments map all known vulnerabilities to image layers, images and libraries used to build an application component to all vertices in the call graph. For this, particular embodiments use common vulnerabilities and exposures (CVEs), common weakness enumerations (CWEs), and their mapping onto common vulnerability scoring system (CVSS) score, Open Web Application Security Project (OWASP) top 10 and OWASP API top 10 issues and extend these considerations to all HTTP endpoints implemented by an application component (e.g., container).</p><p id="p-0024" num="0023">Some embodiments scan the software implementation of specific HTTP endpoints for vulnerabilities (e.g., during the CI cycle of building the application) and/or test (e.g., dynamic application security testing (DAST)) those software components for vulnerabilities. Found vulnerabilities may further augment the call graph.</p><p id="p-0025" num="0024">Some embodiments chaos-test and fuzz-test internal application components (internal API services) by executing deliberate tests against those services that may break such internal services and/or affirm their operation.</p><p id="p-0026" num="0025">Some embodiments assess the quality of external assets such as external API services. For this, particular embodiments query external telemetry providers for observed anomalies (e.g., broken transport layer security (TLS) implementations, expired certificates, bad reputation services, low usage services, malware/adware sites, bad classification, incorrect domain name system (DNS) or network posture, etc.) and/or execute chaos/fuzz tests against those external API services.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a call graph for a cloud-native application (i.e., a distributed call of an application). As illustrated, all incoming traffic arrives at P. P receives all incoming traffic and splits its traffic to Q and R at a 60%/40% split. Q then sends all its traffic to an external service A, etc. All traffic exposed to Q is vulnerable for issues in A, while P is only 60% dependent on Q and 40% dependent on R because vulnerabilities and weaknesses are transitive.</p><p id="p-0028" num="0027">The result of the mapping and testing of the cloud-native application components is an augmented graph that reflects for each path through the graph, the risks, vulnerabilities, and weaknesses a customer call may be exposed to. Particular embodiments capture these issues in a risk vector, with the most severe issues weighted more than less severe consideration.</p><p id="p-0029" num="0028">Thus, the vector for P includes all vulnerabilities of the application. Then, for each incoming customer request to the cloud-native application, particular embodiments execute a classification of the request against the graph and vector. Particular embodiments determine what path the incoming request likely performs and, based on the mapping, determines if the request falls within the serviceable risk profile for the customer and its request.</p><p id="p-0030" num="0029">When the request falls within the serviceable risk profile, the call proceeds. When it does not, by policy particular embodiments may alert security personnel, block the call, alert the customer or a combination thereof.</p><p id="p-0031" num="0030">Thus, an incoming request X at P is mapped onto a path (e.g., P, R, S, A) and particular embodiments then determine the vulnerability vector for request X (either statistically or precisely). If X's risk vulnerability and weakness acceptance is less than or equal to the vector, the call proceeds.</p><p id="p-0032" num="0031">The implementation of the classification may be performed in the actual application, or e.g., in an Istio/Envoy side car.</p><p id="p-0033" num="0032">Understanding the risks to a call graph is a continuous process. The graph may change over time.</p><p id="p-0034" num="0033">Particular embodiments may use machine learning (ML)/(AI) techniques for the proper mapping of incoming requests onto the graph.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating a method performed by a distributed cloud-native application, according to some embodiments. The steps of method <b>200</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be performed by distributed cloud-native application host server <b>300</b> described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0036" num="0035">The method begins at step <b>212</b>, where the distributed cloud-native application receives a request from a user to perform an operation. For example, in the airline application described above, a user may request to buy an airline ticket.</p><p id="p-0037" num="0036">The user is associated with a risk profile. The risk profile may be used in the later steps to determine whether to perform the operation.</p><p id="p-0038" num="0037">At step <b>214</b>, the distributed cloud-native application determines a call path through the distributed cloud-native application to perform the operation. For example, the distributed cloud-native application may determine the call path based on the type of operation.</p><p id="p-0039" num="0038">At step <b>216</b>, the distributed cloud-native application classifies a risk level associated with the determined call path based on a distributed call graph. The distributed call graph comprises a risk value (e.g., risk vector) for each call path of a plurality of call paths through the distributed cloud-native application. Each call path comprises one or more distributed cloud-native application components. The risk value is based on a weakness rating associated with each component of the one or more distributed cloud-native application components in the call path.</p><p id="p-0040" num="0039">An example distributed call graph is illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The distributed cloud-native application may classify the risk level according to any of the embodiments and examples described herein.</p><p id="p-0041" num="0040">In particular embodiments, the weakness rating associated with each component of the one or more distributed cloud-native application components is based on a mapping of known vulnerabilities to image layers, images or libraries used to build the component. For example, particular embodiments may use CVEs, CWEs, and their mapping onto CVSS score, OWASP top 10 and OWASP API top 10 issues and extend these considerations to all HTTP endpoints implemented by an application component (e.g., container).</p><p id="p-0042" num="0041">In particular embodiments, the weakness rating associated with each component of the one or more distributed cloud-native application components is based on vulnerabilities discovered during testing (e.g., integration testing, chaos testing, fuzz testing, etc.) of the component.</p><p id="p-0043" num="0042">In particular embodiments, the weakness rating associated with each component of the one or more distributed cloud-native application components is based on anomalies observed by external telemetry providers. The anomalies may include at least one of a compromised transport layer security implementation, expired certification, reputation of a service provider, service usage amount, known adware or malware, and domain name.</p><p id="p-0044" num="0043">In particular embodiments, the distributed cell graph may be determined precisely or statistically, according to any of the embodiments and examples described herein.</p><p id="p-0045" num="0044">At step <b>218</b>, the distributed cloud-native application determines whether the risk level associated with the determined call path is acceptable based on the risk profile associated with the user. For example, in the airline application example described above the distributed cloud-native application determines whether the risk level associated with determined call path is acceptable when the user may be exposing credit card information during the purchase of an airline ticket. The risk profile associated with such a user may be fairly low and thus any call path with a significant risk level may be considered unacceptable.</p><p id="p-0046" num="0045">In particular embodiments, determining the risk level may be based on input parameters. For example, if the request may comprise personally identifying information or financial information that decreases the risk tolerance for the user.</p><p id="p-0047" num="0046">Upon determining the risk level associated with the determined call path is acceptable based on the risk profile associated with the user, the method continues to step <b>220</b> where the distributed cloud-native application performs the operation, such as purchasing an airline ticket.</p><p id="p-0048" num="0047">Upon determining the risk level associated with the determined call path is not acceptable based on the risk profile associated with the user, the method continues to step <b>222</b> where the distributed cloud-native application blocks the operation. In particular embodiments, the distributed cloud-native application may log the event and/or notify security personnel about the event.</p><p id="p-0049" num="0048">Security vulnerabilities may change over time. Accordingly, some embodiments may include step <b>224</b>, where the distributed cloud-native application may obtain updates to its distributed call graph.</p><p id="p-0050" num="0049">Modifications, additions, or omissions may be made to method <b>200</b> depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Method <b>200</b> may include more, fewer, or other steps. Additionally, steps may be performed in parallel or in any suitable order.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating an example cloud-native application host server, according to particular embodiments. In particular embodiments, one or more servers <b>300</b> perform one or more steps of one or more methods described or illustrated herein. In particular embodiments, one or more servers <b>300</b> provide functionality described or illustrated herein, such as the functionality described with respect to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>. In particular embodiments, software running on one or more servers <b>300</b> performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more servers <b>300</b>. Herein, reference to a server may encompass a computing device, and vice versa, where appropriate. Moreover, reference to a server may encompass one or more servers, where appropriate.</p><p id="p-0052" num="0051">Particular embodiments may include any suitable number of servers <b>300</b>. Server <b>300</b> may take any suitable physical form. As example and not by way of limitation, server <b>300</b> may comprise an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a server, or a combination of two or more of these. Where appropriate, server <b>300</b> may include one or more servers <b>300</b>; be unitary or distributed; span multiple locations; span multiple machines; span multiple data centers; or reside in a cloud, which may include one or more cloud components in one or more networks.</p><p id="p-0053" num="0052">Where appropriate, one or more servers <b>300</b> may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation, one or more servers <b>300</b> may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more servers <b>300</b> may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein, where appropriate.</p><p id="p-0054" num="0053">In particular embodiments, server <b>300</b> includes a processor <b>302</b>, memory <b>304</b>, storage <b>306</b>, an input/output (I/O) interface <b>308</b>, a communication interface <b>310</b>, and a bus <b>312</b>. Although this disclosure describes and illustrates a particular server having a particular number of particular components in a particular arrangement, particular embodiments may include any suitable computer system having any suitable number of any suitable components in any suitable arrangement.</p><p id="p-0055" num="0054">In particular embodiments, processor <b>302</b> includes hardware for executing instructions, such as those making up a computer program. As an example and not by way of limitation, to execute instructions, processor <b>302</b> may retrieve (or fetch) the instructions from an internal register, an internal cache, memory <b>304</b>, or storage <b>306</b>; decode and execute them; and then write one or more results to an internal register, an internal cache, memory <b>304</b>, or storage <b>306</b>. In particular embodiments, processor <b>302</b> may include one or more internal caches for data, instructions, or addresses. Processor <b>302</b> may include any suitable number of any suitable internal caches, where appropriate.</p><p id="p-0056" num="0055">As an example and not by way of limitation, processor <b>302</b> may include one or more instruction caches, one or more data caches, and one or more translation lookaside buffers (TLBs). Instructions in the instruction caches may be copies of instructions in memory <b>304</b> or storage <b>306</b>, and the instruction caches may speed up retrieval of those instructions by processor <b>302</b>. Data in the data caches may be copies of data in memory <b>304</b> or storage <b>306</b> for instructions executing at processor <b>302</b> to operate on; the results of previous instructions executed at processor <b>302</b> for access by subsequent instructions executing at processor <b>302</b> or for writing to memory <b>304</b> or storage <b>306</b>; or other suitable data. The data caches may speed up read or write operations by processor <b>302</b>. The TLBs may speed up virtual-address translation for processor <b>302</b>.</p><p id="p-0057" num="0056">In particular embodiments, processor <b>302</b> may include one or more internal registers for data, instructions, or addresses. Processor <b>302</b> may include any suitable number of any suitable internal registers, where appropriate. Where appropriate, processor <b>302</b> may include one or more arithmetic logic units (ALUs); be a multi-core processor; or include one or more processors <b>302</b>. Although this disclosure describes and illustrates a particular processor, particular embodiments may include any suitable processor.</p><p id="p-0058" num="0057">In particular embodiments, memory <b>304</b> includes main memory for storing instructions for processor <b>302</b> to execute or data for processor <b>302</b> to operate on. As an example and not by way of limitation, server <b>300</b> may load instructions from storage <b>306</b> or another source (such as, for example, another computer system <b>700</b>) to memory <b>304</b>. Processor <b>302</b> may then load the instructions from memory <b>304</b> to an internal register or internal cache.</p><p id="p-0059" num="0058">To execute the instructions, processor <b>302</b> may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions, processor <b>302</b> may write one or more results (which may be intermediate or final results) to the internal register or internal cache. Processor <b>302</b> may then write one or more of those results to memory <b>304</b>. In particular embodiments, processor <b>302</b> executes only instructions in one or more internal registers or internal caches or in memory <b>304</b> (as opposed to storage <b>306</b> or else-where) and operates only on data in one or more internal registers or internal caches or in memory <b>304</b> (as opposed to storage <b>306</b> or elsewhere).</p><p id="p-0060" num="0059">One or more memory buses (which may each include an address bus and a data bus) may couple processor <b>302</b> to memory <b>304</b>. Bus <b>312</b> may include one or more memory buses, as described below. In particular embodiments, one or more memory management units (MMUs) reside between processor <b>302</b> and memory <b>304</b> and facilitate accesses to memory <b>304</b> requested by processor <b>302</b>. In particular embodiments, memory <b>304</b> includes random access memory (RAM). This RAM may be volatile memory, where appropriate. Where appropriate, this RAM may be dynamic RAM (DRAM) or static RAM (SRAM). Moreover, where appropriate, this RAM may be single-ported or multi-ported RAM. Particular embodiments may include any suitable RAM. Memory <b>304</b> may include one or more memories <b>304</b>, where appropriate. Although this disclosure describes and illustrates particular memory, particular embodiments may include any suitable memory.</p><p id="p-0061" num="0060">In particular embodiments, storage <b>306</b> includes mass storage for data or instructions. As an example and not by way of limitation, storage <b>306</b> may include a hard disk drive (HDD), a floppy disk drive, flash memory, an optical disc, a magneto-optical disc, magnetic tape, or a Universal Serial Bus (USB) drive or a combination of two or more of these. Storage <b>306</b> may include removable or non-removable (or fixed) media, where appropriate. Storage <b>306</b> may be internal or external to server <b>300</b>, where appropriate. In particular embodiments, storage <b>306</b> is non-volatile, solid-state memory. In particular embodiments, storage <b>306</b> includes read-only memory (ROM). Where appropriate, this ROM may be mask-programmed ROM, programmable ROM (PROM), erasable PROM (EPROM), electrically erasable PROM (EEPROM), electrically alterable ROM (EAROM), or flash memory or a combination of two or more of these. Storage <b>306</b> may take any suitable physical form.</p><p id="p-0062" num="0061">Storage <b>306</b> may include one or more storage control units facilitating communication between processor <b>302</b> and storage <b>306</b>, where appropriate. Where appropriate, storage <b>306</b> may include one or more storages <b>306</b>. Although this disclosure describes and illustrates particular storage, particular embodiments may include any suitable storage.</p><p id="p-0063" num="0062">In particular embodiments, I/O interface <b>308</b> includes hardware, software, or both, providing one or more interfaces for communication between server <b>300</b> and one or more I/O devices. Server <b>300</b> may include one or more of these I/O devices, where appropriate. One or more of these I/O devices may enable communication between a person and server <b>300</b>. As an example and not by way of limitation, an I/O device may include a keyboard, keypad, microphone, monitor, mouse, printer, scanner, speaker, still camera, stylus, tablet, touch screen, trackball, video camera, another suitable I/O device or a combination of two or more of these. An I/O device may include one or more sensors. Particular embodiments may include any suitable I/O devices and any suitable I/O interfaces <b>308</b> for them. Where appropriate, I/O interface <b>308</b> may include one or more device or software drivers enabling processor <b>302</b> to drive one or more of these I/O devices. I/O interface <b>308</b> may include one or more I/O interfaces <b>308</b>, where appropriate. Although this disclosure describes and illustrates a particular I/O interface, particular embodiments may include any suitable I/O interface. In particular embodiments, I/O interface <b>308</b> may include an interface to a remote network management system.</p><p id="p-0064" num="0063">In particular embodiments, communication interface <b>310</b> includes hardware, software, or both providing one or more interfaces for communication (such as, for example, packet-based communication) between server <b>300</b> and one or more other servers <b>300</b> or one or more networks. As an example and not by way of limitation, communication interface <b>310</b> may include a network interface controller (NIC) or network adapter for communicating with an Ethernet or other wire-based network or a wireless NIC (WNIC) or wireless adapter for communicating with a wireless network, such as a WI-FI network.</p><p id="p-0065" num="0064">Particular embodiments may include any suitable network and any suitable communication interface <b>310</b> for it. As an example and not by way of limitation, server <b>300</b> may communicate with an ad hoc network, a personal area network (PAN), a LAN, WAN, MAN, or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example, server <b>300</b> may communicate with a wireless PAN (WPAN) (such as, for example, a BLUETOOTH WPAN), a WI-FI network, a WI-MAX network, a cellular telephone network (such as, for example, a Global System for Mobile Communications (GSM) network, a Long-Term Evolution (LTE) network, or a 5G network), or other suitable wireless network or a combination of two or more of these. Server <b>300</b> may include any suitable communication interface <b>310</b> for any of these networks, where appropriate. Communication interface <b>310</b> may include one or more communication interfaces <b>310</b>, where appropriate. Although this disclosure describes and illustrates a particular communication interface, particular embodiments may include any suitable communication interface.</p><p id="p-0066" num="0065">In particular embodiments, bus <b>312</b> includes hardware, software, or both coupling com-ponents of server <b>300</b> to each other. As an example and not by way of limitation, bus <b>312</b> may include an Accelerated Graphics Port (AGP) or other graphics bus, an Enhanced Industry Standard Architecture (EISA) bus, a front-side bus (FSB), a HYPERTRANSPORT (HT) interconnect, an Industry Standard Architecture (ISA) bus, an INFINIBAND interconnect, a low-pin-count (LPC) bus, a memory bus, a Micro Channel Architecture (MCA) bus, a Peripheral Component Interconnect (PCI) bus, a PCI-Express (PCIe) bus, a serial advanced technology attachment (SATA) bus, a Video Electronics Standards Association local (VLB) bus, or another suitable bus or a combination of two or more of these. Bus <b>312</b> may include one or more buses <b>312</b>, where appropriate. Although this disclosure describes and illustrates a particular bus, particular embodiments may include any suitable bus or interconnect.</p><p id="p-0067" num="0066">Herein, a computer-readable non-transitory storage medium or media may include one or more semiconductor-based or other integrated circuits (ICs) (such, as for example, field-programmable gate arrays (FPGAs) or application-specific ICs (ASICs)), hard disk drives (HDDs), hybrid hard drives (HHDs), optical discs, optical disc drives (ODDs), magneto-optical discs, magneto-optical drives, floppy diskettes, floppy disk drives (FDDs), magnetic tapes, solid-state drives (SSDs), RAM-drives, SECURE DIGITAL cards or drives, any other suitable computer-readable non-transitory storage media, or any suitable combination of two or more of these, where appropriate. A computer-readable non-transitory storage medium may be volatile, non-volatile, or a combination of volatile and non-volatile, where appropriate.</p><p id="p-0068" num="0067">Herein, &#x201c;or&#x201d; is inclusive and not exclusive, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, &#x201c;A or B&#x201d; means &#x201c;A, B, or both,&#x201d; unless expressly indicated otherwise or indicated otherwise by context. Moreover, &#x201c;and&#x201d; is both joint and several, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, &#x201c;A and B&#x201d; means &#x201c;A and B, jointly or severally,&#x201d; unless expressly indicated otherwise or indicated otherwise by context.</p><p id="p-0069" num="0068">The scope of this disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments described or illustrated herein that a person having ordinary skill in the art would comprehend. The scope of this disclosure is not limited to the example embodiments described or illustrated herein. Moreover, although this disclosure describes and illustrates respective embodiments herein as including particular components, elements, feature, functions, operations, or steps, any of these embodiments may include any combination or permutation of any of the components, elements, features, functions, operations, or steps described or illustrated anywhere herein that a person having ordinary skill in the art would comprehend. Additionally, although this disclosure describes or illustrates particular embodiments as providing particular advantages, particular embodiments may provide none, some, or all of these advantages.</p><p id="p-0070" num="0069">The embodiments disclosed herein are only examples, and the scope of this disclosure is not limited to them. Particular embodiments may include all, some, or none of the components, elements, features, functions, operations, or steps of the embodiments disclosed herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method performed by a distributed cloud-native application, the method comprising:<claim-text>receiving a request from a user to perform an operation, wherein the user is associated with a risk profile;</claim-text><claim-text>determining a call path through the distributed cloud-native application to perform the operation;</claim-text><claim-text>classifying a risk level associated with the determined call path based on a distributed call graph, wherein the distributed call graph comprises a risk value for each call path of a plurality of call paths through the distributed cloud-native application and wherein each call path comprises one or more distributed cloud-native application components and the risk value is based on a weakness rating associated with each component of the one or more distributed cloud-native application components in the call path;</claim-text><claim-text>determining whether the risk level associated with the determined call path is acceptable based on the risk profile associated with the user; and</claim-text><claim-text>upon determining the risk level associated with the determined call path is acceptable based on the risk profile associated with the user, performing the operation.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the weakness rating associated with each component of the one or more distributed cloud-native application components is based on a mapping of known vulnerabilities to image layers, images or libraries used to build the component.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the weakness rating associated with each component of the one or more distributed cloud-native application components is based on vulnerabilities discovered during testing of the component.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein testing of the component comprises integration testing.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein testing of the component comprises at least one of chaos-testing and fuzz-testing.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the weakness rating associated with each component of the one or more distributed cloud-native application components is based on anomalies observed by external telemetry providers.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the anomalies include at least one of a compromised transport layer security implementation, expired certification, reputation of a service provider, service usage amount, known adware or malware, and domain name.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the distributed call graph is determined statistically.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the request comprises input parameters and determining whether the risk level associated with the determined call path is acceptable is based on the input parameters.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>upon determining the risk level associated with the determined call path is not acceptable based on the risk profile associated with the user, blocking the operation.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising obtaining updates to the distributed call graph.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A cloud-native application host server comprises:<claim-text>a memory comprising instructions and a distributed call graph comprising a risk value for each call path of a plurality of call paths through a distributed cloud-native application and wherein each call path comprises one or more distributed cloud-native application components and the risk value is based on a weakness rating associated with each component of the one or more distributed cloud-native application components in the call path;</claim-text><claim-text>a hardware processor;</claim-text><claim-text>wherein the cloud-native application host server, when executing the instructions at the hardware processor, is configured to:<claim-text>receive a request from a user to perform an operation, wherein the user is associated with a risk profile;</claim-text><claim-text>determine a call path through the distributed cloud-native application to perform the operation;</claim-text><claim-text>classify a risk level associated with the determined call path based on the distributed call graph;</claim-text><claim-text>determine whether the risk level associated with the determined call path is acceptable based on the risk profile associated with the user; and</claim-text><claim-text>upon determining the risk level associated with the determined call path is acceptable based on the risk profile associated with the user, perform the operation.</claim-text></claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The cloud-native application host server of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the weakness rating associated with each component of the one or more distributed cloud-native application components is based on a mapping of known vulnerabilities to image layers, images or libraries used to build the component.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The cloud-native application host server of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the weakness rating associated with each component of the one or more distributed cloud-native application components is based on vulnerabilities discovered during testing of the component.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The cloud-native application host server of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the weakness rating associated with each component of the one or more distributed cloud-native application components is based on anomalies observed by external telemetry providers.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The cloud-native application host server of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the anomalies include at least one of a compromised transport layer security implementation, expired certification, reputation of a service provider, service usage amount, known adware or malware, and domain name.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The cloud-native application host server of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the distributed call graph is determined statistically.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The cloud-native application host server of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the request comprises input parameters and determining whether the risk level associated with the determined call path is acceptable is based on the input parameters.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The cloud-native application host server of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the cloud-native application host server is further configured to:<claim-text>upon determining the risk level associated with the determined call path is not acceptable based on the risk profile associated with the user, block the operation.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The cloud-native application host server of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the cloud-native application host server is further configured to obtain updates to the distributed call graph.</claim-text></claim></claims></us-patent-application>