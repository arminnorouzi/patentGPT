<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007259A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007259</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17642910</doc-number><date>20200923</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>GB</country><doc-number>1913733.0</doc-number><date>20190924</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>13</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>174</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>13</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>174</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">IMAGE DATA ENCODING AND DECODING</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SONY GROUP CORPORATION</orgname><address><city>Tokyo</city><country>JP</country></address></addressbook><residence><country>JP</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SHARMAN</last-name><first-name>Karl James</first-name><address><city>Basingstoke</city><country>GB</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>KEATING</last-name><first-name>Stephen Mark</first-name><address><city>Basingstoke</city><country>GB</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>BROWNE</last-name><first-name>Adrian Richard</first-name><address><city>Basingstoke</city><country>GB</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>SONY GROUP CORPORATION</orgname><role>03</role><address><city>Tokyo</city><country>JP</country></address></addressbook></assignee></assignees><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/GB2020/052296</doc-number><date>20200923</date></document-id><us-371c12-date><date>20220314</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Image data encoding apparatus, comprises an entropy encoder configured to selectively encode data items representing image data so as to generate encoded binarized symbols of successive output data units; the entropy encoder being configured to generate an output data stream subject to a constraint defining an upper limit to the number of binarized symbols that may be expressed by any individual output data unit relative to the size in bytes of that output data unit, in which the entropy encoder is configured to provide padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint; the apparatus comprising: an attribute detector configured to detect an encoding attribute applicable to a given output data unit; and a selector configured to select, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="58.17mm" wi="146.90mm" file="US20230007259A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="242.65mm" wi="146.81mm" file="US20230007259A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="233.09mm" wi="107.78mm" orientation="landscape" file="US20230007259A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="219.79mm" wi="150.37mm" orientation="landscape" file="US20230007259A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="109.81mm" wi="134.37mm" file="US20230007259A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="237.49mm" wi="120.73mm" file="US20230007259A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="219.46mm" wi="93.64mm" file="US20230007259A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="220.05mm" wi="110.66mm" orientation="landscape" file="US20230007259A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="145.88mm" wi="148.93mm" file="US20230007259A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="143.00mm" wi="155.53mm" file="US20230007259A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="166.45mm" wi="148.51mm" file="US20230007259A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="139.19mm" wi="151.13mm" file="US20230007259A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="191.69mm" wi="122.68mm" file="US20230007259A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">Field</heading><p id="p-0002" num="0001">This disclosure relates to image data encoding and decoding.</p><heading id="h-0003" level="1">Description of Related Art</heading><p id="p-0003" num="0002">The &#x201c;background&#x201d; description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent it is described in this background section, as well as aspects of the description which may not otherwise qualify as prior art at the time of filing, is neither expressly or impliedly admitted as prior art against the present disclosure.</p><p id="p-0004" num="0003">There are several video data encoding and decoding systems which involve transforming video data into a frequency domain representation, quantising the frequency domain coefficients and then applying some form of entropy encoding to the quantised coefficients. This can achieve compression of the video data. A corresponding decoding or decompression technique is applied to recover a reconstructed version of the original video data.</p><p id="p-0005" num="0004">High Efficiency Video Coding (HEVC), also known as H.265 or MPEG-H Part 2, is a proposed successor to H.264/MPEG-4 AVC. It is intended for HEVC to improve video quality and double the data compression ratio compared to H.264, and for it to be scalable from 128&#xd7;96 to 7680&#xd7;4320 pixels resolution, roughly equivalent to bit rates ranging from 128 kbit/s to 800Mbit/s.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">The present disclosure addresses or mitigates problems arising from this processing.</p><p id="p-0007" num="0006">The present disclosure provides image data encoding apparatus, comprising:</p><p id="p-0008" num="0007">an entropy encoder configured to selectively encode data items representing image data so as to generate encoded binarized symbols of successive output data units;</p><p id="p-0009" num="0008">the entropy encoder being configured to generate an output data stream subject to a constraint defining an upper limit to the number of binarized symbols that may be expressed by any individual output data unit relative to the size in bytes of that output data unit, in which the entropy encoder is configured to provide padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint; the apparatus comprising:</p><p id="p-0010" num="0009">an attribute detector configured to detect an encoding attribute applicable to a given output data unit; and</p><p id="p-0011" num="0010">a selector configured to select, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</p><p id="p-0012" num="0011">The present disclosure also provides an image data encoding method, comprising:</p><p id="p-0013" num="0012">selectively encoding data items representing image data so as to generate encoded binarized symbols of successive output data units;</p><p id="p-0014" num="0013">generating an output data stream subject to a constraint defining an upper limit to the number of binarized symbols that may be expressed by any individual output data unit relative to the size in bytes of that output data unit;</p><p id="p-0015" num="0014">providing padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint;</p><p id="p-0016" num="0015">detecting an encoding attribute applicable to a given output data unit; and</p><p id="p-0017" num="0016">selecting, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</p><p id="p-0018" num="0017">The present disclosure also provides a suitable decoding apparatus to decode a data signal generated by the method or apparatus defined above.</p><p id="p-0019" num="0018">Further respective aspects and features of the present disclosure are defined in the appended claims.</p><p id="p-0020" num="0019">It is to be understood that both the foregoing general description and the following detailed description are exemplary, but are not restrictive, of the present technology.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0021" num="0020">A more complete appreciation of the disclosure and many of the attendant advantages thereof will be readily obtained as the same becomes better understood by reference to the following detailed description when considered in connection with the accompanying drawings, wherein:</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>1</b></figref> schematically illustrates an audio/video (A/V) data transmission and reception system using video data compression and decompression;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>2</b></figref> schematically illustrates a video display system using video data decompression;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>3</b></figref> schematically illustrates an audio/video storage system using video data compression and decompression;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>4</b></figref> schematically illustrates a video camera using video data compression;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref> schematically illustrate storage media;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>7</b></figref> provides a schematic overview of a video data compression and decompression apparatus;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>8</b></figref> schematically illustrates a predictor;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>9</b></figref> schematically illustrates a partially-encoded image;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>10</b></figref> schematically illustrates a set of possible intra-prediction directions;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>11</b></figref> schematically illustrates a set of prediction modes;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>12</b></figref> schematically illustrates another set of prediction modes;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>13</b></figref> schematically illustrates an intra-prediction process;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>14</b></figref> schematically illustrates a CABAC encoder;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIGS. <b>15</b> and <b>16</b></figref> schematically illustrate CABAC encoding techniques;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIGS. <b>17</b> and <b>18</b></figref> schematically illustrate CABAC decoding techniques;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>19</b></figref> schematically illustrates a partitioned image;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>20</b></figref> schematically illustrates an apparatus;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>21</b></figref> schematically illustrates a controller;</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIGS. <b>22</b>A and <b>22</b>B</figref> schematically represent output data units; and</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a schematic flowchart illustrating a method.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS</heading><p id="p-0042" num="0041">Referring now to the drawings, <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref> are provided to give schematic illustrations of apparatus or systems making use of the compression and/or decompression apparatus to be described below in connection with embodiments of the present technology.</p><p id="p-0043" num="0042">All of the data compression and/or decompression apparatus to be described below may be implemented in hardware, in software running on a general-purpose data processing apparatus such as a general-purpose computer, as programmable hardware such as an application specific integrated circuit (ASIC) or field programmable gate array (FPGA) or as combinations of these. In cases where the embodiments are implemented by software and/or firmware, it will be appreciated that such software and/or firmware, and non-transitory data storage media by which such software and/or firmware are stored or otherwise provided, are considered as embodiments of the present technology.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>1</b></figref> schematically illustrates an audio/video data transmission and reception system using video data compression and decompression.</p><p id="p-0045" num="0044">An input audio/video signal <b>10</b> is supplied to a video data compression apparatus <b>20</b> which compresses at least the video component of the audio/video signal <b>10</b> for transmission along a transmission route <b>30</b> such as a cable, an optical fibre, a wireless link or the like. The compressed signal is processed by a decompression apparatus <b>40</b> to provide an output audio/video signal <b>50</b>. For the return path, a compression apparatus <b>60</b> compresses an audio/video signal for transmission along the transmission route <b>30</b> to a decompression apparatus <b>70</b>.</p><p id="p-0046" num="0045">The compression apparatus <b>20</b> and decompression apparatus <b>70</b> can therefore form one node of a transmission link. The decompression apparatus <b>40</b> and decompression apparatus <b>60</b> can form another node of the transmission link. Of course, in instances where the transmission link is uni-directional, only one of the nodes would require a compression apparatus and the other node would only require a decompression apparatus.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>2</b></figref> schematically illustrates a video display system using video data decompression. In particular, a compressed audio/video signal <b>100</b> is processed by a decompression apparatus <b>110</b> to provide a decompressed signal which can be displayed on a display <b>120</b>. The decompression apparatus <b>110</b> could be implemented as an integral part of the display <b>120</b>, for example being provided within the same casing as the display device. Alternatively, the decompression apparatus <b>110</b> maybe provided as (for example) a so-called set top box (STB), noting that the expression &#x201c;set-top&#x201d; does not imply a requirement for the box to be sited in any particular orientation or position with respect to the display <b>120</b>; it is simply a term used in the art to indicate a device which is connectable to a display as a peripheral device.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>3</b></figref> schematically illustrates an audio/video storage system using video data compression and decompression. An input audio/video signal <b>130</b> is supplied to a compression apparatus <b>140</b> which generates a compressed signal for storing by a store device <b>150</b> such as a magnetic disk device, an optical disk device, a magnetic tape device, a solid state storage device such as a semiconductor memory or other storage device. For replay, compressed data is read from the storage device <b>150</b> and passed to a decompression apparatus <b>160</b> for decompression to provide an output audio/video signal <b>170</b>.</p><p id="p-0049" num="0048">It will be appreciated that the compressed or encoded signal, and a storage medium such as a machine-readable non-transitory storage medium, storing that signal, are considered as embodiments of the present technology.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>4</b></figref> schematically illustrates a video camera using video data compression. In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, an image capture device <b>180</b>, such as a charge coupled device (CCD) image sensor and associated control and read-out electronics, generates a video signal which is passed to a compression apparatus <b>190</b>. A microphone (or plural microphones) <b>200</b> generates an audio signal to be passed to the compression apparatus <b>190</b>. The compression apparatus <b>190</b> generates a compressed audio/video signal <b>210</b> to be stored and/or transmitted (shown generically as a schematic stage <b>220</b>).</p><p id="p-0051" num="0050">The techniques to be described below relate primarily to video data compression and decompression. It will be appreciated that many existing techniques may be used for audio data compression in conjunction with the video data compression techniques which will be described, to generate a compressed audio/video signal. Accordingly, a separate discussion of audio data compression will not be provided. It will also be appreciated that the data rate associated with video data, in particular broadcast quality video data, is generally very much higher than the data rate associated with audio data (whether compressed or uncompressed). It will therefore be appreciated that uncompressed audio data could accompany compressed video data to form a compressed audio/video signal. It will further be appreciated that although the present examples (shown in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>) relate to audio/video data, the techniques to be described below can find use in a system which simply deals with (that is to say, compresses, decompresses, stores, displays and/or transmits) video data. That is to say, the embodiments can apply to video data compression without necessarily having any associated audio data handling at all.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>4</b></figref> therefore provides an example of a video capture apparatus comprising an image sensor and an encoding apparatus of the type to be discussed below. <figref idref="DRAWINGS">FIG. <b>2</b></figref> therefore provides an example of a decoding apparatus of the type to be discussed below and a display to which the decoded images are output.</p><p id="p-0053" num="0052">A combination of <figref idref="DRAWINGS">FIGS. <b>2</b> and <b>4</b></figref> may provide a video capture apparatus comprising an image sensor <b>180</b> and encoding apparatus <b>190</b>, decoding apparatus <b>110</b> and a display <b>120</b> to which the decoded images are output.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref> schematically illustrate storage media, which store (for example) the compressed data generated by the apparatus <b>20</b>, <b>60</b>, the compressed data input to the apparatus <b>110</b> or the storage media or stages <b>150</b>, <b>220</b>. <figref idref="DRAWINGS">FIG. <b>5</b></figref> schematically illustrates a disc storage medium such as a magnetic or optical disc, and <figref idref="DRAWINGS">FIG. <b>6</b></figref> schematically illustrates a solid state storage medium such as a flash memory. Note that <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref> can also provide examples of non-transitory machine-readable storage media which store computer software which, when executed by a computer, causes the computer to carry out one or more of the methods to be discussed below.</p><p id="p-0055" num="0054">Therefore, the above arrangements provide examples of video storage, capture, transmission or reception apparatuses embodying any of the present techniques.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>7</b></figref> provides a schematic overview of a video data compression and decompression apparatus.</p><p id="p-0057" num="0056">A controller <b>343</b> controls the overall operation of the apparatus and, in particular when referring to a compression mode, controls a trial encoding processes by acting as a selector to select various modes of operation such as block sizes and shapes, and whether the video data is to be encoded losslessly or otherwise. The controller is considered to part of the image encoder or image decoder (as the case may be). Successive images of an input video signal <b>300</b> are supplied to an adder <b>310</b> and to an image predictor <b>320</b>. The image predictor <b>320</b> will be described below in more detail with reference to <figref idref="DRAWINGS">FIG. <b>8</b></figref>. The image encoder or decoder (as the case may be) plus the intra-image predictor of <figref idref="DRAWINGS">FIG. <b>8</b></figref> may use features from the apparatus of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. This does not mean that the image encoder or decoder necessarily requires every feature of <figref idref="DRAWINGS">FIG. <b>7</b></figref> however.</p><p id="p-0058" num="0057">The adder <b>310</b> in fact performs a subtraction (negative addition) operation, in that it receives the input video signal <b>300</b> on a &#x201c;+&#x201d; input and the output of the image predictor <b>320</b> on a &#x201c;&#x2212;&#x201d; input, so that the predicted image is subtracted from the input image. The result is to generate a so-called residual image signal <b>330</b> representing the difference between the actual and projected images.</p><p id="p-0059" num="0058">One reason why a residual image signal is generated is as follows. The data coding techniques to be described, that is to say the techniques which will be applied to the residual image signal, tend to work more efficiently when there is less &#x201c;energy&#x201d; in the image to be encoded. Here, the term &#x201c;efficiently&#x201d; refers to the generation of a small amount of encoded data; for a particular image quality level, it is desirable (and considered &#x201c;efficient&#x201d;) to generate as little data as is practicably possible. The reference to &#x201c;energy&#x201d; in the residual image relates to the amount of information contained in the residual image. If the predicted image were to be identical to the real image, the difference between the two (that is to say, the residual image) would contain zero information (zero energy) and would be very easy to encode into a small amount of encoded data. In general, if the prediction process can be made to work reasonably well such that the predicted image content is similar to the image content to be encoded, the expectation is that the residual image data will contain less information (less energy) than the input image and so will be easier to encode into a small amount of encoded data.</p><p id="p-0060" num="0059">The remainder of the apparatus acting as an encoder (to encode the residual or difference image) will now be described. The residual image data <b>330</b> is supplied to a transform unit or circuitry <b>340</b> which generates a discrete cosine transform (DCT) representation of blocks or regions of the residual image data. The DCT technique itself is well known and will not be described in detail here. Note also that the use of DCT is only illustrative of one example arrangement. Other transforms which might be used include, for example, the discrete sine transform (DST). A transform could also comprise a sequence or cascade of individual transforms, such as an arrangement in which one transform is followed (whether directly or not) by another transform. The choice of transform may be determined explicitly and/or be dependent upon side information used to configure the encoder and decoder.</p><p id="p-0061" num="0060">The output of the transform unit <b>340</b>, which is to say, a set of DCT coefficients for each transformed block of image data, is supplied to a quantiser <b>350</b>. Various quantisation techniques are known in the field of video data compression, ranging from a simple multiplication by a quantisation scaling factor through to the application of complicated lookup tables under the control of a quantisation parameter. The general aim is twofold. Firstly, the quantisation process reduces the number of possible values of the transformed data. Secondly, the quantisation process can increase the likelihood that values of the transformed data are zero. Both of these can make the entropy encoding process, to be described below, work more efficiently in generating small amounts of compressed video data.</p><p id="p-0062" num="0061">A data scanning process is applied by a scan unit <b>360</b>. The purpose of the scanning process is to reorder the quantised transformed data so as to gather as many as possible of the non-zero quantised transformed coefficients together, and of course therefore to gather as many as possible of the zero-valued coefficients together. These features can allow so-called run-length coding or similar techniques to be applied efficiently. So, the scanning process involves selecting coefficients from the quantised transformed data, and in particular from a block of coefficients corresponding to a block of image data which has been transformed and quantised, according to a &#x201c;scanning order&#x201d; so that (a) all of the coefficients are selected once as part of the scan, and (b) the scan tends to provide the desired reordering. One example scanning order which can tend to give useful results is a so-called up-right diagonal scanning order.</p><p id="p-0063" num="0062">The scanned coefficients are then passed to an entropy encoder (EE) <b>370</b>. Again, various types of entropy encoding may be used. Two examples are variants of the so-called CABAC (Context Adaptive Binary Arithmetic Coding) system and variants of the so-called CAVLC (Context Adaptive Variable-Length Coding) system. In general terms, CABAC is considered to provide a better efficiency, and in some studies has been shown to provide a 10-20% reduction in the quantity of encoded output data for a comparable image quality compared to CAVLC. However, CAVLC is considered to represent a much lower level of complexity (in terms of its implementation) than CABAC. Note that the scanning process and the entropy encoding process are shown as separate processes, but in fact can be combined or treated together. That is to say, the reading of data into the entropy encoder can take place in the scan order. Corresponding considerations apply to the respective inverse processes to be described below.</p><p id="p-0064" num="0063">The output of the entropy encoder <b>370</b>, along with additional data (mentioned above and/or discussed below), for example defining the manner in which the predictor <b>320</b> generated the predicted image, provides a compressed output video signal <b>380</b>.</p><p id="p-0065" num="0064">However, a return path is also provided because the operation of the predictor <b>320</b> itself depends upon a decompressed version of the compressed output data.</p><p id="p-0066" num="0065">The reason for this feature is as follows. At the appropriate stage in the decompression process (to be described below) a decompressed version of the residual data is generated. This decompressed residual data has to be added to a predicted image to generate an output image (because the original residual data was the difference between the input image and a predicted image). In order that this process is comparable, as between the compression side and the decompression side, the predicted images generated by the predictor <b>320</b> should be the same during the compression process and during the decompression process. Of course, at decompression, the apparatus does not have access to the original input images, but only to the decompressed images. Therefore, at compression, the predictor <b>320</b> bases its prediction (at least, for inter-image encoding) on decompressed versions of the compressed images.</p><p id="p-0067" num="0066">The entropy encoding process carried out by the entropy encoder <b>370</b> is considered (in at least some examples) to be &#x201c;lossless&#x201d;, which is to say that it can be reversed to arrive at exactly the same data which was first supplied to the entropy encoder <b>370</b>. So, in such examples the return path can be implemented before the entropy encoding stage. Indeed, the scanning process carried out by the scan unit <b>360</b> is also considered lossless, but in the present embodiment the return path <b>390</b> is from the output of the quantiser <b>350</b> to the input of a complimentary inverse quantiser <b>420</b>. In instances where loss or potential loss is introduced by a stage, that stage may be included in the feedback loop formed by the return path. For example, the entropy encoding stage can at least in principle be made lossy, for example by techniques in which bits are encoded within parity information. In such an instance, the entropy encoding and decoding should form part of the feedback loop.</p><p id="p-0068" num="0067">In general terms, an entropy decoder <b>410</b>, the reverse scan unit <b>400</b>, an inverse quantiser <b>420</b> and an inverse transform unit or circuitry <b>430</b> provide the respective inverse functions of the entropy encoder <b>370</b>, the scan unit <b>360</b>, the quantiser <b>350</b> and the transform unit <b>340</b>. For now, the discussion will continue through the compression process; the process to decompress an input compressed video signal will be discussed separately below.</p><p id="p-0069" num="0068">In the compression process, the scanned coefficients are passed by the return path <b>390</b> from the quantiser <b>350</b> to the inverse quantiser <b>420</b> which carries out the inverse operation of the scan unit <b>360</b>. An inverse quantisation and inverse transformation process are carried out by the units <b>420</b>, <b>430</b> to generate a compressed-decompressed residual image signal <b>440</b>.</p><p id="p-0070" num="0069">The image signal <b>440</b> is added, at an adder <b>450</b>, to the output of the predictor <b>320</b> to generate a reconstructed output image <b>460</b>. This forms one input to the image predictor <b>320</b>, as will be described below.</p><p id="p-0071" num="0070">Turning now to the process applied to decompress a received compressed video signal <b>470</b>, the signal is supplied to the entropy decoder <b>410</b> and from there to the chain of the reverse scan unit <b>400</b>, the inverse quantiser <b>420</b> and the inverse transform unit <b>430</b> before being added to the output of the image predictor <b>320</b> by the adder <b>450</b>. So, at the decoder side, the decoder reconstructs a version of the residual image and then applies this (by the adder <b>450</b>) to the predicted version of the image (on a block by block basis) so as to decode each block. In straightforward terms, the output <b>460</b> of the adder <b>450</b> forms the output decompressed video signal <b>480</b>. In practice, further filtering may optionally be applied (for example, by a filter <b>560</b> shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref> but omitted from <figref idref="DRAWINGS">FIG. <b>7</b></figref> for clarity of the higher level diagram of <figref idref="DRAWINGS">FIG. <b>7</b></figref>) before the signal is output.</p><p id="p-0072" num="0071">The apparatus of <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> can act as a compression (encoding) apparatus or a decompression (decoding) apparatus. The functions of the two types of apparatus substantially overlap. The scan unit <b>360</b> and entropy encoder <b>370</b> are not used in a decompression mode, and the operation of the predictor <b>320</b> (which will be described in detail below) and other units follow mode and parameter information contained in the received compressed bit-stream rather than generating such information themselves.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>8</b></figref> schematically illustrates the generation of predicted images, and in particular the operation of the image predictor <b>320</b>.</p><p id="p-0074" num="0073">There are two basic modes of prediction carried out by the image predictor <b>320</b>: so-called intra-image prediction and so-called inter-image, or motion-compensated (MC), prediction. At the encoder side, each involves detecting a prediction direction in respect of a current block to be predicted, and generating a predicted block of samples according to other samples (in the same (intra) or another (inter) image). By virtue of the units <b>310</b> or <b>450</b>, the difference between the predicted block and the actual block is encoded or applied so as to encode or decode the block respectively.</p><p id="p-0075" num="0074">(At the decoder, or at the reverse decoding side of the encoder, the detection of a prediction direction may be in response to data associated with the encoded data by the encoder, indicating which direction was used at the encoder. Or the detection may be in response to the same factors as those on which the decision was made at the encoder).</p><p id="p-0076" num="0075">Intra-image prediction bases a prediction of the content of a block or region of the image on data from within the same image. This corresponds to so-called I-frame encoding in other video compression techniques. In contrast to I-frame encoding, however, which involves encoding the whole image by intra-encoding, in the present embodiments the choice between intra- and inter-encoding can be made on a block-by-block basis, though in other embodiments the choice is still made on an image-by-image basis.</p><p id="p-0077" num="0076">Motion-compensated prediction is an example of inter-image prediction and makes use of motion information which attempts to define the source, in another adjacent or nearby image, of image detail to be encoded in the current image. Accordingly, in an ideal example, the contents of a block of image data in the predicted image can be encoded very simply as a reference (a motion vector) pointing to a corresponding block at the same or a slightly different position in an adjacent image.</p><p id="p-0078" num="0077">A technique known as &#x201c;block copy&#x201d; prediction is in some respects a hybrid of the two, as it uses a vector to indicate a block of samples at a position displaced from the currently predicted block within the same image, which should be copied to form the currently predicted block.</p><p id="p-0079" num="0078">Returning to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, two image prediction arrangements (corresponding to intra- and inter-image prediction) are shown, the results of which are selected by a multiplexer <b>500</b> under the control of a mode signal <b>510</b> (for example, from the controller <b>343</b>) so as to provide blocks of the predicted image for supply to the adders <b>310</b> and <b>450</b>. The choice is made in dependence upon which selection gives the lowest &#x201c;energy&#x201d; (which, as discussed above, may be considered as information content requiring encoding), and the choice is signalled to the decoder within the encoded output data-stream. Image energy, in this context, can be detected, for example, by carrying out a trial subtraction of an area of the two versions of the predicted image from the input image, squaring each pixel value of the difference image, summing the squared values, and identifying which of the two versions gives rise to the lower mean squared value of the difference image relating to that image area. In other examples, a trial encoding can be carried out for each selection or potential selection, with a choice then being made according to the cost of each potential selection in terms of one or both of the number of bits required for encoding and distortion to the picture.</p><p id="p-0080" num="0079">The actual prediction, in the intra-encoding system, is made on the basis of image blocks received as part of the signal <b>460</b>, which is to say, the prediction is based upon encoded-decoded image blocks in order that exactly the same prediction can be made at a decompression apparatus. However, data can be derived from the input video signal <b>300</b> by an intra-mode selector <b>520</b> to control the operation of the intra-image predictor <b>530</b>.</p><p id="p-0081" num="0080">For inter-image prediction, a motion compensated (MC) predictor <b>540</b> uses motion information such as motion vectors derived by a motion estimator <b>550</b> from the input video signal <b>300</b>. Those motion vectors are applied to a processed version of the reconstructed image <b>460</b> by the motion compensated predictor <b>540</b> to generate blocks of the inter-image prediction.</p><p id="p-0082" num="0081">Accordingly, the units <b>530</b> and <b>540</b> (operating with the estimator <b>550</b>) each act as detectors to detect a prediction direction in respect of a current block to be predicted, and as a generator to generate a predicted block of samples (forming part of the prediction passed to the units <b>310</b> and <b>450</b>) according to other samples defined by the prediction direction.</p><p id="p-0083" num="0082">The processing applied to the signal <b>460</b> will now be described. Firstly, the signal is optionally filtered by a filter unit <b>560</b>, which will be described in greater detail below. This involves applying a &#x201c;deblocking&#x201d; filter to remove or at least tend to reduce the effects of the block-based processing carried out by the transform unit <b>340</b> and subsequent operations. A sample adaptive offsetting (SAO) filter may also be used. Also, an adaptive loop filter is optionally applied using coefficients derived by processing the reconstructed signal <b>460</b> and the input video signal <b>300</b>. The adaptive loop filter is a type of filter which, using known techniques, applies adaptive filter coefficients to the data to be filtered. That is to say, the filter coefficients can vary in dependence upon various factors. Data defining which filter coefficients to use is included as part of the encoded output data-stream.</p><p id="p-0084" num="0083">The filtered output from the filter unit <b>560</b> in fact forms the output video signal <b>480</b> when the apparatus is operating as a decompression apparatus. It is also buffered in one or more image or frame stores <b>570</b>; the storage of successive images is a requirement of motion compensated prediction processing, and in particular the generation of motion vectors. To save on storage requirements, the stored images in the image stores <b>570</b> may be held in a compressed form and then decompressed for use in generating motion vectors. For this particular purpose, any known compression/decompression system may be used. The stored images are passed to an interpolation filter <b>580</b> which generates a higher resolution version of the stored images; in this example, intermediate samples (sub-samples) are generated such that the resolution of the interpolated image is output by the interpolation filter <b>580</b> is 4 times (in each dimension) that of the images stored in the image stores <b>570</b> for the luminance channel of 4:2:0 and 8 times (in each dimension) that of the images stored in the image stores <b>570</b> for the chrominance channels of 4:2:0. The interpolated images are passed as an input to the motion estimator <b>550</b> and also to the motion compensated predictor <b>540</b>.</p><p id="p-0085" num="0084">The way in which an image is partitioned for compression processing will now be described. At a basic level, an image to be compressed is considered as an array of blocks or regions of samples. The splitting of an image into such blocks or regions can be carried out by a decision tree, such as that described in Bross et al: &#x201c;High Efficiency Video Coding (HEVC) text specification draft 6&#x201d;, JCTVC-H1003_d0 (November 2011), the contents of which are incorporated herein by reference. In some examples, the resulting blocks or regions have sizes and, in some cases, shapes which, by virtue of the decision tree, can generally follow the disposition of image features within the image. This in itself can allow for an improved encoding efficiency because samples representing or following similar image features would tend to be grouped together by such an arrangement. In some examples, square blocks or regions of different sizes (such as 4&#xd7;4 samples up to, say, 64&#xd7;64 or larger blocks) are available for selection. In other example arrangements, blocks or regions of different shapes such as rectangular blocks (for example, vertically or horizontally oriented) can be used. Other non-square and non-rectangular blocks are envisaged. The result of the division of the image into such blocks or regions is (in at least the present examples) that each sample of an image is allocated to one, and only one, such block or region.</p><p id="p-0086" num="0085">The intra-prediction process will now be discussed. In general terms, intra-prediction involves generating a prediction of a current block of samples from previously-encoded and decoded samples in the same image.</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>9</b></figref> schematically illustrates a partially encoded image <b>800</b>. Here, the image is being encoded from top-left to bottom-right on a block by block basis. An example block encoded partway through the handling of the whole image is shown as a block <b>810</b>. A shaded region <b>820</b> above and to the left of the block <b>810</b> has already been encoded. The intra-image prediction of the contents of the block <b>810</b> can make use of any of the shaded area <b>820</b> but cannot make use of the unshaded area below that.</p><p id="p-0088" num="0087">In some examples, the image is encoded on a block by block basis such that larger blocks (referred to as coding units or CUs) are encoded in an order such as the order discussed with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>. Within each CU, there is the potential (depending on the block splitting process that has taken place) for the CU to be handled as a set of two or more smaller blocks or transform units (TUs). This can give a hierarchical order of encoding so that the image is encoded on a CU by CU basis, and each CU is potentially encoded on a TU by TU basis. Note however that for an individual TU within the current coding tree unit (the largest node in the tree structure of block division), the hierarchical order of encoding (CU by CU then TU by TU) discussed above means that there may be previously encoded samples in the current CU and available to the coding of that TU which are, for example, above-right or below-left of that TU.</p><p id="p-0089" num="0088">The block <b>810</b> represents a CU; as discussed above, for the purposes of intra-image prediction processing, this may be subdivided into a set of smaller units. An example of a current TU <b>830</b> is shown within the CU <b>810</b>. More generally, the picture is split into regions or groups of samples to allow efficient coding of signalling information and transformed data. The signalling of the information may require a different tree structure of sub-divisions to that of the transform, and indeed that of the prediction information or the prediction itself. For this reason, the coding units may have a different tree structure to that of the transform blocks or regions, the prediction blocks or regions and the prediction information. In some examples such as HEVC the structure can be a so-called quad tree of coding units, whose leaf nodes contain one or more prediction units and one or more transform units; the transform units can contain multiple transform blocks corresponding to luma and chroma representations of the picture, and prediction could be considered to be applicable at the transform block level. In examples, the parameters applied to a particular group of samples can be considered to be predominantly defined at a block level, which is potentially not of the same granularity as the transform structure.</p><p id="p-0090" num="0089">The intra-image prediction takes into account samples coded prior to the current TU being considered, such as those above and/or to the left of the current TU. Source samples, from which the required samples are predicted, may be located at different positions or directions relative to the current TU. To decide which direction is appropriate for a current prediction unit, the mode selector <b>520</b> of an example encoder may test all combinations of available TU structures for each candidate direction and select the prediction direction and TU structure with the best compression efficiency.</p><p id="p-0091" num="0090">The picture may also be encoded on a &#x201c;slice&#x201d; basis. In one example, a slice is a horizontally adjacent group of CUs. But in more general terms, the entire residual image could form a slice, or a slice could be a single CU, or a slice could be a row of CUs, and so on. Slices can give some resilience to errors as they are encoded as independent units. The encoder and decoder states are completely reset at a slice boundary. For example, intra-prediction is not carried out across slice boundaries; slice boundaries are treated as image boundaries for this purpose.</p><p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. <b>10</b></figref> schematically illustrates a set of possible (candidate) prediction directions. The full set of candidate directions is available to a prediction unit. The directions are determined by horizontal and vertical displacement relative to a current block position, but are encoded as prediction &#x201c;modes&#x201d;, a set of which is shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>. Note that the so-called DC mode represents a simple arithmetic mean of the surrounding upper and left-hand samples. Note also that the set of directions shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref> is just one example; in other examples, a set of (for example) 65 angular modes plus DC and planar (a full set of 67 modes) as shown schematically in <figref idref="DRAWINGS">FIG. <b>12</b></figref> makes up the full set. Other numbers of modes could be used.</p><p id="p-0093" num="0092">In general terms, after detecting a prediction direction, the systems are operable to generate a predicted block of samples according to other samples defined by the prediction direction. In examples, the image encoder is configured to encode data identifying the prediction direction selected for each sample or region of the image (and the image decoder is configured to detect such data).</p><p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. <b>13</b></figref> schematically illustrates an intra-prediction process in which a sample <b>900</b> of a block or region <b>910</b> of samples is derived from other reference samples <b>920</b> of the same image according to a direction <b>930</b> defined by the intra-prediction mode associated with that sample. The reference samples <b>920</b> in this example come from blocks above and to the left of the block <b>910</b> in question and the predicted value of the sample <b>900</b> is obtained by tracking along the direction <b>930</b> to the reference samples <b>920</b>. The direction <b>930</b> might point to a single individual reference sample but in a more general case an interpolated value between surrounding reference samples is used as the prediction value. Note that the block <b>910</b> could be square as shown in <figref idref="DRAWINGS">FIG. <b>13</b></figref> or could be another shape such as rectangular.</p><p id="p-0095" num="0094"><figref idref="DRAWINGS">FIGS. <b>14</b> and <b>15</b></figref> schematically illustrate a previously proposed reference sample projection process.</p><p id="p-0096" num="0095">In <figref idref="DRAWINGS">FIGS. <b>14</b> and <b>15</b></figref>, a block or region <b>1400</b> of samples to be predicted is surrounded by linear arrays of reference samples from which the intra prediction of the predicted samples takes place. The reference samples <b>1410</b> are shown as shaded blocks in <figref idref="DRAWINGS">FIGS. <b>14</b> and <b>15</b></figref>, and the samples to be predicted are shown as unshaded blocks. Note that an 8&#xd7;8 block or region of samples to be predicted is used in this example, but the techniques are applicable to variable block sizes and indeed block shapes.</p><p id="p-0097" num="0096">As mentioned, the reference samples comprise at least two linear arrays in respective orientations with respect to the current image region of samples to be predicted. For example, the linear arrays may be an array or row <b>1420</b> of samples above the block of samples to be predicted and an array or column <b>1430</b> of samples to the left of the block of samples to be predicted.</p><p id="p-0098" num="0097">As discussed above with reference to <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the reference sample arrays can extend beyond the extent of the block to be predicted, in order to provide for prediction modes or directions within the range indicated in <figref idref="DRAWINGS">FIGS. <b>10</b>-<b>12</b></figref>. Where necessary, if previously decoded samples are not available for use as reference samples at particular reference sample positions, other reference samples can be re-used at those missing positions. Reference sample filtering processes can be used on the reference samples.</p><p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. <b>14</b></figref> schematically illustrates the operation of a CABAC entropy encoder.</p><p id="p-0100" num="0099">The CABAC encoder operates in respect of binary data, that is to say, data represented by only the two symbols 0 and 1. The encoder makes use of a so-called context modelling process which selects a &#x201c;context&#x201d; or probability model for subsequent data on the basis of previously encoded data. The selection of the context is carried out in a deterministic way so that the same determination, on the basis of previously decoded data, can be performed at the decoder without the need for further data (specifying the context) to be added to the encoded data stream passed to the decoder.</p><p id="p-0101" num="0100">Referring to <figref idref="DRAWINGS">FIG. <b>14</b></figref>, input data to be encoded may be passed to a binary converter <b>1400</b> if it is not already in a binary form; if the data is already in binary form, the converter <b>1400</b> is bypassed (by a schematic switch <b>1410</b>). In the present embodiments, conversion to a binary form is actually carried out by expressing the quantised DCT coefficient data as a series of binary &#x201c;maps&#x201d;, which will be described further below.</p><p id="p-0102" num="0101">The binary data may then be handled by one of two processing paths, a &#x201c;regular&#x201d; and a &#x201c;bypass&#x201d; path (which are shown schematically as separate paths but which, in embodiments of the invention discussed below, could in fact be implemented by the same processing stages, just using slightly different parameters). The bypass path employs a so-called bypass coder <b>1420</b> which does not necessarily make use of context modelling in the same form as the regular path. In some examples of CABAC coding, this bypass path can be selected if there is a need for particularly rapid processing of a batch of data, but in the present embodiments two features of so-called &#x201c;bypass&#x201d; data are noted: firstly, the bypass data is handled by the CABAC encoder (<b>950</b>, <b>1460</b>), just using a fixed context model representing a 50% probability; and secondly, the bypass data relates to certain categories of data, one particular example being coefficient sign data. Otherwise, the regular path is selected by schematic switches <b>1430</b>, <b>1440</b> operating under the control of control circuitry <b>1435</b>. This involves the data being processed by a context modeller <b>1450</b> followed by a coding engine <b>1460</b>.</p><p id="p-0103" num="0102">The entropy encoder shown in <figref idref="DRAWINGS">FIG. <b>14</b></figref> encodes a block of data (that is, for example, data corresponding to a block of coefficients relating to a block of the residual image) as a single value if the block is formed entirely of zero-valued data. For each block that does not fall into this category, that is to say a block that contains at least some non-zero data, a &#x201c;significance map&#x201d; is prepared. The significance map indicates whether, for each position in a block of data to be encoded, the corresponding coefficient in the block is non-zero. The significance map data, being in binary form, is itself CABAC encoded. The use of the significance map assists with compression because no data needs to be encoded for a coefficient with a magnitude that the significance map indicates to be zero. Also, the significance map can include a special code to indicate the final non-zero coefficient in the block, so that all of the final high frequency/trailing zero coefficients can be omitted from the encoding. The significance map is followed, in the encoded bit stream, by data defining the values of the non-zero coefficients specified by the significance map.</p><p id="p-0104" num="0103">Further levels of map data are also prepared and are encoded. An example is a map which defines, as a binary value (1=yes, 0=no) whether the coefficient data at a map position which the significance map has indicated to be &#x201c;non-zero&#x201d; actually has the value of &#x201c;one&#x201d;. Another map specifies whether the coefficient data at a map position which the significance map has indicated to be &#x201c;non-zero&#x201d; actually has the value of &#x201c;two&#x201d;. A further map indicates, for those map positions where the significance map has indicated that the coefficient data is &#x201c;non-zero&#x201d;, whether the data has a value of &#x201c;greater than two&#x201d;. Another map indicates, again for data identified as &#x201c;non-zero&#x201d;, the sign of the data value (using a predetermined binary notation such as 1 for +, 0 for &#x2212;, or of course the other way around).</p><p id="p-0105" num="0104">In embodiments of the invention, the significance maps and the other maps are allocated in a predetermined manner either to the CABAC encoder or to the bypass encoder, and are all representative of different respective attributes or value ranges of the same initial data items. In one example, at least the significance map is CABAC encoded and at least some of the remaining maps (such as the sign data) are bypass encoded. Accordingly, each data item is split into respective subsets of data and the respective subsets are encoded by first (for example, CABAC) and second (for example, bypass) encoding systems. The nature of the data and of the CABAC and bypass encoding is such that for a predetermined quantity of CABAC encoded data, a variable quantity of zero or more bypass data is generated in respect of the same initial data items. So, for example, if the quantised, reordered DCT data contains substantially all zero values, then it may be that no bypass data or a very small quantity of bypass data is generated, because the bypass data concerns only those map positions for which the significance map has indicated that the value is non-zero. In another example, in quantised reordered DCT data having many high value coefficients, a significant quantity of bypass data might be generated.</p><p id="p-0106" num="0105">In embodiments of the invention, the significance map and other maps are generated from the quantised DCT coefficients, for example by the scan unit <b>360</b>, and is subjected to a zigzag scanning process (or a scanning process selected from zigzag, horizontal raster and vertical raster scanning according to the intra-prediction mode) before being subjected to CABAC encoding.</p><p id="p-0107" num="0106">In general terms, CABAC encoding involves predicting a context, or a probability model, for a next bit to be encoded, based upon other previously encoded data. If the next bit is the same as the bit identified as &#x201c;most likely&#x201d; by the probability model, then the encoding of the information that &#x201c;the next bit agrees with the probability model&#x201d; can be encoded with great efficiency. It is less efficient to encode that &#x201c;the next bit does not agree with the probability model&#x201d;, so the derivation of the context data is important to good operation of the encoder. The term &#x201c;adaptive&#x201d; means that the context or probability models are adapted, or varied during encoding, in an attempt to provide a good match to the (as yet uncoded) next data.</p><p id="p-0108" num="0107">Using a simple analogy, in the written English language, the letter &#x201c;U&#x201d; is relatively uncommon. But in a letter position immediately after the letter &#x201c;Q&#x201d;, it is very common indeed. So, a probability model might set the probability of a &#x201c;U&#x201d; as a very low value, but if the current letter is a &#x201c;Q&#x201d;, the probability model for a &#x201c;U&#x201d; as the next letter could be set to a very high probability value.</p><p id="p-0109" num="0108">CABAC encoding is used, in the present arrangements, for at least the significance map and the maps indicating whether the non-zero values are one or two. Bypass processing&#x2014;which in these embodiments is identical to CABAC encoding but for the fact that the probability model is fixed at an equal (0.5:0.5) probability distribution of 1 s and 0 s, is used for at least the sign data and the map indicating whether a value is &#x3e;2. For those data positions identified as &#x3e;2, a separate so-called escape data encoding can be used to encode the actual value of the data. This may include a Golomb-Rice encoding technique.</p><p id="p-0110" num="0109">The CABAC context modelling and encoding process is described in more detail in WD4: Working Draft 4 of High-Efficiency Video Coding, JCTVC-F803_d5, Draft ISO/IEC 23008-HEVC; 201x(E) 2011 Oct. 28.</p><p id="p-0111" num="0110">Referring now to <figref idref="DRAWINGS">FIGS. <b>15</b> and <b>16</b></figref>, an entropy encoder forming part of a video encoding apparatus comprises a first encoding system (for example an arithmetic coding encoding system such as a CABAC encoder <b>1500</b>) and a second encoding system (such as a bypass encoder <b>1510</b>), arranged so that a particular data word or value is encoded to the final output data stream by either the CABAC encoder or the bypass encoder but not both. In embodiments of the invention, the data values passed to the CABAC encoder and to the bypass encoder are respective subsets of ordered data values split or derived from the initial input data (the reordered quantised DCT data in this example), representing different ones of the set of &#x201c;maps&#x201d; generated from the input data.</p><p id="p-0112" num="0111">The schematic representation in <figref idref="DRAWINGS">FIG. <b>15</b></figref> treats the CABAC encoder and the bypass encoder as separate arrangements. This may well be the case in practice, but in another possibility, shown schematically in <figref idref="DRAWINGS">FIG. <b>16</b></figref>, a single CABAC encoder <b>1620</b> is used as both the CABAC encoder <b>1500</b> and the bypass encoder <b>1510</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref>. The encoder <b>1620</b> operates under the control of an encoding mode selection signal <b>1630</b>, so as to operate with an adaptive context model (as described above) when in the mode of the CABAC encoder <b>1500</b>, and to operate with a fixed 50% probability context model when in the mode of the bypass encoder <b>1510</b>.</p><p id="p-0113" num="0112">A third possibility combines these two, in that two substantially identical CABAC encoders can be operated in parallel (similar to the parallel arrangement of <figref idref="DRAWINGS">FIG. <b>15</b></figref>) with the difference being that the CABAC encoder operating as the bypass encoder <b>1510</b> has its context model fixed at a 50% probability context model.</p><p id="p-0114" num="0113">The outputs of the CABAC encoding process and the bypass encoding process can be stored (temporarily at least) in respective buffers <b>1540</b>, <b>1550</b>. In the case of <figref idref="DRAWINGS">FIG. <b>16</b></figref>, a switch or demultiplexer <b>1660</b> acts under the control of the mode signal <b>1630</b> to route CABAC encoded data to the buffer <b>1550</b> and bypass encoded data to the buffer <b>1540</b>.</p><p id="p-0115" num="0114"><figref idref="DRAWINGS">FIGS. <b>17</b> and <b>18</b></figref> schematically illustrate examples of an entropy decoder forming part of a video decoding apparatus. Referring to <figref idref="DRAWINGS">FIG. <b>17</b></figref>, respective buffers <b>1710</b>, <b>1700</b> pass data to a CABAC decoder <b>1730</b> and a bypass decoder <b>1720</b>, arranged so that a particular encoded data word or value is decoded by either the CABAC decoder or the bypass decoder but not both. The decoded data are reordered by logic <b>1740</b> into the appropriate order for subsequent decoding stages.</p><p id="p-0116" num="0115">The schematic representation in <figref idref="DRAWINGS">FIG. <b>17</b></figref> treats the CABAC decoder and the bypass decoder as separate arrangements. This may well be the case in practice, but in another possibility, shown schematically in <figref idref="DRAWINGS">FIG. <b>18</b></figref>, a single CABAC decoder <b>1850</b> is used as both the CABAC decoder <b>1730</b> and the bypass decoder <b>1720</b> of <figref idref="DRAWINGS">FIG. <b>17</b></figref>. The decoder <b>1850</b> operates under the control of a decoding mode selection signal <b>1860</b>, so as to operate with an adaptive context model (as described above) when in the mode of the CABAC decoder <b>1730</b>, and to operate with a fixed 50% probability context model when in the mode of the bypass encoder <b>1720</b>.</p><p id="p-0117" num="0116">As before, a third possibility combines these two, in that two substantially identical CABAC decoders can be operated in parallel (similar to the parallel arrangement of <figref idref="DRAWINGS">FIG. <b>17</b></figref>) with the difference being that the CABAC decoder operating as the bypass decoder <b>1720</b> has its context model fixed at a 50% probability context model.</p><p id="p-0118" num="0117">In the case of <figref idref="DRAWINGS">FIG. <b>18</b></figref>, a switch or multiplexer <b>1870</b> acts under the control of the mode signal <b>1860</b> to route CABAC encoded data to the decoder <b>1850</b> from the buffer <b>1700</b> or the buffer <b>1710</b> as appropriate.</p><p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. <b>19</b></figref> schematically illustrates a picture <b>1900</b> and will be used to demonstrate various picture partitioning schemes relevant to the following discussion.</p><p id="p-0120" num="0119">One example of the partitioning of a picture is into slices or &#x201c;regular slices&#x201d;. Each regular slice is encapsulated in its own network abstraction layer (NAL) unit. Prediction within the picture (for example intrasample prediction, motion information prediction, coding mode prediction) and entropy coding dependency across slice boundaries are disallowed. This means that a regular slice can be reconstructed independently from other regular slices within the same picture.</p><p id="p-0121" num="0120">A so-called tile defines a horizontal and a vertical boundary to partition a picture into rows and columns of tiles. In a corresponding way to regular slices, in-picture prediction dependencies are not allowed across tile boundaries, nor are entropy decoding dependencies. However, tiles are not constrained to be included into individual NAL units.</p><p id="p-0122" num="0121">In general terms, there may be multiple tiles within a slice, or multiple slices within a tile, and one or more of each within a picture. The schematic example of <figref idref="DRAWINGS">FIG. <b>19</b></figref> shows 4 slices <b>1910</b>, <b>1920</b>, <b>1930</b>, <b>1940</b>, with the slice <b>1940</b> comprising 2 tiles <b>1950</b>, <b>1960</b>. However, as mentioned, this is simply an arbitrary schematic example.</p><p id="p-0123" num="0122">In some example arrangements, a threshold exists for the number of bins (either EP or CABAC) that may be encoded in a slice or a picture, according to the following equation:</p><p id="p-0124" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>BinCountsinNalUnits&#x3c;=(4/3)*NumBitsInVclNalUnits+(RawMinCuBits*PicSizeInMinCbsY)/32 &#x2003;&#x2003;(eq. 1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0125" num="0123">The right hand side of the equation is dependent on the sum of two parts: these are a constant value (RawMinCuBits*PicSizeInMinCbsY) for a particular image region and related to the size of the slice or picture and a dynamic value (NumBitsInVclNalUnits) which is the number of bits coded in the output stream of the slice or picture. Note that the value 4/3 represents a number of bins per bit.</p><p id="p-0126" num="0124">RawMinCuBits is the number of bits in a raw CU of minimum size&#x2014;typically 4*4; and PicSizeInMinCbsY is the number of minimum size CUs in the slice or picture.</p><p id="p-0127" num="0125">If this threshold is exceeded, CABAC zero words (3 bytes with values 00 00 03) are appended to the stream, until the threshold is achieved. Each such zero word increments the dynamic value by 3.</p><p id="p-0128" num="0126">This constraint may be expressed as:</p><p id="p-0129" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>N&#x3c;=K</i>1*<i>B+</i>(<i>K</i>2*<i>CU</i>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0130" num="0000">in which:</p><p id="p-0131" num="0127">N=number of binarized symbols in the output data unit;</p><p id="p-0132" num="0128">K1 is a constant;</p><p id="p-0133" num="0129">B=number of encoded bytes for the output data unit;</p><p id="p-0134" num="0130">K2 is a variable dependent upon properties of minimum size coding units employed by the image data encoding apparatus; and</p><p id="p-0135" num="0131">CU=size of the picture, slice or tile represented by the output data unit expressed as a number of coding units of minimum size.</p><p id="p-0136" num="0132">In previously proposed examples, this threshold check is performed at the picture and slice level.</p><p id="p-0137" num="0133">As an alternative, the following expression of the same threshold may be used, where the difference is in the reference to bytes instead of bits:</p><p id="p-0138" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>BinCountsinNalUnits&#x3c;=(32/3)*NumBytesInVclNalUnits+(RawMinCuBits*PicSizeInMinCbsY)/32 &#x2003;&#x2003;(eq. 2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0139" num="0134">The threshold in eq. 1 (or as equivalently expressed in eq. 2) may be applied uniformly, that is to say irrespective of other encoding or decoding parameters, attributes or the like.</p><p id="p-0140" num="0135">An example of the technical justification for using such a threshold may be that the threshold itself indirectly defines a maximum level of processing performance which is required by a real-time decoder. Real-time decoding relies on decoding each frame in time to achieve a particular output frame rate (for example, a number of frames per second). The constraint on the processing performance of the real-time decoder in turn depends upon the rate at which bins need to be decoded, rather than the amount of resulting decoded data. In order to allow for a relatively straightforward rate control at the encoder side, a technique used to control this situation is to limit (as, for example, an upper limit or threshold or constraint) the number of bins per slice or picture. The maximum processing performance required by the CABAC decoder may then be considered as a product or function of this limit and the rate at which slices or pictures must be decoded.</p><p id="p-0141" num="0136">It is therefore important to aim to set the threshold (or upper limit or constraint) appropriately. A threshold which is too high can lead to problems of either implementing or successfully operating a real-time decoder. Similarly, use of an incorrect or inappropriate threshold can lead to excessive use of padding data (for example dummy or other data simply aiming to occupy portions of the encoded data stream, for example to increase the size of an encoded output data unit), reducing the efficiency of encoding.</p><p id="p-0142" num="0137">As noted with reference to <figref idref="DRAWINGS">FIG. <b>19</b></figref>, a picture or slice can be split into a number of tiles. An example of why this might be performed is to allow the use of multiple concurrent (parallel) decoders.</p><p id="p-0143" num="0138">Under the previously proposed arrangement, each tile does not necessarily meet the threshold calculation discussed above. This could cause problems if, for example, a tile is used or decoded independently as though a picture, or if different tiles (for example with different quantisation parameters or from different sources) are composited together, there can be no guarantee that the resulting composited slice or picture complies with the specification set out above.</p><p id="p-0144" num="0139">To address this issue, in example embodiments, the CABAC threshold is applied at the end of each tile rather than at the end of each slice or picture alone. So, the application of the threshold occurs at the end of encoding any one of a tile, a slice and a picture. Having said this, if each tile in an image is compliant with the threshold, it can be assumed that the whole picture must also be compliant, so that in the case of a picture divided into slices or tiles, it is not therefore necessary to apply the threshold again at the end of encoding the picture.</p><p id="p-0145" num="0140">The terms &#x201c;tile&#x201d; and &#x201c;slice&#x201d; refer to independently decodable units and represent names in use at the priority date of the present application. In the case of a subsequent or other change of name, the arrangement is applicable to other such independently decodable units.</p><p id="p-0146" num="0141">Therefore, in example arrangements, the data unit may be an independently decodable data unit. For example the image portion (represented by an output data unit) may be one of a picture, slice or tile.</p><p id="p-0147" num="0142">In order to apply the equation discussed above, the dynamic value represents the number of bytes coded in the output stream of the tile and the fixed value is dependent upon the number of minimum size coding units (CUs) in the tile.</p><p id="p-0148" num="0143"><figref idref="DRAWINGS">FIG. <b>20</b></figref> schematically illustrates apparatus configured to perform this test. Referring to <figref idref="DRAWINGS">FIG. <b>20</b></figref>, at an input <b>2000</b> a CABAC/EP encoded stream is received from an encoder. A padding data detector <b>2010</b> detects, at a predetermined stage with reference to the completion of a slice or tile, such as at the end of encoding a slice or tile, whether the threshold calculation described above is complied with. A controller <b>2020</b> controls a padding data generator <b>2030</b> in response to the detection by the detector <b>2010</b> to generate padding data <b>2040</b> such as the CABAC zero words described above and to append this by a combiner <b>2050</b> to the stream to form an output stream <b>2060</b>. The generation of zero words can also be signalled back to the detector <b>2010</b> so that as the zero words are appended, the padding data detector <b>2010</b> can continue to monitor for compliance with the threshold and cause the controller <b>2020</b> to cease the generation of zero words once the threshold has been complied with.</p><p id="p-0149" num="0144">In other examples, the controller <b>2020</b> may also act as a predictor configured to generate a prediction, during generation of the output data unit, of whether the constraint will be met by that output data unit in connection with embodiments to be described here.</p><p id="p-0150" num="0145">The predetermined stage could be, for example, every n encoded bins (where n is an integer of one or more), but in example arrangements the predetermined stage is the end of encoding the current output data unit.</p><p id="p-0151" num="0146">In <figref idref="DRAWINGS">FIG. <b>20</b></figref>, therefore, there is disclosed an example of a padding data detector <b>2010</b> configured to detect, at a predetermined stage relative to the encoding of a current output data unit, whether the constraint will be met by the current output data unit; and a padding data generator <b>2030</b> configured to generate and insert in the current output data unit sufficient padding data so that the output data unit including the inserted padding data meets the constraint.</p><p id="p-0152" num="0147">Referring to <figref idref="DRAWINGS">FIG. <b>21</b></figref>, in some examples the controller <b>2020</b> comprises an attribute detector <b>2070</b> configured to detect an encoding attribute applicable to a given output data unit; and</p><p id="p-0153" num="0148">a selector <b>2080</b> configured to select, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints <b>2082</b>.</p><p id="p-0154" num="0149">The controller <b>2020</b> may also comprise a comparator <b>2090</b> to compare a threshold derived from a currently selected constraint with the detection by the padding data detector <b>2010</b> in order to derive a control signal to control the operation of the padding data generator <b>2030</b>.</p><p id="p-0155" num="0150">The attribute detected by the detector <b>2070</b> may be, for example, an encoding attribute (such as an encoding mode or profile, for example the enabling of dependent quantisation (to be discussed below) which is a mode of operation in which a selection of a quantisation parameter for use in quantising a current data value depends at least in part on a property of a previously encoded data value and which is then represented by flag data (shown schematically as <b>2072</b>) included in or associated with the encoded data stream so that it is later detectable at the decoder. For example, the flag data may be included in header data such as output data unit header data (for example, slice header data). The detector <b>2070</b> does not itself need to generate or insert the flag data; this aspect of the process is shown in <figref idref="DRAWINGS">FIG. <b>21</b></figref> merely for schematic purposes for the benefit of the present description. The attribute may be considered as being applicable to a given output data unit, even if (as in some examples) the attribute is also applicable to other (for example preceding or subsequent) output data units.</p><p id="p-0156" num="0151">Therefore the apparatus of <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>14</b></figref>, operating in accordance with the techniques discussed with respect to <figref idref="DRAWINGS">FIGS. <b>19</b> and <b>20</b></figref> (and those discussed below) provides an example of image data encoding apparatus, comprising:</p><p id="p-0157" num="0152">a first data encoder <b>1450</b>, <b>1460</b> and a second data encoder <b>1420</b>, each configured to generate output data bits representing binarized symbols from successive symbols representing image data;</p><p id="p-0158" num="0153">the first data encoder being configured to generate output data bits representing encoded symbols at a variable ratio of a number of data bits to a number of encoded symbols;</p><p id="p-0159" num="0154">the second data encoder being configured to generate a fixed number of output data bits to represent each encoded symbol;</p><p id="p-0160" num="0155">the entropy encoder being configured (for example, using the controller <b>2020</b> and/or the controller <b>1435</b>) to generate an output data stream subject to a constraint defining an upper limit to the number of binarized symbols that may be expressed by any individual output data unit relative to the size in bytes of that output data unit, in which the entropy encoder is configured to provide padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint; the apparatus comprising:</p><p id="p-0161" num="0156">an attribute detector <b>2070</b> configured to detect an encoding attribute applicable to a given output data unit; and</p><p id="p-0162" num="0157">a selector <b>2080</b> configured to select, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</p><p id="p-0163" num="0158">Using techniques shown in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, The first data encoder/decoder may be a context adaptive binary arithmetic coding (CABAC) encoder/decoder. The second data encoder/decoder may be a bypass encoder/decoder. The second data encoder/decoder may be a binary arithmetic coder/decoder using a fixed 50% probability context model.</p><p id="p-0164" num="0159">An example of the application of the threshold or constraint is as follows.</p><p id="p-0165" num="0160">In general terms, the test is &#x201c;does the amount of output data generated meet the threshold test?&#x201d; This can be performed for example at the end of encoding an output data unit.</p><p id="p-0166" num="0161">The apparatus of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, operating in accordance with the techniques discussed here, provides an example of image data encoding apparatus, comprising:</p><p id="p-0167" num="0162">an entropy encoder configured to selectively encode data items representing image data so as to generate encoded binarized symbols of successive output data units;</p><p id="p-0168" num="0163">the entropy encoder being configured to generate an output data stream subject to a constraint defining an upper limit to the number of binarized symbols that may be expressed by any individual output data unit relative to the size in bytes of that output data unit, in which the entropy encoder is configured to provide padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint; the apparatus comprising:</p><p id="p-0169" num="0164">an attribute detector configured to detect an encoding attribute applicable to a given output data unit; and</p><p id="p-0170" num="0165">a selector configured to select, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</p><p id="p-0171" num="0166">The present disclosure also provides a suitable decoding apparatus to decode a data signal generated by the method or apparatus described here.</p><p id="p-0172" num="0167">Further examples of the constraint will now be described.</p><p id="p-0173" num="0168">In the examples discussed above, a single threshold derivation or expression is used consistently. In alternative examples to be described below, a choice is implemented between two or more candidate thresholds or constraints. The choice or selection may be in response to one or more encoding attributes (for example, parameters, attributes or modes, for example parameters or modes which are signalled by flags or the like from the encoder side to the decoder side, or parameters, attributes or modes which are derivable in a corresponding or matching way at the encoder and decoder sides).</p><p id="p-0174" num="0169">An example of a further candidate expression for the threshold or constraint is as follows:</p><p id="p-0175" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>BinCountsinNalUnits&#x3c;=10*NumBytesInVclNalUnits+(RawMinCuBits*PicSizeInMinCbsY)/16 &#x2003;&#x2003;(eq. 3)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0176" num="0170">So, although this eq. 3 could be used uniformly as discussed earlier, in example embodiments a selection is implemented between two or more candidate expressions, for example between eq. 1/2 (as equivalent expressions of the same thing) and eq. 3.</p><p id="p-0177" num="0171">In some examples, the selection may be made in dependence upon whether a given coding attribute signalled in or with the encoded data stream is in a first or a second state, with a respective state of the given attribute corresponding to a selection, at the encoder side and the decoder side, of a respective candidate expression (for example, eq. 1/2 or eq. 3).</p><p id="p-0178" num="0172">An example of such an attribute is the so-called &#x201c;dep_quant_enabled_flag&#x201d;. This indicates in a slice header whether or not a technique referred to as dependent quantisation is enabled in respect of the slice to which that slice header applies.</p><p id="p-0179" num="0173">An alternative to the use of the dep_quant_enabled_flag is in fact a dependence on the availability of the (dep_quant) tool, rather than whether the tool is enabled. So for an example profile, the profile might itself define (for example) &#x201c;dep_quant_enabled_flag must be off (not enabled)&#x201d;; in another there may be no such constraint, allowing the dep_quant tool to be on (enabled) or off (not enabled). The selection could therefore be made at the profile constraint, rather than on whether the dep_quant tool is currently enabled or disabled.</p><p id="p-0180" num="0174">Dependent quantisation is defined in &#x201c;Versatile Video Coding (Draft 5), Bross et al, JVET-N1001-v10, July 2019 (which is incorporated into the present description by reference); see for example section 8.7.3. It relates to a technique by which the decoding process selects between multiple possible quantisation parameters or sets of quantisation parameters, for example in response to a property (such as for example a parity property) of previously encoded and decoded sample values. So, when dep_quant_enabled_flag=1 (enabled), such an ongoing dependent quantisation selection takes place. When dep_quant_enabled_flag=0 (disabled), such an ongoing dependent quantisation selection does not take place. As mentioned above, the flag dep_quant_enabled_flag is provided (as an example of a coding attribute) for example in a slice header so that the enabling or disabling of dependent quantisation applies to whole slice.</p><p id="p-0181" num="0175">A different constraint can be relevant when dependent quantisation is in use or is at least possible because of the empirical observation that dependent quantisation, when applied, can alter an expected relationship between encoded bins and decoded bins. A different constraint, such as eq. 3, can be more appropriate for use with dependent quantisation.</p><p id="p-0182" num="0176">Where multiple candidate constraints are applicable, a decoder would be expected to be subject to a design constraint to provide sufficient processing power, speed or capacity to cope with encoded data generated under the more challenging (or most challenging) of the different available constraints.</p><p id="p-0183" num="0177">More generally, however, any such attribute (for example a flag or parameter) could be used, whether or not it is explicitly signalled in or with the data stream. For example, different candidate expressions could be selected in respect of different respective instances of so-called &#x201c;profiles&#x201d;, where a profile in this context defines a set or basket of parameters such as bit depth, chrominance sampling (for example, 4:0:0 (monochrome), 4:2:0, 4:2:2, 4:4:4 or the like), restrictions on encoding type (such as intra-picture encoding only) and so on.</p><p id="p-0184" num="0178">In example embodiments, an attribute defining some aspect of an output data unit can be used conveniently, because then the relevant threshold derivation can be applied to that output data unit. Examples of output data units in this context can include output data units representing respective image portions such as slices, tiles or pictures. Other examples of suitable attributes can include: for a slice: whether slice type is intra only, or unrestricted (could include inter). As a tile example consider the case of composition of a picture from multiple sources (one tile per source). Each tile could have its own threshold derivation dependent on how it was originally encoded. Alternatively, the attribute could be determined using the value of the attribute for the previous tile/output data unit at the same position in the picture.</p><p id="p-0185" num="0179">In some examples, as discussed above, the constraint or threshold is defined by an expression such as:</p><p id="p-0186" num="0180">N&#x3c;=K1*B+(K2*CU)</p><p id="p-0187" num="0000">in which:</p><p id="p-0188" num="0181">N=number of binarized symbols in the output data unit;</p><p id="p-0189" num="0182">K1 is a constant;</p><p id="p-0190" num="0183">B=number of encoded bytes for the output data unit;</p><p id="p-0191" num="0184">K2 is a variable dependent upon properties of minimum size coding units employed by the image data encoding apparatus; and</p><p id="p-0192" num="0185">CU=size of the picture, slice or tile represented by the output data unit expressed as a number of coding units of minimum size.</p><p id="p-0193" num="0186">It will be noted that this is in fact a generalisation of eq.1, eq. 2 and eq. 3 discussed above. An example list of candidate constraints referring to K1 and K2 is as follows:</p><p id="p-0194" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="70pt" align="left"/><colspec colname="1" colwidth="63pt" align="center"/><colspec colname="2" colwidth="133pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>K1</entry><entry>K2</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="70pt" align="left"/><colspec colname="2" colwidth="63pt" align="center"/><colspec colname="3" colwidth="133pt" align="left"/><tbody valign="top"><row><entry>Eq. 1 or expressed as</entry><entry>&#x2002;4/3</entry><entry>RawMinCuBits*PicSizeInMinCbsY/32</entry></row><row><entry>Eq. 2</entry><entry>32/3</entry><entry>RawMinCuBits*PicSizeInMinCbsY/32</entry></row><row><entry>Eq. 3</entry><entry>10</entry><entry>RawMinCuBits*PicSizeInMinCbsY/16</entry></row><row><entry>Eq. 4</entry><entry>32/3</entry><entry>(3/64) * RawMinCuBits*PicSizeInMinCbsY</entry></row><row><entry>Eq. 5</entry><entry>vclByteScaleFactor</entry><entry>RawMinCuBits*PicSizeInMinCbsY/32</entry></row><row><entry>Eq. 6</entry><entry>36/3</entry><entry>RawMinCuBits*PicSizeInMinCbsY/32</entry></row><row><entry>Eq. 7</entry><entry>&#x2002;3/2</entry><entry>RawMinCuBits*PicSizeInMinCbsY/32</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0195" num="0187">With regard to the example of Eq. 5, the variable vclByteScaleFactor can be expressed as:</p><p id="p-0196" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>vclByteScaleFactor=(32+4*general_tier_flag)/3<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0197" num="0188">where general_tier_flag is an indicator of an encoding tier and varies (in at least some examples) as flag values of either 0 or 1, with 0 indicating a so-called main tier and 1 indicating a so-called high tier. For a particular encoding level (representing maximum dimensions of the images to be encoded), the high tier generally corresponds to a higher bit rate representation than the main tier. In this example therefore, the image data encoding apparatus is configured to operate at an encoding tier selected from at least two candidate encoding tiers and to generate a tier parameter (for example, to be encoded within or at least in association with the encoded image data or bitstream) defining the currently selected encoding tier, in which at least the constant K1 is dependent upon the tier parameter. For example, a higher tier parameter may indicate a higher quality encoded output for a given image size, and the parameter K1 may increase with the tier parameter.</p><p id="p-0198" num="0189">This allows the processing, circuitry, code or logic used to generate the threshold value to be conveniently identical or substantially identical in each case, with the parameters K1 and K2 simply being altered in respect of each of the example equations eq.1/2-eq. 7. However, it will be appreciated that one or more different equations or expressions (or even potentially different fixed threshold values) could be used, as between the different candidate thresholds or constraints discussed above.</p><p id="p-0199" num="0190">The candidate constraints <b>2082</b> can therefore be stored or expressed as pairs of (K1, K2) to be selected by the selector <b>2080</b>. The pairs of (K1, K2) can be predetermined and stored and the encoder and decoder, or the pairs (or an indication of a subset of a larger set of predetermined pairs) could be transmitted from the encoder to the decoder as (for example) part of profile or parameter set data. The expression N&#x3c;=K1*B+(K2*CU) can then be tested at the comparator <b>2090</b> using the prevailing selected (K1, K2).</p><p id="p-0200" num="0191"><figref idref="DRAWINGS">FIGS. <b>22</b>A and <b>22</b>B</figref> provide two schematic examples of output data units, extending across the page, and including binarized data <b>2200</b> and padding data <b>2210</b> as provided and inserted by the techniques described above. The amount of padding data can depend upon the particular image data being encoded (in terms of how efficiently it is able to be encoded) and the constraint in use.</p><p id="p-0201" num="0192"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a schematic flowchart illustrating an image data encoding method, comprising:</p><p id="p-0202" num="0193">selectively encoding (at a step <b>2300</b>) data items representing image data so as to generate encoded binarized symbols of successive output data units;</p><p id="p-0203" num="0194">generating (at a step <b>2310</b>) an output data stream subject to a constraint defining an upper limit to the number of binarized symbols that may be expressed by any individual output data unit relative to the size in bytes of that output data unit;</p><p id="p-0204" num="0195">providing (at a step <b>2320</b>) padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint; detecting (at a step <b>2330</b>) an encoding attribute applicable to a given output data unit; and</p><p id="p-0205" num="0196">selecting (at a step <b>2340</b>), in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</p><p id="p-0206" num="0197">Example embodiments also provide an image decoder comprising circuitry configured to interpret an encoded signal having been generated by controlling the image data encoding apparatus of any one or more of the embodiments described here and to output decoded video images.</p><p id="p-0207" num="0198">Example embodiments also provide an image decoder comprising circuitry configured to interpret an encoded signal having been generated by controlling the first and second data encoders and the controller of any one or more of the embodiments described here and to output decoded video images.</p><p id="p-0208" num="0199">Described embodiments may be implemented in any suitable form including hardware, software, firmware or any combination of these. Described embodiments may optionally be implemented at least partly as computer software running on one or more data processors and/or digital signal processors. The elements and components of any embodiment may be physically, functionally and logically implemented in any suitable way. Indeed the functionality may be implemented in a single unit, in a plurality of units or as part of other functional units. As such, the disclosed embodiments may be implemented in a single unit or may be physically and functionally distributed between different units, circuitry and/or processors. Similarly, a data signal comprising coded data generated according to the methods discussed above (whether or not embodied on a non-transitory machine-readable medium) is also considered to represent an embodiment of the present disclosure.</p><p id="p-0209" num="0200">It will be apparent that numerous modifications and variations of the present disclosure are possible in light of the above teachings. It is therefore to be understood that within the scope of the appended clauses, the technology may be practised otherwise than as specifically described herein.</p><p id="p-0210" num="0201">Respective aspects and features are defined by the following numbered clauses:</p><p id="p-0211" num="0000">1. Image data encoding apparatus, comprising:</p><p id="p-0212" num="0202">an entropy encoder configured to selectively encode data items representing image data so as to generate encoded binarized symbols of successive output data units;</p><p id="p-0213" num="0203">the entropy encoder being configured to generate an output data stream subject to a constraint defining an upper limit to the number of binarized symbols that may be expressed by any individual output data unit relative to the size in bytes of that output data unit, in which the entropy encoder is configured to provide padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint; the apparatus comprising:</p><p id="p-0214" num="0204">an attribute detector configured to detect an encoding attribute applicable to a given output data unit; and</p><p id="p-0215" num="0205">a selector configured to select, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</p><p id="p-0216" num="0000">2. The apparatus of clause 1, in which the entropy encoder is configured to selectively encode data items representing image data to be encoded by a first, context adaptive binary arithmetic coding (CABAC), encoding system or by a second, bypass, encoding system, so as to generate the encoded binarized symbols.<br/>3. The apparatus of clause 1, in which the image data representing one or more pictures;</p><p id="p-0217" num="0206">each picture comprises data representing:</p><p id="p-0218" num="0207">(i) one or more slices within respective network abstraction layer (NAL) units, each slice of a picture being decodable independently of any other slices of the same picture; and</p><p id="p-0219" num="0208">(ii) zero or more tiles defining respective horizontal and vertical boundaries of picture regions and which are not constrained to be encapsulated within respective NAL units, the tiles being decodable independently of other tiles of the same picture; and</p><p id="p-0220" num="0209">the output data units comprise one or more of pictures, slices and tiles.</p><p id="p-0221" num="0210">4. The apparatus of clause 1 or clause 2, in which the second encoding system is a binary arithmetic coding system using a fixed 50% probability context model.</p><p id="p-0222" num="0000">5. The apparatus of any one of the preceding clauses, in which the constraint is defined by:</p><p id="p-0223" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>N&#x3c;=K</i>1*<i>B+</i>(<i>K</i>2*<i>CU</i>) &#x2003;&#x2003;(constraint equation <b>1</b>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0224" num="0000">in which:</p><p id="p-0225" num="0211">N=number of binarized symbols in the output data unit;</p><p id="p-0226" num="0212">K1 is a constant;</p><p id="p-0227" num="0213">B=number of encoded bytes for the output data unit;</p><p id="p-0228" num="0214">K2 is a variable dependent upon properties of minimum size coding units employed by the image data encoding apparatus; and</p><p id="p-0229" num="0215">CU=size of the picture, slice or tile represented by the output data unit expressed as a number of coding units of minimum size.</p><p id="p-0230" num="0000">6. The apparatus of clause 5, in which:</p><p id="p-0231" num="0216">at least two candidate constraints are defined by the constraint equation 1, a respective set of (K1, K2) being associated with each of the at least two candidate constraints; and</p><p id="p-0232" num="0217">the selector is configured to select a set of (K1, K2) for the given output data unit.</p><p id="p-0233" num="0000">7. The apparatus of any one of the preceding clauses, in which:</p><p id="p-0234" num="0218">the controller is configured to encode a representation of the encoding attribute applicable to the given output data unit in association with an output data stream representing the given output data unit.</p><p id="p-0235" num="0000">8. The apparatus of clause 7, in which:</p><p id="p-0236" num="0219">the image data encoding apparatus comprises a quantiser configured to selectively operate in a dependent quantisation mode; and</p><p id="p-0237" num="0220">the encoding attribute indicates whether the dependent quantisation mode is enabled or disabled in respect of the given output data unit.</p><p id="p-0238" num="0000">9. The apparatus of any one of the preceding clauses, in which the entropy encoder comprises:</p><p id="p-0239" num="0221">a detector configured to detect, at a predetermined stage relative to the encoding of a current output data unit, whether the constraint will be met by the current output data unit; and</p><p id="p-0240" num="0222">a padding data generator configured to generate and insert into the current output data unit sufficient padding data so that the output data unit including the inserted padding data meets the constraint.</p><p id="p-0241" num="0000">10. The apparatus of clause 6, in which the predetermined stage is the end of encoding the current output data unit.<br/>11. Video storage, capture, transmission or reception apparatus comprising apparatus according to any one of the preceding clauses.<br/>12. An image data encoding method, comprising:</p><p id="p-0242" num="0223">selectively encoding data items representing image data so as to generate encoded binarized symbols of successive output data units;</p><p id="p-0243" num="0224">generating an output data stream subject to a constraint defining an upper limit to the number of binarized symbols that may be expressed by any individual output data unit relative to the size in bytes of that output data unit;</p><p id="p-0244" num="0225">providing padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint;</p><p id="p-0245" num="0226">detecting an encoding attribute applicable to a given output data unit; and</p><p id="p-0246" num="0227">selecting, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</p><p id="p-0247" num="0000">13. Computer software which, when executed by a computer, causes the computer to carry out the method of clause 12.<br/>14. A machine-readable non-transitory storage medium which stores the computer software of clause 13.<br/>15. A data signal comprising coded data generated according to the method of clause 12.<br/>16 An image data decoder configured to decode the data signal of clause 15.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An image data encoding apparatus, comprising:<claim-text>an entropy encoder configured to selectively encode data items representing image data so as to generate encoded binarized symbols of successive output data units;</claim-text><claim-text>the entropy encoder being configured to generate an output data stream subject to a constraint defining an upper limit to a number of binarized symbols that may be expressed by any individual output data unit relative to a size in bytes of that output data unit, in which the entropy encoder is configured to provide padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint;</claim-text><claim-text>an attribute detector configured to detect an encoding attribute applicable to a given output data unit; and</claim-text><claim-text>a selector configured to select, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the entropy encoder is configured to selectively encode data items representing image data to be encoded by a first, context adaptive binary arithmetic coding (CABAC), encoding system or by a second, bypass, encoding system, so as to generate the encoded binarized symbols.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the image data representing one or more pictures;<claim-text>each picture comprises data representing:</claim-text><claim-text>(i) one or more slices within respective network abstraction layer (NAL) units, each slice of a picture being decodable independently of any other slices of the same picture; and</claim-text><claim-text>(ii) zero or more tiles defining respective horizontal and vertical boundaries of picture regions and which are not constrained to be encapsulated within respective NAL units, the tiles being decodable independently of other tiles of the same picture; and</claim-text><claim-text>the output data units comprise one or more of pictures, slices and tiles.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second encoding system is a binary arithmetic coding system using a fixed 50% probability context model.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the constraint is defined by:<claim-text><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>N&#x3c;=K</i>1*<i>B+</i>(<i>K</i>2*<i>CU</i>) &#x2003;&#x2003;(constraint equation 1)<?in-line-formulae description="In-line Formulae" end="tail"?></claim-text><claim-text>in which</claim-text><claim-text>N=number of binarized symbols in the output data unit;</claim-text><claim-text>K1 is a constant;</claim-text><claim-text>B=number of encoded bytes for the output data unit;</claim-text><claim-text>K2 is a variable dependent upon properties of minimum size coding units employed by the image data encoding apparatus; and</claim-text><claim-text>CU=size of the a picture, slice or tile represented by the output data unit expressed as a number of coding units of minimum size.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The apparatus of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein<claim-text>at least two candidate constraints are defined by the constraint equation 1, a respective set of (K1, K2) being associated with each of the at least two candidate constraints; and</claim-text><claim-text>the selector is configured to select a set of (K1, K2) for the given output data unit.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein<claim-text>the controller entropy encoder is configured to encode a representation of the encoding attribute applicable to the given output data unit in association with an output data stream representing the given output data unit.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein<claim-text>the image data encoding apparatus comprises a quantiser configured to selectively operate in a dependent quantisation mode; and</claim-text><claim-text>the encoding attribute indicates whether the dependent quantisation mode is enabled or disabled in respect of the given output data unit.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the entropy encoder comprises:<claim-text>a detector configured to detect, at a predetermined stage relative to the encoding of a current output data unit, whether the constraint will be met by the current output data unit; and</claim-text><claim-text>a padding data generator configured to generate and insert into the current output data unit sufficient padding data so that the output data unit including the inserted padding data meets the constraint.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the predetermined stage is an end of encoding the current output data unit.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A video storage, capture, transmission or reception apparatus comprising the apparatus according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. An image data encoding method, comprising:<claim-text>selectively encoding data items representing image data so as to generate encoded binarized symbols of successive output data units;</claim-text><claim-text>generating an output data stream subject to a constraint defining an upper limit to a number of binarized symbols that may be expressed by any individual output data unit relative to a size in bytes of that output data unit;</claim-text><claim-text>providing padding data, for each output data unit which does not meet the constraint, so as to increase the size in bytes of that output data unit in order to meet the constraint;</claim-text><claim-text>detecting an encoding attribute applicable to a given output data unit; and</claim-text><claim-text>selecting, in response to the detected encoding attribute, a constraint, for use with the given output data unit, from two or more candidate constraints.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A non-transitory computer readable medium including computer program instructions, which when executed by a computer causes the computer to perform the method of <claim-ref idref="CLM-00012">claim 12</claim-ref>.</claim-text></claim><claim id="CLM-14-16" num="14-16"><claim-text><b>14</b>-<b>16</b>. (canceled)</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. An image data decoding method, comprising:<claim-text>processing encoded image data, the image data comprising padding data used to meet an encoding constraint and encoded based on selecting one constraint from two or more candidate constraints according to the image data encoding method of <claim-ref idref="CLM-00012">claim 12</claim-ref>.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A non-transitory computer readable medium including computer program instructions, which when executed by a computer causes the computer to perform the method of <claim-ref idref="CLM-00017">claim 17</claim-ref>.</claim-text></claim></claims></us-patent-application>