<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004396A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004396</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364824</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>38</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3842</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e43">CONSTRAINED CARRIES ON SPECULATIVE COUNTERS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>INTERNATIONAL BUSINESS MACHINES CORPORATION</orgname><address><city>ARMONK</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Buerkle</last-name><first-name>Dan</first-name><address><city>Cincinnatus</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Bishop</last-name><first-name>James W.</first-name><address><city>Newark Valley</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Pesantez</last-name><first-name>Maria Lorena</first-name><address><city>Travis</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Wilde</last-name><first-name>David Henry</first-name><address><city>Rowland Heights</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer-implemented method for of constrained carries on speculative counters includes providing one or more speculative counters having an upper portion of most significant bits partially embedded in a random-access memory (RAM) array, and a pre-counter portion external to the RAM array having a plurality of least significant bits. The one or more speculative counters are configured to count a plurality of events of interest during a processor core instruction execution. A carry output from the pre-counter portion to the RAM array is suppressed for a duration of a speculative event period.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="178.82mm" wi="158.75mm" file="US20230004396A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="231.99mm" wi="176.02mm" file="US20230004396A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="158.92mm" wi="158.67mm" file="US20230004396A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="203.71mm" wi="159.26mm" file="US20230004396A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="198.37mm" wi="170.43mm" file="US20230004396A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">Technical Field</heading><p id="p-0002" num="0001">The present disclosure generally relates to systems and methods for speculative event counting by a computer processor, and more particularly, to a computer method and system for constrained carries on speculative counters.</p><heading id="h-0003" level="1">Description of the Related Art</heading><p id="p-0003" num="0002">in a computer's Central Processing Unit (CPU), there are one or more processor cores that have various types of counters. For example, a POWER10&#xae; processor core includes Performance Monitor Counters (PMCs) configured to count events of interest that occur during the execution of instruction streams. PMC's can be configured to count many types of processor core events, some of which are speculative in nature. Such speculative PMCs are used for a set of events where there is uncertainty as to which event(s) in the set will actually occur during an instruction execution period. The carry bits from such speculative PMCs can increase the complexity of ensuring the values in the ail the counters are accurate.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0004" num="0003">According to one embodiment, a computer-implemented method of constrained carries on speculative counters includes providing one or more speculative counters having an upper portion of most significant bits partially embedded in a random-access memory (RAM) array, and a pre-counter portion external to the RAM array having a plurality of least significant bits. The one or more speculative counters are configured to count a plurality of events of interest during a processor core instruction execution. A carry output from the pre-counter portion to the RAM array is suppressed for a duration of a speculative event period.</p><p id="p-0005" num="0004">In an embodiment, the method includes implementing the pre-counter portion of the one or more speculative counters with latches, and storing the suppressed carry output in a speculative carry latch.</p><p id="p-0006" num="0005">In an embodiment, the method includes configuring the pre-counter portion of each speculative counter to include a primary pre-counter configured to count the plurality of events of interest during the speculative event period, storing a backup copy of the primary pre-counter in a secondary pre-counter, and storing a rewind value in the secondary pre-counter.</p><p id="p-0007" num="0006">In an embodiment, the method includes wrapping the primary pre-counter to 0 after the carry output is stored in a speculative carry latch.</p><p id="p-0008" num="0007">In an embodiment, the method includes upon determining that the speculative event has occurred with a charge disposition and that both the carry output and a wrapping to 0 has occurred in the primary pre-counter associated with the speculative event, the suppressed carry is sent to the RAM array.</p><p id="p-0009" num="0008">In an embodiment, the method includes incrementing the primary pre-counter based on a count of speculative events until a maximum primary pre-counter value is reached that is 1 less than the secondary pre-counter value, and pausing the updating primary pre-counter for a duration of the speculative event.</p><p id="p-0010" num="0009">In an embodiment, the method includes upon determining that the speculative event has occurred with a charge disposition, updating the secondary pre-counter to the value of the primary pre-counter.</p><p id="p-0011" num="0010">In an embodiment, the method includes performing a rewind disposition upon determining the speculative event did not occur during the speculative event period; wherein the rewind disposition includes clearing the speculative carry latch to an inactive state; and reloading the primary pre-counter with a value of the secondary pre-counter. In an embodiment, the method includes determining that the speculative event has occurred, and updating the secondary pre-counter associated with the speculative event with a value of the primary pre-counter.</p><p id="p-0012" num="0011">In an embodiment, the method includes determining a rewind disposition is to occur by determining that the speculative event has not occurred and the primary pre-counter associated with the speculative event has not exceeded a bit-width limit and suppressed an output carry. The rewind disposition includes updating the primary pre-counter with a value of the secondary pre-counter.</p><p id="p-0013" num="0012">According to an embodiment, a carry suppression system of a processor core includes one or more speculative counters configured to count a plurality of speculative events of interest during a processor core instruction execution. Each of the one of more speculative counters has an upper portion partially embedded in a random-access memory (RAM) array configured to store a most significant plurality of bits and a pre-counter portion externally connected to the RAM array, the pre-counter portion configured to store a plurality of least significant bits. A carry controller connected to the pre-counter portion is configured to control the sending of a carry bit from the pre-counter portion of the one or more speculative counters, and to suppress the sending of the carry bit from the pre-counter portion to the upper portion for a duration of a speculative event period.</p><p id="p-0014" num="0013">In an embodiment, a speculative carry latch is connected to the carry controller and configured to store the suppressed carry bit output from the pre-counter portion.</p><p id="p-0015" num="0014">In an embodiment, the pre-counter portion of each speculative counter includes a primary pre-counter configured to count events of interest during the speculative event period, and a secondary pre-counter configured to store a backup copy of the primary pre-counter and to store a rewind value.</p><p id="p-0016" num="0015">In an embodiment, a RAM array control logic is connected to the RAM array and the carry controller. The RAM array control logic is configured to control reading from and writing to the RAM array including updating the RAM array with a carry bit received from the carry controller.</p><p id="p-0017" num="0016">In an embodiment, the carry controller is configured to wrap the primary pre-counter to 0 after the carry output is stored in a speculative carry latch.</p><p id="p-0018" num="0017">In an embodiment, the carry controller is configured to determine that the speculative event has actually occurred with a charge disposition, and to send the suppressed carry stored in the speculative carry latch to the RAM array control logic for updating the RAM array when both the carry output and a wrapping to 0 has occurred in the primary pre-counter associated with the speculative event.</p><p id="p-0019" num="0018">In an embodiment, the carry controller is configured to increment the primary pre-counter based on a count of speculative events until a maximum primary pre-counter value is reached that is 1 less than the secondary pre-counter value, and pause the updating of the primary pre-counter for a duration of the speculative event.</p><p id="p-0020" num="0019">In an embodiment, the carry controller is configured to update the secondary pre-counter to the paused value of the primary pre-counter, when the speculative event has actually occurred resulting in a charge disposition.</p><p id="p-0021" num="0020">In an embodiment, the carry controller is further configured to perform a rewind when the speculative event has not occurred during the speculative event period, clear the speculative carry latch to an inactive state, and reload the primary pre-counter with a value of the secondary pre-counter.</p><p id="p-0022" num="0021">According to an embodiment, a non-transitory computer readable storage medium tangibly embodies a computer readable program code having computer readable instructions that, when executed, causes a computer device to perform a method of constrained carries on speculative counters. The method includes configuring one or more speculative counters having an upper portion of most significant bits partially embedded in a random-access memory (RAM) array and a pre-counter portion external to the RAM array having a plurality of least significant bits. The one or more speculative counters are configured to count a plurality of events of interest during a processor core instruction execution. A carry output from the pre-counter portion is suppressed from being sent to the RAM array for a duration of a speculative event period. The suppressed carry output is stored in a speculative carry latch for a duration of a speculative period. The RAM array is updated with the suppressed carry stored in the speculative carry latch in response to determining the speculative event occurred.</p><p id="p-0023" num="0022">These and other features will become apparent from the following detailed description of illustrative embodiments thereof, which is to be read in connection with the accompanying drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0024" num="0023">The drawings are of illustrative embodiments. They do not illustrate all embodiments. Other embodiments may be used in addition to or instead. Details that may be apparent or unnecessary may be omitted to save space or for more effective illustration. Some embodiments may be practiced with additional components or steps and/or without all the components or steps that are illustrated. When the same numeral appears in different drawings, it refers to the same or like components or steps.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a constrained carry scheme for a processor core, consistent with an illustrative embodiment.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example of the interaction between a primary and secondary pre-counter portions of a speculative carrier, consistent with an illustrative embodiment.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating of an operation of a constrained carry for speculative counters, consistent with an illustrative embodiment.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a functional block diagram illustration of a particularly configured computer hardware platform, consistent with an illustrative embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><heading id="h-0007" level="2">Overview</heading><p id="p-0029" num="0028">In the following detailed description, numerous specific details are set forth by way of examples to provide a thorough understanding of the relevant teachings. However, it should be understood that the present teachings may be practiced without such details. In other instances, well-known methods, procedures, components, and/or circuitry have been described at a relatively high level, without detail, to avoid unnecessarily obscuring aspects of the present teachings.</p><p id="p-0030" num="0029">As used herein, the term &#x201c;speculative execution&#x201d; generally refers to an execution of code that is performed speculatively prior to determining whether the execution of such code should occur or is needed. For example, branch prediction utilizes speculative execution for a predicted branch.</p><p id="p-0031" num="0030">As used herein, the term &#x201c;speculative counting&#x201d; generally refers to processor core events that occur in the CPU during a speculative execution. For example, a number of cycles and instructions executed by a speculative execution of a portion of a program such as a conditional branch. Processor performance monitor counters (PMC) generally refer to counters that are configured to count the events that occur at the CPU, and may include cache misses, and/or off-chip memory access. Speculative PMCs count the speculative events in which there is uncertainty as to whether one, some or all of the event(s) in a set will actually occur during the instruction execution period.</p><p id="p-0032" num="0031">As used herein, the terms &#x201c;charged&#x201d; and &#x201c;rewind&#x201d; generally refer to whether the speculative event occurs. When a speculative event occurs, the count an associated PMC is &#x201c;charged.&#x201d; When a speculative event does not occur, a &#x201c;rewind&#x201d; operation returns the associated PMC to its earlier value.</p><p id="p-0033" num="0032">In a modern processor core, also known as a computer's CPU (Central Processing Unit), there exist various types of counters that generally include Performance Monitor Counters (PMCs). PMCs are configured to count events of interest which occur during instruction stream execution. More particularly, PMCs are configured to count a variety of processor core events, some of which are speculative in nature.</p><p id="p-0034" num="0033">Speculative PMCs are used for counting a set of uncertain (speculative) events that may occur during an instruction execution period. Speculative PMCs and one or more associated speculative events can be used to measure a processor's performance for stall and latency delays due to data or resource dependencies venue (e.g., when data is unavailable or a resource is busy). Such speculative events can be attributed to a number of different causes within a major dependency category, such as a lack of data from cache, memory, storage, a long vector or fixed-point instruction, or an instruction execution pipeline flush.</p><p id="p-0035" num="0034">In a case where an exact cause of a speculative event is not clear at the beginning of the pause/stall/delay and will not be resolved until the end of the speculative event period, multiple speculative PMCs can be used, where at least one speculative PMC is assigned for each distinct event cause. When the speculative event(s) ends and the actual cause is revealed, only the count(s) of the speculative PMC(s) assigned to count the revealed cause will have their count(s) saved. The speculative PMCs assigned to other causes that did not occur will be returned to their pre-speculative counting value(s). When a speculative event occurs and its associated speculative PMC value is saved, the count is referred to as being &#x201c;charged&#x201d; to the PMC. When a speculative event does not occur and the PMC value is returned to its earlier value, it is said to experience a &#x201c;rewind&#x201d; operation.</p><p id="p-0036" num="0035">In certain architectures that include but are not limited to POWER10&#xae; architecture, PMCs are designated as Special Purpose Registers (SPRs) that adhere to certain access rules and behavior as specified in an Instruction Set Architecture documentation. For example, in the case of a 64-bit scalar machine, any SPR can be up to 64 bits wide. Each PMC can be configured to count one of a multitude of different events, and to count different kinds of events, either speculative (charged or rewound), or direct (always charged by default).</p><p id="p-0037" num="0036">PMCs that are 32-bit Read/Write SPRs accessible by the processor (via &#x201c;move from special purpose register&#x201d; (MFSPR) and &#x201c;move to special purpose register&#x201d; (MTSPR) instructions) can be pre-programmed by software, and are controlled by a multitude of other performance monitor control SPRs. These performance monitor control SPRs are used to configure modes of monitoring, identify start and stop conditions, provide selection from a wide palette of possible events and assign a particular event to a given PMC, among other control duties. Once configured and started, these PMCs count selected events under internal processor hardware control. Wrapping of the PMCs is permitted from a maximum value to 0 with continued counting, as are stop and pause/freeze conditions, as well as multiple counter chaining. The PMCs can be programmed to interrupt the processor when certain counting conditions are met.</p><p id="p-0038" num="0037">To enhance the semiconductor chip area and power efficiency, many SPRs including the PMCs are implemented on a processor chip using embedded RAM arrays. Even with multi-port arrays, access delays of multiple machine cycles are incurred, while the PMCs must have the capability to increment every cycle, and thus some number of least significant bits (LSB's) must be implemented using latches (D-FF), for instantaneous updating and visibility. These LSB's of a PMC are referred to as the &#x201c;pre-counter&#x201d; portion. PMC Pre-counters carry-out conditions then form the carry-in (increment control signal) of the upper-bit portions of that PMC, which is saved in the RAM Register Array.</p><p id="p-0039" num="0038">Controlling the accesses to the RAM array PMC upper-bit portion contents for carry and SPR access presents complexity challenges of scheduling and priority management, as well as pipelining of array command/address presentation, read data capture, and write data provision. An arbitration scheme is typically used along with logic to make all the values correct. RAM array pipelining of command, address, and controls are used for high performance, affording unique PMC upper-bit portion access every machine cycle. This complexity is compounded if multiple carry occurrences to the same PMC upper-bit portion are allowed prior to a first carry to that PMC location is performed and saved into the RAM array, and is compounded even further if speculative counting carries are inflicted on the PMC locations (since these speculative carries may be cancelled if a future Rewind occurs).</p><p id="p-0040" num="0039">According to an embodiment of the present disclosure, the compounded complexity of multiple carry occurrences to the same PMC RAM array location are greatly reduced or eliminated. More particularly, the approach to controlling speculative PMC pre-counter carries includes providing these carries to pre-counters only for the duration of the speculative uncertainty period. Speculative PMC pre-counters are defined with two copies: a primary counter which counts during the period of speculation, and a backup copy which saves the rewind value. To prevent the carry from propagating to the RAM array portion the primary pre-counter copy is allowed to increment speculatively as usual, and if/when the primary pre-counter copy reaches the limiting largest value representable by its bit-width, its carry output is suppressed from being sent to the RAM array control logic while also being saved in a latch. At that point of being saved in the latch, the primary pre-counter copy wraps back to &#x2018;0&#x2019; and continues incrementing. In the event that the primary pre-counter copy increments to a particular value that is 1 less than the backup Rewind pre-counter saved value, then the primary pre-counter copy is held or paused at that particular value for the duration of the speculative event period. The hold/pause is an improvement in computer operation because the full maximum headroom/size/capability of the primary pre-counter can be used for any given speculative event.</p><p id="p-0041" num="0040">If the event continues after the speculative event period, the primary pre-counter copy remains held and counts no further. When the speculative event has been found to occur with a charge disposition, and if the associated Speculative PMC primary pre-counter experienced a carry and wrap, then the suppressed carry is sent to the RAM array control logic and the backup pre-counter copy is updated to the currently held maxed-out primary pre-counter copy value. If a rewind disposition is found to occur, then the carry latch is cleared to its inactive state thereby discarding the suppressed carry, and the primary pre-counter is reloaded with the backup pre-counter copy's value.</p><p id="p-0042" num="0041">If the Speculative PMC primary pre-counter copy does not reach its limit and carry point, then normal actions are taken, with no carry being saved aside and suppressed, and no holding or stoppage of incrementation by the primary pre-counter copy. For a charge speculative event disposition, the backup pre-counter copy is updated with the primary pre-counter copy value. For a rewind speculative event disposition, the primary pre-counter copy is returned to the backup copy value.</p><p id="p-0043" num="0042">In an illustrative embodiment, there is a &#x201c;sweet spot&#x201d; having a most efficient capacity for the pre-counter width such that the Speculative counting Maximum Hold value is both large enough to be useful for longer speculative events, and small enough to provide adequate circuit and power savings. The ideal capacity enables the RAM to be utilized to as great an extent as possible.</p><p id="p-0044" num="0043">In an embodiment, a 13-bit pre-counter size is used. 8,192 cycles or event activations capability, and a 32-bit overall PMC width. Max PMC primary pre-counter state can itself be selected as an event whose duration can be counted via a PMC.</p><p id="p-0045" num="0044">The computer-implemented method and system of the present disclosure advantageously provides improved performance of processor core architecture. As speculative events may not occur, the arrangement of the least significant bits in a pre-counter arrangement external to the RAM array with a suppressed carry relieves the RAM array of updating and tracking carries until it is confirmed that the speculative event has occurred. The array logic control is less complicated than if it were tracking all of the speculative carry bits, and there is a savings in power usage. In addition, there is increased accuracy in the PMCs in the RAM array. By virtue of the teachings herein, there is also an improvement in computer operation due in part to a reduction in processing overhead and storage, as well as a reduction in power consumed.</p><p id="p-0046" num="0045">Additional advantages of the computer-implemented method and device of the present disclosure are disclosed herein.</p><heading id="h-0008" level="1">Example Embodiment</heading><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a constrained carry scheme <b>100</b> for a processor core, consistent with an illustrative embodiment. It is to be understood that the drawing is provided for illustrative purposes and the present disclosure is not limited to the arrangement of <figref idref="DRAWINGS">FIG. <b>1</b></figref> shown and described herein.</p><p id="p-0048" num="0047">The RAM array <b>105</b> includes a plurality of special purposes registers (SPRS) that are embedded on a processor chip. A plurality of the SPRS are configured as the upper portion of speculative counters <b>110</b>. As PMCs have the capability to increment every cycle, the pre-counter portion (including the primary pre-counter <b>115</b> and the secondary (backup) pre-counter <b>120</b> are implemented using latches for instantaneous updating and visibility. The RAM array includes commands, address and control information by pipelining. The primary and secondary pre-counters <b>115</b>, <b>120</b> are used to make operation of the pipelining less complicated.</p><p id="p-0049" num="0048">During a speculative event period, as it is unknown whether the speculative event will occur when the primary pre-counter <b>115</b> counts to a maximum value, the carry bit is output to a carry controller <b>130</b>. The carry controller will send the carry bit to the carry latch <b>125</b> where it is stored during the speculative event period.</p><p id="p-0050" num="0049">With continued reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, when it is determined that the speculative event has occurred, the carry stored in the speculative carry latch <b>125</b> is sent to the RAM array logic <b>135</b> for update of the associated primary upper portion <b>110</b> of the speculative counter. The &#x201c;T<b>0</b>&#x201d;, &#x201c;T<b>1</b>&#x201d;, shown in the pre-counter and upper portion boxes are an identification of the different threads. A multiplexer <b>140</b> receives output from the RAM array <b>105</b> and in conjunction with the RAM array controller <b>135</b> and another input, for example, from another multiplexer <b>145</b> is used to send, for example, SPR read data from the plurality of PMCs.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example of the interaction between a primary and secondary pre-counter portions of a speculative carrier, consistent with an illustrative embodiment. The pre-counter portion includes a primary pre-counter <b>205</b> and a secondary (e.g., backup) pre-counter <b>210</b>. When the speculative counting is set to 0, (SPEC=0), when counting PMC<b>1</b> events such as speculative events, both the primary pre-counter <b>205</b> and the secondary pre-counter <b>210</b> will increment equally with the input event count.</p><p id="p-0052" num="0051">In the case where the SPEC is set to 1 (SPEC=1), the primary counter increments by the speculative event count inputs, while the backup counter holds at a &#x201c;rewind&#x201d; value.</p><p id="p-0053" num="0052">If a speculative event occurs, a &#x201c;charge&#x201d; determination occurs. The secondary pre-counter <b>210</b> is updated with the current speculative count in the primary pre-counter <b>205</b>.</p><p id="p-0054" num="0053">If a speculative event does not occur, then a &#x201c;rewind&#x201d; determination occurs, in which the primary pre-counter <b>205</b> is reloaded with the backup value in the secondary pre-counter <b>210</b> to return to the pre-speculative count value.</p><heading id="h-0009" level="1">Example Process</heading><p id="p-0055" num="0054">With the foregoing overview of the example architecture, it may be helpful now to consider a high-level discussion of an example process. To that end, <figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a computer-implemented method of consistent with an illustrative embodiment. <figref idref="DRAWINGS">FIG. <b>3</b></figref> is shown as a collection of blocks, in a logical order, which represents a sequence of operations that can be implemented in hardware, software, or a combination thereof. In the context of software, the blocks represent computer-executable instructions that, when executed by one or more processors, perform the recited operations. Generally, computer-executable instructions may include routines, programs, objects, components, data structures, and the like that perform functions or implement abstract data types. In each process, the order in which the operations are described is not intended to be construed as a limitation, and any number of the described blocks can be combined in any order and/or performed in parallel to implement the process.</p><p id="p-0056" num="0055">At operation <b>305</b>, one or more speculative counters are partially embedded in a RAM array <b>105</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Each counter has an upper portion of most significant bits that are embedded in the RAM array and a pre-counter portion of least significant bits that are external to the RAM array. The pre-counters can be implemented as latches.</p><p id="p-0057" num="0056">At operation <b>310</b>, the speculative counters are configured to count a plurality of events of interest during a processor core execution. As a speculative event may not occur, the counting starts with pre-counter portions shown as a primary pre-counter <b>115</b> and a secondary pre-counter <b>120</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>). As the RAM Array <b>105</b> has other operations that occur in a pipeline including thread remapping, task switching, SPR read, or SPR write, the pre-counter portions can perform counting for speculative events to make the control of the RAM array less complex.</p><p id="p-0058" num="0057">At operation <b>315</b>, a carry out operation from the pre-counter portion, such as from the primary pre-counter <b>115</b> of the thread PMC<b>1</b>, is suppressed for the duration of a speculative event period. In other words, the associated primary upper portion counter <b>110</b> embedded in the RAM array <b>105</b> is not updated with the speculative carry. This operation prevents using the RAM Array logic to track the carries of speculative events that may not occur.</p><p id="p-0059" num="0058">At operation <b>320</b>, the carry bit output from the primary pre-counter <b>115</b> is stored in a carry latch <b>125</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) until the speculative period has ended and it is determined that the speculative event has occurred. The carry controller sends the carry bit to the RAM array logic <b>135</b> upon confirmation that the speculative event has occurred. This method will be performed for each of the threads of the speculative counters.</p><heading id="h-0010" level="1">Example Particularly Configured Computer Hardware Platform</heading><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>4</b></figref> provides a functional block diagram illustration <b>400</b> of a computer hardware platform. In particular, <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a particularly configured network or host computer platform <b>400</b>, as may be used to implement the method shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0061" num="0060">The computer platform <b>400</b> may include a central processing unit (CPU) <b>404</b>, a nonvolatile mass data storage such as a hard disk drive (HDD) or a Solid-State Drive (SDD) <b>406</b>, random access memory (RAM) and/or read-only memory (ROM) <b>408</b>, a keyboard <b>410</b>, a mouse <b>412</b>, a display <b>414</b>, and a communication interface <b>416</b>, which are connected to a system bus <b>402</b>. The HDD <b>406</b> can include data stores. In one embodiment, the HDD <b>406</b> has capabilities that include storing a program that can execute various processes, such as machine learning and prediction optimization.</p><p id="p-0062" num="0061">In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, there are various modules shown as discrete components for ease of explanation. However, it is to be understood that the functionality of such modules and the quantity of the modules may be fewer or greater than shown.</p><p id="p-0063" num="0062">The constrained carry module <b>440</b> is configured to control the operation of the modules <b>442</b>-<b>446</b> to perform the various operations for a constrained carry operation consistent with an illustrative embodiment. The array log module <b>442</b> is configured to control a RAM array (see <b>105</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that has performance monitoring counters (PMC) that include speculative counters. The PMCs are special purpose registers (SPRS) that can receive commands for reading data, writing data, thread remapping, task switching, and many other functions. The Array logic module <b>442</b> controls and tracks such tasks. In addition, the array logic module controls sending to the particular speculative counter thread the carry bit(s) provided from the pre-counters that have been stored in a carry latch <b>125</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0064" num="0063">The speculative event determination module <b>444</b> identifies speculative events that may occur in the processor core and instruction stream execution to determine whether certain speculative events have occurred. This information is used to perform charge or rewind operations in the pre-processor portion of the counters (see <b>115</b> and <b>120</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0065" num="0064">The carry control module <b>446</b> is configured to perform carry suppression during a speculative event period by storing carry bits from the primary pre-counter into a speculative carry latch <b>125</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Upon completion of a speculative event period and/or confirmation that a speculative event has occurred, the carry control module controls retrieving the carry bit from the speculative carry latch <b>125</b> and providing the carry bit and any associated identifying information to the array logic <b>135</b> of the RAM array <b>105</b>.</p><heading id="h-0011" level="1">CONCLUSION</heading><p id="p-0066" num="0065">The descriptions of the various embodiments of the present teachings have been presented for purposes of illustration, but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p><p id="p-0067" num="0066">While the foregoing has described what are considered to be the best state and/or other examples, it is understood that various modifications may be made therein and that the subject matter disclosed herein may be implemented in various forms and examples, and that the teachings may be applied in numerous applications, only some of which have been described herein. It is intended by the following claims to claim any and all applications, modifications, and variations that fall within the true scope of the present teachings.</p><p id="p-0068" num="0067">The components, steps, features, objects, benefits, and advantages that have been discussed herein are merely illustrative. None of them, nor the discussions relating to them, are intended to limit the scope of protection. While various advantages have been discussed herein, it will be understood that not all embodiments necessarily include all advantages. Unless otherwise stated, all measurements, values, ratings, positions, magnitudes, sizes, and other specifications that are set forth in this specification, including in the claims that follow, are approximate, not exact. They are intended to have a reasonable range that is consistent with the functions to which they relate and with what is customary in the art to which they pertain.</p><p id="p-0069" num="0068">Numerous other embodiments are also contemplated. These include embodiments that have fewer, additional, and/or different components, steps, features, objects, benefits and advantages. These also include embodiments in which the components and/or steps are arranged and/or ordered differently.</p><p id="p-0070" num="0069">The flowchart, and diagrams in the figures herein illustrate the architecture, functionality, and operation of possible implementations according to various embodiments of the present disclosure.</p><p id="p-0071" num="0070">While the foregoing has been described in conjunction with exemplary embodiments, it is understood that the term &#x201c;exemplary&#x201d; is merely meant as an example, rather than the best or optimal. Except as stated immediately above, nothing that has been stated or illustrated is intended or should be interpreted to cause a dedication of any component, step, feature, object, benefit, advantage, or equivalent to the public, regardless of whether it is or is not recited in the claims.</p><p id="p-0072" num="0071">It will be understood that the terms and expressions used herein have the ordinary meaning as is accorded to such terms and expressions with respect to their corresponding respective areas of inquiry and study except where specific meanings have otherwise been set forth herein. Relational terms such as first and second and the like may be used solely to distinguish one entity or action from another without necessarily requiring or implying any such actual relationship or order between such entities or actions. The terms &#x201c;comprises,&#x201d; &#x201c;comprising,&#x201d; or any other variation thereof, are intended to cover a non-exclusive inclusion, such that a process, method, article, or apparatus that comprises a list of elements does not include only those elements but may include other elements not expressly listed or inherent to such process, method, article, or apparatus. An element proceeded by &#x201c;a&#x201d; or &#x201c;an&#x201d; does not, without further constraints, preclude the existence of additional identical elements in the process, method, article, or apparatus that comprises the element.</p><p id="p-0073" num="0072">The Abstract of the Disclosure is provided to allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in various embodiments for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments have more features than are expressly recited in each claim. Rather, as the following claims reflect, the inventive subject matter lies in less than all features of a single disclosed embodiment. Thus, the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separately claimed subject matter.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method of constrained carries on speculative counters, the method comprising:<claim-text>providing one or more speculative counters having an upper portion of most significant bits partially embedded in a random-access memory (RAM) array and a pre-counter portion external to the RAM array having a plurality of least significant bits;</claim-text><claim-text>configuring the one or more speculative counters to count a plurality of events of interest during a processor core instruction execution;</claim-text><claim-text>suppressing a carry output from the pre-counter portion to the RAM array for a duration of a speculative event period; and</claim-text><claim-text>sending the suppressed carry stored in a speculative carry latch to the RAM array for updating the RAM array when both the carry output and a wrapping to 0 has occurred in the primary pre-counter associated with a speculative event.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>implementing the pre-counter portion of each speculative counter with latches; and</claim-text><claim-text>storing the suppressed carry output in the speculative carry latch.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>configuring the pre-counter portion of each speculative counter to include a primary pre-counter configured to count the plurality of events of interest during the speculative event period;</claim-text><claim-text>storing a backup copy of the primary pre-counter in a secondary pre-counter; and</claim-text><claim-text>storing a rewind value in the secondary pre-counter.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising wrapping the primary pre-counter to 0 after the carry output is stored in the speculative carry latch.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. (canceled)</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising:<claim-text>incrementing the primary pre-counter based on a further count of speculative events until a maximum primary pre-counter value is reached that is 1 less than the secondary pre-counter value; and</claim-text><claim-text>pausing an updating of the primary pre-counter for a duration of the speculative event.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising updating the secondary pre-counter to a value of the primary pre-counter.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computer-implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>performing a rewind disposition upon determining the speculative event did not occur during the speculative event period;</claim-text><claim-text>wherein the rewind disposition includes clearing the speculative carry latch to an inactive state; and</claim-text><claim-text>reloading the primary pre-counter with a value of the secondary pre-counter.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer-implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>determining that the speculative event has occurred and the primary pre-counter associated with the speculative event has not exceeded a bit-width limit and suppressed an output carry; and</claim-text><claim-text>updating the secondary pre-counter associated with the speculative event to include a value of the primary pre-counter value in response to determining a charge speculative event disposition has occurred.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer-implemented method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>determining that a rewind disposition is to occur by determining that the speculative event did not occur during the speculative event period; and</claim-text><claim-text>updating the primary pre-counter with a value of the secondary pre-counter.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A carry suppression system of a processor core, the carry suspension system comprising:<claim-text>one or more speculative counters configured to count a plurality of speculative events of interest during a processor core instruction execution, wherein:<claim-text>each of the one of more speculative counters comprises an upper portion partially embedded in a random-access memory (RAM) array configured to store a most significant plurality of bits, and a pre-counter portion externally connected to the RAM array; and</claim-text><claim-text>the pre-counter portion is configured to store a plurality of least significant bits; and</claim-text></claim-text><claim-text>a carry controller connected to the pre-counter portion, configured to:<claim-text>control a sending of a carry bit from the pre-counter portion of the one or more speculative counters, wherein the carry controller is further configured to suppress the sending of the carry bit from the pre-counter portion to the upper portion for a duration of a speculative event period; and</claim-text><claim-text>send the suppressed carry stored in a speculative carry latch to the RAM array for updating the RAM array when both the carry output and a wrapping to 0 has occurred in the primary pre-counter associated with a speculative event.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The carry suppression system according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the speculative carry latch is connected to the carry controller and configured to store the suppressed carry bit output from the pre-counter portion.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The carry suppression system according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, where wherein the pre-counter portion of each speculative counter comprises:<claim-text>a primary pre-counter configured to count events of interest during the speculative event period; and</claim-text><claim-text>a secondary pre-counter configured to store a backup copy of the primary pre-counter and to store a rewind value.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The carry suppression system according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>a RAM array control logic connected to the RAM array and the carry controller, wherein the RAM array control logic is configured to control reading from and writing to the RAM array including updating the RAM array with a carry bit received from the carry controller.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The carry suppression system according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the carry controller is configured to wrap the primary pre-counter to 0 at the same time or after the carry output is stored in the speculative carry latch.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The carry suppression system according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the carry controller is configured to:<claim-text>determine whether the speculative event has actually occurred with a charge disposition.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The carry suppression system according to <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the carry controller is further configured to:<claim-text>increment the primary pre-counter based on a count of speculative events until a maximum primary pre-counter value is reached that is 1 less than the secondary pre-counter value; and</claim-text><claim-text>pause the updating of the primary pre-counter for a duration of the speculative event.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The carry suppression system according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the carry controller is further configured to update the secondary pre-counter to a value of the primary pre-counter.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The carry suppression system according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the carry controller is further configured to:<claim-text>perform a rewind disposition based on a determination that the speculative event has not occurred during the speculative event period, wherein the rewind disposition comprises clear the speculative carry latch to an inactive state, and reload the primary pre-counter with a value of the secondary pre-counter.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory computer readable storage medium tangibly embodying a computer readable program code having computer readable instructions that, when executed, causes a computer device to carry out a method of constrained carries on speculative counters, the method comprising:<claim-text>configuring one or more speculative counters having an upper portion of most significant bits partially embedded in a random-access memory (RAM) array and a pre-counter portion external to the RAM array having a plurality of least significant bits;</claim-text><claim-text>configuring the one or more speculative counters to count a plurality of events of interest during a processor core instruction execution;</claim-text><claim-text>suppressing a carry output from the pre-counter portion to the RAM array for a duration of a speculative event period;</claim-text><claim-text>storing the suppressed carry output in a speculative carry latch for a duration of a speculative period; and</claim-text><claim-text>sending the suppressed carry stored in the speculative carry latch to the RAM array for updating the RAM array when both the carry output and a wrapping to 0 has occurred in the primary pre-counter associated with the speculative event.</claim-text></claim-text></claim></claims></us-patent-application>