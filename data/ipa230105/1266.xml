<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230001267A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230001267</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17744581</doc-number><date>20220513</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>A</section><class>63</class><subclass>B</subclass><main-group>24</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>16</class><subclass>H</subclass><main-group>20</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>A</section><class>63</class><subclass>B</subclass><main-group>24</main-group><subgroup>0075</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>A</section><class>63</class><subclass>B</subclass><main-group>24</main-group><subgroup>0006</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>A</section><class>63</class><subclass>B</subclass><main-group>24</main-group><subgroup>0062</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20180101</date></cpc-version-indicator><section>G</section><class>16</class><subclass>H</subclass><main-group>20</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>A</section><class>63</class><subclass>B</subclass><main-group>2024</main-group><subgroup>0065</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">WORKOUT GENERATION BASED ON USER-AGNOSTIC TRAINING PROFILES AND USER BOUNDRIES</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16795133</doc-number><date>20200219</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11358028</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17744581</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Nautilus, Inc.</orgname><address><city>Vancouver</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Smith</last-name><first-name>Joshua S.</first-name><address><city>Portland</city><state>OR</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A user-specific workout can be generated by adjusting transform parameters of a user-agnostic training profile to conform to a user boundary specifying a user's ability to perform work. The user-agnostic training profile can be defined in a training space, specifying a power curve in a time domain whereas the user boundary can be defined in a boundary space, specifying amounts of user-produced work in a time window size domain. A training boundary can be generated based on the user-agnostic training profile by determining the largest area under the user-agnostic training profile power curve for various time window sizes, where each largest area under the user-agnostic training profile power curve produces a data point for the training boundary for that window size domain value. The training boundary can be transformed based on the user boundary, causing corresponding transformations to the user-agnostics training profile, converting it to a user-specific workout.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="176.53mm" wi="127.93mm" file="US20230001267A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="190.25mm" wi="129.96mm" file="US20230001267A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="210.31mm" wi="162.05mm" orientation="landscape" file="US20230001267A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="198.37mm" wi="135.55mm" file="US20230001267A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="203.96mm" wi="122.94mm" file="US20230001267A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="215.56mm" wi="95.67mm" orientation="landscape" file="US20230001267A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="215.56mm" wi="95.67mm" orientation="landscape" file="US20230001267A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="215.56mm" wi="95.67mm" orientation="landscape" file="US20230001267A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="215.56mm" wi="95.67mm" orientation="landscape" file="US20230001267A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="215.56mm" wi="95.67mm" orientation="landscape" file="US20230001267A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="230.38mm" wi="159.43mm" orientation="landscape" file="US20230001267A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="230.04mm" wi="141.82mm" orientation="landscape" file="US20230001267A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="184.49mm" wi="108.54mm" file="US20230001267A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="189.31mm" wi="152.82mm" orientation="landscape" file="US20230001267A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="176.45mm" wi="145.97mm" orientation="landscape" file="US20230001267A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="210.74mm" wi="151.30mm" orientation="landscape" file="US20230001267A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="201.25mm" wi="145.88mm" orientation="landscape" file="US20230001267A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="222.76mm" wi="137.08mm" file="US20230001267A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="203.79mm" wi="118.28mm" file="US20230001267A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="227.08mm" wi="145.63mm" file="US20230001267A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="197.70mm" wi="111.51mm" orientation="landscape" file="US20230001267A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="203.54mm" wi="124.21mm" orientation="landscape" file="US20230001267A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="202.01mm" wi="112.95mm" orientation="landscape" file="US20230001267A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="213.36mm" wi="114.72mm" orientation="landscape" file="US20230001267A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="223.86mm" wi="161.04mm" orientation="landscape" file="US20230001267A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="224.20mm" wi="132.16mm" orientation="landscape" file="US20230001267A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 16/795,133, titled &#x201c;WORKOUT GENERATION BASED ON USER-AGNOSTIC TRAINING PROFILES AND USER BOUNDARIES&#x201d; (Attorney Docket No. 122648-8005.US00), and is related to U.S. Provisional Patent Application No. 62/609,298, titled &#x201c;CRITICAL POWER ADAPTIVE TRAINING WITH VARYING PARAMETERS&#x201d; (Attorney Docket No. 122648-8001.US00) and U.S. patent application Ser. No. 16/192,733, titled &#x201c;CRITICAL POWER ADAPTIVE TRAINING WITH VARYING PARAMETERS&#x201d; (Attorney Docket No. 122648-8001.US01), which are each herein incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Millions of people desire to train and get in better shape. For many, this is difficult due to lack of time or the effort involved. Many systems have been developed to help people begin training or maximize their training efforts. For example, people read fitness magazines, follow workout programs, attend classes, hire personal trainers, etc. While some of these programs are tailored to individuals, they often fail to maximize a person's potential or cause frustration due to overwork. One cause of this is that many of these programs are not based on measures of a person's potential to perform exercise. Even for programs that uses some previous method to tailor programs to an individual, these methods has been difficult to implement and results have been inaccurate. Furthermore, user-specific workouts developed based on these measurements have failed provide correct levels of intensity and duration.</p><p id="p-0004" num="0003">For example, VO2 is a measurement system that determines a maximum amount of oxygen a person can use. VO2 is measured by dividing an amount of oxygen inhaled per minute by an amount of oxygen exhaled per minute. Thus, VO2 based assessments require a user to be attached to an apparatus that can measure air intake and output and an amount of oxygen in the air. Furthermore, VO2 measurements are generally static for an individual and there is no clear way to translate a VO2 measurement into a duration or intensity level for training. Some techniques have been developed to provide workout guidelines based on heart rate measurements. However, these still require a specialized heart rate monitor attached to a person, are inaccurate, and do not correctly estimated limits on time or intensity training metrics.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">The present technology provides an adaptive training system and related methods that overcome drawbacks of the prior art and provide other benefits. In at least one embodiment, the adaptive training system can generate a user-specific workout by applying a transform to a user-agnostic training profile to conform to a user boundary specifying a user's ability to perform work. A &#x201c;user-agnostic training profile&#x201d; can be defined in a training space, specifying a power curve in a time domain. Thus, a user-agnostic training profile can define parameters for a training session mapping the training session to levels of power output for time segments. For example, the user-agnostic training profile can specify workout apparatus settings (e.g., resistance levels, tilt, weight amounts, etc.), user movement speeds (e.g., revolutions per minute, miles per hour, etc.), etc., which produce particular power outputs.</p><p id="p-0006" num="0005">A user boundary can be defined in a boundary space, specifying amounts of user-produced work in a time window size domain. To conform the user-agnostic training profile to the user boundary, the user-agnostic training profile can be converted into a training boundary in the boundary space. This conversion can include determining the largest area under the user-agnostic training profile power curve for various time window sizes, where each largest area under the user-agnostic training profile power curve produces a data point for the training boundary for that window size domain value.</p><p id="p-0007" num="0006">In some implementations, the user boundary can be determined by the adaptive training system by determining a person's critical power, e.g., the person's indefinite ability to produce power in combination with some finite capacity to work above their critical power (&#x201c;finite work capacity&#x201d;) over a given amount of time. A practical application of a user's critical power and finite work capacity is using them to generate a user-specific workout. A user-specific workout can be a single training session or series of training sessions with specified parameters based on a critical power and/or finite work capacity determination for a user. User-specific workouts based on critical power are accurate, require no special heart rate or oxygen measurement devices, and are adaptable to a user's changing ability level. Furthermore, the transformations of critical power to a user-specific workout can be provided for various types of exercises and timeframes.</p><p id="p-0008" num="0007">The adaptive training system of one or more embodiments includes two aspects of applying the critical power analysis: (1) determining a specific user's finite work capacity and critical power without requiring heart rate information or use of an invasive measurement apparatus, and (2) using those determinations to generate user-specific workouts for any given set of workout parameters. In determining a user's finite work capacity and critical power, the adaptive training system can receive statistics from one or more of the user's current or prior workouts or segments of a workout, and determine the user's finite work capacity and critical power based only on time intervals and measurements indicative of power output. As used herein &#x201c;power measurements&#x201d; or &#x201c;power output&#x201d; and the like can refer to actual measurements of power (e.g., watts of stationary bike output) or surrogates that are highly correlated to power, such as running speed, repetitions performed over a time, etc. Furthermore, as a user logs additional workouts, these finite work capacity and critical power determinations can be updated, and new or modified user-specific workouts can be generated for the user. In some implementations, more recent workouts can have a greater weight in determining these measurements as compared to older workout statistics. For example, a scalar decay function can be applied to workout data to weight it based on age.</p><p id="p-0009" num="0008">The adaptive training system can determine a finite work capacity and critical power for a particular user by generating data points from one or more workout statistic sets. Each data point can be a measure of the user's maximum work performed in a workout for any time window of a particular length. For a particular workout, multiple data points can be taken using different time window lengths. Each data point can be a work value computed by taking the maximum integration, for a given time window size, of a function that provides power based on time. Thus, a work data point will be the largest area under the power function for any interval matching the time window size of that data point. Where multiple workouts are used, a final workout statistic set can keep only the largest work value for each time window size from the multiple workouts. The adaptive training system can fit points from one or more workout statistic sets to an ability function (which in some cases can also be a &#x201c;user boundary&#x201d;). In some implementations, the ability function can be used to determine a critical power, which corresponds to the slope of the ability function, and the finite work capacity, which corresponds to the y-intercept of the ability function. Alternatively, the adaptive training system can use a function fit to the demonstrated work as the ability function (e.g., using them as boundary points for future user-specific workouts). Additional details regarding determining a user's ability function and/or finite work capacity and critical power are discussed below in relation to <figref idref="DRAWINGS">FIGS. <b>3</b>-<b>5</b></figref>.</p><p id="p-0010" num="0009">In various implementations, the ability function can be provided by the user's work capacity. In some implementations, the ability function can be a linear or non-linear function fit to a workout statistic set, as discussed above. The slope of the ability function can define the user's critical power and the y-intercept can define the user's finite work capacity. In some implementations, once a critical power (CP) and finite work capacity (W&#x2032;) have been determined, the ability function can be modified to account for real-world circumstances, such as the fact that given zero time a user's ability to perform work is also zero. This modification can include turning the ability function into a combined linear and logarithmic function. For example, the ability function can be specified as W=CP*t+W&#x2032;*log(t+1), where W is a work ability (dependent variable) and t is a given amount of time (independent variable). In some implementations, the ability function can be the workout statistic set used as a user boundary for corresponding points of user-specific workouts.</p><p id="p-0011" num="0010">In some implementations, the user boundary can be a combination of an &#x201c;estimate function&#x201d; and a &#x201c;measurement function.&#x201d; The estimate function can be a function fit to a set of measured work values, such as the critical power and finite work capacity or another ability function. The measurement function can be represented as a series of line segments that connect the measured work values and a line segment with a slope of zero, continuing from the final measured value. The combination can be made by averaging the estimate and measured functions. In some implementations, the averaging can include weighting the functions according to a confidence function, which is specified by the difference between the estimate and measurement functions. Additional details regarding creating a combined user boundary are discussed below in relation to <figref idref="DRAWINGS">FIGS. <b>10</b> and <b>12</b></figref>.</p><p id="p-0012" num="0011">Once the adaptive training system has determined a user boundary (e.g., an ability function and/or critical power with a finite work capacity), the adaptive training system can use it to generate a user-specific workout.</p><p id="p-0013" num="0012">In some implementations, for any particular workout type, a number of parameters can describe the workout in terms of work and time. For example, in an interval workout with regular intervals, the workout can be defined in terms of five parameters: number of intervals, interval duration, power output during intervals, rest duration, power output during rests. All but one of these parameters can be specified either by a user or based on characteristics of the workout. For example, for a workout on a treadmill, a user can specify interval duration and rest duration, and a power output during the intervals and power output during rests can be determined based on the treadmill settings, such as speed and angle. The adaptive training system can then compute the final parameter, based on the user's critical power and finite work capacity, such that a user-specific workout plan can be generated that directs the user's exercise to approach but not pass an exhaustion threshold. For example, the number of intervals can be set such that a function, describing the workout, based on the five parameters mapped in terms of work/time, does not exceed a user's ability function. Additional details regarding using an ability function and/or critical power and finite work capacity to generate a specific user-specific workout for a workout type defined by parameters are discussed below in relation to <figref idref="DRAWINGS">FIGS. <b>6</b> and <b>7</b></figref>.</p><p id="p-0014" num="0013">In other implementations, the adaptive training system can generate a user-specific workout by adjusting parameters of a user-agnostic training profile to conform to a user boundary specifying a user's ability to perform work. The user boundary can be the critical power and finite work capacity or another ability function, defined in a boundary space with a time window size domain and a work range. The adaptive training system can generate a training boundary, in the boundary space, based on the user-agnostic training profile. This training boundary can be a function in the boundary space that specifies, for a given time window size in the boundary domain, a range value given by the largest integration of any segment of the user-agnostic training profile with a size matching the time window size. The training boundary can be linked to the user-agnostic training profile such that a change to one causes a corresponding change to the other. The adaptive training system can then compare the training boundary to the user boundary, adjusting the training boundary, e.g., to minimize or maximize an area between them or to minimize a loss function that balances between perceived user effort and workout potential. The change to the training boundary can cause a corresponding change to the user-agnostic training profile. The changed user-agnostic training profile can be a user-specific workout. Additional details regarding generating a user-specific workout by applying a transform to a user-agnostic training profile are discussed below in relation to <figref idref="DRAWINGS">FIGS. <b>9</b>, <b>11</b>, <b>13</b>, and <b>14</b></figref>.</p><p id="p-0015" num="0014">In various implementations, the adaptive training system can be implemented, at least in part, as an integrated component of a workout machine, in a network of workout machines that share information, as an &#x201c;app,&#x201d; in a fitness tracker, as part of a server-based information system (e.g., accessed through a webpage), or any combination thereof. For example, the adaptive training system can be integrated into a workout machine instrumented to take work measurements indicative of power output (e.g., resistance and revolutions per minute, time and distance, etc.). The adaptive training system can use these measurements to determine work vs. time data points. These data points can be used to compute critical power and finite work capacity of the user (e.g., by fitting them to an ability function). The adaptive training system can then provide a user-specific workout configured to bring the user within a threshold amount of, but not surpass, an exhaustion point determined based on the critical power and finite work capacity or ability function. The user-specific workout can be provided as visual output with suggested workout parameters. Alternatively or in addition, the user-specific workout power setting can be provided as automatic adjustments to workout apparatus settings (e.g., treadmill speed, incline, spinning resistance, etc.). An example of this configuration is described below in relation to <figref idref="DRAWINGS">FIG. <b>8</b>A</figref>.</p><p id="p-0016" num="0015">As another example, the adaptive training system can be implemented in a network of workout machines. In this example, the adaptive training system can identify the user based on authentication data provided to a workout machine or through a mobile device, such as through a website or app, by scanning a QR code on the machine, etc. Then, during a subsequent workout, data points from measurements on that machine can be added to data points from measurements previously taken on other machines to maintain updated critical power and finite work capacity or ability function gauges. These can be used to generate a user-specific workout. The user-specific workout can include workout suggestions or power settings, which can be provided on the networked machine or on the mobile device. Alternatively or in addition, the user-specific workout can include workout machine power settings, which the adaptive training system can automatically apply on the machine. An example of this configuration is described below in relation to <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>.</p><p id="p-0017" num="0016">As yet a further example, the adaptive training system can be implemented on a mobile device or other computing system, e.g., as an app, through a webpage, or as a function of a smartwatch or other fitness device. In some implementations, the adaptive training system can automatically gather data (e.g., distance, amount of time, speed, elevation change, etc.) or a user can manually enter it (e.g., by entering distance and time following a run). The adaptive training system can then provide a user-specific workout. In some implementations, the user-specific workout can include showing further statistics, such as changes in critical power or finite work capacity over time. In some implementations, the user-specific workout can provide a suggested workout plan. The suggested workout plan can set aspects of the user-specific workout to meet user goals. In some implementations, the user-specific workout can include user specific modifications to a user-agnostic training profile, e.g., as guided workouts or other training suggestions or instructions. An example of this configuration is described below in relation to <figref idref="DRAWINGS">FIG. <b>8</b>C</figref>.</p><p id="p-0018" num="0017">The current technology provides a number of benefits over the prior art. For example, the adaptive training system can determine a ability function without the need for a heart rate monitor, oxygen equipment, or other invasive equipment attached to a user. In addition, user-specific workouts based on an ability function provide a basis for workout levels while not being subject to the inaccuracies from which heart rate monitoring methods suffer. Further, the adaptive training system can be implemented using low power, low processing speed equipment and only needs to store the &#x201c;best record&#x201d; data, effectively reducing the amount of required storage capacity, as compared to prior art systems that require large amounts of interrelated data to make a training suggestion.</p><p id="p-0019" num="0018">In various implementations, the adaptive training technology can be implemented as a method, system, or computer-readable storage medium. A workout machine system for automatically providing a user-specific workout can include a workout apparatus that implements a training session of a particular type, with given parameters. The workout machine system can also include an instrument system, integrated with the workout apparatus, that obtains measurements indicative of power output. The workout machine system can also comprise a processing component configured to generate a user-specific workout.</p><p id="p-0020" num="0019">Where the adaptive training technology is implemented as a method it can be performed as operations by a computing system or can be embodied in operations resulting from executing of instructions stored in a computer-readable storage medium. These operations can comprise: identifying a work value for each particular window size, of multiple window size durations of the measurements indicative of power output. This can be accomplished by identifying a largest integration, of a function specified by the measurements indicative of power output, for an interval matching the particular window size. The operations can also include fitting, as an ability function, a function to the work values identified for the multiple window size durations. The ability function can be defined in a boundary space, specifying amounts of user-produced work for a total time window domain. The operations can further comprise obtaining a user-agnostic training profile, defined in a training space, specifying a power curve for a training program in a time domain. Further, the operations can include creating a training boundary by creating a version of the user-agnostic training profile converted to the boundary space. In some cases, the user-agnostic training profile is linked to the training boundary such that a change to one provides a corresponding change to the other. The training boundary can then be compared to the user boundary. Based on this comparison, the operations can make various modifications to the training boundary, e.g., to transform the training boundary to maximize or minimize a total area between the training boundary and the user boundary or to minimizing a loss function that balances between perceived user effort and workout potential, where the loss function specifies a number that relates to how well the training boundary and user boundaries match one another. These transforms can cause corresponding changes to the user-agnostic training profile, changing it into a user-specific workout. Finally, the operations can provide output or automatic workout settings based on the user-specific workout.</p><p id="p-0021" num="0020">In various implementations, the adaptive training technology can obtain the measurements indicative of power output through manual entry by a user, through recorded workout statistics taken by a wearable fitness tracker, or through an instrument system integrated into a workout apparatus.</p><p id="p-0022" num="0021">In various implementations, the adaptive training technology can be implemented by a server system connected to multiple workout machines, by one or more workout machines, or by a mobile device associated with a user of a workout apparatus.</p><p id="p-0023" num="0022">In various implementations, the adaptive training technology can be implemented in relation to multiple workout machines connected via a network. The measurements indicative of power output can be taken from a first of the networked workout machines while a second set of measurements indicative of power output can be taken from a second of the networked workout machines. This second set of measurements indicative of power output can be transformed into additional work values for corresponding window sizes and can be weighted based on an age of the second set of measurements. When the adaptive training technology performs the fitting of the function to the work values identified for the multiple window size durations, it can further accomplish this by fitting the function to the additional work values. In some implementations, this fitting can include selecting, for each particular window size, the largest value, of the work values and to the additional work values, corresponding to that particular window size; and fitting the function to the selected largest values for the window sizes.</p><p id="p-0024" num="0023">In some implementations, the adaptive training technology can generate the user-specific workout in response to an identification comprising a code indicative of a user or of a workout apparatus. The identification can be supplied: by the user, by a mobile device associated with the user, or by the workout apparatus. In some implementations, the code indicative of the workout apparatus can be supplied to the mobile device through an image capture system on the mobile device that captures an alphanumeric code, a bar code, or QR code displayed in conjunction with the workout apparatus.</p><p id="p-0025" num="0024">The output or automatic workout settings that the adaptive training technology provides can be output to a server system or mobile device comprising an indication of the user-specific workout. In some implementations, the output can be to a mobile device comprising data to be operated on by the execution of instructions on the mobile device. This execution can provide a display for a user to implement the user-specific workout. In some implementations, the output can be to a workout apparatus configured to cause a display of the workout apparatus to provide instructions based on the user-specific workout. The output can also include automatic workout settings that cause a workout apparatus to automatically implement the user-specific workout. In some implementations, the output can be provided to a server system or a mobile device and the output is stored in association with a user profile. The user profile can include various information such as: the identified work values, the ability function, statistics of the user-specific workout, measures of actual performance during the training session, biographic specifics, or any combination thereof.</p><p id="p-0026" num="0025">In some implementations, the adaptive training technology can provide an internet-based interface that is accessible through a web browser or mobile device application. The internet-based interface can provide access to a user profile associated with multiple workouts performed by a user.</p><p id="p-0027" num="0026">In various implementations, the measurements indicative of power output can comprise one or more of: speed, revolutions-per-minute, resistance, incline, distance, duration, weight, repetitions, or any combination thereof.</p><p id="p-0028" num="0027">In various implementations, the ability function is a linear or non-linear function.</p><p id="p-0029" num="0028">In some implementations, the adaptive training technology can be implemented by a server system that obtains additional work values, stored in association with a user profile for the user, and generates the user-specific workout, both of which may be in response to an authentication of the user.</p><p id="p-0030" num="0029">In some implementations, generating the user-specific workout can comprise selecting data to display as instructions to a user to perform a workout based on at least one previously unspecified parameter. The user-specific workout can also specify the output or automatic workout settings.</p><p id="p-0031" num="0030">In some implementations, while the user is performing the user-specific workout, the adaptive training technology can also receive further measurements indicative of power output as the user-specific workout is performed. The adaptive training technology can identify further work values based on the further measurements indicative of power output. The adaptive training technology can then update the ability function to further fit the further work values; update user-specific workout based on a comparison of the user boundary (from the user-agnostic training profile) to the updated ability function; generate an updated user-specific workout based on the new comparison; and update the output or automatic workout settings based on the updated user-specific workout.</p><p id="p-0032" num="0031">In some implementations, the user boundary is a function fit to a set of measurements of user work for particular time windows. In some cases, the user boundary is a measured user boundary, where the user boundary is a series of line segments that connect measurements of user work for particular time windows. In yet other cases, the user boundary is a combination between estimated and measured user boundaries based on confidence factor, where the user boundary is a combination of A) a function fit to a set of measurements of user work for particular time windows and B) a series of line segments that connect the measurements of user work for particular time windows. The combination at multiple points in the domain can be based on confidence weighting factors specified for each of the multiple points in the domain; and the confidence weighting factors, for each particular point of the multiple points in the domain, can be based on a progressive measurement for a section of the domain ending at the particular point, where the progressive measurement measures a cumulative difference between X) the function fit to the set of measurements in the section of the domain and Y) the series of line segments in the section of the domain.</p><p id="p-0033" num="0032">In some implementations, a training profile can be shared between users. This can include a generated user-specific workout being a first user-specific workout for a corresponding first user boundary; and the user-agnostic training profile is transmitted to a geographically remote system; and the user-agnostic training profile is transformed into a second user-specific workout, different from the first user-specific workout, by adjusting the user-agnostic training profile based on a second user boundary different from the first user boundary.</p><p id="p-0034" num="0033">In various implementations, adjustments to the training boundary includes maximizing an area between the user boundary and the training boundary to minimize user perceived effort or adjustments to the training boundary includes minimizing an area between the user boundary and the training boundary to maximize workout potential. In other cases the comparison between the training boundary and the user boundary causes an adjustment to the training boundary that minimizes a loss function that balances between perceived user effort and workout potential. In some implementations, adjusting of the training boundary is based at least in part on a determined duration of a video or audio media item. In yet further cases, adjusting of the training boundary is based at least in part on a determined tempo or pace of a video or audio media item.</p><p id="p-0035" num="0034">In various implementations, output or settings of a workout apparatus can be automatically provided based on the user-specific workout. This can include one or more of: providing the output, to a server system, including an indication of the user-specific workout; providing the output, to a mobile device, including an indication of the user-specific workout; providing the output to a mobile device, including data for the user-specific workout to be operated on by execution of instructions on the mobile device, wherein the execution of instructions by the mobile device provide a display for a user to implement the user-specific workout; providing the output to the workout apparatus, the output configured to cause a display of the workout apparatus to provide instructions for the user-specific workout; providing the settings to the workout apparatus, wherein the workout apparatus automatically implements the user-specific workout; or any combination thereof.</p><p id="p-0036" num="0035">In some implementations, a user-agnostic training profile can be based on one or more user drawn lines, provided to a user interface, that are automatically converted into the user-agnostic training profile. In some cases, the user-agnostic training profile can be obtained from a library of predefined user-agnostic training profiles.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an overview of devices on which some implementations can operate.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating an overview of an environment in which some implementations can operate.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating components which, in some implementations, can be used in a system employing the disclosed technology.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating a process used in some implementations for determining a finite work capacity and critical power using time-based power output statistics.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref> are diagrams illustrating an example of windowing power output statistics to determine maximum work data points.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>5</b>F</figref> is a diagram illustrating an example with a function fit to a series of data points determined through windowing of time-based power output statistics.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>5</b>G</figref> is a diagram illustrating an example with a combined linear and logarithmic performance ability function generated based on a determined finite work capacity and critical power.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating a process used in some implementations for translating a determined fit function into a user-specific workout based on workout parameters.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating an example representation of a workout function computed by determining a parameter to keep the workout function below an exhaustion point, based on fit function parameters.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIGS. <b>8</b>A-C</figref> illustrate example system configurations that implement versions of an adaptive training system.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow diagram illustrating a process used in some implementations for generating a user-specific workout based on a user-agnostic training profile and a user boundary.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flow diagram illustrating a process used in some implementations for computing a user boundary based on a combination of an estimate function from user work measurements and a measurement function from the user work measurements.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating an example of converting a user-agnostic training profile into a training boundary.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating an example of computing a user boundary based on a combination of an estimate function and a measurement function.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIGS. <b>13</b>A-<b>13</b>C</figref> are diagrams illustrating examples of changes to a training boundary that cause corresponding changes to a user-agnostic training profile.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIGS. <b>14</b>A-<b>14</b>B</figref> are diagrams illustrating examples of selecting parameters for a user-specific workout based on a comparison between a user boundary and a training boundary.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0053" num="0052">The techniques introduced here may be better understood by referring to the following Detailed Description in conjunction with the accompanying drawings, in which like reference numerals indicate identical or functionally similar elements.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0054" num="0053">Turning now to the figures, <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an overview of devices on which some implementations of the disclosed technology can operate. The devices can comprise hardware components of a device <b>100</b> that can assess a user boundary and use the assessment to generate a user-specific workout. Device <b>100</b> can include one or more input devices <b>120</b> that provide input to the CPU(s) (processor) <b>110</b> notifying it of events. The events can be mediated by a hardware controller that interprets the signals received from the input device and communicates the information to the CPU <b>110</b> using a communication protocol. Input devices <b>120</b> include, for example, instrumentation on workout equipment that measures values indicative of power output (e.g., number of rotations, speed, incline, resistance, etc.), an accelerometer, a pedometer, a touchscreen, an infrared sensor, a wearable input device, a camera- or image-based input device, a microphone, a mouse, a keyboard, or other user input devices.</p><p id="p-0055" num="0054">CPU <b>110</b> can be a single processing unit or multiple processing units in a device or distributed across multiple devices. CPU <b>110</b> can be coupled to other hardware devices, for example, with the use of a bus, such as a PCI bus or SCSI bus. The CPU <b>110</b> can communicate with a hardware controller for devices, such as for controlling settings of a workout machine or providing output to a display <b>130</b>. Display <b>130</b> can be used to display text or graphics. In various implementations, display <b>130</b> provides a user-specific workout as features of a suggested workout on a workout machine display, on a phone display, on a fitness device display, or through a computer monitor display. In some implementations, display <b>130</b> includes the input device as part of the display, such as when the input device is a touchscreen or is equipped with an eye direction monitoring system. In some implementations, the display is separate from the input device. Examples of display devices are: an LCD display screen, an LED display screen, a projected, holographic, or augmented reality display (such as a heads-up display device or a head-mounted device), and so on. Other input/output (&#x201c;I/O&#x201d;) devices <b>140</b> can also be coupled to the processor, such as a network card, video card, audio card, USB, firewire or other external device, camera, printer, speakers, CD-ROM drive, DVD drive, disk drive, or Blu-Ray device. In some implementations, other I/O can include a haptic feedback system, such as vibrations through a mobile device or fitness device that can provide indications of a user-specific workout. In some implementations, other I/O can include a connection, either directly or across a network, that provides for automatic controls and settings to be provided to workout machines based on a determined user-specific workout.</p><p id="p-0056" num="0055">In some implementations, the device <b>100</b> also includes a communication device capable of communicating wirelessly or wire-based with a network node. The communication device can communicate with another device or a server through a network using, for example, TCP/IP protocols. Device <b>100</b> can utilize the communication device to distribute operations across multiple network devices.</p><p id="p-0057" num="0056">The CPU <b>110</b> can have access to a memory <b>150</b> in a device or distributed across multiple devices. A memory includes one or more of various hardware devices for volatile and non-volatile storage, and can include both read-only and writable memory. For example, a memory can comprise random access memory (RAM), CPU registers, read-only memory (ROM), and writable non-volatile memory, such as flash memory, hard drives, floppy disks, CDs, DVDs, magnetic storage devices, tape drives, device buffers, and so forth. A memory is not a propagating signal divorced from underlying hardware; a memory is thus non-transitory. Memory <b>150</b> can include program memory <b>160</b> that stores programs and software, such as an operating system <b>162</b>, adaptive training system <b>164</b>, and other application programs <b>166</b>. Memory <b>150</b> can also include data memory <b>170</b> that can include power measurements, windowing data points, critical power and finite work capacity determinations or other ability functions, adaptive workout programs based on ability functions, user-agnostic training profiles, training boundaries, configuration data, settings, user options or preferences, etc., which can be provided to the program memory <b>160</b> or any element of the device <b>100</b>.</p><p id="p-0058" num="0057">Some implementations can be operational with numerous other computing system environments or configurations. Examples of computing systems, environments, or configurations that may be suitable for use with the technology include, but are not limited to, workout machines, personal computers, server computers, handheld or laptop devices, cellular telephones, wearable electronics, gaming consoles, tablet devices, multiprocessor systems, microprocessor-based systems, set-top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, or the like.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating an overview of an environment <b>200</b> in which some implementations of the disclosed technology can operate. Environment <b>200</b> can include one or more computing enabled devices <b>205</b>A-D, examples of which can include device <b>100</b>. For example, computing enabled devices can include any of a mobile phone or wearable device <b>205</b>A, laptop <b>205</b>B, desktop or server <b>205</b>C, or exercise equipment <b>205</b>D, which can be stand alone or networked and configured to collect workout data. Computing enabled devices <b>205</b> can operate in a networked environment using logical connections <b>210</b> through network <b>230</b> to one or more remote computers, such as a server computing device.</p><p id="p-0060" num="0059">In some implementations, server <b>210</b> can be an edge server which receives client requests and coordinates fulfillment of those requests through other servers, such as servers <b>220</b>A-C. Server computing devices <b>210</b> and <b>220</b> can comprise computing systems, such as device <b>100</b>. Though each server computing device <b>210</b> and <b>220</b> is displayed logically as a single server, server computing devices can each be a distributed computing environment encompassing multiple computing devices located at the same or at geographically disparate physical locations. In some implementations, each server <b>220</b> corresponds to a group of servers.</p><p id="p-0061" num="0060">Computing enabled devices <b>205</b> and server computing devices <b>210</b> and <b>220</b> can each act as a server or client to other server/client devices. Server <b>210</b> can connect to a database <b>215</b>. Servers <b>220</b>A-C can each connect to a corresponding database <b>225</b>A-C. As discussed above, each server <b>220</b> can correspond to a group of servers, and each of these servers can share a database or can have their own database. Databases <b>215</b> and <b>225</b> can warehouse (e.g., store) information such as previous workout data, user profile data, workout statistics, historical critical power and finite work capacity determinations, user-agnostic training profiles, etc. Though databases <b>215</b> and <b>225</b> are displayed logically as single units, databases <b>215</b> and <b>225</b> can each be a distributed computing environment encompassing multiple computing devices, can be located within their corresponding server, or can be located at the same or at geographically disparate physical locations.</p><p id="p-0062" num="0061">Network <b>230</b> can be a local area network (LAN) or a wide area network (WAN), but can also be other wired or wireless networks. Network <b>230</b> may be the Internet or some other public or private network. Computing enabled devices <b>205</b> can be connected to network <b>230</b> through a network interface, such as by wired or wireless communication. While the connections between server <b>210</b> and servers <b>220</b> are shown as separate connections, these connections can be any kind of local, wide area, wired, or wireless network, including network <b>230</b> or a separate public or private network.</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating components <b>300</b> which, in some implementations, can be used in a system employing the disclosed technology. The components <b>300</b> include hardware <b>302</b>, general software <b>320</b>, and specialized components <b>340</b>. As discussed above, a system implementing the disclosed technology can use various hardware including processing units <b>304</b> (e.g., CPUs, GPUs, APUs, etc.), working memory <b>306</b>, storage memory <b>308</b> (local storage or as an interface to remote storage, such as storage <b>215</b> or <b>225</b>), and input and output devices <b>310</b>. In various implementations, storage memory <b>308</b> can be one or more of: local devices, interfaces to remote storage devices, or combinations thereof. For example, storage memory <b>308</b> can be a set of one or more hard drives (e.g., a redundant array of independent disks (RAID)) accessible through a system bus or can be a cloud storage provider or other network storage accessible via one or more communications networks (e.g., a network accessible storage (NAS) device, such as storage <b>215</b> or storage provided through another server <b>220</b>). Components <b>300</b> can be implemented in a computing enabled device such as computing enabled devices <b>205</b> or on a server computing device, such as server computing device <b>210</b> or <b>220</b>.</p><p id="p-0064" num="0063">General software <b>320</b> can include various applications including an operating system <b>322</b>, local programs <b>324</b>, and a basic input output system (BIOS) <b>326</b>. Specialized components <b>340</b> can be subcomponents of a general software application <b>320</b>, such as local programs <b>324</b>. Specialized components <b>340</b> can include critical power (CP) and finite work capacity (FWC) analyzer <b>344</b>, training boundary generator <b>346</b>, user boundary and training boundary comparator <b>348</b>, user-specific workout generator <b>350</b>, and components which can be used for providing user interfaces, transferring data, and controlling the specialized components, such as interface <b>342</b>. In some implementations, components <b>300</b> can be in a computing system that is distributed across multiple computing devices or can be an interface to a server-based application executing one or more of specialized components <b>340</b>.</p><p id="p-0065" num="0064">In some implementations, critical power and finite work capacity analyzer <b>344</b> can receive power output statistics for a user, e.g., through interface <b>342</b>, and can use them to determine the user's critical power and finite work capacity. For example, where components <b>300</b> are part of a workout machine, I/O <b>310</b> can include an instrument system, integrated with the workout machine, that takes measurements indicative of power output. I/O <b>310</b> can then use interface <b>342</b> to provide the measurements indicative of power output as power output statistics to critical power and finite work capacity analyzer <b>344</b>. As another example, where components <b>300</b> are part of a mobile device, I/O <b>310</b> can include a user interface that takes user entered measurements indicative of power output (e.g., run time and distance). I/O <b>310</b> can then use interface <b>342</b> to provide these as power output statistics to critical power and finite work capacity analyzer <b>344</b>. In some implementations, critical power and finite work capacity analyzer <b>344</b> can determine a critical power and finite work capacity by determining maximum work data points. Each maximum work data point can correspond to a largest area under a graph of the power output statistics for any window of a given size. Each data point can represent an amount of work the user is able to perform in a given timeframe. The critical power and finite work capacity analyzer <b>344</b> can then fit a function, in the work range for the time domain, to the highest data points for each window size across workouts. In some implementations, critical power and finite work capacity analyzer <b>344</b> can provide this fitted function in place of an explicit critical power or finite work capacity values. In some implementations where the fitted function is linear, the critical power can be the slope of the fitted function and the finite work capacity can be the y-intercept. In some implementations, once a critical power (CP) and finite work capacity (W&#x2032;) have been determined, the ability function can be converted into a combined linear and logarithmic function. For example, the ability function can be specified as W=CP*t+W&#x2032;*log(t+1), where W is a work ability (dependent variable) and t is a given amount of time (independent variable). Additional details on determining critical power and finite work capacity from power output statistics are discussed below in relation to <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>.</p><p id="p-0066" num="0065">Training boundary generator <b>346</b> can take a user-agnostic training profile (defined in a training space with time in the domain and power in the range) and convert it into a training boundary (defined in a boundary space with time window size in the domain and work in the range). Training boundary generator <b>346</b> can receive a user-agnostic training profile via interface <b>342</b>, e.g., from a user specifying power levels for time segments or from a library of previously defined user-agnostic training profiles. Training boundary generator <b>346</b> can convert the received user-agnostic training profile into a training boundary by determining a greatest amount of work (area under the user-agnostic training profiles) that exists for a given time window size. Each time window size can become a domain value for the training boundary and the greatest work value for that time window size can become the corresponding range value. In some implementations, the original user-agnostic training profile and the generated training boundary are linked such that a change to one causes a corresponding change to the other. For example, a transform (e.g., a linear transform) can be applied to the training space (time vs power) of the user-agnostic training profile and a corresponding transform can be applied in the boundary space (time window size vs work) without having to recalculate the training boundary. Additional details on converting a user-agnostic training profile into a training boundary are discussed below in relation to blocks <b>904</b> and <b>908</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and in relation to <figref idref="DRAWINGS">FIGS. <b>4</b>, <b>5</b>, <b>10</b>, and <b>13</b></figref>.</p><p id="p-0067" num="0066">User boundary and training boundary comparator <b>348</b> can compare the training boundary generated by training boundary generator <b>346</b> with a user boundary (e.g., the ability function determined by critical power and finite work capacity analyzer <b>344</b>). This comparison can include determining a modification to the training boundary, e.g., to maximize or minimize an area between the training boundary and the user boundary or to minimize a loss function that balances between perceived user effort and workout potential. Additional details on comparing a training boundary with a user boundary are discussed below in relation to block <b>910</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and in relation to <figref idref="DRAWINGS">FIGS. <b>13</b> and <b>14</b></figref>.</p><p id="p-0068" num="0067">User-specific workout generator <b>350</b> can generate a user-specific workout based on a comparison between a user boundary and a training boundary. The user-specific workout can be the user-agnostic workout that was used by training boundary generator <b>346</b> to generate a training boundary, but with changes made based on the changes for the training boundary determined by the user boundary and training boundary comparator <b>348</b>. In various implementations, adjusting the training boundary can cause a corresponding change to the user-agnostic training profile. For example, certain linear transforms to time and power vectors of the user-agnostic training profile can have known, corresponding transformations in the boundary space. In some cases, a change to the training boundary can affect one or more of: a shift of the power values for the user-agnostic training profile, a power scale change in the magnitude of the power values for the user-agnostic training profile, and/or a time scale change in the duration of the user-agnostic training profile. Additional details on generating a user-specific workout based on a comparison between a user boundary and a training boundary are discussed below in relation to blocks <b>912</b> and <b>914</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and in relation to <figref idref="DRAWINGS">FIGS. <b>8</b> and <b>10</b>-<b>14</b></figref>.</p><p id="p-0069" num="0068">Those skilled in the art will appreciate that the components illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref> described above, and in each of the flow diagrams discussed below, may be altered in a variety of ways. For example, the order of the logic may be rearranged, substeps may be performed in parallel, illustrated logic may be omitted, other logic may be included, etc. In some implementations, one or more of the components described above can execute one or more of the processes described below.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating a process <b>400</b> used in some implementations for determining an ability function or user's finite work capacity and critical power based on time-based power output statistics. Process <b>400</b> begins at block <b>402</b> and continues to block <b>404</b>. In some implementations, process <b>400</b> can be performed continuously, e.g., as workout information is fed into an adaptive training system during the workout. In some implementations, process <b>400</b> can be performed ahead of time, e.g., based on a received log of the user's workout data.</p><p id="p-0071" num="0070">At block <b>404</b>, process <b>400</b> can obtain time-based power output statistics for a workout or set of workouts. In various implementations, the power output statistics can be automatically gathered from instrumentation on a workout apparatus (e.g., treadmill, elliptical, bike, fitness tracker, etc.), can be entered through a user interface (e.g., entering a run duration and distance), or can be a log of one or more previously recorded workouts. In some implementations, power data can be based on combinations of measures such as speed or distance and time, where a default force for a workout type can be used to estimate work per time, i.e. power. In some implementations, the force can also be, at least in part, measured, e.g., based on a resistance or incline setting. In some implementations, user biographic specifics such as height, weight, gender, and age, are provided in a user profile. These user biographics can be used to more accurately convert workout measurements, such as distance run in an amount of time, into a power measurement. However, process <b>400</b> can use some default values to determine power measurements based on a user's workout performance, and thus generate a user's critical power and finite work capacity without the user's biographics. This allows users to use these versions of the system without requiring an extensive profile creation process, and thus users have a low barrier to entry for the system. In some implementations, instead of using power output from a user, process <b>400</b> can obtain a user-agnostic training profile with a power curve or power measurements. These can be power values for a given training session or training regimen. Additional details on user-agnostic training profiles are described below in relation to <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0072" num="0071">In the outer loop between blocks <b>406</b>-<b>418</b>, process <b>400</b> can iteratively divide the power output statistics into segments of the time domain, or &#x201c;windows,&#x201d; where the window size increases by an incremental amount in each iteration of this outer loop. For all of the windows with a particular size, the window with a largest determined integrated power (work) value in a particular iteration can result in a data point. The work value for a particular window can be computed by taking the area under the power curve defined by the power output statistics in that time window. The largest of these work measures for any window of a particular size is an estimation of the maximum amount of work that user can perform in the amount of time defined by the window size. The resulting set of data points can be used to determine an ability function, which can in turn be used to determine a critical power and finite work capacity for that user.</p><p id="p-0073" num="0072">At block <b>406</b>, process <b>400</b> can set a window size and a window increment. A window size can be an interval of time from which an individual data point can be extracted from the obtained power output statistics. For example, if the obtained power output statistics provide power output values at increments of a 30 minute workout, a window size can be the size of various &#x201c;windows&#x201d; of the 30 minute dataset. One window will produce a stored data point from each set of windows that all have the same size. The window increment can be a value by which the start and end of a previous window are incremented to obtain a next window. In some implementations, windows can be overlapping, meaning the window increment is set to a value less that the window size. In some implementations, the windows can be non-overlapping, meaning the window size and window increment are set to the same value. In each iteration of the loop between blocks <b>406</b>-<b>418</b>, process <b>400</b> can generate a single data point corresponding to the window size used in that iteration. In each subsequent iteration, a new window size is selected at block <b>406</b>. In some implementations, these window sizes can start at a particular size (e.g., 1 second, 5 seconds, etc.) and be increased by a set amount or percentage in each subsequent iteration of the loop. For example, the first window size could be 1 second and window sizes are increased by 10% in each subsequent iteration, so the first five window sizes would be 1 second, 1.1 seconds, 1.21 seconds, 1.33 seconds, and 1.46 seconds. As another example, the first window size could be 5 seconds and window sizes are increased by 1 second in each subsequent iteration, so the first five window sizes would be 5 seconds, 6 seconds, 7 seconds, 8 seconds, and 9 seconds.</p><p id="p-0074" num="0073">At block <b>408</b>, process <b>400</b> can set an initial window for the current window size by starting the window at the start of the obtained time-based power output statistics (e.g., at time_zero) and ending the window at the start of the obtained time-based power output statistics plus the window size (e.g., time_zero+window_size). In the inner loop between blocks <b>410</b>-<b>414</b>, process <b>400</b> can slide the window for the current window size over the time-based power output statistics to determine (at block <b>416</b>) at which point the area under the curve (integral of power, i.e., work), defining the power output statistics, within the window size, is largest. While process <b>400</b> describes this in terms of incrementing a window's start/end points, other procedures can be used to determine which area under the curve specifying a work value, for the window size interval, is largest. At block <b>410</b>, process <b>400</b> can record an integrated power (work) value from the current window, i.e. the integration or area under the curve for the power/time graph of the obtained power-based statistics. An example of this process is provided below in relation to <figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref>. Each recorded value can be a point having window size (e.g., seconds) as the x-axis and work done (e.g., joules) as the y-axis.</p><p id="p-0075" num="0074">At block <b>412</b>, process <b>400</b> can determine if the end of the current window is at least at the end of the obtained time-based power output statistics. If so, each window of the current window size into the time-based power output statistics has been analyzed, the inner loop between blocks <b>410</b>-<b>414</b> is complete, and process <b>400</b> continues to block <b>416</b>. If not, at least one window into the time-based power output statistics has not yet been analyzed, the inner loop between blocks <b>410</b>-<b>414</b> is not complete, and process <b>400</b> continues to block <b>414</b>. At block <b>414</b>, process <b>400</b> can increment the start and end of the current window by the window increment. This creates a new current window for a value to be recorded from, at block <b>410</b>.</p><p id="p-0076" num="0075">At block <b>416</b>, process <b>400</b> can review all the values recorded at block <b>410</b> for the current window size and store the largest value corresponding to the current window size. This value indicates a measure of the most amount of work the user can perform in a given amount of time. In some implementations, the value stored corresponding to the current window size can be the largest of the recorded values, an average of a top amount (e.g., top 5 or top 10%) of the recorded values, or the top value that is within a certain standard deviations of the median of the recorded values. In some implementations, once a value is stored at block <b>416</b>, the memory storing the values recorded at block <b>410</b> can be freed.</p><p id="p-0077" num="0076">At block <b>418</b>, process <b>400</b> can determine if there are additional window sizes to use in a further iteration of the loop between blocks <b>406</b>-<b>418</b>. For example, process <b>400</b> can use a specified number of window sizes, can increment the window sizes a certain amount until a threshold is reached or until the window size is at least a specified percentage of the total time covered by the time-based power output statistics, or can have a specified set of window sizes to use. If there are additional window sizes to use, process <b>400</b> continues back to block <b>406</b>, where the next window size is set. Otherwise, process <b>400</b> continues to block <b>420</b>.</p><p id="p-0078" num="0077">At block <b>420</b>, process <b>400</b> can fit a function to the values stored at block <b>416</b>. This function can have the window size (e.g., seconds) on the x-axis and work (e.g., joules) on the y-axis. In various implementations, the function can be of a specified degree, e.g., a first degree function (linear), a second degree function (quadratic), third degree (cubic), etc. In some implementations, in addition to the data points stored at block <b>416</b> for the obtained time-based power output statistics, the function can be fit to additional stored data points, e.g., from other workout statistics that were windowed in a process similar to the one described for blocks <b>404</b>-<b>418</b>. In some implementations, process <b>400</b> can fit a function to data points that are not from a windowing process. For example, where power output statistics are not known for multiple points across a workout, work vs. time measures from single workout instances can be used as data points and the function is fit to this set of data points.</p><p id="p-0079" num="0078">In some implementations, various procedures can be applied to adjust for the age of the stored power output values or anomalies among the stored power output values. In some implementations, this adjustment can include smoothing the curve of the function, e.g., applying a Gaussian kernel. In some implementations, this adjustment can include limiting the number of data points that are looked at for a given window size. For example, only data points for a window size that are no more than six weeks old are used or only the most recent six data points are used. In some implementations, the value of each data point can be weighted (decayed) based on its age. Various decay functions can be used to accomplish the weighting, such as exponential decay. For example, the value of each data point can be multiplied by 0.99{circumflex over (&#x2003;)}(age_in_weeks). As another example, each data point can be multiplied by e{circumflex over (&#x2003;)}(V*age), where V can be a value less than 1, such as 0.0004, and the age can be in various increments, such as days since the workout that generated the data point.</p><p id="p-0080" num="0079">In some implementations, where there are multiple data points for a single window size (e.g., from different workouts), the function can be fit to only the largest work data point for each window size (or the largest after any applied weighting). In some implementations, once a function is fit to the stored data points, the memory storing data points that were not used as part of the fit, e.g., because there was a larger work value for the same window size, can be freed.</p><p id="p-0081" num="0080">The function fit to the data points representing a user's maximum power output ability in a timeframe can specify a critical power (CP) for the user. This fitted function can also specify a finite work capacity (W&#x2032;) for the user. The critical power can be the slope of the function or, where the function is non-linear, a slope of the function between two points of the function. Thus, the critical power can represent an amount of additional work the user can perform given any specified amount of additional time. The finite work capacity can be the y-intercept (a work output, e.g., joules, value) of the function. Thus, the finite work capacity represents an amount of initial work the user can perform given no extra time.</p><p id="p-0082" num="0081">In some implementations, the determined critical power and finite work capacity can be used to generate a new ability function that more accurately defines the user's abilities, particularly in early intervals of a workout, such as in the first 60 seconds. For example, a function can be more accurate where it accounts for real-world circumstances such as the fact that given zero time a user's ability to perform work is also zero. In some implementations, this new ability function can be a combined linear and logarithmic function. For example, the ability function can be specified as W=CP*t+W&#x2032;*log(t+1), where W is a work ability (dependent variable) and t is a given amount of time (independent variable). Using this new ability function provides more stable and robust fit optimization as it accounts for the time dependent curvature seen in the data.</p><p id="p-0083" num="0082">Process <b>400</b> can return these determined critical power or finite work capacity values and end at block <b>422</b>. In some implementations, instead of determining and returning critical power and finite work capacity values, the function fit to the data points can be returned.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref> are diagrams illustrating an example of windowing power output statistics to determine maximum work data points. These maximum work data points can then be used to compute an ability function. <figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref> show an example implementation of the loop between blocks <b>406</b>-<b>418</b>. <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> shows step <b>500</b> of this example where power output statistics for a workout have been graphed as function <b>502</b> and the window size has been set to six seconds. A particular window <b>504</b> has been determined to correspond to the largest area <b>506</b>, under function <b>502</b>, for a six second window size. A data point corresponding to this largest area <b>506</b> is added to the work vs. time graph <b>512</b>, at the intersection of line <b>506</b> (six seconds&#x2014;the window size) and line <b>510</b> (360 joules&#x2014;area <b>506</b>).</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> shows step <b>515</b> of this example. A next window <b>518</b> has been determined to correspond to the largest area <b>520</b>, under function <b>502</b>, for a ten second window size. A data point corresponding to this largest area <b>520</b> is added to the work vs. time graph <b>512</b>, at the intersection of line <b>522</b> (ten seconds&#x2014;the window size) and line <b>524</b> (400 joules&#x2014;area <b>520</b>).</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>5</b>C</figref> shows step <b>530</b> of this example. A next window <b>534</b> has been determined to correspond to the largest area <b>536</b>, under function <b>502</b>, for a twelve second window size. A data point corresponding to this largest area <b>536</b> is added to the work vs. time graph <b>512</b>, at the intersection of line <b>538</b> (twelve seconds&#x2014;the window size) and line <b>540</b> (500 joules&#x2014;area <b>536</b>).</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>5</b>D</figref> shows step <b>545</b> of this example. A next window <b>548</b> has been determined to correspond to the largest area <b>550</b>, under function <b>502</b>, for a forty second window size. A data point corresponding to this largest area <b>550</b> is added to the work vs. time graph <b>512</b>, at the intersection of line <b>552</b> (forty seconds&#x2014;the window size) and line <b>554</b> (1667 joules&#x2014;area <b>550</b>).</p><p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. <b>5</b>E</figref> shows step <b>560</b> of this example. A next window <b>562</b> has been determined to correspond to the largest area <b>564</b>, under function <b>502</b>, for an eighty-four second window size. A data point corresponding to this largest area <b>564</b> is added to the work vs. time graph <b>512</b>, at the intersection of line <b>566</b> (eighty-four seconds&#x2014;the window size) and line <b>568</b> (2065 joules&#x2014;area <b>564</b>).</p><p id="p-0089" num="0088">Once the data points identified in <figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref> are known, they can be used to define an ability function. In some implementations, work vs. time graph <b>512</b> can be the user's ability function. In some implementations, the ability function can be a border specified by these data points, where the border can limit maximum workout parameters as described in relation to <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In some implementations, another function can be fit to these data points to define the ability function. In some implementations, the fitted function can then be used to determine a critical power and finite work capacity. <figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref> provide sample window sizes from a single workout. In other embodiments, window sizes can be larger or smaller or can be more or less numerous. An example is provided next in <figref idref="DRAWINGS">FIG. <b>5</b>F</figref> that uses other data points from multiple workouts, with more window sizes, to generate an ability function.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>5</b>F</figref> is a diagram illustrating an example <b>580</b> with a function fit to a set of data points for determining a user's critical power and finite work capacity. The function is computed by determining a fit to a series of data points that were obtained through windowing of time-based power output statistics, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. <figref idref="DRAWINGS">FIG. <b>5</b>F</figref> shows work <b>582</b> (y-axis, in joules) vs. time <b>584</b> (x-axis; in seconds).</p><p id="p-0091" num="0090">Example <b>580</b> includes a set of data points, such as data point <b>586</b>. Each data point is the largest work value data point, from a set of possible work value data points each corresponding to a particular window size, from a workout. In example <b>580</b>, a set of possible data points (not shown) were taken at block <b>410</b> with a window size of 1150 seconds, and one representing the largest amount of work done (i.e. area under the power output curve) in an 1150 second window of the workout was stored at block <b>416</b>, as data point <b>586</b>. An example of this process is provided in <figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref>. The additional data points at the 1150 seconds mark above and below data point <b>586</b> are from statistics taken from other workouts.</p><p id="p-0092" num="0091">In example <b>580</b>, line <b>590</b> was a best-fit to the largest of the data points for each window size from the various workouts. In some implementations, process <b>400</b>, at block <b>420</b>, can determine where a performance boundary is for a user as a location, after an initial threshold, where further data points no longer increase in value with a slope that is relatively consistent. This demonstrated performance boundary is shown in example <b>580</b> by dashed line segments <b>592</b>. The fit of line <b>590</b> is fit to the largest of the data points for each window size before the split at the beginning of the performance boundary. The slope of line <b>590</b> is used as the critical power. Example <b>580</b> also shows where, at <b>594</b>, line <b>590</b> crosses the y-axis <b>582</b>, which is used as the finite work capacity.</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>5</b>G</figref> is a diagram illustrating an example with a combined linear and logarithmic performance ability function generated based on a determined finite work capacity and critical power. In this example, a critical power (CP) and finite work capacity (W&#x2032;) have been determined. These values are used to generate a new ability function <b>590</b>, defined by the formula W=CP*t+W&#x2032;*log(t+1), where W is a work ability (dependent variable) and t is a given amount of time (independent variable). This new ability function <b>590</b> is a better fit to the performance boundary <b>592</b>, particularly in the first 60 seconds of the work data.</p><p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flow diagram illustrating a process <b>600</b> used in some implementations for determining a user-specific workout by determining workout parameters based on the user's determined critical power or ability function. In some implementations, process <b>600</b> can be performed continuously, e.g., as workout information is fed into an adaptive training system during the workout. In some implementations, process <b>600</b> can be performed ahead of time, e.g., to generate a training session for a user prior to the user beginning the workout. Process <b>600</b> begins at block <b>602</b> and continues to block <b>604</b>.</p><p id="p-0095" num="0094">A user-specific workout can include one or more workouts and each workout can be defined by a set of parameters mapping the workout into work values given time. For example, when defining a sprint exercise for a user, the parameters can be simply duration and power output during the sprint. As another example, for an interval workout with regular intervals, the parameters can be: number of intervals, interval duration, power output during intervals, rest duration, and power output during rests. As a further example, for an interval workout with &#x201c;skip intervals,&#x201d; the parameters can be: number of intervals, duration of peak work during interval, duration of short rest time within an interval, power output during interval peak, rest duration between intervals, and power output during rests. In some implementations, workouts can also include a difficulty factor parameter, which specifies how close to the user's maximum work capacity the workout should bring the user.</p><p id="p-0096" num="0095">At block <b>604</b>, process <b>600</b> can receive a partial set of parameters for a workout. In some implementations, the parameters received at block <b>604</b> can be all but one of the parameters needed to specify the workout. For example, for the interval workout with regular intervals, all but the parameter defining the number of intervals can be provided. In some implementations, one or more of the workout parameters can be set by various methods, such as by user input, using default values, using values established to further certain goals (e.g., increase critical power ability; increase finite work capacity ability; increase sprint ability by having shorter more intense workouts; or endurance with longer, less intense workouts), etc. In some implementations, the workout parameters can be restricted to certain values, e.g., maximum or minimum time or number or duration of intervals, etc. These restrictions can be in place so that the remaining parameter determined by the system is realistic (i.e. it doesn't suggest a workout of two days or of twelve seconds) or so that a workout based on the parameters is easier to follow (e.g., interval length is a round number).</p><p id="p-0097" num="0096">At block <b>606</b>, process <b>600</b> can use the received workout parameters and a user ability indicator comprising one or more of: critical power and finite work capacity values for a user, a &#x201c;fit function&#x201d; defined by a function fit to a set of workout statistics in work vs. time, or the set of workout statistics in work vs. time as a defined border. In some implementations, the user's user ability indicators can be computed each time they are needed, e.g., by executing process <b>400</b>. In some implementations, instead of recomputing the user's ability indicators from all available workout data, stored previous versions of the user's ability indicators can be updated to account for new workout data that has been obtained since that stored ability indicators were generated. For example, the stored user's ability indicators can be weighted based on the age of the underlying data and can be updated with each workout set. In various implementations, this updating can be performed to generate new user ability indicators when new workout data is received, when a determination of a user's ability indicators are needed, at a given interval (e.g., daily, weekly, etc.), or based on available resources (e.g., at night when server availably is typically high, according to a current measure of server resource availably, etc.).</p><p id="p-0098" num="0097">Process <b>600</b> can then use the workout parameters and user ability indictor to compute the missing parameter defining the workout to be specific for the user. For each type of workout, a transform can be determined to map a function defining the workout (based on the workout parameters) in terms of work vs. time. The function defining the workout can be specified such that it does not exceed an &#x201c;ability line&#x201d; for the user, defined by the received user ability indicator. In various implementations, the ability line can be the ability function, the defined border, or a line determined by setting the user's critical power as the slope and the user's finite work capacity as the y-intercept. The point where the workout function intercepts the ability line is the exhaustion point, i.e. the point where the user is expected to no longer be able to perform any work at the same intensity level. Examples of such parameterization and comparison are provided below in relation to <figref idref="DRAWINGS">FIG. <b>7</b></figref> and the Appendix. In some implementations, the ability line can be decreased (the y-intercept can be decreased with the same slope) so that the user is only expected to come within a threshold amount of a total exhaustion point. In some implementations, a default y-intercept can be set, (e.g., 0). For example, this can be done when only the critical power of a user is available or where it will be a particularly lengthy workout.</p><p id="p-0099" num="0098">At block <b>608</b>, process <b>600</b> can provide a user-specific workout based on the now complete set of workout parameters. For example, process <b>600</b> can indicate a workout duration, can cause a setting to be established on a workout machine, can integrate the workout into a set of multiple workouts, etc. In some implementations, process <b>600</b> can continually monitor power output during the user's workout, update the user's ability function for the observed power output, and update the workout parameters accordingly. Process <b>600</b> can then provide further updates to the user, such as suggesting they slow down if they are expected to hit their exhaustion point before the workout is scheduled to end or that they should speed up if they are not expected to reach a goal.</p><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating an example <b>700</b> representation of a workout function <b>702</b> for a user-specific workout. The user-specific workout is computed by determining a time parameter <b>704</b> which keeps all values of the workout function <b>702</b>, during the workout, below the user's ability line <b>706</b>.</p><p id="p-0101" num="0100">In example <b>700</b>, a user's critical power and finite work capacity are known, e.g., through an execution of process <b>400</b>. The user's ability line <b>706</b> is generated by setting the critical power as the slope <b>720</b> and the finite work capacity as the y-intercept <b>718</b>.</p><p id="p-0102" num="0101">In example <b>700</b>, the workout is an interval workout with regular intervals. The duration of the rest period <b>710</b> and high intensity period <b>712</b> are set by a user through a user interface and the slope of the line segments <b>714</b> during the high intensity segments are set to a first default value based on an expect running rate during these high intensity portions the slope of the line segments <b>716</b> during the rest segments are set to a second default value based on another expect running rate during the rest portions.</p><p id="p-0103" num="0102">The adaptive training system determines the intersection between the user's ability line and the function representing the workout, i.e. exhaustion point <b>708</b>. The time value <b>704</b> for the exhaustion point is the time determined for this workout such that the user reaches her exhaustion point. Additional details on how the adaptive training system can perform these operations are provided in the appendix.</p><p id="p-0104" num="0103"><figref idref="DRAWINGS">FIGS. <b>8</b>A-C</figref> illustrate examples <b>800</b>, <b>820</b>, and <b>860</b>, showing system configurations that implement versions of an adaptive training system. In <figref idref="DRAWINGS">FIG. <b>8</b>A</figref>, example <b>800</b> shows a configuration where the adaptive training system is integrated into workout machine <b>810</b>. Example <b>800</b> begins with measurements indicative of a user's power output, such as speed and incline, being recorded during a workout session. At <b>804</b>, circuitry in the workout machine transforms the power measurements into values of work. The circuitry then uses these values of work to determine a user's ability function and uses the ability function to generate a user-specific workout. In some implementations, step <b>804</b> can be accomplished using processes <b>400</b> and <b>600</b>. For example, workout machine <b>810</b> can use the power measurements to determine work points and then fit the work points to an ability line. The workout machine can use the ability line and parameters that the user has specified for the workout to generate a user-specific workout specifying other, previously unknown workout parameters that keeps the user below his or her expected exhaustion point. For example, the user can specify parameters such as duration and interval length and the workout machine can generate a user-specific workout specifying an incline for each interval that keeps the user below his or her expected exhaustion point.</p><p id="p-0105" num="0104">The user-specific workout can be used, at <b>806</b>, to automatically control functionality of the workout machine, such as by setting speed, duration, or incline settings. In addition or alternatively, the resulting user-specific workout can be used, at <b>806</b>, to provide an output on a display of the workout machine or associated device (e.g., a user's paired mobile device). The output can display statistics about the workout, instructions for performing the user-specific workout, etc. While example <b>800</b> can end when the workout session ends, in some implementations, data from the workout session can be stored at <b>808</b>. For example, this data can include determined maximum work points, an ability function, workout duration, speed, calories burned, etc. This data can be sent to the user's mobile device or to a server. The system can store this output in association with a user profile.</p><p id="p-0106" num="0105">In <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, example <b>820</b> shows a configuration where the adaptive training system is implemented in a network of workout machines, such as workout machines <b>822</b> and <b>826</b>. In example <b>820</b>, the workout machines are connected via server system <b>824</b>. In example <b>820</b>, a user previously used workout machine <b>822</b>. Workout machine <b>822</b> can send, at <b>842</b>, an identification of the user and data from that workout to server system <b>824</b>. For example, this data can include determined maximum work points, an ability function, workout duration, speed, calories burned, etc. At <b>844</b>, server system can use the received workout data to determine a user ability function. In some implementations, step <b>844</b> can also include determining a user-specific workout for the user.</p><p id="p-0107" num="0106">At step <b>846</b>, the same user authenticates himself or herself with another workout machine <b>826</b>. For example, the user can enter a code, scan a barcode on the workout machine using her mobile device (e.g., mobile device <b>828</b>), or the workout machine can take a reading, such as scanning a code presented by the user, recognizing the presence of the user's mobile device or a FOB, etc. At <b>848</b>, workout machine <b>826</b> and server system <b>824</b> can communicate to determine a user-specific workout for the authenticated user. In some implementations, the user-specific workout can be the one determined at <b>844</b>, which can be further based on user profile information, such as preferred workout parameters that may include duration, number of intervals, etc. In some implementations, the communication at <b>848</b> can include some parameters for the user's next workout, which the server system <b>824</b> can use to generate the user-specific workout such that the user approaches, but does not surpass, an exhaustion point.</p><p id="p-0108" num="0107">As the user performs the user-specific workout, which can be implemented automatically by the workout machine <b>826</b> or can be accomplished through instructions provided to the user on how to interact with the workout machine, (not shown), additional measurements indicative of power output can be taken at step <b>850</b>. In some implementations, the workout machine <b>826</b> can autonomously update the user-specific workout or workout parameters based on the power measurements, similar to the functions performed by workout machine <b>810</b> in example <b>800</b>. In some implementations, the power measurements can be provided, at <b>852</b>, to server system <b>824</b>. The server system, at <b>854</b>, can update the user's determined ability function. Also at <b>854</b>, the server system can adjust the user-specific workout based on the updated user's ability function. The server system, at <b>856</b>, can provide the updated user-specific workout or workout parameters to the workout machine <b>826</b>. At <b>858</b>, workout machine <b>826</b> can implement the updated workout parameters, e.g., by providing an updated display on workout machine <b>826</b> or on the user's mobile device <b>828</b>, or by automatically implementing settings on workout machine <b>828</b>. Also at <b>858</b>, either as the workout progresses or when the workout ends, workout machine <b>826</b> can provide workout data, similarly to step <b>808</b> of example <b>800</b>.</p><p id="p-0109" num="0108">In <figref idref="DRAWINGS">FIG. <b>8</b>C</figref>, example <b>860</b> shows a configuration where the adaptive training system is implemented on mobile device <b>864</b>. Example <b>860</b> begins when mobile device <b>864</b> receives workout statistics. In example <b>860</b>, the workout statistics are obtained from communications with a fitness tracker, however the workout statistics can be obtained from other sources, such as from communication with another type of workout machine, manual user input, logs stored on a server system, etc. At <b>872</b>, mobile device <b>864</b> transforms the workout statistics (e.g., power measurements) into terms of work, uses these to determine a user's ability function, and uses the ability function to generate a user-specific workout for the user. In some implementations, step <b>874</b> can be accomplished using processes <b>400</b> and <b>600</b>. For example, mobile device <b>864</b> can use the power measurements to determine work points and then fit the work points to an ability function. Using the ability function, mobile device can generate a user-specific workout, e.g., to determine a run duration or suggested speed, interval lengths, etc. In some implementations, step <b>874</b> can be accomplished using processing from a server system, such as server system <b>866</b>.</p><p id="p-0110" num="0109">The received workout statistics, transformations of these statistics, or resulting user-specific workouts can be stored by mobile device <b>864</b>. While example <b>860</b> can end here, e.g., where user data is all stored at the mobile device and user-specific workout suggestions are provide through the mobile device, in some implementations, this data can be sent, at <b>876</b>, to other devices <b>866</b>-<b>870</b>, e.g., for further analysis (e.g., at server system <b>866</b>), for automatic control of workout equipment <b>870</b>, or to be viewed by the user, e.g., through a web interface at a computing device <b>868</b>. In various implementations, these interactions can be interrelated or facilitated through communications with other devices, e.g., through communications <b>874</b>.</p><p id="p-0111" num="0110">In various implementations, aspects of the configurations from any of examples <b>800</b>, <b>820</b>, and <b>860</b> can be combined. For example, input <b>872</b> in example <b>860</b> can be based on outputs <b>808</b> or <b>858</b> from examples <b>800</b> and <b>820</b>; server <b>824</b> in example <b>820</b> in example <b>820</b> could be replaced with mobile device <b>864</b> from example <b>860</b>; output <b>842</b> in example <b>820</b> can be based on output <b>808</b> in example <b>800</b> or can be output <b>876</b> from example <b>860</b>. Additional configurations, combinations, substitutions and additions are also contemplated. While examples <b>800</b>, <b>820</b>, and <b>860</b> illustrate several types of devices, in some implementations, the function performed by any one of these devices can be accomplished by the others or by devices not explicitly recited.</p><p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow diagram illustrating a process <b>900</b> used in some implementations for generating a user-specific workout based on a user-agnostic training profile and a user boundary. In various implementations, process <b>900</b> can be performed continuously as workout information is fed into an adaptive training system during the workout or ahead of time, e.g., to generate a training session for a user prior to the user beginning the workout. Process <b>900</b> begins at block <b>902</b> and continues to block <b>904</b>.</p><p id="p-0113" num="0112">At block <b>904</b>, process <b>900</b> can obtain a user-agnostic training profile, defined in a training space, specifying a power curve in a time domain. The user-agnostic training profile can define parameters for a training session mapping the training session to levels of power output for time segments. For example, the user-agnostic training profile can specify workout apparatus settings (e.g., resistance levels, tilt, weight amounts, etc.), user movement speeds (e.g., revolutions per minute, miles per hour, etc.), etc., which produce particular power outputs. Applying user-agnostic training profiles allows defining workouts generally across users, e.g. to obtain specific results or user experiences, that can then be customized to particular user abilities. In various cases, the user-agnostic training profile can be specific to a particular workout apparatus. In some implementations, the user-agnostic training profile can be interpreted from one or more user-generated lines or based on user specified power values. For example, a user can interact with a user interface to draw or otherwise generate lines showing levels of power output per time unit, enter power values as numbers, or otherwise indicating power levels. The adaptive training system can interpret these power levels into a power curve for a user-agnostic training profile. In some cases, process <b>900</b> can obtain the user-agnostic training profile from a library of user-agnostic training profiles. For example, user-agnostic training profiles can be defined for particular goals (e.g., weight loss, cardio improvement, improvements for particular activities, etc.) for particular workouts (e.g., biking, running, elliptical, rowing, weight lifting, etc.), and/or users can define workouts that they find useful and share them with the library. As used herein, the library can be any networked resource, such as a central library provided by a company, an open source community available to multiple users, a subscription service available to a member, a social media group, posting, or other online forum, or a direct share, e.g., in a message from a friend, coach, workout partner, etc.</p><p id="p-0114" num="0113">At block <b>906</b>, process <b>900</b> can obtain a user boundary, defined in a boundary space. The user boundary can be defined in a boundary space that defines estimations of an amount of work done given a total time window domain. For example, one point along the user boundary can specify that, given a time window of 20 seconds, the user can produce 10 kilojoules of work. In some implementations, the user boundary can be the ability function or critical power function discussed above, which are functions fit to measurements of user work for particular time windows (referred to herein as &#x201c;estimate functions&#x201d;). In other implementations, the user boundary can be a set of line segments that connect the measurements of user work for particular time windows (referred to herein as &#x201c;measurement functions&#x201d;). In yet other implementations, the user boundary can be a combination of an estimate function and a measurement function, where the combination is based on a confidence value for the estimate function, which is used as a weighting factor when averaging the estimate function and the measurement function. Additional details on determining a combined user boundary based on an estimate function and a measurement function are provided below in relation to <figref idref="DRAWINGS">FIGS. <b>10</b> and <b>12</b></figref>.</p><p id="p-0115" num="0114">At block <b>908</b>, process <b>900</b> can compute a training boundary. The training boundary can be a version of the user-agnostic training profile, converted to be in the boundary space. In some implementations, this conversion can be accomplished using the same process described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>, except instead of using the user power output vs. time data points, the windowing is performed against the user-agnostic training profile (which similarly provides a power curve for a time domain). In some implementations, the training boundary can be linked to the user-agnostic training profile, such that a change to one causes a corresponding change to the other. For example, changing the slope of the training boundary can cause a corresponding vertical shift in the user-agnostic training profile (or performing a vertical shift for the user-agnostic training profile can cause a corresponding change in the slope of the training boundary). As discussed below, examples of such changes can include a shift of the power values for the user-agnostic training profile, a power scale change in the magnitude of the power values for the user-agnostic training profile, and/or a time scale change in the duration of the user-agnostic training profile (or corresponding changes to the training boundary to cause these user-agnostic training profile changes). Additional details on corresponding changes between the training boundary and the user-agnostic training profile are provided below in relation to <figref idref="DRAWINGS">FIG. <b>13</b></figref>.</p><p id="p-0116" num="0115">At block <b>910</b>, process <b>900</b> can compute a comparison between the training boundary computed at block <b>908</b> and the user boundary obtained at block <b>906</b>. This comparison is possible as both the user boundary and the training boundary are in the same boundary space. The comparison at block <b>910</b> can result in applying a transformation or otherwise adjusting one or more parameters affecting the training boundary. In some implementations, the comparison between the training boundary and the user boundary includes making adjustments to minimize user perceived effort by selecting the one or more parameters to maximize a total area between the training boundary and the user boundary. In other implementations, the comparison between the training boundary and the user boundary includes making adjustments to maximize workout potential by minimizing a total area between the training boundary and the user boundary.</p><p id="p-0117" num="0116">In yet other implementations the comparison between the training boundary and the user boundary includes making a selection of the one or more parameters to minimize a loss function that balances between user perceived effort and workout potential. The loss function can give a number that specifies how well the training boundary and user boundary match one another. In various implementations, different loss functions can be used. For example loss functions can be L1 loss (sum of absolute errors), L2 loss (sum of squared errors), minimum second point deviation, intersection over union (the intersection area of the training boundary and user boundary, divided by the union of the two areas), or sprint/endurance loss (weighting the error based on the time to create optimized workouts for a particular goal such as sprint or endurance performance). An example of the sprint loss is sum(a/(x+a)*error{circumflex over (&#x2003;)}2) and an example of endurance loss is sum(x/(x+a)*error{circumflex over (&#x2003;)}2); where &#x201c;a&#x201d; is a shape factor that controls the aggressiveness of the workout.</p><p id="p-0118" num="0117">At block <b>912</b>, process <b>900</b> can transform the user-agnostic training profile into a user-specific workout based on the comparison from block <b>910</b>. Transformations between the user space and the boundary space can be accomplished using formulas whereby applying a transform to either the user-agnostic training profile or the training boundary can have corresponding transform to the other. For example, the following formulas can effect these transformations between the user space and boundary space:</p><p id="p-0119" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mi>transformed</mi>   <mo>&#x2062;</mo>   <mtext>   </mtext>   <mi>user</mi>   <mo>-</mo>   <mi>agnostic</mi>   <mo>&#x2062;</mo>   <mtext>   </mtext>   <mi>training</mi>   <mo>&#x2062;</mo>   <mtext>   </mtext>   <mi>profile</mi>  </mrow>  <mo>=</mo>  <mrow>   <mrow>    <mrow>     <mo>[</mo>     <mtable>      <mtr>       <mtd>        <msub>         <mi>t</mi>         <mn>0</mn>        </msub>       </mtd>       <mtd>        <msub>         <mi>p</mi>         <mn>0</mn>        </msub>       </mtd>      </mtr>      <mtr>       <mtd>        <msub>         <mi>t</mi>         <mn>1</mn>        </msub>       </mtd>       <mtd>        <msub>         <mi>p</mi>         <mn>1</mn>        </msub>       </mtd>      </mtr>      <mtr>       <mtd>        <mo>&#x22ee;</mo>       </mtd>       <mtd>        <mo>&#x22ee;</mo>       </mtd>      </mtr>      <mtr>       <mtd>        <msub>         <mi>t</mi>         <mi>n</mi>        </msub>       </mtd>       <mtd>        <msub>         <mi>p</mi>         <mi>n</mi>        </msub>       </mtd>      </mtr>     </mtable>     <mo>]</mo>    </mrow>    <mo>*</mo>    <mrow>     <mo>[</mo>     <mrow>      <msub>       <mi>m</mi>       <mi>time</mi>      </msub>      <mo>&#x2062;</mo>      <mtext>     </mtext>      <msub>       <mi>m</mi>       <mi>effort</mi>      </msub>     </mrow>     <mo>]</mo>    </mrow>   </mrow>   <mo>+</mo>   <mrow>    <mo>[</mo>    <mrow>     <mn>0.</mn>     <mtext>     </mtext>     <msub>      <mi>b</mi>      <mi>effort</mi>     </msub>    </mrow>    <mo>]</mo>   </mrow>  </mrow> </mrow></math></maths><maths id="MATH-US-00001-2" num="00001.2"><math overflow="scroll"> <mrow>  <mrow>   <mi>transformed</mi>   <mo>&#x2062;</mo>   <mtext>   </mtext>   <mi>training</mi>   <mo>&#x2062;</mo>   <mtext>   </mtext>   <mi>boundary</mi>  </mrow>  <mo>=</mo>  <mrow>   <mrow>    <mo>[</mo>    <mtable>     <mtr>      <mtd>       <msub>        <mi>t</mi>        <mn>0</mn>       </msub>      </mtd>      <mtd>       <msub>        <mi>w</mi>        <mn>0</mn>       </msub>      </mtd>     </mtr>     <mtr>      <mtd>       <msub>        <mi>t</mi>        <mn>1</mn>       </msub>      </mtd>      <mtd>       <msub>        <mi>w</mi>        <mn>1</mn>       </msub>      </mtd>     </mtr>     <mtr>      <mtd>       <mo>&#x22ee;</mo>      </mtd>      <mtd>       <mo>&#x22ee;</mo>      </mtd>     </mtr>     <mtr>      <mtd>       <msub>        <mi>t</mi>        <mi>n</mi>       </msub>      </mtd>      <mtd>       <msub>        <mi>w</mi>        <mi>n</mi>       </msub>      </mtd>     </mtr>    </mtable>    <mo>]</mo>   </mrow>   <mo>&#xb7;</mo>   <mrow>    <mo>[</mo>    <mtable>     <mtr>      <mtd>       <msub>        <mi>m</mi>        <mi>time</mi>       </msub>      </mtd>      <mtd>       <mrow>        <msub>         <mi>m</mi>         <mi>time</mi>        </msub>        <mo>&#x2062;</mo>        <msub>         <mi>b</mi>         <mi>effort</mi>        </msub>       </mrow>      </mtd>     </mtr>     <mtr>      <mtd>       <mn>0</mn>      </mtd>      <mtd>       <mrow>        <msub>         <mi>m</mi>         <mi>time</mi>        </msub>        <mo>&#x2062;</mo>        <msub>         <mi>m</mi>         <mi>effort</mi>        </msub>       </mrow>      </mtd>     </mtr>    </mtable>    <mo>]</mo>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0120" num="0000">where * specifies an element-wise multiplication; + specifies an element-wise addition; . specifies dot product; each [t, p] pair is a point from the user-agnostic training profile to transform, where t is a time and p is a measure of user instantaneous effort (e.g., power); each [t, w] pair is a point from the training boundary to transform, where tis the time window size and w is the maximal integral of effort over that time window t; and m and b are transform parameters with m_time being the time scalar, m_effort being the effort scalar, and b_effort being the effort shift or offset.</p><p id="p-0121" num="0118">In some implementations, process <b>900</b> can accomplish the transformation automatically by virtue of the data structure defining the user-agnostic training profile and data structure defining the training boundary being linked (as discussed above) such that, as an adjustment is made to one (as described in relation to block <b>910</b> e.g., to cause a change to the training boundary), a corresponding adjustment is made to the other (e.g., to also cause a corresponding change to the user-agnostic training profile) using the above formulas. In other cases the data structures may not be linked. For example, a transformation can be made to the training boundary to select adjustments for maximizing workout potential and, once those adjustments are determined, corresponding adjustments can be made to the user-agnostic training profile by applying a corresponding transformation using the formulas above, thereby converting the user-agnostic training profile into a user-specific workout. In various implementations, adjusting the training boundary can cause a corresponding change affecting one or more of: a shift of the power values for the user-agnostic training profile, a power scale change in the magnitude of the power values for the user-agnostic training profile, and/or a time scale change in the duration of the user-agnostic training profile.</p><p id="p-0122" num="0119">In some implementations, transforming the user-agnostic training profile into a user-specific workout includes applying a transform to or otherwise adjusting, based on the comparison, the training boundary. Other factors can also be used to adjust the training boundary. For example, an adjustment can be based on a user input (e.g., a user can specify a workout intensity value, a duration, a workout apparatus type, a workout goal, etc.) As another example, the adjustment can be to set the user-specific workout to have a duration that matches another program, such as a determined duration of a video or audio media item. As a yet further example, the one or more adjustments can be to set the user-specific workout to have a variable intensity (e.g., power peaks and valleys) to match the tempo or pace of another program, such as a determined tempo or pace of a video or audio media item.</p><p id="p-0123" num="0120">At block <b>914</b>, process <b>900</b> can provide output or settings based on the user-specific workout generated at block <b>912</b>. For example, process <b>900</b> can indicate a workout duration, can cause a setting to be established on a workout machine, can integrate the user-specific workout into a set of multiple workouts, etc. In some implementations, the output can be to a workout apparatus configured to cause a display of the workout apparatus to provide instructions based on the user-specific workout. The output can also include automatic workout settings that cause a workout apparatus to automatically implement the user-specific workout. For example, process <b>900</b> can automatically control functionality of the workout machine, such as by setting speed, duration, or incline settings. In addition or alternatively, process <b>900</b> can use the user-specific workout to provide an output on a display of the workout machine or associated device (e.g., a user's paired mobile device). The output can display statistics about the workout, instructions for performing the user-specific workout, etc. In some implementations, the output can be provided to a server system or a mobile device and stored in association with a user profile.</p><p id="p-0124" num="0121">In some implementations, process <b>900</b> can continually monitor power output during the user's workout and update the user-specific workout accordingly. For example, process <b>900</b> can determine how closely the user activity during the workout has matched the proscribed user-specific workout to achieve a particular goal, and can adjust workout machine settings or make suggestions to conform the remainder of the workout to the goal. Process <b>900</b> can provide updates for the workout, such as suggesting the user slow down or lower resistance if they are expected to hit their exhaustion point before the workout is scheduled to end or that they should speed up or increase resistance if they are not expected to reach the goal. In some cases, the user boundary can also be updated based on the observed power output from the current workout, which can cause corresponding re-adjustments making the training boundary conform to the new user boundary, further causing a corresponding change to the linked training profile (now a user-specific workout).</p><p id="p-0125" num="0122">In some cases, process <b>900</b> can also include transmitting the user-agnostic training profile to a geographically remote system, allowing the user-agnostic training profile to be the basis of other user-specific workouts. For example, the user-agnostic training profile can be created, as discussed above at block <b>904</b>, based on a user specifying power levels for time segments. The user may then want to share that user-agnostic training profile with other users (e.g., after discovering that she particularly enjoyed a user-specific workout based on the user-agnostic training profile). The user-agnostic training profile can be accessed by another user with their own user boundary, allowing that user-agnostic training profile to be transformed, based on that user boundary, into a second user-specific workout for the second user, different from the first user-specific workout for the user that created the user-agnostic training profile. As another example, the user may save the user-agnostic training profile (or user-specific workout) to her own repository, allowing the user to access it later and/or on a different workout apparatus. Process <b>900</b> can progress to block <b>916</b>, where it ends.</p><p id="p-0126" num="0123"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flow diagram illustrating a process <b>1000</b> used in some implementations for computing a user boundary based on a combination of an estimate function from user work measurements and a measurement function from the user work measurements. In some implementations, process <b>1000</b> can be performed as a sub-process of block <b>906</b>. Process <b>1000</b> can begin at block <b>1002</b> and continue to block <b>1004</b>.</p><p id="p-0127" num="0124">At block <b>1004</b>, process <b>1000</b> can obtain an estimate function that is fit to a set of measurements of user work for particular time windows. The set of measurements of user work for particular time windows can be conversions of user power output measurements, as discussed above in relation to <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>. In various implementations, the estimate function can be a linear or nonlinear function that has been fit to the measurements of user work for particular time windows. In various implementations, the estimate function can be the ability function or critical power with a finite work capacity as discussed above, or can be another function that is an extrapolation from the measurements of user work for particular time windows to other time windows for which no measurement is available.</p><p id="p-0128" num="0125">At block <b>1006</b>, process <b>1000</b> can obtain a measurement function from a series of line segments that connect the measurements of user work for particular time windows. The measurements of user work for particular time windows can be the same measurements used to create the estimate function of block <b>1004</b>. The measurement function can be a series of line segments that connect the measurements. A final line segment can connect to the last measurement (corresponding to the integration of the measured power curve for the largest window size) and have a slope of zero.</p><p id="p-0129" num="0126">At block <b>1008</b>, process <b>1000</b> can compute a confidence function. The confidence function can give, for any particular point in the domain, a cumulative difference between the estimate function and the measurement function, for a section of the domain ending at that particular point. In various implementations, the confidence function can use a section of the domain for each particular point starting at zero, at a set point offset from zero, or at a constant distance below the particular point. For example, the confidence function can determine, for a given point, a difference between A) an integration of the estimate function for an interval corresponding to the section of the domain and B) an integration of the measurement function for the interval corresponding to the section of the domain.</p><p id="p-0130" num="0127">At block <b>1010</b>, process <b>1000</b> can combine the estimate function and the measurement function, based on the confidence function. In some implementations, this combination can include averaging the estimate function and the measurement function, using the confidence function as a weighting factor. For example, the greater the difference between the estimate function and the measurement function, the more weight can be given to the measurement function. Process <b>1000</b> can then end (e.g., returning to block <b>906</b>, providing the combined result of block <b>1010</b> as a user boundary).</p><p id="p-0131" num="0128"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating an example <b>1100</b> of converting a user-agnostic training profile into a training boundary. Example <b>1100</b> includes a user-agnostic training profile <b>1108</b> that is defined in training space <b>1102</b>. The user-agnostic training profile <b>1108</b> has been converted into training boundary <b>1158</b> defined in boundary space <b>1150</b>. Training space <b>1102</b> has a unit time domain <b>1104</b> and a unit power range <b>1106</b>. Boundary space <b>1150</b> has a window time domain <b>1154</b> and a work range <b>1106</b>. As discussed above in relation to <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>, the conversion of the user-agnostic training profile <b>1108</b> to the training boundary <b>1158</b> can be performed by determining the largest possible integration of the user-agnostic training profile <b>1108</b> for given sizes (&#x201c;windows&#x201d;) of the domain <b>1104</b>. The size of the domain <b>1104</b> window becomes the domain <b>1154</b> value for a point of the training boundary <b>1158</b>, while the corresponding range value (&#x201c;work&#x201d;) is the value of the determined largest integration of the user-agnostic training profile <b>1108</b> (a power curve) for that window size.</p><p id="p-0132" num="0129"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating an example <b>1200</b> of computing a user boundary <b>1210</b> based on a combination of an estimate function <b>1202</b> and a measurement function <b>1204</b>. The estimate function <b>1202</b> and the measurement function <b>1204</b> in example <b>1200</b> can be defined in the boundary space <b>1150</b>. As discussed above in relation to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the estimate function <b>1202</b> and the measurement function <b>1204</b> can be based on measurements of user power output at given times (i.e., a power curve), converted into work values by determining largest integrations of the power curve for time windows (this conversion process is discussed above in relation to <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>). The estimate function <b>1202</b> can be a function (in this case a linear function, but the estimate function can also be non-linear) fit to the measurements. The measurement function <b>1204</b> can be a series of line segments that connect the measurements. A final line segment of the measurement function connects to the last measurement (in example <b>1200</b> this is at <b>1208</b>) and has a slope of zero.</p><p id="p-0133" num="0130">In example <b>1200</b>, the combination of the estimate function <b>1202</b> and the measurement function <b>1204</b> are based on the confidence function <b>1206</b>. Confidence function <b>1206</b> can be based on a difference between the estimate function <b>1202</b> and the measurement function <b>1204</b>. In various implementations, the confidence function <b>1206</b> can provide, for any given point, a percentage difference or an absolute difference between the estimate function <b>1202</b> and the measurement function <b>1204</b>. The confidence function <b>1206</b> in example <b>1200</b> can be defined as a percentage, shown by confidence rate range <b>1212</b>.</p><p id="p-0134" num="0131">The user boundary <b>1210</b> can be computed as the average of the estimate function <b>1202</b> and the measurement function <b>1204</b>, using the confidence function <b>1206</b> as a weighting factor. In example <b>1200</b>, the user boundary <b>1210</b> (&#x201c;U&#x201d;) is defined, for a given window size &#x201c;w&#x201d;, based on the estimate function <b>1202</b> (&#x201c;E( )&#x201d;), the measurement function <b>1204</b> (&#x201c;M( )&#x201d;) and the confidence function <b>1206</b> (&#x201c;CO&#x201d;) as follows: U=E(w)*C(w)+M(w)*(1&#x2212;C(w)). Thus, as the value of the confidence function <b>1206</b> decreases, the reliance of the user boundary <b>1210</b> on the measurement function <b>1204</b> increases.</p><p id="p-0135" num="0132"><figref idref="DRAWINGS">FIGS. <b>13</b>A-<b>13</b>C</figref> are diagrams illustrating examples of changes to a training boundary that causes corresponding changes to a linked user-agnostic training profile. In each of <figref idref="DRAWINGS">FIGS. <b>13</b>A-<b>13</b>C</figref>, the user-agnostic training profiles and training boundaries that correspond to each other in different spaces are shown with the same dashed line patterns. In each case, the user-agnostic training profiles are in the training space <b>1102</b> and the corresponding user-agnostic training profiles are in the boundary space <b>1150</b>.</p><p id="p-0136" num="0133"><figref idref="DRAWINGS">FIG. <b>13</b>A</figref> is a first diagram illustrating a first example <b>1300</b> of shift changes to a training boundary that causes corresponding changes to a linked user-agnostic training profile. Example <b>1300</b> shows four versions <b>1302</b>-<b>1308</b> of a user-agnostic training profile which correspond to training boundaries <b>1322</b>-<b>1328</b>. User-agnostic training profile <b>1302</b> corresponds to training boundary <b>1322</b>, user-agnostic training profile <b>1304</b> corresponds to training boundary <b>1324</b>, user-agnostic training profile <b>1306</b> corresponds to training boundary <b>1326</b>, and user-agnostic training profile <b>1308</b> corresponds to training boundary <b>1328</b>. The training boundaries <b>1322</b>-<b>1328</b> with different slopes cause corresponding shifts in range (power) for the matching user-agnostic training profile <b>1302</b>-<b>1308</b>.</p><p id="p-0137" num="0134"><figref idref="DRAWINGS">FIG. <b>13</b>B</figref> is a second diagram illustrating a second example <b>1340</b> of time and power scale changes to a training boundary that causes corresponding changes to a linked user-agnostic training profile. Example <b>1340</b> shows three versions <b>1342</b>-<b>1346</b> of a user-agnostic training profile which correspond to training boundaries <b>1362</b>-<b>1366</b>. User-agnostic training profile <b>1342</b> corresponds to training boundary <b>1362</b>, user-agnostic training profile <b>1344</b> corresponds to training boundary <b>1364</b>, and user-agnostic training profile <b>1346</b> corresponds to training boundary <b>1366</b>. The training boundaries <b>1362</b>-<b>1366</b> with different changes in slope cause corresponding changes in vertical (power) values for the matching user-agnostic training profile <b>1342</b>-<b>1346</b>. In addition, the training boundaries <b>1362</b>-<b>1366</b> with different maximum window sizes have corresponding maximum time units for the matching user-agnostic training profile <b>1342</b>-<b>1346</b>.</p><p id="p-0138" num="0135"><figref idref="DRAWINGS">FIG. <b>13</b>C</figref> is a third diagram illustrating a third example <b>1370</b> of time scale changes to a training boundary that causes corresponding changes to a linked user-agnostic training profile. Example <b>1370</b> shows three versions <b>1374</b>-<b>1378</b> of a user-agnostic training profile which correspond to training boundaries <b>1394</b>-<b>1398</b>. user-agnostic training profile <b>1374</b> corresponds to training boundary <b>1394</b>, user-agnostic training profile <b>1376</b> corresponds to training boundary <b>1396</b>, and user-agnostic training profile <b>1378</b> corresponds to training boundary <b>1398</b>. The training boundaries <b>1394</b>-<b>1398</b> with different maximum window sizes have corresponding maximum time units for the matching user-agnostic training profile <b>1374</b>-<b>1378</b>.</p><p id="p-0139" num="0136"><figref idref="DRAWINGS">FIG. <b>14</b>A</figref> is a first diagram illustrating a first example <b>1400</b> of selecting parameters for a user-specific workout based on a comparison between a user boundary and a training boundary. Example <b>1400</b> includes training space <b>1102</b> with multiple versions <b>1402</b> and <b>1404</b>A-I of a user-agnostic training profile. Example <b>1400</b> also includes training boundaries <b>1410</b> and <b>1414</b>A-E, in the boundary space <b>1150</b>, which correspond to the multiple versions <b>1402</b> and <b>1404</b>A-I of the user-agnostic training profile. Each of the training boundaries <b>1410</b> and <b>1414</b>A-E is a version of an original training boundary with changes applied based on a comparison of the original training boundary and a user boundary (shown in example <b>1400</b> by area <b>1412</b>). In example <b>1400</b>, the training boundary <b>1410</b> is selected as the training boundary that minimizes the loss function <b>1426</b>, which is defined in a space with an intensity domain and a loss range. The minimal point <b>1428</b> is determined, which corresponds to training boundary <b>1410</b>, which in turn corresponds to user-agnostic training profile version <b>1402</b>. Thus, in example <b>1400</b>, the user-agnostic training profile version <b>1402</b> is selected as the user-specific workout.</p><p id="p-0140" num="0137"><figref idref="DRAWINGS">FIG. <b>14</b>B</figref> is a second diagram illustrating a second example <b>1450</b> of selecting parameters for a user-specific workout based on a comparison between a user boundary and a training boundary. Example <b>1450</b> includes training space <b>1102</b> with a user-agnostic training profile <b>1452</b> and a linked training boundary <b>1474</b>, in the boundary space <b>1140</b>. Also in the boundary space is user boundary <b>1472</b>. In example <b>1400</b>, the training boundary <b>1474</b> has been changed from an original version to a version that minimizes the area between the training boundary <b>1474</b> and the user boundary <b>1472</b>, while keeping the training boundary <b>1474</b> below the user boundary <b>1472</b> at all times. These changes to the training boundary <b>1474</b> caused corresponding changes to the linked user-agnostic training profile <b>1452</b>. The modified version of the user-agnostic training profile <b>1452</b>, changed according to the changes to the linked training boundary <b>1474</b>, converts the user-agnostic training profile <b>1452</b> into a user-specific workout.</p><p id="p-0141" num="0138">The following is a non-exhaustive list of additional examples of the disclosed technology.</p><p id="p-0142" num="0139">1. A workout machine system for automatically providing a user-specific workout, the system comprising:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0140">one or more processors and one or more memories storing instructions that, when executed by the one or more processors, perform operations comprising:        <ul id="ul0003" list-style="none">            <li id="ul0003-0001" num="0141">obtaining a user-agnostic training profile, defined in a training space, specifying a power curve in a time domain;</li>            <li id="ul0003-0002" num="0142">obtaining a user boundary, defined in a boundary space, specifying amounts of user-produced work in a time window domain;</li>            <li id="ul0003-0003" num="0143">computing a training boundary that is a conversion of the user-agnostic training profile into the boundary space; and</li>            <li id="ul0003-0004" num="0144">adjusting the training boundary:            <ul id="ul0004" list-style="none">                <li id="ul0004-0001" num="0145">wherein the adjustments to the training boundary cause one or more of: a shift of power values for the user-agnostic training profile, a power scale change in the magnitude of the power values for the user-agnostic training profile, a time scale change in a duration of the user-agnostic training profile, or any combination thereof;</li>                <li id="ul0004-0002" num="0146">wherein the adjustments are based on a comparison between the training boundary and the user boundary; and</li>                <li id="ul0004-0003" num="0147">wherein the adjustments cause the user-agnostic training profile to be transformed into the user-specific workout;</li>            </ul>            </li>        </ul>        </li>        <li id="ul0002-0002" num="0148">wherein output or settings of a workout apparatus are automatically provided based on the user-specific workout.</li>    </ul>    </li></ul></p><p id="p-0143" num="0149">2. The workout machine system of example 1, wherein the user boundary is a function fit to a set of measurements of user work for particular time windows.</p><p id="p-0144" num="0150">3. The workout machine system of example 1, wherein the user boundary is a series of line segments that connect measurements of user work for particular time windows.</p><p id="p-0145" num="0151">4. The workout machine system of example 1, wherein the user boundary is a combination of A) a function fit to a set of measurements of user work for particular time windows and B) a series of line segments that connect the measurements of user work for particular time windows.</p><p id="p-0146" num="0152">5. The workout machine system of example 4,<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0153">wherein the combination at multiple points in the domain is based on confidence weighting factors specified for each of the multiple points in the domain; and</li>        <li id="ul0006-0002" num="0154">wherein the confidence weighting factors, for each particular point of the multiple points in the domain, are based on a progressive measurement for a section of the domain ending at the particular point, wherein the progressive measurement measures a cumulative difference between X) the function fit to the set of measurements in the section of the domain and Y) the series of line segments in the section of the domain.</li>    </ul>    </li></ul></p><p id="p-0147" num="0155">6. The workout machine system of any one of examples 1-5, wherein the user-agnostic training profile is specific to the workout apparatus.</p><p id="p-0148" num="0156">7. The workout machine system of any one of examples 1-6, wherein the training boundary is linked to the user-agnostic training profile such that a change to the user-agnostic training profile causes a corresponding change to the training boundary.</p><p id="p-0149" num="0157">8. The workout machine system of any one of examples 1-7,<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0158">wherein the user-specific workout is a first user-specific workout and the user boundary is a first user boundary;</li>        <li id="ul0008-0002" num="0159">wherein the operations further comprise transmitting the user-agnostic training profile to a geographically remote system; and</li>        <li id="ul0008-0003" num="0160">wherein the user-agnostic training profile is transformed into a second user-specific workout, different from the first user-specific workout, by adjusting the user-agnostic training profile based on a second user boundary different from the first user boundary.</li>    </ul>    </li></ul></p><p id="p-0150" num="0161">9. The workout machine system of any one of examples 1-8, wherein the comparison between the training boundary and the user boundary minimizes user perceived effort by adjusting the training boundary to maximize a total area between the training boundary and the user boundary.</p><p id="p-0151" num="0162">10. The workout machine system of example any one of examples 1-8, wherein the comparison between the training boundary and the user boundary maximizes workout potential by adjusting the training boundary to minimize a total area between the training boundary and the user boundary.</p><p id="p-0152" num="0163">11. The workout machine system of example any one of examples 1-8, wherein the comparison between the training boundary and the user boundary causes an adjustment to the training boundary that minimizes a loss function that balances between perceived user effort and workout potential.</p><p id="p-0153" num="0164">12. The workout machine system of example any one of examples 1-11, wherein the automatically providing the output or settings of the workout apparatus comprises providing the output, to a server system, including an indication of the user-specific workout.</p><p id="p-0154" num="0165">13. The workout machine system of example any one of examples 1-12, wherein the automatically providing the output or settings of the workout apparatus comprises providing the output, to a mobile device, including an indication of the user-specific workout.</p><p id="p-0155" num="0166">14. The workout machine system of any one of examples 1-13, wherein the automatically providing the output or settings of the workout apparatus comprises providing the output to a mobile device, including data for the user-specific workout to be operated on by execution of instructions on the mobile device, wherein the execution of instructions by the mobile device provide a display for a user to implement the user-specific workout.</p><p id="p-0156" num="0167">15. The workout machine system of any one of examples 1-14, wherein the automatically providing the output or settings of the workout apparatus comprises providing the output to the workout apparatus, the output configured to cause a display of the workout apparatus to provide instructions for the user-specific workout.</p><p id="p-0157" num="0168">16. The workout machine system of any one of examples 1-15, wherein the automatically providing the output or settings of the workout apparatus comprises providing the settings to the workout apparatus, wherein the workout apparatus automatically implements the user-specific workout.</p><p id="p-0158" num="0169">17. The workout machine system of any one of examples 1-16, wherein the user-agnostic training profile is based on one or more user drawn lines, provided to a user interface, that are automatically converted into the user-agnostic training profile.</p><p id="p-0159" num="0170">18. The workout machine system of any one of examples 1-17, wherein the user-agnostic training profile is obtained from a library of predefined user-agnostic training profiles.</p><p id="p-0160" num="0171">19. The workout machine system of any one of examples 1-18,<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0172">wherein, prior to the adjusting of the training boundary, the user-agnostic training profiled is configured based on user input.</li>    </ul>    </li></ul></p><p id="p-0161" num="0173">20. The workout machine system of any one of examples 1-19,<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0174">wherein adjusting of the training boundary is based at least in part on a determined duration of a video or audio media item.</li>    </ul>    </li></ul></p><p id="p-0162" num="0175">21. The workout machine system of any one of examples 1-20,<ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0176">wherein adjusting of the training boundary is based at least in part on a determined tempo or pace of a video or audio media item.</li>    </ul>    </li></ul></p><p id="p-0163" num="0177">22. The workout machine system of any one of examples 1-21, wherein the user boundary is based on a series of work values obtained by:<ul id="ul0015" list-style="none">    <li id="ul0015-0001" num="0000">    <ul id="ul0016" list-style="none">        <li id="ul0016-0001" num="0178">identifying a work value for each particular window size, of multiple window size durations, of measurements indicative of power output, by:        <ul id="ul0017" list-style="none">            <li id="ul0017-0001" num="0179">identifying a largest integration, of a function specified by the measurements indicative of power output, for an interval matching the particular window size.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0164" num="0180">23. The workout machine system of any one of examples 1-22, wherein the conversion of the user-agnostic training profile into the boundary space is performed by:<ul id="ul0018" list-style="none">    <li id="ul0018-0001" num="0000">    <ul id="ul0019" list-style="none">        <li id="ul0019-0001" num="0181">identifying, from the power curve in the time domain, work values for particular window sizes by identifying a largest integration of the power curve for an interval matching each particular window size.</li>    </ul>    </li></ul></p><p id="p-0165" num="0182">24. A method for automatically providing a user-specific workout, the method comprising:<ul id="ul0020" list-style="none">    <li id="ul0020-0001" num="0000">    <ul id="ul0021" list-style="none">        <li id="ul0021-0001" num="0183">obtaining a user-agnostic training profile defined in a training space;</li>        <li id="ul0021-0002" num="0184">obtaining a user boundary defined in a boundary space;</li>        <li id="ul0021-0003" num="0185">computing a training boundary that is a conversion of the user-agnostic training profile into the boundary space; and</li>        <li id="ul0021-0004" num="0186">adjusting the training boundary, wherein the adjustments:        <ul id="ul0022" list-style="none">            <li id="ul0022-0001" num="0187">are based on a comparison between the training boundary and the user boundary; and</li>            <li id="ul0022-0002" num="0188">cause corresponding changes to the user-agnostic training profile, converting it into the user-specific workout;</li>        </ul>        </li>        <li id="ul0021-0005" num="0189">wherein output or settings of a workout apparatus are automatically provided based on the user-specific workout.</li>    </ul>    </li></ul></p><p id="p-0166" num="0190">25. The method of example 24, wherein the adjusting causes at least one of:<ul id="ul0023" list-style="none">    <li id="ul0023-0001" num="0000">    <ul id="ul0024" list-style="none">        <li id="ul0024-0001" num="0191">a shift of power values for the user-agnostic training profile;</li>        <li id="ul0024-0002" num="0192">a power scale change in the magnitude of the power values for the user-agnostic training profile;</li>        <li id="ul0024-0003" num="0193">a time scale change in the duration of the user-agnostic training profile; or</li>        <li id="ul0024-0004" num="0194">any combination thereof.</li>    </ul>    </li></ul></p><p id="p-0167" num="0195">26. The method of any one of examples 24-25, wherein the user boundary is a function fit to a set of measurements of user work for particular time windows.</p><p id="p-0168" num="0196">27. The method of any one of examples 24-25,<ul id="ul0025" list-style="none">    <li id="ul0025-0001" num="0000">    <ul id="ul0026" list-style="none">        <li id="ul0026-0001" num="0197">wherein the user boundary is a combination of A) a function fit to a set of measurements of user work for particular time windows and B) a series of line segments that connect the measurements of user work for particular time windows;</li>        <li id="ul0026-0002" num="0198">wherein the combination, at multiple points in the domain of the boundary space, is based on confidence weighting factors specified for each of the multiple points in the domain; and</li>        <li id="ul0026-0003" num="0199">wherein the confidence weighting factors, for each particular point of the multiple points in the domain, are based on a progressive measurement for a section of the domain ending at the particular point, wherein the progressive measurement measures a cumulative difference between X) the function fit to the set of measurements in the section of the domain and Y) the series of line segments in the section of the domain.</li>    </ul>    </li></ul></p><p id="p-0169" num="0200">28. The method of any one of examples 24-27, wherein the user-agnostic training profile is specific to the workout apparatus.</p><p id="p-0170" num="0201">29. The method of any one of examples 24-28,<ul id="ul0027" list-style="none">    <li id="ul0027-0001" num="0000">    <ul id="ul0028" list-style="none">        <li id="ul0028-0001" num="0202">wherein the user-specific workout is a first user-specific workout and the user boundary is a first user boundary;</li>        <li id="ul0028-0002" num="0203">wherein the user-agnostic training profile is received at a geographically remote system; and</li>        <li id="ul0028-0003" num="0204">wherein the user-agnostic training profile is transformed, for the a geographically remote system, into a second user-specific workout, different from the first user-specific workout, by adjusting the user-agnostic training profile based on a second user boundary different from the first user boundary.</li>    </ul>    </li></ul></p><p id="p-0171" num="0205">30. The method of any one of examples 24-29,<ul id="ul0029" list-style="none">    <li id="ul0029-0001" num="0000">    <ul id="ul0030" list-style="none">        <li id="ul0030-0001" num="0206">wherein the comparison between the training boundary and the user boundary minimizes user perceived effort by adjusting the training boundary to maximize a total area between the training boundary and the user boundary; or</li>        <li id="ul0030-0002" num="0207">wherein the comparison between the training boundary and the user boundary maximizes workout potential by adjusting the training boundary to minimize a total area between the training boundary and the user boundary.</li>    </ul>    </li></ul></p><p id="p-0172" num="0208">31. The method of any one of examples 24-29, wherein the comparison between the training boundary and the user boundary causes an adjustment to the training boundary that minimizes a loss function that balances between perceived user effort and workout potential.</p><p id="p-0173" num="0209">32. The method of any one of examples 24-31, wherein the automatically providing the output or settings of the workout apparatus comprises providing the output, to a mobile device, including an indication of the user-specific workout.</p><p id="p-0174" num="0210">33. The method of any one of examples 24-32, wherein the automatically providing the output or settings of the workout apparatus comprises providing the settings to the workout apparatus, wherein the workout apparatus automatically implements the settings to implement the user-specific workout.</p><p id="p-0175" num="0211">34. The method of any one of examples 24-33, wherein adjusting of the training boundary is based at least in part on a determined duration, tempo, pace of a video or audio media item.</p><p id="p-0176" num="0212">35. The method of any one of examples 24-34,<ul id="ul0031" list-style="none">    <li id="ul0031-0001" num="0000">    <ul id="ul0032" list-style="none">        <li id="ul0032-0001" num="0213">wherein the user boundary is based on a series of work values obtained by identifying a work value for each particular window size, of multiple window size durations, of measurements indicative of power output, by:        <ul id="ul0033" list-style="none">            <li id="ul0033-0001" num="0214">identifying a largest integration, of a function specified by the measurements indicative of power output, for an interval matching the particular window size; and</li>        </ul>        </li>        <li id="ul0032-0002" num="0215">wherein the conversion of the user-agnostic training profile into the boundary space is performed by identifying, from the user-agnostic training profile, work values for particular window sizes by identifying a largest integration for an interval matching each particular window size.</li>    </ul>    </li></ul></p><p id="p-0177" num="0216">36. A computer-readable storage medium storing instructions that, when executed by a computing system, cause the computing system to perform operations for automatically providing a user-specific workout, the operations comprising:<ul id="ul0034" list-style="none">    <li id="ul0034-0001" num="0000">    <ul id="ul0035" list-style="none">        <li id="ul0035-0001" num="0217">obtaining a user-agnostic training profile;</li>        <li id="ul0035-0002" num="0218">obtaining a user boundary defined in a boundary space;</li>        <li id="ul0035-0003" num="0219">computing a training boundary that is a conversion of the user-agnostic training profile into the boundary space; and</li>        <li id="ul0035-0004" num="0220">adjusting the training boundary, wherein the adjustments:        <ul id="ul0036" list-style="none">            <li id="ul0036-0001" num="0221">are based on a comparison between the training boundary and the user boundary; and</li>            <li id="ul0036-0002" num="0222">cause the user-agnostic training profile to be transformed into the user-specific workout.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0178" num="0223">37. The computer-readable storage medium of example 36, wherein causing the user-agnostic training profile to be transformed into the user-specific workout includes at least one of:<ul id="ul0037" list-style="none">    <li id="ul0037-0001" num="0000">    <ul id="ul0038" list-style="none">        <li id="ul0038-0001" num="0224">a shift of power values for the user-agnostic training profile;</li>        <li id="ul0038-0002" num="0225">a power scale change in the magnitude of the power values for the user-agnostic training profile;</li>        <li id="ul0038-0003" num="0226">a time scale change in the duration of the user-agnostic training profile; or</li>        <li id="ul0038-0004" num="0227">any combination thereof.</li>    </ul>    </li></ul></p><p id="p-0179" num="0228">38. The computer-readable storage medium of any one of examples 36-37,<ul id="ul0039" list-style="none">    <li id="ul0039-0001" num="0000">    <ul id="ul0040" list-style="none">        <li id="ul0040-0001" num="0229">wherein the operations further comprise providing output or settings of a workout apparatus based on the user-specific workout; and</li>        <li id="ul0040-0002" num="0230">wherein the user-agnostic training profile is specific to the workout apparatus.</li>    </ul>    </li></ul></p><p id="p-0180" num="0231">39. The computer-readable storage medium of any one of examples 36-38, wherein the user boundary is a function fit to a set of values of work for particular time windows.</p><p id="p-0181" num="0232">40. The computer-readable storage medium of any one of examples 36-39,<ul id="ul0041" list-style="none">    <li id="ul0041-0001" num="0000">    <ul id="ul0042" list-style="none">        <li id="ul0042-0001" num="0233">wherein the comparison between the training boundary and the user boundary minimizes user perceived effort by adjusting the training boundary to maximize a total area between the training boundary and the user boundary; or</li>        <li id="ul0042-0002" num="0234">wherein the comparison between the training boundary and the user boundary maximizes workout potential by adjusting the training boundary to minimize a total area between the training boundary and the user boundary.</li>    </ul>    </li></ul></p><p id="p-0182" num="0235">41. The computer-readable storage medium of any one of examples 36-40,<ul id="ul0043" list-style="none">    <li id="ul0043-0001" num="0000">    <ul id="ul0044" list-style="none">        <li id="ul0044-0001" num="0236">wherein the user boundary is based on a series of work values obtained by identifying a work value for each particular window size, of multiple window size durations, of measurements indicative of power output, by:        <ul id="ul0045" list-style="none">            <li id="ul0045-0001" num="0237">identifying a largest integration, of a function specified by the measurements indicative of power output, for an interval matching the particular window size; and</li>        </ul>        </li>        <li id="ul0044-0002" num="0238">wherein the conversion of the user-agnostic training profile into the boundary space is performed by identifying, from the user-agnostic training profile, work values for particular window sizes by identifying a largest integration for an interval matching each particular window size.</li>    </ul>    </li></ul></p><p id="p-0183" num="0239">Several implementations of the disclosed technology are described above in reference to the figures. The computing devices on which the described technology may be implemented can include one or more central processing units, memory, input devices (e.g., keyboard and pointing devices), output devices (e.g., display devices), storage devices (e.g., disk drives), and network devices (e.g., network interfaces). The memory and storage devices are computer-readable storage media that can store instructions that implement at least portions of the described technology. In addition, the data structures and message structures can be stored or transmitted via a data transmission medium, such as a signal on a communications link. Various communications links can be used, such as the Internet, a local area network, a wide area network, or a point-to-point dial-up connection. Thus, computer-readable media can comprise computer-readable storage media (e.g., &#x201c;non-transitory&#x201d; media) and computer-readable transmission media.</p><p id="p-0184" num="0240">Reference in this specification to &#x201c;implementations&#x201d; (e.g., &#x201c;some implementations,&#x201d; &#x201c;various implementations,&#x201d; &#x201c;one implementation,&#x201d; &#x201c;an implementation,&#x201d; etc.) means that a particular feature, structure, or characteristic described in connection with the implementation is included in at least one implementation of the disclosure. The appearances of these phrases in various places in the specification are not necessarily all referring to the same implementation, nor are separate or alternative implementations mutually exclusive of other implementations. Moreover, various features are described which may be exhibited by some implementations and not by others. Similarly, various requirements are described which may be requirements for some implementations but not for other implementations.</p><p id="p-0185" num="0241">As used herein, being above a threshold means that a value for an item under comparison is above a specified other value, that an item under comparison is among a certain specified number of items with the largest value, or that an item under comparison has a value within a specified top percentage value. As used herein, being below a threshold means that a value for an item under comparison is below a specified other value, that an item under comparison is among a certain specified number of items with the smallest value, or that an item under comparison has a value within a specified bottom percentage value. As used herein, being within a threshold means that a value for an item under comparison is between two specified other values, that an item under comparison is among a middle specified number of items, or that an item under comparison has a value within a middle specified percentage range. Relative terms, such as high or unimportant, when not otherwise defined, can be understood as assigning a value and determining how that value compares to an established threshold. For example, the phrase &#x201c;selecting a fast connection&#x201d; can be understood to mean selecting a connection that has a value assigned corresponding to its connection speed that is above a threshold.</p><p id="p-0186" num="0242">As used herein, the word &#x201c;or&#x201d; refers to any possible permutation of a set of items. For example, the phrase &#x201c;A, B, or C&#x201d; refers to at least one of A, B, C, or any combination thereof, such as any of: A; B; C; A and B; A and C; B and C; A, B, and C; or multiple of any item such as A and A; B, B, and C; A, A, B, C, and C; etc.</p><p id="p-0187" num="0243">Although the subject matter has been described in language specific to structural features or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Specific embodiments and implementations have been described herein for purposes of illustration, but various modifications can be made without deviating from the scope of the embodiments and implementations. The specific features and acts described above are disclosed as example forms of implementing the claims that follow. Accordingly, the embodiments and implementations are not limited except as by the appended claims.</p><p id="p-0188" num="0244">Any patents, patent applications, and other references noted above are incorporated herein by reference. Aspects can be modified, if necessary, to employ the systems, functions, and concepts of the various references described above to provide yet further implementations. If statements or subject matter in a document incorporated by reference conflicts with statements or subject matter of this application, then this application shall control.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001 MATH-US-00001-2" nb-file="US20230001267A1-20230105-M00001.NB"><img id="EMI-M00001" he="30.65mm" wi="76.20mm" file="US20230001267A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A workout machine system for automatically providing a user-specific workout, the system comprising:<claim-text>one or more processors and one or more memories storing instructions that, when executed by the one or more processors, perform operations comprising:<claim-text>obtaining a user-agnostic training profile, defined in a training space, specifying a power curve in a time domain;</claim-text><claim-text>obtaining a user boundary, defined in a boundary space, specifying amounts of user-produced work in a time window domain;</claim-text><claim-text>computing a training boundary that is a conversion of the user-agnostic training profile into the boundary space; and</claim-text><claim-text>adjusting the training boundary:<claim-text>wherein the adjustments to the training boundary cause one or more of: a shift of power values for the user-agnostic training profile, a power scale change in the magnitude of the power values for the user-agnostic training profile, a time scale change in a duration of the user-agnostic training profile, or any combination thereof;</claim-text><claim-text>wherein the adjustments are based on a comparison between the training boundary and the user boundary; and</claim-text><claim-text>wherein the adjustments cause the user-agnostic training profile to be transformed into the user-specific workout;</claim-text></claim-text></claim-text><claim-text>wherein output or settings of a workout apparatus are automatically provided based on the user-specific workout.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The workout machine system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the user boundary is a function fit to a set of measurements of user work for particular time windows.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The workout machine system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the user boundary is a series of line segments that connect measurements of user work for particular time windows.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The workout machine system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the user boundary is a combination of A) a function fit to a set of measurements of user work for particular time windows and B) a series of line segments that connect the measurements of user work for particular time windows.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The workout machine system of <claim-ref idref="CLM-00004">claim 4</claim-ref>,<claim-text>wherein the combination at multiple points in the domain is based on confidence weighting factors specified for each of the multiple points in the domain; and</claim-text><claim-text>wherein the confidence weighting factors, for each particular point of the multiple points in the domain, are based on a progressive measurement for a section of the domain ending at the particular point, wherein the progressive measurement measures a cumulative difference between X) the function fit to the set of measurements in the section of the domain and Y) the series of line segments in the section of the domain.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The workout machine system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the user-agnostic training profile is specific to the workout apparatus.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The workout machine system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the training boundary is linked to the user-agnostic training profile such that a change to the user-agnostic training profile causes a corresponding change to the training boundary.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The workout machine system of <claim-ref idref="CLM-00001">claim 1</claim-ref>,<claim-text>wherein the user-specific workout is a first user-specific workout and the user boundary is a first user boundary;</claim-text><claim-text>wherein the operations further comprise transmitting the user-agnostic training profile to a geographically remote system; and</claim-text><claim-text>wherein the user-agnostic training profile is transformed into a second user-specific workout, different from the first user-specific workout, by adjusting the user-agnostic training profile based on a second user boundary different from the first user boundary.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The workout machine system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the comparison between the training boundary and the user boundary minimizes user perceived effort by adjusting the training boundary to maximize a total area between the training boundary and the user boundary.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The workout machine system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the comparison between the training boundary and the user boundary maximizes workout potential by adjusting the training boundary to minimize a total area between the training boundary and the user boundary.</claim-text></claim><claim id="CLM-11-23" num="11-23"><claim-text><b>11</b>.-<b>23</b>. (canceled)</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. A method for automatically providing a user-specific workout, the method comprising:<claim-text>obtaining a user-agnostic training profile defined in a training space;</claim-text><claim-text>obtaining a user boundary defined in a boundary space;</claim-text><claim-text>computing a training boundary that is a conversion of the user-agnostic training profile into the boundary space; and</claim-text><claim-text>adjusting the training boundary, wherein the adjustments:<claim-text>are based on a comparison between the training boundary and the user boundary; and</claim-text><claim-text>cause corresponding changes to the user-agnostic training profile, converting it into the user-specific workout;</claim-text></claim-text><claim-text>wherein output or settings of a workout apparatus are automatically provided based on the user-specific workout.</claim-text></claim-text></claim><claim id="CLM-25-35" num="25-35"><claim-text><b>25</b>.-<b>35</b>. (canceled)</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. A computer-readable storage medium storing instructions that, when executed by a computing system, cause the computing system to perform operations for automatically providing a user-specific workout, the operations comprising:<claim-text>obtaining a user-agnostic training profile;</claim-text><claim-text>obtaining a user boundary defined in a boundary space;</claim-text><claim-text>computing a training boundary that is a conversion of the user-agnostic training profile into the boundary space; and</claim-text><claim-text>adjusting the training boundary, wherein the adjustments:<claim-text>are based on a comparison between the training boundary and the user boundary; and</claim-text><claim-text>cause the user-agnostic training profile to be transformed into the user-specific workout.</claim-text></claim-text></claim-text></claim><claim id="CLM-37-41" num="37-41"><claim-text><b>37</b>.-<b>41</b>. (canceled)</claim-text></claim></claims></us-patent-application>