<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006968A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006968</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17547087</doc-number><date>20211209</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>2503</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>5007</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0236</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0263</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>2503</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>61</main-group><subgroup>2007</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>69</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SECURE NETWORKING ENGINE FOR A SECURE NETWORKING SYSTEM</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63217192</doc-number><date>20210630</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>MICROSOFT TECHNOLOGY LICENSING, LLC</orgname><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>CATZ</last-name><first-name>Alon</first-name><address><city>Tel Aviv</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>LEWIN</last-name><first-name>Guy</first-name><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>LUVTON</last-name><first-name>Gal</first-name><address><city>Hadera</city><country>IL</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods, systems, and computer storage media for providing a local protocol server associated with a secure networking engine that provides client-side forwarding in a secure networking system. The local protocol server (e.g., local TCP/UDP server)&#x2014;on a client device&#x2014;operates based on client-side forwarding operations that include: IP assignment, operating system (OS) routing, destination network address translation, and original destination retrieval to support accessing a network resource (e.g., socket connection) on the client device and support communications between client applications on the client device and the local protocol server on the same client device. In this way, the local protocol server supports communications of a diverse set of data traffic or network traffic (e.g., different types of cross-platform communications), where the diverse set of network traffic is initially communicated from a client application and processed for network security operations at the local protocol sever of within the same client device.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="116.25mm" wi="158.75mm" file="US20230006968A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="268.56mm" wi="197.27mm" orientation="landscape" file="US20230006968A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="273.30mm" wi="183.39mm" orientation="landscape" file="US20230006968A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="272.80mm" wi="197.27mm" orientation="landscape" file="US20230006968A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="272.63mm" wi="194.56mm" orientation="landscape" file="US20230006968A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="168.91mm" wi="120.57mm" file="US20230006968A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="228.35mm" wi="120.65mm" file="US20230006968A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="220.56mm" wi="121.33mm" file="US20230006968A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="230.46mm" wi="144.86mm" file="US20230006968A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="195.83mm" wi="146.39mm" file="US20230006968A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims priority of Provisional Application No. 63/217,192, filed Jun. 30, 2021, and entitled &#x201c;Secure Networking Engine for A Secure Networking System&#x201d;, the entire contents of which is incorporated herein by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Users rely on networked communications between applications and services to accomplish computing tasks. Distributed computing systems host and support different types of applications and services in on-premise networks or wide-area networks (WAN). In particular, the distributed computing system can implement a secure access service edge (SASE)&#x2014;such as a secure (cloud-based) networking system&#x2014;to provide network and security. SASE can be provided as a cloud service to deliver secure, optimal and automated access to applications and workloads in the cloud. For example, an IoT device can be SASE compatible to provide increased security&#x2014;via the cloud service&#x2014;for communications between the IoT device and client applications.</p><p id="p-0004" num="0003">Conventionally, secure networking systems are not configured with a comprehensive computing logic and infrastructure to efficiently provide secure network communications that are SASE compatible. Conventional secure networking systems use VPN (virtual private network) solutions for communications (e.g., cross-platform communications) based on communicating packets on an IP-basis. For example, a virtual network adapter can be configured to capture network traffic from a particular IP address and then communicate the network traffic to a network resource or endpoint. However, IP-based network processing does not support secure network communications functionality that is computing-resource efficient and that mitigates security risks. As such, a more comprehensive secure networking system&#x2014;with an alternative basis for performing secure networking operations&#x2014;can improve computing operations and interfaces in secure networking systems.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">Various aspects of the technology described herein are generally directed to systems, methods, and computer storage media for, among other things, providing a local protocol server associated with a secure networking engine that provides client-side forwarding in a secure networking system. The local protocol server (e.g., local TCP/UDP server)&#x2014;on a client device&#x2014;operates based on client-side forwarding operations that include: IP assignment, operating system (OS) routing, destination network address translation, and original destination retrieval to support accessing a network resource (e.g., socket connection) on a client device and support communications between client applications on the client device and the local protocol server on the client device.</p><p id="p-0006" num="0005">Conventionally, secure networking systems are not configured with a comprehensive computing logic and infrastructure to efficiently provide secure network communications that are SASE compatible. A technical solution&#x2014;to the limitations of conventional secure networking systems&#x2014;a local protocol server associated with a secure networking engine that provides client-side forwarding in a secure networking system. In operation, the local protocol server&#x2014;on a client device&#x2014;listens for network connections and packet communications&#x2014;in order to receive translated Internet Protocol (IP) packets with data that is processed for secure network communications via a SASE compatible model. Initially, a client application attempts to transmit data traffic to an intended destination IP address (e.g., MpApp:80); however the data traffic is rerouted such that the client application communicates the data traffic (e.g., Transmission Control Protocol (TCP) synchronize (syn) packet) using an assigned IP address (e.g., secure networking engine proxy IP address). The assign IP address replaces the intended destination IP address (i.e., MyApp:80) of the client application. The assigned IP address can provided based on host name resolution IP assignment or hardcoded IP address IP assignment that replaces the original intended destination IP address of the client application with the assigned IP address. The assigned IP address allows the data traffic to be intercepted (e.g., via OS routing mechanism) and communicated to and via a packet interceptor device (e.g., a TUN device). The secure networking engine (e.g., via an agent) operates in a listening state to access the data traffic that is intercepted and communicated to the packet interceptor device. A destination network address translator&#x2014;of the secure networking engine&#x2014;accesses the data traffic from the packet interceptor device and translates the destination (i.e., executes a DNAT operation) of the data traffic (e.g., the TCP syn packet) to a constant local IP address and port (i.e., a client-side forwarding IP address and port) associated with the local protocol server.</p><p id="p-0007" num="0006">The local protocol server operates in a listening state to access data associated with the translated IP packets via the destination address translator and an OS routing mechanism. In particular, based on the DNAT operation and translated destination network address, the OS routing mechanism forwards the data traffic to the local protocol server&#x2014;via the client-side forwarding IP address and port&#x2014;such that the local protocol server receives the translated IP packets. In this way, the local protocol server (e.g., TCP/UDP) is configured to receive data associated with the translated IP packets that originated from a client application on same client device.</p><p id="p-0008" num="0007">The communication of the data of the translated IP packets is between the client application and the local protocol server both on the client device communicating via client-side forwarding operations including IP assignment, operating system (OS) routing, destination network address translation, and original destination retrieval. The local protocol server may establish a network connection based on translated IP packets. The local protocol server can be configured to support performing network security operations (e.g., authorizing, auditing, and securing access to network resources) for data traffic associated with the client applications.</p><p id="p-0009" num="0008">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009">The technology described herein is described in detail below with reference to the attached drawing figures, wherein:</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a block diagram of an exemplary secure networking system for providing a local protocol server that accesses data associated with a translated IP packet received via a packet interceptor device and destination network address translator of a secure networking engine, in accordance with aspects of the technology described herein;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> is a block diagram of an exemplary schematic for providing a local protocol server that accesses data associated with a translated IP packet received via a packet interceptor device and destination network address translator of a secure networking engine, in accordance with aspects of the technology described herein;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is an exemplary secure networking system for providing a local protocol server that accesses data associated with a translated IP packet received via a packet interceptor device and destination network address translator of a secure networking engine, in accordance with aspects of the technology described herein;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram of an exemplary schematic for providing a local protocol server that accesses data associated with a translated IP packet received via a packet interceptor device and destination network address translator of a secure networking engine, in accordance with aspects of the technology described herein;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref> provides a first exemplary method of providing a local protocol server that accesses data associated with a translated IP packet received via a packet interceptor device and destination network address translator of a secure networking engine, in accordance with aspects of the technology described herein;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref> provides a second exemplary method of providing a local protocol server that accesses data associated with a translated IP packet received via a packet interceptor device and destination network address translator of a secure networking engine, in accordance with aspects of the technology described herein;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref> provides a third exemplary method of providing a local protocol server that accesses data associated with a translated IP packet received via a packet interceptor device and destination network address translator of a secure networking engine, in accordance with aspects of the technology described herein;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b></figref> provides a block diagram of an exemplary distributed computing environment suitable for use in implementing aspects of the technology described herein; and</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of an exemplary computing environment suitable for use in implementing aspects of the technology described herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><heading id="h-0006" level="1">Overview of Technical Problems, Technical Solutions, and Technological Improvements</heading><p id="p-0020" num="0019">SASE is a networking and security model that supports providing networking and security both as a cloud service. SASE can be provided as a cloud service to deliver secure, optimal and automated access to applications and workloads in the cloud. For example, an IoT device can be SASE compatible to provide increased security&#x2014;via the cloud service&#x2014;for communications between the IoT device and client applications. Moreover, applications can operate based on firewall as a service (FWaaS), secure web gateway (SWG), zero-trust network access (ZTNA), and a medley of threat detection functions.</p><p id="p-0021" num="0020">In some implementations, a source connection (e.g., user, device, IoT device, edge computing location) can be SASE compatible based on operating with a cloud service that implements networking and security directly with the source connection rather than a data center. For example, an edge device can be accessed based on a set of operations (e.g., authenticating, authorizing, and auditing) to provide improved security. In this way, the SASE model&#x2014;via a secure networking system&#x2014;provides secure access to network resources. SASE advantageously supports different types of network traffic including HTTP, FTP, and DNS.</p><p id="p-0022" num="0021">Conventional secure networking systems use VPN (virtual private network) solutions for communication (e.g., cross-platform communications), where VPNs operate based on sending Internet Protocol (IP) packets on an IP-basis. VPN systems can be configured to force specific network connections to an identified network of an organization or to a separated network or sub-network. For example, a virtual network adapter can be configured to capture network data from an IP address and then communicate the network data to a network resource or endpoint. However, VPNs and VPN-type solutions are configured to intercept a defined scope of network traffic (e.g., workloads), which cannot be used to intercept a variety of different workloads.</p><p id="p-0023" num="0022">A non-VPN solution can include developing a secure networking engine as a cloud service. As discussed herein, a cloud service solution can be implemented (e.g., parse network traffic centrally and route the network traffics based on predefined rules); however the cloud service solution can be computing-resource intensive and introduce security risks. In the cloud service solution implementation, a distributed computing system would incur additional computational costs for running a central server for receiving, parsing, and communicating data associated with processing the network traffic. In addition, parsing user data out of network connections (e.g., TCP or UPD) exposes the server to security risks. In this way, IP-based network processing and server-side security operations do not support secure network communications functionality that is computing-resource efficient and that mitigates security risks. As such, a more comprehensive secure networking system&#x2014;with an alternative basis for performing secure networking operations&#x2014;can improve computing operations and interfaces in secure networking systems.</p><p id="p-0024" num="0023">Embodiments of the present disclosure are directed providing a local protocol server associated with a secure networking engine that provides client-side forwarding in a secure networking system. The local protocol server (e.g., local TCP/UDP server)&#x2014;on a client device&#x2014;operates based on client-side forwarding operations that include: IP assignment, operating system (OS) routing, destination network address translation, and original destination retrieval to support accessing a network resource (e.g., socket connection) on a client device and support communications between client applications on the client device and the local protocol server on the same client device. In this way, the local protocol server supports communications of a diverse set of network traffic (including cross-platform communications), where the diverse set of network traffic is initially communicated from a client application of a client device and processed for network security operations at the local protocol server of within the same client device.</p><p id="p-0025" num="0024">Aspects of the technical solution can be described by way of examples and with reference to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, <figref idref="DRAWINGS">FIGS. <b>1</b>B, and <b>1</b>C</figref>. <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates a secure networking system <b>100</b> having a secure networking engine <b>110</b>&#x2014;including a secure network engine (client device) <b>110</b>, operating system <b>110</b>A, client application <b>130</b>, packet interceptor device <b>140</b>, agent <b>150</b>, and secure networking engine client <b>120</b> including domain name system server <b>122</b>, authenticator <b>124</b>, destination network address translator, and local protocol server <b>170</b>&#x2014;an application server <b>180</b>, a secure networking engine server <b>190</b>, and network <b>195</b>.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates the secure networking system <b>100</b> having the secure networking engine <b>110</b>&#x2014;including secure networking engine logic <b>112</b>, secure networking engine data store <b>114</b>, proxy IP address assignment rules <b>142</b>&#x2014;and secure networking engine client <b>120</b> including translated IP packet <b>126</b> and socket connection <b>128</b>.</p><p id="p-0027" num="0026">With embodiments described herein, a SASE model can be implemented in the secure networking system (e.g., secure networking system <b>100</b>) that includes components that can intercept different types of data traffic or network traffic, where the data traffic is associated with an application server (e.g., application server <b>180</b>) and a secure networking server (e.g., secure networking engine server <b>190</b>). Application servers and secure networking servers can be network endpoints associated with the data traffic that is processed from the client application via the client device. Data traffic can generally refer to data that is encapsulated in network packets, where the data provides the load in the network. In particular, data traffic communicated from the different types of client applications can be intercepted using an OS routing mechanism (e.g., OS routing mechanism of Operating System <b>110</b>A of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>), packet interceptor device (e.g., packet interceptor <b>140</b>), and a secure networking engine (e.g., secure networking engine&#x2014;client device <b>110</b>) in a secure networking system.</p><p id="p-0028" num="0027">The secure networking engine performs client-side forwarding operations on the data traffic&#x2014;after the data traffic has been intercepted and communicated to the packet interceptor device&#x2014;where the client-side forwarding operations include a DNAT operation. The DNAT operation translates the destination address of the data traffic such that the data traffic is communicated to a local protocol server (e.g., local protocol server <b>170</b>) that facilitates network security operations (e.g., SASE compatible network security operations). Network security operations can include authorizing, auditing, and securing access to network resources (e.g., non-client-side network resources) based on specific rules. The secure networking system can perform IP assignment, operating system (OS) routing, destination network address translation, and original destination retrieval associated with characteristics of the data traffic. The data traffic can advantageously be cross-platform data traffic which can be evaluated based on platform-specific characteristics to perform the network security operations.</p><p id="p-0029" num="0028">The secure networking system manages different types of data traffic differently to provide network security operations in a distributed computing environment. For example, the data traffic can be internet data traffic and on-premise data traffic where network security operations are performed based on the characteristics of the internet data traffic and the on-premise data traffic. The network security operations can be associated with routing rules that correspond to the internet data traffic or the on-premise data traffic. For example, internet data traffic can be associated with WAN rules and internet protocols that correspond to HTTP or HTTPs calls and performing corresponding network security operations that apply limitations on domains that can be browsed and other types of web browsing limitations. With reference to the on-premise data traffic, firstly, the on-premise data traffic can be associated with LAN rules and custom protocols of on-premise applications&#x2014;that correspond to backend workloads and calls&#x2014;and secondly, on-premise traffic can be associated with performing network security operations that apply limitations associated with on-premise applications (e.g., database applications and custom applications).</p><p id="p-0030" num="0029">As previously discussed, a cloud server-based secure networking engine implementation can be complicated or complex to implement and also expose a computing environment (e.g., a distributed computing environment) to security risks. At a high level, a cloud server implementation would have to include a costly or computing-resource intensive implementation of TCP/IP stack that parses and extracts data to inspect the data for performing network security operations. Moreover, parsing user-crafted data packets at the data layer in this manner can expose the computing environment to network security vulnerabilities including IP fragmentation and TCP fragmentation. As such, the technical solution described herein, can be a client-side implementation that avoids the computing-resource inefficiencies and the security risks associated with a cloud server implementation.</p><p id="p-0031" num="0030">Accordingly, by way of illustration, the secure networking system can include support for intercepting data traffic and extracting TCP or UDP data, modifying the TCP or UDP data for client-side forwarding of the data traffic, and performing network security operations (e.g., authorizing, auditing, and securing access to network resources). Data traffic can be forwarded to a local protocol server (e.g., TCP/UDP server) via an operating system routing mechanism (e.g., kernel routing functionality), agent (i.e., secure networking engine client), a packet interceptor device (i.e., network layer device and data-traffic-intercept destination), and destination network address translation (DNAT) operations.</p><p id="p-0032" num="0031">By way of example, a first client application (e.g., client application <b>130</b>) of a plurality of client applications&#x2014;on a client device&#x2014;can establish a network connection and communicate a data packet based on client-side forwarding operations performed on the client device. The first client application can be a client application with a first type of data traffic and the plurality of client applications can have different types of data traffic. Data traffic can include internet data traffic for web browsing or data traffic can include email, social networking, database, and other types of application data traffic. The first client application&#x2014;operationally&#x2014;may be performing a process on the client device that is associated with a network connection to a socket (i.e., endpoint with an address) for a network resource (e.g., internet network resource or on-premise network resource).</p><p id="p-0033" num="0032">As described in more detail herein, the first client application issues data traffic (e.g., data packet) to an assigned IP address (e.g., secure networking engine proxy IP address). The assigned IP address can be referred to as an intercept-IP-address that is associated with the packet interceptor device (e.g., a TUN interface of a TUN device). The assigned IP address can be assigned to a client application using several different methods based on rules (e.g., proxy IP address assignment rules <b>142</b>) that indicate how to provide assigned IP address based on the attributes of the client application request. IP assignment operations are included in client-side forwarding operations to support intercepting data traffic from the client application and communicating the data traffic to the packet interceptor device. In other words, the secure networking system performs client-side forwarding operations that include, firstly, forcing the first client application to issue data traffic to the assigned IP address. Because the data traffic is issued to the assigned IP address, a data packet of the data traffic can be intercepted. Forcing the first client application to issue the data traffic to the assigned IP address can further be based on a range of assigned IP addresses associated with the packet interceptor device. In this way, any data traffic communicated to the assigned IP address (or range of IP assigned addresses) can be intercepted and communicated to the packet interceptor device.</p><p id="p-0034" num="0033">In one embodiment, forcing the first client application to issue the data traffic using the assigned IP address is based on host name resolution operations. In this way, client-side forwarding operations can include host name resolution operations that force the first client application to issue the data traffic using the assigned IP address. In particular, with host name resolution operations&#x2014;whenever the first client application attempts to resolve a host name&#x2014;the assigned IP address is communicated instead, to facilitate intercepting the data traffic. The host name resolution operations are performed in advance&#x2014;via a DNS server as discussed in detail below&#x2014;to resolve a host name associated with the first client application to the assigned IP address.</p><p id="p-0035" num="0034">Operationally, a DNS server (e.g., local or remote DNS server) is used to support host name resolution. For example, the plurality of client applications on the client device&#x2014;including the first client application&#x2014;have access to the DNS server, where the DNS server is associated with Name Resolution Policy Table (NRPT) rules (i.e., proxy IP address assignment rules <b>142</b>) for policy-based name resolution request routing. For example, specific host names or wild card host names can be set up with rules to route the host names to assigned IP addresses. As such, DNS lookups can be routed to the DNS server to override any specific domains such that client applications communicate via assigned IP addresses.</p><p id="p-0036" num="0035">It is also contemplated that host names that resolve to the same eventual destination IP address can be managed differently with regard with network security operations, as such, the host name resolution operations include methods for distinguishing the original host names. For example, a first host name A and a second host name B may both resolve to the same host name destination IP address; however, the routing evaluation, applicable policies, and session context for host name A and host name B may be different. As such, the host name resolution operations (e.g., via proxy IP address assignment rules <b>142</b>) can include allocating IP addresses for different host names. For example, host name A can be allocated a first allocated IP address and host name B can be allocated a second allocated IP address. In operation, when the first client application communicates via host name A, the data traffic can be intercepted via the first allocated IP address and when the first application client application communicates via host name B, the data traffic can be intercepted via the second allocated IP address. And, based on the first allocated IP address or the second allocated IP address, network security operations are performed differently even though host name A and host name B resolve to the same eventual destination IP address.</p><p id="p-0037" num="0036">Moreover, in some embodiments, a first client application may be configured to communicate via a hardcoded IP address instead of host name resolution. For example, the first client application may attempt to establish a socket connection that is not directed to a host name, but rather a hardcoded IP address. When a hardcoded IP address is associated with a client application, a routing rule can be created such that the operating system routing mechanism routes the hardcoded IP address to the packet interceptor device. Other variations and combinations of client-side forwarding operations&#x2014;associated with proxy IP address assignment rules&#x2014;for forcing client application to communicate via an assigned IP address such that the data traffic that is intercepted for processing via a packet interceptor device are contemplated with embodiment described herein.</p><p id="p-0038" num="0037">As discussed, the assigned IP address is configured to force data traffic to a packet interceptor device that intercepts the data traffic such that the secure networking engine client (e.g., via an agent) listens to the incoming data traffic. The packet interceptor device refers to a kernel virtual network device that implements a virtual network card associated with a packet interceptor interface (e.g., TUN interface of a TUN device). The packet interceptor device is assigned a local IP address (i.e., packet interceptor device local IP address) of the client device. The packet interceptor device local IP address is used by the OS routing mechanism to communicate data traffic to the packet interceptor device. As assigned IP addresses are provided for first client application data traffic&#x2014;based on proxy IP address assignment rules associated with host name resolution operations (i.e., DNS-based IP assignment, allocated IP addresses assignment) or hardcoded IP addresses operations (hardcoded IP address reassignment)&#x2014;the packet interceptor device is also associated with the assigned IP addresses such that data traffic directed to the assigned IP addresses are communicated to the packet interceptor device. The packet interceptor device can be associated with a range of IP addresses of a subnet mask, where the assigned IP addresses correspond to the range of IP addresses. The packet interceptor device can intercept data traffic and trigger communication with a software application (e.g., secure networking engine <b>120</b> with agent <b>120</b>A) of a client device instead of a hardware component.</p><p id="p-0039" num="0038">When data traffic is received at the packet interceptor device, the agent (e.g., agent <b>150</b> of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>) can listen for the data traffic to trigger additional client-side forwarding operations. The packet interceptor device operates as a bridge between the first client application routing and the agent. The agent can operate in a listening state to read data traffic from the packet interceptor device. For example, the first client application attempts to connect (i.e., set up a socket connection) to an network resource at a defined port (e.g., MyApp:80) and based on IP assignment operations MyApp:80 is assigned an assigned IP address 1.1.1.2:80 (e.g., via host name resolution). The DNS server stores the mapping between MyApp:80 and 1.1.1.2:80.</p><p id="p-0040" num="0039">In operation, the first application client can communicate a packet to establish a connection through TCP, UDP, or other types of connection. For example, a TCP connection can be established via a three-way handshake TCP/IP network creation mechanism (&#x201c;three-way handshake&#x201d;), the three-way handshake can be used to establish a network connection (e.g., network TCP socket connection) with a remote server. The three-way handshake can include initiating and negotiating parameters of the network TCP socket connection. The first application client can communicate a TCP syn packet via the assigned IP address (e.g., 1.1.1.2:80) where the TCP syn packet is intercepted by the packet interceptor device because the OS routing mechanism is configured to transmit communications from the assigned IP address to the packet interceptor device.</p><p id="p-0041" num="0040">It is contemplated that the agent can support authentication operations using a socket table that tracks previously authenticated socket connections and based on retrieving the original intended destination (i.e., original destination data) of the data traffic. The agent may access a table of existing socket connections to bypass authentication for any previously authenticated socket connections. The agent can cause an authenticator (e.g., authenticator <b>124</b>) to authenticate and store new authenticated socket connections in the socket table. New socket connections that are not authenticated can be authenticated via an identity provider (e.g., active directory). Authentication operations associated with an assigned IP address include retrieving the original destination data from the DNS server. For example, the DNS server stores mappings of original destination IP addresses to host name resolution assigned IP addresses. As such, with reference to assigned IP address 1.1.1.2:80, the authentication operation includes retrieving MyApp:80 via the &#x201c;MyApp:80 to 1.1.1.2:80&#x201d; mapping in DNS, in order to authenticate the MyApp socket connection request.</p><p id="p-0042" num="0041">Embodiments described herein further include the securing networking engine client performing client-side forwarding operations to configure socket connections to a local protocol server (e.g., local TCP/UDP server) that operates on the same client device that originated the request to access a socket connection. Conventionally, applications access socket connections to connect to remote endpoints. However, with the client-side forwarding operations including IP assignment, OS routing, packet interception, and destination network address translation (DNAT), such that a client application request to access a socket connection (e.g., creates a new network connection) via the local protocol server. The local protocol server operates based on application or socket layer protocols; however, has access to IP layer information that has been extracted and stored (e.g., via DNS server, DNAT and OS routing mechanism) prior to the OS routing mechanism communicating data (i.e., the application layer data) to the local protocol server.</p><p id="p-0043" num="0042">By way of illustration, destination network address translation (DNAT) includes changing the destination IP address of a packet of the data traffic. For example, the destination network address of the TCP/IP syn packet is translated to a constant local IP address and port (i.e., client-side forwarding IP address and port). The client-side forwarding IP address and port are associated with a local protocol server (e.g., local TCP/UDP server) that operates on the transport layer. The local TCP/UDP server operates in a listening state to receive requests for socket connections. Based on the DNAT, the operating system routing mechanism forwards the data associated with the TCP/IP syn packet (e.g., translated packet <b>126</b>) to the local TCP/UDP server that establishes the socket connection (e.g., socket connection <b>128</b>).</p><p id="p-0044" num="0043">The client application accessing the socket connection can include the local TCP/UDP server creating a network connection based on communicating a TCP/IP acknowledgment (ack) packet as part of the three-way handshake. In this way, as part of DNAT, multiple network connection requests with different corresponding ports (e.g., network connect request 1:80, network connection request 2:23, network connection request 3:90) can be translated via DNAT to the same client-side forward IP address/port.</p><p id="p-0045" num="0044">It is contemplated that the original intended destination (e.g., original destination data) for packets associated with the first client application can be retrieved. In one embodiment, the secure networking engine can utilize an OS socket API that allows the secure networking engine access to the source port of IP packets that are translated into translated IP packets. Upon identifying the source port, the secure networking engine relies on computing logic (e.g., secure networking engine logic <b>112</b>) for maintaining the original destination data (e.g., in-memory or a source port table) such that the original destination data can be accessed based the source port via the socket API.</p><p id="p-0046" num="0045">By way of example, MyApp:80 was mapped to assigned IP address: 1.1.1.2:80 and then 1.1.1.2:80 was translated to the client-side forwarding IP address and port, thus losing the original destination information. However, during DNAT, the source port remains unchanged, and the source port for DNAT operations can be tracked (e.g., in-memory or a source port table). For example, the source port table can include a mapping between the source port and assigned IP address. As such the original destination can data can be retrieved using the source port table, wherein the source port of the 1.1.1.2:80 IP address&#x2014;associated with DNAT&#x2014;can be used to map back to 1.1.1.2:80 and further MyApp:80 (e.g., via DNS) and the original destination data for the MyApp:80 data traffic.</p><p id="p-0047" num="0000">Overview of Exemplary Environments for Client-Side Forwarding associated with a Local Protocol Server of a Secure Networking System</p><p id="p-0048" num="0046">Aspects of the technical solution can be described by way of examples and with reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref>. <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a block diagram of an exemplary technical solution environment, based on example environments described with reference to <figref idref="DRAWINGS">FIGS. <b>6</b> and <b>7</b></figref> for use in implementing embodiments of the technical solution are shown. Generally the technical solution environment includes a technical solution system suitable for providing the example secure networking system <b>100</b> in which methods of the present disclosure may be employed. In particular, <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> shows a high level architecture of the secure networking system <b>100</b> in accordance with implementations of the present disclosure. Among other engines, managers, generators, selectors, or components not shown (collectively referred to herein as &#x201c;components&#x201d;), the technical solution environment of secure networking system <b>100</b> includes secure networking engine <b>110</b>, operating system <b>110</b>A, secure networking engine client <b>120</b>, client application <b>130</b>, packet interceptor device <b>140</b>, agent <b>150</b>, domain name system server <b>122</b>, authenticator <b>124</b>, destination network address translator <b>160</b>, and local protocol server <b>170</b>. The secure networking engine <b>110</b> further includes secure networking engine logic <b>112</b>, secure networking engine data store <b>114</b>, proxy IP address assignment rules <b>142</b>&#x2014;and secure networking engine client <b>120</b> including translated IP packet <b>126</b> and socket connection <b>128</b>.</p><p id="p-0049" num="0047">With reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, initially, at block <b>10</b>, client application <b>130</b> initiates communication with a network resource. For example, the client application <b>130</b> may initiate generation of a network connection (e.g., a TCP/IP network connection) or initiate communication with a socket. The client application <b>130</b> may generate a data traffic (e.g., IP packet) that includes instructions on how to access or establish a connection with a network resource. At block <b>12</b>, the operating system <b>110</b>A (e.g., via an OS routing mechanism) configures an assigned IP address to cause routing IP packets from the client application to a packet interceptor device. The secure networking engine can secure networking engine logic <b>112</b>, secure networking engine data store <b>114</b>, and proxy IP address assignment rules that support assigning assigned IP addresses to client applications attempting to access a network resource. The plurality of proxy IP address assignment rules <b>142</b> associated with host name resolution, hardcoded IP addresses, allocated IP addresses can instruct on assigning assigned IP addresses to client applications.</p><p id="p-0050" num="0048">At block <b>14</b>, based on the assigned IP address, the operating system routing mechanism can route the IP packet to the packet interceptor device <b>140</b>. The packet interceptor device <b>140</b> is associated with assigned IP addresses such that data traffic from the client application <b>130</b> At block <b>16</b>, based on receiving the IP packet associated with the assigned IP packet address, the packet interceptor device <b>140</b> communicates the IP packet to a secure network engine client <b>120</b>. At block <b>18</b>, the secure networking engine client <b>120</b> accesses the IP packet from the packet interceptor device. At block <b>20</b>, the secure networking engine client <b>120</b> authenticates the client application using original destination retrieved via a DNS server original destination data store (e.g., secure network engine data store <b>114</b>).</p><p id="p-0051" num="0049">At block <b>22</b>, the DNAT <b>160</b> translates a destination IP address of the IP packet to a client-side forwarding IP address and port are associated with a local protocol server. At block <b>24</b>, based on the client-side forwarding IP address and port, the operating system routing mechanism forwards data associated with translated IP packet to a local protocol server. At block <b>26</b>, the local protocol server <b>170</b> listens for socket connection requests. At block <b>28</b>, the local protocol server accesses data the translated IP packet from the client application based on the client-side forwarding IP address and port. At block <b>30</b>, the client application operates to communicate data associated with IP packets&#x2014;via the packet interceptor device, secure networking engine client, and DNAT&#x2014;to the local protocol server. At block <b>32</b>, based in part on a source port table associated with DNAT, the local protocol server retrieves original destination data for the IP packets received from the client application <b>130</b>.</p><p id="p-0052" num="0000">Exemplary Methods for Providing Client-Side Forwarding associated with a Local Protocol Server of a Secure Networking System</p><p id="p-0053" num="0050">With reference to <figref idref="DRAWINGS">FIGS. <b>3</b>, <b>4</b>, and <b>5</b></figref>, flow diagrams are provided illustrating methods for providing a local protocol server on a client device associated with a secure networking engine that provides client-side forwarding in a secure networking system. The methods may be performed using the secure networking system described herein. In embodiments, one or more computer-storage media having computer-executable or computer-useable instructions embodied thereon that, when executed, by one or more processors can cause the one or more processors to perform the methods (e.g., computer-implemented method) in the secure networking system (e.g., a computerized system or computing system).</p><p id="p-0054" num="0051">Turning to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a flow diagram is provided that illustrates a method <b>300</b> for a local protocol server on a client device associated with a secure networking engine that provides client-side forwarding in a secure networking system. At block <b>302</b>, an IP packet associated with both a client application on a client device and an assigned IP address of a packet interceptor device is accessed. The packet interceptor device is configured to receive IP packets that are intercepted based on a plurality of assigned IP addresses that cause intercepting the IP packets and routing the IP packets to the packet interceptor device. A plurality of proxy IP address assignment rules associated with host name resolution, hardcoded IP addresses, allocated IP addresses that instruct on assigning assigned IP addresses to client applications attempting to connect to a network resource.</p><p id="p-0055" num="0052">At block <b>304</b>, a destination network address of the IP packet is translated to a client-side forwarding IP address and port of a local protocol server of the client device. The local protocol server comprises a socket associated with the client-side forwarding IP address and port. The local protocol server is configured to listen via the socket; access the data associated with the translated IP packet; and based on accessing the data associated with the translated IP packet, establish a network connection with the client application, the network connection comprising a route from the client application to the local protocol server via the packet interceptor device and a destination network address translator, wherein establishing the network connection comprises the local protocol server and the client application performing a Transmission Control Protocol (TCP) three-way handshake. A synchronize/acknowledgement communication from the local protocol server and an acknowledgement communication from the client application are communicated via the packet interceptor device and the destination network address translator during the TCP three-way handshake to establish a network connection between the client application and the local protocol server. The local protocol server is further configured to retrieve a source port of the translated IP packet. The source port is mapped to the original destination data of the IP packet.</p><p id="p-0056" num="0053">At block <b>306</b>, the translated IP packet comprising the client-side forwarding IP address is communicated to an operating system routing mechanism. The client-side forwarding IP address and port cause the operating system routing mechanism to forward data associated with the translated IP packet to the local protocol server. The operating system routing mechanism is configured to: route the IP packet to the packet interceptor device based on the assigned IP address; and communicate data associated with the translated IP packet to the local protocol sever based on the client-side forwarding IP address and port.</p><p id="p-0057" num="0054">Turning to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a flow diagram is provided that illustrates a method <b>400</b> for a local protocol server on a client device associated with a secure networking engine that provides client-side forwarding in a secure networking system. At block <b>402</b>, a local protocol server listens to a socket associated with a client-side forwarding IP address and port. At block <b>404</b>, data associated with a translated IP packet&#x2014;that is translated from an IP packet based on translating a destination network address of the IP packet to a client-side forwarding IP address and port of the local protocol server&#x2014;is accessed. At <b>406</b>, based on accessing the data associated with the translated IP packet, a network connection is established with a client application. The network connection comprises a route from the client application to the local protocol sever via packet interceptor device and a destination network address translator.</p><p id="p-0058" num="0055">Turning to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a flow diagram is provided that illustrates a method <b>500</b> for a local protocol server on a client device associated with a secure networking engine that provides client-side forwarding in a secure networking system. At block <b>502</b>, data associated with a translated IP packet&#x2014;that is translated from an IP packet based on translating a destination network address of the IP packet to a client-side forwarding IP address and port of the local protocol server&#x2014;is accessed. At block <b>504</b>, an original destination data associated with the IP packet is determined based on retrieving a source port of the IP packet corresponding to the translated IP packet. The source port is mapped to the original destination data of the IP packet. At block <b>506</b>, the data associated with the translated IP packet is communicated to a network resource based on the original destination data.</p><heading id="h-0007" level="2">Technical Improvement and Literal Support for Claims</heading><p id="p-0059" num="0056">Embodiments of the present invention have been described with reference to several inventive features (e.g., operations, systems, engines, and components) associated with a secure networking system. Inventive features described include: operations, interfaces, data structures, and arrangements of computing resources associated with providing the functionality described herein relative with reference to a secure networking engine. Functionality of the embodiments of the present invention have further been described, by way of an implementation and anecdotal examples&#x2014;to demonstrate that the operations for providing the local protocol server as a solution to a specific problem in secure networking technology to improve computing operations in secure networking systems. Overall, these improvements result in less CPU computation, smaller memory requirements, and increased flexibility in secure networking systems when compared to previous conventional secure networking system operations performed for similar functionality.</p><p id="p-0060" num="0057">The improvements of the secure networking system are associated with a computer-implemented method comprising: accessing, at a destination network address translator on a client device, an Internet Protocol (IP) packet from a packet interceptor device, the IP packet is associated with both a client application on the client device and an assigned IP address of the packet interceptor device; translating a destination network address of the IP packet to a client-side forwarding IP address and port of a local protocol server on the client device; and communicating the translated IP packet comprising the client-side forwarding IP address and port to an operating system routing mechanism, the client-side forwarding IP address and port cause the operating system routing mechanism to forward data associated with the translated IP packet to the local protocol server. The IP packet is received at the packet interceptor device based on the assigned IP address associated with the client application that causes the IP packet to be intercepted and communicated to the packet interceptor device.</p><p id="p-0061" num="0058">A plurality of proxy IP address assignment rules associated with host name resolution, hardcoded IP addresses, allocated IP addresses that instruct on assigning assigned IP addresses to client applications attempting to connect to a network resource. Authenticating the client application via an identity provider based on retrieving original destination data associated with the IP packet from a domain name system server. The local protocol server retrieves a source port of the IP packet corresponding to the translated IP packet, wherein the source port is mapped to original destination data of the translated IP packet. The local protocol server supports performing a plurality of network security operations on the data associated with the translated IP packets, wherein the network security operations comprise authorizing, auditing, or securing access to a network resource.</p><heading id="h-0008" level="1">Additional Support for Detailed Description of the Invention</heading><heading id="h-0009" level="2">Example Distributed Computing System Environment</heading><p id="p-0062" num="0059">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example distributed computing environment <b>600</b> in which implementations of the present disclosure may be employed. In particular, <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a high level architecture of an example cloud computing platform <b>610</b> that can host a technical solution environment, or a portion thereof (e.g., a data trustee environment). It should be understood that this and other arrangements described herein are set forth only as examples. For example, as described above, many of the elements described herein may be implemented as discrete or distributed components or in conjunction with other components, and in any suitable combination and location. Other arrangements and elements (e.g., machines, interfaces, functions, orders, and groupings of functions) can be used in addition to or instead of those shown.</p><p id="p-0063" num="0060">Data centers can support distributed computing environment <b>600</b> that includes cloud computing platform <b>610</b>, rack <b>620</b>, and node <b>630</b> (e.g., computing devices, processing units, or blades) in rack <b>620</b>. The technical solution environment can be implemented with cloud computing platform <b>610</b> that runs cloud services across different data centers and geographic regions. Cloud computing platform <b>610</b> can implement fabric controller <b>640</b> component for provisioning and managing resource allocation, deployment, upgrade, and management of cloud services. Typically, cloud computing platform <b>610</b> acts to store data or run service applications in a distributed manner. Cloud computing infrastructure <b>610</b> in a data center can be configured to host and support operation of endpoints of a particular service application. Cloud computing infrastructure <b>610</b> may be a public cloud, a private cloud, or a dedicated cloud.</p><p id="p-0064" num="0061">Node <b>630</b> can be provisioned with host <b>650</b> (e.g., operating system or runtime environment) running a defined software stack on node <b>630</b>. Node <b>630</b> can also be configured to perform specialized functionality (e.g., compute nodes or storage nodes) within cloud computing platform <b>610</b>. Node <b>630</b> is allocated to run one or more portions of a service application of a tenant. A tenant can refer to a customer utilizing resources of cloud computing platform <b>610</b>. Service application components of cloud computing platform <b>610</b> that support a particular tenant can be referred to as a multi-tenant infrastructure or tenancy. The terms service application, application, or service are used interchangeably herein and broadly refer to any software, or portions of software, that run on top of, or access storage and compute device locations within, a datacenter.</p><p id="p-0065" num="0062">When more than one separate service application is being supported by nodes <b>630</b>, nodes <b>630</b> may be partitioned into virtual machines (e.g., virtual machine <b>652</b> and virtual machine <b>654</b>). Physical machines can also concurrently run separate service applications. The virtual machines or physical machines can be configured as individualized computing environments that are supported by resources <b>660</b> (e.g., hardware resources and software resources) in cloud computing platform <b>610</b>. It is contemplated that resources can be configured for specific service applications. Further, each service application may be divided into functional portions such that each functional portion is able to run on a separate virtual machine. In cloud computing platform <b>610</b>, multiple servers may be used to run service applications and perform data storage operations in a cluster. In particular, the servers may perform data operations independently but exposed as a single device referred to as a cluster. Each server in the cluster can be implemented as a node.</p><p id="p-0066" num="0063">Client device <b>680</b> may be linked to a service application in cloud computing platform <b>610</b>. Client device <b>680</b> may be any type of computing device, which may correspond to computing device <b>600</b> described with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, for example, client device <b>680</b> can be configured to issue commands to cloud computing platform <b>610</b>. In embodiments, client device <b>680</b> may communicate with service applications through a virtual Internet Protocol (IP) and load balancer or other means that direct communication requests to designated endpoints in cloud computing platform <b>610</b>. The components of cloud computing platform <b>610</b> may communicate with each other over a network (not shown), which may include, without limitation, one or more local area networks (LANs) and/or wide area networks (WANs).</p><heading id="h-0010" level="2">Example Distributed Computing Environment</heading><p id="p-0067" num="0064">Having briefly described an overview of embodiments of the present invention, an example operating environment in which embodiments of the present invention may be implemented is described below in order to provide a general context for various aspects of the present invention. Referring initially to <figref idref="DRAWINGS">FIG. <b>6</b></figref> in particular, an example operating environment for implementing embodiments of the present invention is shown and designated generally as computing device <b>600</b>. Computing device <b>600</b> is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should computing device <b>700</b> be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.</p><p id="p-0068" num="0065">The invention may be described in the general context of computer code or machine-useable instructions, including computer-executable instructions such as program modules, being executed by a computer or other machine, such as a personal data assistant or other handheld device. Generally, program modules including routines, programs, objects, components, data structures, etc. refer to code that perform particular tasks or implement particular abstract data types. The invention may be practiced in a variety of system configurations, including hand-held devices, consumer electronics, general-purpose computers, more specialty computing devices, etc. The invention may also be practiced in distributed computing environments where tasks are performed by remote-processing devices that are linked through a communications network.</p><p id="p-0069" num="0066">With reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, computing device <b>700</b> includes bus <b>710</b> that directly or indirectly couples the following devices: memory <b>712</b>, one or more processors <b>714</b>, one or more presentation components <b>716</b>, input/output ports <b>718</b>, input/output components <b>720</b>, and illustrative power supply <b>722</b>. Bus <b>710</b> represents what may be one or more buses (such as an address bus, data bus, or combination thereof). The various blocks of <figref idref="DRAWINGS">FIG. <b>7</b></figref> are shown with lines for the sake of conceptual clarity, and other arrangements of the described components and/or component functionality are also contemplated. For example, one may consider a presentation component such as a display device to be an I/O component. Also, processors have memory. We recognize that such is the nature of the art, and reiterate that the diagram of <figref idref="DRAWINGS">FIG. <b>7</b></figref> is merely illustrative of an example computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as &#x201c;workstation,&#x201d; &#x201c;server,&#x201d; &#x201c;laptop,&#x201d; &#x201c;hand-held device,&#x201d; etc., as all are contemplated within the scope of <figref idref="DRAWINGS">FIG. <b>7</b></figref> and reference to &#x201c;computing device.&#x201d;</p><p id="p-0070" num="0067">Computing device <b>700</b> typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by computing device <b>700</b> and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media.</p><p id="p-0071" num="0068">Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computing device <b>700</b>. Computer storage media excludes signals per se.</p><p id="p-0072" num="0069">Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer-readable media.</p><p id="p-0073" num="0070">Memory <b>712</b> includes computer storage media in the form of volatile and/or nonvolatile memory. The memory may be removable, non-removable, or a combination thereof. Exemplary hardware devices include solid-state memory, hard drives, optical-disc drives, etc. Computing device <b>700</b> includes one or more processors that read data from various entities such as memory <b>712</b> or I/O components <b>720</b>. Presentation component(s) <b>716</b> present data indications to a user or other device. Exemplary presentation components include a display device, speaker, printing component, vibrating component, etc.</p><p id="p-0074" num="0071">I/O ports <b>718</b> allow computing device <b>700</b> to be logically coupled to other devices including I/O components <b>720</b>, some of which may be built in. Illustrative components include a microphone, joystick, game pad, satellite dish, scanner, printer, wireless device, etc.</p><heading id="h-0011" level="2">Additional Structural and Functional Features of Embodiments of the Technical Solution</heading><p id="p-0075" num="0072">Having identified various components utilized herein, it should be understood that any number of components and arrangements may be employed to achieve the desired functionality within the scope of the present disclosure. For example, the components in the embodiments depicted in the figures are shown with lines for the sake of conceptual clarity. Other arrangements of these and other components may also be implemented. For example, although some components are depicted as single components, many of the elements described herein may be implemented as discrete or distributed components or in conjunction with other components, and in any suitable combination and location. Some elements may be omitted altogether. Moreover, various functions described herein as being performed by one or more entities may be carried out by hardware, firmware, and/or software, as described below. For instance, various functions may be carried out by a processor executing instructions stored in memory. As such, other arrangements and elements (e.g., machines, interfaces, functions, orders, and groupings of functions) can be used in addition to or instead of those shown.</p><p id="p-0076" num="0073">Embodiments described in the paragraphs below may be combined with one or more of the specifically described alternatives. In particular, an embodiment that is claimed may contain a reference, in the alternative, to more than one other embodiment. The embodiment that is claimed may specify a further limitation of the subject matter claimed.</p><p id="p-0077" num="0074">The subject matter of embodiments of the invention is described with specificity herein to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventors have contemplated that the claimed subject matter might also be embodied in other ways, to include different steps or combinations of steps similar to the ones described in this document, in conjunction with other present or future technologies. Moreover, although the terms &#x201c;step&#x201d; and/or &#x201c;block&#x201d; may be used herein to connote different elements of methods employed, the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.</p><p id="p-0078" num="0075">For purposes of this disclosure, the word &#x201c;including&#x201d; has the same broad meaning as the word &#x201c;comprising,&#x201d; and the word &#x201c;accessing&#x201d; comprises &#x201c;receiving,&#x201d; &#x201c;referencing,&#x201d; or &#x201c;retrieving.&#x201d; Further the word &#x201c;communicating&#x201d; has the same broad meaning as the word &#x201c;receiving,&#x201d; or &#x201c;transmitting&#x201d; facilitated by software or hardware-based buses, receivers, or transmitters using communication media described herein. In addition, words such as &#x201c;a&#x201d; and &#x201c;an,&#x201d; unless otherwise indicated to the contrary, include the plural as well as the singular. Thus, for example, the constraint of &#x201c;a feature&#x201d; is satisfied where one or more features are present. Also, the term &#x201c;or&#x201d; includes the conjunctive, the disjunctive, and both (a or b thus includes either a or b, as well as a and b).</p><p id="p-0079" num="0076">For purposes of a detailed discussion above, embodiments of the present invention are described with reference to a distributed computing environment; however the distributed computing environment depicted herein is merely exemplary. Components can be configured for performing novel aspects of embodiments, where the term &#x201c;configured for&#x201d; can refer to &#x201c;programmed to&#x201d; perform particular tasks or implement particular abstract data types using code. Further, while embodiments of the present invention may generally refer to the technical solution environment and the schematics described herein, it is understood that the techniques described may be extended to other implementation contexts.</p><p id="p-0080" num="0077">Embodiments of the present invention have been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which the present invention pertains without departing from its scope.</p><p id="p-0081" num="0078">From the foregoing, it will be seen that this invention is one well adapted to attain all the ends and objects hereinabove set forth together with other advantages which are obvious and which are inherent to the structure.</p><p id="p-0082" num="0079">It will be understood that certain features and sub-combinations are of utility and may be employed without reference to other features or sub-combinations. This is contemplated by and is within the scope of the claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computerized system comprising:<claim-text>one or more computer processors; and</claim-text><claim-text>computer memory storing computer-useable instructions that, when used by the one or more computer processors, cause the one or more computer processors to perform operations comprising:<claim-text>access, at a destination network address translator on a client device, an Internet Protocol (IP) packet from a packet interceptor device, the IP packet is associated with both a client application on the client device and an assigned IP address of the packet interceptor device;</claim-text><claim-text>translate a destination network address of the IP packet to a client-side forwarding IP address and port of a local protocol server on the client device; and</claim-text><claim-text>communicate the translated IP packet comprising the client-side forwarding IP address and port to an operating system routing mechanism, the client-side forwarding IP address and port cause the operating system routing mechanism to forward data associated with the translated IP packet to the local protocol server.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the local protocol server comprises a socket associated with the client-side forwarding IP address and port, the local protocol server is configured to:<claim-text>listen via the socket;</claim-text><claim-text>access the data associated with the translated IP packet;</claim-text><claim-text>based on accessing the data associated with the translated IP packet, establish a network connection with the client application, the network connection comprising a route from the client application to the local protocol server via the packet interceptor device and a destination network address translator, wherein establishing the network connection comprises the local protocol server and the client application performing a Transmission Control Protocol (TCP) three-way handshake.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein a synchronize/acknowledgement communication from the local protocol server and an acknowledgement communication from the client application are communicated via the packet interceptor device and the destination network address translator during the TCP three-way handshake to establish a network connection between the client application and the local protocol server.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the local protocol server is further configured to retrieve a source port of the translated IP packet, wherein the source port is mapped to original destination data of the IP packet.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the packet interceptor device is configured to receive IP packets that are intercepted based on a plurality of assigned IP addresses that cause intercepting the IP packets and routing the IP packets to the packet interceptor device.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising the operating system routing mechanism configured to:<claim-text>route the IP packet to the packet interceptor device based on the assigned IP address; and</claim-text><claim-text>communicate data associated with the translated IP packet to the local protocol sever based on the client-side forwarding IP address and port.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a plurality of proxy IP address assignment rules associated with host name resolution, hardcoded IP addresses, allocated IP addresses that instruct on assigning assigned IP addresses to client applications attempting to connect to a network resource.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. One or more computer-storage media having computer-executable instructions embodied thereon that, when executed by a computing system having a processor and memory, cause the processor to:<claim-text>access, at a destination network address translator on a client device, an Internet Protocol (IP) packet from a packet interceptor device, the IP packet is associated with both a client application on the client device and an assigned IP address of the packet interceptor device;</claim-text><claim-text>translate a destination network address of the IP packet to a client-side forwarding IP address and port of a local protocol server on the client device; and</claim-text><claim-text>communicate the translated IP packet comprising the client-side forwarding IP address and port to an operating system routing mechanism, the client-side forwarding IP address and port cause the operating system routing mechanism to forward data associated with the translated IP packet to the local protocol server.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the local protocol server comprises a socket associated with the client-side forwarding IP address and port, the local protocol server is configured to:<claim-text>listen via the socket;</claim-text><claim-text>access the data associated with the translated IP packet;</claim-text><claim-text>based on accessing the data associated with the translated IP packet, establish a network connection with the client application, the network connection comprising a route from the client application to the local protocol server via the packet interceptor device and a destination network address translator, wherein establishing the network connection comprises the local protocol server and the client application performing a Transmission Control Protocol (TCP) three-way handshake.</claim-text><claim-text>performing a Transmission Control Protocol (TCP) three-way handshake.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The media of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein a synchronize/acknowledgement communication from the local protocol server and an acknowledgement communication from the client application are communicated via the packet interceptor device and the destination network address translator during the TCP three-way handshake to establish a network connection between the client application and the local protocol server.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the local protocol server is further configured to retrieve a source port of the translated IP packet, wherein the source port is mapped to original destination data of the IP packet.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the packet interceptor device is configured to receive IP packets that are intercepted based on a plurality of assigned IP addresses that cause intercepting the IP packets and routing the IP packets to the packet interceptor device.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising the operating system routing mechanism configured to:<claim-text>route the IP packet to the packet interceptor device based on the assigned IP address; and</claim-text><claim-text>communicate data associated with the translated IP packet to the local protocol sever based on the client-side forwarding IP address and port.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The media of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising a plurality of proxy IP address assignment rules associated with host name resolution, hardcoded IP addresses, allocated IP addresses that instruct on assigning assigned IP addresses to client applications attempting to connect to a network resource.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer-implemented method, the method comprising:<claim-text>accessing, at a destination network address translator on a client device, an Internet Protocol (IP) packet from a packet interceptor device, the IP packet is associated with both a client application on the client device and an assigned IP address of the packet interceptor device;</claim-text><claim-text>translating a destination network address of the IP packet to a client-side forwarding IP address and port of a local protocol server on the client device; and</claim-text><claim-text>communicating the translated IP packet comprising the client-side forwarding IP address and port to an operating system routing mechanism, the client-side forwarding IP address and port cause the operating system routing mechanism to forward data associated with the translated IP packet to the local protocol server.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the IP packet is received at the packet interceptor device based on the assigned IP address associated with the client application that causes the IP packet to be intercepted and communicated to the packet interceptor device.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the method further comprising a plurality of proxy IP address assignment rules associated with host name resolution, hardcoded IP addresses, allocated IP addresses that instruct on assigning assigned IP addresses to client applications attempting to connect to a network resource.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, the method further comprising authenticating the client application via an identity provider based on retrieving original destination data associated with the IP packet from a domain name system server.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the local protocol server retrieves a source port of the IP packet corresponding to the translated IP packet, wherein the source port is mapped to original destination data of the translated IP packet.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the local protocol server supports performing a plurality of network security operations on the data associated with the translated IP packets, wherein the network security operations comprise authorizing, auditing, or securing access to a network resource.</claim-text></claim></claims></us-patent-application>