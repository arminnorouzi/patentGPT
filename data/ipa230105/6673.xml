<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006674A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006674</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17808179</doc-number><date>20220622</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>K</subclass><main-group>19</main-group><subgroup>17728</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>K</subclass><main-group>19</main-group><subgroup>21</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>448</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>K</subclass><main-group>19</main-group><subgroup>17728</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>K</subclass><main-group>19</main-group><subgroup>21</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30134</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20180201</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4498</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">PROGRAMMABLE APPLICATION-SPECIFIC ARRAY FOR PROTECTING CONFIDENTIALITY AND INTEGRITY OF HARDWARE IPS</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63216971</doc-number><date>20210630</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Universty of Florida Research Foundation, Incorporated</orgname><address><city>Gainsville</city><state>FL</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>BHUNIA</last-name><first-name>Swarup</first-name><address><city>Gainesville</city><state>FL</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>DASGUPTA</last-name><first-name>Aritra</first-name><address><city>Gainesville</city><state>FL</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>GAIKWAD</last-name><first-name>Pravin</first-name><address><city>Gainesville</city><state>FL</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>RAHMAN</last-name><first-name>Md Moshiur</first-name><address><city>Gainesville</city><state>FL</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>BHATTACHARYAY</last-name><first-name>Aritra</first-name><address><city>Gainesville</city><state>FL</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method and system are directed to protecting hardware IP, particularly of ASIC designs. Programmability is introduced into an ASIC design to increase the difficulty of formulating ASIC designs as Boolean Satisfiability (SAT) problems. Fine-grain redaction of security-critical information from a design is employed by removing high-entropy logic blocks and subsequently inserting programmable components in place of the redacted portion to hide the actual design intent.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="70.27mm" wi="158.75mm" file="US20230006674A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="223.94mm" wi="137.08mm" orientation="landscape" file="US20230006674A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="200.32mm" wi="167.64mm" orientation="landscape" file="US20230006674A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="177.55mm" wi="159.77mm" orientation="landscape" file="US20230006674A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="210.57mm" wi="168.99mm" orientation="landscape" file="US20230006674A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="228.01mm" wi="130.98mm" orientation="landscape" file="US20230006674A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="215.14mm" wi="93.39mm" orientation="landscape" file="US20230006674A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="218.78mm" wi="142.66mm" file="US20230006674A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="177.72mm" wi="148.51mm" orientation="landscape" file="US20230006674A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="221.49mm" wi="125.65mm" orientation="landscape" file="US20230006674A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="229.62mm" wi="112.01mm" orientation="landscape" file="US20230006674A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="226.06mm" wi="143.26mm" file="US20230006674A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="224.11mm" wi="128.95mm" file="US20230006674A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="192.70mm" wi="125.90mm" orientation="landscape" file="US20230006674A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="218.10mm" wi="90.51mm" orientation="landscape" file="US20230006674A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="201.00mm" wi="160.44mm" file="US20230006674A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="201.93mm" wi="152.40mm" file="US20230006674A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="227.08mm" wi="159.94mm" orientation="landscape" file="US20230006674A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="199.22mm" wi="159.60mm" orientation="landscape" file="US20230006674A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="190.33mm" wi="158.67mm" orientation="landscape" file="US20230006674A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="164.42mm" wi="155.53mm" orientation="landscape" file="US20230006674A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="172.13mm" wi="160.70mm" orientation="landscape" file="US20230006674A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="208.79mm" wi="158.92mm" orientation="landscape" file="US20230006674A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="210.40mm" wi="146.64mm" orientation="landscape" file="US20230006674A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="199.47mm" wi="134.45mm" orientation="landscape" file="US20230006674A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="213.19mm" wi="158.16mm" orientation="landscape" file="US20230006674A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="156.72mm" wi="115.06mm" orientation="landscape" file="US20230006674A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="188.98mm" wi="157.48mm" orientation="landscape" file="US20230006674A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="219.79mm" wi="130.22mm" orientation="landscape" file="US20230006674A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="230.55mm" wi="159.43mm" orientation="landscape" file="US20230006674A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="221.32mm" wi="100.58mm" orientation="landscape" file="US20230006674A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="221.74mm" wi="146.13mm" orientation="landscape" file="US20230006674A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="178.39mm" wi="169.93mm" orientation="landscape" file="US20230006674A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="224.87mm" wi="113.28mm" orientation="landscape" file="US20230006674A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="213.70mm" wi="104.99mm" orientation="landscape" file="US20230006674A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="185.42mm" wi="126.58mm" orientation="landscape" file="US20230006674A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application claims the priority of U.S. Provisional Application No. 63/216,971, entitled &#x201c;PROGRAMMABLE APPLICATION-SPECIFIC ARRAY FOR PROTECTING CONFIDENTIALITY AND INTEGRITY OF HARDWARE IPS,&#x201d; filed on Jun. 30, 2021, the disclosure of which is hereby incorporated by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?federal-research-statement description="Federal Research Statement" end="lead"?><heading id="h-0002" level="1">GOVERNMENT SUPPORT</heading><p id="p-0003" num="0002">This Invention was made with Government support under Agreement No. N00164-19-9-0001, awarded by NSWC Crane Division. The Government has certain rights in the Invention.</p><?federal-research-statement description="Federal Research Statement" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0003" level="1">TECHNICAL FIELD</heading><p id="p-0004" num="0003">The present application relates to integrated circuits, and more particularly to transforming an integrated circuit to thwart functional and structural attacks on its confidentiality or integrity.</p><heading id="h-0004" level="1">BACKGROUND</heading><p id="p-0005" num="0004">The ever-rising demand for integrated circuits (IC) and the globalization of the manufacturing supply chain have led to the outsourcing of critical steps of the semiconductor design process to untrusted facilities abroad. Hardware intellectual property (IP) blocks have been subjected to various forms of confidentiality and integrity attacks in recent years. As a result, it has become vital for designers to assume a Zero Trust model for security, where there are no trusted entities involved anywhere during the life cycle of hardware IP. System on chip (SoC) designers are now considering a Zero Trust model for security, where an IP can be attacked at any stage of the manufacturing process.</p><p id="p-0006" num="0005">In a Zero Trust model, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, it is imperative to protect the IPs against reverse engineering, piracy, cloning, counterfeiting, over-production as well as malicious alternations, such as an injection of malicious hardware like hardware Trojans to steal sensitive information or corrupt the functionality. To combat these issues, logic locking and hardware obfuscation techniques have appeared promising to protect IP against these attacks and has been an active research topic over the past decade. However, in parallel, the number of functional and structural attacks on obfuscation have been discovered by the research community to break the protection provided by the existing obfuscation schemes. Field-programmable gate arrays (FPGAs) may also provide a high level of security against these attacks, however, recent studies have shown that FPGAs are vulnerable to a variety of side-channel and reverse engineering attacks. Furthermore, FPGAs often incur significant overhead in power and performance compared to its application-specific integrated circuit (ASIC) counterpart. Existing countermeasures also lack the ability to defend against state-of-the-art machine learning based confidentiality attacks where the adversaries take advantage of apriori knowledge of the designs as well as malicious modifications to the design hardware Trojans, which can lead to information leaking or tampering and damage to the integrity of the design.</p><p id="p-0007" num="0006">There is a need for a robust architecture for programmable replacement of logic blocks to thwart knowledge-based attacks.</p><heading id="h-0005" level="1">BRIEF SUMMARY</heading><p id="p-0008" num="0007">Various embodiments described herein relate to methods, apparatuses, and systems for protecting hardware IP, particularly of ASIC designs. The disclosed embodiments may employ fine-grain redaction of security-critical information from a design by removing high-entropy logic blocks and subsequently inserting programmable components in place of the redacted portion. In some embodiments to hide the actual design intent. Such an approach may be effective in providing FPGA-like IP security, while incurring a fraction of cost compared to FPGAs in terms of area/performance/power overhead.</p><p id="p-0009" num="0008">According to one embodiment, the method comprises receiving a file including data comprising a hardware netlist, converting the data into a hypergraph, the hypergraph including nodes representative of logic gates and edges representative of connections of the logic gates, replacing given ones of the nodes in the hypergraph with configurable lookup tables (LUTs), inserting one or more first programmable components into the hypergraph based on the configurable LUTs, and generating a redacted design output file based on the hypergraph including the configurable LUTs and the one or more first programmable components.</p><p id="p-0010" num="0009">In some embodiments, the data is representative of hardware intellectual property comprising application-specific integrated circuit components. In some embodiments, the hypergraph comprises a directed acyclic graph consisting of AND, OR, and inverter gates. In some embodiments, security critical nodes are identified based on cost of removal. In some embodiments, for each node of the hypergraph, a cost function is calculated using stochastic properties including Shannon entropy E, fan-in cone FI, and fan-out cone FO. In some embodiments, the method further comprises determining, for the security critical nodes, a maximum fan-out free cone (MFFC), obtaining local optimal cuts by analyzing the MFFC based on area and delay, and selecting globally optimal cuts from the local optimal cuts based on normalized area and delay cost of the local optimal cuts based on a pre-defined security target. In some embodiments, the globally optimal cuts are mapped to the configurable LUTs according to size, and the configurable LUTs are chained based on order of a proximity metric calculated from relative distance of the logic gates corresponding to the replaced given ones of the nodes.</p><p id="p-0011" num="0010">In some embodiments, inserting the one or more first programmable components into the hypergraph further comprises inserting a programmable interconnect at an output of a given one of the configurable LUTs. In some embodiments, one or more second programmable components are connected to inputs of the programmable interconnect at a same logic depth as the given configurable LUT. In some embodiments, the one or more second programmable components comprise at least one of programmable flip-flops (FFs) and programmable clock gating. In some embodiments, the programmable interconnect comprises at least one of XOR/XNOR gates and multiplexers (MUXes). In some embodiments, the method further comprises identifying logic cones from the hypergraph that store critical information, and mapping the logic cones a M&#xd7;N configurable LUT using Shannon Decomposition Theorem or Boole's Expansion Theorem.</p><p id="p-0012" num="0011">In some embodiments, a configuration bitstream is generated for the configurable LUTs by simulating logic corresponding to the replaced nodes. In some embodiments, the configurable LUTs are programmed using the configuration bitstream. In some embodiments, the configuration bitstreams are stored in one or more shift registers of varying sizes. In some embodiments, each of the one or more shift registers includes a plurality of latches each of which includes an enable pin. In some embodiments, the configuration bitstream may be loaded to a daisy-chained shift register comprising a latch-based configuration including a plurality of latches and a finite-state machine-based controller, where the finite-state machine-based controller generates enable signals for the plurality of latches. In some embodiments, bits of the configuration bitstream may be shared between MUXes within a given configurable LUT or in between the configurable LUTs.</p><p id="p-0013" num="0012">In some embodiments, nodes in the hypergraph corresponding to flip-flops in a shift register are replaced with scan-based FFs. In some embodiments, the scan-based FFs are controllable via a scan enable signal to select between configuration bit or design FF functionality. In some embodiments, the scan-based FFs are connected to select inputs of MUXes of a MUX array, and an output of a given one of the configurable LUTs is coupled to a field-programmable gate array-like block.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0014" num="0013">Embodiments incorporating teachings of the present disclosure are shown and described with respect to the figures presented herein.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a number of security issues spanning the life cycle of hardware intellectual property.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an exemplary overview of an architecture that can be used to practice embodiments of the present disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example hardware IP redaction computing entity in accordance with some embodiments discussed herein.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example client computing entity in accordance with some embodiments discussed herein.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a flowchart of a method for redacting hardware IP in accordance with some embodiments discussed herein.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> illustrates a schematic block diagram of an exemplary circuit.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> illustrates a hypergraph associated with the circuit of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a 3&#xd7;1 lookup table (LUT) used to replace a logic function block, in accordance with one embodiment of the present disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates exemplary programmable components used to replace one or more logic function blocks of a design, in accordance with some embodiments discussed herein.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates mapping of a combinational logic to a 3&#xd7;2 LUT using Shannon decomposition in accordance with some embodiments discussed herein.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>10</b>A</figref> illustrates a hypergraph associated with a design.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>10</b>B</figref> illustrates a hypergraph associated with a transformed design of <figref idref="DRAWINGS">FIG. <b>10</b>A</figref> in accordance with some embodiments discussed herein.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a bitstream configuration architecture in accordance with some embodiments discussed herein.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a visualization of hardware design redaction in accordance with some embodiments discussed herein.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>13</b>A</figref> illustrates an exemplary original design.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>13</b>B</figref> illustrates an exemplary fully redacted design of <figref idref="DRAWINGS">FIG. <b>13</b>A</figref> redaction in accordance with some embodiments discussed herein.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates an exemplary redacted design with scan FFs redaction in accordance with some embodiments discussed herein.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>15</b>A</figref> illustrates an exemplary design including a two-input LUT.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>15</b>B</figref> illustrates a programmable FF implementation of <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> in accordance with some embodiments discussed herein</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIGS. <b>16</b>A and <b>16</b>B</figref> illustrate an implementation of bitstream compaction in accordance with some embodiments discussed herein.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIGS. <b>17</b>A and <b>17</b>B</figref> illustrate an implementation of LUT compaction in accordance with some embodiments discussed herein.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>18</b></figref> illustrates latch-based configuration architecture in accordance with some embodiments discussed herein.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates a shift register implementation of a latch-based configuration architecture in accordance with some embodiments discussed herein.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates a timing diagram of a latch-based configuration architecture in accordance with some embodiments discussed herein.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>21</b></figref> illustrates sharing of a constant between different LUTs in accordance with some embodiments discussed herein.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>22</b></figref> illustrates the reduction in area due to constant sharing between different LUTs in accordance with some embodiments discussed herein.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>23</b></figref> illustrates a LUT before and after sharing of a multiplexer in accordance with some embodiments discussed herein.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates a LUT before and after morphing in accordance with some embodiments discussed herein.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>25</b></figref> illustrates a configuration bitstream being applied using the shift register mode of constant arrays in accordance with some embodiments discussed herein.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>26</b></figref> illustrates a configuration bitstream being applied using a 2D SRAM-mode of constant arrays in accordance with some embodiments discussed herein.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>27</b></figref> illustrates a constant transformation array used to generate a device-specific bitstream in accordance with some embodiments discussed herein.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>28</b></figref> illustrates a design transformation in accordance with some embodiments discussed herein.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>29</b></figref> illustrates a transformation involving the fanout of a multitude of flip-flops implementing dummy finite-state machines (FSMs) in accordance with some embodiments discussed herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION</heading><p id="p-0048" num="0047">Various embodiments of the present disclosure now will be described more fully hereinafter with reference to the accompanying drawings, in which some, but not all embodiments of the disclosure are shown. Indeed, the disclosure may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will satisfy applicable legal requirements. The term &#x201c;or&#x201d; is used herein in both the alternative and conjunctive sense, unless otherwise indicated. The terms &#x201c;illustrative,&#x201d; &#x201c;example,&#x201d; and &#x201c;exemplary&#x201d; are used to be examples with no indication of quality level. Like numbers refer to like elements throughout.</p><heading id="h-0008" level="1">General Overview and Exemplary Technical Improvements</heading><p id="p-0049" num="0048">The present application discloses a programmable platform for safeguarding against different attacks on hardware IP confidentiality and integrity, particular in ASIC design. Hardware obfuscation techniques, both combinational and sequential can be used as countermeasures in ASIC design flow against certain types of attacks but are vulnerable against side-channel and reverse engineering attacks. Obfuscation techniques may also incur very high power, performance and area (PPA) overheads, which may lead to a comprise of security in real-life scenarios. Camouflaging the true design functionality can prevent reverse engineering attacks but is found to be vulnerable against both removal and Boolean Satisfiability (SAT)-based attacks.</p><p id="p-0050" num="0049">Another technique may comprise a design fully configurable by using FPGAs. The programmability of FPGAs may allow designs to be suitable for security critical applications, but in recent years, FPGAs have been found to be vulnerable against bitstream decryption and reverse engineering attacks. Embedded FPGA fabrics can introduce programmability in ASIC, similar to FPGAs, but such countermeasures perform global redaction of the entire design logic, without any fine-grain control over the redaction process. This may not be suitable for large SoC designs where logic redaction is only desired for certain logic blocks that are critical in terms of security.</p><p id="p-0051" num="0050">Multiple programmable replacement techniques have been proposed. Such techniques primarily focus on making the transformed design SAT-hard, i.e., by making it difficult for attackers to extract the unlocking key/bitstream. For example, cross-lock is an interconnect locking technique where the routing in a netlist is transformed using a one-time programmable interconnect mesh. This substantially increases the run time of each iteration of a SAT attack, making the transformed netlist SAT-hard. Programmable interconnects in cross-lock may be implemented using cross-bar primitives. The objective is to insert minimal programmable structures contributing to zero or negligible substrate area overhead. However, as high-density cone-based selection strategies, such as k-cut and wire-cut, are used to decrease the possibility of using removal attack, cross-lock has a restriction in selecting the wires to insert the crossbar. However, the limited programmability of the transformed netlist makes it vulnerable to machine-learning and other knowledge-based structural attacks.</p><p id="p-0052" num="0051">Another programmable replacement technique includes full-lock. For example, full-lock uses a set of small-sized fully programmable logic and routing (PLR) block networks to transform a design. The PLRs are SAT-hard instances which perform both interconnect reprogramming and replacement of logic surrounding those interconnects. Each PLR is fully programmable and consists of: (1) a key-configurable logarithmic-based network (CLN) for obfuscating the interconnects and (2) multiple Spin Transfer Torque (STT) based lookup tables (LUTs) of small sizes for replacing logic gates connected to these inter-connects. The threat model for full-lock considers oracle-based, removal, and algebraic attacks, but this protection comes at a relatively high hardware cost. Moreover, the transformed designs may be vulnerable to clustering-based structural attacks that perform graph or network matching attacks, as the PLRs inserted into the design tend to be clustered together in one region of the circuit.</p><p id="p-0053" num="0052">Yet another programmable replacement technique includes embedded FPGA (eFPGA). Embedded FPGA may comprise a synthesizable &#x2018;soft&#x2019; FPGA fabric for ASIC that is developed using a top-down design methodology. A unit tile in the eFPGA fabric, commonly referred to as configurable logic block (CLB), may be comprised of multiple 6-input LUTs and flip-flops (FFs), similar to CLBs in commercial FPGAs. A FPGA fabric generator may be used to implement both homogeneous fabrics (with only CLBs) and heterogeneous (including CLB, block random access memory (BRAM), digital signal processor (DSP) and other custom blocks) fabrics. An eFPGA may be fully programmable like commercial FPGAs, and have a similar threat model to FPGAs. However, eFPGAs are not optimized for application-specific designs, therefore, may incur a relatively high overhead cost.</p><p id="p-0054" num="0053">According to various embodiments of the present disclosure, methods and systems are provided for removing IP and replacing Boolean logic functions in ASIC designs. In particular, some embodiments include processes and computing systems directed to employing fine-grain redaction of logic and inserting FPGA-like programmability into ASIC design. As an example, Boolean functions or combinational logic of an ASIC design may be redacted by removing and replacing them with programmable components that can be configured using a functionally equivalent bitstream to the replaced functions or logic. In some embodiments, a logic redaction heuristic may be executed on the ASIC design. The logic redaction heuristic may comprise a greedy logic replacement heuristic to optimally map Boolean functions in an ASIC design to custom designed configurable LUTs at minimal power, performance, and area (e.g., power-performance area) overhead.</p><heading id="h-0009" level="1">Exemplary Technical Implementation of Various Embodiments</heading><p id="p-0055" num="0054">Embodiments of the present disclosure may be implemented in various ways, including as computer program products that comprise articles of manufacture. Such computer program products may include one or more software components including, for example, software objects, methods, data structures, and/or the like. A software component may be coded in any of a variety of programming languages. An illustrative programming language may be a lower-level programming language such as an assembly language associated with a particular hardware architecture and/or operating system platform. A software component comprising assembly language instructions may require conversion into executable machine code by an assembler prior to execution by the hardware architecture and/or platform. Another example programming language may be a higher-level programming language that may be portable across multiple architectures. A software component comprising higher-level programming language instructions may require conversion to an intermediate representation by an interpreter or a compiler prior to execution.</p><p id="p-0056" num="0055">Other examples of programming languages include, but are not limited to, a macro language, a shell or command language, a job control language, a script language, a database query or search language, and/or a report writing language. In one or more example embodiments, a software component comprising instructions in one of the foregoing examples of programming languages may be executed directly by an operating system or other software component without having to be first transformed into another form. A software component may be stored as a file or other data storage construct. Software components of a similar type or functionally related may be stored together such as, for example, in a particular directory, folder, or library. Software components may be static (e.g., pre-established or fixed) or dynamic (e.g., created or modified at the time of execution).</p><p id="p-0057" num="0056">A computer program product may include a non-transitory computer-readable storage medium storing applications, programs, program modules, scripts, source code, program code, object code, byte code, compiled code, interpreted code, machine code, executable instructions, and/or the like (also referred to herein as executable instructions, instructions for execution, computer program products, program code, and/or similar terms used herein interchangeably). Such non-transitory computer-readable storage media include all computer-readable media (including volatile and non-volatile media).</p><p id="p-0058" num="0057">In one embodiment, a non-volatile computer-readable storage medium may include a floppy disk, flexible disk, hard disk, solid-state storage (SSS) (e.g., a solid state drive (SSD), solid state card (SSC), solid state module (SSM)), enterprise flash drive, magnetic tape, or any other non-transitory magnetic medium, and/or the like. A non-volatile computer-readable storage medium may also include a punch card, paper tape, optical mark sheet (or any other physical medium with patterns of holes or other optically recognizable indicia), compact disc read only memory (CD-ROM), compact disc-rewritable (CD-RW), digital versatile disc (DVD), Blu-ray disc (BD), any other non-transitory optical medium, and/or the like. Such a non-volatile computer-readable storage medium may also include read-only memory (ROM), programmable read-only memory (PROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), flash memory (e.g., Serial, NAND, NOR, and/or the like), multimedia memory cards (MMC), secure digital (SD) memory cards, SmartMedia cards, CompactFlash (CF) cards, Memory Sticks, and/or the like. Further, a non-volatile computer-readable storage medium may also include conductive-bridging random access memory (CBRAM), phase-change random access memory (PRAM), ferroelectric random-access memory (FeRAM), non-volatile random-access memory (NVRAM), magnetoresistive random-access memory (MRAM), resistive random-access memory (RRAM), Silicon-Oxide-Nitride-Oxide-Silicon memory (SONOS), floating junction gate random access memory (FJG RAM), Millipede memory, racetrack memory, and/or the like.</p><p id="p-0059" num="0058">In one embodiment, a volatile computer-readable storage medium may include random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), fast page mode dynamic random access memory (FPM DRAM), extended data-out dynamic random access memory (EDO DRAM), synchronous dynamic random access memory (SDRAM), double data rate synchronous dynamic random access memory (DDR SDRAM), double data rate type two synchronous dynamic random access memory (DDR2 SDRAM), double data rate type three synchronous dynamic random access memory (DDR3 SDRAM), Rambus dynamic random access memory (RDRAM), Twin Transistor RAM (TTRAM), Thyristor RAM (T-RAM), Zero-capacitor (Z-RAM), Rambus in-line memory module (RIMM), dual in-line memory module (DIMM), single in-line memory module (SIMM), video random access memory (VRAM), cache memory (including various levels), flash memory, register memory, and/or the like. It will be appreciated that where embodiments are described to use a computer-readable storage medium, other types of computer-readable storage media may be substituted for or used in addition to the computer-readable storage media described above.</p><p id="p-0060" num="0059">As should be appreciated, various embodiments of the present disclosure may also be implemented as methods, apparatus, systems, computing devices, computing entities, and/or the like. As such, embodiments of the present disclosure may take the form of a data structure, apparatus, system, computing device, computing entity, and/or the like executing instructions stored on a computer-readable storage medium to perform certain steps or operations. Thus, embodiments of the present disclosure may also take the form of an entirely hardware embodiment, an entirely computer program product embodiment, and/or an embodiment that comprises a combination of computer program products and hardware performing certain steps or operations.</p><p id="p-0061" num="0060">Embodiments of the present disclosure are described with reference to example operations, steps, processes, blocks, and/or the like. Thus, it should be understood that each operation, step, process, block, and/or the like may be implemented in the form of a computer program product, an entirely hardware embodiment, a combination of hardware and computer program products, and/or apparatus, systems, computing devices, computing entities, and/or the like carrying out instructions, operations, steps, and similar words used interchangeably (e.g., the executable instructions, instructions for execution, program code, and/or the like) on a computer-readable storage medium for execution. For example, retrieval, loading, and execution of code may be performed sequentially such that one instruction is retrieved, loaded, and executed at a time. In some exemplary embodiments, retrieval, loading, and/or execution may be performed in parallel such that multiple instructions are retrieved, loaded, and/or executed together. Thus, such embodiments can produce specifically configured machines performing the steps or operations specified in the block diagrams and flowchart illustrations. Accordingly, the block diagrams and flowchart illustrations support various combinations of embodiments for performing the specified instructions, operations, or steps.</p><heading id="h-0010" level="2">Computer Program Products, Methods, and Computing Entities</heading><p id="p-0062" num="0061">Embodiments of the present invention may be implemented in various ways, including as computer program products that comprise articles of manufacture. Such computer program products may include one or more software components including, for example, software objects, methods, data structures, or the like. A software component may be coded in any of a variety of programming languages. An illustrative programming language may be a lower-level programming language such as an assembly language associated with a particular hardware architecture and/or operating system platform. A software component comprising assembly language instructions may require conversion into executable machine code by an assembler prior to execution by the hardware architecture and/or platform. Another example programming language may be a higher-level programming language that may be portable across multiple architectures. A software component comprising higher-level programming language instructions may require conversion to an intermediate representation by an interpreter or a compiler prior to execution.</p><p id="p-0063" num="0062">Other examples of programming languages include, but are not limited to, a macro language, a shell or command language, a job control language, a script language, a database query or search language, and/or a report writing language. In one or more example embodiments, a software component comprising instructions in one of the foregoing examples of programming languages may be executed directly by an operating system or other software component without having to be first transformed into another form. A software component may be stored as a file or other data storage construct. Software components of a similar type or functionally related may be stored together such as, for example, in a particular directory, folder, or library. Software components may be static (e.g., pre-established or fixed) or dynamic (e.g., created or modified at the time of execution).</p><p id="p-0064" num="0063">A computer program product may include a non-transitory computer-readable storage medium storing applications, programs, program modules, scripts, source code, program code, object code, byte code, compiled code, interpreted code, machine code, executable instructions, and/or the like (also referred to herein as executable instructions, instructions for execution, computer program products, program code, and/or similar terms used herein interchangeably). Such non-transitory computer-readable storage media include all computer-readable media (including volatile and non-volatile media).</p><p id="p-0065" num="0064">In one embodiment, a non-volatile computer-readable storage medium may include a floppy disk, flexible disk, hard disk, solid-state storage (SSS) (e.g., a solid state drive (SSD), solid state card (SSC), solid state module (SSM), enterprise flash drive, magnetic tape, or any other non-transitory magnetic medium, and/or the like. A non-volatile computer-readable storage medium may also include a punch card, paper tape, optical mark sheet (or any other physical medium with patterns of holes or other optically recognizable indicia), compact disc read only memory (CD-ROM), compact disc-rewritable (CD-RW), digital versatile disc (DVD), Blu-ray disc (BD), any other non-transitory optical medium, and/or the like. Such a non-volatile computer-readable storage medium may also include read-only memory (ROM), programmable read-only memory (PROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), flash memory (e.g., Serial, NAND, NOR, and/or the like), multimedia memory cards (MMC), secure digital (SD) memory cards, SmartMedia cards, CompactFlash (CF) cards, Memory Sticks, and/or the like. Further, a non-volatile computer-readable storage medium may also include conductive-bridging random access memory (CBRAM), phase-change random access memory (PRAM), ferroelectric random-access memory (FeRAM), non-volatile random-access memory (NVRAM), magnetoresistive random-access memory (MRAM), resistive random-access memory (RRAM), Silicon-Oxide-Nitride-Oxide-Silicon memory (SONOS), floating junction gate random access memory (FJG RAM), Millipede memory, racetrack memory, and/or the like.</p><p id="p-0066" num="0065">In one embodiment, a volatile computer-readable storage medium may include random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), fast page mode dynamic random access memory (FPM DRAM), extended data-out dynamic random access memory (EDO DRAM), synchronous dynamic random access memory (SDRAM), double data rate synchronous dynamic random access memory (DDR SDRAM), double data rate type two synchronous dynamic random access memory (DDR2 SDRAM), double data rate type three synchronous dynamic random access memory (DDR3 SDRAM), Rambus dynamic random access memory (RDRAM), Twin Transistor RAM (TTRAM), Thyristor RAM (T-RAM), Zero-capacitor (Z-RAM), Rambus in-line memory module (RIMM), dual in-line memory module (DIMM), single in-line memory module (SIMM), video random access memory (VRAM), cache memory (including various levels), flash memory, register memory, and/or the like. It will be appreciated that where embodiments are described to use a computer-readable storage medium, other types of computer-readable storage media may be substituted for or used in addition to the computer-readable storage media described above.</p><p id="p-0067" num="0066">As should be appreciated, various embodiments of the present invention may also be implemented as methods, apparatus, systems, computing devices, computing entities, and/or the like. As such, embodiments of the present invention may take the form of an apparatus, system, computing device, computing entity, and/or the like executing instructions stored on a computer-readable storage medium to perform certain steps or operations. Thus, embodiments of the present invention may also take the form of an entirely hardware embodiment, an entirely computer program product embodiment, and/or an embodiment that comprises a combination of computer program products and hardware performing certain steps or operations.</p><p id="p-0068" num="0067">Embodiments of the present invention are described below with reference to block diagrams and flowchart illustrations. Thus, it should be understood that each block of the block diagrams and flowchart illustrations may be implemented in the form of a computer program product, an entirely hardware embodiment, a combination of hardware and computer program products, and/or apparatus, systems, computing devices, computing entities, and/or the like carrying out instructions, operations, steps, and similar words used interchangeably (e.g., the executable instructions, instructions for execution, program code, and/or the like) on a computer-readable storage medium for execution. For example, retrieval, loading, and execution of code may be performed sequentially such that one instruction is retrieved, loaded, and executed at a time. In some exemplary embodiments, retrieval, loading, and/or execution may be performed in parallel such that multiple instructions are retrieved, loaded, and/or executed together. Thus, such embodiments can produce specifically-configured machines performing the steps or operations specified in the block diagrams and flowchart illustrations. Accordingly, the block diagrams and flowchart illustrations support various combinations of embodiments for performing the specified instructions, operations, or steps.</p><heading id="h-0011" level="2">Exemplary System Architecture</heading><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of an example architecture <b>100</b> for securing hardware IP. The architecture <b>100</b> includes a hardware IP redaction system <b>101</b> configured to receive hardware redaction requests from client computing entities <b>102</b>, process the hardware redaction requests to generate hardware redactions, and provide the generated hardware redactions to the client computing entities <b>102</b>.</p><p id="p-0070" num="0069">For example, in accordance with various embodiments of the present invention, security-critical information may be redacted from a hardware design by removing high-entropy logic blocks and subsequently inserting programmable components in place of the redacted portion. Additionally, employing programmable interconnects provides structural deformation and hides the actual design intent. Such an approach is effective in providing FPGA-like IP security, while incurring a fraction of cost compared to FPGAs in terms of area/performance/power overhead. This technique will lead to more effective protection of hardware IP. In doing so, the techniques described herein improving efficiency and speed of securing hardware IP, thus reducing the number of computational operations needed. Accordingly, the techniques described herein improve at least one of the computational efficiency, storage-wise efficiency, and speed of performing hardware redaction.</p><p id="p-0071" num="0070">In some embodiments, hardware IP redaction system <b>101</b> may communicate with at least one of the client computing entities <b>102</b> using one or more communication networks. Examples of communication networks include any wired or wireless communication network including, for example, a wired or wireless local area network (LAN), personal area network (PAN), metropolitan area network (MAN), wide area network (WAN), or the like, as well as any hardware, software and/or firmware required to implement it (such as, e.g., network routers, and/or the like).</p><p id="p-0072" num="0071">The hardware IP redaction system <b>101</b> may include a hardware IP redaction computing entity <b>106</b> and a storage subsystem <b>108</b>. The hardware IP redaction computing entity <b>106</b> may be configured to receive hardware redaction requests from one or more client computing entities <b>102</b>, process the hardware redaction requests to generate hardware redactions corresponding to the hardware redaction requests, and provide the generated hardware redactions to the client computing entities <b>102</b>.</p><p id="p-0073" num="0072">The storage subsystem <b>108</b> may be configured to store input data used by the hardware IP redaction computing entity <b>106</b> to perform hardware IP redaction. The storage subsystem <b>108</b> may include one or more storage units, such as multiple distributed storage units that are connected through a computer network. Each storage unit in the storage subsystem <b>108</b> may store at least one of one or more data assets and/or one or more data about the computed properties of one or more data assets. Moreover, each storage unit in the storage subsystem <b>108</b> may include one or more non-volatile storage or memory media including, but not limited to, hard disks, ROM, PROM, EPROM, EEPROM, flash memory, MMCs, SD memory cards, Memory Sticks, CBRAM, PRAM, FeRAM, NVRAM, MRAM, RRAM, SONOS, FJG RAM, Millipede memory, racetrack memory, and/or the like.</p><heading id="h-0012" level="2">Exemplary Hardware IP Redaction Computing Entity</heading><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>3</b></figref> provides a schematic of a hardware IP redaction computing entity <b>106</b> according to one embodiment of the present invention. In general, the terms computing entity, computer, entity, device, system, and/or similar words used herein interchangeably may refer to, for example, one or more computers, computing entities, desktops, mobile phones, tablets, phablets, notebooks, laptops, distributed systems, kiosks, input terminals, servers or server networks, blades, gateways, switches, processing devices, processing entities, set-top boxes, relays, routers, network access points, base stations, the like, and/or any combination of devices or entities adapted to perform the functions, operations, and/or processes described herein. Such functions, operations, and/or processes may include, for example, transmitting, receiving, operating on, processing, displaying, storing, determining, creating/generating, monitoring, evaluating, comparing, and/or similar terms used herein interchangeably. In one embodiment, these functions, operations, and/or processes can be performed on data, content, information, and/or similar terms used herein interchangeably.</p><p id="p-0075" num="0074">As indicated, in one embodiment, the hardware IP redaction computing entity <b>106</b> may also include one or more communications interfaces <b>220</b> for communicating with various computing entities, such as by communicating data, content, information, and/or similar terms used herein interchangeably that can be transmitted, received, operated on, processed, displayed, stored, and/or the like.</p><p id="p-0076" num="0075">As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, in one embodiment, the hardware IP redaction computing entity <b>106</b> may include, or be in communication with, one or more processing elements <b>205</b> (also referred to as processors, processing circuitry, and/or similar terms used herein interchangeably) that communicate with other elements within the hardware IP redaction computing entity <b>106</b> via a bus, for example. As will be understood, the processing element <b>205</b> may be embodied in a number of different ways.</p><p id="p-0077" num="0076">For example, the processing element <b>205</b> may be embodied as one or more complex programmable logic devices (CPLDs), microprocessors, multi-core processors, coprocessing entities, application-specific instruction-set processors (ASIPs), microcontrollers, and/or controllers. Further, the processing element <b>205</b> may be embodied as one or more other processing devices or circuitry. The term circuitry may refer to an entirely hardware embodiment or a combination of hardware and computer program products. Thus, the processing element <b>205</b> may be embodied as integrated circuits, application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), programmable logic arrays (PLAs), hardware accelerators, other circuitry, and/or the like.</p><p id="p-0078" num="0077">As will therefore be understood, the processing element <b>205</b> may be configured for a particular use or configured to execute instructions stored in volatile or non-volatile media or otherwise accessible to the processing element <b>205</b>. As such, whether configured by hardware or computer program products, or by a combination thereof, the processing element <b>205</b> may be capable of performing steps or operations according to embodiments of the present invention when configured accordingly.</p><p id="p-0079" num="0078">In one embodiment, the hardware IP redaction computing entity <b>106</b> may further include, or be in communication with, non-volatile media (also referred to as non-volatile storage, memory, memory storage, memory circuitry and/or similar terms used herein interchangeably). In one embodiment, the non-volatile storage or memory may include one or more non-volatile storage or memory media <b>210</b>, including, but not limited to, hard disks, ROM, PROM, EPROM, EEPROM, flash memory, MMCs, SD memory cards, Memory Sticks, CBRAM, PRAM, FeRAM, NVRAM, MRAM, RRAM, SONOS, FJG RAM, Millipede memory, racetrack memory, and/or the like.</p><p id="p-0080" num="0079">As will be recognized, the non-volatile storage or memory media may store databases, database instances, database management systems, data, applications, programs, program modules, scripts, source code, object code, byte code, compiled code, interpreted code, machine code, executable instructions, and/or the like. The term database, database instance, database management system, and/or similar terms used herein interchangeably may refer to a collection of records or data that is stored in a computer-readable storage medium using one or more database models, such as a hierarchical database model, network model, relational model, entity-relationship model, object model, document model, semantic model, graph model, and/or the like.</p><p id="p-0081" num="0080">In one embodiment, the hardware IP redaction computing entity <b>106</b> may further include, or be in communication with, volatile media (also referred to as volatile storage, memory, memory storage, memory circuitry and/or similar terms used herein interchangeably). In one embodiment, the volatile storage or memory may also include one or more volatile storage or memory media <b>215</b>, including, but not limited to, RAM, DRAM, SRAM, FPM DRAM, EDO DRAM, SDRAM, DDR SDRAM, DDR2 SDRAM, DDR3 SDRAM, RDRAM, TTRAM, T-RAM, Z-RAM, RIMM, DIMM, SIMM, VRAM, cache memory, register memory, and/or the like.</p><p id="p-0082" num="0081">As will be recognized, the volatile storage or memory media may be used to store at least portions of the databases, database instances, database management systems, data, applications, programs, program modules, scripts, source code, object code, byte code, compiled code, interpreted code, machine code, executable instructions, and/or the like being executed by, for example, the processing element <b>205</b>. Thus, the databases, database instances, database management systems, data, applications, programs, program modules, scripts, source code, object code, byte code, compiled code, interpreted code, machine code, executable instructions, and/or the like may be used to control certain aspects of the operation of the hardware IP redaction computing entity <b>106</b> with the assistance of the processing element <b>205</b> and operating system.</p><p id="p-0083" num="0082">As indicated, in one embodiment, the hardware IP redaction computing entity <b>106</b> may also include one or more communications interfaces <b>220</b> for communicating with various computing entities, such as by communicating data, content, information, and/or similar terms used herein interchangeably that can be transmitted, received, operated on, processed, displayed, stored, and/or the like. Such communication may be executed using a wired data transmission protocol, such as fiber distributed data interface (FDDI), digital subscriber line (DSL), Ethernet, asynchronous transfer mode (ATM), frame relay, data over cable service interface specification (DOCSIS), or any other wired transmission protocol. Similarly, the hardware IP redaction computing entity <b>106</b> may be configured to communicate via wireless external communication networks using any of a variety of protocols, such as general packet radio service (GPRS), Universal Mobile Telecommunications System (UMTS), Code Division Multiple Access 2000 (CDMA2000), CDMA2000 1&#xd7; (1&#xd7;RTT), Wideband Code Division Multiple Access (WCDMA), Global System for Mobile Communications (GSM), Enhanced Data rates for GSM Evolution (EDGE), Time Division-Synchronous Code Division Multiple Access (TD-SCDMA), Long Term Evolution (LTE), Evolved Universal Terrestrial Radio Access Network (E-UTRAN), Evolution-Data Optimized (EVDO), High Speed Packet Access (HSPA), High-Speed Downlink Packet Access (HSDPA), IEEE 802.11 (Wi-Fi), Wi-Fi Direct, 802.16 (WiMAX), ultra-wideband (UWB), infrared (IR) protocols, near field communication (NFC) protocols, Wibree, Bluetooth protocols, wireless universal serial bus (USB) protocols, and/or any other wireless protocol.</p><p id="p-0084" num="0083">Although not shown, the hardware IP redaction computing entity <b>106</b> may include, or be in communication with, one or more input elements, such as a keyboard input, a mouse input, a touch screen/display input, motion input, movement input, audio input, pointing device input, joystick input, keypad input, and/or the like. The hardware IP redaction computing entity <b>106</b> may also include, or be in communication with, one or more output elements (not shown), such as audio output, video output, screen/display output, motion output, movement output, and/or the like.</p><heading id="h-0013" level="2">Exemplary Client Computing Entity</heading><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>4</b></figref> provides an illustrative schematic representative of a client computing entity <b>102</b> that can be used in conjunction with embodiments of the present invention. In general, the terms device, system, computing entity, entity, and/or similar words used herein interchangeably may refer to, for example, one or more computers, computing entities, desktops, mobile phones, tablets, phablets, notebooks, laptops, distributed systems, kiosks, input terminals, servers or server networks, blades, gateways, switches, processing devices, processing entities, set-top boxes, relays, routers, network access points, base stations, the like, and/or any combination of devices or entities adapted to perform the functions, operations, and/or processes described herein. Client computing entities <b>102</b> can be operated by various parties. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the client computing entity <b>102</b> can include an antenna <b>312</b>, a transmitter <b>304</b> (e.g., radio), a receiver <b>306</b> (e.g., radio), and a processing element <b>308</b> (e.g., CPLDs, microprocessors, multi-core processors, coprocessing entities, ASIPs, microcontrollers, and/or controllers) that provides signals to and receives signals from the transmitter <b>304</b> and receiver <b>306</b>, correspondingly.</p><p id="p-0086" num="0085">The signals provided to and received from the transmitter <b>304</b> and the receiver <b>306</b>, correspondingly, may include signaling information/data in accordance with air interface standards of applicable wireless systems. In this regard, the client computing entity <b>102</b> may be capable of operating with one or more air interface standards, communication protocols, modulation types, and access types. More particularly, the client computing entity <b>102</b> may operate in accordance with any of a number of wireless communication standards and protocols, such as those described above with regard to the hardware IP redaction computing entity <b>106</b>. In a particular embodiment, the client computing entity <b>102</b> may operate in accordance with multiple wireless communication standards and protocols, such as UMTS, CDMA2000, 1&#xd7;RTT, WCDMA, GSM, EDGE, TD-SCDMA, LTE, E-UTRAN, EVDO, HSPA, HSDPA, Wi-Fi, Wi-Fi Direct, WiMAX, UWB, IR, NFC, Bluetooth, USB, and/or the like. Similarly, the client computing entity <b>102</b> may operate in accordance with multiple wired communication standards and protocols, such as those described above with regard to the hardware IP redaction computing entity <b>106</b> via a network interface <b>320</b>.</p><p id="p-0087" num="0086">Via these communication standards and protocols, the client computing entity <b>102</b> can communicate with various other entities using concepts such as Unstructured Supplementary Service Data (USSD), Short Message Service (SMS), Multimedia Messaging Service (MMS), Dual-Tone Multi-Frequency Signaling (DTMF), and/or Subscriber Identity Module Dialer (SIM dialer). The client computing entity <b>102</b> can also download changes, add-ons, and updates, for instance, to its firmware, software (e.g., including executable instructions, applications, program modules), and operating system.</p><p id="p-0088" num="0087">According to one embodiment, the client computing entity <b>102</b> may include location determining aspects, devices, modules, functionalities, and/or similar words used herein interchangeably. For example, the client computing entity <b>102</b> may include outdoor positioning aspects, such as a location module adapted to acquire, for example, latitude, longitude, altitude, geocode, course, direction, heading, speed, universal time (UTC), date, and/or various other information/data. In one embodiment, the location module can acquire data, sometimes known as ephemeris data, by identifying the number of satellites in view and the relative positions of those satellites (e.g., using global positioning systems (GPS)). The satellites may be a variety of different satellites, including Low Earth Orbit (LEO) satellite systems, Department of Defense (DOD) satellite systems, the European Union Galileo positioning systems, the Chinese Compass navigation systems, Indian Regional Navigational satellite systems, and/or the like. This data can be collected using a variety of coordinate systems, such as the Decimal Degrees (DD); Degrees, Minutes, Seconds (DMS); Universal Transverse Mercator (UTM); Universal Polar Stereographic (UPS) coordinate systems; and/or the like. Alternatively, the location information/data can be determined by triangulating the client computing entity's <b>102</b> position in connection with a variety of other systems, including cellular towers, Wi-Fi access points, and/or the like. Similarly, the client computing entity <b>102</b> may include indoor positioning aspects, such as a location module adapted to acquire, for example, latitude, longitude, altitude, geocode, course, direction, heading, speed, time, date, and/or various other information/data. Some of the indoor systems may use various position or location technologies including RFID tags, indoor beacons or transmitters, Wi-Fi access points, cellular towers, nearby computing devices (e.g., smartphones, laptops) and/or the like. For instance, such technologies may include the iBeacons, Gimbal proximity beacons, Bluetooth Low Energy (BLE) transmitters, NFC transmitters, and/or the like. These indoor positioning aspects can be used in a variety of settings to determine the location of someone or something to within inches or centimeters.</p><p id="p-0089" num="0088">The client computing entity <b>102</b> may also comprise a user interface (that can include a display <b>316</b> coupled to a processing element <b>308</b>) and/or a user input interface (coupled to a processing element <b>308</b>). For example, the user interface may be a user application, browser, user interface, and/or similar words used herein interchangeably executing on and/or accessible via the client computing entity <b>102</b> to interact with and/or cause display of information/data from the hardware IP redaction computing entity <b>106</b>, as described herein. The user input interface can comprise any of a number of devices or interfaces allowing the client computing entity <b>102</b> to receive data, such as a keypad <b>318</b> (hard or soft), a touch display, voice/speech or motion interfaces, or other input device. In embodiments including a keypad <b>318</b>, the keypad <b>318</b> can include (or cause display of) the conventional numeric (0-9) and related keys (#, *), and other keys used for operating the client computing entity <b>102</b> and may include a full set of alphabetic keys or set of keys that may be activated to provide a full set of alphanumeric keys. In addition to providing input, the user input interface can be used, for example, to activate or deactivate certain functions, such as screen savers and/or sleep modes.</p><p id="p-0090" num="0089">The client computing entity <b>102</b> can also include volatile storage or memory <b>322</b> and/or non-volatile storage or memory <b>324</b>, which can be embedded and/or may be removable. For example, the non-volatile memory may be ROM, PROM, EPROM, EEPROM, flash memory, MMCs, SD memory cards, Memory Sticks, CBRAM, PRAM, FeRAM, NVRAM, MRAM, RRAM, SONOS, FJG RAM, Millipede memory, racetrack memory, and/or the like. The volatile memory may be RAM, DRAM, SRAM, FPM DRAM, EDO DRAM, SDRAM, DDR SDRAM, DDR2 SDRAM, DDR3 SDRAM, RDRAM, TTRAM, T-RAM, Z-RAM, RIMM, DIMM, SIMM, VRAM, cache memory, register memory, and/or the like. The volatile and non-volatile storage or memory can store databases, database instances, database management systems, data, applications, programs, program modules, scripts, source code, object code, byte code, compiled code, interpreted code, machine code, executable instructions, and/or the like to implement the functions of the client computing entity <b>102</b>. As indicated, this may include a user application that is resident on the entity or accessible through a browser or other user interface for communicating with the hardware IP redaction computing entity <b>106</b> and/or various other computing entities.</p><p id="p-0091" num="0090">In another embodiment, the client computing entity <b>102</b> may include one or more components or functionality that are the same or similar to those of the hardware IP redaction computing entity <b>106</b>, as described in greater detail above. As will be recognized, these architectures and descriptions are provided for exemplary purposes only and are not limiting to the various embodiments.</p><heading id="h-0014" level="2">Exemplary System Operations</heading><p id="p-0092" num="0091">Various embodiments of the present disclosure describe steps, operations, processes, methods, functions, and/or the like for securing hardware IP. In some embodiments, programmability is introduced into an ASIC design to increase the difficulty of formulating the ASIC design as a Boolean Satisfiability (SAT) problem and causes any kind of oracle-based functional attack on the design to be much more complex. Generating a SAT-hard design may comprise transforming an original ASIC design by replacing logic blocks in the original ASIC design with configurable LUTs and inserting programmable components. Examples of programmable components include programmable interconnects, programmable flip-flops, and programmable clock gating.</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>5</b></figref> presents a flowchart of a process for redacting an ASIC design according to some embodiments of the present disclosure. The process <b>500</b> includes example operations that may be performed by the apparatus <b>200</b>, and the apparatus <b>200</b> comprises means, such as processing element <b>205</b>, memories <b>210</b> and <b>215</b>, network interface <b>220</b>, and/or the like, for performing the example operations.</p><p id="p-0094" num="0093">At step <b>502</b>, a file including data representative of hardware IP comprising an original design of a circuit is received. The original design may comprise a hardware netlist representative of, for example, a circuit or circuitry components. In particular, the original design may be associated with ASIC components according to various embodiments of the present disclosure. The hardware netlist may be represented by a hypergraph data structure.</p><p id="p-0095" num="0094">For example, referring to <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, a sequential circuit is shown. The sequential circuit may be represented by a hypergraph as depicted in <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> according to some embodiments of the present disclosure. A hypergraph data structure may comprise a generalized graph including edges that can connect two or more nodes. Hypergraphs can be used to generate a graphical representation of a hardware netlist. A hypergraph may include nodes that represent logic gates (combinational or sequential) and edges that represent nets connected to such gates. The hypergraph structure can be used to store any information about the design components and any graph-based algorithm can be applied on the hypergraphs for analysis.</p><p id="p-0096" num="0095">Referring back to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, at step <b>504</b>, the data from the file is converted into a hypergraph. A hypergraph may be generated based on the original design comprising a Boolean network in the form of a directed acyclic graph (DAG). The DAG may be representative of a gate-level netlist of hardware IP associated with the original design. The gate-level netlist may comprise a list of logic gates of the circuit and their respective connections. In some embodiments, the logic gates from the netlist are translated into nodes, and their connections are converted into edges that connect the nodes.</p><p id="p-0097" num="0096">According to various embodiments of the present disclosure, security critical nodes may be removed from the hypergraph and replaced with configurable LUTs, which results in a partially configurable ASIC design (as opposed to a fully programmable FPGA). To increase the amount of logic gates removed for each configurable LUT (LUT coverage) and reduce the overall area overheads, the DAG may be limited to basic logic gates. For example, the DAG is limited to AND, OR, and inverter (INV) gates that results in an AND-OR-INV graph (AOIG). In addition to the increased LUT coverage, the hypergraph network may permit the use of standard graph algorithms for analyzing the original design's characteristics.</p><p id="p-0098" num="0097">At step <b>506</b>, security critical nodes of the hypergraph are identified. Identifying security critical nodes of the hypergraph may comprise identifying candidate nodes in the hypergraph using a cost-based approach where a cost of removal is computed for each node of the hypergraph. A cost of removal can be assigned to the nodes based on a cost function cost<sub>R</sub>, and a cumulative cost of nodes, e.g., within logic cones comprising a set of nodes, can be determined as the sum of the costs of its members. The cost function cost<sub>R </sub>can be calculated using stochastic properties, such as, Shannon entropy, E, and structural and/or functional parameters of the original design, such as fan-in cone FI and fan-out cone FO, as follows:</p><p id="p-0099" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>cost<sub>R</sub><i>=f</i>(<i>E</i>,FI,FO)&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0100" num="0098">In other embodiments, parameters, such as switching activity or signal probability skew at gate output and size of logic cones may also be used to compute the cost of removal. Nodes in the hypergraph that have high cost<sub>R </sub>values (e.g., exceeding a predetermined threshold) may be identified as the security critical nodes. A cutoff cost<sub>R </sub>may also be set to, e.g., 30% of all nodes (which may be configured depending upon the amount of logic to be redacted). It is noted that according to some embodiments of the present disclosure, the step of identifying security critical nodes may be optional and omitted.</p><p id="p-0101" num="0099">At step <b>508</b>, nodes of the hypergraph are replaced with configurable LUTs based on a logic replacement heuristic. According to an exemplary embodiment, the logic replacement heuristic may generate a mapping to identify nodes of the hypergraph for redaction using configurable LUTs. In some embodiments, the logic redaction heuristic may be used to find an optimal LUT mapping solution L<sub>opt</sub>. The logic redaction heuristic may evaluate the removal cost, costR, using Equation (1) for all the nodes in the hypergraph and identify the security critical nodes corresponding to sensitive logic gates in the original according to step <b>506</b>. The number of security critical nodes to be removed may be configurable and can vary based on security or attack resistance requirements. In some embodiments, the logic replacement heuristic targets nodes associated with combinational Boolean functions in the hypergraph while nodes associated with sequential logic in the hypergraph may be unmodified.</p><p id="p-0102" num="0100">In one embodiment, a maximum fan-out free cone (MFFC) is determined for each security critical node in the hypergraph through graph traversal. The determined MFFCs are recursively analyzed to obtain local optimal cuts for the security critical nodes, in terms of both area and delay, which can be mapped to a N&#xd7;1 configurable LUT. The local optimal cuts are stored in a global_cut_array. The global_cut_array may then be iteratively traversed using a greedy heuristic to select a globally optimal cut from the local optimal cuts of all the security critical nodes in the hypergraph. Thresholds may be used to select the cuts. Thresholds may be determined from a normalized area and delay costs of each cut, and the thresholds may be incremented after every iteration, until a pre-defined security target is met. The selected globally optimal cuts may then be mapped to corresponding configurable LUTs of the same or suitable size to form an intermediate LUT mapping L<sub>inter </sub>for the hypergraph. A post-processing step may be performed after global cut selection to analyze, and if possible, improve upon, the intermediate mapping L<sub>inter</sub>. The resulting LUT mapping solution L<sub>opt </sub>is optimal for a pre-defined security target or under overhead cost constraints. The mapped LUTs may be ranked in the order of a proximity metric, calculated from the relative distance of the logic gates replaced by configurable LUTs in the hypergraph. As such, configurable LUTs inserted into the hypergraph are chained to each other based on the ranking such that it does not violate any synthesis constraint.</p><p id="p-0103" num="0101">In some embodiments, a configurable LUT <b>700</b> can be realized in ASIC using a customized LUT cell or existing standard cells. A standard cell-based implementation for a 3&#xd7;1 configurable LUT, according to some embodiments of the present disclosure, is illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, where an 8&#xd7;1 MUX is designed using smaller MUXes available in any standard cell library. A configuration bitstream may be generated for the configurable LUTs. The configuration bitstream may comprise an array of constant bits that are stored in latches, flip-flops, or other memory/storage cells. The customization of the LUT cells enables optimum placement of standard cells, thereby reducing the removal and replacement overheads. The correct functionality of the replaced logic may be restored when the correct constant bits are loaded in the configuration latches. These constant bits can be shared with multiple configurable LUTs to minimize the overhead.</p><p id="p-0104" num="0102">Referring back to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, at step <b>510</b>, one or more programmable components are inserted into the hypergraph based on the configurable LUTs. Programmable components may include, but are not limited to programmable interconnects, programmable flip-flops, and programmable clock gating. In some embodiments, a programmable interconnect may be placed at the output of a randomly selected LUT based on L<sub>opt </sub>determined from the logic redaction heuristic. Other programmable components (e.g., programmable flip-flops, and programmable clock gating) may also be connected to inputs of the programmable interconnect with edges in the hypergraph located at the same logic depth as the configurable LUT, to prevent combinational loops from forming. The SAT-attack resilience of the transformed design is improved by the insertion of programmable components into the hypergraph of the original design. Each programmable interconnect may comprise a SAT-proof block designed using, for example, XOR/XNOR gates and multiplexers (MUXes), as these logic gates have a high clause/variable ratio, which makes it difficult for the SAT solver to compute the distinguishing input pattern.</p><p id="p-0105" num="0103">Referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, different types of programmable components are presented according to some embodiments of the present disclosure. Programmable components include, but are not limited to programmable interconnects <b>802</b>, programmable flip-flops <b>804</b>, and programmable clock gating <b>806</b>.</p><p id="p-0106" num="0104">In some embodiments, a programmable interconnect <b>802</b> can be implemented in ASIC as permutation boxes or switch boxes, crossbars, MUXes, demultiplexers (deMUXes), and XOR/XNOR gates. Such interconnects may be strategically placed in the data path of a transformed design to maximize security. The interconnects are properly routed when they are programmed with the correct configuration bits.</p><p id="p-0107" num="0105">In some embodiments, programmable flip-flops <b>804</b> may comprise a control path in a sequential design including one or more finite-state machines (FSMs). The programmable flip-flops <b>804</b> in such FSMs can be made programmable to replace security critical parts of the state space in the design. Such programming alters the state transition function of a sequential design where the original state space can be reached only when the programmable flip-flops <b>804</b> are correctly programmed.</p><p id="p-0108" num="0106">In some embodiments, programmable clock gating <b>806</b> may comprise a clock tree in a sequential design that is gated at suitable locations and made programmable. This ensures that the clock signal reaches other logic blocks at the correct level only if correct constant bit is used for clock gating.</p><p id="p-0109" num="0107">In an alternative embodiment, logic cones that store security critical information may be identified and mapped to a M&#xd7;N configurable LUT of a suitable size, where both M and N can be any integer. As each configurable LUT may include an array of MUXes, LUT outputs can be taken from different MUX levels. This mapping can be realized for any Boolean logic using Shannon Decomposition Theorem, or Boole's Expansion Theorem, as illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, according to some embodiments, for the following example:</p><p id="p-0110" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Y</i>1=<i>f</i>(<i>A,B,C</i>)=(<i>AB+<o ostyle="single">C</o></i>)&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0111" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Y</i>2=<i>f</i>(<i>A,B</i>)=<i>AB</i>&#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0112" num="0108">Using Shannon Decomposition it can be shown that, Y1=f(A,B,C)=<o ostyle="single">C</o>&#xb7;f(A,B,0)+C&#xb7;f(A,B,1)=<o ostyle="single">C</o>(AB)+C(1)=<o ostyle="single">C</o>(Y2)+C(1).</p><p id="p-0113" num="0109">In yet another embodiment, in the absence of determining removal costs for nodes in the hypergraph, all logic (combinational and/or sequential) in a design can be replaced using a network of configurable LUTs, having random sizes, to maximize security. The resultant transformed design may be fully programmable, and analogous to an FPGA, but optimized for area, power, and delay. <figref idref="DRAWINGS">FIGS. <b>10</b>A and <b>10</b>B</figref> depict replacement of all combinational logic in an exemplary hypergraph with a LUT network according to some embodiments of the present disclosure. Any combinational or sequential design may be mapped to a fully programmable network of M&#xd7;N LUTs.</p><p id="p-0114" num="0110">Referring back to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, at step <b>512</b>, a configuration bitstream comprising configuration bits is generated for the configurable LUTs inserted into the hypergraph by simulating the replaced logic for each configurable LUT. The logic may be simultaneously simulated using a common testbench applying 2N input patterns, where N is the largest configurable LUT size in L<sub>opt</sub>. The generated bitstream can be loaded or programmed to the inserted configurable LUTs, for example, during power-up of hardware corresponding to the original design, to bring the design in functional mode. An exemplary bitstream configuration architecture according to some embodiments of the present disclosure is presented in <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0115" num="0111">Referring back to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, at step <b>514</b>, a redacted design output file is generated based on the hypergraph including the one or more configurable LUTs and programmable components.</p><p id="p-0116" num="0112">According to another embodiment, a method for redacting an ASIC design is visualized with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>. An original design of hardware IP is received where security critical logic cones are identified (<b>1202</b>). Configurable LUTs are created for equivalent logic of the security critical cones to be removed (<b>1204</b>). The configurable LUTs are placed where logic is removed and connecting them in a chain for later configuration with a bitstream.</p><p id="p-0117" num="0113"><figref idref="DRAWINGS">FIG. <b>13</b>A</figref> presents an exemplary original design <b>1300</b>A. The original design <b>1300</b>A comprises a combinational logic space <b>1302</b> and design FFs <b>1304</b>. In some embodiments, to maximize IP security, the entirety of combinational logic space <b>1302</b> may be redacted. <figref idref="DRAWINGS">FIG. <b>13</b>B</figref> presents an exemplary fully redacted design <b>1300</b>B according to some embodiments of the present disclosure. The fully redacted design comprises original design FFs <b>1304</b> (unmodified), and redacted logic <b>1302</b>B including an array of configurable LUTs and programmable components. Such a design hides any structural information about the original design's intent. Configuration bitstream FFs may form a long shift register <b>1306</b> and remaining combinational logic may appear as a sea of MUXes realizing the LUTs and programmable components in the redacted design <b>1300</b>B.</p><p id="p-0118" num="0114">As discussed above, the logic replacement heuristic from step <b>508</b> may target combinational Boolean functions and not sequential logic. As such, original design FFs containing vital information about the original design intent and state space may be vulnerable to an attacker. To prevent this eventuality, in some embodiments, design FFs can be selectively removed and replaced with programmable FFs. Under full redaction, the entire sequential logic in the design can be replaced using this scheme, but with a significant increase in overhead. In order to realize programmable FFs, two approaches may be taken.</p><p id="p-0119" num="0115"><figref idref="DRAWINGS">FIG. <b>14</b></figref> presents an exemplary redacted design <b>1400</b> with programmable FFs according to an embodiment of the present disclosure. Design FFs <b>1402</b> and bitstream FFs <b>1404</b> may be selectively replaced with scan-based FFs <b>1406</b>. Scan FFs <b>1406</b> may be strategically placed in the shift register used for configuration of the redacted design. A scan enable (SE) signal <b>1408</b> can be used to select whether the scan FFs <b>1406</b> function as a configuration bit or as a design FF <b>1402</b>, hence making the scan FF <b>1406</b> programmable. The SE bit value can be stored in a separate shift register or can be part of the existing configuration register. A configure signal <b>1410</b> can be used to control programmable scan FFs <b>1406</b> and configure them to their correct value during operation. The configure signal <b>1410</b> may also be used to multiplex between the design clock signals and the configuration bitstream configuration clocks.</p><p id="p-0120" num="0116">The design FFs <b>1402</b> programmed using this approach may be connected to the select inputs of MUXes of MUX array <b>1412</b> in the redacted design <b>1400</b>, which can differentiate them from the configuration bitstream FFs <b>1404</b> in the shift register, which are connected to the data inputs of MUXes of MUX array <b>1412</b>. To remove such structural signatures, the combinational logic gates at the output of design FFs <b>1402</b> can be realized using MUXes of MUX array <b>1412</b> and constants from other bitstream registers instead of custom LUTs. As a result, the design FFs <b>1402</b> in the redacted circuit may be connected to the data inputs of MUXes of MUX array <b>1412</b>, making them identical to the configuration bitstream FFs <b>1404</b>.</p><p id="p-0121" num="0117">According to another embodiment, design FFs may be implemented using programmable components that have sequential elements, similar to FPGA. <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> presents an exemplary design <b>1500</b>A including a two-input configurable LUT <b>1502</b> comprising an original design FF <b>1504</b> at the output. The design FF <b>1504</b> at the output of the configurable LUT can be coupled to a FPGA-like configurable block via input into another configurable LUT. <figref idref="DRAWINGS">FIG. <b>15</b>B</figref> presents such FPGA-like configuration block <b>1506</b> used in redacted design <b>1500</b>B to realize a programmable FF according to some embodiments of the present disclosure. To increase security, additional dummy FF <b>1508</b> can also be introduced in the redacted design <b>1500</b>B. Such modifications may increase the state-space of the design visible to an attacker.</p><heading id="h-0015" level="1">Optimizing Transformations</heading><p id="p-0122" num="0118">For very large designs with millions of gates, full redaction of the combination logic may lead to a very long bitstream pattern. In such designs, it may be necessary to limit the configuration bitstream size for the ease of configuring the design and reduce the overhead from the configuration architecture. Moreover, long bitstreams can affect the testability of the designs, which is necessary for transformed designs to ensure that the true functionality is maintained during real-life operations.</p><p id="p-0123" num="0119"><figref idref="DRAWINGS">FIGS. <b>16</b>A and <b>16</b>B</figref> present bitstream compaction according to some embodiments of the present disclosure.</p><p id="p-0124" num="0120">The LUTs used according to various embodiments of the present disclosure may contain duplicate programming bits within the configurable LUTs. According to some embodiments, this redundancy can be exploited via LUT compaction, where redundant bits are removed along with the connected MUXes. <figref idref="DRAWINGS">FIGS. <b>17</b>A and <b>17</b>B</figref> are presented to depict an implementation of LUT compaction. As depicted, LUTs having duplicative bit pattern &#x201c;10&#x201d; may be morphed together into a single LUT. Duplicative LUT compaction may also be implemented along with bitstream compaction at a global level to optimize the configuration bitstream size for extremely large designs.</p><p id="p-0125" num="0121">The bitstream configuration architecture depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref> may comprise a long daisy-chained shift register that is loaded with a configuration bitstream. For a large design, the configuration architecture contributes to significant overheads, even after bitstream compaction and LUT compaction. According to some embodiments, to reduce the overheads, a latch-based configuration architecture may be used, where part of the shift-register is implemented using latches and a small FSM-based controller to generate the enable signals for the latches as shown in <figref idref="DRAWINGS">FIGS. <b>18</b>, <b>19</b>, and <b>20</b></figref>.</p><p id="p-0126" num="0122">The configuration bitstream for the configurable LUTs includes an array of constant bits (0 or 1). According to some embodiments, the bits of the configuration bitstream are shared between the MUXes in a configurable LUT (intra-LUT sharing) or in between configurable LUTs (inter-LUT sharing), as illustrated in <figref idref="DRAWINGS">FIG. <b>21</b></figref>. Constant sharing (both intra-LUT and inter-LUT) may result in a significant reduction in chip area as the transformed designs with configurable LUTs are optimized. For a modified 3&#xd7;1 LUT, the reduction in area due to constant sharing is shown in <figref idref="DRAWINGS">FIG. <b>22</b></figref>. As depicted in <figref idref="DRAWINGS">FIG. <b>22</b></figref>, this reduction in chip area comes at the cost of security, as the size of configuration bitstream decreases (halved in this case) due to constant sharing. The trade-off between area overhead and the security goal may dictate how constant sharing is implemented during design transformation.</p><p id="p-0127" num="0123">In some embodiments, MUX sharing may be implemented between configurable LUTs having MUXes with identical inputs and configuration bitstream. Such MUXes can be replaced with a single MUX that is shared between the configurable LUTs. The shift registers used to store the bits of the configuration bitstream for the configurable LUTs may also be shortened, as the shared MUX needs to be configured only once. The area reduction for two 3&#xd7;1 configurable LUTs is illustrated in <figref idref="DRAWINGS">FIG. <b>23</b></figref>. MUX sharing may also lead to a decrease in bitstream size, and as in the case of constant sharing, as discussed above, the trade-off between security and area overhead may limit the degree of MUX-sharing during programmable replacement of logic blocks.</p><p id="p-0128" num="0124">In some embodiments, configurable LUTs may be morphed by connecting some of the MUX inputs directly to VDD (Logic 1) and GND (Logic 0). The remaining MUX inputs may be configured using latches or other memory elements. Morphing can take advantage of constant propagation during synthesis, where synthesis tools try to minimize the hardware utilization by optimizing logic driven by Logic 1 or Logic 0. <figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates the impact of morphing a 3&#xd7;1 configurable LUT. Morphing can be used during transformation to achieve a low area overhead target, while still removing security critical logic cones from the original design.</p><p id="p-0129" num="0125">The configuration bitstream should be correctly applied to enable the original functionality of the design. In some embodiments, to apply the configuration bitstream efficiently with minimum overheads, a constant array can be implemented in two modes, either using a chain of shift registers, or using a 2D SRAM.</p><p id="p-0130" num="0126">The constant arrays can be realized as shift registers of varying sizes (16-bit, 32-bit, 64-bit, etc.) that include latches with enable signals, where the shift register is loaded serially. MUX arrays <b>2504</b> of configurable LUTs, as well as the other added programmable components may be connected to latches of a constant array <b>2502</b> on both sides, as shown in <figref idref="DRAWINGS">FIG. <b>25</b></figref>. Enable signals for the latches may be generated by a scan-chain based configuration architecture. Constant sharing <b>2506</b> is implemented with constant array <b>2502</b> to limit the length of the configuration bitstream and reduce the number of latches in the shift register, which reduces the overhead even further.</p><p id="p-0131" num="0127">The configuration bitstream for the programmable component can be read out at bit level from all four sides of a SRAM array as illustrated in <figref idref="DRAWINGS">FIG. <b>26</b></figref>, according to some embodiments of the present disclosure. To store the constant bits more efficiently, constant arrays can be implemented using a 2D memory array <b>2602</b>.</p><p id="p-0132" num="0128">In some embodiments, transformation logic in the form of permutation or XORing blocks are inserted between the constant array storing the configuration bitstream and the programmable components to create a constant transformation array (CoTA). A random and device-specific shifting key may be used to program each transformation block, thus causing transformations to be randomized independent of the configuration bitstream. Randomness can also be imparted into the removal cost function, which is combined with the random shifting of keys to make the configuration bitstream device specific. <figref idref="DRAWINGS">FIG. <b>27</b></figref> presents an exemplary implementation of CoTA according to some embodiments of the present disclosure.</p><p id="p-0133" num="0129">Embodiments of the present disclosure can be applied to any conventional FPGA to realize application specific programmable replacement of security critical logic cones using programmable components. Modern FPGAs may include thousands of CLBs, where each CLB contains multiple slices comprised of configurable LUTs, carry chains, MUXes and D flip-flops. Some slices also include additional memory elements like RAM and shift-registers. The multiplexing logic for the programmable LUTs in embodiments of the present disclosure can be mapped to FPGA LUTs in the slices and the constant array containing the bits of the configuration bitstream can be executed using the storage elements in the slices. Alternatively, the LUTs can also be configured using the bitstream configuration file used by the FPGA. The added programmable component is connected to the switch matrices in the FPGA containing programmable component points (PIPs). <figref idref="DRAWINGS">FIG. <b>28</b></figref> depicts an exemplary implementation using a FPGA according to some embodiments of the present disclosure.</p><p id="p-0134" num="0130">Moreover, embodiments of the present disclosure can be implemented using custom FPGAs to optimize resource utilization during transformation. Specialized FPGA architectures can be developed with provisions to implement custom M&#xd7;N MUXes and the corresponding shift registers to store the configuration bitstream. Designing custom FPGAs can provide more room for design transformation. The threat model for FPGAs is significantly different from ASIC, and FPGA application of PASA protects hardware IPs against field-based confidentiality and integrity attacks.</p><p id="p-0135" num="0131">Structural attacks like graph or network matching attacks that take advantage of known circuit graphs or networks and apriori knowledge about structural correlation in the design, as well as integrity attacks on a hardware IP can be made intractable by randomizing the structural transformation. Embodiments of the present disclosure provide techniques that address structural attacks.</p><p id="p-0136" num="0132">In some embodiments, the input design may be structurally transformed before removal and programmable component replacement. The pre-removal transformation can be obtained through logic locking or obfuscation of the original design. Logic locking and obfuscation techniques may include built-in measures which randomize the structural transformation to prevent structural attacks. An example of pre-removal transformation that can be integrated with embodiments of the present disclosure is HARPOON, a state-space obfuscation technique with low-hardware cost, which introduces dummy FSMs (DFSMs) into the design, as illustrated in <figref idref="DRAWINGS">FIG. <b>29</b></figref>.</p><p id="p-0137" num="0133">In some embodiments, structural decorrelation can also be incorporated into embodiments of the present disclosure by varying design constraints used during the final synthesis stage in the workflow. A standard synthesis tool may provide a number of optimization constraints which can be easily modified to control the synthesis process. Such configurable constraints may be leveraged during synthesis to insert more randomness during transformation. For example, performing constrained synthesis with high area effort versus high power effort will produce different versions of the transformed design that is optimized for area and power respectively.</p><p id="p-0138" num="0134">In some embodiments, the hypergraph generated from the original design may provide another option for structural decorrelation. In particular, the hypergraph can be partitioned into a set of smaller and roughly equal graphs using a partitioning tool. Based on the size of the input design, the same hypergraph can be partitioned randomly in a large number of ways, and in each case, the transformed design will be structurally unique.</p><p id="p-0139" num="0135">In some embodiments, the outputs of randomly chosen configurable LUTs and/or programmable components may be inverted to increase structural randomness. Inverting the output of any configurable LUT and/or programmable component can alter its configuration bitstream. For example, if a 2-input AND gate is replaced by a configurable LUT 2&#xd7;1, the configuration bitstream for the configurable LUT changes from 4&#x2032;b0001 to 4&#x2032;b1110 if output of the configurable LUT is inverted. Structural decorrelation can also be significantly increased by randomly choosing programmable components for output inversion.</p><p id="p-0140" num="0136">In some embodiments, the size of a logic cone to be replaced may be varied. The size of the logic cone selected for replacement determines the size (the value of M and N) of a configurable LUT.</p><p id="p-0141" num="0137">In some embodiments, the configurable LUTs inserted for programmable replacement can be incrementally decomposed into smaller configurable LUTs for structural decorrelation, for a given logic cone. LUT decomposition also allows delocalization of the configuration constants of larger configurable LUTs, further increasing the randomness.</p><heading id="h-0016" level="1">Example Experimental Implementation of Various Embodiments</heading><p id="p-0142" num="0138">The implementation results for multiple designs from MIT CEP benchmark suite are provided&#x2014;total 10 open-source benchmarks where 10%, and 50% targeted removal (and replacement with LUT network) of logic cone were performed. The area overhead values for the 250 nm LEDA standard cell library are presented in Table I.</p><p id="p-0143" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE I</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Area overheads obtained for various MIT-CEP benchmarks.</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="70pt" align="center"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="56pt" align="center"/><tbody valign="top"><row><entry/><entry/><entry># cells before</entry><entry>10%</entry><entry>50%</entry></row><row><entry/><entry>Benchmarks</entry><entry>transformation</entry><entry>redacted</entry><entry>redacted</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="70pt" align="char" char="."/><colspec colname="3" colwidth="35pt" align="char" char="."/><colspec colname="4" colwidth="56pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>DES3</entry><entry>1896</entry><entry>25.86%</entry><entry>89.03%</entry></row><row><entry/><entry>FIR</entry><entry>2514</entry><entry>21.91%</entry><entry>109.28%</entry></row><row><entry/><entry>IIR</entry><entry>3784</entry><entry>22.31%</entry><entry>114.64%</entry></row><row><entry/><entry>MD5</entry><entry>3551</entry><entry>35.24%</entry><entry>114.78%</entry></row><row><entry/><entry>SHA256</entry><entry>6491</entry><entry>24.57%</entry><entry>140.66%</entry></row><row><entry/><entry>DFT</entry><entry>122189</entry><entry>23.02%</entry><entry>115.99%</entry></row><row><entry/><entry>IDFT</entry><entry>121094</entry><entry>23.17%</entry><entry>112.02%</entry></row><row><entry/><entry>AES192</entry><entry>154893</entry><entry>21.73%</entry><entry>95.63%</entry></row><row><entry/><entry>GPS</entry><entry>158030</entry><entry>23.01%</entry><entry>99.25%</entry></row><row><entry/><entry>RSA</entry><entry>205798</entry><entry>27.06%</entry><entry>118.19%</entry></row><row><entry/><entry>Average</entry><entry>78024</entry><entry>24.79%</entry><entry>110.95%</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0017" level="1">CONCLUSION</heading><p id="p-0144" num="0139">It should be understood that the examples and embodiments described herein are for illustrative purposes only and that various modifications or changes in light thereof will be suggested to persons skilled in the art and are to be included within the spirit and purview of this application.</p><p id="p-0145" num="0140">Many modifications and other embodiments of the present disclosure set forth herein will come to mind to one skilled in the art to which the present disclosures pertain having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore, it is to be understood that the present disclosure is not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claim concepts. Although specific terms are employed herein, they are used in a generic and descriptive sense only and not for purposes of limitation.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of protecting an integrated circuit design against confidentiality and integrity attacks, the method comprising:<claim-text>receiving, by a computing device, a file including data comprising a hardware netlist;</claim-text><claim-text>converting, by the computing device, the data into a hypergraph, the hypergraph including nodes representative of logic gates and edges representative of connections of the logic gates;</claim-text><claim-text>replacing, by the computing device, given ones of the nodes in the hypergraph with configurable lookup tables (LUTs);</claim-text><claim-text>inserting, by the computing device, one or more first programmable components into the hypergraph based on the configurable LUTs; and</claim-text><claim-text>generating, by the computing device, a redacted design output file based on the hypergraph including the configurable LUTs and the one or more first programmable components.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the hypergraph comprises a directed acyclic graph consisting of AND, OR, and inverter gates.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising identifying security critical nodes based on cost of removal.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> further comprising calculating, for each node of the hypergraph, a cost function using stochastic properties including Shannon entropy E, fan-in cone FI, and fan-out cone FO.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref> further comprising:<claim-text>determining, for the security critical nodes, a maximum fan-out free cone (MFFC);</claim-text><claim-text>obtaining local optimal cuts by analyzing the MFFC based on area and delay; and</claim-text><claim-text>selecting globally optimal cuts from the local optimal cuts based on normalized area and delay cost of the local optimal cuts based on a pre-defined security target.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref> further comprising:<claim-text>mapping the globally optimal cuts to the configurable LUTs according to size; and</claim-text><claim-text>chaining the configurable LUTs based on order of a proximity metric calculated from relative distance of the logic gates corresponding to the replaced given ones of the nodes.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein inserting the one or more first programmable components into the hypergraph further comprises inserting a programmable interconnect at an output of a given one of the configurable LUTs.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref> further comprising connecting one or more second programmable components to inputs of the programmable interconnect at a same logic depth as the given configurable LUT.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref> wherein the one or more second programmable components comprise at least one of programmable flip-flops (FFs) and programmable clock gating.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref> wherein the programmable interconnect comprises at least one of XOR/XNOR gates and multiplexers (MUXes).</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:<claim-text>identifying logic cones from the hypergraph that store critical information; and</claim-text><claim-text>mapping the logic cones a M&#xd7;N configurable LUT using Shannon Decomposition Theorem or Boole's Expansion Theorem.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising:<claim-text>generating a configuration bitstream for the configurable LUTs by simulating logic corresponding to the replaced nodes.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the configurable LUTs are programmed using the configuration bitstream.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein the configuration bitstreams are stored in one or more shift registers of varying sizes.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref> wherein each of the one or more shift registers includes a plurality of latches each of which includes an enable pin.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> further comprising loading the configuration bitstream to<claim-text>a daisy-chained shift register comprising a latch-based configuration including a plurality of latches and a finite-state machine-based controller, the finite-state machine-based controller generating enable signals for the plurality of latches.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref> wherein bits of the configuration bitstream are shared between MUXes within a given configurable LUT or in between the configurable LUTs.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising replacing nodes in the hypergraph corresponding to flip-flops in a shift register with scan-based FFs.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the scan-based FFs are controllable via a scan enable signal to select between configuration bit or design FF functionality.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref> further comprising:<claim-text>connecting the scan-based FFs to select inputs of MUXes of a MUX array; and</claim-text><claim-text>coupling an output of a given one of the configurable LUTs to a field-programmable gate array-like block.</claim-text></claim-text></claim></claims></us-patent-application>